
ADXL345_test_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009210  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  080093e0  080093e0  000193e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0ac  0800a0ac  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0b4  0800a0b4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b4  0800a0b4  0001a0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0b8  0800a0b8  0001a0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a0bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001e8  0800a2a4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  0800a2a4  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f24  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026af  00000000  00000000  0003113c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  000337f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  000343f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f54  00000000  00000000  00034ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f64e  00000000  00000000  00038e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd897  00000000  00000000  00048492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115d29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c0  00000000  00000000  00115d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080093c8 	.word	0x080093c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	080093c8 	.word	0x080093c8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b085      	sub	sp, #20
 8001030:	af02      	add	r7, sp, #8
 8001032:	4604      	mov	r4, r0
 8001034:	4608      	mov	r0, r1
 8001036:	4611      	mov	r1, r2
 8001038:	461a      	mov	r2, r3
 800103a:	4623      	mov	r3, r4
 800103c:	80fb      	strh	r3, [r7, #6]
 800103e:	4603      	mov	r3, r0
 8001040:	80bb      	strh	r3, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	807b      	strh	r3, [r7, #2]
 8001046:	4613      	mov	r3, r2
 8001048:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 800104a:	88f8      	ldrh	r0, [r7, #6]
 800104c:	88b9      	ldrh	r1, [r7, #4]
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	883c      	ldrh	r4, [r7, #0]
 8001052:	8b3b      	ldrh	r3, [r7, #24]
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	4623      	mov	r3, r4
 8001058:	f000 fa88 	bl	800156c <ST7735_FillRectangle>
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}

08001064 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
 800106a:	4603      	mov	r3, r0
 800106c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <fillScreen+0x2c>)
 8001070:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <fillScreen+0x30>)
 8001076:	f9b3 1000 	ldrsh.w	r1, [r3]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	460b      	mov	r3, r1
 8001080:	2100      	movs	r1, #0
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff ffd2 	bl	800102c <fillRect>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000218 	.word	0x20000218
 8001094:	2000021c 	.word	0x2000021c

08001098 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2104      	movs	r1, #4
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <ST7735_Select+0x14>)
 80010a2:	f001 ffa7 	bl	8002ff4 <HAL_GPIO_WritePin>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40020800 	.word	0x40020800

080010b0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2104      	movs	r1, #4
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <ST7735_Unselect+0x14>)
 80010ba:	f001 ff9b 	bl	8002ff4 <HAL_GPIO_WritePin>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020800 	.word	0x40020800

080010c8 <ST7735_Reset>:

void ST7735_Reset()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2108      	movs	r1, #8
 80010d0:	4806      	ldr	r0, [pc, #24]	; (80010ec <ST7735_Reset+0x24>)
 80010d2:	f001 ff8f 	bl	8002ff4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80010d6:	2005      	movs	r0, #5
 80010d8:	f001 f9d8 	bl	800248c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2108      	movs	r1, #8
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <ST7735_Reset+0x24>)
 80010e2:	f001 ff87 	bl	8002ff4 <HAL_GPIO_WritePin>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020800 	.word	0x40020800

080010f0 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2101      	movs	r1, #1
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <ST7735_WriteCommand+0x2c>)
 8001100:	f001 ff78 	bl	8002ff4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001104:	1df9      	adds	r1, r7, #7
 8001106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800110a:	2201      	movs	r2, #1
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <ST7735_WriteCommand+0x30>)
 800110e:	f002 fdce 	bl	8003cae <HAL_SPI_Transmit>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020800 	.word	0x40020800
 8001120:	20000358 	.word	0x20000358

08001124 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2101      	movs	r1, #1
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <ST7735_WriteData+0x2c>)
 8001134:	f001 ff5e 	bl	8002ff4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b29a      	uxth	r2, r3
 800113c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4804      	ldr	r0, [pc, #16]	; (8001154 <ST7735_WriteData+0x30>)
 8001144:	f002 fdb3 	bl	8003cae <HAL_SPI_Transmit>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020800 	.word	0x40020800
 8001154:	20000358 	.word	0x20000358

08001158 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800116a:	e034      	b.n	80011d6 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ffb9 	bl	80010f0 <ST7735_WriteCommand>

        numArgs = *addr++;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001188:	7abb      	ldrb	r3, [r7, #10]
 800118a:	b29b      	uxth	r3, r3
 800118c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001190:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001192:	7abb      	ldrb	r3, [r7, #10]
 8001194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001198:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800119a:	7abb      	ldrb	r3, [r7, #10]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d008      	beq.n	80011b2 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80011a0:	7abb      	ldrb	r3, [r7, #10]
 80011a2:	4619      	mov	r1, r3
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ffbd 	bl	8001124 <ST7735_WriteData>
            addr += numArgs;
 80011aa:	7abb      	ldrb	r3, [r7, #10]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	4413      	add	r3, r2
 80011b0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80011b2:	89bb      	ldrh	r3, [r7, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00e      	beq.n	80011d6 <DisplayInit+0x7e>
            ms = *addr++;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80011c2:	89bb      	ldrh	r3, [r7, #12]
 80011c4:	2bff      	cmp	r3, #255	; 0xff
 80011c6:	d102      	bne.n	80011ce <DisplayInit+0x76>
 80011c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011cc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80011ce:	89bb      	ldrh	r3, [r7, #12]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 f95b 	bl	800248c <HAL_Delay>
    while(numCommands--) {
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	1e5a      	subs	r2, r3, #1
 80011da:	73fa      	strb	r2, [r7, #15]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1c5      	bne.n	800116c <DisplayInit+0x14>
        }
    }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4604      	mov	r4, r0
 80011f4:	4608      	mov	r0, r1
 80011f6:	4611      	mov	r1, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	4623      	mov	r3, r4
 80011fc:	71fb      	strb	r3, [r7, #7]
 80011fe:	4603      	mov	r3, r0
 8001200:	71bb      	strb	r3, [r7, #6]
 8001202:	460b      	mov	r3, r1
 8001204:	717b      	strb	r3, [r7, #5]
 8001206:	4613      	mov	r3, r2
 8001208:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800120a:	202a      	movs	r0, #42	; 0x2a
 800120c:	f7ff ff70 	bl	80010f0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001210:	2300      	movs	r3, #0
 8001212:	733b      	strb	r3, [r7, #12]
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <ST7735_SetAddressWindow+0x88>)
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4413      	add	r3, r2
 800121c:	b2db      	uxtb	r3, r3
 800121e:	737b      	strb	r3, [r7, #13]
 8001220:	2300      	movs	r3, #0
 8001222:	73bb      	strb	r3, [r7, #14]
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <ST7735_SetAddressWindow+0x88>)
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	797b      	ldrb	r3, [r7, #5]
 800122a:	4413      	add	r3, r2
 800122c:	b2db      	uxtb	r3, r3
 800122e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2104      	movs	r1, #4
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff74 	bl	8001124 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800123c:	202b      	movs	r0, #43	; 0x2b
 800123e:	f7ff ff57 	bl	80010f0 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <ST7735_SetAddressWindow+0x8c>)
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	4413      	add	r3, r2
 800124a:	b2db      	uxtb	r3, r3
 800124c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <ST7735_SetAddressWindow+0x8c>)
 8001250:	781a      	ldrb	r2, [r3, #0]
 8001252:	793b      	ldrb	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	b2db      	uxtb	r3, r3
 8001258:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2104      	movs	r1, #4
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5f 	bl	8001124 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001266:	202c      	movs	r0, #44	; 0x2c
 8001268:	f7ff ff42 	bl	80010f0 <ST7735_WriteCommand>
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bd90      	pop	{r4, r7, pc}
 8001274:	20000210 	.word	0x20000210
 8001278:	20000214 	.word	0x20000214

0800127c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8001286:	f7ff ff07 	bl	8001098 <ST7735_Select>
    ST7735_Reset();
 800128a:	f7ff ff1d 	bl	80010c8 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800128e:	480c      	ldr	r0, [pc, #48]	; (80012c0 <ST7735_Init+0x44>)
 8001290:	f7ff ff62 	bl	8001158 <DisplayInit>
    DisplayInit(init_cmds2);
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <ST7735_Init+0x48>)
 8001296:	f7ff ff5f 	bl	8001158 <DisplayInit>
    DisplayInit(init_cmds3);
 800129a:	480b      	ldr	r0, [pc, #44]	; (80012c8 <ST7735_Init+0x4c>)
 800129c:	f7ff ff5c 	bl	8001158 <DisplayInit>
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();

#elif ST7735_IS_128X128
    _colstart = 2;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <ST7735_Init+0x50>)
 80012a2:	2202      	movs	r2, #2
 80012a4:	701a      	strb	r2, [r3, #0]
    _rowstart = 3;
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <ST7735_Init+0x54>)
 80012a8:	2203      	movs	r2, #3
 80012aa:	701a      	strb	r2, [r3, #0]
#else
    _colstart = 0;
    _rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f810 	bl	80012d4 <ST7735_SetRotation>
    ST7735_Unselect();
 80012b4:	f7ff fefc 	bl	80010b0 <ST7735_Unselect>

}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	080093f8 	.word	0x080093f8
 80012c4:	08009430 	.word	0x08009430
 80012c8:	08009440 	.word	0x08009440
 80012cc:	20000211 	.word	0x20000211
 80012d0:	20000215 	.word	0x20000215

080012d4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <ST7735_SetRotation+0xe4>)
 80012ec:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80012ee:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <ST7735_SetRotation+0xe4>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d84e      	bhi.n	8001394 <ST7735_SetRotation+0xc0>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <ST7735_SetRotation+0x28>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	0800130d 	.word	0x0800130d
 8001300:	0800132f 	.word	0x0800132f
 8001304:	08001351 	.word	0x08001351
 8001308:	08001373 	.word	0x08001373
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800130c:	23c0      	movs	r3, #192	; 0xc0
 800130e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001310:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <ST7735_SetRotation+0xe8>)
 8001312:	2280      	movs	r2, #128	; 0x80
 8001314:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <ST7735_SetRotation+0xec>)
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <ST7735_SetRotation+0xf0>)
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <ST7735_SetRotation+0xf4>)
 8001322:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <ST7735_SetRotation+0xf8>)
 8001326:	781a      	ldrb	r2, [r3, #0]
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <ST7735_SetRotation+0xfc>)
 800132a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800132c:	e032      	b.n	8001394 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800132e:	23a0      	movs	r3, #160	; 0xa0
 8001330:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <ST7735_SetRotation+0xec>)
 8001334:	2280      	movs	r2, #128	; 0x80
 8001336:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <ST7735_SetRotation+0xe8>)
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800133e:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <ST7735_SetRotation+0xf0>)
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <ST7735_SetRotation+0xfc>)
 8001344:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <ST7735_SetRotation+0xf8>)
 8001348:	781a      	ldrb	r2, [r3, #0]
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <ST7735_SetRotation+0xf4>)
 800134c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800134e:	e021      	b.n	8001394 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <ST7735_SetRotation+0xe8>)
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <ST7735_SetRotation+0xec>)
 800135c:	2280      	movs	r2, #128	; 0x80
 800135e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <ST7735_SetRotation+0xf0>)
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <ST7735_SetRotation+0xf4>)
 8001366:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <ST7735_SetRotation+0xf8>)
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <ST7735_SetRotation+0xfc>)
 800136e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001370:	e010      	b.n	8001394 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001372:	2360      	movs	r3, #96	; 0x60
 8001374:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <ST7735_SetRotation+0xec>)
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <ST7735_SetRotation+0xe8>)
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <ST7735_SetRotation+0xf0>)
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <ST7735_SetRotation+0xfc>)
 8001388:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <ST7735_SetRotation+0xf8>)
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <ST7735_SetRotation+0xf4>)
 8001390:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001392:	bf00      	nop
  }
  ST7735_Select();
 8001394:	f7ff fe80 	bl	8001098 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001398:	2036      	movs	r0, #54	; 0x36
 800139a:	f7ff fea9 	bl	80010f0 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800139e:	f107 030f 	add.w	r3, r7, #15
 80013a2:	2101      	movs	r1, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff febd 	bl	8001124 <ST7735_WriteData>
  ST7735_Unselect();
 80013aa:	f7ff fe81 	bl	80010b0 <ST7735_Unselect>
}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000216 	.word	0x20000216
 80013bc:	2000021c 	.word	0x2000021c
 80013c0:	20000218 	.word	0x20000218
 80013c4:	20000211 	.word	0x20000211
 80013c8:	20000210 	.word	0x20000210
 80013cc:	20000215 	.word	0x20000215
 80013d0:	20000214 	.word	0x20000214

080013d4 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80013d4:	b082      	sub	sp, #8
 80013d6:	b590      	push	{r4, r7, lr}
 80013d8:	b089      	sub	sp, #36	; 0x24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	460b      	mov	r3, r1
 80013e4:	80bb      	strh	r3, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	b2d8      	uxtb	r0, r3
 80013ee:	88bb      	ldrh	r3, [r7, #4]
 80013f0:	b2d9      	uxtb	r1, r3
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013fa:	4413      	add	r3, r2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	3b01      	subs	r3, #1
 8001400:	b2dc      	uxtb	r4, r3
 8001402:	88bb      	ldrh	r3, [r7, #4]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800140a:	4413      	add	r3, r2
 800140c:	b2db      	uxtb	r3, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4622      	mov	r2, r4
 8001414:	f7ff feea 	bl	80011ec <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	e043      	b.n	80014a6 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800141e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	3b20      	subs	r3, #32
 8001424:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001428:	fb01 f303 	mul.w	r3, r1, r3
 800142c:	4619      	mov	r1, r3
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	440b      	add	r3, r1
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	e029      	b.n	8001494 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00e      	beq.n	800146e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001450:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	b29b      	uxth	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	743b      	strb	r3, [r7, #16]
 800145a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800145c:	b2db      	uxtb	r3, r3
 800145e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	2102      	movs	r1, #2
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fe5c 	bl	8001124 <ST7735_WriteData>
 800146c:	e00f      	b.n	800148e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800146e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b29b      	uxth	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	733b      	strb	r3, [r7, #12]
 800147a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800147e:	b2db      	uxtb	r3, r3
 8001480:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	2102      	movs	r1, #2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fe4b 	bl	8001124 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	3301      	adds	r3, #1
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001498:	461a      	mov	r2, r3
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4293      	cmp	r3, r2
 800149e:	d3cf      	bcc.n	8001440 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	3301      	adds	r3, #1
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80014aa:	461a      	mov	r2, r3
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d3b5      	bcc.n	800141e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	3724      	adds	r7, #36	; 0x24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80014be:	b002      	add	sp, #8
 80014c0:	4770      	bx	lr
	...

080014c4 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80014c4:	b082      	sub	sp, #8
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af04      	add	r7, sp, #16
 80014cc:	603a      	str	r2, [r7, #0]
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	4603      	mov	r3, r0
 80014d2:	80fb      	strh	r3, [r7, #6]
 80014d4:	460b      	mov	r3, r1
 80014d6:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80014d8:	f7ff fdde 	bl	8001098 <ST7735_Select>

    while(*str) {
 80014dc:	e033      	b.n	8001546 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	7d3a      	ldrb	r2, [r7, #20]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <ST7735_WriteString+0xa0>)
 80014e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014ea:	4293      	cmp	r3, r2
 80014ec:	db16      	blt.n	800151c <ST7735_WriteString+0x58>
            x = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80014f2:	7d7b      	ldrb	r3, [r7, #21]
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	88bb      	ldrh	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80014fc:	88bb      	ldrh	r3, [r7, #4]
 80014fe:	7d7a      	ldrb	r2, [r7, #21]
 8001500:	4413      	add	r3, r2
 8001502:	4a19      	ldr	r2, [pc, #100]	; (8001568 <ST7735_WriteString+0xa4>)
 8001504:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001508:	4293      	cmp	r3, r2
 800150a:	da21      	bge.n	8001550 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b20      	cmp	r3, #32
 8001512:	d103      	bne.n	800151c <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	603b      	str	r3, [r7, #0]
                continue;
 800151a:	e014      	b.n	8001546 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	88b9      	ldrh	r1, [r7, #4]
 8001522:	88f8      	ldrh	r0, [r7, #6]
 8001524:	8c3b      	ldrh	r3, [r7, #32]
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	8bbb      	ldrh	r3, [r7, #28]
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f7ff ff4f 	bl	80013d4 <ST7735_WriteChar>
        x += font.width;
 8001536:	7d3b      	ldrb	r3, [r7, #20]
 8001538:	b29a      	uxth	r2, r3
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	4413      	add	r3, r2
 800153e:	80fb      	strh	r3, [r7, #6]
        str++;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1c7      	bne.n	80014de <ST7735_WriteString+0x1a>
 800154e:	e000      	b.n	8001552 <ST7735_WriteString+0x8e>
                break;
 8001550:	bf00      	nop
    }

    ST7735_Unselect();
 8001552:	f7ff fdad 	bl	80010b0 <ST7735_Unselect>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001560:	b002      	add	sp, #8
 8001562:	4770      	bx	lr
 8001564:	20000218 	.word	0x20000218
 8001568:	2000021c 	.word	0x2000021c

0800156c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	4604      	mov	r4, r0
 8001574:	4608      	mov	r0, r1
 8001576:	4611      	mov	r1, r2
 8001578:	461a      	mov	r2, r3
 800157a:	4623      	mov	r3, r4
 800157c:	80fb      	strh	r3, [r7, #6]
 800157e:	4603      	mov	r3, r0
 8001580:	80bb      	strh	r3, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	807b      	strh	r3, [r7, #2]
 8001586:	4613      	mov	r3, r2
 8001588:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	4a37      	ldr	r2, [pc, #220]	; (800166c <ST7735_FillRectangle+0x100>)
 800158e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001592:	4293      	cmp	r3, r2
 8001594:	da66      	bge.n	8001664 <ST7735_FillRectangle+0xf8>
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	4a35      	ldr	r2, [pc, #212]	; (8001670 <ST7735_FillRectangle+0x104>)
 800159a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800159e:	4293      	cmp	r3, r2
 80015a0:	da60      	bge.n	8001664 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 80015a2:	88fa      	ldrh	r2, [r7, #6]
 80015a4:	887b      	ldrh	r3, [r7, #2]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a30      	ldr	r2, [pc, #192]	; (800166c <ST7735_FillRectangle+0x100>)
 80015aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015ae:	4293      	cmp	r3, r2
 80015b0:	dd06      	ble.n	80015c0 <ST7735_FillRectangle+0x54>
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <ST7735_FillRectangle+0x100>)
 80015b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	883b      	ldrh	r3, [r7, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a2a      	ldr	r2, [pc, #168]	; (8001670 <ST7735_FillRectangle+0x104>)
 80015c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015cc:	4293      	cmp	r3, r2
 80015ce:	dd06      	ble.n	80015de <ST7735_FillRectangle+0x72>
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <ST7735_FillRectangle+0x104>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	88bb      	ldrh	r3, [r7, #4]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80015de:	f7ff fd5b 	bl	8001098 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	b2d8      	uxtb	r0, r3
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	b2d9      	uxtb	r1, r3
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	887b      	ldrh	r3, [r7, #2]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	4413      	add	r3, r2
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b2dc      	uxtb	r4, r3
 80015fa:	88bb      	ldrh	r3, [r7, #4]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	883b      	ldrh	r3, [r7, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4413      	add	r3, r2
 8001604:	b2db      	uxtb	r3, r3
 8001606:	3b01      	subs	r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4622      	mov	r2, r4
 800160c:	f7ff fdee 	bl	80011ec <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001610:	8c3b      	ldrh	r3, [r7, #32]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	b29b      	uxth	r3, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	733b      	strb	r3, [r7, #12]
 800161a:	8c3b      	ldrh	r3, [r7, #32]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2101      	movs	r1, #1
 8001624:	4813      	ldr	r0, [pc, #76]	; (8001674 <ST7735_FillRectangle+0x108>)
 8001626:	f001 fce5 	bl	8002ff4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800162a:	883b      	ldrh	r3, [r7, #0]
 800162c:	80bb      	strh	r3, [r7, #4]
 800162e:	e013      	b.n	8001658 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	80fb      	strh	r3, [r7, #6]
 8001634:	e00a      	b.n	800164c <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001636:	f107 010c 	add.w	r1, r7, #12
 800163a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800163e:	2202      	movs	r2, #2
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <ST7735_FillRectangle+0x10c>)
 8001642:	f002 fb34 	bl	8003cae <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	3b01      	subs	r3, #1
 800164a:	80fb      	strh	r3, [r7, #6]
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f1      	bne.n	8001636 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	3b01      	subs	r3, #1
 8001656:	80bb      	strh	r3, [r7, #4]
 8001658:	88bb      	ldrh	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1e8      	bne.n	8001630 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 800165e:	f7ff fd27 	bl	80010b0 <ST7735_Unselect>
 8001662:	e000      	b.n	8001666 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8001664:	bf00      	nop
}
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	20000218 	.word	0x20000218
 8001670:	2000021c 	.word	0x2000021c
 8001674:	40020800 	.word	0x40020800
 8001678:	20000358 	.word	0x20000358

0800167c <adxl_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void adxl_write (uint8_t address, uint8_t value)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	460a      	mov	r2, r1
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	4613      	mov	r3, r2
 800168a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = address | 0x40;  // multibyte write
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001692:	b2db      	uxtb	r3, r3
 8001694:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin (ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET);  // pull the cs pin low
 800169a:	2200      	movs	r2, #0
 800169c:	2104      	movs	r1, #4
 800169e:	4809      	ldr	r0, [pc, #36]	; (80016c4 <adxl_write+0x48>)
 80016a0:	f001 fca8 	bl	8002ff4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi3, data, 2, 100);  // write data to register
 80016a4:	f107 010c 	add.w	r1, r7, #12
 80016a8:	2364      	movs	r3, #100	; 0x64
 80016aa:	2202      	movs	r2, #2
 80016ac:	4806      	ldr	r0, [pc, #24]	; (80016c8 <adxl_write+0x4c>)
 80016ae:	f002 fafe 	bl	8003cae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_SET);  // pull the cs pin high
 80016b2:	2201      	movs	r2, #1
 80016b4:	2104      	movs	r1, #4
 80016b6:	4803      	ldr	r0, [pc, #12]	; (80016c4 <adxl_write+0x48>)
 80016b8:	f001 fc9c 	bl	8002ff4 <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020c00 	.word	0x40020c00
 80016c8:	20000294 	.word	0x20000294

080016cc <adxl_read>:

void adxl_read (uint8_t address)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	address |= 0x80;  // read operation
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	71fb      	strb	r3, [r7, #7]
	address |= 0x40;  // multibyte read
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	71fb      	strb	r3, [r7, #7]
	uint8_t rec;
	HAL_GPIO_WritePin (ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET);  // pull the pin low
 80016ea:	2200      	movs	r2, #0
 80016ec:	2104      	movs	r1, #4
 80016ee:	480c      	ldr	r0, [pc, #48]	; (8001720 <adxl_read+0x54>)
 80016f0:	f001 fc80 	bl	8002ff4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit  (&hspi3, &address, 1, 100);  // send address
 80016f4:	1df9      	adds	r1, r7, #7
 80016f6:	2364      	movs	r3, #100	; 0x64
 80016f8:	2201      	movs	r2, #1
 80016fa:	480a      	ldr	r0, [pc, #40]	; (8001724 <adxl_read+0x58>)
 80016fc:	f002 fad7 	bl	8003cae <HAL_SPI_Transmit>
	HAL_SPI_Receive   (&hspi3, data_rec, 6, 100);  // receive 6 bytes data
 8001700:	2364      	movs	r3, #100	; 0x64
 8001702:	2206      	movs	r2, #6
 8001704:	4908      	ldr	r1, [pc, #32]	; (8001728 <adxl_read+0x5c>)
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <adxl_read+0x58>)
 8001708:	f002 fc0d 	bl	8003f26 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_SET);  // pull the pin high
 800170c:	2201      	movs	r2, #1
 800170e:	2104      	movs	r1, #4
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <adxl_read+0x54>)
 8001712:	f001 fc6f 	bl	8002ff4 <HAL_GPIO_WritePin>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40020c00 	.word	0x40020c00
 8001724:	20000294 	.word	0x20000294
 8001728:	20000460 	.word	0x20000460

0800172c <adxl_readId>:

void adxl_readId (uint8_t address)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
	address |= 0x80;  // read operation
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800173c:	b2db      	uxtb	r3, r3
 800173e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin (ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8001740:	2200      	movs	r2, #0
 8001742:	2104      	movs	r1, #4
 8001744:	480b      	ldr	r0, [pc, #44]	; (8001774 <adxl_readId+0x48>)
 8001746:	f001 fc55 	bl	8002ff4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit  (&hspi3, &address, 1, 100);  // send address
 800174a:	1df9      	adds	r1, r7, #7
 800174c:	2364      	movs	r3, #100	; 0x64
 800174e:	2201      	movs	r2, #1
 8001750:	4809      	ldr	r0, [pc, #36]	; (8001778 <adxl_readId+0x4c>)
 8001752:	f002 faac 	bl	8003cae <HAL_SPI_Transmit>
	HAL_SPI_Receive   (&hspi3, data_rec, 1, 100);  // receive 1 byte data
 8001756:	2364      	movs	r3, #100	; 0x64
 8001758:	2201      	movs	r2, #1
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <adxl_readId+0x50>)
 800175c:	4806      	ldr	r0, [pc, #24]	; (8001778 <adxl_readId+0x4c>)
 800175e:	f002 fbe2 	bl	8003f26 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_SET);  // pull the pin high
 8001762:	2201      	movs	r2, #1
 8001764:	2104      	movs	r1, #4
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <adxl_readId+0x48>)
 8001768:	f001 fc44 	bl	8002ff4 <HAL_GPIO_WritePin>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40020c00 	.word	0x40020c00
 8001778:	20000294 	.word	0x20000294
 800177c:	20000460 	.word	0x20000460

08001780 <adxl_init>:

void adxl_init (void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	adxl_readId (0x00);        // Read device ID
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff ffd1 	bl	800172c <adxl_readId>
	adxl_write  (0x2C, 0x0F);  // Set output data rate to 3200 Hz
 800178a:	210f      	movs	r1, #15
 800178c:	202c      	movs	r0, #44	; 0x2c
 800178e:	f7ff ff75 	bl	800167c <adxl_write>
	adxl_write  (0x2E, 0x00);  // Set INT_ENABLE register to 0x00
 8001792:	2100      	movs	r1, #0
 8001794:	202e      	movs	r0, #46	; 0x2e
 8001796:	f7ff ff71 	bl	800167c <adxl_write>
	adxl_write  (0x31, (0x04 | 0x0B));  // data_format range= +- 2g
 800179a:	210f      	movs	r1, #15
 800179c:	2031      	movs	r0, #49	; 0x31
 800179e:	f7ff ff6d 	bl	800167c <adxl_write>
	adxl_write  (0x38, 0x00);  // Bypass FIFO
 80017a2:	2100      	movs	r1, #0
 80017a4:	2038      	movs	r0, #56	; 0x38
 80017a6:	f7ff ff69 	bl	800167c <adxl_write>
	adxl_write  (0x2D, 0x00);  // reset all bits
 80017aa:	2100      	movs	r1, #0
 80017ac:	202d      	movs	r0, #45	; 0x2d
 80017ae:	f7ff ff65 	bl	800167c <adxl_write>
	adxl_write  (0x2D, 0x08);  // power_cntl measure and wake up 8hz
 80017b2:	2108      	movs	r1, #8
 80017b4:	202d      	movs	r0, #45	; 0x2d
 80017b6:	f7ff ff61 	bl	800167c <adxl_write>
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c6:	f000 fdef 	bl	80023a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ca:	f000 f9d7 	bl	8001b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ce:	f000 fafd 	bl	8001dcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017d2:	f000 fab1 	bl	8001d38 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80017d6:	f000 fa43 	bl	8001c60 <MX_SPI1_Init>
  MX_DMA_Init();
 80017da:	f000 fad7 	bl	8001d8c <MX_DMA_Init>
  MX_SPI3_Init();
 80017de:	f000 fa75 	bl	8001ccc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  adxl_init();
 80017e2:	f7ff ffcd 	bl	8001780 <adxl_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ST7735_Init(0);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7ff fd48 	bl	800127c <ST7735_Init>
  fillScreen(BLACK);
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff fc39 	bl	8001064 <fillScreen>
  ST7735_SetRotation(0);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fd6e 	bl	80012d4 <ST7735_SetRotation>

	  // READ DATA
//	  ADXL_getAccel(data_rec, OUTPUT_FLOAT);
//	  ADXL_getAccel(acc, OUTPUT_SIGNED);

 adxl_read(0x32);
 80017f8:	2032      	movs	r0, #50	; 0x32
 80017fa:	f7ff ff67 	bl	80016cc <adxl_read>

	  xg = ((data_rec[1]<<8)|data_rec[0]); // acc[0];
 80017fe:	4bac      	ldr	r3, [pc, #688]	; (8001ab0 <main+0x2f0>)
 8001800:	885b      	ldrh	r3, [r3, #2]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	4aaa      	ldr	r2, [pc, #680]	; (8001ab0 <main+0x2f0>)
 8001806:	8812      	ldrh	r2, [r2, #0]
 8001808:	4313      	orrs	r3, r2
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001812:	4ba8      	ldr	r3, [pc, #672]	; (8001ab4 <main+0x2f4>)
 8001814:	edc3 7a00 	vstr	s15, [r3]
	  yg = ((data_rec[3]<<8)|data_rec[2]); // acc[1];
 8001818:	4ba5      	ldr	r3, [pc, #660]	; (8001ab0 <main+0x2f0>)
 800181a:	88db      	ldrh	r3, [r3, #6]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	4aa4      	ldr	r2, [pc, #656]	; (8001ab0 <main+0x2f0>)
 8001820:	8892      	ldrh	r2, [r2, #4]
 8001822:	4313      	orrs	r3, r2
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800182c:	4ba2      	ldr	r3, [pc, #648]	; (8001ab8 <main+0x2f8>)
 800182e:	edc3 7a00 	vstr	s15, [r3]
	  zg = ((data_rec[5]<<8)|data_rec[4]); // acc[2];
 8001832:	4b9f      	ldr	r3, [pc, #636]	; (8001ab0 <main+0x2f0>)
 8001834:	895b      	ldrh	r3, [r3, #10]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	4a9d      	ldr	r2, [pc, #628]	; (8001ab0 <main+0x2f0>)
 800183a:	8912      	ldrh	r2, [r2, #8]
 800183c:	4313      	orrs	r3, r2
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001846:	4b9d      	ldr	r3, [pc, #628]	; (8001abc <main+0x2fc>)
 8001848:	edc3 7a00 	vstr	s15, [r3]


	  // Convert into 'g'

	  x = xg * 0.0078;
 800184c:	4b99      	ldr	r3, [pc, #612]	; (8001ab4 <main+0x2f4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe99 	bl	8000588 <__aeabi_f2d>
 8001856:	a394      	add	r3, pc, #592	; (adr r3, 8001aa8 <main+0x2e8>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe feec 	bl	8000638 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f996 	bl	8000b98 <__aeabi_d2iz>
 800186c:	4603      	mov	r3, r0
 800186e:	b21a      	sxth	r2, r3
 8001870:	4b93      	ldr	r3, [pc, #588]	; (8001ac0 <main+0x300>)
 8001872:	801a      	strh	r2, [r3, #0]
	  y = yg * 0.0078;
 8001874:	4b90      	ldr	r3, [pc, #576]	; (8001ab8 <main+0x2f8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe85 	bl	8000588 <__aeabi_f2d>
 800187e:	a38a      	add	r3, pc, #552	; (adr r3, 8001aa8 <main+0x2e8>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fed8 	bl	8000638 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff f982 	bl	8000b98 <__aeabi_d2iz>
 8001894:	4603      	mov	r3, r0
 8001896:	b21a      	sxth	r2, r3
 8001898:	4b8a      	ldr	r3, [pc, #552]	; (8001ac4 <main+0x304>)
 800189a:	801a      	strh	r2, [r3, #0]
	  z = zg * 0.0078;
 800189c:	4b87      	ldr	r3, [pc, #540]	; (8001abc <main+0x2fc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe71 	bl	8000588 <__aeabi_f2d>
 80018a6:	a380      	add	r3, pc, #512	; (adr r3, 8001aa8 <main+0x2e8>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fec4 	bl	8000638 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f96e 	bl	8000b98 <__aeabi_d2iz>
 80018bc:	4603      	mov	r3, r0
 80018be:	b21a      	sxth	r2, r3
 80018c0:	4b81      	ldr	r3, [pc, #516]	; (8001ac8 <main+0x308>)
 80018c2:	801a      	strh	r2, [r3, #0]
/*
	  sprintf(x_str,"%f", x);
	  sprintf(y_str,"%f", y);
	  sprintf(z_str,"%f", z);
*/
	  sprintf(xg_str,"%.2f", xg);
 80018c4:	4b7b      	ldr	r3, [pc, #492]	; (8001ab4 <main+0x2f4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe5d 	bl	8000588 <__aeabi_f2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	497e      	ldr	r1, [pc, #504]	; (8001acc <main+0x30c>)
 80018d4:	487e      	ldr	r0, [pc, #504]	; (8001ad0 <main+0x310>)
 80018d6:	f003 ffd1 	bl	800587c <siprintf>
	  sprintf(yg_str,"%.2f", yg);
 80018da:	4b77      	ldr	r3, [pc, #476]	; (8001ab8 <main+0x2f8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe52 	bl	8000588 <__aeabi_f2d>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4978      	ldr	r1, [pc, #480]	; (8001acc <main+0x30c>)
 80018ea:	487a      	ldr	r0, [pc, #488]	; (8001ad4 <main+0x314>)
 80018ec:	f003 ffc6 	bl	800587c <siprintf>
	  sprintf(zg_str,"%.2f", zg);
 80018f0:	4b72      	ldr	r3, [pc, #456]	; (8001abc <main+0x2fc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe47 	bl	8000588 <__aeabi_f2d>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4973      	ldr	r1, [pc, #460]	; (8001acc <main+0x30c>)
 8001900:	4875      	ldr	r0, [pc, #468]	; (8001ad8 <main+0x318>)
 8001902:	f003 ffbb 	bl	800587c <siprintf>

	  sprintf(x_str,"%d", data_rec[0]);
 8001906:	4b6a      	ldr	r3, [pc, #424]	; (8001ab0 <main+0x2f0>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4973      	ldr	r1, [pc, #460]	; (8001adc <main+0x31c>)
 800190e:	4874      	ldr	r0, [pc, #464]	; (8001ae0 <main+0x320>)
 8001910:	f003 ffb4 	bl	800587c <siprintf>
	  sprintf(y_str,"%d", data_rec[1]);
 8001914:	4b66      	ldr	r3, [pc, #408]	; (8001ab0 <main+0x2f0>)
 8001916:	885b      	ldrh	r3, [r3, #2]
 8001918:	461a      	mov	r2, r3
 800191a:	4970      	ldr	r1, [pc, #448]	; (8001adc <main+0x31c>)
 800191c:	4871      	ldr	r0, [pc, #452]	; (8001ae4 <main+0x324>)
 800191e:	f003 ffad 	bl	800587c <siprintf>
	  sprintf(z_str,"%d", data_rec[2]);
 8001922:	4b63      	ldr	r3, [pc, #396]	; (8001ab0 <main+0x2f0>)
 8001924:	889b      	ldrh	r3, [r3, #4]
 8001926:	461a      	mov	r2, r3
 8001928:	496c      	ldr	r1, [pc, #432]	; (8001adc <main+0x31c>)
 800192a:	486f      	ldr	r0, [pc, #444]	; (8001ae8 <main+0x328>)
 800192c:	f003 ffa6 	bl	800587c <siprintf>

	  // DISPLAY RESULT

	  ST7735_WriteString(2, 0, "x :", Font_7x10, BLACK, BLACK);
 8001930:	4b6e      	ldr	r3, [pc, #440]	; (8001aec <main+0x32c>)
 8001932:	2200      	movs	r2, #0
 8001934:	9202      	str	r2, [sp, #8]
 8001936:	2200      	movs	r2, #0
 8001938:	9201      	str	r2, [sp, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	9200      	str	r2, [sp, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6b      	ldr	r2, [pc, #428]	; (8001af0 <main+0x330>)
 8001942:	2100      	movs	r1, #0
 8001944:	2002      	movs	r0, #2
 8001946:	f7ff fdbd 	bl	80014c4 <ST7735_WriteString>
	  ST7735_WriteString(2, 0, "x :", Font_7x10, RED, BLACK);
 800194a:	4b68      	ldr	r3, [pc, #416]	; (8001aec <main+0x32c>)
 800194c:	2200      	movs	r2, #0
 800194e:	9202      	str	r2, [sp, #8]
 8001950:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001954:	9201      	str	r2, [sp, #4]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	9200      	str	r2, [sp, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a64      	ldr	r2, [pc, #400]	; (8001af0 <main+0x330>)
 800195e:	2100      	movs	r1, #0
 8001960:	2002      	movs	r0, #2
 8001962:	f7ff fdaf 	bl	80014c4 <ST7735_WriteString>

	  ST7735_WriteString(12, 10, x_str, Font_7x10, BLACK, BLACK);
 8001966:	4b61      	ldr	r3, [pc, #388]	; (8001aec <main+0x32c>)
 8001968:	2200      	movs	r2, #0
 800196a:	9202      	str	r2, [sp, #8]
 800196c:	2200      	movs	r2, #0
 800196e:	9201      	str	r2, [sp, #4]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	9200      	str	r2, [sp, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a5a      	ldr	r2, [pc, #360]	; (8001ae0 <main+0x320>)
 8001978:	210a      	movs	r1, #10
 800197a:	200c      	movs	r0, #12
 800197c:	f7ff fda2 	bl	80014c4 <ST7735_WriteString>
	  ST7735_WriteString(12, 10, x_str, Font_7x10, GREEN, BLACK);
 8001980:	4b5a      	ldr	r3, [pc, #360]	; (8001aec <main+0x32c>)
 8001982:	2200      	movs	r2, #0
 8001984:	9202      	str	r2, [sp, #8]
 8001986:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800198a:	9201      	str	r2, [sp, #4]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	9200      	str	r2, [sp, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a53      	ldr	r2, [pc, #332]	; (8001ae0 <main+0x320>)
 8001994:	210a      	movs	r1, #10
 8001996:	200c      	movs	r0, #12
 8001998:	f7ff fd94 	bl	80014c4 <ST7735_WriteString>

	  ST7735_WriteString(12, 20, xg_str, Font_7x10, BLACK, BLACK);
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <main+0x32c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	9202      	str	r2, [sp, #8]
 80019a2:	2200      	movs	r2, #0
 80019a4:	9201      	str	r2, [sp, #4]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	9200      	str	r2, [sp, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <main+0x310>)
 80019ae:	2114      	movs	r1, #20
 80019b0:	200c      	movs	r0, #12
 80019b2:	f7ff fd87 	bl	80014c4 <ST7735_WriteString>
	  ST7735_WriteString(12, 20, xg_str, Font_7x10, GREEN, BLACK);
 80019b6:	4b4d      	ldr	r3, [pc, #308]	; (8001aec <main+0x32c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	9202      	str	r2, [sp, #8]
 80019bc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80019c0:	9201      	str	r2, [sp, #4]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	9200      	str	r2, [sp, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a41      	ldr	r2, [pc, #260]	; (8001ad0 <main+0x310>)
 80019ca:	2114      	movs	r1, #20
 80019cc:	200c      	movs	r0, #12
 80019ce:	f7ff fd79 	bl	80014c4 <ST7735_WriteString>


	  ST7735_WriteString(2, 40, "y :", Font_7x10, BLACK, BLACK);
 80019d2:	4b46      	ldr	r3, [pc, #280]	; (8001aec <main+0x32c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	9202      	str	r2, [sp, #8]
 80019d8:	2200      	movs	r2, #0
 80019da:	9201      	str	r2, [sp, #4]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	9200      	str	r2, [sp, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a44      	ldr	r2, [pc, #272]	; (8001af4 <main+0x334>)
 80019e4:	2128      	movs	r1, #40	; 0x28
 80019e6:	2002      	movs	r0, #2
 80019e8:	f7ff fd6c 	bl	80014c4 <ST7735_WriteString>
	  ST7735_WriteString(2, 40, "y :", Font_7x10, RED, BLACK);
 80019ec:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <main+0x32c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	9202      	str	r2, [sp, #8]
 80019f2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80019f6:	9201      	str	r2, [sp, #4]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	9200      	str	r2, [sp, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a3d      	ldr	r2, [pc, #244]	; (8001af4 <main+0x334>)
 8001a00:	2128      	movs	r1, #40	; 0x28
 8001a02:	2002      	movs	r0, #2
 8001a04:	f7ff fd5e 	bl	80014c4 <ST7735_WriteString>

	  ST7735_WriteString(12, 50, y_str, Font_7x10, BLACK, BLACK);
 8001a08:	4b38      	ldr	r3, [pc, #224]	; (8001aec <main+0x32c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	9202      	str	r2, [sp, #8]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	9201      	str	r2, [sp, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	9200      	str	r2, [sp, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a32      	ldr	r2, [pc, #200]	; (8001ae4 <main+0x324>)
 8001a1a:	2132      	movs	r1, #50	; 0x32
 8001a1c:	200c      	movs	r0, #12
 8001a1e:	f7ff fd51 	bl	80014c4 <ST7735_WriteString>
	  ST7735_WriteString(12, 50, y_str, Font_7x10, GREEN, BLACK);
 8001a22:	4b32      	ldr	r3, [pc, #200]	; (8001aec <main+0x32c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	9202      	str	r2, [sp, #8]
 8001a28:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001a2c:	9201      	str	r2, [sp, #4]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	9200      	str	r2, [sp, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a2b      	ldr	r2, [pc, #172]	; (8001ae4 <main+0x324>)
 8001a36:	2132      	movs	r1, #50	; 0x32
 8001a38:	200c      	movs	r0, #12
 8001a3a:	f7ff fd43 	bl	80014c4 <ST7735_WriteString>

	  ST7735_WriteString(12, 60, yg_str, Font_7x10, BLACK, BLACK);
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <main+0x32c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	9202      	str	r2, [sp, #8]
 8001a44:	2200      	movs	r2, #0
 8001a46:	9201      	str	r2, [sp, #4]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	9200      	str	r2, [sp, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <main+0x314>)
 8001a50:	213c      	movs	r1, #60	; 0x3c
 8001a52:	200c      	movs	r0, #12
 8001a54:	f7ff fd36 	bl	80014c4 <ST7735_WriteString>
	  ST7735_WriteString(12, 60, yg_str, Font_7x10, GREEN, BLACK);
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <main+0x32c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	9202      	str	r2, [sp, #8]
 8001a5e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001a62:	9201      	str	r2, [sp, #4]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	9200      	str	r2, [sp, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <main+0x314>)
 8001a6c:	213c      	movs	r1, #60	; 0x3c
 8001a6e:	200c      	movs	r0, #12
 8001a70:	f7ff fd28 	bl	80014c4 <ST7735_WriteString>


	  ST7735_WriteString(2, 80, "z :", Font_7x10, BLACK, BLACK);
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <main+0x32c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	9202      	str	r2, [sp, #8]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	9201      	str	r2, [sp, #4]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	9200      	str	r2, [sp, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <main+0x338>)
 8001a86:	2150      	movs	r1, #80	; 0x50
 8001a88:	2002      	movs	r0, #2
 8001a8a:	f7ff fd1b 	bl	80014c4 <ST7735_WriteString>
	  ST7735_WriteString(2, 80, "z :", Font_7x10, RED, BLACK);
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <main+0x32c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	9202      	str	r2, [sp, #8]
 8001a94:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001a98:	9201      	str	r2, [sp, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	9200      	str	r2, [sp, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <main+0x338>)
 8001aa2:	2150      	movs	r1, #80	; 0x50
 8001aa4:	2002      	movs	r0, #2
 8001aa6:	e029      	b.n	8001afc <main+0x33c>
 8001aa8:	8e8a71de 	.word	0x8e8a71de
 8001aac:	3f7ff2e4 	.word	0x3f7ff2e4
 8001ab0:	20000460 	.word	0x20000460
 8001ab4:	200004cc 	.word	0x200004cc
 8001ab8:	20000428 	.word	0x20000428
 8001abc:	20000290 	.word	0x20000290
 8001ac0:	2000025a 	.word	0x2000025a
 8001ac4:	200002ee 	.word	0x200002ee
 8001ac8:	200002ec 	.word	0x200002ec
 8001acc:	080093e0 	.word	0x080093e0
 8001ad0:	200003b0 	.word	0x200003b0
 8001ad4:	20000324 	.word	0x20000324
 8001ad8:	2000025c 	.word	0x2000025c
 8001adc:	080093e8 	.word	0x080093e8
 8001ae0:	200002f0 	.word	0x200002f0
 8001ae4:	20000228 	.word	0x20000228
 8001ae8:	2000042c 	.word	0x2000042c
 8001aec:	20000000 	.word	0x20000000
 8001af0:	080093ec 	.word	0x080093ec
 8001af4:	080093f0 	.word	0x080093f0
 8001af8:	080093f4 	.word	0x080093f4
 8001afc:	f7ff fce2 	bl	80014c4 <ST7735_WriteString>

	  ST7735_WriteString(12, 90, z_str, Font_7x10, BLACK, BLACK);
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <main+0x3b0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	9202      	str	r2, [sp, #8]
 8001b06:	2200      	movs	r2, #0
 8001b08:	9201      	str	r2, [sp, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <main+0x3b4>)
 8001b12:	215a      	movs	r1, #90	; 0x5a
 8001b14:	200c      	movs	r0, #12
 8001b16:	f7ff fcd5 	bl	80014c4 <ST7735_WriteString>
	  ST7735_WriteString(12, 90, z_str, Font_7x10, GREEN, BLACK);
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <main+0x3b0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	9202      	str	r2, [sp, #8]
 8001b20:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001b24:	9201      	str	r2, [sp, #4]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	9200      	str	r2, [sp, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a11      	ldr	r2, [pc, #68]	; (8001b74 <main+0x3b4>)
 8001b2e:	215a      	movs	r1, #90	; 0x5a
 8001b30:	200c      	movs	r0, #12
 8001b32:	f7ff fcc7 	bl	80014c4 <ST7735_WriteString>

	  ST7735_WriteString(12, 100, zg_str, Font_7x10, BLACK, BLACK);
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <main+0x3b0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	9202      	str	r2, [sp, #8]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	9201      	str	r2, [sp, #4]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	9200      	str	r2, [sp, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <main+0x3b8>)
 8001b48:	2164      	movs	r1, #100	; 0x64
 8001b4a:	200c      	movs	r0, #12
 8001b4c:	f7ff fcba 	bl	80014c4 <ST7735_WriteString>
	  ST7735_WriteString(12, 100, zg_str, Font_7x10, GREEN, BLACK);
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <main+0x3b0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	9202      	str	r2, [sp, #8]
 8001b56:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001b5a:	9201      	str	r2, [sp, #4]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	9200      	str	r2, [sp, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <main+0x3b8>)
 8001b64:	2164      	movs	r1, #100	; 0x64
 8001b66:	200c      	movs	r0, #12
 8001b68:	f7ff fcac 	bl	80014c4 <ST7735_WriteString>
 adxl_read(0x32);
 8001b6c:	e644      	b.n	80017f8 <main+0x38>
 8001b6e:	bf00      	nop
 8001b70:	20000000 	.word	0x20000000
 8001b74:	2000042c 	.word	0x2000042c
 8001b78:	2000025c 	.word	0x2000025c

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b094      	sub	sp, #80	; 0x50
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	2234      	movs	r2, #52	; 0x34
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 ffee 	bl	8004b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <SystemClock_Config+0xdc>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	; (8001c58 <SystemClock_Config+0xdc>)
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bae:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb0:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <SystemClock_Config+0xdc>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <SystemClock_Config+0xe0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a25      	ldr	r2, [pc, #148]	; (8001c5c <SystemClock_Config+0xe0>)
 8001bc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <SystemClock_Config+0xe0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be2:	2302      	movs	r3, #2
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bec:	2304      	movs	r3, #4
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001bf0:	23b4      	movs	r3, #180	; 0xb4
 8001bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 fd2b 	bl	8003660 <HAL_RCC_OscConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c10:	f000 f96c 	bl	8001eec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c14:	f001 fa08 	bl	8003028 <HAL_PWREx_EnableOverDrive>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c1e:	f000 f965 	bl	8001eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c22:	230f      	movs	r3, #15
 8001c24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c26:	2302      	movs	r3, #2
 8001c28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c38:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	2105      	movs	r1, #5
 8001c40:	4618      	mov	r0, r3
 8001c42:	f001 fa41 	bl	80030c8 <HAL_RCC_ClockConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c4c:	f000 f94e 	bl	8001eec <Error_Handler>
  }
}
 8001c50:	bf00      	nop
 8001c52:	3750      	adds	r7, #80	; 0x50
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40007000 	.word	0x40007000

08001c60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <MX_SPI1_Init+0x68>)
 8001c68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001cac:	220a      	movs	r2, #10
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cb0:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <MX_SPI1_Init+0x64>)
 8001cb2:	f001 ff73 	bl	8003b9c <HAL_SPI_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cbc:	f000 f916 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000358 	.word	0x20000358
 8001cc8:	40013000 	.word	0x40013000

08001ccc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <MX_SPI3_Init+0x64>)
 8001cd2:	4a18      	ldr	r2, [pc, #96]	; (8001d34 <MX_SPI3_Init+0x68>)
 8001cd4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <MX_SPI3_Init+0x64>)
 8001cd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cdc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_SPI3_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_SPI3_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_SPI3_Init+0x64>)
 8001cec:	2202      	movs	r2, #2
 8001cee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_SPI3_Init+0x64>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_SPI3_Init+0x64>)
 8001cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <MX_SPI3_Init+0x64>)
 8001d00:	2218      	movs	r2, #24
 8001d02:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <MX_SPI3_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_SPI3_Init+0x64>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <MX_SPI3_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <MX_SPI3_Init+0x64>)
 8001d18:	220a      	movs	r2, #10
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <MX_SPI3_Init+0x64>)
 8001d1e:	f001 ff3d 	bl	8003b9c <HAL_SPI_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001d28:	f000 f8e0 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000294 	.word	0x20000294
 8001d34:	40003c00 	.word	0x40003c00

08001d38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <MX_USART2_UART_Init+0x50>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d70:	f002 fcbc 	bl	80046ec <HAL_UART_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d7a:	f000 f8b7 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200003e4 	.word	0x200003e4
 8001d88:	40004400 	.word	0x40004400

08001d8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_DMA_Init+0x3c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <MX_DMA_Init+0x3c>)
 8001d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_DMA_Init+0x3c>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	203b      	movs	r0, #59	; 0x3b
 8001db4:	f000 fc69 	bl	800268a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001db8:	203b      	movs	r0, #59	; 0x3b
 8001dba:	f000 fc82 	bl	80026c2 <HAL_NVIC_EnableIRQ>

}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800

08001dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	; 0x28
 8001dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a3d      	ldr	r2, [pc, #244]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b37      	ldr	r3, [pc, #220]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a36      	ldr	r2, [pc, #216]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a2f      	ldr	r2, [pc, #188]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001e40:	f043 0308 	orr.w	r3, r3, #8
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a21      	ldr	r2, [pc, #132]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <MX_GPIO_Init+0x114>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_RS_DC_Pin|GPIO_CS_Pin|GPIO_Rst_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	210d      	movs	r1, #13
 8001e72:	481c      	ldr	r0, [pc, #112]	; (8001ee4 <MX_GPIO_Init+0x118>)
 8001e74:	f001 f8be 	bl	8002ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2104      	movs	r1, #4
 8001e7c:	481a      	ldr	r0, [pc, #104]	; (8001ee8 <MX_GPIO_Init+0x11c>)
 8001e7e:	f001 f8b9 	bl	8002ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4812      	ldr	r0, [pc, #72]	; (8001ee4 <MX_GPIO_Init+0x118>)
 8001e9a:	f000 ff17 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_RS_DC_Pin GPIO_CS_Pin GPIO_Rst_Pin */
  GPIO_InitStruct.Pin = GPIO_RS_DC_Pin|GPIO_CS_Pin|GPIO_Rst_Pin;
 8001e9e:	230d      	movs	r3, #13
 8001ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <MX_GPIO_Init+0x118>)
 8001eb6:	f000 ff09 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : ADXL_CS_Pin */
  GPIO_InitStruct.Pin = ADXL_CS_Pin;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL_CS_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_GPIO_Init+0x11c>)
 8001ed2:	f000 fefb 	bl	8002ccc <HAL_GPIO_Init>

}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020800 	.word	0x40020800
 8001ee8:	40020c00 	.word	0x40020c00

08001eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef0:	b672      	cpsid	i
}
 8001ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <Error_Handler+0x8>
	...

08001ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f36:	2007      	movs	r0, #7
 8001f38:	f000 fb9c 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800

08001f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08c      	sub	sp, #48	; 0x30
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a4a      	ldr	r2, [pc, #296]	; (8002090 <HAL_SPI_MspInit+0x148>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d15b      	bne.n	8002022 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	4b49      	ldr	r3, [pc, #292]	; (8002094 <HAL_SPI_MspInit+0x14c>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	4a48      	ldr	r2, [pc, #288]	; (8002094 <HAL_SPI_MspInit+0x14c>)
 8001f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f78:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7a:	4b46      	ldr	r3, [pc, #280]	; (8002094 <HAL_SPI_MspInit+0x14c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	4b42      	ldr	r3, [pc, #264]	; (8002094 <HAL_SPI_MspInit+0x14c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a41      	ldr	r2, [pc, #260]	; (8002094 <HAL_SPI_MspInit+0x14c>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <HAL_SPI_MspInit+0x14c>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001fa2:	23a0      	movs	r3, #160	; 0xa0
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fb2:	2305      	movs	r3, #5
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4836      	ldr	r0, [pc, #216]	; (8002098 <HAL_SPI_MspInit+0x150>)
 8001fbe:	f000 fe85 	bl	8002ccc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001fc2:	4b36      	ldr	r3, [pc, #216]	; (800209c <HAL_SPI_MspInit+0x154>)
 8001fc4:	4a36      	ldr	r2, [pc, #216]	; (80020a0 <HAL_SPI_MspInit+0x158>)
 8001fc6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001fc8:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_SPI_MspInit+0x154>)
 8001fca:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001fce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fd0:	4b32      	ldr	r3, [pc, #200]	; (800209c <HAL_SPI_MspInit+0x154>)
 8001fd2:	2240      	movs	r2, #64	; 0x40
 8001fd4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd6:	4b31      	ldr	r3, [pc, #196]	; (800209c <HAL_SPI_MspInit+0x154>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fdc:	4b2f      	ldr	r3, [pc, #188]	; (800209c <HAL_SPI_MspInit+0x154>)
 8001fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_SPI_MspInit+0x154>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fea:	4b2c      	ldr	r3, [pc, #176]	; (800209c <HAL_SPI_MspInit+0x154>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <HAL_SPI_MspInit+0x154>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ff6:	4b29      	ldr	r3, [pc, #164]	; (800209c <HAL_SPI_MspInit+0x154>)
 8001ff8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ffc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ffe:	4b27      	ldr	r3, [pc, #156]	; (800209c <HAL_SPI_MspInit+0x154>)
 8002000:	2200      	movs	r2, #0
 8002002:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002004:	4825      	ldr	r0, [pc, #148]	; (800209c <HAL_SPI_MspInit+0x154>)
 8002006:	f000 fb77 	bl	80026f8 <HAL_DMA_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002010:	f7ff ff6c 	bl	8001eec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a21      	ldr	r2, [pc, #132]	; (800209c <HAL_SPI_MspInit+0x154>)
 8002018:	649a      	str	r2, [r3, #72]	; 0x48
 800201a:	4a20      	ldr	r2, [pc, #128]	; (800209c <HAL_SPI_MspInit+0x154>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002020:	e031      	b.n	8002086 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI3)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <HAL_SPI_MspInit+0x15c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d12c      	bne.n	8002086 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_SPI_MspInit+0x14c>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	4a17      	ldr	r2, [pc, #92]	; (8002094 <HAL_SPI_MspInit+0x14c>)
 8002036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203a:	6413      	str	r3, [r2, #64]	; 0x40
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_SPI_MspInit+0x14c>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_SPI_MspInit+0x14c>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	4a10      	ldr	r2, [pc, #64]	; (8002094 <HAL_SPI_MspInit+0x14c>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6313      	str	r3, [r2, #48]	; 0x30
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_SPI_MspInit+0x14c>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI3_SCK_Pin|SPI3_MISO_Pin|SPI3_MOSI_Pin;
 8002064:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002076:	2306      	movs	r3, #6
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	4619      	mov	r1, r3
 8002080:	4809      	ldr	r0, [pc, #36]	; (80020a8 <HAL_SPI_MspInit+0x160>)
 8002082:	f000 fe23 	bl	8002ccc <HAL_GPIO_Init>
}
 8002086:	bf00      	nop
 8002088:	3730      	adds	r7, #48	; 0x30
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40013000 	.word	0x40013000
 8002094:	40023800 	.word	0x40023800
 8002098:	40020000 	.word	0x40020000
 800209c:	2000046c 	.word	0x2000046c
 80020a0:	40026458 	.word	0x40026458
 80020a4:	40003c00 	.word	0x40003c00
 80020a8:	40020800 	.word	0x40020800

080020ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_UART_MspInit+0x84>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d12b      	bne.n	8002126 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_UART_MspInit+0x88>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a17      	ldr	r2, [pc, #92]	; (8002134 <HAL_UART_MspInit+0x88>)
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_UART_MspInit+0x88>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_UART_MspInit+0x88>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_UART_MspInit+0x88>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_UART_MspInit+0x88>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002106:	230c      	movs	r3, #12
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002116:	2307      	movs	r3, #7
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	; (8002138 <HAL_UART_MspInit+0x8c>)
 8002122:	f000 fdd3 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40004400 	.word	0x40004400
 8002134:	40023800 	.word	0x40023800
 8002138:	40020000 	.word	0x40020000

0800213c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <NMI_Handler+0x4>

08002142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <HardFault_Handler+0x4>

08002148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <MemManage_Handler+0x4>

0800214e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002152:	e7fe      	b.n	8002152 <BusFault_Handler+0x4>

08002154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <UsageFault_Handler+0x4>

0800215a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002188:	f000 f960 	bl	800244c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}

08002190 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <DMA2_Stream3_IRQHandler+0x10>)
 8002196:	f000 fb5d 	bl	8002854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	2000046c 	.word	0x2000046c

080021a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
	return 1;
 80021a8:	2301      	movs	r3, #1
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_kill>:

int _kill(int pid, int sig)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021be:	f002 fcab 	bl	8004b18 <__errno>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2216      	movs	r2, #22
 80021c6:	601a      	str	r2, [r3, #0]
	return -1;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <_exit>:

void _exit (int status)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ffe7 	bl	80021b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021e6:	e7fe      	b.n	80021e6 <_exit+0x12>

080021e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	e00a      	b.n	8002210 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021fa:	f3af 8000 	nop.w
 80021fe:	4601      	mov	r1, r0
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	60ba      	str	r2, [r7, #8]
 8002206:	b2ca      	uxtb	r2, r1
 8002208:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	3301      	adds	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	dbf0      	blt.n	80021fa <_read+0x12>
	}

return len;
 8002218:	687b      	ldr	r3, [r7, #4]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e009      	b.n	8002248 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	60ba      	str	r2, [r7, #8]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	dbf1      	blt.n	8002234 <_write+0x12>
	}
	return len;
 8002250:	687b      	ldr	r3, [r7, #4]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <_close>:

int _close(int file)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
	return -1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002282:	605a      	str	r2, [r3, #4]
	return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <_isatty>:

int _isatty(int file)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
	return 1;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
	return 0;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <_sbrk+0x5c>)
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <_sbrk+0x60>)
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d102      	bne.n	80022e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <_sbrk+0x64>)
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <_sbrk+0x68>)
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d207      	bcs.n	8002304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f4:	f002 fc10 	bl	8004b18 <__errno>
 80022f8:	4603      	mov	r3, r0
 80022fa:	220c      	movs	r2, #12
 80022fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002302:	e009      	b.n	8002318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <_sbrk+0x64>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <_sbrk+0x64>)
 8002314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002316:	68fb      	ldr	r3, [r7, #12]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20020000 	.word	0x20020000
 8002324:	00000400 	.word	0x00000400
 8002328:	20000204 	.word	0x20000204
 800232c:	200004e8 	.word	0x200004e8

08002330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <SystemInit+0x20>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <SystemInit+0x20>)
 800233c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800238c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002358:	480d      	ldr	r0, [pc, #52]	; (8002390 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800235a:	490e      	ldr	r1, [pc, #56]	; (8002394 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800235c:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800235e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002360:	e002      	b.n	8002368 <LoopCopyDataInit>

08002362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002366:	3304      	adds	r3, #4

08002368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800236a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800236c:	d3f9      	bcc.n	8002362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236e:	4a0b      	ldr	r2, [pc, #44]	; (800239c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002370:	4c0b      	ldr	r4, [pc, #44]	; (80023a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002374:	e001      	b.n	800237a <LoopFillZerobss>

08002376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002378:	3204      	adds	r2, #4

0800237a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800237a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800237c:	d3fb      	bcc.n	8002376 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800237e:	f7ff ffd7 	bl	8002330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002382:	f002 fbcf 	bl	8004b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002386:	f7ff fa1b 	bl	80017c0 <main>
  bx  lr    
 800238a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800238c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002394:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002398:	0800a0bc 	.word	0x0800a0bc
  ldr r2, =_sbss
 800239c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80023a0:	200004e4 	.word	0x200004e4

080023a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a4:	e7fe      	b.n	80023a4 <ADC_IRQHandler>
	...

080023a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0d      	ldr	r2, [pc, #52]	; (80023e8 <HAL_Init+0x40>)
 80023b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_Init+0x40>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <HAL_Init+0x40>)
 80023be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_Init+0x40>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_Init+0x40>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f000 f94f 	bl	8002674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f000 f808 	bl	80023ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023dc:	f7ff fd8c 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023c00 	.word	0x40023c00

080023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_InitTick+0x54>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_InitTick+0x58>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002402:	fbb3 f3f1 	udiv	r3, r3, r1
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f967 	bl	80026de <HAL_SYSTICK_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00e      	b.n	8002438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d80a      	bhi.n	8002436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002420:	2200      	movs	r2, #0
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002428:	f000 f92f 	bl	800268a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <HAL_InitTick+0x5c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e000      	b.n	8002438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000008 	.word	0x20000008
 8002444:	20000010 	.word	0x20000010
 8002448:	2000000c 	.word	0x2000000c

0800244c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_IncTick+0x20>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_IncTick+0x24>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4413      	add	r3, r2
 800245c:	4a04      	ldr	r2, [pc, #16]	; (8002470 <HAL_IncTick+0x24>)
 800245e:	6013      	str	r3, [r2, #0]
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000010 	.word	0x20000010
 8002470:	200004d0 	.word	0x200004d0

08002474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return uwTick;
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_GetTick+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	200004d0 	.word	0x200004d0

0800248c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002494:	f7ff ffee 	bl	8002474 <HAL_GetTick>
 8002498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024a4:	d005      	beq.n	80024b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_Delay+0x44>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024b2:	bf00      	nop
 80024b4:	f7ff ffde 	bl	8002474 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d8f7      	bhi.n	80024b4 <HAL_Delay+0x28>
  {
  }
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000010 	.word	0x20000010

080024d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f0:	4013      	ands	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002506:	4a04      	ldr	r2, [pc, #16]	; (8002518 <__NVIC_SetPriorityGrouping+0x44>)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	60d3      	str	r3, [r2, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002520:	4b04      	ldr	r3, [pc, #16]	; (8002534 <__NVIC_GetPriorityGrouping+0x18>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	f003 0307 	and.w	r3, r3, #7
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	2b00      	cmp	r3, #0
 8002548:	db0b      	blt.n	8002562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	f003 021f 	and.w	r2, r3, #31
 8002550:	4907      	ldr	r1, [pc, #28]	; (8002570 <__NVIC_EnableIRQ+0x38>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	2001      	movs	r0, #1
 800255a:	fa00 f202 	lsl.w	r2, r0, r2
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000e100 	.word	0xe000e100

08002574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	2b00      	cmp	r3, #0
 8002586:	db0a      	blt.n	800259e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	490c      	ldr	r1, [pc, #48]	; (80025c0 <__NVIC_SetPriority+0x4c>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	440b      	add	r3, r1
 8002598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800259c:	e00a      	b.n	80025b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <__NVIC_SetPriority+0x50>)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3b04      	subs	r3, #4
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	440b      	add	r3, r1
 80025b2:	761a      	strb	r2, [r3, #24]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f1c3 0307 	rsb	r3, r3, #7
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	bf28      	it	cs
 80025e6:	2304      	movcs	r3, #4
 80025e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d902      	bls.n	80025f8 <NVIC_EncodePriority+0x30>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3b03      	subs	r3, #3
 80025f6:	e000      	b.n	80025fa <NVIC_EncodePriority+0x32>
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	401a      	ands	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002610:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43d9      	mvns	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	4313      	orrs	r3, r2
         );
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	; 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002640:	d301      	bcc.n	8002646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002642:	2301      	movs	r3, #1
 8002644:	e00f      	b.n	8002666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <SysTick_Config+0x40>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3b01      	subs	r3, #1
 800264c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264e:	210f      	movs	r1, #15
 8002650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002654:	f7ff ff8e 	bl	8002574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <SysTick_Config+0x40>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <SysTick_Config+0x40>)
 8002660:	2207      	movs	r2, #7
 8002662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	e000e010 	.word	0xe000e010

08002674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff29 	bl	80024d4 <__NVIC_SetPriorityGrouping>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268a:	b580      	push	{r7, lr}
 800268c:	b086      	sub	sp, #24
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800269c:	f7ff ff3e 	bl	800251c <__NVIC_GetPriorityGrouping>
 80026a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	f7ff ff8e 	bl	80025c8 <NVIC_EncodePriority>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff5d 	bl	8002574 <__NVIC_SetPriority>
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff31 	bl	8002538 <__NVIC_EnableIRQ>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ffa2 	bl	8002630 <SysTick_Config>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7ff feb6 	bl	8002474 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e099      	b.n	8002848 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002734:	e00f      	b.n	8002756 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002736:	f7ff fe9d 	bl	8002474 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b05      	cmp	r3, #5
 8002742:	d908      	bls.n	8002756 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2203      	movs	r2, #3
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e078      	b.n	8002848 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e8      	bne.n	8002736 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4b38      	ldr	r3, [pc, #224]	; (8002850 <HAL_DMA_Init+0x158>)
 8002770:	4013      	ands	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d107      	bne.n	80027c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	4313      	orrs	r3, r2
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f023 0307 	bic.w	r3, r3, #7
 80027d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d117      	bne.n	800281a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00e      	beq.n	800281a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f9e9 	bl	8002bd4 <DMA_CheckFifoParam>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2240      	movs	r2, #64	; 0x40
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002816:	2301      	movs	r3, #1
 8002818:	e016      	b.n	8002848 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f9a0 	bl	8002b68 <DMA_CalcBaseAndBitshift>
 8002828:	4603      	mov	r3, r0
 800282a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002830:	223f      	movs	r2, #63	; 0x3f
 8002832:	409a      	lsls	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	f010803f 	.word	0xf010803f

08002854 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002860:	4b92      	ldr	r3, [pc, #584]	; (8002aac <HAL_DMA_IRQHandler+0x258>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a92      	ldr	r2, [pc, #584]	; (8002ab0 <HAL_DMA_IRQHandler+0x25c>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	0a9b      	lsrs	r3, r3, #10
 800286c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	2208      	movs	r2, #8
 8002880:	409a      	lsls	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01a      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d013      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0204 	bic.w	r2, r2, #4
 80028a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	2208      	movs	r2, #8
 80028ae:	409a      	lsls	r2, r3
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b8:	f043 0201 	orr.w	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	2201      	movs	r2, #1
 80028c6:	409a      	lsls	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d012      	beq.n	80028f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	2201      	movs	r2, #1
 80028e4:	409a      	lsls	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ee:	f043 0202 	orr.w	r2, r3, #2
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fa:	2204      	movs	r2, #4
 80028fc:	409a      	lsls	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d012      	beq.n	800292c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00b      	beq.n	800292c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2204      	movs	r2, #4
 800291a:	409a      	lsls	r2, r3
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002924:	f043 0204 	orr.w	r2, r3, #4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	2210      	movs	r2, #16
 8002932:	409a      	lsls	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d043      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d03c      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	2210      	movs	r2, #16
 8002950:	409a      	lsls	r2, r3
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d018      	beq.n	8002996 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d108      	bne.n	8002984 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d024      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
 8002982:	e01f      	b.n	80029c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01b      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
 8002994:	e016      	b.n	80029c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d107      	bne.n	80029b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0208 	bic.w	r2, r2, #8
 80029b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	2220      	movs	r2, #32
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 808e 	beq.w	8002af2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8086 	beq.w	8002af2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ea:	2220      	movs	r2, #32
 80029ec:	409a      	lsls	r2, r3
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d136      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0216 	bic.w	r2, r2, #22
 8002a0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <HAL_DMA_IRQHandler+0x1da>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0208 	bic.w	r2, r2, #8
 8002a3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	223f      	movs	r2, #63	; 0x3f
 8002a44:	409a      	lsls	r2, r3
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d07d      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
        }
        return;
 8002a6a:	e078      	b.n	8002b5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01c      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d108      	bne.n	8002a9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d030      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
 8002a98:	e02b      	b.n	8002af2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d027      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
 8002aaa:	e022      	b.n	8002af2 <HAL_DMA_IRQHandler+0x29e>
 8002aac:	20000008 	.word	0x20000008
 8002ab0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10f      	bne.n	8002ae2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0210 	bic.w	r2, r2, #16
 8002ad0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d032      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d022      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2205      	movs	r2, #5
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3301      	adds	r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d307      	bcc.n	8002b3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f2      	bne.n	8002b1e <HAL_DMA_IRQHandler+0x2ca>
 8002b38:	e000      	b.n	8002b3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b3a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
 8002b5c:	e000      	b.n	8002b60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b5e:	bf00      	nop
    }
  }
}
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop

08002b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3b10      	subs	r3, #16
 8002b78:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <DMA_CalcBaseAndBitshift+0x64>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	091b      	lsrs	r3, r3, #4
 8002b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b82:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4413      	add	r3, r2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d909      	bls.n	8002baa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	1d1a      	adds	r2, r3, #4
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ba8:	e007      	b.n	8002bba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	aaaaaaab 	.word	0xaaaaaaab
 8002bd0:	08009bf0 	.word	0x08009bf0

08002bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d11f      	bne.n	8002c2e <DMA_CheckFifoParam+0x5a>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d856      	bhi.n	8002ca2 <DMA_CheckFifoParam+0xce>
 8002bf4:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <DMA_CheckFifoParam+0x28>)
 8002bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfa:	bf00      	nop
 8002bfc:	08002c0d 	.word	0x08002c0d
 8002c00:	08002c1f 	.word	0x08002c1f
 8002c04:	08002c0d 	.word	0x08002c0d
 8002c08:	08002ca3 	.word	0x08002ca3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d046      	beq.n	8002ca6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1c:	e043      	b.n	8002ca6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c26:	d140      	bne.n	8002caa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2c:	e03d      	b.n	8002caa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c36:	d121      	bne.n	8002c7c <DMA_CheckFifoParam+0xa8>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d837      	bhi.n	8002cae <DMA_CheckFifoParam+0xda>
 8002c3e:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <DMA_CheckFifoParam+0x70>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002c55 	.word	0x08002c55
 8002c48:	08002c5b 	.word	0x08002c5b
 8002c4c:	08002c55 	.word	0x08002c55
 8002c50:	08002c6d 	.word	0x08002c6d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      break;
 8002c58:	e030      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d025      	beq.n	8002cb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6a:	e022      	b.n	8002cb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c74:	d11f      	bne.n	8002cb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c7a:	e01c      	b.n	8002cb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d903      	bls.n	8002c8a <DMA_CheckFifoParam+0xb6>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d003      	beq.n	8002c90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c88:	e018      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8e:	e015      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00e      	beq.n	8002cba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca0:	e00b      	b.n	8002cba <DMA_CheckFifoParam+0xe6>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e00a      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e008      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002caa:	bf00      	nop
 8002cac:	e006      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e004      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e002      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;   
 8002cb6:	bf00      	nop
 8002cb8:	e000      	b.n	8002cbc <DMA_CheckFifoParam+0xe8>
      break;
 8002cba:	bf00      	nop
    }
  } 
  
  return status; 
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop

08002ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	; 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	e165      	b.n	8002fb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ce8:	2201      	movs	r2, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	f040 8154 	bne.w	8002fae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d005      	beq.n	8002d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d130      	bne.n	8002d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2203      	movs	r2, #3
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d54:	2201      	movs	r2, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 0201 	and.w	r2, r3, #1
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d017      	beq.n	8002dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d123      	bne.n	8002e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	08da      	lsrs	r2, r3, #3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3208      	adds	r2, #8
 8002dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	220f      	movs	r2, #15
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	08da      	lsrs	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3208      	adds	r2, #8
 8002e0a:	69b9      	ldr	r1, [r7, #24]
 8002e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0203 	and.w	r2, r3, #3
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80ae 	beq.w	8002fae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	4b5d      	ldr	r3, [pc, #372]	; (8002fcc <HAL_GPIO_Init+0x300>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	4a5c      	ldr	r2, [pc, #368]	; (8002fcc <HAL_GPIO_Init+0x300>)
 8002e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e60:	6453      	str	r3, [r2, #68]	; 0x44
 8002e62:	4b5a      	ldr	r3, [pc, #360]	; (8002fcc <HAL_GPIO_Init+0x300>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e6e:	4a58      	ldr	r2, [pc, #352]	; (8002fd0 <HAL_GPIO_Init+0x304>)
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	3302      	adds	r3, #2
 8002e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	220f      	movs	r2, #15
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4f      	ldr	r2, [pc, #316]	; (8002fd4 <HAL_GPIO_Init+0x308>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d025      	beq.n	8002ee6 <HAL_GPIO_Init+0x21a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4e      	ldr	r2, [pc, #312]	; (8002fd8 <HAL_GPIO_Init+0x30c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d01f      	beq.n	8002ee2 <HAL_GPIO_Init+0x216>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4d      	ldr	r2, [pc, #308]	; (8002fdc <HAL_GPIO_Init+0x310>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d019      	beq.n	8002ede <HAL_GPIO_Init+0x212>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4c      	ldr	r2, [pc, #304]	; (8002fe0 <HAL_GPIO_Init+0x314>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_GPIO_Init+0x20e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4b      	ldr	r2, [pc, #300]	; (8002fe4 <HAL_GPIO_Init+0x318>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00d      	beq.n	8002ed6 <HAL_GPIO_Init+0x20a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4a      	ldr	r2, [pc, #296]	; (8002fe8 <HAL_GPIO_Init+0x31c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d007      	beq.n	8002ed2 <HAL_GPIO_Init+0x206>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a49      	ldr	r2, [pc, #292]	; (8002fec <HAL_GPIO_Init+0x320>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d101      	bne.n	8002ece <HAL_GPIO_Init+0x202>
 8002eca:	2306      	movs	r3, #6
 8002ecc:	e00c      	b.n	8002ee8 <HAL_GPIO_Init+0x21c>
 8002ece:	2307      	movs	r3, #7
 8002ed0:	e00a      	b.n	8002ee8 <HAL_GPIO_Init+0x21c>
 8002ed2:	2305      	movs	r3, #5
 8002ed4:	e008      	b.n	8002ee8 <HAL_GPIO_Init+0x21c>
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	e006      	b.n	8002ee8 <HAL_GPIO_Init+0x21c>
 8002eda:	2303      	movs	r3, #3
 8002edc:	e004      	b.n	8002ee8 <HAL_GPIO_Init+0x21c>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e002      	b.n	8002ee8 <HAL_GPIO_Init+0x21c>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <HAL_GPIO_Init+0x21c>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	f002 0203 	and.w	r2, r2, #3
 8002eee:	0092      	lsls	r2, r2, #2
 8002ef0:	4093      	lsls	r3, r2
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef8:	4935      	ldr	r1, [pc, #212]	; (8002fd0 <HAL_GPIO_Init+0x304>)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	3302      	adds	r3, #2
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f06:	4b3a      	ldr	r3, [pc, #232]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f2a:	4a31      	ldr	r2, [pc, #196]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f30:	4b2f      	ldr	r3, [pc, #188]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f54:	4a26      	ldr	r2, [pc, #152]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f5a:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa8:	4a11      	ldr	r2, [pc, #68]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b0f      	cmp	r3, #15
 8002fb8:	f67f ae96 	bls.w	8002ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	3724      	adds	r7, #36	; 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40013800 	.word	0x40013800
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	40020400 	.word	0x40020400
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	40020c00 	.word	0x40020c00
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40021400 	.word	0x40021400
 8002fec:	40021800 	.word	0x40021800
 8002ff0:	40013c00 	.word	0x40013c00

08002ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
 8003000:	4613      	mov	r3, r2
 8003002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003004:	787b      	ldrb	r3, [r7, #1]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003010:	e003      	b.n	800301a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	041a      	lsls	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	619a      	str	r2, [r3, #24]
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800303c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800304e:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <HAL_PWREx_EnableOverDrive+0x94>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003054:	f7ff fa0e 	bl	8002474 <HAL_GetTick>
 8003058:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800305a:	e009      	b.n	8003070 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800305c:	f7ff fa0a 	bl	8002474 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800306a:	d901      	bls.n	8003070 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e01f      	b.n	80030b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003070:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307c:	d1ee      	bne.n	800305c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800307e:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003084:	f7ff f9f6 	bl	8002474 <HAL_GetTick>
 8003088:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800308a:	e009      	b.n	80030a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800308c:	f7ff f9f2 	bl	8002474 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800309a:	d901      	bls.n	80030a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e007      	b.n	80030b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030ac:	d1ee      	bne.n	800308c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	420e0040 	.word	0x420e0040
 80030c0:	40007000 	.word	0x40007000
 80030c4:	420e0044 	.word	0x420e0044

080030c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0cc      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b68      	ldr	r3, [pc, #416]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d90c      	bls.n	8003104 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b65      	ldr	r3, [pc, #404]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b63      	ldr	r3, [pc, #396]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0b8      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d020      	beq.n	8003152 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800311c:	4b59      	ldr	r3, [pc, #356]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4a58      	ldr	r2, [pc, #352]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003126:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003134:	4b53      	ldr	r3, [pc, #332]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a52      	ldr	r2, [pc, #328]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800313e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003140:	4b50      	ldr	r3, [pc, #320]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	494d      	ldr	r1, [pc, #308]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d044      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b47      	ldr	r3, [pc, #284]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d119      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e07f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d003      	beq.n	8003186 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003182:	2b03      	cmp	r3, #3
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003196:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e067      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a6:	4b37      	ldr	r3, [pc, #220]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4934      	ldr	r1, [pc, #208]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b8:	f7ff f95c 	bl	8002474 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c0:	f7ff f958 	bl	8002474 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e04f      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 020c 	and.w	r2, r3, #12
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1eb      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d20c      	bcs.n	8003210 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b22      	ldr	r3, [pc, #136]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e032      	b.n	8003276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800321c:	4b19      	ldr	r3, [pc, #100]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4916      	ldr	r1, [pc, #88]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	490e      	ldr	r1, [pc, #56]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800324e:	f000 f855 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 8003252:	4602      	mov	r2, r0
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	490a      	ldr	r1, [pc, #40]	; (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 8003260:	5ccb      	ldrb	r3, [r1, r3]
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	4a09      	ldr	r2, [pc, #36]	; (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff f8bc 	bl	80023ec <HAL_InitTick>

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023c00 	.word	0x40023c00
 8003284:	40023800 	.word	0x40023800
 8003288:	08009bd8 	.word	0x08009bd8
 800328c:	20000008 	.word	0x20000008
 8003290:	2000000c 	.word	0x2000000c

08003294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000008 	.word	0x20000008

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b0:	f7ff fff0 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0a9b      	lsrs	r3, r3, #10
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	08009be8 	.word	0x08009be8

080032d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032d8:	f7ff ffdc 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	0b5b      	lsrs	r3, r3, #13
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	4903      	ldr	r1, [pc, #12]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08009be8 	.word	0x08009be8

080032fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003300:	b088      	sub	sp, #32
 8003302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003318:	4bce      	ldr	r3, [pc, #824]	; (8003654 <HAL_RCC_GetSysClockFreq+0x358>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b0c      	cmp	r3, #12
 8003322:	f200 818d 	bhi.w	8003640 <HAL_RCC_GetSysClockFreq+0x344>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <HAL_RCC_GetSysClockFreq+0x30>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003361 	.word	0x08003361
 8003330:	08003641 	.word	0x08003641
 8003334:	08003641 	.word	0x08003641
 8003338:	08003641 	.word	0x08003641
 800333c:	08003367 	.word	0x08003367
 8003340:	08003641 	.word	0x08003641
 8003344:	08003641 	.word	0x08003641
 8003348:	08003641 	.word	0x08003641
 800334c:	0800336d 	.word	0x0800336d
 8003350:	08003641 	.word	0x08003641
 8003354:	08003641 	.word	0x08003641
 8003358:	08003641 	.word	0x08003641
 800335c:	080034e1 	.word	0x080034e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003360:	4bbd      	ldr	r3, [pc, #756]	; (8003658 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003362:	61bb      	str	r3, [r7, #24]
       break;
 8003364:	e16f      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003366:	4bbd      	ldr	r3, [pc, #756]	; (800365c <HAL_RCC_GetSysClockFreq+0x360>)
 8003368:	61bb      	str	r3, [r7, #24]
      break;
 800336a:	e16c      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800336c:	4bb9      	ldr	r3, [pc, #740]	; (8003654 <HAL_RCC_GetSysClockFreq+0x358>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003374:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003376:	4bb7      	ldr	r3, [pc, #732]	; (8003654 <HAL_RCC_GetSysClockFreq+0x358>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d053      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003382:	4bb4      	ldr	r3, [pc, #720]	; (8003654 <HAL_RCC_GetSysClockFreq+0x358>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	099b      	lsrs	r3, r3, #6
 8003388:	461a      	mov	r2, r3
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	ea02 0400 	and.w	r4, r2, r0
 800339a:	603c      	str	r4, [r7, #0]
 800339c:	400b      	ands	r3, r1
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033a4:	4620      	mov	r0, r4
 80033a6:	4629      	mov	r1, r5
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	014b      	lsls	r3, r1, #5
 80033b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033b6:	0142      	lsls	r2, r0, #5
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	4623      	mov	r3, r4
 80033be:	1ac0      	subs	r0, r0, r3
 80033c0:	462b      	mov	r3, r5
 80033c2:	eb61 0103 	sbc.w	r1, r1, r3
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	018b      	lsls	r3, r1, #6
 80033d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033d4:	0182      	lsls	r2, r0, #6
 80033d6:	1a12      	subs	r2, r2, r0
 80033d8:	eb63 0301 	sbc.w	r3, r3, r1
 80033dc:	f04f 0000 	mov.w	r0, #0
 80033e0:	f04f 0100 	mov.w	r1, #0
 80033e4:	00d9      	lsls	r1, r3, #3
 80033e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033ea:	00d0      	lsls	r0, r2, #3
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4621      	mov	r1, r4
 80033f2:	1852      	adds	r2, r2, r1
 80033f4:	4629      	mov	r1, r5
 80033f6:	eb43 0101 	adc.w	r1, r3, r1
 80033fa:	460b      	mov	r3, r1
 80033fc:	f04f 0000 	mov.w	r0, #0
 8003400:	f04f 0100 	mov.w	r1, #0
 8003404:	0259      	lsls	r1, r3, #9
 8003406:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800340a:	0250      	lsls	r0, r2, #9
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	461a      	mov	r2, r3
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	f7fd fc54 	bl	8000cc8 <__aeabi_uldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4613      	mov	r3, r2
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	e04c      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342a:	4b8a      	ldr	r3, [pc, #552]	; (8003654 <HAL_RCC_GetSysClockFreq+0x358>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	099b      	lsrs	r3, r3, #6
 8003430:	461a      	mov	r2, r3
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	f240 10ff 	movw	r0, #511	; 0x1ff
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	ea02 0a00 	and.w	sl, r2, r0
 8003442:	ea03 0b01 	and.w	fp, r3, r1
 8003446:	4650      	mov	r0, sl
 8003448:	4659      	mov	r1, fp
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	014b      	lsls	r3, r1, #5
 8003454:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003458:	0142      	lsls	r2, r0, #5
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	ebb0 000a 	subs.w	r0, r0, sl
 8003462:	eb61 010b 	sbc.w	r1, r1, fp
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	018b      	lsls	r3, r1, #6
 8003470:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003474:	0182      	lsls	r2, r0, #6
 8003476:	1a12      	subs	r2, r2, r0
 8003478:	eb63 0301 	sbc.w	r3, r3, r1
 800347c:	f04f 0000 	mov.w	r0, #0
 8003480:	f04f 0100 	mov.w	r1, #0
 8003484:	00d9      	lsls	r1, r3, #3
 8003486:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800348a:	00d0      	lsls	r0, r2, #3
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	eb12 020a 	adds.w	r2, r2, sl
 8003494:	eb43 030b 	adc.w	r3, r3, fp
 8003498:	f04f 0000 	mov.w	r0, #0
 800349c:	f04f 0100 	mov.w	r1, #0
 80034a0:	0299      	lsls	r1, r3, #10
 80034a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034a6:	0290      	lsls	r0, r2, #10
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	461a      	mov	r2, r3
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	f7fd fc06 	bl	8000cc8 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034c4:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_RCC_GetSysClockFreq+0x358>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	3301      	adds	r3, #1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	61bb      	str	r3, [r7, #24]
      break;
 80034de:	e0b2      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e0:	4b5c      	ldr	r3, [pc, #368]	; (8003654 <HAL_RCC_GetSysClockFreq+0x358>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ea:	4b5a      	ldr	r3, [pc, #360]	; (8003654 <HAL_RCC_GetSysClockFreq+0x358>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d04d      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f6:	4b57      	ldr	r3, [pc, #348]	; (8003654 <HAL_RCC_GetSysClockFreq+0x358>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	099b      	lsrs	r3, r3, #6
 80034fc:	461a      	mov	r2, r3
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003506:	f04f 0100 	mov.w	r1, #0
 800350a:	ea02 0800 	and.w	r8, r2, r0
 800350e:	ea03 0901 	and.w	r9, r3, r1
 8003512:	4640      	mov	r0, r8
 8003514:	4649      	mov	r1, r9
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	014b      	lsls	r3, r1, #5
 8003520:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003524:	0142      	lsls	r2, r0, #5
 8003526:	4610      	mov	r0, r2
 8003528:	4619      	mov	r1, r3
 800352a:	ebb0 0008 	subs.w	r0, r0, r8
 800352e:	eb61 0109 	sbc.w	r1, r1, r9
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	018b      	lsls	r3, r1, #6
 800353c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003540:	0182      	lsls	r2, r0, #6
 8003542:	1a12      	subs	r2, r2, r0
 8003544:	eb63 0301 	sbc.w	r3, r3, r1
 8003548:	f04f 0000 	mov.w	r0, #0
 800354c:	f04f 0100 	mov.w	r1, #0
 8003550:	00d9      	lsls	r1, r3, #3
 8003552:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003556:	00d0      	lsls	r0, r2, #3
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	eb12 0208 	adds.w	r2, r2, r8
 8003560:	eb43 0309 	adc.w	r3, r3, r9
 8003564:	f04f 0000 	mov.w	r0, #0
 8003568:	f04f 0100 	mov.w	r1, #0
 800356c:	0259      	lsls	r1, r3, #9
 800356e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003572:	0250      	lsls	r0, r2, #9
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	461a      	mov	r2, r3
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	f7fd fba0 	bl	8000cc8 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	e04a      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_RCC_GetSysClockFreq+0x358>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	461a      	mov	r2, r3
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035a2:	f04f 0100 	mov.w	r1, #0
 80035a6:	ea02 0400 	and.w	r4, r2, r0
 80035aa:	ea03 0501 	and.w	r5, r3, r1
 80035ae:	4620      	mov	r0, r4
 80035b0:	4629      	mov	r1, r5
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	014b      	lsls	r3, r1, #5
 80035bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035c0:	0142      	lsls	r2, r0, #5
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	1b00      	subs	r0, r0, r4
 80035c8:	eb61 0105 	sbc.w	r1, r1, r5
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	018b      	lsls	r3, r1, #6
 80035d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035da:	0182      	lsls	r2, r0, #6
 80035dc:	1a12      	subs	r2, r2, r0
 80035de:	eb63 0301 	sbc.w	r3, r3, r1
 80035e2:	f04f 0000 	mov.w	r0, #0
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	00d9      	lsls	r1, r3, #3
 80035ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035f0:	00d0      	lsls	r0, r2, #3
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	1912      	adds	r2, r2, r4
 80035f8:	eb45 0303 	adc.w	r3, r5, r3
 80035fc:	f04f 0000 	mov.w	r0, #0
 8003600:	f04f 0100 	mov.w	r1, #0
 8003604:	0299      	lsls	r1, r3, #10
 8003606:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800360a:	0290      	lsls	r0, r2, #10
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	461a      	mov	r2, r3
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	f7fd fb54 	bl	8000cc8 <__aeabi_uldivmod>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4613      	mov	r3, r2
 8003626:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_RCC_GetSysClockFreq+0x358>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	0f1b      	lsrs	r3, r3, #28
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	61bb      	str	r3, [r7, #24]
      break;
 800363e:	e002      	b.n	8003646 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003642:	61bb      	str	r3, [r7, #24]
      break;
 8003644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003646:	69bb      	ldr	r3, [r7, #24]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3720      	adds	r7, #32
 800364c:	46bd      	mov	sp, r7
 800364e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	00f42400 	.word	0x00f42400
 800365c:	007a1200 	.word	0x007a1200

08003660 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e28d      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8083 	beq.w	8003786 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003680:	4b94      	ldr	r3, [pc, #592]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	2b04      	cmp	r3, #4
 800368a:	d019      	beq.n	80036c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800368c:	4b91      	ldr	r3, [pc, #580]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003694:	2b08      	cmp	r3, #8
 8003696:	d106      	bne.n	80036a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003698:	4b8e      	ldr	r3, [pc, #568]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a4:	d00c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a6:	4b8b      	ldr	r3, [pc, #556]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d112      	bne.n	80036d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b2:	4b88      	ldr	r3, [pc, #544]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036be:	d10b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	4b84      	ldr	r3, [pc, #528]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05b      	beq.n	8003784 <HAL_RCC_OscConfig+0x124>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d157      	bne.n	8003784 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e25a      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x90>
 80036e2:	4b7c      	ldr	r3, [pc, #496]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a7b      	ldr	r2, [pc, #492]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xcc>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0xb4>
 80036fa:	4b76      	ldr	r3, [pc, #472]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a75      	ldr	r2, [pc, #468]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b73      	ldr	r3, [pc, #460]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a72      	ldr	r2, [pc, #456]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xcc>
 8003714:	4b6f      	ldr	r3, [pc, #444]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a6e      	ldr	r2, [pc, #440]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b6c      	ldr	r3, [pc, #432]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a6b      	ldr	r2, [pc, #428]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fe fe9e 	bl	8002474 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373c:	f7fe fe9a 	bl	8002474 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e21f      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b61      	ldr	r3, [pc, #388]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xdc>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fe fe8a 	bl	8002474 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003764:	f7fe fe86 	bl	8002474 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e20b      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	4b57      	ldr	r3, [pc, #348]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x104>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d06f      	beq.n	8003872 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003792:	4b50      	ldr	r3, [pc, #320]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b00      	cmp	r3, #0
 800379c:	d017      	beq.n	80037ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800379e:	4b4d      	ldr	r3, [pc, #308]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d105      	bne.n	80037b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037aa:	4b4a      	ldr	r3, [pc, #296]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b6:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037be:	2b0c      	cmp	r3, #12
 80037c0:	d11c      	bne.n	80037fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c2:	4b44      	ldr	r3, [pc, #272]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d116      	bne.n	80037fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ce:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_RCC_OscConfig+0x186>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e1d3      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e6:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4937      	ldr	r1, [pc, #220]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fa:	e03a      	b.n	8003872 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d020      	beq.n	8003846 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003804:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <HAL_RCC_OscConfig+0x278>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fe fe33 	bl	8002474 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003812:	f7fe fe2f 	bl	8002474 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e1b4      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4925      	ldr	r1, [pc, #148]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 8003840:	4313      	orrs	r3, r2
 8003842:	600b      	str	r3, [r1, #0]
 8003844:	e015      	b.n	8003872 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003846:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <HAL_RCC_OscConfig+0x278>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fe fe12 	bl	8002474 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003854:	f7fe fe0e 	bl	8002474 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e193      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003866:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d036      	beq.n	80038ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d016      	beq.n	80038b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <HAL_RCC_OscConfig+0x27c>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388c:	f7fe fdf2 	bl	8002474 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003894:	f7fe fdee 	bl	8002474 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e173      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_OscConfig+0x274>)
 80038a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x234>
 80038b2:	e01b      	b.n	80038ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_RCC_OscConfig+0x27c>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ba:	f7fe fddb 	bl	8002474 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c0:	e00e      	b.n	80038e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c2:	f7fe fdd7 	bl	8002474 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d907      	bls.n	80038e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e15c      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
 80038d4:	40023800 	.word	0x40023800
 80038d8:	42470000 	.word	0x42470000
 80038dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e0:	4b8a      	ldr	r3, [pc, #552]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 80038e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ea      	bne.n	80038c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8097 	beq.w	8003a28 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fa:	2300      	movs	r3, #0
 80038fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fe:	4b83      	ldr	r3, [pc, #524]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10f      	bne.n	800392a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	4b7f      	ldr	r3, [pc, #508]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	4a7e      	ldr	r2, [pc, #504]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003918:	6413      	str	r3, [r2, #64]	; 0x40
 800391a:	4b7c      	ldr	r3, [pc, #496]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392a:	4b79      	ldr	r3, [pc, #484]	; (8003b10 <HAL_RCC_OscConfig+0x4b0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d118      	bne.n	8003968 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003936:	4b76      	ldr	r3, [pc, #472]	; (8003b10 <HAL_RCC_OscConfig+0x4b0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a75      	ldr	r2, [pc, #468]	; (8003b10 <HAL_RCC_OscConfig+0x4b0>)
 800393c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003942:	f7fe fd97 	bl	8002474 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394a:	f7fe fd93 	bl	8002474 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e118      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395c:	4b6c      	ldr	r3, [pc, #432]	; (8003b10 <HAL_RCC_OscConfig+0x4b0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d106      	bne.n	800397e <HAL_RCC_OscConfig+0x31e>
 8003970:	4b66      	ldr	r3, [pc, #408]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4a65      	ldr	r2, [pc, #404]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6713      	str	r3, [r2, #112]	; 0x70
 800397c:	e01c      	b.n	80039b8 <HAL_RCC_OscConfig+0x358>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b05      	cmp	r3, #5
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x340>
 8003986:	4b61      	ldr	r3, [pc, #388]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	4a60      	ldr	r2, [pc, #384]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 800398c:	f043 0304 	orr.w	r3, r3, #4
 8003990:	6713      	str	r3, [r2, #112]	; 0x70
 8003992:	4b5e      	ldr	r3, [pc, #376]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	4a5d      	ldr	r2, [pc, #372]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6713      	str	r3, [r2, #112]	; 0x70
 800399e:	e00b      	b.n	80039b8 <HAL_RCC_OscConfig+0x358>
 80039a0:	4b5a      	ldr	r3, [pc, #360]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	4a59      	ldr	r2, [pc, #356]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	6713      	str	r3, [r2, #112]	; 0x70
 80039ac:	4b57      	ldr	r3, [pc, #348]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	4a56      	ldr	r2, [pc, #344]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 80039b2:	f023 0304 	bic.w	r3, r3, #4
 80039b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d015      	beq.n	80039ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fe fd58 	bl	8002474 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	e00a      	b.n	80039de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fe fd54 	bl	8002474 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e0d7      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039de:	4b4b      	ldr	r3, [pc, #300]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0ee      	beq.n	80039c8 <HAL_RCC_OscConfig+0x368>
 80039ea:	e014      	b.n	8003a16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ec:	f7fe fd42 	bl	8002474 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f4:	f7fe fd3e 	bl	8002474 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e0c1      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0a:	4b40      	ldr	r3, [pc, #256]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1ee      	bne.n	80039f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1c:	4b3b      	ldr	r3, [pc, #236]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	4a3a      	ldr	r2, [pc, #232]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80ad 	beq.w	8003b8c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a32:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d060      	beq.n	8003b00 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d145      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a46:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <HAL_RCC_OscConfig+0x4b4>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fe fd12 	bl	8002474 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a54:	f7fe fd0e 	bl	8002474 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e093      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a66:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	019b      	lsls	r3, r3, #6
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	041b      	lsls	r3, r3, #16
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	061b      	lsls	r3, r3, #24
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	071b      	lsls	r3, r3, #28
 8003a9e:	491b      	ldr	r1, [pc, #108]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_RCC_OscConfig+0x4b4>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fe fce3 	bl	8002474 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab2:	f7fe fcdf 	bl	8002474 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e064      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x452>
 8003ad0:	e05c      	b.n	8003b8c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <HAL_RCC_OscConfig+0x4b4>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7fe fccc 	bl	8002474 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fe fcc8 	bl	8002474 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e04d      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_RCC_OscConfig+0x4ac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x480>
 8003afe:	e045      	b.n	8003b8c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d107      	bne.n	8003b18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e040      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40007000 	.word	0x40007000
 8003b14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b18:	4b1f      	ldr	r3, [pc, #124]	; (8003b98 <HAL_RCC_OscConfig+0x538>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d030      	beq.n	8003b88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d129      	bne.n	8003b88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d122      	bne.n	8003b88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b48:	4013      	ands	r3, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d119      	bne.n	8003b88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	085b      	lsrs	r3, r3, #1
 8003b60:	3b01      	subs	r3, #1
 8003b62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d10f      	bne.n	8003b88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800

08003b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e07b      	b.n	8003ca6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d108      	bne.n	8003bc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bbe:	d009      	beq.n	8003bd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
 8003bc6:	e005      	b.n	8003bd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fe f9aa 	bl	8001f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c58:	ea42 0103 	orr.w	r1, r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	f003 0104 	and.w	r1, r3, #4
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	f003 0210 	and.w	r2, r3, #16
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b088      	sub	sp, #32
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_SPI_Transmit+0x22>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e126      	b.n	8003f1e <HAL_SPI_Transmit+0x270>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cd8:	f7fe fbcc 	bl	8002474 <HAL_GetTick>
 8003cdc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d002      	beq.n	8003cf4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cf2:	e10b      	b.n	8003f0c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_SPI_Transmit+0x52>
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d04:	e102      	b.n	8003f0c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2203      	movs	r2, #3
 8003d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	88fa      	ldrh	r2, [r7, #6]
 8003d1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4c:	d10f      	bne.n	8003d6e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d007      	beq.n	8003d8c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d94:	d14b      	bne.n	8003e2e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_SPI_Transmit+0xf6>
 8003d9e:	8afb      	ldrh	r3, [r7, #22]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d13e      	bne.n	8003e22 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	881a      	ldrh	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	1c9a      	adds	r2, r3, #2
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dc8:	e02b      	b.n	8003e22 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d112      	bne.n	8003dfe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	881a      	ldrh	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	1c9a      	adds	r2, r3, #2
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dfc:	e011      	b.n	8003e22 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dfe:	f7fe fb39 	bl	8002474 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d803      	bhi.n	8003e16 <HAL_SPI_Transmit+0x168>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e14:	d102      	bne.n	8003e1c <HAL_SPI_Transmit+0x16e>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d102      	bne.n	8003e22 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e20:	e074      	b.n	8003f0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ce      	bne.n	8003dca <HAL_SPI_Transmit+0x11c>
 8003e2c:	e04c      	b.n	8003ec8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_SPI_Transmit+0x18e>
 8003e36:	8afb      	ldrh	r3, [r7, #22]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d140      	bne.n	8003ebe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	7812      	ldrb	r2, [r2, #0]
 8003e48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e62:	e02c      	b.n	8003ebe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d113      	bne.n	8003e9a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	7812      	ldrb	r2, [r2, #0]
 8003e7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e98:	e011      	b.n	8003ebe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e9a:	f7fe faeb 	bl	8002474 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d803      	bhi.n	8003eb2 <HAL_SPI_Transmit+0x204>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb0:	d102      	bne.n	8003eb8 <HAL_SPI_Transmit+0x20a>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ebc:	e026      	b.n	8003f0c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1cd      	bne.n	8003e64 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	6839      	ldr	r1, [r7, #0]
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fbcb 	bl	8004668 <SPI_EndRxTxTransaction>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e000      	b.n	8003f0c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b088      	sub	sp, #32
 8003f2a:	af02      	add	r7, sp, #8
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f42:	d112      	bne.n	8003f6a <HAL_SPI_Receive+0x44>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10e      	bne.n	8003f6a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2204      	movs	r2, #4
 8003f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f54:	88fa      	ldrh	r2, [r7, #6]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f8f1 	bl	8004148 <HAL_SPI_TransmitReceive>
 8003f66:	4603      	mov	r3, r0
 8003f68:	e0ea      	b.n	8004140 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_SPI_Receive+0x52>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e0e3      	b.n	8004140 <HAL_SPI_Receive+0x21a>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f80:	f7fe fa78 	bl	8002474 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d002      	beq.n	8003f98 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
 8003f94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f96:	e0ca      	b.n	800412e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_SPI_Receive+0x7e>
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fa8:	e0c1      	b.n	800412e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2204      	movs	r2, #4
 8003fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	88fa      	ldrh	r2, [r7, #6]
 8003fc2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff0:	d10f      	bne.n	8004012 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004000:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004010:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d007      	beq.n	8004030 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800402e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d162      	bne.n	80040fe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004038:	e02e      	b.n	8004098 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d115      	bne.n	8004074 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f103 020c 	add.w	r2, r3, #12
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004072:	e011      	b.n	8004098 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004074:	f7fe f9fe 	bl	8002474 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d803      	bhi.n	800408c <HAL_SPI_Receive+0x166>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800408a:	d102      	bne.n	8004092 <HAL_SPI_Receive+0x16c>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d102      	bne.n	8004098 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004096:	e04a      	b.n	800412e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1cb      	bne.n	800403a <HAL_SPI_Receive+0x114>
 80040a2:	e031      	b.n	8004108 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d113      	bne.n	80040da <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	b292      	uxth	r2, r2
 80040be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	1c9a      	adds	r2, r3, #2
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040d8:	e011      	b.n	80040fe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040da:	f7fe f9cb 	bl	8002474 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d803      	bhi.n	80040f2 <HAL_SPI_Receive+0x1cc>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f0:	d102      	bne.n	80040f8 <HAL_SPI_Receive+0x1d2>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040fc:	e017      	b.n	800412e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1cd      	bne.n	80040a4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	6839      	ldr	r1, [r7, #0]
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fa45 	bl	800459c <SPI_EndRxTransaction>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	75fb      	strb	r3, [r7, #23]
 800412a:	e000      	b.n	800412e <HAL_SPI_Receive+0x208>
  }

error :
 800412c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800413e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08c      	sub	sp, #48	; 0x30
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004156:	2301      	movs	r3, #1
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_SPI_TransmitReceive+0x26>
 800416a:	2302      	movs	r3, #2
 800416c:	e18a      	b.n	8004484 <HAL_SPI_TransmitReceive+0x33c>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004176:	f7fe f97d 	bl	8002474 <HAL_GetTick>
 800417a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800418c:	887b      	ldrh	r3, [r7, #2]
 800418e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004194:	2b01      	cmp	r3, #1
 8004196:	d00f      	beq.n	80041b8 <HAL_SPI_TransmitReceive+0x70>
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800419e:	d107      	bne.n	80041b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d103      	bne.n	80041b0 <HAL_SPI_TransmitReceive+0x68>
 80041a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d003      	beq.n	80041b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
 80041b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041b6:	e15b      	b.n	8004470 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_SPI_TransmitReceive+0x82>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <HAL_SPI_TransmitReceive+0x82>
 80041c4:	887b      	ldrh	r3, [r7, #2]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d103      	bne.n	80041d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041d0:	e14e      	b.n	8004470 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d003      	beq.n	80041e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2205      	movs	r2, #5
 80041e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	887a      	ldrh	r2, [r7, #2]
 80041f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	887a      	ldrh	r2, [r7, #2]
 8004208:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	887a      	ldrh	r2, [r7, #2]
 800420e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b40      	cmp	r3, #64	; 0x40
 8004228:	d007      	beq.n	800423a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004238:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004242:	d178      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_SPI_TransmitReceive+0x10a>
 800424c:	8b7b      	ldrh	r3, [r7, #26]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d166      	bne.n	8004320 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	881a      	ldrh	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	1c9a      	adds	r2, r3, #2
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004276:	e053      	b.n	8004320 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b02      	cmp	r3, #2
 8004284:	d11b      	bne.n	80042be <HAL_SPI_TransmitReceive+0x176>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d016      	beq.n	80042be <HAL_SPI_TransmitReceive+0x176>
 8004290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d113      	bne.n	80042be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	881a      	ldrh	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	1c9a      	adds	r2, r3, #2
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d119      	bne.n	8004300 <HAL_SPI_TransmitReceive+0x1b8>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d014      	beq.n	8004300 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	b292      	uxth	r2, r2
 80042e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	1c9a      	adds	r2, r3, #2
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042fc:	2301      	movs	r3, #1
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004300:	f7fe f8b8 	bl	8002474 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800430c:	429a      	cmp	r2, r3
 800430e:	d807      	bhi.n	8004320 <HAL_SPI_TransmitReceive+0x1d8>
 8004310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004316:	d003      	beq.n	8004320 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800431e:	e0a7      	b.n	8004470 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1a6      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x130>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1a1      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x130>
 8004334:	e07c      	b.n	8004430 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_SPI_TransmitReceive+0x1fc>
 800433e:	8b7b      	ldrh	r3, [r7, #26]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d16b      	bne.n	800441c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	7812      	ldrb	r2, [r2, #0]
 8004350:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800436a:	e057      	b.n	800441c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d11c      	bne.n	80043b4 <HAL_SPI_TransmitReceive+0x26c>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d017      	beq.n	80043b4 <HAL_SPI_TransmitReceive+0x26c>
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	2b01      	cmp	r3, #1
 8004388:	d114      	bne.n	80043b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	330c      	adds	r3, #12
 8004394:	7812      	ldrb	r2, [r2, #0]
 8004396:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d119      	bne.n	80043f6 <HAL_SPI_TransmitReceive+0x2ae>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d014      	beq.n	80043f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043f2:	2301      	movs	r3, #1
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043f6:	f7fe f83d 	bl	8002474 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004402:	429a      	cmp	r2, r3
 8004404:	d803      	bhi.n	800440e <HAL_SPI_TransmitReceive+0x2c6>
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800440c:	d102      	bne.n	8004414 <HAL_SPI_TransmitReceive+0x2cc>
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d103      	bne.n	800441c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800441a:	e029      	b.n	8004470 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1a2      	bne.n	800436c <HAL_SPI_TransmitReceive+0x224>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d19d      	bne.n	800436c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004432:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f917 	bl	8004668 <SPI_EndRxTxTransaction>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800444c:	e010      	b.n	8004470 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	e000      	b.n	8004470 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800446e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004480:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004484:	4618      	mov	r0, r3
 8004486:	3730      	adds	r7, #48	; 0x30
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800449c:	f7fd ffea 	bl	8002474 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	4413      	add	r3, r2
 80044aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044ac:	f7fd ffe2 	bl	8002474 <HAL_GetTick>
 80044b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044b2:	4b39      	ldr	r3, [pc, #228]	; (8004598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	015b      	lsls	r3, r3, #5
 80044b8:	0d1b      	lsrs	r3, r3, #20
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	fb02 f303 	mul.w	r3, r2, r3
 80044c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044c2:	e054      	b.n	800456e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ca:	d050      	beq.n	800456e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044cc:	f7fd ffd2 	bl	8002474 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	69fa      	ldr	r2, [r7, #28]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d902      	bls.n	80044e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d13d      	bne.n	800455e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044fa:	d111      	bne.n	8004520 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004504:	d004      	beq.n	8004510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450e:	d107      	bne.n	8004520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800451e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004528:	d10f      	bne.n	800454a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e017      	b.n	800458e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	3b01      	subs	r3, #1
 800456c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4013      	ands	r3, r2
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	bf0c      	ite	eq
 800457e:	2301      	moveq	r3, #1
 8004580:	2300      	movne	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	429a      	cmp	r2, r3
 800458a:	d19b      	bne.n	80044c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000008 	.word	0x20000008

0800459c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b0:	d111      	bne.n	80045d6 <SPI_EndRxTransaction+0x3a>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ba:	d004      	beq.n	80045c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c4:	d107      	bne.n	80045d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045de:	d12a      	bne.n	8004636 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e8:	d012      	beq.n	8004610 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2200      	movs	r2, #0
 80045f2:	2180      	movs	r1, #128	; 0x80
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff ff49 	bl	800448c <SPI_WaitFlagStateUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d02d      	beq.n	800465c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e026      	b.n	800465e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2200      	movs	r2, #0
 8004618:	2101      	movs	r1, #1
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff ff36 	bl	800448c <SPI_WaitFlagStateUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d01a      	beq.n	800465c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f043 0220 	orr.w	r2, r3, #32
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e013      	b.n	800465e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2200      	movs	r2, #0
 800463e:	2101      	movs	r1, #1
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f7ff ff23 	bl	800448c <SPI_WaitFlagStateUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004650:	f043 0220 	orr.w	r2, r3, #32
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e000      	b.n	800465e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004674:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <SPI_EndRxTxTransaction+0x7c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1b      	ldr	r2, [pc, #108]	; (80046e8 <SPI_EndRxTxTransaction+0x80>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	0d5b      	lsrs	r3, r3, #21
 8004680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004684:	fb02 f303 	mul.w	r3, r2, r3
 8004688:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004692:	d112      	bne.n	80046ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2200      	movs	r2, #0
 800469c:	2180      	movs	r1, #128	; 0x80
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff fef4 	bl	800448c <SPI_WaitFlagStateUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d016      	beq.n	80046d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ae:	f043 0220 	orr.w	r2, r3, #32
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e00f      	b.n	80046da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b80      	cmp	r3, #128	; 0x80
 80046d2:	d0f2      	beq.n	80046ba <SPI_EndRxTxTransaction+0x52>
 80046d4:	e000      	b.n	80046d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80046d6:	bf00      	nop
  }

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20000008 	.word	0x20000008
 80046e8:	165e9f81 	.word	0x165e9f81

080046ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e03f      	b.n	800477e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fd fcca 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	; 0x24
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800472e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f829 	bl	8004788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478c:	b09f      	sub	sp, #124	; 0x7c
 800478e:	af00      	add	r7, sp, #0
 8004790:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800479c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479e:	68d9      	ldr	r1, [r3, #12]
 80047a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	ea40 0301 	orr.w	r3, r0, r1
 80047a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	431a      	orrs	r2, r3
 80047ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	4313      	orrs	r3, r2
 80047c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80047c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047cc:	f021 010c 	bic.w	r1, r1, #12
 80047d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047d6:	430b      	orrs	r3, r1
 80047d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e6:	6999      	ldr	r1, [r3, #24]
 80047e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	ea40 0301 	orr.w	r3, r0, r1
 80047f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4bc5      	ldr	r3, [pc, #788]	; (8004b0c <UART_SetConfig+0x384>)
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d004      	beq.n	8004806 <UART_SetConfig+0x7e>
 80047fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4bc3      	ldr	r3, [pc, #780]	; (8004b10 <UART_SetConfig+0x388>)
 8004802:	429a      	cmp	r2, r3
 8004804:	d103      	bne.n	800480e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004806:	f7fe fd65 	bl	80032d4 <HAL_RCC_GetPCLK2Freq>
 800480a:	6778      	str	r0, [r7, #116]	; 0x74
 800480c:	e002      	b.n	8004814 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800480e:	f7fe fd4d 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004812:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800481c:	f040 80b6 	bne.w	800498c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004822:	461c      	mov	r4, r3
 8004824:	f04f 0500 	mov.w	r5, #0
 8004828:	4622      	mov	r2, r4
 800482a:	462b      	mov	r3, r5
 800482c:	1891      	adds	r1, r2, r2
 800482e:	6439      	str	r1, [r7, #64]	; 0x40
 8004830:	415b      	adcs	r3, r3
 8004832:	647b      	str	r3, [r7, #68]	; 0x44
 8004834:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004838:	1912      	adds	r2, r2, r4
 800483a:	eb45 0303 	adc.w	r3, r5, r3
 800483e:	f04f 0000 	mov.w	r0, #0
 8004842:	f04f 0100 	mov.w	r1, #0
 8004846:	00d9      	lsls	r1, r3, #3
 8004848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800484c:	00d0      	lsls	r0, r2, #3
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	1911      	adds	r1, r2, r4
 8004854:	6639      	str	r1, [r7, #96]	; 0x60
 8004856:	416b      	adcs	r3, r5
 8004858:	667b      	str	r3, [r7, #100]	; 0x64
 800485a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	461a      	mov	r2, r3
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	1891      	adds	r1, r2, r2
 8004866:	63b9      	str	r1, [r7, #56]	; 0x38
 8004868:	415b      	adcs	r3, r3
 800486a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004870:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004874:	f7fc fa28 	bl	8000cc8 <__aeabi_uldivmod>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4ba5      	ldr	r3, [pc, #660]	; (8004b14 <UART_SetConfig+0x38c>)
 800487e:	fba3 2302 	umull	r2, r3, r3, r2
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	011e      	lsls	r6, r3, #4
 8004886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004888:	461c      	mov	r4, r3
 800488a:	f04f 0500 	mov.w	r5, #0
 800488e:	4622      	mov	r2, r4
 8004890:	462b      	mov	r3, r5
 8004892:	1891      	adds	r1, r2, r2
 8004894:	6339      	str	r1, [r7, #48]	; 0x30
 8004896:	415b      	adcs	r3, r3
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
 800489a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800489e:	1912      	adds	r2, r2, r4
 80048a0:	eb45 0303 	adc.w	r3, r5, r3
 80048a4:	f04f 0000 	mov.w	r0, #0
 80048a8:	f04f 0100 	mov.w	r1, #0
 80048ac:	00d9      	lsls	r1, r3, #3
 80048ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048b2:	00d0      	lsls	r0, r2, #3
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	1911      	adds	r1, r2, r4
 80048ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80048bc:	416b      	adcs	r3, r5
 80048be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	461a      	mov	r2, r3
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	1891      	adds	r1, r2, r2
 80048cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80048ce:	415b      	adcs	r3, r3
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80048da:	f7fc f9f5 	bl	8000cc8 <__aeabi_uldivmod>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4b8c      	ldr	r3, [pc, #560]	; (8004b14 <UART_SetConfig+0x38c>)
 80048e4:	fba3 1302 	umull	r1, r3, r3, r2
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	2164      	movs	r1, #100	; 0x64
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	3332      	adds	r3, #50	; 0x32
 80048f6:	4a87      	ldr	r2, [pc, #540]	; (8004b14 <UART_SetConfig+0x38c>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004904:	441e      	add	r6, r3
 8004906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004908:	4618      	mov	r0, r3
 800490a:	f04f 0100 	mov.w	r1, #0
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	1894      	adds	r4, r2, r2
 8004914:	623c      	str	r4, [r7, #32]
 8004916:	415b      	adcs	r3, r3
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
 800491a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800491e:	1812      	adds	r2, r2, r0
 8004920:	eb41 0303 	adc.w	r3, r1, r3
 8004924:	f04f 0400 	mov.w	r4, #0
 8004928:	f04f 0500 	mov.w	r5, #0
 800492c:	00dd      	lsls	r5, r3, #3
 800492e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004932:	00d4      	lsls	r4, r2, #3
 8004934:	4622      	mov	r2, r4
 8004936:	462b      	mov	r3, r5
 8004938:	1814      	adds	r4, r2, r0
 800493a:	653c      	str	r4, [r7, #80]	; 0x50
 800493c:	414b      	adcs	r3, r1
 800493e:	657b      	str	r3, [r7, #84]	; 0x54
 8004940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	461a      	mov	r2, r3
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	1891      	adds	r1, r2, r2
 800494c:	61b9      	str	r1, [r7, #24]
 800494e:	415b      	adcs	r3, r3
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004956:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800495a:	f7fc f9b5 	bl	8000cc8 <__aeabi_uldivmod>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4b6c      	ldr	r3, [pc, #432]	; (8004b14 <UART_SetConfig+0x38c>)
 8004964:	fba3 1302 	umull	r1, r3, r3, r2
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	2164      	movs	r1, #100	; 0x64
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	3332      	adds	r3, #50	; 0x32
 8004976:	4a67      	ldr	r2, [pc, #412]	; (8004b14 <UART_SetConfig+0x38c>)
 8004978:	fba2 2303 	umull	r2, r3, r2, r3
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	f003 0207 	and.w	r2, r3, #7
 8004982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4432      	add	r2, r6
 8004988:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800498a:	e0b9      	b.n	8004b00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800498c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800498e:	461c      	mov	r4, r3
 8004990:	f04f 0500 	mov.w	r5, #0
 8004994:	4622      	mov	r2, r4
 8004996:	462b      	mov	r3, r5
 8004998:	1891      	adds	r1, r2, r2
 800499a:	6139      	str	r1, [r7, #16]
 800499c:	415b      	adcs	r3, r3
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049a4:	1912      	adds	r2, r2, r4
 80049a6:	eb45 0303 	adc.w	r3, r5, r3
 80049aa:	f04f 0000 	mov.w	r0, #0
 80049ae:	f04f 0100 	mov.w	r1, #0
 80049b2:	00d9      	lsls	r1, r3, #3
 80049b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049b8:	00d0      	lsls	r0, r2, #3
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	eb12 0804 	adds.w	r8, r2, r4
 80049c2:	eb43 0905 	adc.w	r9, r3, r5
 80049c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f04f 0100 	mov.w	r1, #0
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	008b      	lsls	r3, r1, #2
 80049da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049de:	0082      	lsls	r2, r0, #2
 80049e0:	4640      	mov	r0, r8
 80049e2:	4649      	mov	r1, r9
 80049e4:	f7fc f970 	bl	8000cc8 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4b49      	ldr	r3, [pc, #292]	; (8004b14 <UART_SetConfig+0x38c>)
 80049ee:	fba3 2302 	umull	r2, r3, r3, r2
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	011e      	lsls	r6, r3, #4
 80049f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049f8:	4618      	mov	r0, r3
 80049fa:	f04f 0100 	mov.w	r1, #0
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	1894      	adds	r4, r2, r2
 8004a04:	60bc      	str	r4, [r7, #8]
 8004a06:	415b      	adcs	r3, r3
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a0e:	1812      	adds	r2, r2, r0
 8004a10:	eb41 0303 	adc.w	r3, r1, r3
 8004a14:	f04f 0400 	mov.w	r4, #0
 8004a18:	f04f 0500 	mov.w	r5, #0
 8004a1c:	00dd      	lsls	r5, r3, #3
 8004a1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a22:	00d4      	lsls	r4, r2, #3
 8004a24:	4622      	mov	r2, r4
 8004a26:	462b      	mov	r3, r5
 8004a28:	1814      	adds	r4, r2, r0
 8004a2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004a2c:	414b      	adcs	r3, r1
 8004a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f04f 0100 	mov.w	r1, #0
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	008b      	lsls	r3, r1, #2
 8004a44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a48:	0082      	lsls	r2, r0, #2
 8004a4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004a4e:	f7fc f93b 	bl	8000cc8 <__aeabi_uldivmod>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4b2f      	ldr	r3, [pc, #188]	; (8004b14 <UART_SetConfig+0x38c>)
 8004a58:	fba3 1302 	umull	r1, r3, r3, r2
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2164      	movs	r1, #100	; 0x64
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	3332      	adds	r3, #50	; 0x32
 8004a6a:	4a2a      	ldr	r2, [pc, #168]	; (8004b14 <UART_SetConfig+0x38c>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a76:	441e      	add	r6, r3
 8004a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f04f 0100 	mov.w	r1, #0
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	1894      	adds	r4, r2, r2
 8004a86:	603c      	str	r4, [r7, #0]
 8004a88:	415b      	adcs	r3, r3
 8004a8a:	607b      	str	r3, [r7, #4]
 8004a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a90:	1812      	adds	r2, r2, r0
 8004a92:	eb41 0303 	adc.w	r3, r1, r3
 8004a96:	f04f 0400 	mov.w	r4, #0
 8004a9a:	f04f 0500 	mov.w	r5, #0
 8004a9e:	00dd      	lsls	r5, r3, #3
 8004aa0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004aa4:	00d4      	lsls	r4, r2, #3
 8004aa6:	4622      	mov	r2, r4
 8004aa8:	462b      	mov	r3, r5
 8004aaa:	eb12 0a00 	adds.w	sl, r2, r0
 8004aae:	eb43 0b01 	adc.w	fp, r3, r1
 8004ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	008b      	lsls	r3, r1, #2
 8004ac6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004aca:	0082      	lsls	r2, r0, #2
 8004acc:	4650      	mov	r0, sl
 8004ace:	4659      	mov	r1, fp
 8004ad0:	f7fc f8fa 	bl	8000cc8 <__aeabi_uldivmod>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <UART_SetConfig+0x38c>)
 8004ada:	fba3 1302 	umull	r1, r3, r3, r2
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	2164      	movs	r1, #100	; 0x64
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	3332      	adds	r3, #50	; 0x32
 8004aec:	4a09      	ldr	r2, [pc, #36]	; (8004b14 <UART_SetConfig+0x38c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	f003 020f 	and.w	r2, r3, #15
 8004af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4432      	add	r2, r6
 8004afe:	609a      	str	r2, [r3, #8]
}
 8004b00:	bf00      	nop
 8004b02:	377c      	adds	r7, #124	; 0x7c
 8004b04:	46bd      	mov	sp, r7
 8004b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40011000 	.word	0x40011000
 8004b10:	40011400 	.word	0x40011400
 8004b14:	51eb851f 	.word	0x51eb851f

08004b18 <__errno>:
 8004b18:	4b01      	ldr	r3, [pc, #4]	; (8004b20 <__errno+0x8>)
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000014 	.word	0x20000014

08004b24 <__libc_init_array>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	4d0d      	ldr	r5, [pc, #52]	; (8004b5c <__libc_init_array+0x38>)
 8004b28:	4c0d      	ldr	r4, [pc, #52]	; (8004b60 <__libc_init_array+0x3c>)
 8004b2a:	1b64      	subs	r4, r4, r5
 8004b2c:	10a4      	asrs	r4, r4, #2
 8004b2e:	2600      	movs	r6, #0
 8004b30:	42a6      	cmp	r6, r4
 8004b32:	d109      	bne.n	8004b48 <__libc_init_array+0x24>
 8004b34:	4d0b      	ldr	r5, [pc, #44]	; (8004b64 <__libc_init_array+0x40>)
 8004b36:	4c0c      	ldr	r4, [pc, #48]	; (8004b68 <__libc_init_array+0x44>)
 8004b38:	f004 fc46 	bl	80093c8 <_init>
 8004b3c:	1b64      	subs	r4, r4, r5
 8004b3e:	10a4      	asrs	r4, r4, #2
 8004b40:	2600      	movs	r6, #0
 8004b42:	42a6      	cmp	r6, r4
 8004b44:	d105      	bne.n	8004b52 <__libc_init_array+0x2e>
 8004b46:	bd70      	pop	{r4, r5, r6, pc}
 8004b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4c:	4798      	blx	r3
 8004b4e:	3601      	adds	r6, #1
 8004b50:	e7ee      	b.n	8004b30 <__libc_init_array+0xc>
 8004b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b56:	4798      	blx	r3
 8004b58:	3601      	adds	r6, #1
 8004b5a:	e7f2      	b.n	8004b42 <__libc_init_array+0x1e>
 8004b5c:	0800a0b4 	.word	0x0800a0b4
 8004b60:	0800a0b4 	.word	0x0800a0b4
 8004b64:	0800a0b4 	.word	0x0800a0b4
 8004b68:	0800a0b8 	.word	0x0800a0b8

08004b6c <memset>:
 8004b6c:	4402      	add	r2, r0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d100      	bne.n	8004b76 <memset+0xa>
 8004b74:	4770      	bx	lr
 8004b76:	f803 1b01 	strb.w	r1, [r3], #1
 8004b7a:	e7f9      	b.n	8004b70 <memset+0x4>

08004b7c <__cvt>:
 8004b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b80:	ec55 4b10 	vmov	r4, r5, d0
 8004b84:	2d00      	cmp	r5, #0
 8004b86:	460e      	mov	r6, r1
 8004b88:	4619      	mov	r1, r3
 8004b8a:	462b      	mov	r3, r5
 8004b8c:	bfbb      	ittet	lt
 8004b8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b92:	461d      	movlt	r5, r3
 8004b94:	2300      	movge	r3, #0
 8004b96:	232d      	movlt	r3, #45	; 0x2d
 8004b98:	700b      	strb	r3, [r1, #0]
 8004b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ba0:	4691      	mov	r9, r2
 8004ba2:	f023 0820 	bic.w	r8, r3, #32
 8004ba6:	bfbc      	itt	lt
 8004ba8:	4622      	movlt	r2, r4
 8004baa:	4614      	movlt	r4, r2
 8004bac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bb0:	d005      	beq.n	8004bbe <__cvt+0x42>
 8004bb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004bb6:	d100      	bne.n	8004bba <__cvt+0x3e>
 8004bb8:	3601      	adds	r6, #1
 8004bba:	2102      	movs	r1, #2
 8004bbc:	e000      	b.n	8004bc0 <__cvt+0x44>
 8004bbe:	2103      	movs	r1, #3
 8004bc0:	ab03      	add	r3, sp, #12
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	ab02      	add	r3, sp, #8
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	ec45 4b10 	vmov	d0, r4, r5
 8004bcc:	4653      	mov	r3, sl
 8004bce:	4632      	mov	r2, r6
 8004bd0:	f001 fdb6 	bl	8006740 <_dtoa_r>
 8004bd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004bd8:	4607      	mov	r7, r0
 8004bda:	d102      	bne.n	8004be2 <__cvt+0x66>
 8004bdc:	f019 0f01 	tst.w	r9, #1
 8004be0:	d022      	beq.n	8004c28 <__cvt+0xac>
 8004be2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004be6:	eb07 0906 	add.w	r9, r7, r6
 8004bea:	d110      	bne.n	8004c0e <__cvt+0x92>
 8004bec:	783b      	ldrb	r3, [r7, #0]
 8004bee:	2b30      	cmp	r3, #48	; 0x30
 8004bf0:	d10a      	bne.n	8004c08 <__cvt+0x8c>
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	f7fb ff85 	bl	8000b08 <__aeabi_dcmpeq>
 8004bfe:	b918      	cbnz	r0, 8004c08 <__cvt+0x8c>
 8004c00:	f1c6 0601 	rsb	r6, r6, #1
 8004c04:	f8ca 6000 	str.w	r6, [sl]
 8004c08:	f8da 3000 	ldr.w	r3, [sl]
 8004c0c:	4499      	add	r9, r3
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2300      	movs	r3, #0
 8004c12:	4620      	mov	r0, r4
 8004c14:	4629      	mov	r1, r5
 8004c16:	f7fb ff77 	bl	8000b08 <__aeabi_dcmpeq>
 8004c1a:	b108      	cbz	r0, 8004c20 <__cvt+0xa4>
 8004c1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c20:	2230      	movs	r2, #48	; 0x30
 8004c22:	9b03      	ldr	r3, [sp, #12]
 8004c24:	454b      	cmp	r3, r9
 8004c26:	d307      	bcc.n	8004c38 <__cvt+0xbc>
 8004c28:	9b03      	ldr	r3, [sp, #12]
 8004c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c2c:	1bdb      	subs	r3, r3, r7
 8004c2e:	4638      	mov	r0, r7
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	b004      	add	sp, #16
 8004c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c38:	1c59      	adds	r1, r3, #1
 8004c3a:	9103      	str	r1, [sp, #12]
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	e7f0      	b.n	8004c22 <__cvt+0xa6>

08004c40 <__exponent>:
 8004c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c42:	4603      	mov	r3, r0
 8004c44:	2900      	cmp	r1, #0
 8004c46:	bfb8      	it	lt
 8004c48:	4249      	neglt	r1, r1
 8004c4a:	f803 2b02 	strb.w	r2, [r3], #2
 8004c4e:	bfb4      	ite	lt
 8004c50:	222d      	movlt	r2, #45	; 0x2d
 8004c52:	222b      	movge	r2, #43	; 0x2b
 8004c54:	2909      	cmp	r1, #9
 8004c56:	7042      	strb	r2, [r0, #1]
 8004c58:	dd2a      	ble.n	8004cb0 <__exponent+0x70>
 8004c5a:	f10d 0407 	add.w	r4, sp, #7
 8004c5e:	46a4      	mov	ip, r4
 8004c60:	270a      	movs	r7, #10
 8004c62:	46a6      	mov	lr, r4
 8004c64:	460a      	mov	r2, r1
 8004c66:	fb91 f6f7 	sdiv	r6, r1, r7
 8004c6a:	fb07 1516 	mls	r5, r7, r6, r1
 8004c6e:	3530      	adds	r5, #48	; 0x30
 8004c70:	2a63      	cmp	r2, #99	; 0x63
 8004c72:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004c76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	dcf1      	bgt.n	8004c62 <__exponent+0x22>
 8004c7e:	3130      	adds	r1, #48	; 0x30
 8004c80:	f1ae 0502 	sub.w	r5, lr, #2
 8004c84:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c88:	1c44      	adds	r4, r0, #1
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	4561      	cmp	r1, ip
 8004c8e:	d30a      	bcc.n	8004ca6 <__exponent+0x66>
 8004c90:	f10d 0209 	add.w	r2, sp, #9
 8004c94:	eba2 020e 	sub.w	r2, r2, lr
 8004c98:	4565      	cmp	r5, ip
 8004c9a:	bf88      	it	hi
 8004c9c:	2200      	movhi	r2, #0
 8004c9e:	4413      	add	r3, r2
 8004ca0:	1a18      	subs	r0, r3, r0
 8004ca2:	b003      	add	sp, #12
 8004ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004caa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004cae:	e7ed      	b.n	8004c8c <__exponent+0x4c>
 8004cb0:	2330      	movs	r3, #48	; 0x30
 8004cb2:	3130      	adds	r1, #48	; 0x30
 8004cb4:	7083      	strb	r3, [r0, #2]
 8004cb6:	70c1      	strb	r1, [r0, #3]
 8004cb8:	1d03      	adds	r3, r0, #4
 8004cba:	e7f1      	b.n	8004ca0 <__exponent+0x60>

08004cbc <_printf_float>:
 8004cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc0:	ed2d 8b02 	vpush	{d8}
 8004cc4:	b08d      	sub	sp, #52	; 0x34
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ccc:	4616      	mov	r6, r2
 8004cce:	461f      	mov	r7, r3
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	f002 fe91 	bl	80079f8 <_localeconv_r>
 8004cd6:	f8d0 a000 	ldr.w	sl, [r0]
 8004cda:	4650      	mov	r0, sl
 8004cdc:	f7fb fa98 	bl	8000210 <strlen>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	9305      	str	r3, [sp, #20]
 8004ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cec:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004cf0:	3307      	adds	r3, #7
 8004cf2:	f023 0307 	bic.w	r3, r3, #7
 8004cf6:	f103 0208 	add.w	r2, r3, #8
 8004cfa:	f8c8 2000 	str.w	r2, [r8]
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d06:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d0e:	9307      	str	r3, [sp, #28]
 8004d10:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d14:	ee08 0a10 	vmov	s16, r0
 8004d18:	4b9f      	ldr	r3, [pc, #636]	; (8004f98 <_printf_float+0x2dc>)
 8004d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d22:	f7fb ff23 	bl	8000b6c <__aeabi_dcmpun>
 8004d26:	bb88      	cbnz	r0, 8004d8c <_printf_float+0xd0>
 8004d28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d2c:	4b9a      	ldr	r3, [pc, #616]	; (8004f98 <_printf_float+0x2dc>)
 8004d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d32:	f7fb fefd 	bl	8000b30 <__aeabi_dcmple>
 8004d36:	bb48      	cbnz	r0, 8004d8c <_printf_float+0xd0>
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	4649      	mov	r1, r9
 8004d40:	f7fb feec 	bl	8000b1c <__aeabi_dcmplt>
 8004d44:	b110      	cbz	r0, 8004d4c <_printf_float+0x90>
 8004d46:	232d      	movs	r3, #45	; 0x2d
 8004d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d4c:	4b93      	ldr	r3, [pc, #588]	; (8004f9c <_printf_float+0x2e0>)
 8004d4e:	4894      	ldr	r0, [pc, #592]	; (8004fa0 <_printf_float+0x2e4>)
 8004d50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004d54:	bf94      	ite	ls
 8004d56:	4698      	movls	r8, r3
 8004d58:	4680      	movhi	r8, r0
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	6123      	str	r3, [r4, #16]
 8004d5e:	9b05      	ldr	r3, [sp, #20]
 8004d60:	f023 0204 	bic.w	r2, r3, #4
 8004d64:	6022      	str	r2, [r4, #0]
 8004d66:	f04f 0900 	mov.w	r9, #0
 8004d6a:	9700      	str	r7, [sp, #0]
 8004d6c:	4633      	mov	r3, r6
 8004d6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d70:	4621      	mov	r1, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	f000 f9d8 	bl	8005128 <_printf_common>
 8004d78:	3001      	adds	r0, #1
 8004d7a:	f040 8090 	bne.w	8004e9e <_printf_float+0x1e2>
 8004d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d82:	b00d      	add	sp, #52	; 0x34
 8004d84:	ecbd 8b02 	vpop	{d8}
 8004d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	464b      	mov	r3, r9
 8004d90:	4640      	mov	r0, r8
 8004d92:	4649      	mov	r1, r9
 8004d94:	f7fb feea 	bl	8000b6c <__aeabi_dcmpun>
 8004d98:	b140      	cbz	r0, 8004dac <_printf_float+0xf0>
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bfbc      	itt	lt
 8004da0:	232d      	movlt	r3, #45	; 0x2d
 8004da2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004da6:	487f      	ldr	r0, [pc, #508]	; (8004fa4 <_printf_float+0x2e8>)
 8004da8:	4b7f      	ldr	r3, [pc, #508]	; (8004fa8 <_printf_float+0x2ec>)
 8004daa:	e7d1      	b.n	8004d50 <_printf_float+0x94>
 8004dac:	6863      	ldr	r3, [r4, #4]
 8004dae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004db2:	9206      	str	r2, [sp, #24]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	d13f      	bne.n	8004e38 <_printf_float+0x17c>
 8004db8:	2306      	movs	r3, #6
 8004dba:	6063      	str	r3, [r4, #4]
 8004dbc:	9b05      	ldr	r3, [sp, #20]
 8004dbe:	6861      	ldr	r1, [r4, #4]
 8004dc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	9303      	str	r3, [sp, #12]
 8004dc8:	ab0a      	add	r3, sp, #40	; 0x28
 8004dca:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004dce:	ab09      	add	r3, sp, #36	; 0x24
 8004dd0:	ec49 8b10 	vmov	d0, r8, r9
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	6022      	str	r2, [r4, #0]
 8004dd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ddc:	4628      	mov	r0, r5
 8004dde:	f7ff fecd 	bl	8004b7c <__cvt>
 8004de2:	9b06      	ldr	r3, [sp, #24]
 8004de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004de6:	2b47      	cmp	r3, #71	; 0x47
 8004de8:	4680      	mov	r8, r0
 8004dea:	d108      	bne.n	8004dfe <_printf_float+0x142>
 8004dec:	1cc8      	adds	r0, r1, #3
 8004dee:	db02      	blt.n	8004df6 <_printf_float+0x13a>
 8004df0:	6863      	ldr	r3, [r4, #4]
 8004df2:	4299      	cmp	r1, r3
 8004df4:	dd41      	ble.n	8004e7a <_printf_float+0x1be>
 8004df6:	f1ab 0b02 	sub.w	fp, fp, #2
 8004dfa:	fa5f fb8b 	uxtb.w	fp, fp
 8004dfe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e02:	d820      	bhi.n	8004e46 <_printf_float+0x18a>
 8004e04:	3901      	subs	r1, #1
 8004e06:	465a      	mov	r2, fp
 8004e08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e0c:	9109      	str	r1, [sp, #36]	; 0x24
 8004e0e:	f7ff ff17 	bl	8004c40 <__exponent>
 8004e12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e14:	1813      	adds	r3, r2, r0
 8004e16:	2a01      	cmp	r2, #1
 8004e18:	4681      	mov	r9, r0
 8004e1a:	6123      	str	r3, [r4, #16]
 8004e1c:	dc02      	bgt.n	8004e24 <_printf_float+0x168>
 8004e1e:	6822      	ldr	r2, [r4, #0]
 8004e20:	07d2      	lsls	r2, r2, #31
 8004e22:	d501      	bpl.n	8004e28 <_printf_float+0x16c>
 8004e24:	3301      	adds	r3, #1
 8004e26:	6123      	str	r3, [r4, #16]
 8004e28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d09c      	beq.n	8004d6a <_printf_float+0xae>
 8004e30:	232d      	movs	r3, #45	; 0x2d
 8004e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e36:	e798      	b.n	8004d6a <_printf_float+0xae>
 8004e38:	9a06      	ldr	r2, [sp, #24]
 8004e3a:	2a47      	cmp	r2, #71	; 0x47
 8004e3c:	d1be      	bne.n	8004dbc <_printf_float+0x100>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1bc      	bne.n	8004dbc <_printf_float+0x100>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e7b9      	b.n	8004dba <_printf_float+0xfe>
 8004e46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004e4a:	d118      	bne.n	8004e7e <_printf_float+0x1c2>
 8004e4c:	2900      	cmp	r1, #0
 8004e4e:	6863      	ldr	r3, [r4, #4]
 8004e50:	dd0b      	ble.n	8004e6a <_printf_float+0x1ae>
 8004e52:	6121      	str	r1, [r4, #16]
 8004e54:	b913      	cbnz	r3, 8004e5c <_printf_float+0x1a0>
 8004e56:	6822      	ldr	r2, [r4, #0]
 8004e58:	07d0      	lsls	r0, r2, #31
 8004e5a:	d502      	bpl.n	8004e62 <_printf_float+0x1a6>
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	440b      	add	r3, r1
 8004e60:	6123      	str	r3, [r4, #16]
 8004e62:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e64:	f04f 0900 	mov.w	r9, #0
 8004e68:	e7de      	b.n	8004e28 <_printf_float+0x16c>
 8004e6a:	b913      	cbnz	r3, 8004e72 <_printf_float+0x1b6>
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	07d2      	lsls	r2, r2, #31
 8004e70:	d501      	bpl.n	8004e76 <_printf_float+0x1ba>
 8004e72:	3302      	adds	r3, #2
 8004e74:	e7f4      	b.n	8004e60 <_printf_float+0x1a4>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e7f2      	b.n	8004e60 <_printf_float+0x1a4>
 8004e7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e80:	4299      	cmp	r1, r3
 8004e82:	db05      	blt.n	8004e90 <_printf_float+0x1d4>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	6121      	str	r1, [r4, #16]
 8004e88:	07d8      	lsls	r0, r3, #31
 8004e8a:	d5ea      	bpl.n	8004e62 <_printf_float+0x1a6>
 8004e8c:	1c4b      	adds	r3, r1, #1
 8004e8e:	e7e7      	b.n	8004e60 <_printf_float+0x1a4>
 8004e90:	2900      	cmp	r1, #0
 8004e92:	bfd4      	ite	le
 8004e94:	f1c1 0202 	rsble	r2, r1, #2
 8004e98:	2201      	movgt	r2, #1
 8004e9a:	4413      	add	r3, r2
 8004e9c:	e7e0      	b.n	8004e60 <_printf_float+0x1a4>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	055a      	lsls	r2, r3, #21
 8004ea2:	d407      	bmi.n	8004eb4 <_printf_float+0x1f8>
 8004ea4:	6923      	ldr	r3, [r4, #16]
 8004ea6:	4642      	mov	r2, r8
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	4628      	mov	r0, r5
 8004eac:	47b8      	blx	r7
 8004eae:	3001      	adds	r0, #1
 8004eb0:	d12c      	bne.n	8004f0c <_printf_float+0x250>
 8004eb2:	e764      	b.n	8004d7e <_printf_float+0xc2>
 8004eb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004eb8:	f240 80e0 	bls.w	800507c <_printf_float+0x3c0>
 8004ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f7fb fe20 	bl	8000b08 <__aeabi_dcmpeq>
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d034      	beq.n	8004f36 <_printf_float+0x27a>
 8004ecc:	4a37      	ldr	r2, [pc, #220]	; (8004fac <_printf_float+0x2f0>)
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4631      	mov	r1, r6
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	47b8      	blx	r7
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	f43f af51 	beq.w	8004d7e <_printf_float+0xc2>
 8004edc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	db02      	blt.n	8004eea <_printf_float+0x22e>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	07d8      	lsls	r0, r3, #31
 8004ee8:	d510      	bpl.n	8004f0c <_printf_float+0x250>
 8004eea:	ee18 3a10 	vmov	r3, s16
 8004eee:	4652      	mov	r2, sl
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	47b8      	blx	r7
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	f43f af41 	beq.w	8004d7e <_printf_float+0xc2>
 8004efc:	f04f 0800 	mov.w	r8, #0
 8004f00:	f104 091a 	add.w	r9, r4, #26
 8004f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f06:	3b01      	subs	r3, #1
 8004f08:	4543      	cmp	r3, r8
 8004f0a:	dc09      	bgt.n	8004f20 <_printf_float+0x264>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	079b      	lsls	r3, r3, #30
 8004f10:	f100 8105 	bmi.w	800511e <_printf_float+0x462>
 8004f14:	68e0      	ldr	r0, [r4, #12]
 8004f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f18:	4298      	cmp	r0, r3
 8004f1a:	bfb8      	it	lt
 8004f1c:	4618      	movlt	r0, r3
 8004f1e:	e730      	b.n	8004d82 <_printf_float+0xc6>
 8004f20:	2301      	movs	r3, #1
 8004f22:	464a      	mov	r2, r9
 8004f24:	4631      	mov	r1, r6
 8004f26:	4628      	mov	r0, r5
 8004f28:	47b8      	blx	r7
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	f43f af27 	beq.w	8004d7e <_printf_float+0xc2>
 8004f30:	f108 0801 	add.w	r8, r8, #1
 8004f34:	e7e6      	b.n	8004f04 <_printf_float+0x248>
 8004f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	dc39      	bgt.n	8004fb0 <_printf_float+0x2f4>
 8004f3c:	4a1b      	ldr	r2, [pc, #108]	; (8004fac <_printf_float+0x2f0>)
 8004f3e:	2301      	movs	r3, #1
 8004f40:	4631      	mov	r1, r6
 8004f42:	4628      	mov	r0, r5
 8004f44:	47b8      	blx	r7
 8004f46:	3001      	adds	r0, #1
 8004f48:	f43f af19 	beq.w	8004d7e <_printf_float+0xc2>
 8004f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f50:	4313      	orrs	r3, r2
 8004f52:	d102      	bne.n	8004f5a <_printf_float+0x29e>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	07d9      	lsls	r1, r3, #31
 8004f58:	d5d8      	bpl.n	8004f0c <_printf_float+0x250>
 8004f5a:	ee18 3a10 	vmov	r3, s16
 8004f5e:	4652      	mov	r2, sl
 8004f60:	4631      	mov	r1, r6
 8004f62:	4628      	mov	r0, r5
 8004f64:	47b8      	blx	r7
 8004f66:	3001      	adds	r0, #1
 8004f68:	f43f af09 	beq.w	8004d7e <_printf_float+0xc2>
 8004f6c:	f04f 0900 	mov.w	r9, #0
 8004f70:	f104 0a1a 	add.w	sl, r4, #26
 8004f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f76:	425b      	negs	r3, r3
 8004f78:	454b      	cmp	r3, r9
 8004f7a:	dc01      	bgt.n	8004f80 <_printf_float+0x2c4>
 8004f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f7e:	e792      	b.n	8004ea6 <_printf_float+0x1ea>
 8004f80:	2301      	movs	r3, #1
 8004f82:	4652      	mov	r2, sl
 8004f84:	4631      	mov	r1, r6
 8004f86:	4628      	mov	r0, r5
 8004f88:	47b8      	blx	r7
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	f43f aef7 	beq.w	8004d7e <_printf_float+0xc2>
 8004f90:	f109 0901 	add.w	r9, r9, #1
 8004f94:	e7ee      	b.n	8004f74 <_printf_float+0x2b8>
 8004f96:	bf00      	nop
 8004f98:	7fefffff 	.word	0x7fefffff
 8004f9c:	08009bfc 	.word	0x08009bfc
 8004fa0:	08009c00 	.word	0x08009c00
 8004fa4:	08009c08 	.word	0x08009c08
 8004fa8:	08009c04 	.word	0x08009c04
 8004fac:	08009c0c 	.word	0x08009c0c
 8004fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	bfa8      	it	ge
 8004fb8:	461a      	movge	r2, r3
 8004fba:	2a00      	cmp	r2, #0
 8004fbc:	4691      	mov	r9, r2
 8004fbe:	dc37      	bgt.n	8005030 <_printf_float+0x374>
 8004fc0:	f04f 0b00 	mov.w	fp, #0
 8004fc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fc8:	f104 021a 	add.w	r2, r4, #26
 8004fcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fce:	9305      	str	r3, [sp, #20]
 8004fd0:	eba3 0309 	sub.w	r3, r3, r9
 8004fd4:	455b      	cmp	r3, fp
 8004fd6:	dc33      	bgt.n	8005040 <_printf_float+0x384>
 8004fd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	db3b      	blt.n	8005058 <_printf_float+0x39c>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	07da      	lsls	r2, r3, #31
 8004fe4:	d438      	bmi.n	8005058 <_printf_float+0x39c>
 8004fe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fe8:	9b05      	ldr	r3, [sp, #20]
 8004fea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	eba2 0901 	sub.w	r9, r2, r1
 8004ff2:	4599      	cmp	r9, r3
 8004ff4:	bfa8      	it	ge
 8004ff6:	4699      	movge	r9, r3
 8004ff8:	f1b9 0f00 	cmp.w	r9, #0
 8004ffc:	dc35      	bgt.n	800506a <_printf_float+0x3ae>
 8004ffe:	f04f 0800 	mov.w	r8, #0
 8005002:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005006:	f104 0a1a 	add.w	sl, r4, #26
 800500a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	eba3 0309 	sub.w	r3, r3, r9
 8005014:	4543      	cmp	r3, r8
 8005016:	f77f af79 	ble.w	8004f0c <_printf_float+0x250>
 800501a:	2301      	movs	r3, #1
 800501c:	4652      	mov	r2, sl
 800501e:	4631      	mov	r1, r6
 8005020:	4628      	mov	r0, r5
 8005022:	47b8      	blx	r7
 8005024:	3001      	adds	r0, #1
 8005026:	f43f aeaa 	beq.w	8004d7e <_printf_float+0xc2>
 800502a:	f108 0801 	add.w	r8, r8, #1
 800502e:	e7ec      	b.n	800500a <_printf_float+0x34e>
 8005030:	4613      	mov	r3, r2
 8005032:	4631      	mov	r1, r6
 8005034:	4642      	mov	r2, r8
 8005036:	4628      	mov	r0, r5
 8005038:	47b8      	blx	r7
 800503a:	3001      	adds	r0, #1
 800503c:	d1c0      	bne.n	8004fc0 <_printf_float+0x304>
 800503e:	e69e      	b.n	8004d7e <_printf_float+0xc2>
 8005040:	2301      	movs	r3, #1
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	9205      	str	r2, [sp, #20]
 8005048:	47b8      	blx	r7
 800504a:	3001      	adds	r0, #1
 800504c:	f43f ae97 	beq.w	8004d7e <_printf_float+0xc2>
 8005050:	9a05      	ldr	r2, [sp, #20]
 8005052:	f10b 0b01 	add.w	fp, fp, #1
 8005056:	e7b9      	b.n	8004fcc <_printf_float+0x310>
 8005058:	ee18 3a10 	vmov	r3, s16
 800505c:	4652      	mov	r2, sl
 800505e:	4631      	mov	r1, r6
 8005060:	4628      	mov	r0, r5
 8005062:	47b8      	blx	r7
 8005064:	3001      	adds	r0, #1
 8005066:	d1be      	bne.n	8004fe6 <_printf_float+0x32a>
 8005068:	e689      	b.n	8004d7e <_printf_float+0xc2>
 800506a:	9a05      	ldr	r2, [sp, #20]
 800506c:	464b      	mov	r3, r9
 800506e:	4442      	add	r2, r8
 8005070:	4631      	mov	r1, r6
 8005072:	4628      	mov	r0, r5
 8005074:	47b8      	blx	r7
 8005076:	3001      	adds	r0, #1
 8005078:	d1c1      	bne.n	8004ffe <_printf_float+0x342>
 800507a:	e680      	b.n	8004d7e <_printf_float+0xc2>
 800507c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800507e:	2a01      	cmp	r2, #1
 8005080:	dc01      	bgt.n	8005086 <_printf_float+0x3ca>
 8005082:	07db      	lsls	r3, r3, #31
 8005084:	d538      	bpl.n	80050f8 <_printf_float+0x43c>
 8005086:	2301      	movs	r3, #1
 8005088:	4642      	mov	r2, r8
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	f43f ae74 	beq.w	8004d7e <_printf_float+0xc2>
 8005096:	ee18 3a10 	vmov	r3, s16
 800509a:	4652      	mov	r2, sl
 800509c:	4631      	mov	r1, r6
 800509e:	4628      	mov	r0, r5
 80050a0:	47b8      	blx	r7
 80050a2:	3001      	adds	r0, #1
 80050a4:	f43f ae6b 	beq.w	8004d7e <_printf_float+0xc2>
 80050a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050ac:	2200      	movs	r2, #0
 80050ae:	2300      	movs	r3, #0
 80050b0:	f7fb fd2a 	bl	8000b08 <__aeabi_dcmpeq>
 80050b4:	b9d8      	cbnz	r0, 80050ee <_printf_float+0x432>
 80050b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050b8:	f108 0201 	add.w	r2, r8, #1
 80050bc:	3b01      	subs	r3, #1
 80050be:	4631      	mov	r1, r6
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b8      	blx	r7
 80050c4:	3001      	adds	r0, #1
 80050c6:	d10e      	bne.n	80050e6 <_printf_float+0x42a>
 80050c8:	e659      	b.n	8004d7e <_printf_float+0xc2>
 80050ca:	2301      	movs	r3, #1
 80050cc:	4652      	mov	r2, sl
 80050ce:	4631      	mov	r1, r6
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b8      	blx	r7
 80050d4:	3001      	adds	r0, #1
 80050d6:	f43f ae52 	beq.w	8004d7e <_printf_float+0xc2>
 80050da:	f108 0801 	add.w	r8, r8, #1
 80050de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e0:	3b01      	subs	r3, #1
 80050e2:	4543      	cmp	r3, r8
 80050e4:	dcf1      	bgt.n	80050ca <_printf_float+0x40e>
 80050e6:	464b      	mov	r3, r9
 80050e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050ec:	e6dc      	b.n	8004ea8 <_printf_float+0x1ec>
 80050ee:	f04f 0800 	mov.w	r8, #0
 80050f2:	f104 0a1a 	add.w	sl, r4, #26
 80050f6:	e7f2      	b.n	80050de <_printf_float+0x422>
 80050f8:	2301      	movs	r3, #1
 80050fa:	4642      	mov	r2, r8
 80050fc:	e7df      	b.n	80050be <_printf_float+0x402>
 80050fe:	2301      	movs	r3, #1
 8005100:	464a      	mov	r2, r9
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	47b8      	blx	r7
 8005108:	3001      	adds	r0, #1
 800510a:	f43f ae38 	beq.w	8004d7e <_printf_float+0xc2>
 800510e:	f108 0801 	add.w	r8, r8, #1
 8005112:	68e3      	ldr	r3, [r4, #12]
 8005114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005116:	1a5b      	subs	r3, r3, r1
 8005118:	4543      	cmp	r3, r8
 800511a:	dcf0      	bgt.n	80050fe <_printf_float+0x442>
 800511c:	e6fa      	b.n	8004f14 <_printf_float+0x258>
 800511e:	f04f 0800 	mov.w	r8, #0
 8005122:	f104 0919 	add.w	r9, r4, #25
 8005126:	e7f4      	b.n	8005112 <_printf_float+0x456>

08005128 <_printf_common>:
 8005128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800512c:	4616      	mov	r6, r2
 800512e:	4699      	mov	r9, r3
 8005130:	688a      	ldr	r2, [r1, #8]
 8005132:	690b      	ldr	r3, [r1, #16]
 8005134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005138:	4293      	cmp	r3, r2
 800513a:	bfb8      	it	lt
 800513c:	4613      	movlt	r3, r2
 800513e:	6033      	str	r3, [r6, #0]
 8005140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005144:	4607      	mov	r7, r0
 8005146:	460c      	mov	r4, r1
 8005148:	b10a      	cbz	r2, 800514e <_printf_common+0x26>
 800514a:	3301      	adds	r3, #1
 800514c:	6033      	str	r3, [r6, #0]
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	0699      	lsls	r1, r3, #26
 8005152:	bf42      	ittt	mi
 8005154:	6833      	ldrmi	r3, [r6, #0]
 8005156:	3302      	addmi	r3, #2
 8005158:	6033      	strmi	r3, [r6, #0]
 800515a:	6825      	ldr	r5, [r4, #0]
 800515c:	f015 0506 	ands.w	r5, r5, #6
 8005160:	d106      	bne.n	8005170 <_printf_common+0x48>
 8005162:	f104 0a19 	add.w	sl, r4, #25
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	6832      	ldr	r2, [r6, #0]
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	42ab      	cmp	r3, r5
 800516e:	dc26      	bgt.n	80051be <_printf_common+0x96>
 8005170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005174:	1e13      	subs	r3, r2, #0
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	bf18      	it	ne
 800517a:	2301      	movne	r3, #1
 800517c:	0692      	lsls	r2, r2, #26
 800517e:	d42b      	bmi.n	80051d8 <_printf_common+0xb0>
 8005180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005184:	4649      	mov	r1, r9
 8005186:	4638      	mov	r0, r7
 8005188:	47c0      	blx	r8
 800518a:	3001      	adds	r0, #1
 800518c:	d01e      	beq.n	80051cc <_printf_common+0xa4>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	68e5      	ldr	r5, [r4, #12]
 8005192:	6832      	ldr	r2, [r6, #0]
 8005194:	f003 0306 	and.w	r3, r3, #6
 8005198:	2b04      	cmp	r3, #4
 800519a:	bf08      	it	eq
 800519c:	1aad      	subeq	r5, r5, r2
 800519e:	68a3      	ldr	r3, [r4, #8]
 80051a0:	6922      	ldr	r2, [r4, #16]
 80051a2:	bf0c      	ite	eq
 80051a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a8:	2500      	movne	r5, #0
 80051aa:	4293      	cmp	r3, r2
 80051ac:	bfc4      	itt	gt
 80051ae:	1a9b      	subgt	r3, r3, r2
 80051b0:	18ed      	addgt	r5, r5, r3
 80051b2:	2600      	movs	r6, #0
 80051b4:	341a      	adds	r4, #26
 80051b6:	42b5      	cmp	r5, r6
 80051b8:	d11a      	bne.n	80051f0 <_printf_common+0xc8>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e008      	b.n	80051d0 <_printf_common+0xa8>
 80051be:	2301      	movs	r3, #1
 80051c0:	4652      	mov	r2, sl
 80051c2:	4649      	mov	r1, r9
 80051c4:	4638      	mov	r0, r7
 80051c6:	47c0      	blx	r8
 80051c8:	3001      	adds	r0, #1
 80051ca:	d103      	bne.n	80051d4 <_printf_common+0xac>
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d4:	3501      	adds	r5, #1
 80051d6:	e7c6      	b.n	8005166 <_printf_common+0x3e>
 80051d8:	18e1      	adds	r1, r4, r3
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	2030      	movs	r0, #48	; 0x30
 80051de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051e2:	4422      	add	r2, r4
 80051e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ec:	3302      	adds	r3, #2
 80051ee:	e7c7      	b.n	8005180 <_printf_common+0x58>
 80051f0:	2301      	movs	r3, #1
 80051f2:	4622      	mov	r2, r4
 80051f4:	4649      	mov	r1, r9
 80051f6:	4638      	mov	r0, r7
 80051f8:	47c0      	blx	r8
 80051fa:	3001      	adds	r0, #1
 80051fc:	d0e6      	beq.n	80051cc <_printf_common+0xa4>
 80051fe:	3601      	adds	r6, #1
 8005200:	e7d9      	b.n	80051b6 <_printf_common+0x8e>
	...

08005204 <_printf_i>:
 8005204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	460c      	mov	r4, r1
 800520a:	4691      	mov	r9, r2
 800520c:	7e27      	ldrb	r7, [r4, #24]
 800520e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005210:	2f78      	cmp	r7, #120	; 0x78
 8005212:	4680      	mov	r8, r0
 8005214:	469a      	mov	sl, r3
 8005216:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800521a:	d807      	bhi.n	800522c <_printf_i+0x28>
 800521c:	2f62      	cmp	r7, #98	; 0x62
 800521e:	d80a      	bhi.n	8005236 <_printf_i+0x32>
 8005220:	2f00      	cmp	r7, #0
 8005222:	f000 80d8 	beq.w	80053d6 <_printf_i+0x1d2>
 8005226:	2f58      	cmp	r7, #88	; 0x58
 8005228:	f000 80a3 	beq.w	8005372 <_printf_i+0x16e>
 800522c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005234:	e03a      	b.n	80052ac <_printf_i+0xa8>
 8005236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800523a:	2b15      	cmp	r3, #21
 800523c:	d8f6      	bhi.n	800522c <_printf_i+0x28>
 800523e:	a001      	add	r0, pc, #4	; (adr r0, 8005244 <_printf_i+0x40>)
 8005240:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005244:	0800529d 	.word	0x0800529d
 8005248:	080052b1 	.word	0x080052b1
 800524c:	0800522d 	.word	0x0800522d
 8005250:	0800522d 	.word	0x0800522d
 8005254:	0800522d 	.word	0x0800522d
 8005258:	0800522d 	.word	0x0800522d
 800525c:	080052b1 	.word	0x080052b1
 8005260:	0800522d 	.word	0x0800522d
 8005264:	0800522d 	.word	0x0800522d
 8005268:	0800522d 	.word	0x0800522d
 800526c:	0800522d 	.word	0x0800522d
 8005270:	080053bd 	.word	0x080053bd
 8005274:	080052e1 	.word	0x080052e1
 8005278:	0800539f 	.word	0x0800539f
 800527c:	0800522d 	.word	0x0800522d
 8005280:	0800522d 	.word	0x0800522d
 8005284:	080053df 	.word	0x080053df
 8005288:	0800522d 	.word	0x0800522d
 800528c:	080052e1 	.word	0x080052e1
 8005290:	0800522d 	.word	0x0800522d
 8005294:	0800522d 	.word	0x0800522d
 8005298:	080053a7 	.word	0x080053a7
 800529c:	680b      	ldr	r3, [r1, #0]
 800529e:	1d1a      	adds	r2, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	600a      	str	r2, [r1, #0]
 80052a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0a3      	b.n	80053f8 <_printf_i+0x1f4>
 80052b0:	6825      	ldr	r5, [r4, #0]
 80052b2:	6808      	ldr	r0, [r1, #0]
 80052b4:	062e      	lsls	r6, r5, #24
 80052b6:	f100 0304 	add.w	r3, r0, #4
 80052ba:	d50a      	bpl.n	80052d2 <_printf_i+0xce>
 80052bc:	6805      	ldr	r5, [r0, #0]
 80052be:	600b      	str	r3, [r1, #0]
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	da03      	bge.n	80052cc <_printf_i+0xc8>
 80052c4:	232d      	movs	r3, #45	; 0x2d
 80052c6:	426d      	negs	r5, r5
 80052c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052cc:	485e      	ldr	r0, [pc, #376]	; (8005448 <_printf_i+0x244>)
 80052ce:	230a      	movs	r3, #10
 80052d0:	e019      	b.n	8005306 <_printf_i+0x102>
 80052d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052d6:	6805      	ldr	r5, [r0, #0]
 80052d8:	600b      	str	r3, [r1, #0]
 80052da:	bf18      	it	ne
 80052dc:	b22d      	sxthne	r5, r5
 80052de:	e7ef      	b.n	80052c0 <_printf_i+0xbc>
 80052e0:	680b      	ldr	r3, [r1, #0]
 80052e2:	6825      	ldr	r5, [r4, #0]
 80052e4:	1d18      	adds	r0, r3, #4
 80052e6:	6008      	str	r0, [r1, #0]
 80052e8:	0628      	lsls	r0, r5, #24
 80052ea:	d501      	bpl.n	80052f0 <_printf_i+0xec>
 80052ec:	681d      	ldr	r5, [r3, #0]
 80052ee:	e002      	b.n	80052f6 <_printf_i+0xf2>
 80052f0:	0669      	lsls	r1, r5, #25
 80052f2:	d5fb      	bpl.n	80052ec <_printf_i+0xe8>
 80052f4:	881d      	ldrh	r5, [r3, #0]
 80052f6:	4854      	ldr	r0, [pc, #336]	; (8005448 <_printf_i+0x244>)
 80052f8:	2f6f      	cmp	r7, #111	; 0x6f
 80052fa:	bf0c      	ite	eq
 80052fc:	2308      	moveq	r3, #8
 80052fe:	230a      	movne	r3, #10
 8005300:	2100      	movs	r1, #0
 8005302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005306:	6866      	ldr	r6, [r4, #4]
 8005308:	60a6      	str	r6, [r4, #8]
 800530a:	2e00      	cmp	r6, #0
 800530c:	bfa2      	ittt	ge
 800530e:	6821      	ldrge	r1, [r4, #0]
 8005310:	f021 0104 	bicge.w	r1, r1, #4
 8005314:	6021      	strge	r1, [r4, #0]
 8005316:	b90d      	cbnz	r5, 800531c <_printf_i+0x118>
 8005318:	2e00      	cmp	r6, #0
 800531a:	d04d      	beq.n	80053b8 <_printf_i+0x1b4>
 800531c:	4616      	mov	r6, r2
 800531e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005322:	fb03 5711 	mls	r7, r3, r1, r5
 8005326:	5dc7      	ldrb	r7, [r0, r7]
 8005328:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800532c:	462f      	mov	r7, r5
 800532e:	42bb      	cmp	r3, r7
 8005330:	460d      	mov	r5, r1
 8005332:	d9f4      	bls.n	800531e <_printf_i+0x11a>
 8005334:	2b08      	cmp	r3, #8
 8005336:	d10b      	bne.n	8005350 <_printf_i+0x14c>
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	07df      	lsls	r7, r3, #31
 800533c:	d508      	bpl.n	8005350 <_printf_i+0x14c>
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	6861      	ldr	r1, [r4, #4]
 8005342:	4299      	cmp	r1, r3
 8005344:	bfde      	ittt	le
 8005346:	2330      	movle	r3, #48	; 0x30
 8005348:	f806 3c01 	strble.w	r3, [r6, #-1]
 800534c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005350:	1b92      	subs	r2, r2, r6
 8005352:	6122      	str	r2, [r4, #16]
 8005354:	f8cd a000 	str.w	sl, [sp]
 8005358:	464b      	mov	r3, r9
 800535a:	aa03      	add	r2, sp, #12
 800535c:	4621      	mov	r1, r4
 800535e:	4640      	mov	r0, r8
 8005360:	f7ff fee2 	bl	8005128 <_printf_common>
 8005364:	3001      	adds	r0, #1
 8005366:	d14c      	bne.n	8005402 <_printf_i+0x1fe>
 8005368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800536c:	b004      	add	sp, #16
 800536e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005372:	4835      	ldr	r0, [pc, #212]	; (8005448 <_printf_i+0x244>)
 8005374:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	680e      	ldr	r6, [r1, #0]
 800537c:	061f      	lsls	r7, r3, #24
 800537e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005382:	600e      	str	r6, [r1, #0]
 8005384:	d514      	bpl.n	80053b0 <_printf_i+0x1ac>
 8005386:	07d9      	lsls	r1, r3, #31
 8005388:	bf44      	itt	mi
 800538a:	f043 0320 	orrmi.w	r3, r3, #32
 800538e:	6023      	strmi	r3, [r4, #0]
 8005390:	b91d      	cbnz	r5, 800539a <_printf_i+0x196>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	f023 0320 	bic.w	r3, r3, #32
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	2310      	movs	r3, #16
 800539c:	e7b0      	b.n	8005300 <_printf_i+0xfc>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	f043 0320 	orr.w	r3, r3, #32
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	2378      	movs	r3, #120	; 0x78
 80053a8:	4828      	ldr	r0, [pc, #160]	; (800544c <_printf_i+0x248>)
 80053aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053ae:	e7e3      	b.n	8005378 <_printf_i+0x174>
 80053b0:	065e      	lsls	r6, r3, #25
 80053b2:	bf48      	it	mi
 80053b4:	b2ad      	uxthmi	r5, r5
 80053b6:	e7e6      	b.n	8005386 <_printf_i+0x182>
 80053b8:	4616      	mov	r6, r2
 80053ba:	e7bb      	b.n	8005334 <_printf_i+0x130>
 80053bc:	680b      	ldr	r3, [r1, #0]
 80053be:	6826      	ldr	r6, [r4, #0]
 80053c0:	6960      	ldr	r0, [r4, #20]
 80053c2:	1d1d      	adds	r5, r3, #4
 80053c4:	600d      	str	r5, [r1, #0]
 80053c6:	0635      	lsls	r5, r6, #24
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	d501      	bpl.n	80053d0 <_printf_i+0x1cc>
 80053cc:	6018      	str	r0, [r3, #0]
 80053ce:	e002      	b.n	80053d6 <_printf_i+0x1d2>
 80053d0:	0671      	lsls	r1, r6, #25
 80053d2:	d5fb      	bpl.n	80053cc <_printf_i+0x1c8>
 80053d4:	8018      	strh	r0, [r3, #0]
 80053d6:	2300      	movs	r3, #0
 80053d8:	6123      	str	r3, [r4, #16]
 80053da:	4616      	mov	r6, r2
 80053dc:	e7ba      	b.n	8005354 <_printf_i+0x150>
 80053de:	680b      	ldr	r3, [r1, #0]
 80053e0:	1d1a      	adds	r2, r3, #4
 80053e2:	600a      	str	r2, [r1, #0]
 80053e4:	681e      	ldr	r6, [r3, #0]
 80053e6:	6862      	ldr	r2, [r4, #4]
 80053e8:	2100      	movs	r1, #0
 80053ea:	4630      	mov	r0, r6
 80053ec:	f7fa ff18 	bl	8000220 <memchr>
 80053f0:	b108      	cbz	r0, 80053f6 <_printf_i+0x1f2>
 80053f2:	1b80      	subs	r0, r0, r6
 80053f4:	6060      	str	r0, [r4, #4]
 80053f6:	6863      	ldr	r3, [r4, #4]
 80053f8:	6123      	str	r3, [r4, #16]
 80053fa:	2300      	movs	r3, #0
 80053fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005400:	e7a8      	b.n	8005354 <_printf_i+0x150>
 8005402:	6923      	ldr	r3, [r4, #16]
 8005404:	4632      	mov	r2, r6
 8005406:	4649      	mov	r1, r9
 8005408:	4640      	mov	r0, r8
 800540a:	47d0      	blx	sl
 800540c:	3001      	adds	r0, #1
 800540e:	d0ab      	beq.n	8005368 <_printf_i+0x164>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	079b      	lsls	r3, r3, #30
 8005414:	d413      	bmi.n	800543e <_printf_i+0x23a>
 8005416:	68e0      	ldr	r0, [r4, #12]
 8005418:	9b03      	ldr	r3, [sp, #12]
 800541a:	4298      	cmp	r0, r3
 800541c:	bfb8      	it	lt
 800541e:	4618      	movlt	r0, r3
 8005420:	e7a4      	b.n	800536c <_printf_i+0x168>
 8005422:	2301      	movs	r3, #1
 8005424:	4632      	mov	r2, r6
 8005426:	4649      	mov	r1, r9
 8005428:	4640      	mov	r0, r8
 800542a:	47d0      	blx	sl
 800542c:	3001      	adds	r0, #1
 800542e:	d09b      	beq.n	8005368 <_printf_i+0x164>
 8005430:	3501      	adds	r5, #1
 8005432:	68e3      	ldr	r3, [r4, #12]
 8005434:	9903      	ldr	r1, [sp, #12]
 8005436:	1a5b      	subs	r3, r3, r1
 8005438:	42ab      	cmp	r3, r5
 800543a:	dcf2      	bgt.n	8005422 <_printf_i+0x21e>
 800543c:	e7eb      	b.n	8005416 <_printf_i+0x212>
 800543e:	2500      	movs	r5, #0
 8005440:	f104 0619 	add.w	r6, r4, #25
 8005444:	e7f5      	b.n	8005432 <_printf_i+0x22e>
 8005446:	bf00      	nop
 8005448:	08009c0e 	.word	0x08009c0e
 800544c:	08009c1f 	.word	0x08009c1f

08005450 <_scanf_float>:
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005454:	b087      	sub	sp, #28
 8005456:	4617      	mov	r7, r2
 8005458:	9303      	str	r3, [sp, #12]
 800545a:	688b      	ldr	r3, [r1, #8]
 800545c:	1e5a      	subs	r2, r3, #1
 800545e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005462:	bf83      	ittte	hi
 8005464:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005468:	195b      	addhi	r3, r3, r5
 800546a:	9302      	strhi	r3, [sp, #8]
 800546c:	2300      	movls	r3, #0
 800546e:	bf86      	itte	hi
 8005470:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005474:	608b      	strhi	r3, [r1, #8]
 8005476:	9302      	strls	r3, [sp, #8]
 8005478:	680b      	ldr	r3, [r1, #0]
 800547a:	468b      	mov	fp, r1
 800547c:	2500      	movs	r5, #0
 800547e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005482:	f84b 3b1c 	str.w	r3, [fp], #28
 8005486:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800548a:	4680      	mov	r8, r0
 800548c:	460c      	mov	r4, r1
 800548e:	465e      	mov	r6, fp
 8005490:	46aa      	mov	sl, r5
 8005492:	46a9      	mov	r9, r5
 8005494:	9501      	str	r5, [sp, #4]
 8005496:	68a2      	ldr	r2, [r4, #8]
 8005498:	b152      	cbz	r2, 80054b0 <_scanf_float+0x60>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	2b4e      	cmp	r3, #78	; 0x4e
 80054a0:	d864      	bhi.n	800556c <_scanf_float+0x11c>
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d83c      	bhi.n	8005520 <_scanf_float+0xd0>
 80054a6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80054aa:	b2c8      	uxtb	r0, r1
 80054ac:	280e      	cmp	r0, #14
 80054ae:	d93a      	bls.n	8005526 <_scanf_float+0xd6>
 80054b0:	f1b9 0f00 	cmp.w	r9, #0
 80054b4:	d003      	beq.n	80054be <_scanf_float+0x6e>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80054c2:	f1ba 0f01 	cmp.w	sl, #1
 80054c6:	f200 8113 	bhi.w	80056f0 <_scanf_float+0x2a0>
 80054ca:	455e      	cmp	r6, fp
 80054cc:	f200 8105 	bhi.w	80056da <_scanf_float+0x28a>
 80054d0:	2501      	movs	r5, #1
 80054d2:	4628      	mov	r0, r5
 80054d4:	b007      	add	sp, #28
 80054d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054da:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80054de:	2a0d      	cmp	r2, #13
 80054e0:	d8e6      	bhi.n	80054b0 <_scanf_float+0x60>
 80054e2:	a101      	add	r1, pc, #4	; (adr r1, 80054e8 <_scanf_float+0x98>)
 80054e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054e8:	08005627 	.word	0x08005627
 80054ec:	080054b1 	.word	0x080054b1
 80054f0:	080054b1 	.word	0x080054b1
 80054f4:	080054b1 	.word	0x080054b1
 80054f8:	08005687 	.word	0x08005687
 80054fc:	0800565f 	.word	0x0800565f
 8005500:	080054b1 	.word	0x080054b1
 8005504:	080054b1 	.word	0x080054b1
 8005508:	08005635 	.word	0x08005635
 800550c:	080054b1 	.word	0x080054b1
 8005510:	080054b1 	.word	0x080054b1
 8005514:	080054b1 	.word	0x080054b1
 8005518:	080054b1 	.word	0x080054b1
 800551c:	080055ed 	.word	0x080055ed
 8005520:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005524:	e7db      	b.n	80054de <_scanf_float+0x8e>
 8005526:	290e      	cmp	r1, #14
 8005528:	d8c2      	bhi.n	80054b0 <_scanf_float+0x60>
 800552a:	a001      	add	r0, pc, #4	; (adr r0, 8005530 <_scanf_float+0xe0>)
 800552c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005530:	080055df 	.word	0x080055df
 8005534:	080054b1 	.word	0x080054b1
 8005538:	080055df 	.word	0x080055df
 800553c:	08005673 	.word	0x08005673
 8005540:	080054b1 	.word	0x080054b1
 8005544:	0800558d 	.word	0x0800558d
 8005548:	080055c9 	.word	0x080055c9
 800554c:	080055c9 	.word	0x080055c9
 8005550:	080055c9 	.word	0x080055c9
 8005554:	080055c9 	.word	0x080055c9
 8005558:	080055c9 	.word	0x080055c9
 800555c:	080055c9 	.word	0x080055c9
 8005560:	080055c9 	.word	0x080055c9
 8005564:	080055c9 	.word	0x080055c9
 8005568:	080055c9 	.word	0x080055c9
 800556c:	2b6e      	cmp	r3, #110	; 0x6e
 800556e:	d809      	bhi.n	8005584 <_scanf_float+0x134>
 8005570:	2b60      	cmp	r3, #96	; 0x60
 8005572:	d8b2      	bhi.n	80054da <_scanf_float+0x8a>
 8005574:	2b54      	cmp	r3, #84	; 0x54
 8005576:	d077      	beq.n	8005668 <_scanf_float+0x218>
 8005578:	2b59      	cmp	r3, #89	; 0x59
 800557a:	d199      	bne.n	80054b0 <_scanf_float+0x60>
 800557c:	2d07      	cmp	r5, #7
 800557e:	d197      	bne.n	80054b0 <_scanf_float+0x60>
 8005580:	2508      	movs	r5, #8
 8005582:	e029      	b.n	80055d8 <_scanf_float+0x188>
 8005584:	2b74      	cmp	r3, #116	; 0x74
 8005586:	d06f      	beq.n	8005668 <_scanf_float+0x218>
 8005588:	2b79      	cmp	r3, #121	; 0x79
 800558a:	e7f6      	b.n	800557a <_scanf_float+0x12a>
 800558c:	6821      	ldr	r1, [r4, #0]
 800558e:	05c8      	lsls	r0, r1, #23
 8005590:	d51a      	bpl.n	80055c8 <_scanf_float+0x178>
 8005592:	9b02      	ldr	r3, [sp, #8]
 8005594:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005598:	6021      	str	r1, [r4, #0]
 800559a:	f109 0901 	add.w	r9, r9, #1
 800559e:	b11b      	cbz	r3, 80055a8 <_scanf_float+0x158>
 80055a0:	3b01      	subs	r3, #1
 80055a2:	3201      	adds	r2, #1
 80055a4:	9302      	str	r3, [sp, #8]
 80055a6:	60a2      	str	r2, [r4, #8]
 80055a8:	68a3      	ldr	r3, [r4, #8]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	60a3      	str	r3, [r4, #8]
 80055ae:	6923      	ldr	r3, [r4, #16]
 80055b0:	3301      	adds	r3, #1
 80055b2:	6123      	str	r3, [r4, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	607b      	str	r3, [r7, #4]
 80055bc:	f340 8084 	ble.w	80056c8 <_scanf_float+0x278>
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	3301      	adds	r3, #1
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	e766      	b.n	8005496 <_scanf_float+0x46>
 80055c8:	eb1a 0f05 	cmn.w	sl, r5
 80055cc:	f47f af70 	bne.w	80054b0 <_scanf_float+0x60>
 80055d0:	6822      	ldr	r2, [r4, #0]
 80055d2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80055d6:	6022      	str	r2, [r4, #0]
 80055d8:	f806 3b01 	strb.w	r3, [r6], #1
 80055dc:	e7e4      	b.n	80055a8 <_scanf_float+0x158>
 80055de:	6822      	ldr	r2, [r4, #0]
 80055e0:	0610      	lsls	r0, r2, #24
 80055e2:	f57f af65 	bpl.w	80054b0 <_scanf_float+0x60>
 80055e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ea:	e7f4      	b.n	80055d6 <_scanf_float+0x186>
 80055ec:	f1ba 0f00 	cmp.w	sl, #0
 80055f0:	d10e      	bne.n	8005610 <_scanf_float+0x1c0>
 80055f2:	f1b9 0f00 	cmp.w	r9, #0
 80055f6:	d10e      	bne.n	8005616 <_scanf_float+0x1c6>
 80055f8:	6822      	ldr	r2, [r4, #0]
 80055fa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80055fe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005602:	d108      	bne.n	8005616 <_scanf_float+0x1c6>
 8005604:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005608:	6022      	str	r2, [r4, #0]
 800560a:	f04f 0a01 	mov.w	sl, #1
 800560e:	e7e3      	b.n	80055d8 <_scanf_float+0x188>
 8005610:	f1ba 0f02 	cmp.w	sl, #2
 8005614:	d055      	beq.n	80056c2 <_scanf_float+0x272>
 8005616:	2d01      	cmp	r5, #1
 8005618:	d002      	beq.n	8005620 <_scanf_float+0x1d0>
 800561a:	2d04      	cmp	r5, #4
 800561c:	f47f af48 	bne.w	80054b0 <_scanf_float+0x60>
 8005620:	3501      	adds	r5, #1
 8005622:	b2ed      	uxtb	r5, r5
 8005624:	e7d8      	b.n	80055d8 <_scanf_float+0x188>
 8005626:	f1ba 0f01 	cmp.w	sl, #1
 800562a:	f47f af41 	bne.w	80054b0 <_scanf_float+0x60>
 800562e:	f04f 0a02 	mov.w	sl, #2
 8005632:	e7d1      	b.n	80055d8 <_scanf_float+0x188>
 8005634:	b97d      	cbnz	r5, 8005656 <_scanf_float+0x206>
 8005636:	f1b9 0f00 	cmp.w	r9, #0
 800563a:	f47f af3c 	bne.w	80054b6 <_scanf_float+0x66>
 800563e:	6822      	ldr	r2, [r4, #0]
 8005640:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005644:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005648:	f47f af39 	bne.w	80054be <_scanf_float+0x6e>
 800564c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005650:	6022      	str	r2, [r4, #0]
 8005652:	2501      	movs	r5, #1
 8005654:	e7c0      	b.n	80055d8 <_scanf_float+0x188>
 8005656:	2d03      	cmp	r5, #3
 8005658:	d0e2      	beq.n	8005620 <_scanf_float+0x1d0>
 800565a:	2d05      	cmp	r5, #5
 800565c:	e7de      	b.n	800561c <_scanf_float+0x1cc>
 800565e:	2d02      	cmp	r5, #2
 8005660:	f47f af26 	bne.w	80054b0 <_scanf_float+0x60>
 8005664:	2503      	movs	r5, #3
 8005666:	e7b7      	b.n	80055d8 <_scanf_float+0x188>
 8005668:	2d06      	cmp	r5, #6
 800566a:	f47f af21 	bne.w	80054b0 <_scanf_float+0x60>
 800566e:	2507      	movs	r5, #7
 8005670:	e7b2      	b.n	80055d8 <_scanf_float+0x188>
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	0591      	lsls	r1, r2, #22
 8005676:	f57f af1b 	bpl.w	80054b0 <_scanf_float+0x60>
 800567a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800567e:	6022      	str	r2, [r4, #0]
 8005680:	f8cd 9004 	str.w	r9, [sp, #4]
 8005684:	e7a8      	b.n	80055d8 <_scanf_float+0x188>
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800568c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005690:	d006      	beq.n	80056a0 <_scanf_float+0x250>
 8005692:	0550      	lsls	r0, r2, #21
 8005694:	f57f af0c 	bpl.w	80054b0 <_scanf_float+0x60>
 8005698:	f1b9 0f00 	cmp.w	r9, #0
 800569c:	f43f af0f 	beq.w	80054be <_scanf_float+0x6e>
 80056a0:	0591      	lsls	r1, r2, #22
 80056a2:	bf58      	it	pl
 80056a4:	9901      	ldrpl	r1, [sp, #4]
 80056a6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80056aa:	bf58      	it	pl
 80056ac:	eba9 0101 	subpl.w	r1, r9, r1
 80056b0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80056b4:	bf58      	it	pl
 80056b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80056ba:	6022      	str	r2, [r4, #0]
 80056bc:	f04f 0900 	mov.w	r9, #0
 80056c0:	e78a      	b.n	80055d8 <_scanf_float+0x188>
 80056c2:	f04f 0a03 	mov.w	sl, #3
 80056c6:	e787      	b.n	80055d8 <_scanf_float+0x188>
 80056c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80056cc:	4639      	mov	r1, r7
 80056ce:	4640      	mov	r0, r8
 80056d0:	4798      	blx	r3
 80056d2:	2800      	cmp	r0, #0
 80056d4:	f43f aedf 	beq.w	8005496 <_scanf_float+0x46>
 80056d8:	e6ea      	b.n	80054b0 <_scanf_float+0x60>
 80056da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056e2:	463a      	mov	r2, r7
 80056e4:	4640      	mov	r0, r8
 80056e6:	4798      	blx	r3
 80056e8:	6923      	ldr	r3, [r4, #16]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	6123      	str	r3, [r4, #16]
 80056ee:	e6ec      	b.n	80054ca <_scanf_float+0x7a>
 80056f0:	1e6b      	subs	r3, r5, #1
 80056f2:	2b06      	cmp	r3, #6
 80056f4:	d825      	bhi.n	8005742 <_scanf_float+0x2f2>
 80056f6:	2d02      	cmp	r5, #2
 80056f8:	d836      	bhi.n	8005768 <_scanf_float+0x318>
 80056fa:	455e      	cmp	r6, fp
 80056fc:	f67f aee8 	bls.w	80054d0 <_scanf_float+0x80>
 8005700:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005704:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005708:	463a      	mov	r2, r7
 800570a:	4640      	mov	r0, r8
 800570c:	4798      	blx	r3
 800570e:	6923      	ldr	r3, [r4, #16]
 8005710:	3b01      	subs	r3, #1
 8005712:	6123      	str	r3, [r4, #16]
 8005714:	e7f1      	b.n	80056fa <_scanf_float+0x2aa>
 8005716:	9802      	ldr	r0, [sp, #8]
 8005718:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800571c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005720:	9002      	str	r0, [sp, #8]
 8005722:	463a      	mov	r2, r7
 8005724:	4640      	mov	r0, r8
 8005726:	4798      	blx	r3
 8005728:	6923      	ldr	r3, [r4, #16]
 800572a:	3b01      	subs	r3, #1
 800572c:	6123      	str	r3, [r4, #16]
 800572e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005732:	fa5f fa8a 	uxtb.w	sl, sl
 8005736:	f1ba 0f02 	cmp.w	sl, #2
 800573a:	d1ec      	bne.n	8005716 <_scanf_float+0x2c6>
 800573c:	3d03      	subs	r5, #3
 800573e:	b2ed      	uxtb	r5, r5
 8005740:	1b76      	subs	r6, r6, r5
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	05da      	lsls	r2, r3, #23
 8005746:	d52f      	bpl.n	80057a8 <_scanf_float+0x358>
 8005748:	055b      	lsls	r3, r3, #21
 800574a:	d510      	bpl.n	800576e <_scanf_float+0x31e>
 800574c:	455e      	cmp	r6, fp
 800574e:	f67f aebf 	bls.w	80054d0 <_scanf_float+0x80>
 8005752:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005756:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800575a:	463a      	mov	r2, r7
 800575c:	4640      	mov	r0, r8
 800575e:	4798      	blx	r3
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	3b01      	subs	r3, #1
 8005764:	6123      	str	r3, [r4, #16]
 8005766:	e7f1      	b.n	800574c <_scanf_float+0x2fc>
 8005768:	46aa      	mov	sl, r5
 800576a:	9602      	str	r6, [sp, #8]
 800576c:	e7df      	b.n	800572e <_scanf_float+0x2de>
 800576e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	2965      	cmp	r1, #101	; 0x65
 8005776:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800577a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800577e:	6123      	str	r3, [r4, #16]
 8005780:	d00c      	beq.n	800579c <_scanf_float+0x34c>
 8005782:	2945      	cmp	r1, #69	; 0x45
 8005784:	d00a      	beq.n	800579c <_scanf_float+0x34c>
 8005786:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800578a:	463a      	mov	r2, r7
 800578c:	4640      	mov	r0, r8
 800578e:	4798      	blx	r3
 8005790:	6923      	ldr	r3, [r4, #16]
 8005792:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005796:	3b01      	subs	r3, #1
 8005798:	1eb5      	subs	r5, r6, #2
 800579a:	6123      	str	r3, [r4, #16]
 800579c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057a0:	463a      	mov	r2, r7
 80057a2:	4640      	mov	r0, r8
 80057a4:	4798      	blx	r3
 80057a6:	462e      	mov	r6, r5
 80057a8:	6825      	ldr	r5, [r4, #0]
 80057aa:	f015 0510 	ands.w	r5, r5, #16
 80057ae:	d158      	bne.n	8005862 <_scanf_float+0x412>
 80057b0:	7035      	strb	r5, [r6, #0]
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057bc:	d11c      	bne.n	80057f8 <_scanf_float+0x3a8>
 80057be:	9b01      	ldr	r3, [sp, #4]
 80057c0:	454b      	cmp	r3, r9
 80057c2:	eba3 0209 	sub.w	r2, r3, r9
 80057c6:	d124      	bne.n	8005812 <_scanf_float+0x3c2>
 80057c8:	2200      	movs	r2, #0
 80057ca:	4659      	mov	r1, fp
 80057cc:	4640      	mov	r0, r8
 80057ce:	f000 fe9d 	bl	800650c <_strtod_r>
 80057d2:	9b03      	ldr	r3, [sp, #12]
 80057d4:	6821      	ldr	r1, [r4, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f011 0f02 	tst.w	r1, #2
 80057dc:	ec57 6b10 	vmov	r6, r7, d0
 80057e0:	f103 0204 	add.w	r2, r3, #4
 80057e4:	d020      	beq.n	8005828 <_scanf_float+0x3d8>
 80057e6:	9903      	ldr	r1, [sp, #12]
 80057e8:	600a      	str	r2, [r1, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	e9c3 6700 	strd	r6, r7, [r3]
 80057f0:	68e3      	ldr	r3, [r4, #12]
 80057f2:	3301      	adds	r3, #1
 80057f4:	60e3      	str	r3, [r4, #12]
 80057f6:	e66c      	b.n	80054d2 <_scanf_float+0x82>
 80057f8:	9b04      	ldr	r3, [sp, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0e4      	beq.n	80057c8 <_scanf_float+0x378>
 80057fe:	9905      	ldr	r1, [sp, #20]
 8005800:	230a      	movs	r3, #10
 8005802:	462a      	mov	r2, r5
 8005804:	3101      	adds	r1, #1
 8005806:	4640      	mov	r0, r8
 8005808:	f000 ff0a 	bl	8006620 <_strtol_r>
 800580c:	9b04      	ldr	r3, [sp, #16]
 800580e:	9e05      	ldr	r6, [sp, #20]
 8005810:	1ac2      	subs	r2, r0, r3
 8005812:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005816:	429e      	cmp	r6, r3
 8005818:	bf28      	it	cs
 800581a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800581e:	4912      	ldr	r1, [pc, #72]	; (8005868 <_scanf_float+0x418>)
 8005820:	4630      	mov	r0, r6
 8005822:	f000 f82b 	bl	800587c <siprintf>
 8005826:	e7cf      	b.n	80057c8 <_scanf_float+0x378>
 8005828:	f011 0f04 	tst.w	r1, #4
 800582c:	9903      	ldr	r1, [sp, #12]
 800582e:	600a      	str	r2, [r1, #0]
 8005830:	d1db      	bne.n	80057ea <_scanf_float+0x39a>
 8005832:	f8d3 8000 	ldr.w	r8, [r3]
 8005836:	ee10 2a10 	vmov	r2, s0
 800583a:	ee10 0a10 	vmov	r0, s0
 800583e:	463b      	mov	r3, r7
 8005840:	4639      	mov	r1, r7
 8005842:	f7fb f993 	bl	8000b6c <__aeabi_dcmpun>
 8005846:	b128      	cbz	r0, 8005854 <_scanf_float+0x404>
 8005848:	4808      	ldr	r0, [pc, #32]	; (800586c <_scanf_float+0x41c>)
 800584a:	f000 f811 	bl	8005870 <nanf>
 800584e:	ed88 0a00 	vstr	s0, [r8]
 8005852:	e7cd      	b.n	80057f0 <_scanf_float+0x3a0>
 8005854:	4630      	mov	r0, r6
 8005856:	4639      	mov	r1, r7
 8005858:	f7fb f9e6 	bl	8000c28 <__aeabi_d2f>
 800585c:	f8c8 0000 	str.w	r0, [r8]
 8005860:	e7c6      	b.n	80057f0 <_scanf_float+0x3a0>
 8005862:	2500      	movs	r5, #0
 8005864:	e635      	b.n	80054d2 <_scanf_float+0x82>
 8005866:	bf00      	nop
 8005868:	08009c30 	.word	0x08009c30
 800586c:	0800a048 	.word	0x0800a048

08005870 <nanf>:
 8005870:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005878 <nanf+0x8>
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	7fc00000 	.word	0x7fc00000

0800587c <siprintf>:
 800587c:	b40e      	push	{r1, r2, r3}
 800587e:	b500      	push	{lr}
 8005880:	b09c      	sub	sp, #112	; 0x70
 8005882:	ab1d      	add	r3, sp, #116	; 0x74
 8005884:	9002      	str	r0, [sp, #8]
 8005886:	9006      	str	r0, [sp, #24]
 8005888:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800588c:	4809      	ldr	r0, [pc, #36]	; (80058b4 <siprintf+0x38>)
 800588e:	9107      	str	r1, [sp, #28]
 8005890:	9104      	str	r1, [sp, #16]
 8005892:	4909      	ldr	r1, [pc, #36]	; (80058b8 <siprintf+0x3c>)
 8005894:	f853 2b04 	ldr.w	r2, [r3], #4
 8005898:	9105      	str	r1, [sp, #20]
 800589a:	6800      	ldr	r0, [r0, #0]
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	a902      	add	r1, sp, #8
 80058a0:	f002 fea6 	bl	80085f0 <_svfiprintf_r>
 80058a4:	9b02      	ldr	r3, [sp, #8]
 80058a6:	2200      	movs	r2, #0
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	b01c      	add	sp, #112	; 0x70
 80058ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80058b0:	b003      	add	sp, #12
 80058b2:	4770      	bx	lr
 80058b4:	20000014 	.word	0x20000014
 80058b8:	ffff0208 	.word	0xffff0208

080058bc <sulp>:
 80058bc:	b570      	push	{r4, r5, r6, lr}
 80058be:	4604      	mov	r4, r0
 80058c0:	460d      	mov	r5, r1
 80058c2:	ec45 4b10 	vmov	d0, r4, r5
 80058c6:	4616      	mov	r6, r2
 80058c8:	f002 fc2e 	bl	8008128 <__ulp>
 80058cc:	ec51 0b10 	vmov	r0, r1, d0
 80058d0:	b17e      	cbz	r6, 80058f2 <sulp+0x36>
 80058d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80058d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80058da:	2b00      	cmp	r3, #0
 80058dc:	dd09      	ble.n	80058f2 <sulp+0x36>
 80058de:	051b      	lsls	r3, r3, #20
 80058e0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80058e4:	2400      	movs	r4, #0
 80058e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80058ea:	4622      	mov	r2, r4
 80058ec:	462b      	mov	r3, r5
 80058ee:	f7fa fea3 	bl	8000638 <__aeabi_dmul>
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	0000      	movs	r0, r0
	...

080058f8 <_strtod_l>:
 80058f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fc:	b0a3      	sub	sp, #140	; 0x8c
 80058fe:	461f      	mov	r7, r3
 8005900:	2300      	movs	r3, #0
 8005902:	931e      	str	r3, [sp, #120]	; 0x78
 8005904:	4ba4      	ldr	r3, [pc, #656]	; (8005b98 <_strtod_l+0x2a0>)
 8005906:	9219      	str	r2, [sp, #100]	; 0x64
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	9307      	str	r3, [sp, #28]
 800590c:	4604      	mov	r4, r0
 800590e:	4618      	mov	r0, r3
 8005910:	4688      	mov	r8, r1
 8005912:	f7fa fc7d 	bl	8000210 <strlen>
 8005916:	f04f 0a00 	mov.w	sl, #0
 800591a:	4605      	mov	r5, r0
 800591c:	f04f 0b00 	mov.w	fp, #0
 8005920:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005926:	781a      	ldrb	r2, [r3, #0]
 8005928:	2a2b      	cmp	r2, #43	; 0x2b
 800592a:	d04c      	beq.n	80059c6 <_strtod_l+0xce>
 800592c:	d839      	bhi.n	80059a2 <_strtod_l+0xaa>
 800592e:	2a0d      	cmp	r2, #13
 8005930:	d832      	bhi.n	8005998 <_strtod_l+0xa0>
 8005932:	2a08      	cmp	r2, #8
 8005934:	d832      	bhi.n	800599c <_strtod_l+0xa4>
 8005936:	2a00      	cmp	r2, #0
 8005938:	d03c      	beq.n	80059b4 <_strtod_l+0xbc>
 800593a:	2300      	movs	r3, #0
 800593c:	930e      	str	r3, [sp, #56]	; 0x38
 800593e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005940:	7833      	ldrb	r3, [r6, #0]
 8005942:	2b30      	cmp	r3, #48	; 0x30
 8005944:	f040 80b4 	bne.w	8005ab0 <_strtod_l+0x1b8>
 8005948:	7873      	ldrb	r3, [r6, #1]
 800594a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800594e:	2b58      	cmp	r3, #88	; 0x58
 8005950:	d16c      	bne.n	8005a2c <_strtod_l+0x134>
 8005952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	ab1e      	add	r3, sp, #120	; 0x78
 8005958:	9702      	str	r7, [sp, #8]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	4a8f      	ldr	r2, [pc, #572]	; (8005b9c <_strtod_l+0x2a4>)
 800595e:	ab1f      	add	r3, sp, #124	; 0x7c
 8005960:	a91d      	add	r1, sp, #116	; 0x74
 8005962:	4620      	mov	r0, r4
 8005964:	f001 fd40 	bl	80073e8 <__gethex>
 8005968:	f010 0707 	ands.w	r7, r0, #7
 800596c:	4605      	mov	r5, r0
 800596e:	d005      	beq.n	800597c <_strtod_l+0x84>
 8005970:	2f06      	cmp	r7, #6
 8005972:	d12a      	bne.n	80059ca <_strtod_l+0xd2>
 8005974:	3601      	adds	r6, #1
 8005976:	2300      	movs	r3, #0
 8005978:	961d      	str	r6, [sp, #116]	; 0x74
 800597a:	930e      	str	r3, [sp, #56]	; 0x38
 800597c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800597e:	2b00      	cmp	r3, #0
 8005980:	f040 8596 	bne.w	80064b0 <_strtod_l+0xbb8>
 8005984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005986:	b1db      	cbz	r3, 80059c0 <_strtod_l+0xc8>
 8005988:	4652      	mov	r2, sl
 800598a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800598e:	ec43 2b10 	vmov	d0, r2, r3
 8005992:	b023      	add	sp, #140	; 0x8c
 8005994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005998:	2a20      	cmp	r2, #32
 800599a:	d1ce      	bne.n	800593a <_strtod_l+0x42>
 800599c:	3301      	adds	r3, #1
 800599e:	931d      	str	r3, [sp, #116]	; 0x74
 80059a0:	e7c0      	b.n	8005924 <_strtod_l+0x2c>
 80059a2:	2a2d      	cmp	r2, #45	; 0x2d
 80059a4:	d1c9      	bne.n	800593a <_strtod_l+0x42>
 80059a6:	2201      	movs	r2, #1
 80059a8:	920e      	str	r2, [sp, #56]	; 0x38
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	921d      	str	r2, [sp, #116]	; 0x74
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1c4      	bne.n	800593e <_strtod_l+0x46>
 80059b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f040 8576 	bne.w	80064ac <_strtod_l+0xbb4>
 80059c0:	4652      	mov	r2, sl
 80059c2:	465b      	mov	r3, fp
 80059c4:	e7e3      	b.n	800598e <_strtod_l+0x96>
 80059c6:	2200      	movs	r2, #0
 80059c8:	e7ee      	b.n	80059a8 <_strtod_l+0xb0>
 80059ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80059cc:	b13a      	cbz	r2, 80059de <_strtod_l+0xe6>
 80059ce:	2135      	movs	r1, #53	; 0x35
 80059d0:	a820      	add	r0, sp, #128	; 0x80
 80059d2:	f002 fcb4 	bl	800833e <__copybits>
 80059d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80059d8:	4620      	mov	r0, r4
 80059da:	f002 f879 	bl	8007ad0 <_Bfree>
 80059de:	3f01      	subs	r7, #1
 80059e0:	2f05      	cmp	r7, #5
 80059e2:	d807      	bhi.n	80059f4 <_strtod_l+0xfc>
 80059e4:	e8df f007 	tbb	[pc, r7]
 80059e8:	1d180b0e 	.word	0x1d180b0e
 80059ec:	030e      	.short	0x030e
 80059ee:	f04f 0b00 	mov.w	fp, #0
 80059f2:	46da      	mov	sl, fp
 80059f4:	0728      	lsls	r0, r5, #28
 80059f6:	d5c1      	bpl.n	800597c <_strtod_l+0x84>
 80059f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80059fc:	e7be      	b.n	800597c <_strtod_l+0x84>
 80059fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005a02:	e7f7      	b.n	80059f4 <_strtod_l+0xfc>
 8005a04:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005a08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005a0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005a12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005a16:	e7ed      	b.n	80059f4 <_strtod_l+0xfc>
 8005a18:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005ba0 <_strtod_l+0x2a8>
 8005a1c:	f04f 0a00 	mov.w	sl, #0
 8005a20:	e7e8      	b.n	80059f4 <_strtod_l+0xfc>
 8005a22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005a26:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005a2a:	e7e3      	b.n	80059f4 <_strtod_l+0xfc>
 8005a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	921d      	str	r2, [sp, #116]	; 0x74
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	2b30      	cmp	r3, #48	; 0x30
 8005a36:	d0f9      	beq.n	8005a2c <_strtod_l+0x134>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d09f      	beq.n	800597c <_strtod_l+0x84>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f04f 0900 	mov.w	r9, #0
 8005a42:	9304      	str	r3, [sp, #16]
 8005a44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a46:	930a      	str	r3, [sp, #40]	; 0x28
 8005a48:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005a4c:	464f      	mov	r7, r9
 8005a4e:	220a      	movs	r2, #10
 8005a50:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005a52:	7806      	ldrb	r6, [r0, #0]
 8005a54:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005a58:	b2d9      	uxtb	r1, r3
 8005a5a:	2909      	cmp	r1, #9
 8005a5c:	d92a      	bls.n	8005ab4 <_strtod_l+0x1bc>
 8005a5e:	9907      	ldr	r1, [sp, #28]
 8005a60:	462a      	mov	r2, r5
 8005a62:	f002 fedd 	bl	8008820 <strncmp>
 8005a66:	b398      	cbz	r0, 8005ad0 <_strtod_l+0x1d8>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	4633      	mov	r3, r6
 8005a6c:	463d      	mov	r5, r7
 8005a6e:	9007      	str	r0, [sp, #28]
 8005a70:	4602      	mov	r2, r0
 8005a72:	2b65      	cmp	r3, #101	; 0x65
 8005a74:	d001      	beq.n	8005a7a <_strtod_l+0x182>
 8005a76:	2b45      	cmp	r3, #69	; 0x45
 8005a78:	d118      	bne.n	8005aac <_strtod_l+0x1b4>
 8005a7a:	b91d      	cbnz	r5, 8005a84 <_strtod_l+0x18c>
 8005a7c:	9b04      	ldr	r3, [sp, #16]
 8005a7e:	4303      	orrs	r3, r0
 8005a80:	d098      	beq.n	80059b4 <_strtod_l+0xbc>
 8005a82:	2500      	movs	r5, #0
 8005a84:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005a88:	f108 0301 	add.w	r3, r8, #1
 8005a8c:	931d      	str	r3, [sp, #116]	; 0x74
 8005a8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005a92:	2b2b      	cmp	r3, #43	; 0x2b
 8005a94:	d075      	beq.n	8005b82 <_strtod_l+0x28a>
 8005a96:	2b2d      	cmp	r3, #45	; 0x2d
 8005a98:	d07b      	beq.n	8005b92 <_strtod_l+0x29a>
 8005a9a:	f04f 0c00 	mov.w	ip, #0
 8005a9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005aa2:	2909      	cmp	r1, #9
 8005aa4:	f240 8082 	bls.w	8005bac <_strtod_l+0x2b4>
 8005aa8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005aac:	2600      	movs	r6, #0
 8005aae:	e09d      	b.n	8005bec <_strtod_l+0x2f4>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e7c4      	b.n	8005a3e <_strtod_l+0x146>
 8005ab4:	2f08      	cmp	r7, #8
 8005ab6:	bfd8      	it	le
 8005ab8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005aba:	f100 0001 	add.w	r0, r0, #1
 8005abe:	bfda      	itte	le
 8005ac0:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ac4:	9309      	strle	r3, [sp, #36]	; 0x24
 8005ac6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005aca:	3701      	adds	r7, #1
 8005acc:	901d      	str	r0, [sp, #116]	; 0x74
 8005ace:	e7bf      	b.n	8005a50 <_strtod_l+0x158>
 8005ad0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ad2:	195a      	adds	r2, r3, r5
 8005ad4:	921d      	str	r2, [sp, #116]	; 0x74
 8005ad6:	5d5b      	ldrb	r3, [r3, r5]
 8005ad8:	2f00      	cmp	r7, #0
 8005ada:	d037      	beq.n	8005b4c <_strtod_l+0x254>
 8005adc:	9007      	str	r0, [sp, #28]
 8005ade:	463d      	mov	r5, r7
 8005ae0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005ae4:	2a09      	cmp	r2, #9
 8005ae6:	d912      	bls.n	8005b0e <_strtod_l+0x216>
 8005ae8:	2201      	movs	r2, #1
 8005aea:	e7c2      	b.n	8005a72 <_strtod_l+0x17a>
 8005aec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	921d      	str	r2, [sp, #116]	; 0x74
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	3001      	adds	r0, #1
 8005af6:	2b30      	cmp	r3, #48	; 0x30
 8005af8:	d0f8      	beq.n	8005aec <_strtod_l+0x1f4>
 8005afa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005afe:	2a08      	cmp	r2, #8
 8005b00:	f200 84db 	bhi.w	80064ba <_strtod_l+0xbc2>
 8005b04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005b06:	9007      	str	r0, [sp, #28]
 8005b08:	2000      	movs	r0, #0
 8005b0a:	920a      	str	r2, [sp, #40]	; 0x28
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	3b30      	subs	r3, #48	; 0x30
 8005b10:	f100 0201 	add.w	r2, r0, #1
 8005b14:	d014      	beq.n	8005b40 <_strtod_l+0x248>
 8005b16:	9907      	ldr	r1, [sp, #28]
 8005b18:	4411      	add	r1, r2
 8005b1a:	9107      	str	r1, [sp, #28]
 8005b1c:	462a      	mov	r2, r5
 8005b1e:	eb00 0e05 	add.w	lr, r0, r5
 8005b22:	210a      	movs	r1, #10
 8005b24:	4572      	cmp	r2, lr
 8005b26:	d113      	bne.n	8005b50 <_strtod_l+0x258>
 8005b28:	182a      	adds	r2, r5, r0
 8005b2a:	2a08      	cmp	r2, #8
 8005b2c:	f105 0501 	add.w	r5, r5, #1
 8005b30:	4405      	add	r5, r0
 8005b32:	dc1c      	bgt.n	8005b6e <_strtod_l+0x276>
 8005b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b36:	220a      	movs	r2, #10
 8005b38:	fb02 3301 	mla	r3, r2, r1, r3
 8005b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b3e:	2200      	movs	r2, #0
 8005b40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	911d      	str	r1, [sp, #116]	; 0x74
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	4610      	mov	r0, r2
 8005b4a:	e7c9      	b.n	8005ae0 <_strtod_l+0x1e8>
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	e7d2      	b.n	8005af6 <_strtod_l+0x1fe>
 8005b50:	2a08      	cmp	r2, #8
 8005b52:	dc04      	bgt.n	8005b5e <_strtod_l+0x266>
 8005b54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005b56:	434e      	muls	r6, r1
 8005b58:	9609      	str	r6, [sp, #36]	; 0x24
 8005b5a:	3201      	adds	r2, #1
 8005b5c:	e7e2      	b.n	8005b24 <_strtod_l+0x22c>
 8005b5e:	f102 0c01 	add.w	ip, r2, #1
 8005b62:	f1bc 0f10 	cmp.w	ip, #16
 8005b66:	bfd8      	it	le
 8005b68:	fb01 f909 	mulle.w	r9, r1, r9
 8005b6c:	e7f5      	b.n	8005b5a <_strtod_l+0x262>
 8005b6e:	2d10      	cmp	r5, #16
 8005b70:	bfdc      	itt	le
 8005b72:	220a      	movle	r2, #10
 8005b74:	fb02 3909 	mlale	r9, r2, r9, r3
 8005b78:	e7e1      	b.n	8005b3e <_strtod_l+0x246>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9307      	str	r3, [sp, #28]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	e77c      	b.n	8005a7c <_strtod_l+0x184>
 8005b82:	f04f 0c00 	mov.w	ip, #0
 8005b86:	f108 0302 	add.w	r3, r8, #2
 8005b8a:	931d      	str	r3, [sp, #116]	; 0x74
 8005b8c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005b90:	e785      	b.n	8005a9e <_strtod_l+0x1a6>
 8005b92:	f04f 0c01 	mov.w	ip, #1
 8005b96:	e7f6      	b.n	8005b86 <_strtod_l+0x28e>
 8005b98:	08009e88 	.word	0x08009e88
 8005b9c:	08009c38 	.word	0x08009c38
 8005ba0:	7ff00000 	.word	0x7ff00000
 8005ba4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ba6:	1c59      	adds	r1, r3, #1
 8005ba8:	911d      	str	r1, [sp, #116]	; 0x74
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b30      	cmp	r3, #48	; 0x30
 8005bae:	d0f9      	beq.n	8005ba4 <_strtod_l+0x2ac>
 8005bb0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005bb4:	2908      	cmp	r1, #8
 8005bb6:	f63f af79 	bhi.w	8005aac <_strtod_l+0x1b4>
 8005bba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005bbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005bc0:	9308      	str	r3, [sp, #32]
 8005bc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005bc4:	1c59      	adds	r1, r3, #1
 8005bc6:	911d      	str	r1, [sp, #116]	; 0x74
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005bce:	2e09      	cmp	r6, #9
 8005bd0:	d937      	bls.n	8005c42 <_strtod_l+0x34a>
 8005bd2:	9e08      	ldr	r6, [sp, #32]
 8005bd4:	1b89      	subs	r1, r1, r6
 8005bd6:	2908      	cmp	r1, #8
 8005bd8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005bdc:	dc02      	bgt.n	8005be4 <_strtod_l+0x2ec>
 8005bde:	4576      	cmp	r6, lr
 8005be0:	bfa8      	it	ge
 8005be2:	4676      	movge	r6, lr
 8005be4:	f1bc 0f00 	cmp.w	ip, #0
 8005be8:	d000      	beq.n	8005bec <_strtod_l+0x2f4>
 8005bea:	4276      	negs	r6, r6
 8005bec:	2d00      	cmp	r5, #0
 8005bee:	d14f      	bne.n	8005c90 <_strtod_l+0x398>
 8005bf0:	9904      	ldr	r1, [sp, #16]
 8005bf2:	4301      	orrs	r1, r0
 8005bf4:	f47f aec2 	bne.w	800597c <_strtod_l+0x84>
 8005bf8:	2a00      	cmp	r2, #0
 8005bfa:	f47f aedb 	bne.w	80059b4 <_strtod_l+0xbc>
 8005bfe:	2b69      	cmp	r3, #105	; 0x69
 8005c00:	d027      	beq.n	8005c52 <_strtod_l+0x35a>
 8005c02:	dc24      	bgt.n	8005c4e <_strtod_l+0x356>
 8005c04:	2b49      	cmp	r3, #73	; 0x49
 8005c06:	d024      	beq.n	8005c52 <_strtod_l+0x35a>
 8005c08:	2b4e      	cmp	r3, #78	; 0x4e
 8005c0a:	f47f aed3 	bne.w	80059b4 <_strtod_l+0xbc>
 8005c0e:	499e      	ldr	r1, [pc, #632]	; (8005e88 <_strtod_l+0x590>)
 8005c10:	a81d      	add	r0, sp, #116	; 0x74
 8005c12:	f001 fe41 	bl	8007898 <__match>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	f43f aecc 	beq.w	80059b4 <_strtod_l+0xbc>
 8005c1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b28      	cmp	r3, #40	; 0x28
 8005c22:	d12d      	bne.n	8005c80 <_strtod_l+0x388>
 8005c24:	4999      	ldr	r1, [pc, #612]	; (8005e8c <_strtod_l+0x594>)
 8005c26:	aa20      	add	r2, sp, #128	; 0x80
 8005c28:	a81d      	add	r0, sp, #116	; 0x74
 8005c2a:	f001 fe49 	bl	80078c0 <__hexnan>
 8005c2e:	2805      	cmp	r0, #5
 8005c30:	d126      	bne.n	8005c80 <_strtod_l+0x388>
 8005c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c34:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005c38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005c3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005c40:	e69c      	b.n	800597c <_strtod_l+0x84>
 8005c42:	210a      	movs	r1, #10
 8005c44:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005c48:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005c4c:	e7b9      	b.n	8005bc2 <_strtod_l+0x2ca>
 8005c4e:	2b6e      	cmp	r3, #110	; 0x6e
 8005c50:	e7db      	b.n	8005c0a <_strtod_l+0x312>
 8005c52:	498f      	ldr	r1, [pc, #572]	; (8005e90 <_strtod_l+0x598>)
 8005c54:	a81d      	add	r0, sp, #116	; 0x74
 8005c56:	f001 fe1f 	bl	8007898 <__match>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	f43f aeaa 	beq.w	80059b4 <_strtod_l+0xbc>
 8005c60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c62:	498c      	ldr	r1, [pc, #560]	; (8005e94 <_strtod_l+0x59c>)
 8005c64:	3b01      	subs	r3, #1
 8005c66:	a81d      	add	r0, sp, #116	; 0x74
 8005c68:	931d      	str	r3, [sp, #116]	; 0x74
 8005c6a:	f001 fe15 	bl	8007898 <__match>
 8005c6e:	b910      	cbnz	r0, 8005c76 <_strtod_l+0x37e>
 8005c70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c72:	3301      	adds	r3, #1
 8005c74:	931d      	str	r3, [sp, #116]	; 0x74
 8005c76:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005ea4 <_strtod_l+0x5ac>
 8005c7a:	f04f 0a00 	mov.w	sl, #0
 8005c7e:	e67d      	b.n	800597c <_strtod_l+0x84>
 8005c80:	4885      	ldr	r0, [pc, #532]	; (8005e98 <_strtod_l+0x5a0>)
 8005c82:	f002 fdb5 	bl	80087f0 <nan>
 8005c86:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005c8a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005c8e:	e675      	b.n	800597c <_strtod_l+0x84>
 8005c90:	9b07      	ldr	r3, [sp, #28]
 8005c92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c94:	1af3      	subs	r3, r6, r3
 8005c96:	2f00      	cmp	r7, #0
 8005c98:	bf08      	it	eq
 8005c9a:	462f      	moveq	r7, r5
 8005c9c:	2d10      	cmp	r5, #16
 8005c9e:	9308      	str	r3, [sp, #32]
 8005ca0:	46a8      	mov	r8, r5
 8005ca2:	bfa8      	it	ge
 8005ca4:	f04f 0810 	movge.w	r8, #16
 8005ca8:	f7fa fc4c 	bl	8000544 <__aeabi_ui2d>
 8005cac:	2d09      	cmp	r5, #9
 8005cae:	4682      	mov	sl, r0
 8005cb0:	468b      	mov	fp, r1
 8005cb2:	dd13      	ble.n	8005cdc <_strtod_l+0x3e4>
 8005cb4:	4b79      	ldr	r3, [pc, #484]	; (8005e9c <_strtod_l+0x5a4>)
 8005cb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005cba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005cbe:	f7fa fcbb 	bl	8000638 <__aeabi_dmul>
 8005cc2:	4682      	mov	sl, r0
 8005cc4:	4648      	mov	r0, r9
 8005cc6:	468b      	mov	fp, r1
 8005cc8:	f7fa fc3c 	bl	8000544 <__aeabi_ui2d>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4650      	mov	r0, sl
 8005cd2:	4659      	mov	r1, fp
 8005cd4:	f7fa fafa 	bl	80002cc <__adddf3>
 8005cd8:	4682      	mov	sl, r0
 8005cda:	468b      	mov	fp, r1
 8005cdc:	2d0f      	cmp	r5, #15
 8005cde:	dc38      	bgt.n	8005d52 <_strtod_l+0x45a>
 8005ce0:	9b08      	ldr	r3, [sp, #32]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f43f ae4a 	beq.w	800597c <_strtod_l+0x84>
 8005ce8:	dd24      	ble.n	8005d34 <_strtod_l+0x43c>
 8005cea:	2b16      	cmp	r3, #22
 8005cec:	dc0b      	bgt.n	8005d06 <_strtod_l+0x40e>
 8005cee:	4d6b      	ldr	r5, [pc, #428]	; (8005e9c <_strtod_l+0x5a4>)
 8005cf0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005cf4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005cf8:	4652      	mov	r2, sl
 8005cfa:	465b      	mov	r3, fp
 8005cfc:	f7fa fc9c 	bl	8000638 <__aeabi_dmul>
 8005d00:	4682      	mov	sl, r0
 8005d02:	468b      	mov	fp, r1
 8005d04:	e63a      	b.n	800597c <_strtod_l+0x84>
 8005d06:	9a08      	ldr	r2, [sp, #32]
 8005d08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	db20      	blt.n	8005d52 <_strtod_l+0x45a>
 8005d10:	4c62      	ldr	r4, [pc, #392]	; (8005e9c <_strtod_l+0x5a4>)
 8005d12:	f1c5 050f 	rsb	r5, r5, #15
 8005d16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005d1a:	4652      	mov	r2, sl
 8005d1c:	465b      	mov	r3, fp
 8005d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d22:	f7fa fc89 	bl	8000638 <__aeabi_dmul>
 8005d26:	9b08      	ldr	r3, [sp, #32]
 8005d28:	1b5d      	subs	r5, r3, r5
 8005d2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005d2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005d32:	e7e3      	b.n	8005cfc <_strtod_l+0x404>
 8005d34:	9b08      	ldr	r3, [sp, #32]
 8005d36:	3316      	adds	r3, #22
 8005d38:	db0b      	blt.n	8005d52 <_strtod_l+0x45a>
 8005d3a:	9b07      	ldr	r3, [sp, #28]
 8005d3c:	4a57      	ldr	r2, [pc, #348]	; (8005e9c <_strtod_l+0x5a4>)
 8005d3e:	1b9e      	subs	r6, r3, r6
 8005d40:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005d44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d48:	4650      	mov	r0, sl
 8005d4a:	4659      	mov	r1, fp
 8005d4c:	f7fa fd9e 	bl	800088c <__aeabi_ddiv>
 8005d50:	e7d6      	b.n	8005d00 <_strtod_l+0x408>
 8005d52:	9b08      	ldr	r3, [sp, #32]
 8005d54:	eba5 0808 	sub.w	r8, r5, r8
 8005d58:	4498      	add	r8, r3
 8005d5a:	f1b8 0f00 	cmp.w	r8, #0
 8005d5e:	dd71      	ble.n	8005e44 <_strtod_l+0x54c>
 8005d60:	f018 030f 	ands.w	r3, r8, #15
 8005d64:	d00a      	beq.n	8005d7c <_strtod_l+0x484>
 8005d66:	494d      	ldr	r1, [pc, #308]	; (8005e9c <_strtod_l+0x5a4>)
 8005d68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d6c:	4652      	mov	r2, sl
 8005d6e:	465b      	mov	r3, fp
 8005d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d74:	f7fa fc60 	bl	8000638 <__aeabi_dmul>
 8005d78:	4682      	mov	sl, r0
 8005d7a:	468b      	mov	fp, r1
 8005d7c:	f038 080f 	bics.w	r8, r8, #15
 8005d80:	d04d      	beq.n	8005e1e <_strtod_l+0x526>
 8005d82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005d86:	dd22      	ble.n	8005dce <_strtod_l+0x4d6>
 8005d88:	2500      	movs	r5, #0
 8005d8a:	462e      	mov	r6, r5
 8005d8c:	9509      	str	r5, [sp, #36]	; 0x24
 8005d8e:	9507      	str	r5, [sp, #28]
 8005d90:	2322      	movs	r3, #34	; 0x22
 8005d92:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005ea4 <_strtod_l+0x5ac>
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	f04f 0a00 	mov.w	sl, #0
 8005d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f43f adec 	beq.w	800597c <_strtod_l+0x84>
 8005da4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005da6:	4620      	mov	r0, r4
 8005da8:	f001 fe92 	bl	8007ad0 <_Bfree>
 8005dac:	9907      	ldr	r1, [sp, #28]
 8005dae:	4620      	mov	r0, r4
 8005db0:	f001 fe8e 	bl	8007ad0 <_Bfree>
 8005db4:	4631      	mov	r1, r6
 8005db6:	4620      	mov	r0, r4
 8005db8:	f001 fe8a 	bl	8007ad0 <_Bfree>
 8005dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f001 fe86 	bl	8007ad0 <_Bfree>
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f001 fe82 	bl	8007ad0 <_Bfree>
 8005dcc:	e5d6      	b.n	800597c <_strtod_l+0x84>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005dd4:	4650      	mov	r0, sl
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	4699      	mov	r9, r3
 8005dda:	f1b8 0f01 	cmp.w	r8, #1
 8005dde:	dc21      	bgt.n	8005e24 <_strtod_l+0x52c>
 8005de0:	b10b      	cbz	r3, 8005de6 <_strtod_l+0x4ee>
 8005de2:	4682      	mov	sl, r0
 8005de4:	468b      	mov	fp, r1
 8005de6:	4b2e      	ldr	r3, [pc, #184]	; (8005ea0 <_strtod_l+0x5a8>)
 8005de8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005dec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005df0:	4652      	mov	r2, sl
 8005df2:	465b      	mov	r3, fp
 8005df4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005df8:	f7fa fc1e 	bl	8000638 <__aeabi_dmul>
 8005dfc:	4b29      	ldr	r3, [pc, #164]	; (8005ea4 <_strtod_l+0x5ac>)
 8005dfe:	460a      	mov	r2, r1
 8005e00:	400b      	ands	r3, r1
 8005e02:	4929      	ldr	r1, [pc, #164]	; (8005ea8 <_strtod_l+0x5b0>)
 8005e04:	428b      	cmp	r3, r1
 8005e06:	4682      	mov	sl, r0
 8005e08:	d8be      	bhi.n	8005d88 <_strtod_l+0x490>
 8005e0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005e0e:	428b      	cmp	r3, r1
 8005e10:	bf86      	itte	hi
 8005e12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005eac <_strtod_l+0x5b4>
 8005e16:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005e1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	e081      	b.n	8005f28 <_strtod_l+0x630>
 8005e24:	f018 0f01 	tst.w	r8, #1
 8005e28:	d007      	beq.n	8005e3a <_strtod_l+0x542>
 8005e2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <_strtod_l+0x5a8>)
 8005e2c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f7fa fc00 	bl	8000638 <__aeabi_dmul>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f109 0901 	add.w	r9, r9, #1
 8005e3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e42:	e7ca      	b.n	8005dda <_strtod_l+0x4e2>
 8005e44:	d0eb      	beq.n	8005e1e <_strtod_l+0x526>
 8005e46:	f1c8 0800 	rsb	r8, r8, #0
 8005e4a:	f018 020f 	ands.w	r2, r8, #15
 8005e4e:	d00a      	beq.n	8005e66 <_strtod_l+0x56e>
 8005e50:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <_strtod_l+0x5a4>)
 8005e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e56:	4650      	mov	r0, sl
 8005e58:	4659      	mov	r1, fp
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa fd15 	bl	800088c <__aeabi_ddiv>
 8005e62:	4682      	mov	sl, r0
 8005e64:	468b      	mov	fp, r1
 8005e66:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005e6a:	d0d8      	beq.n	8005e1e <_strtod_l+0x526>
 8005e6c:	f1b8 0f1f 	cmp.w	r8, #31
 8005e70:	dd1e      	ble.n	8005eb0 <_strtod_l+0x5b8>
 8005e72:	2500      	movs	r5, #0
 8005e74:	462e      	mov	r6, r5
 8005e76:	9509      	str	r5, [sp, #36]	; 0x24
 8005e78:	9507      	str	r5, [sp, #28]
 8005e7a:	2322      	movs	r3, #34	; 0x22
 8005e7c:	f04f 0a00 	mov.w	sl, #0
 8005e80:	f04f 0b00 	mov.w	fp, #0
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	e789      	b.n	8005d9c <_strtod_l+0x4a4>
 8005e88:	08009c09 	.word	0x08009c09
 8005e8c:	08009c4c 	.word	0x08009c4c
 8005e90:	08009c01 	.word	0x08009c01
 8005e94:	08009d8c 	.word	0x08009d8c
 8005e98:	0800a048 	.word	0x0800a048
 8005e9c:	08009f28 	.word	0x08009f28
 8005ea0:	08009f00 	.word	0x08009f00
 8005ea4:	7ff00000 	.word	0x7ff00000
 8005ea8:	7ca00000 	.word	0x7ca00000
 8005eac:	7fefffff 	.word	0x7fefffff
 8005eb0:	f018 0310 	ands.w	r3, r8, #16
 8005eb4:	bf18      	it	ne
 8005eb6:	236a      	movne	r3, #106	; 0x6a
 8005eb8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006270 <_strtod_l+0x978>
 8005ebc:	9304      	str	r3, [sp, #16]
 8005ebe:	4650      	mov	r0, sl
 8005ec0:	4659      	mov	r1, fp
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f018 0f01 	tst.w	r8, #1
 8005ec8:	d004      	beq.n	8005ed4 <_strtod_l+0x5dc>
 8005eca:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005ece:	f7fa fbb3 	bl	8000638 <__aeabi_dmul>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005ed8:	f109 0908 	add.w	r9, r9, #8
 8005edc:	d1f2      	bne.n	8005ec4 <_strtod_l+0x5cc>
 8005ede:	b10b      	cbz	r3, 8005ee4 <_strtod_l+0x5ec>
 8005ee0:	4682      	mov	sl, r0
 8005ee2:	468b      	mov	fp, r1
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	b1bb      	cbz	r3, 8005f18 <_strtod_l+0x620>
 8005ee8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005eec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	4659      	mov	r1, fp
 8005ef4:	dd10      	ble.n	8005f18 <_strtod_l+0x620>
 8005ef6:	2b1f      	cmp	r3, #31
 8005ef8:	f340 8128 	ble.w	800614c <_strtod_l+0x854>
 8005efc:	2b34      	cmp	r3, #52	; 0x34
 8005efe:	bfde      	ittt	le
 8005f00:	3b20      	suble	r3, #32
 8005f02:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005f06:	fa02 f303 	lslle.w	r3, r2, r3
 8005f0a:	f04f 0a00 	mov.w	sl, #0
 8005f0e:	bfcc      	ite	gt
 8005f10:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005f14:	ea03 0b01 	andle.w	fp, r3, r1
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	4650      	mov	r0, sl
 8005f1e:	4659      	mov	r1, fp
 8005f20:	f7fa fdf2 	bl	8000b08 <__aeabi_dcmpeq>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d1a4      	bne.n	8005e72 <_strtod_l+0x57a>
 8005f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f2e:	462b      	mov	r3, r5
 8005f30:	463a      	mov	r2, r7
 8005f32:	4620      	mov	r0, r4
 8005f34:	f001 fe38 	bl	8007ba8 <__s2b>
 8005f38:	9009      	str	r0, [sp, #36]	; 0x24
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	f43f af24 	beq.w	8005d88 <_strtod_l+0x490>
 8005f40:	9b07      	ldr	r3, [sp, #28]
 8005f42:	1b9e      	subs	r6, r3, r6
 8005f44:	9b08      	ldr	r3, [sp, #32]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bfb4      	ite	lt
 8005f4a:	4633      	movlt	r3, r6
 8005f4c:	2300      	movge	r3, #0
 8005f4e:	9310      	str	r3, [sp, #64]	; 0x40
 8005f50:	9b08      	ldr	r3, [sp, #32]
 8005f52:	2500      	movs	r5, #0
 8005f54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f58:	9318      	str	r3, [sp, #96]	; 0x60
 8005f5a:	462e      	mov	r6, r5
 8005f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5e:	4620      	mov	r0, r4
 8005f60:	6859      	ldr	r1, [r3, #4]
 8005f62:	f001 fd75 	bl	8007a50 <_Balloc>
 8005f66:	9007      	str	r0, [sp, #28]
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	f43f af11 	beq.w	8005d90 <_strtod_l+0x498>
 8005f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	3202      	adds	r2, #2
 8005f74:	f103 010c 	add.w	r1, r3, #12
 8005f78:	0092      	lsls	r2, r2, #2
 8005f7a:	300c      	adds	r0, #12
 8005f7c:	f001 fd5a 	bl	8007a34 <memcpy>
 8005f80:	ec4b ab10 	vmov	d0, sl, fp
 8005f84:	aa20      	add	r2, sp, #128	; 0x80
 8005f86:	a91f      	add	r1, sp, #124	; 0x7c
 8005f88:	4620      	mov	r0, r4
 8005f8a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005f8e:	f002 f947 	bl	8008220 <__d2b>
 8005f92:	901e      	str	r0, [sp, #120]	; 0x78
 8005f94:	2800      	cmp	r0, #0
 8005f96:	f43f aefb 	beq.w	8005d90 <_strtod_l+0x498>
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f001 fe9d 	bl	8007cdc <__i2b>
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	f43f aef3 	beq.w	8005d90 <_strtod_l+0x498>
 8005faa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005fac:	9904      	ldr	r1, [sp, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bfab      	itete	ge
 8005fb2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005fb4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005fb6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005fb8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005fbc:	bfac      	ite	ge
 8005fbe:	eb03 0902 	addge.w	r9, r3, r2
 8005fc2:	1ad7      	sublt	r7, r2, r3
 8005fc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fc6:	eba3 0801 	sub.w	r8, r3, r1
 8005fca:	4490      	add	r8, r2
 8005fcc:	4ba3      	ldr	r3, [pc, #652]	; (800625c <_strtod_l+0x964>)
 8005fce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005fd2:	4598      	cmp	r8, r3
 8005fd4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005fd8:	f280 80cc 	bge.w	8006174 <_strtod_l+0x87c>
 8005fdc:	eba3 0308 	sub.w	r3, r3, r8
 8005fe0:	2b1f      	cmp	r3, #31
 8005fe2:	eba2 0203 	sub.w	r2, r2, r3
 8005fe6:	f04f 0101 	mov.w	r1, #1
 8005fea:	f300 80b6 	bgt.w	800615a <_strtod_l+0x862>
 8005fee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff2:	9311      	str	r3, [sp, #68]	; 0x44
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ff8:	eb09 0802 	add.w	r8, r9, r2
 8005ffc:	9b04      	ldr	r3, [sp, #16]
 8005ffe:	45c1      	cmp	r9, r8
 8006000:	4417      	add	r7, r2
 8006002:	441f      	add	r7, r3
 8006004:	464b      	mov	r3, r9
 8006006:	bfa8      	it	ge
 8006008:	4643      	movge	r3, r8
 800600a:	42bb      	cmp	r3, r7
 800600c:	bfa8      	it	ge
 800600e:	463b      	movge	r3, r7
 8006010:	2b00      	cmp	r3, #0
 8006012:	bfc2      	ittt	gt
 8006014:	eba8 0803 	subgt.w	r8, r8, r3
 8006018:	1aff      	subgt	r7, r7, r3
 800601a:	eba9 0903 	subgt.w	r9, r9, r3
 800601e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	dd17      	ble.n	8006054 <_strtod_l+0x75c>
 8006024:	4631      	mov	r1, r6
 8006026:	461a      	mov	r2, r3
 8006028:	4620      	mov	r0, r4
 800602a:	f001 ff13 	bl	8007e54 <__pow5mult>
 800602e:	4606      	mov	r6, r0
 8006030:	2800      	cmp	r0, #0
 8006032:	f43f aead 	beq.w	8005d90 <_strtod_l+0x498>
 8006036:	4601      	mov	r1, r0
 8006038:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800603a:	4620      	mov	r0, r4
 800603c:	f001 fe64 	bl	8007d08 <__multiply>
 8006040:	900f      	str	r0, [sp, #60]	; 0x3c
 8006042:	2800      	cmp	r0, #0
 8006044:	f43f aea4 	beq.w	8005d90 <_strtod_l+0x498>
 8006048:	991e      	ldr	r1, [sp, #120]	; 0x78
 800604a:	4620      	mov	r0, r4
 800604c:	f001 fd40 	bl	8007ad0 <_Bfree>
 8006050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006052:	931e      	str	r3, [sp, #120]	; 0x78
 8006054:	f1b8 0f00 	cmp.w	r8, #0
 8006058:	f300 8091 	bgt.w	800617e <_strtod_l+0x886>
 800605c:	9b08      	ldr	r3, [sp, #32]
 800605e:	2b00      	cmp	r3, #0
 8006060:	dd08      	ble.n	8006074 <_strtod_l+0x77c>
 8006062:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006064:	9907      	ldr	r1, [sp, #28]
 8006066:	4620      	mov	r0, r4
 8006068:	f001 fef4 	bl	8007e54 <__pow5mult>
 800606c:	9007      	str	r0, [sp, #28]
 800606e:	2800      	cmp	r0, #0
 8006070:	f43f ae8e 	beq.w	8005d90 <_strtod_l+0x498>
 8006074:	2f00      	cmp	r7, #0
 8006076:	dd08      	ble.n	800608a <_strtod_l+0x792>
 8006078:	9907      	ldr	r1, [sp, #28]
 800607a:	463a      	mov	r2, r7
 800607c:	4620      	mov	r0, r4
 800607e:	f001 ff43 	bl	8007f08 <__lshift>
 8006082:	9007      	str	r0, [sp, #28]
 8006084:	2800      	cmp	r0, #0
 8006086:	f43f ae83 	beq.w	8005d90 <_strtod_l+0x498>
 800608a:	f1b9 0f00 	cmp.w	r9, #0
 800608e:	dd08      	ble.n	80060a2 <_strtod_l+0x7aa>
 8006090:	4631      	mov	r1, r6
 8006092:	464a      	mov	r2, r9
 8006094:	4620      	mov	r0, r4
 8006096:	f001 ff37 	bl	8007f08 <__lshift>
 800609a:	4606      	mov	r6, r0
 800609c:	2800      	cmp	r0, #0
 800609e:	f43f ae77 	beq.w	8005d90 <_strtod_l+0x498>
 80060a2:	9a07      	ldr	r2, [sp, #28]
 80060a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80060a6:	4620      	mov	r0, r4
 80060a8:	f001 ffb6 	bl	8008018 <__mdiff>
 80060ac:	4605      	mov	r5, r0
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f43f ae6e 	beq.w	8005d90 <_strtod_l+0x498>
 80060b4:	68c3      	ldr	r3, [r0, #12]
 80060b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80060b8:	2300      	movs	r3, #0
 80060ba:	60c3      	str	r3, [r0, #12]
 80060bc:	4631      	mov	r1, r6
 80060be:	f001 ff8f 	bl	8007fe0 <__mcmp>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	da65      	bge.n	8006192 <_strtod_l+0x89a>
 80060c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060c8:	ea53 030a 	orrs.w	r3, r3, sl
 80060cc:	f040 8087 	bne.w	80061de <_strtod_l+0x8e6>
 80060d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f040 8082 	bne.w	80061de <_strtod_l+0x8e6>
 80060da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060de:	0d1b      	lsrs	r3, r3, #20
 80060e0:	051b      	lsls	r3, r3, #20
 80060e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80060e6:	d97a      	bls.n	80061de <_strtod_l+0x8e6>
 80060e8:	696b      	ldr	r3, [r5, #20]
 80060ea:	b913      	cbnz	r3, 80060f2 <_strtod_l+0x7fa>
 80060ec:	692b      	ldr	r3, [r5, #16]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	dd75      	ble.n	80061de <_strtod_l+0x8e6>
 80060f2:	4629      	mov	r1, r5
 80060f4:	2201      	movs	r2, #1
 80060f6:	4620      	mov	r0, r4
 80060f8:	f001 ff06 	bl	8007f08 <__lshift>
 80060fc:	4631      	mov	r1, r6
 80060fe:	4605      	mov	r5, r0
 8006100:	f001 ff6e 	bl	8007fe0 <__mcmp>
 8006104:	2800      	cmp	r0, #0
 8006106:	dd6a      	ble.n	80061de <_strtod_l+0x8e6>
 8006108:	9904      	ldr	r1, [sp, #16]
 800610a:	4a55      	ldr	r2, [pc, #340]	; (8006260 <_strtod_l+0x968>)
 800610c:	465b      	mov	r3, fp
 800610e:	2900      	cmp	r1, #0
 8006110:	f000 8085 	beq.w	800621e <_strtod_l+0x926>
 8006114:	ea02 010b 	and.w	r1, r2, fp
 8006118:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800611c:	dc7f      	bgt.n	800621e <_strtod_l+0x926>
 800611e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006122:	f77f aeaa 	ble.w	8005e7a <_strtod_l+0x582>
 8006126:	4a4f      	ldr	r2, [pc, #316]	; (8006264 <_strtod_l+0x96c>)
 8006128:	2300      	movs	r3, #0
 800612a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800612e:	4650      	mov	r0, sl
 8006130:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006134:	4659      	mov	r1, fp
 8006136:	f7fa fa7f 	bl	8000638 <__aeabi_dmul>
 800613a:	460b      	mov	r3, r1
 800613c:	4303      	orrs	r3, r0
 800613e:	bf08      	it	eq
 8006140:	2322      	moveq	r3, #34	; 0x22
 8006142:	4682      	mov	sl, r0
 8006144:	468b      	mov	fp, r1
 8006146:	bf08      	it	eq
 8006148:	6023      	streq	r3, [r4, #0]
 800614a:	e62b      	b.n	8005da4 <_strtod_l+0x4ac>
 800614c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	ea03 0a0a 	and.w	sl, r3, sl
 8006158:	e6de      	b.n	8005f18 <_strtod_l+0x620>
 800615a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800615e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006162:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006166:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800616a:	fa01 f308 	lsl.w	r3, r1, r8
 800616e:	930c      	str	r3, [sp, #48]	; 0x30
 8006170:	9111      	str	r1, [sp, #68]	; 0x44
 8006172:	e741      	b.n	8005ff8 <_strtod_l+0x700>
 8006174:	2300      	movs	r3, #0
 8006176:	930c      	str	r3, [sp, #48]	; 0x30
 8006178:	2301      	movs	r3, #1
 800617a:	9311      	str	r3, [sp, #68]	; 0x44
 800617c:	e73c      	b.n	8005ff8 <_strtod_l+0x700>
 800617e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006180:	4642      	mov	r2, r8
 8006182:	4620      	mov	r0, r4
 8006184:	f001 fec0 	bl	8007f08 <__lshift>
 8006188:	901e      	str	r0, [sp, #120]	; 0x78
 800618a:	2800      	cmp	r0, #0
 800618c:	f47f af66 	bne.w	800605c <_strtod_l+0x764>
 8006190:	e5fe      	b.n	8005d90 <_strtod_l+0x498>
 8006192:	465f      	mov	r7, fp
 8006194:	d16e      	bne.n	8006274 <_strtod_l+0x97c>
 8006196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006198:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800619c:	b342      	cbz	r2, 80061f0 <_strtod_l+0x8f8>
 800619e:	4a32      	ldr	r2, [pc, #200]	; (8006268 <_strtod_l+0x970>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d128      	bne.n	80061f6 <_strtod_l+0x8fe>
 80061a4:	9b04      	ldr	r3, [sp, #16]
 80061a6:	4650      	mov	r0, sl
 80061a8:	b1eb      	cbz	r3, 80061e6 <_strtod_l+0x8ee>
 80061aa:	4a2d      	ldr	r2, [pc, #180]	; (8006260 <_strtod_l+0x968>)
 80061ac:	403a      	ands	r2, r7
 80061ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80061b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80061b6:	d819      	bhi.n	80061ec <_strtod_l+0x8f4>
 80061b8:	0d12      	lsrs	r2, r2, #20
 80061ba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80061be:	fa01 f303 	lsl.w	r3, r1, r3
 80061c2:	4298      	cmp	r0, r3
 80061c4:	d117      	bne.n	80061f6 <_strtod_l+0x8fe>
 80061c6:	4b29      	ldr	r3, [pc, #164]	; (800626c <_strtod_l+0x974>)
 80061c8:	429f      	cmp	r7, r3
 80061ca:	d102      	bne.n	80061d2 <_strtod_l+0x8da>
 80061cc:	3001      	adds	r0, #1
 80061ce:	f43f addf 	beq.w	8005d90 <_strtod_l+0x498>
 80061d2:	4b23      	ldr	r3, [pc, #140]	; (8006260 <_strtod_l+0x968>)
 80061d4:	403b      	ands	r3, r7
 80061d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80061da:	f04f 0a00 	mov.w	sl, #0
 80061de:	9b04      	ldr	r3, [sp, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1a0      	bne.n	8006126 <_strtod_l+0x82e>
 80061e4:	e5de      	b.n	8005da4 <_strtod_l+0x4ac>
 80061e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ea:	e7ea      	b.n	80061c2 <_strtod_l+0x8ca>
 80061ec:	460b      	mov	r3, r1
 80061ee:	e7e8      	b.n	80061c2 <_strtod_l+0x8ca>
 80061f0:	ea53 030a 	orrs.w	r3, r3, sl
 80061f4:	d088      	beq.n	8006108 <_strtod_l+0x810>
 80061f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061f8:	b1db      	cbz	r3, 8006232 <_strtod_l+0x93a>
 80061fa:	423b      	tst	r3, r7
 80061fc:	d0ef      	beq.n	80061de <_strtod_l+0x8e6>
 80061fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006200:	9a04      	ldr	r2, [sp, #16]
 8006202:	4650      	mov	r0, sl
 8006204:	4659      	mov	r1, fp
 8006206:	b1c3      	cbz	r3, 800623a <_strtod_l+0x942>
 8006208:	f7ff fb58 	bl	80058bc <sulp>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006214:	f7fa f85a 	bl	80002cc <__adddf3>
 8006218:	4682      	mov	sl, r0
 800621a:	468b      	mov	fp, r1
 800621c:	e7df      	b.n	80061de <_strtod_l+0x8e6>
 800621e:	4013      	ands	r3, r2
 8006220:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006224:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006228:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800622c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006230:	e7d5      	b.n	80061de <_strtod_l+0x8e6>
 8006232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006234:	ea13 0f0a 	tst.w	r3, sl
 8006238:	e7e0      	b.n	80061fc <_strtod_l+0x904>
 800623a:	f7ff fb3f 	bl	80058bc <sulp>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006246:	f7fa f83f 	bl	80002c8 <__aeabi_dsub>
 800624a:	2200      	movs	r2, #0
 800624c:	2300      	movs	r3, #0
 800624e:	4682      	mov	sl, r0
 8006250:	468b      	mov	fp, r1
 8006252:	f7fa fc59 	bl	8000b08 <__aeabi_dcmpeq>
 8006256:	2800      	cmp	r0, #0
 8006258:	d0c1      	beq.n	80061de <_strtod_l+0x8e6>
 800625a:	e60e      	b.n	8005e7a <_strtod_l+0x582>
 800625c:	fffffc02 	.word	0xfffffc02
 8006260:	7ff00000 	.word	0x7ff00000
 8006264:	39500000 	.word	0x39500000
 8006268:	000fffff 	.word	0x000fffff
 800626c:	7fefffff 	.word	0x7fefffff
 8006270:	08009c60 	.word	0x08009c60
 8006274:	4631      	mov	r1, r6
 8006276:	4628      	mov	r0, r5
 8006278:	f002 f82e 	bl	80082d8 <__ratio>
 800627c:	ec59 8b10 	vmov	r8, r9, d0
 8006280:	ee10 0a10 	vmov	r0, s0
 8006284:	2200      	movs	r2, #0
 8006286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800628a:	4649      	mov	r1, r9
 800628c:	f7fa fc50 	bl	8000b30 <__aeabi_dcmple>
 8006290:	2800      	cmp	r0, #0
 8006292:	d07c      	beq.n	800638e <_strtod_l+0xa96>
 8006294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d04c      	beq.n	8006334 <_strtod_l+0xa3c>
 800629a:	4b95      	ldr	r3, [pc, #596]	; (80064f0 <_strtod_l+0xbf8>)
 800629c:	2200      	movs	r2, #0
 800629e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80062a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80064f0 <_strtod_l+0xbf8>
 80062a6:	f04f 0800 	mov.w	r8, #0
 80062aa:	4b92      	ldr	r3, [pc, #584]	; (80064f4 <_strtod_l+0xbfc>)
 80062ac:	403b      	ands	r3, r7
 80062ae:	9311      	str	r3, [sp, #68]	; 0x44
 80062b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80062b2:	4b91      	ldr	r3, [pc, #580]	; (80064f8 <_strtod_l+0xc00>)
 80062b4:	429a      	cmp	r2, r3
 80062b6:	f040 80b2 	bne.w	800641e <_strtod_l+0xb26>
 80062ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062c2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80062c6:	ec4b ab10 	vmov	d0, sl, fp
 80062ca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80062ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80062d2:	f001 ff29 	bl	8008128 <__ulp>
 80062d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062da:	ec53 2b10 	vmov	r2, r3, d0
 80062de:	f7fa f9ab 	bl	8000638 <__aeabi_dmul>
 80062e2:	4652      	mov	r2, sl
 80062e4:	465b      	mov	r3, fp
 80062e6:	f7f9 fff1 	bl	80002cc <__adddf3>
 80062ea:	460b      	mov	r3, r1
 80062ec:	4981      	ldr	r1, [pc, #516]	; (80064f4 <_strtod_l+0xbfc>)
 80062ee:	4a83      	ldr	r2, [pc, #524]	; (80064fc <_strtod_l+0xc04>)
 80062f0:	4019      	ands	r1, r3
 80062f2:	4291      	cmp	r1, r2
 80062f4:	4682      	mov	sl, r0
 80062f6:	d95e      	bls.n	80063b6 <_strtod_l+0xabe>
 80062f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80062fe:	4293      	cmp	r3, r2
 8006300:	d103      	bne.n	800630a <_strtod_l+0xa12>
 8006302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006304:	3301      	adds	r3, #1
 8006306:	f43f ad43 	beq.w	8005d90 <_strtod_l+0x498>
 800630a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006508 <_strtod_l+0xc10>
 800630e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006312:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006314:	4620      	mov	r0, r4
 8006316:	f001 fbdb 	bl	8007ad0 <_Bfree>
 800631a:	9907      	ldr	r1, [sp, #28]
 800631c:	4620      	mov	r0, r4
 800631e:	f001 fbd7 	bl	8007ad0 <_Bfree>
 8006322:	4631      	mov	r1, r6
 8006324:	4620      	mov	r0, r4
 8006326:	f001 fbd3 	bl	8007ad0 <_Bfree>
 800632a:	4629      	mov	r1, r5
 800632c:	4620      	mov	r0, r4
 800632e:	f001 fbcf 	bl	8007ad0 <_Bfree>
 8006332:	e613      	b.n	8005f5c <_strtod_l+0x664>
 8006334:	f1ba 0f00 	cmp.w	sl, #0
 8006338:	d11b      	bne.n	8006372 <_strtod_l+0xa7a>
 800633a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800633e:	b9f3      	cbnz	r3, 800637e <_strtod_l+0xa86>
 8006340:	4b6b      	ldr	r3, [pc, #428]	; (80064f0 <_strtod_l+0xbf8>)
 8006342:	2200      	movs	r2, #0
 8006344:	4640      	mov	r0, r8
 8006346:	4649      	mov	r1, r9
 8006348:	f7fa fbe8 	bl	8000b1c <__aeabi_dcmplt>
 800634c:	b9d0      	cbnz	r0, 8006384 <_strtod_l+0xa8c>
 800634e:	4640      	mov	r0, r8
 8006350:	4649      	mov	r1, r9
 8006352:	4b6b      	ldr	r3, [pc, #428]	; (8006500 <_strtod_l+0xc08>)
 8006354:	2200      	movs	r2, #0
 8006356:	f7fa f96f 	bl	8000638 <__aeabi_dmul>
 800635a:	4680      	mov	r8, r0
 800635c:	4689      	mov	r9, r1
 800635e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006362:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006366:	931b      	str	r3, [sp, #108]	; 0x6c
 8006368:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800636c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006370:	e79b      	b.n	80062aa <_strtod_l+0x9b2>
 8006372:	f1ba 0f01 	cmp.w	sl, #1
 8006376:	d102      	bne.n	800637e <_strtod_l+0xa86>
 8006378:	2f00      	cmp	r7, #0
 800637a:	f43f ad7e 	beq.w	8005e7a <_strtod_l+0x582>
 800637e:	4b61      	ldr	r3, [pc, #388]	; (8006504 <_strtod_l+0xc0c>)
 8006380:	2200      	movs	r2, #0
 8006382:	e78c      	b.n	800629e <_strtod_l+0x9a6>
 8006384:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006500 <_strtod_l+0xc08>
 8006388:	f04f 0800 	mov.w	r8, #0
 800638c:	e7e7      	b.n	800635e <_strtod_l+0xa66>
 800638e:	4b5c      	ldr	r3, [pc, #368]	; (8006500 <_strtod_l+0xc08>)
 8006390:	4640      	mov	r0, r8
 8006392:	4649      	mov	r1, r9
 8006394:	2200      	movs	r2, #0
 8006396:	f7fa f94f 	bl	8000638 <__aeabi_dmul>
 800639a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800639c:	4680      	mov	r8, r0
 800639e:	4689      	mov	r9, r1
 80063a0:	b933      	cbnz	r3, 80063b0 <_strtod_l+0xab8>
 80063a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063a6:	9012      	str	r0, [sp, #72]	; 0x48
 80063a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80063aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80063ae:	e7dd      	b.n	800636c <_strtod_l+0xa74>
 80063b0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80063b4:	e7f9      	b.n	80063aa <_strtod_l+0xab2>
 80063b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80063ba:	9b04      	ldr	r3, [sp, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1a8      	bne.n	8006312 <_strtod_l+0xa1a>
 80063c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80063c6:	0d1b      	lsrs	r3, r3, #20
 80063c8:	051b      	lsls	r3, r3, #20
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d1a1      	bne.n	8006312 <_strtod_l+0xa1a>
 80063ce:	4640      	mov	r0, r8
 80063d0:	4649      	mov	r1, r9
 80063d2:	f7fa fc91 	bl	8000cf8 <__aeabi_d2lz>
 80063d6:	f7fa f901 	bl	80005dc <__aeabi_l2d>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4640      	mov	r0, r8
 80063e0:	4649      	mov	r1, r9
 80063e2:	f7f9 ff71 	bl	80002c8 <__aeabi_dsub>
 80063e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063ec:	ea43 030a 	orr.w	r3, r3, sl
 80063f0:	4313      	orrs	r3, r2
 80063f2:	4680      	mov	r8, r0
 80063f4:	4689      	mov	r9, r1
 80063f6:	d053      	beq.n	80064a0 <_strtod_l+0xba8>
 80063f8:	a335      	add	r3, pc, #212	; (adr r3, 80064d0 <_strtod_l+0xbd8>)
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f7fa fb8d 	bl	8000b1c <__aeabi_dcmplt>
 8006402:	2800      	cmp	r0, #0
 8006404:	f47f acce 	bne.w	8005da4 <_strtod_l+0x4ac>
 8006408:	a333      	add	r3, pc, #204	; (adr r3, 80064d8 <_strtod_l+0xbe0>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	4640      	mov	r0, r8
 8006410:	4649      	mov	r1, r9
 8006412:	f7fa fba1 	bl	8000b58 <__aeabi_dcmpgt>
 8006416:	2800      	cmp	r0, #0
 8006418:	f43f af7b 	beq.w	8006312 <_strtod_l+0xa1a>
 800641c:	e4c2      	b.n	8005da4 <_strtod_l+0x4ac>
 800641e:	9b04      	ldr	r3, [sp, #16]
 8006420:	b333      	cbz	r3, 8006470 <_strtod_l+0xb78>
 8006422:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006424:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006428:	d822      	bhi.n	8006470 <_strtod_l+0xb78>
 800642a:	a32d      	add	r3, pc, #180	; (adr r3, 80064e0 <_strtod_l+0xbe8>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	4640      	mov	r0, r8
 8006432:	4649      	mov	r1, r9
 8006434:	f7fa fb7c 	bl	8000b30 <__aeabi_dcmple>
 8006438:	b1a0      	cbz	r0, 8006464 <_strtod_l+0xb6c>
 800643a:	4649      	mov	r1, r9
 800643c:	4640      	mov	r0, r8
 800643e:	f7fa fbd3 	bl	8000be8 <__aeabi_d2uiz>
 8006442:	2801      	cmp	r0, #1
 8006444:	bf38      	it	cc
 8006446:	2001      	movcc	r0, #1
 8006448:	f7fa f87c 	bl	8000544 <__aeabi_ui2d>
 800644c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800644e:	4680      	mov	r8, r0
 8006450:	4689      	mov	r9, r1
 8006452:	bb13      	cbnz	r3, 800649a <_strtod_l+0xba2>
 8006454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006458:	9014      	str	r0, [sp, #80]	; 0x50
 800645a:	9315      	str	r3, [sp, #84]	; 0x54
 800645c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006460:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006466:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006468:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800646c:	1a9b      	subs	r3, r3, r2
 800646e:	930d      	str	r3, [sp, #52]	; 0x34
 8006470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006474:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006478:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800647c:	f001 fe54 	bl	8008128 <__ulp>
 8006480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006484:	ec53 2b10 	vmov	r2, r3, d0
 8006488:	f7fa f8d6 	bl	8000638 <__aeabi_dmul>
 800648c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006490:	f7f9 ff1c 	bl	80002cc <__adddf3>
 8006494:	4682      	mov	sl, r0
 8006496:	468b      	mov	fp, r1
 8006498:	e78f      	b.n	80063ba <_strtod_l+0xac2>
 800649a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800649e:	e7dd      	b.n	800645c <_strtod_l+0xb64>
 80064a0:	a311      	add	r3, pc, #68	; (adr r3, 80064e8 <_strtod_l+0xbf0>)
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f7fa fb39 	bl	8000b1c <__aeabi_dcmplt>
 80064aa:	e7b4      	b.n	8006416 <_strtod_l+0xb1e>
 80064ac:	2300      	movs	r3, #0
 80064ae:	930e      	str	r3, [sp, #56]	; 0x38
 80064b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80064b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	f7ff ba65 	b.w	8005984 <_strtod_l+0x8c>
 80064ba:	2b65      	cmp	r3, #101	; 0x65
 80064bc:	f43f ab5d 	beq.w	8005b7a <_strtod_l+0x282>
 80064c0:	2b45      	cmp	r3, #69	; 0x45
 80064c2:	f43f ab5a 	beq.w	8005b7a <_strtod_l+0x282>
 80064c6:	2201      	movs	r2, #1
 80064c8:	f7ff bb92 	b.w	8005bf0 <_strtod_l+0x2f8>
 80064cc:	f3af 8000 	nop.w
 80064d0:	94a03595 	.word	0x94a03595
 80064d4:	3fdfffff 	.word	0x3fdfffff
 80064d8:	35afe535 	.word	0x35afe535
 80064dc:	3fe00000 	.word	0x3fe00000
 80064e0:	ffc00000 	.word	0xffc00000
 80064e4:	41dfffff 	.word	0x41dfffff
 80064e8:	94a03595 	.word	0x94a03595
 80064ec:	3fcfffff 	.word	0x3fcfffff
 80064f0:	3ff00000 	.word	0x3ff00000
 80064f4:	7ff00000 	.word	0x7ff00000
 80064f8:	7fe00000 	.word	0x7fe00000
 80064fc:	7c9fffff 	.word	0x7c9fffff
 8006500:	3fe00000 	.word	0x3fe00000
 8006504:	bff00000 	.word	0xbff00000
 8006508:	7fefffff 	.word	0x7fefffff

0800650c <_strtod_r>:
 800650c:	4b01      	ldr	r3, [pc, #4]	; (8006514 <_strtod_r+0x8>)
 800650e:	f7ff b9f3 	b.w	80058f8 <_strtod_l>
 8006512:	bf00      	nop
 8006514:	2000007c 	.word	0x2000007c

08006518 <_strtol_l.isra.0>:
 8006518:	2b01      	cmp	r3, #1
 800651a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800651e:	d001      	beq.n	8006524 <_strtol_l.isra.0+0xc>
 8006520:	2b24      	cmp	r3, #36	; 0x24
 8006522:	d906      	bls.n	8006532 <_strtol_l.isra.0+0x1a>
 8006524:	f7fe faf8 	bl	8004b18 <__errno>
 8006528:	2316      	movs	r3, #22
 800652a:	6003      	str	r3, [r0, #0]
 800652c:	2000      	movs	r0, #0
 800652e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006532:	4f3a      	ldr	r7, [pc, #232]	; (800661c <_strtol_l.isra.0+0x104>)
 8006534:	468e      	mov	lr, r1
 8006536:	4676      	mov	r6, lr
 8006538:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800653c:	5de5      	ldrb	r5, [r4, r7]
 800653e:	f015 0508 	ands.w	r5, r5, #8
 8006542:	d1f8      	bne.n	8006536 <_strtol_l.isra.0+0x1e>
 8006544:	2c2d      	cmp	r4, #45	; 0x2d
 8006546:	d134      	bne.n	80065b2 <_strtol_l.isra.0+0x9a>
 8006548:	f89e 4000 	ldrb.w	r4, [lr]
 800654c:	f04f 0801 	mov.w	r8, #1
 8006550:	f106 0e02 	add.w	lr, r6, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d05c      	beq.n	8006612 <_strtol_l.isra.0+0xfa>
 8006558:	2b10      	cmp	r3, #16
 800655a:	d10c      	bne.n	8006576 <_strtol_l.isra.0+0x5e>
 800655c:	2c30      	cmp	r4, #48	; 0x30
 800655e:	d10a      	bne.n	8006576 <_strtol_l.isra.0+0x5e>
 8006560:	f89e 4000 	ldrb.w	r4, [lr]
 8006564:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006568:	2c58      	cmp	r4, #88	; 0x58
 800656a:	d14d      	bne.n	8006608 <_strtol_l.isra.0+0xf0>
 800656c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006570:	2310      	movs	r3, #16
 8006572:	f10e 0e02 	add.w	lr, lr, #2
 8006576:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800657a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800657e:	2600      	movs	r6, #0
 8006580:	fbbc f9f3 	udiv	r9, ip, r3
 8006584:	4635      	mov	r5, r6
 8006586:	fb03 ca19 	mls	sl, r3, r9, ip
 800658a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800658e:	2f09      	cmp	r7, #9
 8006590:	d818      	bhi.n	80065c4 <_strtol_l.isra.0+0xac>
 8006592:	463c      	mov	r4, r7
 8006594:	42a3      	cmp	r3, r4
 8006596:	dd24      	ble.n	80065e2 <_strtol_l.isra.0+0xca>
 8006598:	2e00      	cmp	r6, #0
 800659a:	db1f      	blt.n	80065dc <_strtol_l.isra.0+0xc4>
 800659c:	45a9      	cmp	r9, r5
 800659e:	d31d      	bcc.n	80065dc <_strtol_l.isra.0+0xc4>
 80065a0:	d101      	bne.n	80065a6 <_strtol_l.isra.0+0x8e>
 80065a2:	45a2      	cmp	sl, r4
 80065a4:	db1a      	blt.n	80065dc <_strtol_l.isra.0+0xc4>
 80065a6:	fb05 4503 	mla	r5, r5, r3, r4
 80065aa:	2601      	movs	r6, #1
 80065ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80065b0:	e7eb      	b.n	800658a <_strtol_l.isra.0+0x72>
 80065b2:	2c2b      	cmp	r4, #43	; 0x2b
 80065b4:	bf08      	it	eq
 80065b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80065ba:	46a8      	mov	r8, r5
 80065bc:	bf08      	it	eq
 80065be:	f106 0e02 	addeq.w	lr, r6, #2
 80065c2:	e7c7      	b.n	8006554 <_strtol_l.isra.0+0x3c>
 80065c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80065c8:	2f19      	cmp	r7, #25
 80065ca:	d801      	bhi.n	80065d0 <_strtol_l.isra.0+0xb8>
 80065cc:	3c37      	subs	r4, #55	; 0x37
 80065ce:	e7e1      	b.n	8006594 <_strtol_l.isra.0+0x7c>
 80065d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80065d4:	2f19      	cmp	r7, #25
 80065d6:	d804      	bhi.n	80065e2 <_strtol_l.isra.0+0xca>
 80065d8:	3c57      	subs	r4, #87	; 0x57
 80065da:	e7db      	b.n	8006594 <_strtol_l.isra.0+0x7c>
 80065dc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80065e0:	e7e4      	b.n	80065ac <_strtol_l.isra.0+0x94>
 80065e2:	2e00      	cmp	r6, #0
 80065e4:	da05      	bge.n	80065f2 <_strtol_l.isra.0+0xda>
 80065e6:	2322      	movs	r3, #34	; 0x22
 80065e8:	6003      	str	r3, [r0, #0]
 80065ea:	4665      	mov	r5, ip
 80065ec:	b942      	cbnz	r2, 8006600 <_strtol_l.isra.0+0xe8>
 80065ee:	4628      	mov	r0, r5
 80065f0:	e79d      	b.n	800652e <_strtol_l.isra.0+0x16>
 80065f2:	f1b8 0f00 	cmp.w	r8, #0
 80065f6:	d000      	beq.n	80065fa <_strtol_l.isra.0+0xe2>
 80065f8:	426d      	negs	r5, r5
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	d0f7      	beq.n	80065ee <_strtol_l.isra.0+0xd6>
 80065fe:	b10e      	cbz	r6, 8006604 <_strtol_l.isra.0+0xec>
 8006600:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8006604:	6011      	str	r1, [r2, #0]
 8006606:	e7f2      	b.n	80065ee <_strtol_l.isra.0+0xd6>
 8006608:	2430      	movs	r4, #48	; 0x30
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1b3      	bne.n	8006576 <_strtol_l.isra.0+0x5e>
 800660e:	2308      	movs	r3, #8
 8006610:	e7b1      	b.n	8006576 <_strtol_l.isra.0+0x5e>
 8006612:	2c30      	cmp	r4, #48	; 0x30
 8006614:	d0a4      	beq.n	8006560 <_strtol_l.isra.0+0x48>
 8006616:	230a      	movs	r3, #10
 8006618:	e7ad      	b.n	8006576 <_strtol_l.isra.0+0x5e>
 800661a:	bf00      	nop
 800661c:	08009c89 	.word	0x08009c89

08006620 <_strtol_r>:
 8006620:	f7ff bf7a 	b.w	8006518 <_strtol_l.isra.0>

08006624 <quorem>:
 8006624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	6903      	ldr	r3, [r0, #16]
 800662a:	690c      	ldr	r4, [r1, #16]
 800662c:	42a3      	cmp	r3, r4
 800662e:	4607      	mov	r7, r0
 8006630:	f2c0 8081 	blt.w	8006736 <quorem+0x112>
 8006634:	3c01      	subs	r4, #1
 8006636:	f101 0814 	add.w	r8, r1, #20
 800663a:	f100 0514 	add.w	r5, r0, #20
 800663e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800664c:	3301      	adds	r3, #1
 800664e:	429a      	cmp	r2, r3
 8006650:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006654:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006658:	fbb2 f6f3 	udiv	r6, r2, r3
 800665c:	d331      	bcc.n	80066c2 <quorem+0x9e>
 800665e:	f04f 0e00 	mov.w	lr, #0
 8006662:	4640      	mov	r0, r8
 8006664:	46ac      	mov	ip, r5
 8006666:	46f2      	mov	sl, lr
 8006668:	f850 2b04 	ldr.w	r2, [r0], #4
 800666c:	b293      	uxth	r3, r2
 800666e:	fb06 e303 	mla	r3, r6, r3, lr
 8006672:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006676:	b29b      	uxth	r3, r3
 8006678:	ebaa 0303 	sub.w	r3, sl, r3
 800667c:	0c12      	lsrs	r2, r2, #16
 800667e:	f8dc a000 	ldr.w	sl, [ip]
 8006682:	fb06 e202 	mla	r2, r6, r2, lr
 8006686:	fa13 f38a 	uxtah	r3, r3, sl
 800668a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800668e:	fa1f fa82 	uxth.w	sl, r2
 8006692:	f8dc 2000 	ldr.w	r2, [ip]
 8006696:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800669a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800669e:	b29b      	uxth	r3, r3
 80066a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066a4:	4581      	cmp	r9, r0
 80066a6:	f84c 3b04 	str.w	r3, [ip], #4
 80066aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066ae:	d2db      	bcs.n	8006668 <quorem+0x44>
 80066b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80066b4:	b92b      	cbnz	r3, 80066c2 <quorem+0x9e>
 80066b6:	9b01      	ldr	r3, [sp, #4]
 80066b8:	3b04      	subs	r3, #4
 80066ba:	429d      	cmp	r5, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	d32e      	bcc.n	800671e <quorem+0xfa>
 80066c0:	613c      	str	r4, [r7, #16]
 80066c2:	4638      	mov	r0, r7
 80066c4:	f001 fc8c 	bl	8007fe0 <__mcmp>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	db24      	blt.n	8006716 <quorem+0xf2>
 80066cc:	3601      	adds	r6, #1
 80066ce:	4628      	mov	r0, r5
 80066d0:	f04f 0c00 	mov.w	ip, #0
 80066d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80066d8:	f8d0 e000 	ldr.w	lr, [r0]
 80066dc:	b293      	uxth	r3, r2
 80066de:	ebac 0303 	sub.w	r3, ip, r3
 80066e2:	0c12      	lsrs	r2, r2, #16
 80066e4:	fa13 f38e 	uxtah	r3, r3, lr
 80066e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80066ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066f6:	45c1      	cmp	r9, r8
 80066f8:	f840 3b04 	str.w	r3, [r0], #4
 80066fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006700:	d2e8      	bcs.n	80066d4 <quorem+0xb0>
 8006702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800670a:	b922      	cbnz	r2, 8006716 <quorem+0xf2>
 800670c:	3b04      	subs	r3, #4
 800670e:	429d      	cmp	r5, r3
 8006710:	461a      	mov	r2, r3
 8006712:	d30a      	bcc.n	800672a <quorem+0x106>
 8006714:	613c      	str	r4, [r7, #16]
 8006716:	4630      	mov	r0, r6
 8006718:	b003      	add	sp, #12
 800671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	3b04      	subs	r3, #4
 8006722:	2a00      	cmp	r2, #0
 8006724:	d1cc      	bne.n	80066c0 <quorem+0x9c>
 8006726:	3c01      	subs	r4, #1
 8006728:	e7c7      	b.n	80066ba <quorem+0x96>
 800672a:	6812      	ldr	r2, [r2, #0]
 800672c:	3b04      	subs	r3, #4
 800672e:	2a00      	cmp	r2, #0
 8006730:	d1f0      	bne.n	8006714 <quorem+0xf0>
 8006732:	3c01      	subs	r4, #1
 8006734:	e7eb      	b.n	800670e <quorem+0xea>
 8006736:	2000      	movs	r0, #0
 8006738:	e7ee      	b.n	8006718 <quorem+0xf4>
 800673a:	0000      	movs	r0, r0
 800673c:	0000      	movs	r0, r0
	...

08006740 <_dtoa_r>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	ed2d 8b02 	vpush	{d8}
 8006748:	ec57 6b10 	vmov	r6, r7, d0
 800674c:	b095      	sub	sp, #84	; 0x54
 800674e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006750:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006754:	9105      	str	r1, [sp, #20]
 8006756:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800675a:	4604      	mov	r4, r0
 800675c:	9209      	str	r2, [sp, #36]	; 0x24
 800675e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006760:	b975      	cbnz	r5, 8006780 <_dtoa_r+0x40>
 8006762:	2010      	movs	r0, #16
 8006764:	f001 f94c 	bl	8007a00 <malloc>
 8006768:	4602      	mov	r2, r0
 800676a:	6260      	str	r0, [r4, #36]	; 0x24
 800676c:	b920      	cbnz	r0, 8006778 <_dtoa_r+0x38>
 800676e:	4bb2      	ldr	r3, [pc, #712]	; (8006a38 <_dtoa_r+0x2f8>)
 8006770:	21ea      	movs	r1, #234	; 0xea
 8006772:	48b2      	ldr	r0, [pc, #712]	; (8006a3c <_dtoa_r+0x2fc>)
 8006774:	f002 f874 	bl	8008860 <__assert_func>
 8006778:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800677c:	6005      	str	r5, [r0, #0]
 800677e:	60c5      	str	r5, [r0, #12]
 8006780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006782:	6819      	ldr	r1, [r3, #0]
 8006784:	b151      	cbz	r1, 800679c <_dtoa_r+0x5c>
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	604a      	str	r2, [r1, #4]
 800678a:	2301      	movs	r3, #1
 800678c:	4093      	lsls	r3, r2
 800678e:	608b      	str	r3, [r1, #8]
 8006790:	4620      	mov	r0, r4
 8006792:	f001 f99d 	bl	8007ad0 <_Bfree>
 8006796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	1e3b      	subs	r3, r7, #0
 800679e:	bfb9      	ittee	lt
 80067a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80067a4:	9303      	strlt	r3, [sp, #12]
 80067a6:	2300      	movge	r3, #0
 80067a8:	f8c8 3000 	strge.w	r3, [r8]
 80067ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80067b0:	4ba3      	ldr	r3, [pc, #652]	; (8006a40 <_dtoa_r+0x300>)
 80067b2:	bfbc      	itt	lt
 80067b4:	2201      	movlt	r2, #1
 80067b6:	f8c8 2000 	strlt.w	r2, [r8]
 80067ba:	ea33 0309 	bics.w	r3, r3, r9
 80067be:	d11b      	bne.n	80067f8 <_dtoa_r+0xb8>
 80067c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067cc:	4333      	orrs	r3, r6
 80067ce:	f000 857a 	beq.w	80072c6 <_dtoa_r+0xb86>
 80067d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067d4:	b963      	cbnz	r3, 80067f0 <_dtoa_r+0xb0>
 80067d6:	4b9b      	ldr	r3, [pc, #620]	; (8006a44 <_dtoa_r+0x304>)
 80067d8:	e024      	b.n	8006824 <_dtoa_r+0xe4>
 80067da:	4b9b      	ldr	r3, [pc, #620]	; (8006a48 <_dtoa_r+0x308>)
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	9800      	ldr	r0, [sp, #0]
 80067e6:	b015      	add	sp, #84	; 0x54
 80067e8:	ecbd 8b02 	vpop	{d8}
 80067ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f0:	4b94      	ldr	r3, [pc, #592]	; (8006a44 <_dtoa_r+0x304>)
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	3303      	adds	r3, #3
 80067f6:	e7f3      	b.n	80067e0 <_dtoa_r+0xa0>
 80067f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	ec51 0b17 	vmov	r0, r1, d7
 8006802:	2300      	movs	r3, #0
 8006804:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006808:	f7fa f97e 	bl	8000b08 <__aeabi_dcmpeq>
 800680c:	4680      	mov	r8, r0
 800680e:	b158      	cbz	r0, 8006828 <_dtoa_r+0xe8>
 8006810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006812:	2301      	movs	r3, #1
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 8551 	beq.w	80072c0 <_dtoa_r+0xb80>
 800681e:	488b      	ldr	r0, [pc, #556]	; (8006a4c <_dtoa_r+0x30c>)
 8006820:	6018      	str	r0, [r3, #0]
 8006822:	1e43      	subs	r3, r0, #1
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	e7dd      	b.n	80067e4 <_dtoa_r+0xa4>
 8006828:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800682c:	aa12      	add	r2, sp, #72	; 0x48
 800682e:	a913      	add	r1, sp, #76	; 0x4c
 8006830:	4620      	mov	r0, r4
 8006832:	f001 fcf5 	bl	8008220 <__d2b>
 8006836:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800683a:	4683      	mov	fp, r0
 800683c:	2d00      	cmp	r5, #0
 800683e:	d07c      	beq.n	800693a <_dtoa_r+0x1fa>
 8006840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006842:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800684a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800684e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006852:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800685a:	4b7d      	ldr	r3, [pc, #500]	; (8006a50 <_dtoa_r+0x310>)
 800685c:	2200      	movs	r2, #0
 800685e:	4630      	mov	r0, r6
 8006860:	4639      	mov	r1, r7
 8006862:	f7f9 fd31 	bl	80002c8 <__aeabi_dsub>
 8006866:	a36e      	add	r3, pc, #440	; (adr r3, 8006a20 <_dtoa_r+0x2e0>)
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	f7f9 fee4 	bl	8000638 <__aeabi_dmul>
 8006870:	a36d      	add	r3, pc, #436	; (adr r3, 8006a28 <_dtoa_r+0x2e8>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f7f9 fd29 	bl	80002cc <__adddf3>
 800687a:	4606      	mov	r6, r0
 800687c:	4628      	mov	r0, r5
 800687e:	460f      	mov	r7, r1
 8006880:	f7f9 fe70 	bl	8000564 <__aeabi_i2d>
 8006884:	a36a      	add	r3, pc, #424	; (adr r3, 8006a30 <_dtoa_r+0x2f0>)
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f7f9 fed5 	bl	8000638 <__aeabi_dmul>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4630      	mov	r0, r6
 8006894:	4639      	mov	r1, r7
 8006896:	f7f9 fd19 	bl	80002cc <__adddf3>
 800689a:	4606      	mov	r6, r0
 800689c:	460f      	mov	r7, r1
 800689e:	f7fa f97b 	bl	8000b98 <__aeabi_d2iz>
 80068a2:	2200      	movs	r2, #0
 80068a4:	4682      	mov	sl, r0
 80068a6:	2300      	movs	r3, #0
 80068a8:	4630      	mov	r0, r6
 80068aa:	4639      	mov	r1, r7
 80068ac:	f7fa f936 	bl	8000b1c <__aeabi_dcmplt>
 80068b0:	b148      	cbz	r0, 80068c6 <_dtoa_r+0x186>
 80068b2:	4650      	mov	r0, sl
 80068b4:	f7f9 fe56 	bl	8000564 <__aeabi_i2d>
 80068b8:	4632      	mov	r2, r6
 80068ba:	463b      	mov	r3, r7
 80068bc:	f7fa f924 	bl	8000b08 <__aeabi_dcmpeq>
 80068c0:	b908      	cbnz	r0, 80068c6 <_dtoa_r+0x186>
 80068c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80068c6:	f1ba 0f16 	cmp.w	sl, #22
 80068ca:	d854      	bhi.n	8006976 <_dtoa_r+0x236>
 80068cc:	4b61      	ldr	r3, [pc, #388]	; (8006a54 <_dtoa_r+0x314>)
 80068ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80068d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068da:	f7fa f91f 	bl	8000b1c <__aeabi_dcmplt>
 80068de:	2800      	cmp	r0, #0
 80068e0:	d04b      	beq.n	800697a <_dtoa_r+0x23a>
 80068e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80068e6:	2300      	movs	r3, #0
 80068e8:	930e      	str	r3, [sp, #56]	; 0x38
 80068ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068ec:	1b5d      	subs	r5, r3, r5
 80068ee:	1e6b      	subs	r3, r5, #1
 80068f0:	9304      	str	r3, [sp, #16]
 80068f2:	bf43      	ittte	mi
 80068f4:	2300      	movmi	r3, #0
 80068f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80068fa:	9304      	strmi	r3, [sp, #16]
 80068fc:	f04f 0800 	movpl.w	r8, #0
 8006900:	f1ba 0f00 	cmp.w	sl, #0
 8006904:	db3b      	blt.n	800697e <_dtoa_r+0x23e>
 8006906:	9b04      	ldr	r3, [sp, #16]
 8006908:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800690c:	4453      	add	r3, sl
 800690e:	9304      	str	r3, [sp, #16]
 8006910:	2300      	movs	r3, #0
 8006912:	9306      	str	r3, [sp, #24]
 8006914:	9b05      	ldr	r3, [sp, #20]
 8006916:	2b09      	cmp	r3, #9
 8006918:	d869      	bhi.n	80069ee <_dtoa_r+0x2ae>
 800691a:	2b05      	cmp	r3, #5
 800691c:	bfc4      	itt	gt
 800691e:	3b04      	subgt	r3, #4
 8006920:	9305      	strgt	r3, [sp, #20]
 8006922:	9b05      	ldr	r3, [sp, #20]
 8006924:	f1a3 0302 	sub.w	r3, r3, #2
 8006928:	bfcc      	ite	gt
 800692a:	2500      	movgt	r5, #0
 800692c:	2501      	movle	r5, #1
 800692e:	2b03      	cmp	r3, #3
 8006930:	d869      	bhi.n	8006a06 <_dtoa_r+0x2c6>
 8006932:	e8df f003 	tbb	[pc, r3]
 8006936:	4e2c      	.short	0x4e2c
 8006938:	5a4c      	.short	0x5a4c
 800693a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800693e:	441d      	add	r5, r3
 8006940:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006944:	2b20      	cmp	r3, #32
 8006946:	bfc1      	itttt	gt
 8006948:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800694c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006950:	fa09 f303 	lslgt.w	r3, r9, r3
 8006954:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006958:	bfda      	itte	le
 800695a:	f1c3 0320 	rsble	r3, r3, #32
 800695e:	fa06 f003 	lslle.w	r0, r6, r3
 8006962:	4318      	orrgt	r0, r3
 8006964:	f7f9 fdee 	bl	8000544 <__aeabi_ui2d>
 8006968:	2301      	movs	r3, #1
 800696a:	4606      	mov	r6, r0
 800696c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006970:	3d01      	subs	r5, #1
 8006972:	9310      	str	r3, [sp, #64]	; 0x40
 8006974:	e771      	b.n	800685a <_dtoa_r+0x11a>
 8006976:	2301      	movs	r3, #1
 8006978:	e7b6      	b.n	80068e8 <_dtoa_r+0x1a8>
 800697a:	900e      	str	r0, [sp, #56]	; 0x38
 800697c:	e7b5      	b.n	80068ea <_dtoa_r+0x1aa>
 800697e:	f1ca 0300 	rsb	r3, sl, #0
 8006982:	9306      	str	r3, [sp, #24]
 8006984:	2300      	movs	r3, #0
 8006986:	eba8 080a 	sub.w	r8, r8, sl
 800698a:	930d      	str	r3, [sp, #52]	; 0x34
 800698c:	e7c2      	b.n	8006914 <_dtoa_r+0x1d4>
 800698e:	2300      	movs	r3, #0
 8006990:	9308      	str	r3, [sp, #32]
 8006992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006994:	2b00      	cmp	r3, #0
 8006996:	dc39      	bgt.n	8006a0c <_dtoa_r+0x2cc>
 8006998:	f04f 0901 	mov.w	r9, #1
 800699c:	f8cd 9004 	str.w	r9, [sp, #4]
 80069a0:	464b      	mov	r3, r9
 80069a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80069a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80069a8:	2200      	movs	r2, #0
 80069aa:	6042      	str	r2, [r0, #4]
 80069ac:	2204      	movs	r2, #4
 80069ae:	f102 0614 	add.w	r6, r2, #20
 80069b2:	429e      	cmp	r6, r3
 80069b4:	6841      	ldr	r1, [r0, #4]
 80069b6:	d92f      	bls.n	8006a18 <_dtoa_r+0x2d8>
 80069b8:	4620      	mov	r0, r4
 80069ba:	f001 f849 	bl	8007a50 <_Balloc>
 80069be:	9000      	str	r0, [sp, #0]
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d14b      	bne.n	8006a5c <_dtoa_r+0x31c>
 80069c4:	4b24      	ldr	r3, [pc, #144]	; (8006a58 <_dtoa_r+0x318>)
 80069c6:	4602      	mov	r2, r0
 80069c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80069cc:	e6d1      	b.n	8006772 <_dtoa_r+0x32>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e7de      	b.n	8006990 <_dtoa_r+0x250>
 80069d2:	2300      	movs	r3, #0
 80069d4:	9308      	str	r3, [sp, #32]
 80069d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d8:	eb0a 0903 	add.w	r9, sl, r3
 80069dc:	f109 0301 	add.w	r3, r9, #1
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	bfb8      	it	lt
 80069e6:	2301      	movlt	r3, #1
 80069e8:	e7dd      	b.n	80069a6 <_dtoa_r+0x266>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e7f2      	b.n	80069d4 <_dtoa_r+0x294>
 80069ee:	2501      	movs	r5, #1
 80069f0:	2300      	movs	r3, #0
 80069f2:	9305      	str	r3, [sp, #20]
 80069f4:	9508      	str	r5, [sp, #32]
 80069f6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a00:	2312      	movs	r3, #18
 8006a02:	9209      	str	r2, [sp, #36]	; 0x24
 8006a04:	e7cf      	b.n	80069a6 <_dtoa_r+0x266>
 8006a06:	2301      	movs	r3, #1
 8006a08:	9308      	str	r3, [sp, #32]
 8006a0a:	e7f4      	b.n	80069f6 <_dtoa_r+0x2b6>
 8006a0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006a10:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a14:	464b      	mov	r3, r9
 8006a16:	e7c6      	b.n	80069a6 <_dtoa_r+0x266>
 8006a18:	3101      	adds	r1, #1
 8006a1a:	6041      	str	r1, [r0, #4]
 8006a1c:	0052      	lsls	r2, r2, #1
 8006a1e:	e7c6      	b.n	80069ae <_dtoa_r+0x26e>
 8006a20:	636f4361 	.word	0x636f4361
 8006a24:	3fd287a7 	.word	0x3fd287a7
 8006a28:	8b60c8b3 	.word	0x8b60c8b3
 8006a2c:	3fc68a28 	.word	0x3fc68a28
 8006a30:	509f79fb 	.word	0x509f79fb
 8006a34:	3fd34413 	.word	0x3fd34413
 8006a38:	08009d96 	.word	0x08009d96
 8006a3c:	08009dad 	.word	0x08009dad
 8006a40:	7ff00000 	.word	0x7ff00000
 8006a44:	08009d92 	.word	0x08009d92
 8006a48:	08009d89 	.word	0x08009d89
 8006a4c:	08009c0d 	.word	0x08009c0d
 8006a50:	3ff80000 	.word	0x3ff80000
 8006a54:	08009f28 	.word	0x08009f28
 8006a58:	08009e0c 	.word	0x08009e0c
 8006a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a5e:	9a00      	ldr	r2, [sp, #0]
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	9b01      	ldr	r3, [sp, #4]
 8006a64:	2b0e      	cmp	r3, #14
 8006a66:	f200 80ad 	bhi.w	8006bc4 <_dtoa_r+0x484>
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	f000 80aa 	beq.w	8006bc4 <_dtoa_r+0x484>
 8006a70:	f1ba 0f00 	cmp.w	sl, #0
 8006a74:	dd36      	ble.n	8006ae4 <_dtoa_r+0x3a4>
 8006a76:	4ac3      	ldr	r2, [pc, #780]	; (8006d84 <_dtoa_r+0x644>)
 8006a78:	f00a 030f 	and.w	r3, sl, #15
 8006a7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a80:	ed93 7b00 	vldr	d7, [r3]
 8006a84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006a88:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006a8c:	eeb0 8a47 	vmov.f32	s16, s14
 8006a90:	eef0 8a67 	vmov.f32	s17, s15
 8006a94:	d016      	beq.n	8006ac4 <_dtoa_r+0x384>
 8006a96:	4bbc      	ldr	r3, [pc, #752]	; (8006d88 <_dtoa_r+0x648>)
 8006a98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006aa0:	f7f9 fef4 	bl	800088c <__aeabi_ddiv>
 8006aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aa8:	f007 070f 	and.w	r7, r7, #15
 8006aac:	2503      	movs	r5, #3
 8006aae:	4eb6      	ldr	r6, [pc, #728]	; (8006d88 <_dtoa_r+0x648>)
 8006ab0:	b957      	cbnz	r7, 8006ac8 <_dtoa_r+0x388>
 8006ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ab6:	ec53 2b18 	vmov	r2, r3, d8
 8006aba:	f7f9 fee7 	bl	800088c <__aeabi_ddiv>
 8006abe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ac2:	e029      	b.n	8006b18 <_dtoa_r+0x3d8>
 8006ac4:	2502      	movs	r5, #2
 8006ac6:	e7f2      	b.n	8006aae <_dtoa_r+0x36e>
 8006ac8:	07f9      	lsls	r1, r7, #31
 8006aca:	d508      	bpl.n	8006ade <_dtoa_r+0x39e>
 8006acc:	ec51 0b18 	vmov	r0, r1, d8
 8006ad0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ad4:	f7f9 fdb0 	bl	8000638 <__aeabi_dmul>
 8006ad8:	ec41 0b18 	vmov	d8, r0, r1
 8006adc:	3501      	adds	r5, #1
 8006ade:	107f      	asrs	r7, r7, #1
 8006ae0:	3608      	adds	r6, #8
 8006ae2:	e7e5      	b.n	8006ab0 <_dtoa_r+0x370>
 8006ae4:	f000 80a6 	beq.w	8006c34 <_dtoa_r+0x4f4>
 8006ae8:	f1ca 0600 	rsb	r6, sl, #0
 8006aec:	4ba5      	ldr	r3, [pc, #660]	; (8006d84 <_dtoa_r+0x644>)
 8006aee:	4fa6      	ldr	r7, [pc, #664]	; (8006d88 <_dtoa_r+0x648>)
 8006af0:	f006 020f 	and.w	r2, r6, #15
 8006af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b00:	f7f9 fd9a 	bl	8000638 <__aeabi_dmul>
 8006b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b08:	1136      	asrs	r6, r6, #4
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2502      	movs	r5, #2
 8006b0e:	2e00      	cmp	r6, #0
 8006b10:	f040 8085 	bne.w	8006c1e <_dtoa_r+0x4de>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1d2      	bne.n	8006abe <_dtoa_r+0x37e>
 8006b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 808c 	beq.w	8006c38 <_dtoa_r+0x4f8>
 8006b20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b24:	4b99      	ldr	r3, [pc, #612]	; (8006d8c <_dtoa_r+0x64c>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f7f9 fff6 	bl	8000b1c <__aeabi_dcmplt>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f000 8081 	beq.w	8006c38 <_dtoa_r+0x4f8>
 8006b36:	9b01      	ldr	r3, [sp, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d07d      	beq.n	8006c38 <_dtoa_r+0x4f8>
 8006b3c:	f1b9 0f00 	cmp.w	r9, #0
 8006b40:	dd3c      	ble.n	8006bbc <_dtoa_r+0x47c>
 8006b42:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006b46:	9307      	str	r3, [sp, #28]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4b91      	ldr	r3, [pc, #580]	; (8006d90 <_dtoa_r+0x650>)
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	4639      	mov	r1, r7
 8006b50:	f7f9 fd72 	bl	8000638 <__aeabi_dmul>
 8006b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b58:	3501      	adds	r5, #1
 8006b5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006b5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b62:	4628      	mov	r0, r5
 8006b64:	f7f9 fcfe 	bl	8000564 <__aeabi_i2d>
 8006b68:	4632      	mov	r2, r6
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	f7f9 fd64 	bl	8000638 <__aeabi_dmul>
 8006b70:	4b88      	ldr	r3, [pc, #544]	; (8006d94 <_dtoa_r+0x654>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	f7f9 fbaa 	bl	80002cc <__adddf3>
 8006b78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d15c      	bne.n	8006c42 <_dtoa_r+0x502>
 8006b88:	4b83      	ldr	r3, [pc, #524]	; (8006d98 <_dtoa_r+0x658>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	4639      	mov	r1, r7
 8006b90:	f7f9 fb9a 	bl	80002c8 <__aeabi_dsub>
 8006b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b98:	4606      	mov	r6, r0
 8006b9a:	460f      	mov	r7, r1
 8006b9c:	f7f9 ffdc 	bl	8000b58 <__aeabi_dcmpgt>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	f040 8296 	bne.w	80070d2 <_dtoa_r+0x992>
 8006ba6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006baa:	4630      	mov	r0, r6
 8006bac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bb0:	4639      	mov	r1, r7
 8006bb2:	f7f9 ffb3 	bl	8000b1c <__aeabi_dcmplt>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	f040 8288 	bne.w	80070cc <_dtoa_r+0x98c>
 8006bbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006bc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006bc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f2c0 8158 	blt.w	8006e7c <_dtoa_r+0x73c>
 8006bcc:	f1ba 0f0e 	cmp.w	sl, #14
 8006bd0:	f300 8154 	bgt.w	8006e7c <_dtoa_r+0x73c>
 8006bd4:	4b6b      	ldr	r3, [pc, #428]	; (8006d84 <_dtoa_r+0x644>)
 8006bd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006bda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f280 80e3 	bge.w	8006dac <_dtoa_r+0x66c>
 8006be6:	9b01      	ldr	r3, [sp, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f300 80df 	bgt.w	8006dac <_dtoa_r+0x66c>
 8006bee:	f040 826d 	bne.w	80070cc <_dtoa_r+0x98c>
 8006bf2:	4b69      	ldr	r3, [pc, #420]	; (8006d98 <_dtoa_r+0x658>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	4649      	mov	r1, r9
 8006bfa:	f7f9 fd1d 	bl	8000638 <__aeabi_dmul>
 8006bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c02:	f7f9 ff9f 	bl	8000b44 <__aeabi_dcmpge>
 8006c06:	9e01      	ldr	r6, [sp, #4]
 8006c08:	4637      	mov	r7, r6
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	f040 8243 	bne.w	8007096 <_dtoa_r+0x956>
 8006c10:	9d00      	ldr	r5, [sp, #0]
 8006c12:	2331      	movs	r3, #49	; 0x31
 8006c14:	f805 3b01 	strb.w	r3, [r5], #1
 8006c18:	f10a 0a01 	add.w	sl, sl, #1
 8006c1c:	e23f      	b.n	800709e <_dtoa_r+0x95e>
 8006c1e:	07f2      	lsls	r2, r6, #31
 8006c20:	d505      	bpl.n	8006c2e <_dtoa_r+0x4ee>
 8006c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c26:	f7f9 fd07 	bl	8000638 <__aeabi_dmul>
 8006c2a:	3501      	adds	r5, #1
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	1076      	asrs	r6, r6, #1
 8006c30:	3708      	adds	r7, #8
 8006c32:	e76c      	b.n	8006b0e <_dtoa_r+0x3ce>
 8006c34:	2502      	movs	r5, #2
 8006c36:	e76f      	b.n	8006b18 <_dtoa_r+0x3d8>
 8006c38:	9b01      	ldr	r3, [sp, #4]
 8006c3a:	f8cd a01c 	str.w	sl, [sp, #28]
 8006c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8006c40:	e78d      	b.n	8006b5e <_dtoa_r+0x41e>
 8006c42:	9900      	ldr	r1, [sp, #0]
 8006c44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c48:	4b4e      	ldr	r3, [pc, #312]	; (8006d84 <_dtoa_r+0x644>)
 8006c4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c4e:	4401      	add	r1, r0
 8006c50:	9102      	str	r1, [sp, #8]
 8006c52:	9908      	ldr	r1, [sp, #32]
 8006c54:	eeb0 8a47 	vmov.f32	s16, s14
 8006c58:	eef0 8a67 	vmov.f32	s17, s15
 8006c5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c64:	2900      	cmp	r1, #0
 8006c66:	d045      	beq.n	8006cf4 <_dtoa_r+0x5b4>
 8006c68:	494c      	ldr	r1, [pc, #304]	; (8006d9c <_dtoa_r+0x65c>)
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	f7f9 fe0e 	bl	800088c <__aeabi_ddiv>
 8006c70:	ec53 2b18 	vmov	r2, r3, d8
 8006c74:	f7f9 fb28 	bl	80002c8 <__aeabi_dsub>
 8006c78:	9d00      	ldr	r5, [sp, #0]
 8006c7a:	ec41 0b18 	vmov	d8, r0, r1
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7f9 ff89 	bl	8000b98 <__aeabi_d2iz>
 8006c86:	900c      	str	r0, [sp, #48]	; 0x30
 8006c88:	f7f9 fc6c 	bl	8000564 <__aeabi_i2d>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4630      	mov	r0, r6
 8006c92:	4639      	mov	r1, r7
 8006c94:	f7f9 fb18 	bl	80002c8 <__aeabi_dsub>
 8006c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c9a:	3330      	adds	r3, #48	; 0x30
 8006c9c:	f805 3b01 	strb.w	r3, [r5], #1
 8006ca0:	ec53 2b18 	vmov	r2, r3, d8
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	460f      	mov	r7, r1
 8006ca8:	f7f9 ff38 	bl	8000b1c <__aeabi_dcmplt>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d165      	bne.n	8006d7c <_dtoa_r+0x63c>
 8006cb0:	4632      	mov	r2, r6
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	4935      	ldr	r1, [pc, #212]	; (8006d8c <_dtoa_r+0x64c>)
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	f7f9 fb06 	bl	80002c8 <__aeabi_dsub>
 8006cbc:	ec53 2b18 	vmov	r2, r3, d8
 8006cc0:	f7f9 ff2c 	bl	8000b1c <__aeabi_dcmplt>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	f040 80b9 	bne.w	8006e3c <_dtoa_r+0x6fc>
 8006cca:	9b02      	ldr	r3, [sp, #8]
 8006ccc:	429d      	cmp	r5, r3
 8006cce:	f43f af75 	beq.w	8006bbc <_dtoa_r+0x47c>
 8006cd2:	4b2f      	ldr	r3, [pc, #188]	; (8006d90 <_dtoa_r+0x650>)
 8006cd4:	ec51 0b18 	vmov	r0, r1, d8
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f7f9 fcad 	bl	8000638 <__aeabi_dmul>
 8006cde:	4b2c      	ldr	r3, [pc, #176]	; (8006d90 <_dtoa_r+0x650>)
 8006ce0:	ec41 0b18 	vmov	d8, r0, r1
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	4639      	mov	r1, r7
 8006cea:	f7f9 fca5 	bl	8000638 <__aeabi_dmul>
 8006cee:	4606      	mov	r6, r0
 8006cf0:	460f      	mov	r7, r1
 8006cf2:	e7c4      	b.n	8006c7e <_dtoa_r+0x53e>
 8006cf4:	ec51 0b17 	vmov	r0, r1, d7
 8006cf8:	f7f9 fc9e 	bl	8000638 <__aeabi_dmul>
 8006cfc:	9b02      	ldr	r3, [sp, #8]
 8006cfe:	9d00      	ldr	r5, [sp, #0]
 8006d00:	930c      	str	r3, [sp, #48]	; 0x30
 8006d02:	ec41 0b18 	vmov	d8, r0, r1
 8006d06:	4639      	mov	r1, r7
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7f9 ff45 	bl	8000b98 <__aeabi_d2iz>
 8006d0e:	9011      	str	r0, [sp, #68]	; 0x44
 8006d10:	f7f9 fc28 	bl	8000564 <__aeabi_i2d>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4630      	mov	r0, r6
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	f7f9 fad4 	bl	80002c8 <__aeabi_dsub>
 8006d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d22:	3330      	adds	r3, #48	; 0x30
 8006d24:	f805 3b01 	strb.w	r3, [r5], #1
 8006d28:	9b02      	ldr	r3, [sp, #8]
 8006d2a:	429d      	cmp	r5, r3
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	460f      	mov	r7, r1
 8006d30:	f04f 0200 	mov.w	r2, #0
 8006d34:	d134      	bne.n	8006da0 <_dtoa_r+0x660>
 8006d36:	4b19      	ldr	r3, [pc, #100]	; (8006d9c <_dtoa_r+0x65c>)
 8006d38:	ec51 0b18 	vmov	r0, r1, d8
 8006d3c:	f7f9 fac6 	bl	80002cc <__adddf3>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4630      	mov	r0, r6
 8006d46:	4639      	mov	r1, r7
 8006d48:	f7f9 ff06 	bl	8000b58 <__aeabi_dcmpgt>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d175      	bne.n	8006e3c <_dtoa_r+0x6fc>
 8006d50:	ec53 2b18 	vmov	r2, r3, d8
 8006d54:	4911      	ldr	r1, [pc, #68]	; (8006d9c <_dtoa_r+0x65c>)
 8006d56:	2000      	movs	r0, #0
 8006d58:	f7f9 fab6 	bl	80002c8 <__aeabi_dsub>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4630      	mov	r0, r6
 8006d62:	4639      	mov	r1, r7
 8006d64:	f7f9 feda 	bl	8000b1c <__aeabi_dcmplt>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	f43f af27 	beq.w	8006bbc <_dtoa_r+0x47c>
 8006d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d70:	1e6b      	subs	r3, r5, #1
 8006d72:	930c      	str	r3, [sp, #48]	; 0x30
 8006d74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d78:	2b30      	cmp	r3, #48	; 0x30
 8006d7a:	d0f8      	beq.n	8006d6e <_dtoa_r+0x62e>
 8006d7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006d80:	e04a      	b.n	8006e18 <_dtoa_r+0x6d8>
 8006d82:	bf00      	nop
 8006d84:	08009f28 	.word	0x08009f28
 8006d88:	08009f00 	.word	0x08009f00
 8006d8c:	3ff00000 	.word	0x3ff00000
 8006d90:	40240000 	.word	0x40240000
 8006d94:	401c0000 	.word	0x401c0000
 8006d98:	40140000 	.word	0x40140000
 8006d9c:	3fe00000 	.word	0x3fe00000
 8006da0:	4baf      	ldr	r3, [pc, #700]	; (8007060 <_dtoa_r+0x920>)
 8006da2:	f7f9 fc49 	bl	8000638 <__aeabi_dmul>
 8006da6:	4606      	mov	r6, r0
 8006da8:	460f      	mov	r7, r1
 8006daa:	e7ac      	b.n	8006d06 <_dtoa_r+0x5c6>
 8006dac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006db0:	9d00      	ldr	r5, [sp, #0]
 8006db2:	4642      	mov	r2, r8
 8006db4:	464b      	mov	r3, r9
 8006db6:	4630      	mov	r0, r6
 8006db8:	4639      	mov	r1, r7
 8006dba:	f7f9 fd67 	bl	800088c <__aeabi_ddiv>
 8006dbe:	f7f9 feeb 	bl	8000b98 <__aeabi_d2iz>
 8006dc2:	9002      	str	r0, [sp, #8]
 8006dc4:	f7f9 fbce 	bl	8000564 <__aeabi_i2d>
 8006dc8:	4642      	mov	r2, r8
 8006dca:	464b      	mov	r3, r9
 8006dcc:	f7f9 fc34 	bl	8000638 <__aeabi_dmul>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f7f9 fa76 	bl	80002c8 <__aeabi_dsub>
 8006ddc:	9e02      	ldr	r6, [sp, #8]
 8006dde:	9f01      	ldr	r7, [sp, #4]
 8006de0:	3630      	adds	r6, #48	; 0x30
 8006de2:	f805 6b01 	strb.w	r6, [r5], #1
 8006de6:	9e00      	ldr	r6, [sp, #0]
 8006de8:	1bae      	subs	r6, r5, r6
 8006dea:	42b7      	cmp	r7, r6
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	d137      	bne.n	8006e62 <_dtoa_r+0x722>
 8006df2:	f7f9 fa6b 	bl	80002cc <__adddf3>
 8006df6:	4642      	mov	r2, r8
 8006df8:	464b      	mov	r3, r9
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	460f      	mov	r7, r1
 8006dfe:	f7f9 feab 	bl	8000b58 <__aeabi_dcmpgt>
 8006e02:	b9c8      	cbnz	r0, 8006e38 <_dtoa_r+0x6f8>
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	4630      	mov	r0, r6
 8006e0a:	4639      	mov	r1, r7
 8006e0c:	f7f9 fe7c 	bl	8000b08 <__aeabi_dcmpeq>
 8006e10:	b110      	cbz	r0, 8006e18 <_dtoa_r+0x6d8>
 8006e12:	9b02      	ldr	r3, [sp, #8]
 8006e14:	07d9      	lsls	r1, r3, #31
 8006e16:	d40f      	bmi.n	8006e38 <_dtoa_r+0x6f8>
 8006e18:	4620      	mov	r0, r4
 8006e1a:	4659      	mov	r1, fp
 8006e1c:	f000 fe58 	bl	8007ad0 <_Bfree>
 8006e20:	2300      	movs	r3, #0
 8006e22:	702b      	strb	r3, [r5, #0]
 8006e24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e26:	f10a 0001 	add.w	r0, sl, #1
 8006e2a:	6018      	str	r0, [r3, #0]
 8006e2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f43f acd8 	beq.w	80067e4 <_dtoa_r+0xa4>
 8006e34:	601d      	str	r5, [r3, #0]
 8006e36:	e4d5      	b.n	80067e4 <_dtoa_r+0xa4>
 8006e38:	f8cd a01c 	str.w	sl, [sp, #28]
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	461d      	mov	r5, r3
 8006e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e44:	2a39      	cmp	r2, #57	; 0x39
 8006e46:	d108      	bne.n	8006e5a <_dtoa_r+0x71a>
 8006e48:	9a00      	ldr	r2, [sp, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d1f7      	bne.n	8006e3e <_dtoa_r+0x6fe>
 8006e4e:	9a07      	ldr	r2, [sp, #28]
 8006e50:	9900      	ldr	r1, [sp, #0]
 8006e52:	3201      	adds	r2, #1
 8006e54:	9207      	str	r2, [sp, #28]
 8006e56:	2230      	movs	r2, #48	; 0x30
 8006e58:	700a      	strb	r2, [r1, #0]
 8006e5a:	781a      	ldrb	r2, [r3, #0]
 8006e5c:	3201      	adds	r2, #1
 8006e5e:	701a      	strb	r2, [r3, #0]
 8006e60:	e78c      	b.n	8006d7c <_dtoa_r+0x63c>
 8006e62:	4b7f      	ldr	r3, [pc, #508]	; (8007060 <_dtoa_r+0x920>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	f7f9 fbe7 	bl	8000638 <__aeabi_dmul>
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4606      	mov	r6, r0
 8006e70:	460f      	mov	r7, r1
 8006e72:	f7f9 fe49 	bl	8000b08 <__aeabi_dcmpeq>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d09b      	beq.n	8006db2 <_dtoa_r+0x672>
 8006e7a:	e7cd      	b.n	8006e18 <_dtoa_r+0x6d8>
 8006e7c:	9a08      	ldr	r2, [sp, #32]
 8006e7e:	2a00      	cmp	r2, #0
 8006e80:	f000 80c4 	beq.w	800700c <_dtoa_r+0x8cc>
 8006e84:	9a05      	ldr	r2, [sp, #20]
 8006e86:	2a01      	cmp	r2, #1
 8006e88:	f300 80a8 	bgt.w	8006fdc <_dtoa_r+0x89c>
 8006e8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e8e:	2a00      	cmp	r2, #0
 8006e90:	f000 80a0 	beq.w	8006fd4 <_dtoa_r+0x894>
 8006e94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e98:	9e06      	ldr	r6, [sp, #24]
 8006e9a:	4645      	mov	r5, r8
 8006e9c:	9a04      	ldr	r2, [sp, #16]
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	441a      	add	r2, r3
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	4498      	add	r8, r3
 8006ea6:	9204      	str	r2, [sp, #16]
 8006ea8:	f000 ff18 	bl	8007cdc <__i2b>
 8006eac:	4607      	mov	r7, r0
 8006eae:	2d00      	cmp	r5, #0
 8006eb0:	dd0b      	ble.n	8006eca <_dtoa_r+0x78a>
 8006eb2:	9b04      	ldr	r3, [sp, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dd08      	ble.n	8006eca <_dtoa_r+0x78a>
 8006eb8:	42ab      	cmp	r3, r5
 8006eba:	9a04      	ldr	r2, [sp, #16]
 8006ebc:	bfa8      	it	ge
 8006ebe:	462b      	movge	r3, r5
 8006ec0:	eba8 0803 	sub.w	r8, r8, r3
 8006ec4:	1aed      	subs	r5, r5, r3
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	9b06      	ldr	r3, [sp, #24]
 8006ecc:	b1fb      	cbz	r3, 8006f0e <_dtoa_r+0x7ce>
 8006ece:	9b08      	ldr	r3, [sp, #32]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 809f 	beq.w	8007014 <_dtoa_r+0x8d4>
 8006ed6:	2e00      	cmp	r6, #0
 8006ed8:	dd11      	ble.n	8006efe <_dtoa_r+0x7be>
 8006eda:	4639      	mov	r1, r7
 8006edc:	4632      	mov	r2, r6
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 ffb8 	bl	8007e54 <__pow5mult>
 8006ee4:	465a      	mov	r2, fp
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	4607      	mov	r7, r0
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 ff0c 	bl	8007d08 <__multiply>
 8006ef0:	4659      	mov	r1, fp
 8006ef2:	9007      	str	r0, [sp, #28]
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 fdeb 	bl	8007ad0 <_Bfree>
 8006efa:	9b07      	ldr	r3, [sp, #28]
 8006efc:	469b      	mov	fp, r3
 8006efe:	9b06      	ldr	r3, [sp, #24]
 8006f00:	1b9a      	subs	r2, r3, r6
 8006f02:	d004      	beq.n	8006f0e <_dtoa_r+0x7ce>
 8006f04:	4659      	mov	r1, fp
 8006f06:	4620      	mov	r0, r4
 8006f08:	f000 ffa4 	bl	8007e54 <__pow5mult>
 8006f0c:	4683      	mov	fp, r0
 8006f0e:	2101      	movs	r1, #1
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 fee3 	bl	8007cdc <__i2b>
 8006f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	dd7c      	ble.n	8007018 <_dtoa_r+0x8d8>
 8006f1e:	461a      	mov	r2, r3
 8006f20:	4601      	mov	r1, r0
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 ff96 	bl	8007e54 <__pow5mult>
 8006f28:	9b05      	ldr	r3, [sp, #20]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	4606      	mov	r6, r0
 8006f2e:	dd76      	ble.n	800701e <_dtoa_r+0x8de>
 8006f30:	2300      	movs	r3, #0
 8006f32:	9306      	str	r3, [sp, #24]
 8006f34:	6933      	ldr	r3, [r6, #16]
 8006f36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f3a:	6918      	ldr	r0, [r3, #16]
 8006f3c:	f000 fe7e 	bl	8007c3c <__hi0bits>
 8006f40:	f1c0 0020 	rsb	r0, r0, #32
 8006f44:	9b04      	ldr	r3, [sp, #16]
 8006f46:	4418      	add	r0, r3
 8006f48:	f010 001f 	ands.w	r0, r0, #31
 8006f4c:	f000 8086 	beq.w	800705c <_dtoa_r+0x91c>
 8006f50:	f1c0 0320 	rsb	r3, r0, #32
 8006f54:	2b04      	cmp	r3, #4
 8006f56:	dd7f      	ble.n	8007058 <_dtoa_r+0x918>
 8006f58:	f1c0 001c 	rsb	r0, r0, #28
 8006f5c:	9b04      	ldr	r3, [sp, #16]
 8006f5e:	4403      	add	r3, r0
 8006f60:	4480      	add	r8, r0
 8006f62:	4405      	add	r5, r0
 8006f64:	9304      	str	r3, [sp, #16]
 8006f66:	f1b8 0f00 	cmp.w	r8, #0
 8006f6a:	dd05      	ble.n	8006f78 <_dtoa_r+0x838>
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	4642      	mov	r2, r8
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 ffc9 	bl	8007f08 <__lshift>
 8006f76:	4683      	mov	fp, r0
 8006f78:	9b04      	ldr	r3, [sp, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	dd05      	ble.n	8006f8a <_dtoa_r+0x84a>
 8006f7e:	4631      	mov	r1, r6
 8006f80:	461a      	mov	r2, r3
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 ffc0 	bl	8007f08 <__lshift>
 8006f88:	4606      	mov	r6, r0
 8006f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d069      	beq.n	8007064 <_dtoa_r+0x924>
 8006f90:	4631      	mov	r1, r6
 8006f92:	4658      	mov	r0, fp
 8006f94:	f001 f824 	bl	8007fe0 <__mcmp>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	da63      	bge.n	8007064 <_dtoa_r+0x924>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4659      	mov	r1, fp
 8006fa0:	220a      	movs	r2, #10
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 fdb6 	bl	8007b14 <__multadd>
 8006fa8:	9b08      	ldr	r3, [sp, #32]
 8006faa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006fae:	4683      	mov	fp, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 818f 	beq.w	80072d4 <_dtoa_r+0xb94>
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	2300      	movs	r3, #0
 8006fba:	220a      	movs	r2, #10
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 fda9 	bl	8007b14 <__multadd>
 8006fc2:	f1b9 0f00 	cmp.w	r9, #0
 8006fc6:	4607      	mov	r7, r0
 8006fc8:	f300 808e 	bgt.w	80070e8 <_dtoa_r+0x9a8>
 8006fcc:	9b05      	ldr	r3, [sp, #20]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	dc50      	bgt.n	8007074 <_dtoa_r+0x934>
 8006fd2:	e089      	b.n	80070e8 <_dtoa_r+0x9a8>
 8006fd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006fda:	e75d      	b.n	8006e98 <_dtoa_r+0x758>
 8006fdc:	9b01      	ldr	r3, [sp, #4]
 8006fde:	1e5e      	subs	r6, r3, #1
 8006fe0:	9b06      	ldr	r3, [sp, #24]
 8006fe2:	42b3      	cmp	r3, r6
 8006fe4:	bfbf      	itttt	lt
 8006fe6:	9b06      	ldrlt	r3, [sp, #24]
 8006fe8:	9606      	strlt	r6, [sp, #24]
 8006fea:	1af2      	sublt	r2, r6, r3
 8006fec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006fee:	bfb6      	itet	lt
 8006ff0:	189b      	addlt	r3, r3, r2
 8006ff2:	1b9e      	subge	r6, r3, r6
 8006ff4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006ff6:	9b01      	ldr	r3, [sp, #4]
 8006ff8:	bfb8      	it	lt
 8006ffa:	2600      	movlt	r6, #0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bfb5      	itete	lt
 8007000:	eba8 0503 	sublt.w	r5, r8, r3
 8007004:	9b01      	ldrge	r3, [sp, #4]
 8007006:	2300      	movlt	r3, #0
 8007008:	4645      	movge	r5, r8
 800700a:	e747      	b.n	8006e9c <_dtoa_r+0x75c>
 800700c:	9e06      	ldr	r6, [sp, #24]
 800700e:	9f08      	ldr	r7, [sp, #32]
 8007010:	4645      	mov	r5, r8
 8007012:	e74c      	b.n	8006eae <_dtoa_r+0x76e>
 8007014:	9a06      	ldr	r2, [sp, #24]
 8007016:	e775      	b.n	8006f04 <_dtoa_r+0x7c4>
 8007018:	9b05      	ldr	r3, [sp, #20]
 800701a:	2b01      	cmp	r3, #1
 800701c:	dc18      	bgt.n	8007050 <_dtoa_r+0x910>
 800701e:	9b02      	ldr	r3, [sp, #8]
 8007020:	b9b3      	cbnz	r3, 8007050 <_dtoa_r+0x910>
 8007022:	9b03      	ldr	r3, [sp, #12]
 8007024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007028:	b9a3      	cbnz	r3, 8007054 <_dtoa_r+0x914>
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007030:	0d1b      	lsrs	r3, r3, #20
 8007032:	051b      	lsls	r3, r3, #20
 8007034:	b12b      	cbz	r3, 8007042 <_dtoa_r+0x902>
 8007036:	9b04      	ldr	r3, [sp, #16]
 8007038:	3301      	adds	r3, #1
 800703a:	9304      	str	r3, [sp, #16]
 800703c:	f108 0801 	add.w	r8, r8, #1
 8007040:	2301      	movs	r3, #1
 8007042:	9306      	str	r3, [sp, #24]
 8007044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007046:	2b00      	cmp	r3, #0
 8007048:	f47f af74 	bne.w	8006f34 <_dtoa_r+0x7f4>
 800704c:	2001      	movs	r0, #1
 800704e:	e779      	b.n	8006f44 <_dtoa_r+0x804>
 8007050:	2300      	movs	r3, #0
 8007052:	e7f6      	b.n	8007042 <_dtoa_r+0x902>
 8007054:	9b02      	ldr	r3, [sp, #8]
 8007056:	e7f4      	b.n	8007042 <_dtoa_r+0x902>
 8007058:	d085      	beq.n	8006f66 <_dtoa_r+0x826>
 800705a:	4618      	mov	r0, r3
 800705c:	301c      	adds	r0, #28
 800705e:	e77d      	b.n	8006f5c <_dtoa_r+0x81c>
 8007060:	40240000 	.word	0x40240000
 8007064:	9b01      	ldr	r3, [sp, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	dc38      	bgt.n	80070dc <_dtoa_r+0x99c>
 800706a:	9b05      	ldr	r3, [sp, #20]
 800706c:	2b02      	cmp	r3, #2
 800706e:	dd35      	ble.n	80070dc <_dtoa_r+0x99c>
 8007070:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007074:	f1b9 0f00 	cmp.w	r9, #0
 8007078:	d10d      	bne.n	8007096 <_dtoa_r+0x956>
 800707a:	4631      	mov	r1, r6
 800707c:	464b      	mov	r3, r9
 800707e:	2205      	movs	r2, #5
 8007080:	4620      	mov	r0, r4
 8007082:	f000 fd47 	bl	8007b14 <__multadd>
 8007086:	4601      	mov	r1, r0
 8007088:	4606      	mov	r6, r0
 800708a:	4658      	mov	r0, fp
 800708c:	f000 ffa8 	bl	8007fe0 <__mcmp>
 8007090:	2800      	cmp	r0, #0
 8007092:	f73f adbd 	bgt.w	8006c10 <_dtoa_r+0x4d0>
 8007096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007098:	9d00      	ldr	r5, [sp, #0]
 800709a:	ea6f 0a03 	mvn.w	sl, r3
 800709e:	f04f 0800 	mov.w	r8, #0
 80070a2:	4631      	mov	r1, r6
 80070a4:	4620      	mov	r0, r4
 80070a6:	f000 fd13 	bl	8007ad0 <_Bfree>
 80070aa:	2f00      	cmp	r7, #0
 80070ac:	f43f aeb4 	beq.w	8006e18 <_dtoa_r+0x6d8>
 80070b0:	f1b8 0f00 	cmp.w	r8, #0
 80070b4:	d005      	beq.n	80070c2 <_dtoa_r+0x982>
 80070b6:	45b8      	cmp	r8, r7
 80070b8:	d003      	beq.n	80070c2 <_dtoa_r+0x982>
 80070ba:	4641      	mov	r1, r8
 80070bc:	4620      	mov	r0, r4
 80070be:	f000 fd07 	bl	8007ad0 <_Bfree>
 80070c2:	4639      	mov	r1, r7
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 fd03 	bl	8007ad0 <_Bfree>
 80070ca:	e6a5      	b.n	8006e18 <_dtoa_r+0x6d8>
 80070cc:	2600      	movs	r6, #0
 80070ce:	4637      	mov	r7, r6
 80070d0:	e7e1      	b.n	8007096 <_dtoa_r+0x956>
 80070d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80070d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80070d8:	4637      	mov	r7, r6
 80070da:	e599      	b.n	8006c10 <_dtoa_r+0x4d0>
 80070dc:	9b08      	ldr	r3, [sp, #32]
 80070de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 80fd 	beq.w	80072e2 <_dtoa_r+0xba2>
 80070e8:	2d00      	cmp	r5, #0
 80070ea:	dd05      	ble.n	80070f8 <_dtoa_r+0x9b8>
 80070ec:	4639      	mov	r1, r7
 80070ee:	462a      	mov	r2, r5
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 ff09 	bl	8007f08 <__lshift>
 80070f6:	4607      	mov	r7, r0
 80070f8:	9b06      	ldr	r3, [sp, #24]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d05c      	beq.n	80071b8 <_dtoa_r+0xa78>
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fca5 	bl	8007a50 <_Balloc>
 8007106:	4605      	mov	r5, r0
 8007108:	b928      	cbnz	r0, 8007116 <_dtoa_r+0x9d6>
 800710a:	4b80      	ldr	r3, [pc, #512]	; (800730c <_dtoa_r+0xbcc>)
 800710c:	4602      	mov	r2, r0
 800710e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007112:	f7ff bb2e 	b.w	8006772 <_dtoa_r+0x32>
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	3202      	adds	r2, #2
 800711a:	0092      	lsls	r2, r2, #2
 800711c:	f107 010c 	add.w	r1, r7, #12
 8007120:	300c      	adds	r0, #12
 8007122:	f000 fc87 	bl	8007a34 <memcpy>
 8007126:	2201      	movs	r2, #1
 8007128:	4629      	mov	r1, r5
 800712a:	4620      	mov	r0, r4
 800712c:	f000 feec 	bl	8007f08 <__lshift>
 8007130:	9b00      	ldr	r3, [sp, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	9b00      	ldr	r3, [sp, #0]
 8007138:	444b      	add	r3, r9
 800713a:	9307      	str	r3, [sp, #28]
 800713c:	9b02      	ldr	r3, [sp, #8]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	46b8      	mov	r8, r7
 8007144:	9306      	str	r3, [sp, #24]
 8007146:	4607      	mov	r7, r0
 8007148:	9b01      	ldr	r3, [sp, #4]
 800714a:	4631      	mov	r1, r6
 800714c:	3b01      	subs	r3, #1
 800714e:	4658      	mov	r0, fp
 8007150:	9302      	str	r3, [sp, #8]
 8007152:	f7ff fa67 	bl	8006624 <quorem>
 8007156:	4603      	mov	r3, r0
 8007158:	3330      	adds	r3, #48	; 0x30
 800715a:	9004      	str	r0, [sp, #16]
 800715c:	4641      	mov	r1, r8
 800715e:	4658      	mov	r0, fp
 8007160:	9308      	str	r3, [sp, #32]
 8007162:	f000 ff3d 	bl	8007fe0 <__mcmp>
 8007166:	463a      	mov	r2, r7
 8007168:	4681      	mov	r9, r0
 800716a:	4631      	mov	r1, r6
 800716c:	4620      	mov	r0, r4
 800716e:	f000 ff53 	bl	8008018 <__mdiff>
 8007172:	68c2      	ldr	r2, [r0, #12]
 8007174:	9b08      	ldr	r3, [sp, #32]
 8007176:	4605      	mov	r5, r0
 8007178:	bb02      	cbnz	r2, 80071bc <_dtoa_r+0xa7c>
 800717a:	4601      	mov	r1, r0
 800717c:	4658      	mov	r0, fp
 800717e:	f000 ff2f 	bl	8007fe0 <__mcmp>
 8007182:	9b08      	ldr	r3, [sp, #32]
 8007184:	4602      	mov	r2, r0
 8007186:	4629      	mov	r1, r5
 8007188:	4620      	mov	r0, r4
 800718a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800718e:	f000 fc9f 	bl	8007ad0 <_Bfree>
 8007192:	9b05      	ldr	r3, [sp, #20]
 8007194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007196:	9d01      	ldr	r5, [sp, #4]
 8007198:	ea43 0102 	orr.w	r1, r3, r2
 800719c:	9b06      	ldr	r3, [sp, #24]
 800719e:	430b      	orrs	r3, r1
 80071a0:	9b08      	ldr	r3, [sp, #32]
 80071a2:	d10d      	bne.n	80071c0 <_dtoa_r+0xa80>
 80071a4:	2b39      	cmp	r3, #57	; 0x39
 80071a6:	d029      	beq.n	80071fc <_dtoa_r+0xabc>
 80071a8:	f1b9 0f00 	cmp.w	r9, #0
 80071ac:	dd01      	ble.n	80071b2 <_dtoa_r+0xa72>
 80071ae:	9b04      	ldr	r3, [sp, #16]
 80071b0:	3331      	adds	r3, #49	; 0x31
 80071b2:	9a02      	ldr	r2, [sp, #8]
 80071b4:	7013      	strb	r3, [r2, #0]
 80071b6:	e774      	b.n	80070a2 <_dtoa_r+0x962>
 80071b8:	4638      	mov	r0, r7
 80071ba:	e7b9      	b.n	8007130 <_dtoa_r+0x9f0>
 80071bc:	2201      	movs	r2, #1
 80071be:	e7e2      	b.n	8007186 <_dtoa_r+0xa46>
 80071c0:	f1b9 0f00 	cmp.w	r9, #0
 80071c4:	db06      	blt.n	80071d4 <_dtoa_r+0xa94>
 80071c6:	9905      	ldr	r1, [sp, #20]
 80071c8:	ea41 0909 	orr.w	r9, r1, r9
 80071cc:	9906      	ldr	r1, [sp, #24]
 80071ce:	ea59 0101 	orrs.w	r1, r9, r1
 80071d2:	d120      	bne.n	8007216 <_dtoa_r+0xad6>
 80071d4:	2a00      	cmp	r2, #0
 80071d6:	ddec      	ble.n	80071b2 <_dtoa_r+0xa72>
 80071d8:	4659      	mov	r1, fp
 80071da:	2201      	movs	r2, #1
 80071dc:	4620      	mov	r0, r4
 80071de:	9301      	str	r3, [sp, #4]
 80071e0:	f000 fe92 	bl	8007f08 <__lshift>
 80071e4:	4631      	mov	r1, r6
 80071e6:	4683      	mov	fp, r0
 80071e8:	f000 fefa 	bl	8007fe0 <__mcmp>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	9b01      	ldr	r3, [sp, #4]
 80071f0:	dc02      	bgt.n	80071f8 <_dtoa_r+0xab8>
 80071f2:	d1de      	bne.n	80071b2 <_dtoa_r+0xa72>
 80071f4:	07da      	lsls	r2, r3, #31
 80071f6:	d5dc      	bpl.n	80071b2 <_dtoa_r+0xa72>
 80071f8:	2b39      	cmp	r3, #57	; 0x39
 80071fa:	d1d8      	bne.n	80071ae <_dtoa_r+0xa6e>
 80071fc:	9a02      	ldr	r2, [sp, #8]
 80071fe:	2339      	movs	r3, #57	; 0x39
 8007200:	7013      	strb	r3, [r2, #0]
 8007202:	462b      	mov	r3, r5
 8007204:	461d      	mov	r5, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800720c:	2a39      	cmp	r2, #57	; 0x39
 800720e:	d050      	beq.n	80072b2 <_dtoa_r+0xb72>
 8007210:	3201      	adds	r2, #1
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	e745      	b.n	80070a2 <_dtoa_r+0x962>
 8007216:	2a00      	cmp	r2, #0
 8007218:	dd03      	ble.n	8007222 <_dtoa_r+0xae2>
 800721a:	2b39      	cmp	r3, #57	; 0x39
 800721c:	d0ee      	beq.n	80071fc <_dtoa_r+0xabc>
 800721e:	3301      	adds	r3, #1
 8007220:	e7c7      	b.n	80071b2 <_dtoa_r+0xa72>
 8007222:	9a01      	ldr	r2, [sp, #4]
 8007224:	9907      	ldr	r1, [sp, #28]
 8007226:	f802 3c01 	strb.w	r3, [r2, #-1]
 800722a:	428a      	cmp	r2, r1
 800722c:	d02a      	beq.n	8007284 <_dtoa_r+0xb44>
 800722e:	4659      	mov	r1, fp
 8007230:	2300      	movs	r3, #0
 8007232:	220a      	movs	r2, #10
 8007234:	4620      	mov	r0, r4
 8007236:	f000 fc6d 	bl	8007b14 <__multadd>
 800723a:	45b8      	cmp	r8, r7
 800723c:	4683      	mov	fp, r0
 800723e:	f04f 0300 	mov.w	r3, #0
 8007242:	f04f 020a 	mov.w	r2, #10
 8007246:	4641      	mov	r1, r8
 8007248:	4620      	mov	r0, r4
 800724a:	d107      	bne.n	800725c <_dtoa_r+0xb1c>
 800724c:	f000 fc62 	bl	8007b14 <__multadd>
 8007250:	4680      	mov	r8, r0
 8007252:	4607      	mov	r7, r0
 8007254:	9b01      	ldr	r3, [sp, #4]
 8007256:	3301      	adds	r3, #1
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	e775      	b.n	8007148 <_dtoa_r+0xa08>
 800725c:	f000 fc5a 	bl	8007b14 <__multadd>
 8007260:	4639      	mov	r1, r7
 8007262:	4680      	mov	r8, r0
 8007264:	2300      	movs	r3, #0
 8007266:	220a      	movs	r2, #10
 8007268:	4620      	mov	r0, r4
 800726a:	f000 fc53 	bl	8007b14 <__multadd>
 800726e:	4607      	mov	r7, r0
 8007270:	e7f0      	b.n	8007254 <_dtoa_r+0xb14>
 8007272:	f1b9 0f00 	cmp.w	r9, #0
 8007276:	9a00      	ldr	r2, [sp, #0]
 8007278:	bfcc      	ite	gt
 800727a:	464d      	movgt	r5, r9
 800727c:	2501      	movle	r5, #1
 800727e:	4415      	add	r5, r2
 8007280:	f04f 0800 	mov.w	r8, #0
 8007284:	4659      	mov	r1, fp
 8007286:	2201      	movs	r2, #1
 8007288:	4620      	mov	r0, r4
 800728a:	9301      	str	r3, [sp, #4]
 800728c:	f000 fe3c 	bl	8007f08 <__lshift>
 8007290:	4631      	mov	r1, r6
 8007292:	4683      	mov	fp, r0
 8007294:	f000 fea4 	bl	8007fe0 <__mcmp>
 8007298:	2800      	cmp	r0, #0
 800729a:	dcb2      	bgt.n	8007202 <_dtoa_r+0xac2>
 800729c:	d102      	bne.n	80072a4 <_dtoa_r+0xb64>
 800729e:	9b01      	ldr	r3, [sp, #4]
 80072a0:	07db      	lsls	r3, r3, #31
 80072a2:	d4ae      	bmi.n	8007202 <_dtoa_r+0xac2>
 80072a4:	462b      	mov	r3, r5
 80072a6:	461d      	mov	r5, r3
 80072a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072ac:	2a30      	cmp	r2, #48	; 0x30
 80072ae:	d0fa      	beq.n	80072a6 <_dtoa_r+0xb66>
 80072b0:	e6f7      	b.n	80070a2 <_dtoa_r+0x962>
 80072b2:	9a00      	ldr	r2, [sp, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d1a5      	bne.n	8007204 <_dtoa_r+0xac4>
 80072b8:	f10a 0a01 	add.w	sl, sl, #1
 80072bc:	2331      	movs	r3, #49	; 0x31
 80072be:	e779      	b.n	80071b4 <_dtoa_r+0xa74>
 80072c0:	4b13      	ldr	r3, [pc, #76]	; (8007310 <_dtoa_r+0xbd0>)
 80072c2:	f7ff baaf 	b.w	8006824 <_dtoa_r+0xe4>
 80072c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f47f aa86 	bne.w	80067da <_dtoa_r+0x9a>
 80072ce:	4b11      	ldr	r3, [pc, #68]	; (8007314 <_dtoa_r+0xbd4>)
 80072d0:	f7ff baa8 	b.w	8006824 <_dtoa_r+0xe4>
 80072d4:	f1b9 0f00 	cmp.w	r9, #0
 80072d8:	dc03      	bgt.n	80072e2 <_dtoa_r+0xba2>
 80072da:	9b05      	ldr	r3, [sp, #20]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	f73f aec9 	bgt.w	8007074 <_dtoa_r+0x934>
 80072e2:	9d00      	ldr	r5, [sp, #0]
 80072e4:	4631      	mov	r1, r6
 80072e6:	4658      	mov	r0, fp
 80072e8:	f7ff f99c 	bl	8006624 <quorem>
 80072ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80072f0:	f805 3b01 	strb.w	r3, [r5], #1
 80072f4:	9a00      	ldr	r2, [sp, #0]
 80072f6:	1aaa      	subs	r2, r5, r2
 80072f8:	4591      	cmp	r9, r2
 80072fa:	ddba      	ble.n	8007272 <_dtoa_r+0xb32>
 80072fc:	4659      	mov	r1, fp
 80072fe:	2300      	movs	r3, #0
 8007300:	220a      	movs	r2, #10
 8007302:	4620      	mov	r0, r4
 8007304:	f000 fc06 	bl	8007b14 <__multadd>
 8007308:	4683      	mov	fp, r0
 800730a:	e7eb      	b.n	80072e4 <_dtoa_r+0xba4>
 800730c:	08009e0c 	.word	0x08009e0c
 8007310:	08009c0c 	.word	0x08009c0c
 8007314:	08009d89 	.word	0x08009d89

08007318 <rshift>:
 8007318:	6903      	ldr	r3, [r0, #16]
 800731a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800731e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007322:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007326:	f100 0414 	add.w	r4, r0, #20
 800732a:	dd45      	ble.n	80073b8 <rshift+0xa0>
 800732c:	f011 011f 	ands.w	r1, r1, #31
 8007330:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007334:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007338:	d10c      	bne.n	8007354 <rshift+0x3c>
 800733a:	f100 0710 	add.w	r7, r0, #16
 800733e:	4629      	mov	r1, r5
 8007340:	42b1      	cmp	r1, r6
 8007342:	d334      	bcc.n	80073ae <rshift+0x96>
 8007344:	1a9b      	subs	r3, r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	1eea      	subs	r2, r5, #3
 800734a:	4296      	cmp	r6, r2
 800734c:	bf38      	it	cc
 800734e:	2300      	movcc	r3, #0
 8007350:	4423      	add	r3, r4
 8007352:	e015      	b.n	8007380 <rshift+0x68>
 8007354:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007358:	f1c1 0820 	rsb	r8, r1, #32
 800735c:	40cf      	lsrs	r7, r1
 800735e:	f105 0e04 	add.w	lr, r5, #4
 8007362:	46a1      	mov	r9, r4
 8007364:	4576      	cmp	r6, lr
 8007366:	46f4      	mov	ip, lr
 8007368:	d815      	bhi.n	8007396 <rshift+0x7e>
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	009a      	lsls	r2, r3, #2
 800736e:	3a04      	subs	r2, #4
 8007370:	3501      	adds	r5, #1
 8007372:	42ae      	cmp	r6, r5
 8007374:	bf38      	it	cc
 8007376:	2200      	movcc	r2, #0
 8007378:	18a3      	adds	r3, r4, r2
 800737a:	50a7      	str	r7, [r4, r2]
 800737c:	b107      	cbz	r7, 8007380 <rshift+0x68>
 800737e:	3304      	adds	r3, #4
 8007380:	1b1a      	subs	r2, r3, r4
 8007382:	42a3      	cmp	r3, r4
 8007384:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007388:	bf08      	it	eq
 800738a:	2300      	moveq	r3, #0
 800738c:	6102      	str	r2, [r0, #16]
 800738e:	bf08      	it	eq
 8007390:	6143      	streq	r3, [r0, #20]
 8007392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007396:	f8dc c000 	ldr.w	ip, [ip]
 800739a:	fa0c fc08 	lsl.w	ip, ip, r8
 800739e:	ea4c 0707 	orr.w	r7, ip, r7
 80073a2:	f849 7b04 	str.w	r7, [r9], #4
 80073a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80073aa:	40cf      	lsrs	r7, r1
 80073ac:	e7da      	b.n	8007364 <rshift+0x4c>
 80073ae:	f851 cb04 	ldr.w	ip, [r1], #4
 80073b2:	f847 cf04 	str.w	ip, [r7, #4]!
 80073b6:	e7c3      	b.n	8007340 <rshift+0x28>
 80073b8:	4623      	mov	r3, r4
 80073ba:	e7e1      	b.n	8007380 <rshift+0x68>

080073bc <__hexdig_fun>:
 80073bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80073c0:	2b09      	cmp	r3, #9
 80073c2:	d802      	bhi.n	80073ca <__hexdig_fun+0xe>
 80073c4:	3820      	subs	r0, #32
 80073c6:	b2c0      	uxtb	r0, r0
 80073c8:	4770      	bx	lr
 80073ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	d801      	bhi.n	80073d6 <__hexdig_fun+0x1a>
 80073d2:	3847      	subs	r0, #71	; 0x47
 80073d4:	e7f7      	b.n	80073c6 <__hexdig_fun+0xa>
 80073d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80073da:	2b05      	cmp	r3, #5
 80073dc:	d801      	bhi.n	80073e2 <__hexdig_fun+0x26>
 80073de:	3827      	subs	r0, #39	; 0x27
 80073e0:	e7f1      	b.n	80073c6 <__hexdig_fun+0xa>
 80073e2:	2000      	movs	r0, #0
 80073e4:	4770      	bx	lr
	...

080073e8 <__gethex>:
 80073e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	ed2d 8b02 	vpush	{d8}
 80073f0:	b089      	sub	sp, #36	; 0x24
 80073f2:	ee08 0a10 	vmov	s16, r0
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	4bbc      	ldr	r3, [pc, #752]	; (80076ec <__gethex+0x304>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	4618      	mov	r0, r3
 8007400:	468b      	mov	fp, r1
 8007402:	4690      	mov	r8, r2
 8007404:	f7f8 ff04 	bl	8000210 <strlen>
 8007408:	9b01      	ldr	r3, [sp, #4]
 800740a:	f8db 2000 	ldr.w	r2, [fp]
 800740e:	4403      	add	r3, r0
 8007410:	4682      	mov	sl, r0
 8007412:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007416:	9305      	str	r3, [sp, #20]
 8007418:	1c93      	adds	r3, r2, #2
 800741a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800741e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007422:	32fe      	adds	r2, #254	; 0xfe
 8007424:	18d1      	adds	r1, r2, r3
 8007426:	461f      	mov	r7, r3
 8007428:	f813 0b01 	ldrb.w	r0, [r3], #1
 800742c:	9100      	str	r1, [sp, #0]
 800742e:	2830      	cmp	r0, #48	; 0x30
 8007430:	d0f8      	beq.n	8007424 <__gethex+0x3c>
 8007432:	f7ff ffc3 	bl	80073bc <__hexdig_fun>
 8007436:	4604      	mov	r4, r0
 8007438:	2800      	cmp	r0, #0
 800743a:	d13a      	bne.n	80074b2 <__gethex+0xca>
 800743c:	9901      	ldr	r1, [sp, #4]
 800743e:	4652      	mov	r2, sl
 8007440:	4638      	mov	r0, r7
 8007442:	f001 f9ed 	bl	8008820 <strncmp>
 8007446:	4605      	mov	r5, r0
 8007448:	2800      	cmp	r0, #0
 800744a:	d168      	bne.n	800751e <__gethex+0x136>
 800744c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007450:	eb07 060a 	add.w	r6, r7, sl
 8007454:	f7ff ffb2 	bl	80073bc <__hexdig_fun>
 8007458:	2800      	cmp	r0, #0
 800745a:	d062      	beq.n	8007522 <__gethex+0x13a>
 800745c:	4633      	mov	r3, r6
 800745e:	7818      	ldrb	r0, [r3, #0]
 8007460:	2830      	cmp	r0, #48	; 0x30
 8007462:	461f      	mov	r7, r3
 8007464:	f103 0301 	add.w	r3, r3, #1
 8007468:	d0f9      	beq.n	800745e <__gethex+0x76>
 800746a:	f7ff ffa7 	bl	80073bc <__hexdig_fun>
 800746e:	2301      	movs	r3, #1
 8007470:	fab0 f480 	clz	r4, r0
 8007474:	0964      	lsrs	r4, r4, #5
 8007476:	4635      	mov	r5, r6
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	463a      	mov	r2, r7
 800747c:	4616      	mov	r6, r2
 800747e:	3201      	adds	r2, #1
 8007480:	7830      	ldrb	r0, [r6, #0]
 8007482:	f7ff ff9b 	bl	80073bc <__hexdig_fun>
 8007486:	2800      	cmp	r0, #0
 8007488:	d1f8      	bne.n	800747c <__gethex+0x94>
 800748a:	9901      	ldr	r1, [sp, #4]
 800748c:	4652      	mov	r2, sl
 800748e:	4630      	mov	r0, r6
 8007490:	f001 f9c6 	bl	8008820 <strncmp>
 8007494:	b980      	cbnz	r0, 80074b8 <__gethex+0xd0>
 8007496:	b94d      	cbnz	r5, 80074ac <__gethex+0xc4>
 8007498:	eb06 050a 	add.w	r5, r6, sl
 800749c:	462a      	mov	r2, r5
 800749e:	4616      	mov	r6, r2
 80074a0:	3201      	adds	r2, #1
 80074a2:	7830      	ldrb	r0, [r6, #0]
 80074a4:	f7ff ff8a 	bl	80073bc <__hexdig_fun>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d1f8      	bne.n	800749e <__gethex+0xb6>
 80074ac:	1bad      	subs	r5, r5, r6
 80074ae:	00ad      	lsls	r5, r5, #2
 80074b0:	e004      	b.n	80074bc <__gethex+0xd4>
 80074b2:	2400      	movs	r4, #0
 80074b4:	4625      	mov	r5, r4
 80074b6:	e7e0      	b.n	800747a <__gethex+0x92>
 80074b8:	2d00      	cmp	r5, #0
 80074ba:	d1f7      	bne.n	80074ac <__gethex+0xc4>
 80074bc:	7833      	ldrb	r3, [r6, #0]
 80074be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80074c2:	2b50      	cmp	r3, #80	; 0x50
 80074c4:	d13b      	bne.n	800753e <__gethex+0x156>
 80074c6:	7873      	ldrb	r3, [r6, #1]
 80074c8:	2b2b      	cmp	r3, #43	; 0x2b
 80074ca:	d02c      	beq.n	8007526 <__gethex+0x13e>
 80074cc:	2b2d      	cmp	r3, #45	; 0x2d
 80074ce:	d02e      	beq.n	800752e <__gethex+0x146>
 80074d0:	1c71      	adds	r1, r6, #1
 80074d2:	f04f 0900 	mov.w	r9, #0
 80074d6:	7808      	ldrb	r0, [r1, #0]
 80074d8:	f7ff ff70 	bl	80073bc <__hexdig_fun>
 80074dc:	1e43      	subs	r3, r0, #1
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b18      	cmp	r3, #24
 80074e2:	d82c      	bhi.n	800753e <__gethex+0x156>
 80074e4:	f1a0 0210 	sub.w	r2, r0, #16
 80074e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80074ec:	f7ff ff66 	bl	80073bc <__hexdig_fun>
 80074f0:	1e43      	subs	r3, r0, #1
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b18      	cmp	r3, #24
 80074f6:	d91d      	bls.n	8007534 <__gethex+0x14c>
 80074f8:	f1b9 0f00 	cmp.w	r9, #0
 80074fc:	d000      	beq.n	8007500 <__gethex+0x118>
 80074fe:	4252      	negs	r2, r2
 8007500:	4415      	add	r5, r2
 8007502:	f8cb 1000 	str.w	r1, [fp]
 8007506:	b1e4      	cbz	r4, 8007542 <__gethex+0x15a>
 8007508:	9b00      	ldr	r3, [sp, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	bf14      	ite	ne
 800750e:	2700      	movne	r7, #0
 8007510:	2706      	moveq	r7, #6
 8007512:	4638      	mov	r0, r7
 8007514:	b009      	add	sp, #36	; 0x24
 8007516:	ecbd 8b02 	vpop	{d8}
 800751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751e:	463e      	mov	r6, r7
 8007520:	4625      	mov	r5, r4
 8007522:	2401      	movs	r4, #1
 8007524:	e7ca      	b.n	80074bc <__gethex+0xd4>
 8007526:	f04f 0900 	mov.w	r9, #0
 800752a:	1cb1      	adds	r1, r6, #2
 800752c:	e7d3      	b.n	80074d6 <__gethex+0xee>
 800752e:	f04f 0901 	mov.w	r9, #1
 8007532:	e7fa      	b.n	800752a <__gethex+0x142>
 8007534:	230a      	movs	r3, #10
 8007536:	fb03 0202 	mla	r2, r3, r2, r0
 800753a:	3a10      	subs	r2, #16
 800753c:	e7d4      	b.n	80074e8 <__gethex+0x100>
 800753e:	4631      	mov	r1, r6
 8007540:	e7df      	b.n	8007502 <__gethex+0x11a>
 8007542:	1bf3      	subs	r3, r6, r7
 8007544:	3b01      	subs	r3, #1
 8007546:	4621      	mov	r1, r4
 8007548:	2b07      	cmp	r3, #7
 800754a:	dc0b      	bgt.n	8007564 <__gethex+0x17c>
 800754c:	ee18 0a10 	vmov	r0, s16
 8007550:	f000 fa7e 	bl	8007a50 <_Balloc>
 8007554:	4604      	mov	r4, r0
 8007556:	b940      	cbnz	r0, 800756a <__gethex+0x182>
 8007558:	4b65      	ldr	r3, [pc, #404]	; (80076f0 <__gethex+0x308>)
 800755a:	4602      	mov	r2, r0
 800755c:	21de      	movs	r1, #222	; 0xde
 800755e:	4865      	ldr	r0, [pc, #404]	; (80076f4 <__gethex+0x30c>)
 8007560:	f001 f97e 	bl	8008860 <__assert_func>
 8007564:	3101      	adds	r1, #1
 8007566:	105b      	asrs	r3, r3, #1
 8007568:	e7ee      	b.n	8007548 <__gethex+0x160>
 800756a:	f100 0914 	add.w	r9, r0, #20
 800756e:	f04f 0b00 	mov.w	fp, #0
 8007572:	f1ca 0301 	rsb	r3, sl, #1
 8007576:	f8cd 9008 	str.w	r9, [sp, #8]
 800757a:	f8cd b000 	str.w	fp, [sp]
 800757e:	9306      	str	r3, [sp, #24]
 8007580:	42b7      	cmp	r7, r6
 8007582:	d340      	bcc.n	8007606 <__gethex+0x21e>
 8007584:	9802      	ldr	r0, [sp, #8]
 8007586:	9b00      	ldr	r3, [sp, #0]
 8007588:	f840 3b04 	str.w	r3, [r0], #4
 800758c:	eba0 0009 	sub.w	r0, r0, r9
 8007590:	1080      	asrs	r0, r0, #2
 8007592:	0146      	lsls	r6, r0, #5
 8007594:	6120      	str	r0, [r4, #16]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fb50 	bl	8007c3c <__hi0bits>
 800759c:	1a30      	subs	r0, r6, r0
 800759e:	f8d8 6000 	ldr.w	r6, [r8]
 80075a2:	42b0      	cmp	r0, r6
 80075a4:	dd63      	ble.n	800766e <__gethex+0x286>
 80075a6:	1b87      	subs	r7, r0, r6
 80075a8:	4639      	mov	r1, r7
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 feea 	bl	8008384 <__any_on>
 80075b0:	4682      	mov	sl, r0
 80075b2:	b1a8      	cbz	r0, 80075e0 <__gethex+0x1f8>
 80075b4:	1e7b      	subs	r3, r7, #1
 80075b6:	1159      	asrs	r1, r3, #5
 80075b8:	f003 021f 	and.w	r2, r3, #31
 80075bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80075c0:	f04f 0a01 	mov.w	sl, #1
 80075c4:	fa0a f202 	lsl.w	r2, sl, r2
 80075c8:	420a      	tst	r2, r1
 80075ca:	d009      	beq.n	80075e0 <__gethex+0x1f8>
 80075cc:	4553      	cmp	r3, sl
 80075ce:	dd05      	ble.n	80075dc <__gethex+0x1f4>
 80075d0:	1eb9      	subs	r1, r7, #2
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 fed6 	bl	8008384 <__any_on>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d145      	bne.n	8007668 <__gethex+0x280>
 80075dc:	f04f 0a02 	mov.w	sl, #2
 80075e0:	4639      	mov	r1, r7
 80075e2:	4620      	mov	r0, r4
 80075e4:	f7ff fe98 	bl	8007318 <rshift>
 80075e8:	443d      	add	r5, r7
 80075ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075ee:	42ab      	cmp	r3, r5
 80075f0:	da4c      	bge.n	800768c <__gethex+0x2a4>
 80075f2:	ee18 0a10 	vmov	r0, s16
 80075f6:	4621      	mov	r1, r4
 80075f8:	f000 fa6a 	bl	8007ad0 <_Bfree>
 80075fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075fe:	2300      	movs	r3, #0
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	27a3      	movs	r7, #163	; 0xa3
 8007604:	e785      	b.n	8007512 <__gethex+0x12a>
 8007606:	1e73      	subs	r3, r6, #1
 8007608:	9a05      	ldr	r2, [sp, #20]
 800760a:	9303      	str	r3, [sp, #12]
 800760c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007610:	4293      	cmp	r3, r2
 8007612:	d019      	beq.n	8007648 <__gethex+0x260>
 8007614:	f1bb 0f20 	cmp.w	fp, #32
 8007618:	d107      	bne.n	800762a <__gethex+0x242>
 800761a:	9b02      	ldr	r3, [sp, #8]
 800761c:	9a00      	ldr	r2, [sp, #0]
 800761e:	f843 2b04 	str.w	r2, [r3], #4
 8007622:	9302      	str	r3, [sp, #8]
 8007624:	2300      	movs	r3, #0
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	469b      	mov	fp, r3
 800762a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800762e:	f7ff fec5 	bl	80073bc <__hexdig_fun>
 8007632:	9b00      	ldr	r3, [sp, #0]
 8007634:	f000 000f 	and.w	r0, r0, #15
 8007638:	fa00 f00b 	lsl.w	r0, r0, fp
 800763c:	4303      	orrs	r3, r0
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	f10b 0b04 	add.w	fp, fp, #4
 8007644:	9b03      	ldr	r3, [sp, #12]
 8007646:	e00d      	b.n	8007664 <__gethex+0x27c>
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	9a06      	ldr	r2, [sp, #24]
 800764c:	4413      	add	r3, r2
 800764e:	42bb      	cmp	r3, r7
 8007650:	d3e0      	bcc.n	8007614 <__gethex+0x22c>
 8007652:	4618      	mov	r0, r3
 8007654:	9901      	ldr	r1, [sp, #4]
 8007656:	9307      	str	r3, [sp, #28]
 8007658:	4652      	mov	r2, sl
 800765a:	f001 f8e1 	bl	8008820 <strncmp>
 800765e:	9b07      	ldr	r3, [sp, #28]
 8007660:	2800      	cmp	r0, #0
 8007662:	d1d7      	bne.n	8007614 <__gethex+0x22c>
 8007664:	461e      	mov	r6, r3
 8007666:	e78b      	b.n	8007580 <__gethex+0x198>
 8007668:	f04f 0a03 	mov.w	sl, #3
 800766c:	e7b8      	b.n	80075e0 <__gethex+0x1f8>
 800766e:	da0a      	bge.n	8007686 <__gethex+0x29e>
 8007670:	1a37      	subs	r7, r6, r0
 8007672:	4621      	mov	r1, r4
 8007674:	ee18 0a10 	vmov	r0, s16
 8007678:	463a      	mov	r2, r7
 800767a:	f000 fc45 	bl	8007f08 <__lshift>
 800767e:	1bed      	subs	r5, r5, r7
 8007680:	4604      	mov	r4, r0
 8007682:	f100 0914 	add.w	r9, r0, #20
 8007686:	f04f 0a00 	mov.w	sl, #0
 800768a:	e7ae      	b.n	80075ea <__gethex+0x202>
 800768c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007690:	42a8      	cmp	r0, r5
 8007692:	dd72      	ble.n	800777a <__gethex+0x392>
 8007694:	1b45      	subs	r5, r0, r5
 8007696:	42ae      	cmp	r6, r5
 8007698:	dc36      	bgt.n	8007708 <__gethex+0x320>
 800769a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d02a      	beq.n	80076f8 <__gethex+0x310>
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d02c      	beq.n	8007700 <__gethex+0x318>
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d115      	bne.n	80076d6 <__gethex+0x2ee>
 80076aa:	42ae      	cmp	r6, r5
 80076ac:	d113      	bne.n	80076d6 <__gethex+0x2ee>
 80076ae:	2e01      	cmp	r6, #1
 80076b0:	d10b      	bne.n	80076ca <__gethex+0x2e2>
 80076b2:	9a04      	ldr	r2, [sp, #16]
 80076b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	2301      	movs	r3, #1
 80076bc:	6123      	str	r3, [r4, #16]
 80076be:	f8c9 3000 	str.w	r3, [r9]
 80076c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076c4:	2762      	movs	r7, #98	; 0x62
 80076c6:	601c      	str	r4, [r3, #0]
 80076c8:	e723      	b.n	8007512 <__gethex+0x12a>
 80076ca:	1e71      	subs	r1, r6, #1
 80076cc:	4620      	mov	r0, r4
 80076ce:	f000 fe59 	bl	8008384 <__any_on>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d1ed      	bne.n	80076b2 <__gethex+0x2ca>
 80076d6:	ee18 0a10 	vmov	r0, s16
 80076da:	4621      	mov	r1, r4
 80076dc:	f000 f9f8 	bl	8007ad0 <_Bfree>
 80076e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076e2:	2300      	movs	r3, #0
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	2750      	movs	r7, #80	; 0x50
 80076e8:	e713      	b.n	8007512 <__gethex+0x12a>
 80076ea:	bf00      	nop
 80076ec:	08009e88 	.word	0x08009e88
 80076f0:	08009e0c 	.word	0x08009e0c
 80076f4:	08009e1d 	.word	0x08009e1d
 80076f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1eb      	bne.n	80076d6 <__gethex+0x2ee>
 80076fe:	e7d8      	b.n	80076b2 <__gethex+0x2ca>
 8007700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1d5      	bne.n	80076b2 <__gethex+0x2ca>
 8007706:	e7e6      	b.n	80076d6 <__gethex+0x2ee>
 8007708:	1e6f      	subs	r7, r5, #1
 800770a:	f1ba 0f00 	cmp.w	sl, #0
 800770e:	d131      	bne.n	8007774 <__gethex+0x38c>
 8007710:	b127      	cbz	r7, 800771c <__gethex+0x334>
 8007712:	4639      	mov	r1, r7
 8007714:	4620      	mov	r0, r4
 8007716:	f000 fe35 	bl	8008384 <__any_on>
 800771a:	4682      	mov	sl, r0
 800771c:	117b      	asrs	r3, r7, #5
 800771e:	2101      	movs	r1, #1
 8007720:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007724:	f007 071f 	and.w	r7, r7, #31
 8007728:	fa01 f707 	lsl.w	r7, r1, r7
 800772c:	421f      	tst	r7, r3
 800772e:	4629      	mov	r1, r5
 8007730:	4620      	mov	r0, r4
 8007732:	bf18      	it	ne
 8007734:	f04a 0a02 	orrne.w	sl, sl, #2
 8007738:	1b76      	subs	r6, r6, r5
 800773a:	f7ff fded 	bl	8007318 <rshift>
 800773e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007742:	2702      	movs	r7, #2
 8007744:	f1ba 0f00 	cmp.w	sl, #0
 8007748:	d048      	beq.n	80077dc <__gethex+0x3f4>
 800774a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d015      	beq.n	800777e <__gethex+0x396>
 8007752:	2b03      	cmp	r3, #3
 8007754:	d017      	beq.n	8007786 <__gethex+0x39e>
 8007756:	2b01      	cmp	r3, #1
 8007758:	d109      	bne.n	800776e <__gethex+0x386>
 800775a:	f01a 0f02 	tst.w	sl, #2
 800775e:	d006      	beq.n	800776e <__gethex+0x386>
 8007760:	f8d9 0000 	ldr.w	r0, [r9]
 8007764:	ea4a 0a00 	orr.w	sl, sl, r0
 8007768:	f01a 0f01 	tst.w	sl, #1
 800776c:	d10e      	bne.n	800778c <__gethex+0x3a4>
 800776e:	f047 0710 	orr.w	r7, r7, #16
 8007772:	e033      	b.n	80077dc <__gethex+0x3f4>
 8007774:	f04f 0a01 	mov.w	sl, #1
 8007778:	e7d0      	b.n	800771c <__gethex+0x334>
 800777a:	2701      	movs	r7, #1
 800777c:	e7e2      	b.n	8007744 <__gethex+0x35c>
 800777e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007780:	f1c3 0301 	rsb	r3, r3, #1
 8007784:	9315      	str	r3, [sp, #84]	; 0x54
 8007786:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007788:	2b00      	cmp	r3, #0
 800778a:	d0f0      	beq.n	800776e <__gethex+0x386>
 800778c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007790:	f104 0314 	add.w	r3, r4, #20
 8007794:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007798:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800779c:	f04f 0c00 	mov.w	ip, #0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80077aa:	d01c      	beq.n	80077e6 <__gethex+0x3fe>
 80077ac:	3201      	adds	r2, #1
 80077ae:	6002      	str	r2, [r0, #0]
 80077b0:	2f02      	cmp	r7, #2
 80077b2:	f104 0314 	add.w	r3, r4, #20
 80077b6:	d13f      	bne.n	8007838 <__gethex+0x450>
 80077b8:	f8d8 2000 	ldr.w	r2, [r8]
 80077bc:	3a01      	subs	r2, #1
 80077be:	42b2      	cmp	r2, r6
 80077c0:	d10a      	bne.n	80077d8 <__gethex+0x3f0>
 80077c2:	1171      	asrs	r1, r6, #5
 80077c4:	2201      	movs	r2, #1
 80077c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077ca:	f006 061f 	and.w	r6, r6, #31
 80077ce:	fa02 f606 	lsl.w	r6, r2, r6
 80077d2:	421e      	tst	r6, r3
 80077d4:	bf18      	it	ne
 80077d6:	4617      	movne	r7, r2
 80077d8:	f047 0720 	orr.w	r7, r7, #32
 80077dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077de:	601c      	str	r4, [r3, #0]
 80077e0:	9b04      	ldr	r3, [sp, #16]
 80077e2:	601d      	str	r5, [r3, #0]
 80077e4:	e695      	b.n	8007512 <__gethex+0x12a>
 80077e6:	4299      	cmp	r1, r3
 80077e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80077ec:	d8d8      	bhi.n	80077a0 <__gethex+0x3b8>
 80077ee:	68a3      	ldr	r3, [r4, #8]
 80077f0:	459b      	cmp	fp, r3
 80077f2:	db19      	blt.n	8007828 <__gethex+0x440>
 80077f4:	6861      	ldr	r1, [r4, #4]
 80077f6:	ee18 0a10 	vmov	r0, s16
 80077fa:	3101      	adds	r1, #1
 80077fc:	f000 f928 	bl	8007a50 <_Balloc>
 8007800:	4681      	mov	r9, r0
 8007802:	b918      	cbnz	r0, 800780c <__gethex+0x424>
 8007804:	4b1a      	ldr	r3, [pc, #104]	; (8007870 <__gethex+0x488>)
 8007806:	4602      	mov	r2, r0
 8007808:	2184      	movs	r1, #132	; 0x84
 800780a:	e6a8      	b.n	800755e <__gethex+0x176>
 800780c:	6922      	ldr	r2, [r4, #16]
 800780e:	3202      	adds	r2, #2
 8007810:	f104 010c 	add.w	r1, r4, #12
 8007814:	0092      	lsls	r2, r2, #2
 8007816:	300c      	adds	r0, #12
 8007818:	f000 f90c 	bl	8007a34 <memcpy>
 800781c:	4621      	mov	r1, r4
 800781e:	ee18 0a10 	vmov	r0, s16
 8007822:	f000 f955 	bl	8007ad0 <_Bfree>
 8007826:	464c      	mov	r4, r9
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007830:	6122      	str	r2, [r4, #16]
 8007832:	2201      	movs	r2, #1
 8007834:	615a      	str	r2, [r3, #20]
 8007836:	e7bb      	b.n	80077b0 <__gethex+0x3c8>
 8007838:	6922      	ldr	r2, [r4, #16]
 800783a:	455a      	cmp	r2, fp
 800783c:	dd0b      	ble.n	8007856 <__gethex+0x46e>
 800783e:	2101      	movs	r1, #1
 8007840:	4620      	mov	r0, r4
 8007842:	f7ff fd69 	bl	8007318 <rshift>
 8007846:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800784a:	3501      	adds	r5, #1
 800784c:	42ab      	cmp	r3, r5
 800784e:	f6ff aed0 	blt.w	80075f2 <__gethex+0x20a>
 8007852:	2701      	movs	r7, #1
 8007854:	e7c0      	b.n	80077d8 <__gethex+0x3f0>
 8007856:	f016 061f 	ands.w	r6, r6, #31
 800785a:	d0fa      	beq.n	8007852 <__gethex+0x46a>
 800785c:	449a      	add	sl, r3
 800785e:	f1c6 0620 	rsb	r6, r6, #32
 8007862:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007866:	f000 f9e9 	bl	8007c3c <__hi0bits>
 800786a:	42b0      	cmp	r0, r6
 800786c:	dbe7      	blt.n	800783e <__gethex+0x456>
 800786e:	e7f0      	b.n	8007852 <__gethex+0x46a>
 8007870:	08009e0c 	.word	0x08009e0c

08007874 <L_shift>:
 8007874:	f1c2 0208 	rsb	r2, r2, #8
 8007878:	0092      	lsls	r2, r2, #2
 800787a:	b570      	push	{r4, r5, r6, lr}
 800787c:	f1c2 0620 	rsb	r6, r2, #32
 8007880:	6843      	ldr	r3, [r0, #4]
 8007882:	6804      	ldr	r4, [r0, #0]
 8007884:	fa03 f506 	lsl.w	r5, r3, r6
 8007888:	432c      	orrs	r4, r5
 800788a:	40d3      	lsrs	r3, r2
 800788c:	6004      	str	r4, [r0, #0]
 800788e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007892:	4288      	cmp	r0, r1
 8007894:	d3f4      	bcc.n	8007880 <L_shift+0xc>
 8007896:	bd70      	pop	{r4, r5, r6, pc}

08007898 <__match>:
 8007898:	b530      	push	{r4, r5, lr}
 800789a:	6803      	ldr	r3, [r0, #0]
 800789c:	3301      	adds	r3, #1
 800789e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078a2:	b914      	cbnz	r4, 80078aa <__match+0x12>
 80078a4:	6003      	str	r3, [r0, #0]
 80078a6:	2001      	movs	r0, #1
 80078a8:	bd30      	pop	{r4, r5, pc}
 80078aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80078b2:	2d19      	cmp	r5, #25
 80078b4:	bf98      	it	ls
 80078b6:	3220      	addls	r2, #32
 80078b8:	42a2      	cmp	r2, r4
 80078ba:	d0f0      	beq.n	800789e <__match+0x6>
 80078bc:	2000      	movs	r0, #0
 80078be:	e7f3      	b.n	80078a8 <__match+0x10>

080078c0 <__hexnan>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	680b      	ldr	r3, [r1, #0]
 80078c6:	6801      	ldr	r1, [r0, #0]
 80078c8:	115e      	asrs	r6, r3, #5
 80078ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80078ce:	f013 031f 	ands.w	r3, r3, #31
 80078d2:	b087      	sub	sp, #28
 80078d4:	bf18      	it	ne
 80078d6:	3604      	addne	r6, #4
 80078d8:	2500      	movs	r5, #0
 80078da:	1f37      	subs	r7, r6, #4
 80078dc:	4682      	mov	sl, r0
 80078de:	4690      	mov	r8, r2
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80078e6:	46b9      	mov	r9, r7
 80078e8:	463c      	mov	r4, r7
 80078ea:	9502      	str	r5, [sp, #8]
 80078ec:	46ab      	mov	fp, r5
 80078ee:	784a      	ldrb	r2, [r1, #1]
 80078f0:	1c4b      	adds	r3, r1, #1
 80078f2:	9303      	str	r3, [sp, #12]
 80078f4:	b342      	cbz	r2, 8007948 <__hexnan+0x88>
 80078f6:	4610      	mov	r0, r2
 80078f8:	9105      	str	r1, [sp, #20]
 80078fa:	9204      	str	r2, [sp, #16]
 80078fc:	f7ff fd5e 	bl	80073bc <__hexdig_fun>
 8007900:	2800      	cmp	r0, #0
 8007902:	d14f      	bne.n	80079a4 <__hexnan+0xe4>
 8007904:	9a04      	ldr	r2, [sp, #16]
 8007906:	9905      	ldr	r1, [sp, #20]
 8007908:	2a20      	cmp	r2, #32
 800790a:	d818      	bhi.n	800793e <__hexnan+0x7e>
 800790c:	9b02      	ldr	r3, [sp, #8]
 800790e:	459b      	cmp	fp, r3
 8007910:	dd13      	ble.n	800793a <__hexnan+0x7a>
 8007912:	454c      	cmp	r4, r9
 8007914:	d206      	bcs.n	8007924 <__hexnan+0x64>
 8007916:	2d07      	cmp	r5, #7
 8007918:	dc04      	bgt.n	8007924 <__hexnan+0x64>
 800791a:	462a      	mov	r2, r5
 800791c:	4649      	mov	r1, r9
 800791e:	4620      	mov	r0, r4
 8007920:	f7ff ffa8 	bl	8007874 <L_shift>
 8007924:	4544      	cmp	r4, r8
 8007926:	d950      	bls.n	80079ca <__hexnan+0x10a>
 8007928:	2300      	movs	r3, #0
 800792a:	f1a4 0904 	sub.w	r9, r4, #4
 800792e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007932:	f8cd b008 	str.w	fp, [sp, #8]
 8007936:	464c      	mov	r4, r9
 8007938:	461d      	mov	r5, r3
 800793a:	9903      	ldr	r1, [sp, #12]
 800793c:	e7d7      	b.n	80078ee <__hexnan+0x2e>
 800793e:	2a29      	cmp	r2, #41	; 0x29
 8007940:	d156      	bne.n	80079f0 <__hexnan+0x130>
 8007942:	3102      	adds	r1, #2
 8007944:	f8ca 1000 	str.w	r1, [sl]
 8007948:	f1bb 0f00 	cmp.w	fp, #0
 800794c:	d050      	beq.n	80079f0 <__hexnan+0x130>
 800794e:	454c      	cmp	r4, r9
 8007950:	d206      	bcs.n	8007960 <__hexnan+0xa0>
 8007952:	2d07      	cmp	r5, #7
 8007954:	dc04      	bgt.n	8007960 <__hexnan+0xa0>
 8007956:	462a      	mov	r2, r5
 8007958:	4649      	mov	r1, r9
 800795a:	4620      	mov	r0, r4
 800795c:	f7ff ff8a 	bl	8007874 <L_shift>
 8007960:	4544      	cmp	r4, r8
 8007962:	d934      	bls.n	80079ce <__hexnan+0x10e>
 8007964:	f1a8 0204 	sub.w	r2, r8, #4
 8007968:	4623      	mov	r3, r4
 800796a:	f853 1b04 	ldr.w	r1, [r3], #4
 800796e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007972:	429f      	cmp	r7, r3
 8007974:	d2f9      	bcs.n	800796a <__hexnan+0xaa>
 8007976:	1b3b      	subs	r3, r7, r4
 8007978:	f023 0303 	bic.w	r3, r3, #3
 800797c:	3304      	adds	r3, #4
 800797e:	3401      	adds	r4, #1
 8007980:	3e03      	subs	r6, #3
 8007982:	42b4      	cmp	r4, r6
 8007984:	bf88      	it	hi
 8007986:	2304      	movhi	r3, #4
 8007988:	4443      	add	r3, r8
 800798a:	2200      	movs	r2, #0
 800798c:	f843 2b04 	str.w	r2, [r3], #4
 8007990:	429f      	cmp	r7, r3
 8007992:	d2fb      	bcs.n	800798c <__hexnan+0xcc>
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	b91b      	cbnz	r3, 80079a0 <__hexnan+0xe0>
 8007998:	4547      	cmp	r7, r8
 800799a:	d127      	bne.n	80079ec <__hexnan+0x12c>
 800799c:	2301      	movs	r3, #1
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	2005      	movs	r0, #5
 80079a2:	e026      	b.n	80079f2 <__hexnan+0x132>
 80079a4:	3501      	adds	r5, #1
 80079a6:	2d08      	cmp	r5, #8
 80079a8:	f10b 0b01 	add.w	fp, fp, #1
 80079ac:	dd06      	ble.n	80079bc <__hexnan+0xfc>
 80079ae:	4544      	cmp	r4, r8
 80079b0:	d9c3      	bls.n	800793a <__hexnan+0x7a>
 80079b2:	2300      	movs	r3, #0
 80079b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80079b8:	2501      	movs	r5, #1
 80079ba:	3c04      	subs	r4, #4
 80079bc:	6822      	ldr	r2, [r4, #0]
 80079be:	f000 000f 	and.w	r0, r0, #15
 80079c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80079c6:	6022      	str	r2, [r4, #0]
 80079c8:	e7b7      	b.n	800793a <__hexnan+0x7a>
 80079ca:	2508      	movs	r5, #8
 80079cc:	e7b5      	b.n	800793a <__hexnan+0x7a>
 80079ce:	9b01      	ldr	r3, [sp, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0df      	beq.n	8007994 <__hexnan+0xd4>
 80079d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079d8:	f1c3 0320 	rsb	r3, r3, #32
 80079dc:	fa22 f303 	lsr.w	r3, r2, r3
 80079e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80079e4:	401a      	ands	r2, r3
 80079e6:	f846 2c04 	str.w	r2, [r6, #-4]
 80079ea:	e7d3      	b.n	8007994 <__hexnan+0xd4>
 80079ec:	3f04      	subs	r7, #4
 80079ee:	e7d1      	b.n	8007994 <__hexnan+0xd4>
 80079f0:	2004      	movs	r0, #4
 80079f2:	b007      	add	sp, #28
 80079f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079f8 <_localeconv_r>:
 80079f8:	4800      	ldr	r0, [pc, #0]	; (80079fc <_localeconv_r+0x4>)
 80079fa:	4770      	bx	lr
 80079fc:	2000016c 	.word	0x2000016c

08007a00 <malloc>:
 8007a00:	4b02      	ldr	r3, [pc, #8]	; (8007a0c <malloc+0xc>)
 8007a02:	4601      	mov	r1, r0
 8007a04:	6818      	ldr	r0, [r3, #0]
 8007a06:	f000 bd3d 	b.w	8008484 <_malloc_r>
 8007a0a:	bf00      	nop
 8007a0c:	20000014 	.word	0x20000014

08007a10 <__ascii_mbtowc>:
 8007a10:	b082      	sub	sp, #8
 8007a12:	b901      	cbnz	r1, 8007a16 <__ascii_mbtowc+0x6>
 8007a14:	a901      	add	r1, sp, #4
 8007a16:	b142      	cbz	r2, 8007a2a <__ascii_mbtowc+0x1a>
 8007a18:	b14b      	cbz	r3, 8007a2e <__ascii_mbtowc+0x1e>
 8007a1a:	7813      	ldrb	r3, [r2, #0]
 8007a1c:	600b      	str	r3, [r1, #0]
 8007a1e:	7812      	ldrb	r2, [r2, #0]
 8007a20:	1e10      	subs	r0, r2, #0
 8007a22:	bf18      	it	ne
 8007a24:	2001      	movne	r0, #1
 8007a26:	b002      	add	sp, #8
 8007a28:	4770      	bx	lr
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	e7fb      	b.n	8007a26 <__ascii_mbtowc+0x16>
 8007a2e:	f06f 0001 	mvn.w	r0, #1
 8007a32:	e7f8      	b.n	8007a26 <__ascii_mbtowc+0x16>

08007a34 <memcpy>:
 8007a34:	440a      	add	r2, r1
 8007a36:	4291      	cmp	r1, r2
 8007a38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007a3c:	d100      	bne.n	8007a40 <memcpy+0xc>
 8007a3e:	4770      	bx	lr
 8007a40:	b510      	push	{r4, lr}
 8007a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a4a:	4291      	cmp	r1, r2
 8007a4c:	d1f9      	bne.n	8007a42 <memcpy+0xe>
 8007a4e:	bd10      	pop	{r4, pc}

08007a50 <_Balloc>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a54:	4604      	mov	r4, r0
 8007a56:	460d      	mov	r5, r1
 8007a58:	b976      	cbnz	r6, 8007a78 <_Balloc+0x28>
 8007a5a:	2010      	movs	r0, #16
 8007a5c:	f7ff ffd0 	bl	8007a00 <malloc>
 8007a60:	4602      	mov	r2, r0
 8007a62:	6260      	str	r0, [r4, #36]	; 0x24
 8007a64:	b920      	cbnz	r0, 8007a70 <_Balloc+0x20>
 8007a66:	4b18      	ldr	r3, [pc, #96]	; (8007ac8 <_Balloc+0x78>)
 8007a68:	4818      	ldr	r0, [pc, #96]	; (8007acc <_Balloc+0x7c>)
 8007a6a:	2166      	movs	r1, #102	; 0x66
 8007a6c:	f000 fef8 	bl	8008860 <__assert_func>
 8007a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a74:	6006      	str	r6, [r0, #0]
 8007a76:	60c6      	str	r6, [r0, #12]
 8007a78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a7a:	68f3      	ldr	r3, [r6, #12]
 8007a7c:	b183      	cbz	r3, 8007aa0 <_Balloc+0x50>
 8007a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a86:	b9b8      	cbnz	r0, 8007ab8 <_Balloc+0x68>
 8007a88:	2101      	movs	r1, #1
 8007a8a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a8e:	1d72      	adds	r2, r6, #5
 8007a90:	0092      	lsls	r2, r2, #2
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 fc97 	bl	80083c6 <_calloc_r>
 8007a98:	b160      	cbz	r0, 8007ab4 <_Balloc+0x64>
 8007a9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a9e:	e00e      	b.n	8007abe <_Balloc+0x6e>
 8007aa0:	2221      	movs	r2, #33	; 0x21
 8007aa2:	2104      	movs	r1, #4
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 fc8e 	bl	80083c6 <_calloc_r>
 8007aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aac:	60f0      	str	r0, [r6, #12]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e4      	bne.n	8007a7e <_Balloc+0x2e>
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
 8007ab8:	6802      	ldr	r2, [r0, #0]
 8007aba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ac4:	e7f7      	b.n	8007ab6 <_Balloc+0x66>
 8007ac6:	bf00      	nop
 8007ac8:	08009d96 	.word	0x08009d96
 8007acc:	08009e9c 	.word	0x08009e9c

08007ad0 <_Bfree>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	b976      	cbnz	r6, 8007af8 <_Bfree+0x28>
 8007ada:	2010      	movs	r0, #16
 8007adc:	f7ff ff90 	bl	8007a00 <malloc>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	6268      	str	r0, [r5, #36]	; 0x24
 8007ae4:	b920      	cbnz	r0, 8007af0 <_Bfree+0x20>
 8007ae6:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <_Bfree+0x3c>)
 8007ae8:	4809      	ldr	r0, [pc, #36]	; (8007b10 <_Bfree+0x40>)
 8007aea:	218a      	movs	r1, #138	; 0x8a
 8007aec:	f000 feb8 	bl	8008860 <__assert_func>
 8007af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007af4:	6006      	str	r6, [r0, #0]
 8007af6:	60c6      	str	r6, [r0, #12]
 8007af8:	b13c      	cbz	r4, 8007b0a <_Bfree+0x3a>
 8007afa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007afc:	6862      	ldr	r2, [r4, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b04:	6021      	str	r1, [r4, #0]
 8007b06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	08009d96 	.word	0x08009d96
 8007b10:	08009e9c 	.word	0x08009e9c

08007b14 <__multadd>:
 8007b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b18:	690e      	ldr	r6, [r1, #16]
 8007b1a:	4607      	mov	r7, r0
 8007b1c:	4698      	mov	r8, r3
 8007b1e:	460c      	mov	r4, r1
 8007b20:	f101 0014 	add.w	r0, r1, #20
 8007b24:	2300      	movs	r3, #0
 8007b26:	6805      	ldr	r5, [r0, #0]
 8007b28:	b2a9      	uxth	r1, r5
 8007b2a:	fb02 8101 	mla	r1, r2, r1, r8
 8007b2e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007b32:	0c2d      	lsrs	r5, r5, #16
 8007b34:	fb02 c505 	mla	r5, r2, r5, ip
 8007b38:	b289      	uxth	r1, r1
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007b40:	429e      	cmp	r6, r3
 8007b42:	f840 1b04 	str.w	r1, [r0], #4
 8007b46:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007b4a:	dcec      	bgt.n	8007b26 <__multadd+0x12>
 8007b4c:	f1b8 0f00 	cmp.w	r8, #0
 8007b50:	d022      	beq.n	8007b98 <__multadd+0x84>
 8007b52:	68a3      	ldr	r3, [r4, #8]
 8007b54:	42b3      	cmp	r3, r6
 8007b56:	dc19      	bgt.n	8007b8c <__multadd+0x78>
 8007b58:	6861      	ldr	r1, [r4, #4]
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	3101      	adds	r1, #1
 8007b5e:	f7ff ff77 	bl	8007a50 <_Balloc>
 8007b62:	4605      	mov	r5, r0
 8007b64:	b928      	cbnz	r0, 8007b72 <__multadd+0x5e>
 8007b66:	4602      	mov	r2, r0
 8007b68:	4b0d      	ldr	r3, [pc, #52]	; (8007ba0 <__multadd+0x8c>)
 8007b6a:	480e      	ldr	r0, [pc, #56]	; (8007ba4 <__multadd+0x90>)
 8007b6c:	21b5      	movs	r1, #181	; 0xb5
 8007b6e:	f000 fe77 	bl	8008860 <__assert_func>
 8007b72:	6922      	ldr	r2, [r4, #16]
 8007b74:	3202      	adds	r2, #2
 8007b76:	f104 010c 	add.w	r1, r4, #12
 8007b7a:	0092      	lsls	r2, r2, #2
 8007b7c:	300c      	adds	r0, #12
 8007b7e:	f7ff ff59 	bl	8007a34 <memcpy>
 8007b82:	4621      	mov	r1, r4
 8007b84:	4638      	mov	r0, r7
 8007b86:	f7ff ffa3 	bl	8007ad0 <_Bfree>
 8007b8a:	462c      	mov	r4, r5
 8007b8c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007b90:	3601      	adds	r6, #1
 8007b92:	f8c3 8014 	str.w	r8, [r3, #20]
 8007b96:	6126      	str	r6, [r4, #16]
 8007b98:	4620      	mov	r0, r4
 8007b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b9e:	bf00      	nop
 8007ba0:	08009e0c 	.word	0x08009e0c
 8007ba4:	08009e9c 	.word	0x08009e9c

08007ba8 <__s2b>:
 8007ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	460c      	mov	r4, r1
 8007bae:	4615      	mov	r5, r2
 8007bb0:	461f      	mov	r7, r3
 8007bb2:	2209      	movs	r2, #9
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	db09      	blt.n	8007bd8 <__s2b+0x30>
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f7ff ff43 	bl	8007a50 <_Balloc>
 8007bca:	b940      	cbnz	r0, 8007bde <__s2b+0x36>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	4b19      	ldr	r3, [pc, #100]	; (8007c34 <__s2b+0x8c>)
 8007bd0:	4819      	ldr	r0, [pc, #100]	; (8007c38 <__s2b+0x90>)
 8007bd2:	21ce      	movs	r1, #206	; 0xce
 8007bd4:	f000 fe44 	bl	8008860 <__assert_func>
 8007bd8:	0052      	lsls	r2, r2, #1
 8007bda:	3101      	adds	r1, #1
 8007bdc:	e7f0      	b.n	8007bc0 <__s2b+0x18>
 8007bde:	9b08      	ldr	r3, [sp, #32]
 8007be0:	6143      	str	r3, [r0, #20]
 8007be2:	2d09      	cmp	r5, #9
 8007be4:	f04f 0301 	mov.w	r3, #1
 8007be8:	6103      	str	r3, [r0, #16]
 8007bea:	dd16      	ble.n	8007c1a <__s2b+0x72>
 8007bec:	f104 0909 	add.w	r9, r4, #9
 8007bf0:	46c8      	mov	r8, r9
 8007bf2:	442c      	add	r4, r5
 8007bf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007bf8:	4601      	mov	r1, r0
 8007bfa:	3b30      	subs	r3, #48	; 0x30
 8007bfc:	220a      	movs	r2, #10
 8007bfe:	4630      	mov	r0, r6
 8007c00:	f7ff ff88 	bl	8007b14 <__multadd>
 8007c04:	45a0      	cmp	r8, r4
 8007c06:	d1f5      	bne.n	8007bf4 <__s2b+0x4c>
 8007c08:	f1a5 0408 	sub.w	r4, r5, #8
 8007c0c:	444c      	add	r4, r9
 8007c0e:	1b2d      	subs	r5, r5, r4
 8007c10:	1963      	adds	r3, r4, r5
 8007c12:	42bb      	cmp	r3, r7
 8007c14:	db04      	blt.n	8007c20 <__s2b+0x78>
 8007c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c1a:	340a      	adds	r4, #10
 8007c1c:	2509      	movs	r5, #9
 8007c1e:	e7f6      	b.n	8007c0e <__s2b+0x66>
 8007c20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c24:	4601      	mov	r1, r0
 8007c26:	3b30      	subs	r3, #48	; 0x30
 8007c28:	220a      	movs	r2, #10
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f7ff ff72 	bl	8007b14 <__multadd>
 8007c30:	e7ee      	b.n	8007c10 <__s2b+0x68>
 8007c32:	bf00      	nop
 8007c34:	08009e0c 	.word	0x08009e0c
 8007c38:	08009e9c 	.word	0x08009e9c

08007c3c <__hi0bits>:
 8007c3c:	0c03      	lsrs	r3, r0, #16
 8007c3e:	041b      	lsls	r3, r3, #16
 8007c40:	b9d3      	cbnz	r3, 8007c78 <__hi0bits+0x3c>
 8007c42:	0400      	lsls	r0, r0, #16
 8007c44:	2310      	movs	r3, #16
 8007c46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c4a:	bf04      	itt	eq
 8007c4c:	0200      	lsleq	r0, r0, #8
 8007c4e:	3308      	addeq	r3, #8
 8007c50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c54:	bf04      	itt	eq
 8007c56:	0100      	lsleq	r0, r0, #4
 8007c58:	3304      	addeq	r3, #4
 8007c5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c5e:	bf04      	itt	eq
 8007c60:	0080      	lsleq	r0, r0, #2
 8007c62:	3302      	addeq	r3, #2
 8007c64:	2800      	cmp	r0, #0
 8007c66:	db05      	blt.n	8007c74 <__hi0bits+0x38>
 8007c68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c6c:	f103 0301 	add.w	r3, r3, #1
 8007c70:	bf08      	it	eq
 8007c72:	2320      	moveq	r3, #32
 8007c74:	4618      	mov	r0, r3
 8007c76:	4770      	bx	lr
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e7e4      	b.n	8007c46 <__hi0bits+0xa>

08007c7c <__lo0bits>:
 8007c7c:	6803      	ldr	r3, [r0, #0]
 8007c7e:	f013 0207 	ands.w	r2, r3, #7
 8007c82:	4601      	mov	r1, r0
 8007c84:	d00b      	beq.n	8007c9e <__lo0bits+0x22>
 8007c86:	07da      	lsls	r2, r3, #31
 8007c88:	d424      	bmi.n	8007cd4 <__lo0bits+0x58>
 8007c8a:	0798      	lsls	r0, r3, #30
 8007c8c:	bf49      	itett	mi
 8007c8e:	085b      	lsrmi	r3, r3, #1
 8007c90:	089b      	lsrpl	r3, r3, #2
 8007c92:	2001      	movmi	r0, #1
 8007c94:	600b      	strmi	r3, [r1, #0]
 8007c96:	bf5c      	itt	pl
 8007c98:	600b      	strpl	r3, [r1, #0]
 8007c9a:	2002      	movpl	r0, #2
 8007c9c:	4770      	bx	lr
 8007c9e:	b298      	uxth	r0, r3
 8007ca0:	b9b0      	cbnz	r0, 8007cd0 <__lo0bits+0x54>
 8007ca2:	0c1b      	lsrs	r3, r3, #16
 8007ca4:	2010      	movs	r0, #16
 8007ca6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007caa:	bf04      	itt	eq
 8007cac:	0a1b      	lsreq	r3, r3, #8
 8007cae:	3008      	addeq	r0, #8
 8007cb0:	071a      	lsls	r2, r3, #28
 8007cb2:	bf04      	itt	eq
 8007cb4:	091b      	lsreq	r3, r3, #4
 8007cb6:	3004      	addeq	r0, #4
 8007cb8:	079a      	lsls	r2, r3, #30
 8007cba:	bf04      	itt	eq
 8007cbc:	089b      	lsreq	r3, r3, #2
 8007cbe:	3002      	addeq	r0, #2
 8007cc0:	07da      	lsls	r2, r3, #31
 8007cc2:	d403      	bmi.n	8007ccc <__lo0bits+0x50>
 8007cc4:	085b      	lsrs	r3, r3, #1
 8007cc6:	f100 0001 	add.w	r0, r0, #1
 8007cca:	d005      	beq.n	8007cd8 <__lo0bits+0x5c>
 8007ccc:	600b      	str	r3, [r1, #0]
 8007cce:	4770      	bx	lr
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	e7e8      	b.n	8007ca6 <__lo0bits+0x2a>
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	4770      	bx	lr
 8007cd8:	2020      	movs	r0, #32
 8007cda:	4770      	bx	lr

08007cdc <__i2b>:
 8007cdc:	b510      	push	{r4, lr}
 8007cde:	460c      	mov	r4, r1
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	f7ff feb5 	bl	8007a50 <_Balloc>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	b928      	cbnz	r0, 8007cf6 <__i2b+0x1a>
 8007cea:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <__i2b+0x24>)
 8007cec:	4805      	ldr	r0, [pc, #20]	; (8007d04 <__i2b+0x28>)
 8007cee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007cf2:	f000 fdb5 	bl	8008860 <__assert_func>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	6144      	str	r4, [r0, #20]
 8007cfa:	6103      	str	r3, [r0, #16]
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	bf00      	nop
 8007d00:	08009e0c 	.word	0x08009e0c
 8007d04:	08009e9c 	.word	0x08009e9c

08007d08 <__multiply>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	690a      	ldr	r2, [r1, #16]
 8007d10:	6923      	ldr	r3, [r4, #16]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	bfb8      	it	lt
 8007d16:	460b      	movlt	r3, r1
 8007d18:	460d      	mov	r5, r1
 8007d1a:	bfbc      	itt	lt
 8007d1c:	4625      	movlt	r5, r4
 8007d1e:	461c      	movlt	r4, r3
 8007d20:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007d24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007d28:	68ab      	ldr	r3, [r5, #8]
 8007d2a:	6869      	ldr	r1, [r5, #4]
 8007d2c:	eb0a 0709 	add.w	r7, sl, r9
 8007d30:	42bb      	cmp	r3, r7
 8007d32:	b085      	sub	sp, #20
 8007d34:	bfb8      	it	lt
 8007d36:	3101      	addlt	r1, #1
 8007d38:	f7ff fe8a 	bl	8007a50 <_Balloc>
 8007d3c:	b930      	cbnz	r0, 8007d4c <__multiply+0x44>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	4b42      	ldr	r3, [pc, #264]	; (8007e4c <__multiply+0x144>)
 8007d42:	4843      	ldr	r0, [pc, #268]	; (8007e50 <__multiply+0x148>)
 8007d44:	f240 115d 	movw	r1, #349	; 0x15d
 8007d48:	f000 fd8a 	bl	8008860 <__assert_func>
 8007d4c:	f100 0614 	add.w	r6, r0, #20
 8007d50:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007d54:	4633      	mov	r3, r6
 8007d56:	2200      	movs	r2, #0
 8007d58:	4543      	cmp	r3, r8
 8007d5a:	d31e      	bcc.n	8007d9a <__multiply+0x92>
 8007d5c:	f105 0c14 	add.w	ip, r5, #20
 8007d60:	f104 0314 	add.w	r3, r4, #20
 8007d64:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007d68:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007d6c:	9202      	str	r2, [sp, #8]
 8007d6e:	ebac 0205 	sub.w	r2, ip, r5
 8007d72:	3a15      	subs	r2, #21
 8007d74:	f022 0203 	bic.w	r2, r2, #3
 8007d78:	3204      	adds	r2, #4
 8007d7a:	f105 0115 	add.w	r1, r5, #21
 8007d7e:	458c      	cmp	ip, r1
 8007d80:	bf38      	it	cc
 8007d82:	2204      	movcc	r2, #4
 8007d84:	9201      	str	r2, [sp, #4]
 8007d86:	9a02      	ldr	r2, [sp, #8]
 8007d88:	9303      	str	r3, [sp, #12]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d808      	bhi.n	8007da0 <__multiply+0x98>
 8007d8e:	2f00      	cmp	r7, #0
 8007d90:	dc55      	bgt.n	8007e3e <__multiply+0x136>
 8007d92:	6107      	str	r7, [r0, #16]
 8007d94:	b005      	add	sp, #20
 8007d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9a:	f843 2b04 	str.w	r2, [r3], #4
 8007d9e:	e7db      	b.n	8007d58 <__multiply+0x50>
 8007da0:	f8b3 a000 	ldrh.w	sl, [r3]
 8007da4:	f1ba 0f00 	cmp.w	sl, #0
 8007da8:	d020      	beq.n	8007dec <__multiply+0xe4>
 8007daa:	f105 0e14 	add.w	lr, r5, #20
 8007dae:	46b1      	mov	r9, r6
 8007db0:	2200      	movs	r2, #0
 8007db2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007db6:	f8d9 b000 	ldr.w	fp, [r9]
 8007dba:	b2a1      	uxth	r1, r4
 8007dbc:	fa1f fb8b 	uxth.w	fp, fp
 8007dc0:	fb0a b101 	mla	r1, sl, r1, fp
 8007dc4:	4411      	add	r1, r2
 8007dc6:	f8d9 2000 	ldr.w	r2, [r9]
 8007dca:	0c24      	lsrs	r4, r4, #16
 8007dcc:	0c12      	lsrs	r2, r2, #16
 8007dce:	fb0a 2404 	mla	r4, sl, r4, r2
 8007dd2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007dd6:	b289      	uxth	r1, r1
 8007dd8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ddc:	45f4      	cmp	ip, lr
 8007dde:	f849 1b04 	str.w	r1, [r9], #4
 8007de2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007de6:	d8e4      	bhi.n	8007db2 <__multiply+0xaa>
 8007de8:	9901      	ldr	r1, [sp, #4]
 8007dea:	5072      	str	r2, [r6, r1]
 8007dec:	9a03      	ldr	r2, [sp, #12]
 8007dee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007df2:	3304      	adds	r3, #4
 8007df4:	f1b9 0f00 	cmp.w	r9, #0
 8007df8:	d01f      	beq.n	8007e3a <__multiply+0x132>
 8007dfa:	6834      	ldr	r4, [r6, #0]
 8007dfc:	f105 0114 	add.w	r1, r5, #20
 8007e00:	46b6      	mov	lr, r6
 8007e02:	f04f 0a00 	mov.w	sl, #0
 8007e06:	880a      	ldrh	r2, [r1, #0]
 8007e08:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007e0c:	fb09 b202 	mla	r2, r9, r2, fp
 8007e10:	4492      	add	sl, r2
 8007e12:	b2a4      	uxth	r4, r4
 8007e14:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007e18:	f84e 4b04 	str.w	r4, [lr], #4
 8007e1c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007e20:	f8be 2000 	ldrh.w	r2, [lr]
 8007e24:	0c24      	lsrs	r4, r4, #16
 8007e26:	fb09 2404 	mla	r4, r9, r4, r2
 8007e2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007e2e:	458c      	cmp	ip, r1
 8007e30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007e34:	d8e7      	bhi.n	8007e06 <__multiply+0xfe>
 8007e36:	9a01      	ldr	r2, [sp, #4]
 8007e38:	50b4      	str	r4, [r6, r2]
 8007e3a:	3604      	adds	r6, #4
 8007e3c:	e7a3      	b.n	8007d86 <__multiply+0x7e>
 8007e3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1a5      	bne.n	8007d92 <__multiply+0x8a>
 8007e46:	3f01      	subs	r7, #1
 8007e48:	e7a1      	b.n	8007d8e <__multiply+0x86>
 8007e4a:	bf00      	nop
 8007e4c:	08009e0c 	.word	0x08009e0c
 8007e50:	08009e9c 	.word	0x08009e9c

08007e54 <__pow5mult>:
 8007e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e58:	4615      	mov	r5, r2
 8007e5a:	f012 0203 	ands.w	r2, r2, #3
 8007e5e:	4606      	mov	r6, r0
 8007e60:	460f      	mov	r7, r1
 8007e62:	d007      	beq.n	8007e74 <__pow5mult+0x20>
 8007e64:	4c25      	ldr	r4, [pc, #148]	; (8007efc <__pow5mult+0xa8>)
 8007e66:	3a01      	subs	r2, #1
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e6e:	f7ff fe51 	bl	8007b14 <__multadd>
 8007e72:	4607      	mov	r7, r0
 8007e74:	10ad      	asrs	r5, r5, #2
 8007e76:	d03d      	beq.n	8007ef4 <__pow5mult+0xa0>
 8007e78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e7a:	b97c      	cbnz	r4, 8007e9c <__pow5mult+0x48>
 8007e7c:	2010      	movs	r0, #16
 8007e7e:	f7ff fdbf 	bl	8007a00 <malloc>
 8007e82:	4602      	mov	r2, r0
 8007e84:	6270      	str	r0, [r6, #36]	; 0x24
 8007e86:	b928      	cbnz	r0, 8007e94 <__pow5mult+0x40>
 8007e88:	4b1d      	ldr	r3, [pc, #116]	; (8007f00 <__pow5mult+0xac>)
 8007e8a:	481e      	ldr	r0, [pc, #120]	; (8007f04 <__pow5mult+0xb0>)
 8007e8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e90:	f000 fce6 	bl	8008860 <__assert_func>
 8007e94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e98:	6004      	str	r4, [r0, #0]
 8007e9a:	60c4      	str	r4, [r0, #12]
 8007e9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ea4:	b94c      	cbnz	r4, 8007eba <__pow5mult+0x66>
 8007ea6:	f240 2171 	movw	r1, #625	; 0x271
 8007eaa:	4630      	mov	r0, r6
 8007eac:	f7ff ff16 	bl	8007cdc <__i2b>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	6003      	str	r3, [r0, #0]
 8007eba:	f04f 0900 	mov.w	r9, #0
 8007ebe:	07eb      	lsls	r3, r5, #31
 8007ec0:	d50a      	bpl.n	8007ed8 <__pow5mult+0x84>
 8007ec2:	4639      	mov	r1, r7
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7ff ff1e 	bl	8007d08 <__multiply>
 8007ecc:	4639      	mov	r1, r7
 8007ece:	4680      	mov	r8, r0
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f7ff fdfd 	bl	8007ad0 <_Bfree>
 8007ed6:	4647      	mov	r7, r8
 8007ed8:	106d      	asrs	r5, r5, #1
 8007eda:	d00b      	beq.n	8007ef4 <__pow5mult+0xa0>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	b938      	cbnz	r0, 8007ef0 <__pow5mult+0x9c>
 8007ee0:	4622      	mov	r2, r4
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f7ff ff0f 	bl	8007d08 <__multiply>
 8007eea:	6020      	str	r0, [r4, #0]
 8007eec:	f8c0 9000 	str.w	r9, [r0]
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	e7e4      	b.n	8007ebe <__pow5mult+0x6a>
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007efa:	bf00      	nop
 8007efc:	08009ff0 	.word	0x08009ff0
 8007f00:	08009d96 	.word	0x08009d96
 8007f04:	08009e9c 	.word	0x08009e9c

08007f08 <__lshift>:
 8007f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	6849      	ldr	r1, [r1, #4]
 8007f10:	6923      	ldr	r3, [r4, #16]
 8007f12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f16:	68a3      	ldr	r3, [r4, #8]
 8007f18:	4607      	mov	r7, r0
 8007f1a:	4691      	mov	r9, r2
 8007f1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f20:	f108 0601 	add.w	r6, r8, #1
 8007f24:	42b3      	cmp	r3, r6
 8007f26:	db0b      	blt.n	8007f40 <__lshift+0x38>
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f7ff fd91 	bl	8007a50 <_Balloc>
 8007f2e:	4605      	mov	r5, r0
 8007f30:	b948      	cbnz	r0, 8007f46 <__lshift+0x3e>
 8007f32:	4602      	mov	r2, r0
 8007f34:	4b28      	ldr	r3, [pc, #160]	; (8007fd8 <__lshift+0xd0>)
 8007f36:	4829      	ldr	r0, [pc, #164]	; (8007fdc <__lshift+0xd4>)
 8007f38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f3c:	f000 fc90 	bl	8008860 <__assert_func>
 8007f40:	3101      	adds	r1, #1
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	e7ee      	b.n	8007f24 <__lshift+0x1c>
 8007f46:	2300      	movs	r3, #0
 8007f48:	f100 0114 	add.w	r1, r0, #20
 8007f4c:	f100 0210 	add.w	r2, r0, #16
 8007f50:	4618      	mov	r0, r3
 8007f52:	4553      	cmp	r3, sl
 8007f54:	db33      	blt.n	8007fbe <__lshift+0xb6>
 8007f56:	6920      	ldr	r0, [r4, #16]
 8007f58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f5c:	f104 0314 	add.w	r3, r4, #20
 8007f60:	f019 091f 	ands.w	r9, r9, #31
 8007f64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f6c:	d02b      	beq.n	8007fc6 <__lshift+0xbe>
 8007f6e:	f1c9 0e20 	rsb	lr, r9, #32
 8007f72:	468a      	mov	sl, r1
 8007f74:	2200      	movs	r2, #0
 8007f76:	6818      	ldr	r0, [r3, #0]
 8007f78:	fa00 f009 	lsl.w	r0, r0, r9
 8007f7c:	4302      	orrs	r2, r0
 8007f7e:	f84a 2b04 	str.w	r2, [sl], #4
 8007f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f86:	459c      	cmp	ip, r3
 8007f88:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f8c:	d8f3      	bhi.n	8007f76 <__lshift+0x6e>
 8007f8e:	ebac 0304 	sub.w	r3, ip, r4
 8007f92:	3b15      	subs	r3, #21
 8007f94:	f023 0303 	bic.w	r3, r3, #3
 8007f98:	3304      	adds	r3, #4
 8007f9a:	f104 0015 	add.w	r0, r4, #21
 8007f9e:	4584      	cmp	ip, r0
 8007fa0:	bf38      	it	cc
 8007fa2:	2304      	movcc	r3, #4
 8007fa4:	50ca      	str	r2, [r1, r3]
 8007fa6:	b10a      	cbz	r2, 8007fac <__lshift+0xa4>
 8007fa8:	f108 0602 	add.w	r6, r8, #2
 8007fac:	3e01      	subs	r6, #1
 8007fae:	4638      	mov	r0, r7
 8007fb0:	612e      	str	r6, [r5, #16]
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	f7ff fd8c 	bl	8007ad0 <_Bfree>
 8007fb8:	4628      	mov	r0, r5
 8007fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	e7c5      	b.n	8007f52 <__lshift+0x4a>
 8007fc6:	3904      	subs	r1, #4
 8007fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fd0:	459c      	cmp	ip, r3
 8007fd2:	d8f9      	bhi.n	8007fc8 <__lshift+0xc0>
 8007fd4:	e7ea      	b.n	8007fac <__lshift+0xa4>
 8007fd6:	bf00      	nop
 8007fd8:	08009e0c 	.word	0x08009e0c
 8007fdc:	08009e9c 	.word	0x08009e9c

08007fe0 <__mcmp>:
 8007fe0:	b530      	push	{r4, r5, lr}
 8007fe2:	6902      	ldr	r2, [r0, #16]
 8007fe4:	690c      	ldr	r4, [r1, #16]
 8007fe6:	1b12      	subs	r2, r2, r4
 8007fe8:	d10e      	bne.n	8008008 <__mcmp+0x28>
 8007fea:	f100 0314 	add.w	r3, r0, #20
 8007fee:	3114      	adds	r1, #20
 8007ff0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ff4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ff8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ffc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008000:	42a5      	cmp	r5, r4
 8008002:	d003      	beq.n	800800c <__mcmp+0x2c>
 8008004:	d305      	bcc.n	8008012 <__mcmp+0x32>
 8008006:	2201      	movs	r2, #1
 8008008:	4610      	mov	r0, r2
 800800a:	bd30      	pop	{r4, r5, pc}
 800800c:	4283      	cmp	r3, r0
 800800e:	d3f3      	bcc.n	8007ff8 <__mcmp+0x18>
 8008010:	e7fa      	b.n	8008008 <__mcmp+0x28>
 8008012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008016:	e7f7      	b.n	8008008 <__mcmp+0x28>

08008018 <__mdiff>:
 8008018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	460c      	mov	r4, r1
 800801e:	4606      	mov	r6, r0
 8008020:	4611      	mov	r1, r2
 8008022:	4620      	mov	r0, r4
 8008024:	4617      	mov	r7, r2
 8008026:	f7ff ffdb 	bl	8007fe0 <__mcmp>
 800802a:	1e05      	subs	r5, r0, #0
 800802c:	d110      	bne.n	8008050 <__mdiff+0x38>
 800802e:	4629      	mov	r1, r5
 8008030:	4630      	mov	r0, r6
 8008032:	f7ff fd0d 	bl	8007a50 <_Balloc>
 8008036:	b930      	cbnz	r0, 8008046 <__mdiff+0x2e>
 8008038:	4b39      	ldr	r3, [pc, #228]	; (8008120 <__mdiff+0x108>)
 800803a:	4602      	mov	r2, r0
 800803c:	f240 2132 	movw	r1, #562	; 0x232
 8008040:	4838      	ldr	r0, [pc, #224]	; (8008124 <__mdiff+0x10c>)
 8008042:	f000 fc0d 	bl	8008860 <__assert_func>
 8008046:	2301      	movs	r3, #1
 8008048:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800804c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008050:	bfa4      	itt	ge
 8008052:	463b      	movge	r3, r7
 8008054:	4627      	movge	r7, r4
 8008056:	4630      	mov	r0, r6
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	bfa6      	itte	ge
 800805c:	461c      	movge	r4, r3
 800805e:	2500      	movge	r5, #0
 8008060:	2501      	movlt	r5, #1
 8008062:	f7ff fcf5 	bl	8007a50 <_Balloc>
 8008066:	b920      	cbnz	r0, 8008072 <__mdiff+0x5a>
 8008068:	4b2d      	ldr	r3, [pc, #180]	; (8008120 <__mdiff+0x108>)
 800806a:	4602      	mov	r2, r0
 800806c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008070:	e7e6      	b.n	8008040 <__mdiff+0x28>
 8008072:	693e      	ldr	r6, [r7, #16]
 8008074:	60c5      	str	r5, [r0, #12]
 8008076:	6925      	ldr	r5, [r4, #16]
 8008078:	f107 0114 	add.w	r1, r7, #20
 800807c:	f104 0914 	add.w	r9, r4, #20
 8008080:	f100 0e14 	add.w	lr, r0, #20
 8008084:	f107 0210 	add.w	r2, r7, #16
 8008088:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800808c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008090:	46f2      	mov	sl, lr
 8008092:	2700      	movs	r7, #0
 8008094:	f859 3b04 	ldr.w	r3, [r9], #4
 8008098:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800809c:	fa1f f883 	uxth.w	r8, r3
 80080a0:	fa17 f78b 	uxtah	r7, r7, fp
 80080a4:	0c1b      	lsrs	r3, r3, #16
 80080a6:	eba7 0808 	sub.w	r8, r7, r8
 80080aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80080b2:	fa1f f888 	uxth.w	r8, r8
 80080b6:	141f      	asrs	r7, r3, #16
 80080b8:	454d      	cmp	r5, r9
 80080ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80080be:	f84a 3b04 	str.w	r3, [sl], #4
 80080c2:	d8e7      	bhi.n	8008094 <__mdiff+0x7c>
 80080c4:	1b2b      	subs	r3, r5, r4
 80080c6:	3b15      	subs	r3, #21
 80080c8:	f023 0303 	bic.w	r3, r3, #3
 80080cc:	3304      	adds	r3, #4
 80080ce:	3415      	adds	r4, #21
 80080d0:	42a5      	cmp	r5, r4
 80080d2:	bf38      	it	cc
 80080d4:	2304      	movcc	r3, #4
 80080d6:	4419      	add	r1, r3
 80080d8:	4473      	add	r3, lr
 80080da:	469e      	mov	lr, r3
 80080dc:	460d      	mov	r5, r1
 80080de:	4565      	cmp	r5, ip
 80080e0:	d30e      	bcc.n	8008100 <__mdiff+0xe8>
 80080e2:	f10c 0203 	add.w	r2, ip, #3
 80080e6:	1a52      	subs	r2, r2, r1
 80080e8:	f022 0203 	bic.w	r2, r2, #3
 80080ec:	3903      	subs	r1, #3
 80080ee:	458c      	cmp	ip, r1
 80080f0:	bf38      	it	cc
 80080f2:	2200      	movcc	r2, #0
 80080f4:	441a      	add	r2, r3
 80080f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80080fa:	b17b      	cbz	r3, 800811c <__mdiff+0x104>
 80080fc:	6106      	str	r6, [r0, #16]
 80080fe:	e7a5      	b.n	800804c <__mdiff+0x34>
 8008100:	f855 8b04 	ldr.w	r8, [r5], #4
 8008104:	fa17 f488 	uxtah	r4, r7, r8
 8008108:	1422      	asrs	r2, r4, #16
 800810a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800810e:	b2a4      	uxth	r4, r4
 8008110:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008114:	f84e 4b04 	str.w	r4, [lr], #4
 8008118:	1417      	asrs	r7, r2, #16
 800811a:	e7e0      	b.n	80080de <__mdiff+0xc6>
 800811c:	3e01      	subs	r6, #1
 800811e:	e7ea      	b.n	80080f6 <__mdiff+0xde>
 8008120:	08009e0c 	.word	0x08009e0c
 8008124:	08009e9c 	.word	0x08009e9c

08008128 <__ulp>:
 8008128:	b082      	sub	sp, #8
 800812a:	ed8d 0b00 	vstr	d0, [sp]
 800812e:	9b01      	ldr	r3, [sp, #4]
 8008130:	4912      	ldr	r1, [pc, #72]	; (800817c <__ulp+0x54>)
 8008132:	4019      	ands	r1, r3
 8008134:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008138:	2900      	cmp	r1, #0
 800813a:	dd05      	ble.n	8008148 <__ulp+0x20>
 800813c:	2200      	movs	r2, #0
 800813e:	460b      	mov	r3, r1
 8008140:	ec43 2b10 	vmov	d0, r2, r3
 8008144:	b002      	add	sp, #8
 8008146:	4770      	bx	lr
 8008148:	4249      	negs	r1, r1
 800814a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800814e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008152:	f04f 0200 	mov.w	r2, #0
 8008156:	f04f 0300 	mov.w	r3, #0
 800815a:	da04      	bge.n	8008166 <__ulp+0x3e>
 800815c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008160:	fa41 f300 	asr.w	r3, r1, r0
 8008164:	e7ec      	b.n	8008140 <__ulp+0x18>
 8008166:	f1a0 0114 	sub.w	r1, r0, #20
 800816a:	291e      	cmp	r1, #30
 800816c:	bfda      	itte	le
 800816e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008172:	fa20 f101 	lsrle.w	r1, r0, r1
 8008176:	2101      	movgt	r1, #1
 8008178:	460a      	mov	r2, r1
 800817a:	e7e1      	b.n	8008140 <__ulp+0x18>
 800817c:	7ff00000 	.word	0x7ff00000

08008180 <__b2d>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	6905      	ldr	r5, [r0, #16]
 8008184:	f100 0714 	add.w	r7, r0, #20
 8008188:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800818c:	1f2e      	subs	r6, r5, #4
 800818e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008192:	4620      	mov	r0, r4
 8008194:	f7ff fd52 	bl	8007c3c <__hi0bits>
 8008198:	f1c0 0320 	rsb	r3, r0, #32
 800819c:	280a      	cmp	r0, #10
 800819e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800821c <__b2d+0x9c>
 80081a2:	600b      	str	r3, [r1, #0]
 80081a4:	dc14      	bgt.n	80081d0 <__b2d+0x50>
 80081a6:	f1c0 0e0b 	rsb	lr, r0, #11
 80081aa:	fa24 f10e 	lsr.w	r1, r4, lr
 80081ae:	42b7      	cmp	r7, r6
 80081b0:	ea41 030c 	orr.w	r3, r1, ip
 80081b4:	bf34      	ite	cc
 80081b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80081ba:	2100      	movcs	r1, #0
 80081bc:	3015      	adds	r0, #21
 80081be:	fa04 f000 	lsl.w	r0, r4, r0
 80081c2:	fa21 f10e 	lsr.w	r1, r1, lr
 80081c6:	ea40 0201 	orr.w	r2, r0, r1
 80081ca:	ec43 2b10 	vmov	d0, r2, r3
 80081ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d0:	42b7      	cmp	r7, r6
 80081d2:	bf3a      	itte	cc
 80081d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80081d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80081dc:	2100      	movcs	r1, #0
 80081de:	380b      	subs	r0, #11
 80081e0:	d017      	beq.n	8008212 <__b2d+0x92>
 80081e2:	f1c0 0c20 	rsb	ip, r0, #32
 80081e6:	fa04 f500 	lsl.w	r5, r4, r0
 80081ea:	42be      	cmp	r6, r7
 80081ec:	fa21 f40c 	lsr.w	r4, r1, ip
 80081f0:	ea45 0504 	orr.w	r5, r5, r4
 80081f4:	bf8c      	ite	hi
 80081f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80081fa:	2400      	movls	r4, #0
 80081fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008200:	fa01 f000 	lsl.w	r0, r1, r0
 8008204:	fa24 f40c 	lsr.w	r4, r4, ip
 8008208:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800820c:	ea40 0204 	orr.w	r2, r0, r4
 8008210:	e7db      	b.n	80081ca <__b2d+0x4a>
 8008212:	ea44 030c 	orr.w	r3, r4, ip
 8008216:	460a      	mov	r2, r1
 8008218:	e7d7      	b.n	80081ca <__b2d+0x4a>
 800821a:	bf00      	nop
 800821c:	3ff00000 	.word	0x3ff00000

08008220 <__d2b>:
 8008220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008224:	4689      	mov	r9, r1
 8008226:	2101      	movs	r1, #1
 8008228:	ec57 6b10 	vmov	r6, r7, d0
 800822c:	4690      	mov	r8, r2
 800822e:	f7ff fc0f 	bl	8007a50 <_Balloc>
 8008232:	4604      	mov	r4, r0
 8008234:	b930      	cbnz	r0, 8008244 <__d2b+0x24>
 8008236:	4602      	mov	r2, r0
 8008238:	4b25      	ldr	r3, [pc, #148]	; (80082d0 <__d2b+0xb0>)
 800823a:	4826      	ldr	r0, [pc, #152]	; (80082d4 <__d2b+0xb4>)
 800823c:	f240 310a 	movw	r1, #778	; 0x30a
 8008240:	f000 fb0e 	bl	8008860 <__assert_func>
 8008244:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800824c:	bb35      	cbnz	r5, 800829c <__d2b+0x7c>
 800824e:	2e00      	cmp	r6, #0
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	d028      	beq.n	80082a6 <__d2b+0x86>
 8008254:	4668      	mov	r0, sp
 8008256:	9600      	str	r6, [sp, #0]
 8008258:	f7ff fd10 	bl	8007c7c <__lo0bits>
 800825c:	9900      	ldr	r1, [sp, #0]
 800825e:	b300      	cbz	r0, 80082a2 <__d2b+0x82>
 8008260:	9a01      	ldr	r2, [sp, #4]
 8008262:	f1c0 0320 	rsb	r3, r0, #32
 8008266:	fa02 f303 	lsl.w	r3, r2, r3
 800826a:	430b      	orrs	r3, r1
 800826c:	40c2      	lsrs	r2, r0
 800826e:	6163      	str	r3, [r4, #20]
 8008270:	9201      	str	r2, [sp, #4]
 8008272:	9b01      	ldr	r3, [sp, #4]
 8008274:	61a3      	str	r3, [r4, #24]
 8008276:	2b00      	cmp	r3, #0
 8008278:	bf14      	ite	ne
 800827a:	2202      	movne	r2, #2
 800827c:	2201      	moveq	r2, #1
 800827e:	6122      	str	r2, [r4, #16]
 8008280:	b1d5      	cbz	r5, 80082b8 <__d2b+0x98>
 8008282:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008286:	4405      	add	r5, r0
 8008288:	f8c9 5000 	str.w	r5, [r9]
 800828c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008290:	f8c8 0000 	str.w	r0, [r8]
 8008294:	4620      	mov	r0, r4
 8008296:	b003      	add	sp, #12
 8008298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800829c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082a0:	e7d5      	b.n	800824e <__d2b+0x2e>
 80082a2:	6161      	str	r1, [r4, #20]
 80082a4:	e7e5      	b.n	8008272 <__d2b+0x52>
 80082a6:	a801      	add	r0, sp, #4
 80082a8:	f7ff fce8 	bl	8007c7c <__lo0bits>
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	6163      	str	r3, [r4, #20]
 80082b0:	2201      	movs	r2, #1
 80082b2:	6122      	str	r2, [r4, #16]
 80082b4:	3020      	adds	r0, #32
 80082b6:	e7e3      	b.n	8008280 <__d2b+0x60>
 80082b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082c0:	f8c9 0000 	str.w	r0, [r9]
 80082c4:	6918      	ldr	r0, [r3, #16]
 80082c6:	f7ff fcb9 	bl	8007c3c <__hi0bits>
 80082ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082ce:	e7df      	b.n	8008290 <__d2b+0x70>
 80082d0:	08009e0c 	.word	0x08009e0c
 80082d4:	08009e9c 	.word	0x08009e9c

080082d8 <__ratio>:
 80082d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	4688      	mov	r8, r1
 80082de:	4669      	mov	r1, sp
 80082e0:	4681      	mov	r9, r0
 80082e2:	f7ff ff4d 	bl	8008180 <__b2d>
 80082e6:	a901      	add	r1, sp, #4
 80082e8:	4640      	mov	r0, r8
 80082ea:	ec55 4b10 	vmov	r4, r5, d0
 80082ee:	f7ff ff47 	bl	8008180 <__b2d>
 80082f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80082fa:	eba3 0c02 	sub.w	ip, r3, r2
 80082fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008302:	1a9b      	subs	r3, r3, r2
 8008304:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008308:	ec51 0b10 	vmov	r0, r1, d0
 800830c:	2b00      	cmp	r3, #0
 800830e:	bfd6      	itet	le
 8008310:	460a      	movle	r2, r1
 8008312:	462a      	movgt	r2, r5
 8008314:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008318:	468b      	mov	fp, r1
 800831a:	462f      	mov	r7, r5
 800831c:	bfd4      	ite	le
 800831e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008322:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008326:	4620      	mov	r0, r4
 8008328:	ee10 2a10 	vmov	r2, s0
 800832c:	465b      	mov	r3, fp
 800832e:	4639      	mov	r1, r7
 8008330:	f7f8 faac 	bl	800088c <__aeabi_ddiv>
 8008334:	ec41 0b10 	vmov	d0, r0, r1
 8008338:	b003      	add	sp, #12
 800833a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800833e <__copybits>:
 800833e:	3901      	subs	r1, #1
 8008340:	b570      	push	{r4, r5, r6, lr}
 8008342:	1149      	asrs	r1, r1, #5
 8008344:	6914      	ldr	r4, [r2, #16]
 8008346:	3101      	adds	r1, #1
 8008348:	f102 0314 	add.w	r3, r2, #20
 800834c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008350:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008354:	1f05      	subs	r5, r0, #4
 8008356:	42a3      	cmp	r3, r4
 8008358:	d30c      	bcc.n	8008374 <__copybits+0x36>
 800835a:	1aa3      	subs	r3, r4, r2
 800835c:	3b11      	subs	r3, #17
 800835e:	f023 0303 	bic.w	r3, r3, #3
 8008362:	3211      	adds	r2, #17
 8008364:	42a2      	cmp	r2, r4
 8008366:	bf88      	it	hi
 8008368:	2300      	movhi	r3, #0
 800836a:	4418      	add	r0, r3
 800836c:	2300      	movs	r3, #0
 800836e:	4288      	cmp	r0, r1
 8008370:	d305      	bcc.n	800837e <__copybits+0x40>
 8008372:	bd70      	pop	{r4, r5, r6, pc}
 8008374:	f853 6b04 	ldr.w	r6, [r3], #4
 8008378:	f845 6f04 	str.w	r6, [r5, #4]!
 800837c:	e7eb      	b.n	8008356 <__copybits+0x18>
 800837e:	f840 3b04 	str.w	r3, [r0], #4
 8008382:	e7f4      	b.n	800836e <__copybits+0x30>

08008384 <__any_on>:
 8008384:	f100 0214 	add.w	r2, r0, #20
 8008388:	6900      	ldr	r0, [r0, #16]
 800838a:	114b      	asrs	r3, r1, #5
 800838c:	4298      	cmp	r0, r3
 800838e:	b510      	push	{r4, lr}
 8008390:	db11      	blt.n	80083b6 <__any_on+0x32>
 8008392:	dd0a      	ble.n	80083aa <__any_on+0x26>
 8008394:	f011 011f 	ands.w	r1, r1, #31
 8008398:	d007      	beq.n	80083aa <__any_on+0x26>
 800839a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800839e:	fa24 f001 	lsr.w	r0, r4, r1
 80083a2:	fa00 f101 	lsl.w	r1, r0, r1
 80083a6:	428c      	cmp	r4, r1
 80083a8:	d10b      	bne.n	80083c2 <__any_on+0x3e>
 80083aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d803      	bhi.n	80083ba <__any_on+0x36>
 80083b2:	2000      	movs	r0, #0
 80083b4:	bd10      	pop	{r4, pc}
 80083b6:	4603      	mov	r3, r0
 80083b8:	e7f7      	b.n	80083aa <__any_on+0x26>
 80083ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083be:	2900      	cmp	r1, #0
 80083c0:	d0f5      	beq.n	80083ae <__any_on+0x2a>
 80083c2:	2001      	movs	r0, #1
 80083c4:	e7f6      	b.n	80083b4 <__any_on+0x30>

080083c6 <_calloc_r>:
 80083c6:	b513      	push	{r0, r1, r4, lr}
 80083c8:	434a      	muls	r2, r1
 80083ca:	4611      	mov	r1, r2
 80083cc:	9201      	str	r2, [sp, #4]
 80083ce:	f000 f859 	bl	8008484 <_malloc_r>
 80083d2:	4604      	mov	r4, r0
 80083d4:	b118      	cbz	r0, 80083de <_calloc_r+0x18>
 80083d6:	9a01      	ldr	r2, [sp, #4]
 80083d8:	2100      	movs	r1, #0
 80083da:	f7fc fbc7 	bl	8004b6c <memset>
 80083de:	4620      	mov	r0, r4
 80083e0:	b002      	add	sp, #8
 80083e2:	bd10      	pop	{r4, pc}

080083e4 <_free_r>:
 80083e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083e6:	2900      	cmp	r1, #0
 80083e8:	d048      	beq.n	800847c <_free_r+0x98>
 80083ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ee:	9001      	str	r0, [sp, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f1a1 0404 	sub.w	r4, r1, #4
 80083f6:	bfb8      	it	lt
 80083f8:	18e4      	addlt	r4, r4, r3
 80083fa:	f000 fa7b 	bl	80088f4 <__malloc_lock>
 80083fe:	4a20      	ldr	r2, [pc, #128]	; (8008480 <_free_r+0x9c>)
 8008400:	9801      	ldr	r0, [sp, #4]
 8008402:	6813      	ldr	r3, [r2, #0]
 8008404:	4615      	mov	r5, r2
 8008406:	b933      	cbnz	r3, 8008416 <_free_r+0x32>
 8008408:	6063      	str	r3, [r4, #4]
 800840a:	6014      	str	r4, [r2, #0]
 800840c:	b003      	add	sp, #12
 800840e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008412:	f000 ba75 	b.w	8008900 <__malloc_unlock>
 8008416:	42a3      	cmp	r3, r4
 8008418:	d90b      	bls.n	8008432 <_free_r+0x4e>
 800841a:	6821      	ldr	r1, [r4, #0]
 800841c:	1862      	adds	r2, r4, r1
 800841e:	4293      	cmp	r3, r2
 8008420:	bf04      	itt	eq
 8008422:	681a      	ldreq	r2, [r3, #0]
 8008424:	685b      	ldreq	r3, [r3, #4]
 8008426:	6063      	str	r3, [r4, #4]
 8008428:	bf04      	itt	eq
 800842a:	1852      	addeq	r2, r2, r1
 800842c:	6022      	streq	r2, [r4, #0]
 800842e:	602c      	str	r4, [r5, #0]
 8008430:	e7ec      	b.n	800840c <_free_r+0x28>
 8008432:	461a      	mov	r2, r3
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	b10b      	cbz	r3, 800843c <_free_r+0x58>
 8008438:	42a3      	cmp	r3, r4
 800843a:	d9fa      	bls.n	8008432 <_free_r+0x4e>
 800843c:	6811      	ldr	r1, [r2, #0]
 800843e:	1855      	adds	r5, r2, r1
 8008440:	42a5      	cmp	r5, r4
 8008442:	d10b      	bne.n	800845c <_free_r+0x78>
 8008444:	6824      	ldr	r4, [r4, #0]
 8008446:	4421      	add	r1, r4
 8008448:	1854      	adds	r4, r2, r1
 800844a:	42a3      	cmp	r3, r4
 800844c:	6011      	str	r1, [r2, #0]
 800844e:	d1dd      	bne.n	800840c <_free_r+0x28>
 8008450:	681c      	ldr	r4, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	6053      	str	r3, [r2, #4]
 8008456:	4421      	add	r1, r4
 8008458:	6011      	str	r1, [r2, #0]
 800845a:	e7d7      	b.n	800840c <_free_r+0x28>
 800845c:	d902      	bls.n	8008464 <_free_r+0x80>
 800845e:	230c      	movs	r3, #12
 8008460:	6003      	str	r3, [r0, #0]
 8008462:	e7d3      	b.n	800840c <_free_r+0x28>
 8008464:	6825      	ldr	r5, [r4, #0]
 8008466:	1961      	adds	r1, r4, r5
 8008468:	428b      	cmp	r3, r1
 800846a:	bf04      	itt	eq
 800846c:	6819      	ldreq	r1, [r3, #0]
 800846e:	685b      	ldreq	r3, [r3, #4]
 8008470:	6063      	str	r3, [r4, #4]
 8008472:	bf04      	itt	eq
 8008474:	1949      	addeq	r1, r1, r5
 8008476:	6021      	streq	r1, [r4, #0]
 8008478:	6054      	str	r4, [r2, #4]
 800847a:	e7c7      	b.n	800840c <_free_r+0x28>
 800847c:	b003      	add	sp, #12
 800847e:	bd30      	pop	{r4, r5, pc}
 8008480:	20000208 	.word	0x20000208

08008484 <_malloc_r>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	1ccd      	adds	r5, r1, #3
 8008488:	f025 0503 	bic.w	r5, r5, #3
 800848c:	3508      	adds	r5, #8
 800848e:	2d0c      	cmp	r5, #12
 8008490:	bf38      	it	cc
 8008492:	250c      	movcc	r5, #12
 8008494:	2d00      	cmp	r5, #0
 8008496:	4606      	mov	r6, r0
 8008498:	db01      	blt.n	800849e <_malloc_r+0x1a>
 800849a:	42a9      	cmp	r1, r5
 800849c:	d903      	bls.n	80084a6 <_malloc_r+0x22>
 800849e:	230c      	movs	r3, #12
 80084a0:	6033      	str	r3, [r6, #0]
 80084a2:	2000      	movs	r0, #0
 80084a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a6:	f000 fa25 	bl	80088f4 <__malloc_lock>
 80084aa:	4921      	ldr	r1, [pc, #132]	; (8008530 <_malloc_r+0xac>)
 80084ac:	680a      	ldr	r2, [r1, #0]
 80084ae:	4614      	mov	r4, r2
 80084b0:	b99c      	cbnz	r4, 80084da <_malloc_r+0x56>
 80084b2:	4f20      	ldr	r7, [pc, #128]	; (8008534 <_malloc_r+0xb0>)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	b923      	cbnz	r3, 80084c2 <_malloc_r+0x3e>
 80084b8:	4621      	mov	r1, r4
 80084ba:	4630      	mov	r0, r6
 80084bc:	f000 f9a0 	bl	8008800 <_sbrk_r>
 80084c0:	6038      	str	r0, [r7, #0]
 80084c2:	4629      	mov	r1, r5
 80084c4:	4630      	mov	r0, r6
 80084c6:	f000 f99b 	bl	8008800 <_sbrk_r>
 80084ca:	1c43      	adds	r3, r0, #1
 80084cc:	d123      	bne.n	8008516 <_malloc_r+0x92>
 80084ce:	230c      	movs	r3, #12
 80084d0:	6033      	str	r3, [r6, #0]
 80084d2:	4630      	mov	r0, r6
 80084d4:	f000 fa14 	bl	8008900 <__malloc_unlock>
 80084d8:	e7e3      	b.n	80084a2 <_malloc_r+0x1e>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	1b5b      	subs	r3, r3, r5
 80084de:	d417      	bmi.n	8008510 <_malloc_r+0x8c>
 80084e0:	2b0b      	cmp	r3, #11
 80084e2:	d903      	bls.n	80084ec <_malloc_r+0x68>
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	441c      	add	r4, r3
 80084e8:	6025      	str	r5, [r4, #0]
 80084ea:	e004      	b.n	80084f6 <_malloc_r+0x72>
 80084ec:	6863      	ldr	r3, [r4, #4]
 80084ee:	42a2      	cmp	r2, r4
 80084f0:	bf0c      	ite	eq
 80084f2:	600b      	streq	r3, [r1, #0]
 80084f4:	6053      	strne	r3, [r2, #4]
 80084f6:	4630      	mov	r0, r6
 80084f8:	f000 fa02 	bl	8008900 <__malloc_unlock>
 80084fc:	f104 000b 	add.w	r0, r4, #11
 8008500:	1d23      	adds	r3, r4, #4
 8008502:	f020 0007 	bic.w	r0, r0, #7
 8008506:	1ac2      	subs	r2, r0, r3
 8008508:	d0cc      	beq.n	80084a4 <_malloc_r+0x20>
 800850a:	1a1b      	subs	r3, r3, r0
 800850c:	50a3      	str	r3, [r4, r2]
 800850e:	e7c9      	b.n	80084a4 <_malloc_r+0x20>
 8008510:	4622      	mov	r2, r4
 8008512:	6864      	ldr	r4, [r4, #4]
 8008514:	e7cc      	b.n	80084b0 <_malloc_r+0x2c>
 8008516:	1cc4      	adds	r4, r0, #3
 8008518:	f024 0403 	bic.w	r4, r4, #3
 800851c:	42a0      	cmp	r0, r4
 800851e:	d0e3      	beq.n	80084e8 <_malloc_r+0x64>
 8008520:	1a21      	subs	r1, r4, r0
 8008522:	4630      	mov	r0, r6
 8008524:	f000 f96c 	bl	8008800 <_sbrk_r>
 8008528:	3001      	adds	r0, #1
 800852a:	d1dd      	bne.n	80084e8 <_malloc_r+0x64>
 800852c:	e7cf      	b.n	80084ce <_malloc_r+0x4a>
 800852e:	bf00      	nop
 8008530:	20000208 	.word	0x20000208
 8008534:	2000020c 	.word	0x2000020c

08008538 <__ssputs_r>:
 8008538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800853c:	688e      	ldr	r6, [r1, #8]
 800853e:	429e      	cmp	r6, r3
 8008540:	4682      	mov	sl, r0
 8008542:	460c      	mov	r4, r1
 8008544:	4690      	mov	r8, r2
 8008546:	461f      	mov	r7, r3
 8008548:	d838      	bhi.n	80085bc <__ssputs_r+0x84>
 800854a:	898a      	ldrh	r2, [r1, #12]
 800854c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008550:	d032      	beq.n	80085b8 <__ssputs_r+0x80>
 8008552:	6825      	ldr	r5, [r4, #0]
 8008554:	6909      	ldr	r1, [r1, #16]
 8008556:	eba5 0901 	sub.w	r9, r5, r1
 800855a:	6965      	ldr	r5, [r4, #20]
 800855c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008560:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008564:	3301      	adds	r3, #1
 8008566:	444b      	add	r3, r9
 8008568:	106d      	asrs	r5, r5, #1
 800856a:	429d      	cmp	r5, r3
 800856c:	bf38      	it	cc
 800856e:	461d      	movcc	r5, r3
 8008570:	0553      	lsls	r3, r2, #21
 8008572:	d531      	bpl.n	80085d8 <__ssputs_r+0xa0>
 8008574:	4629      	mov	r1, r5
 8008576:	f7ff ff85 	bl	8008484 <_malloc_r>
 800857a:	4606      	mov	r6, r0
 800857c:	b950      	cbnz	r0, 8008594 <__ssputs_r+0x5c>
 800857e:	230c      	movs	r3, #12
 8008580:	f8ca 3000 	str.w	r3, [sl]
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800858a:	81a3      	strh	r3, [r4, #12]
 800858c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008594:	6921      	ldr	r1, [r4, #16]
 8008596:	464a      	mov	r2, r9
 8008598:	f7ff fa4c 	bl	8007a34 <memcpy>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a6:	81a3      	strh	r3, [r4, #12]
 80085a8:	6126      	str	r6, [r4, #16]
 80085aa:	6165      	str	r5, [r4, #20]
 80085ac:	444e      	add	r6, r9
 80085ae:	eba5 0509 	sub.w	r5, r5, r9
 80085b2:	6026      	str	r6, [r4, #0]
 80085b4:	60a5      	str	r5, [r4, #8]
 80085b6:	463e      	mov	r6, r7
 80085b8:	42be      	cmp	r6, r7
 80085ba:	d900      	bls.n	80085be <__ssputs_r+0x86>
 80085bc:	463e      	mov	r6, r7
 80085be:	4632      	mov	r2, r6
 80085c0:	6820      	ldr	r0, [r4, #0]
 80085c2:	4641      	mov	r1, r8
 80085c4:	f000 f97c 	bl	80088c0 <memmove>
 80085c8:	68a3      	ldr	r3, [r4, #8]
 80085ca:	6822      	ldr	r2, [r4, #0]
 80085cc:	1b9b      	subs	r3, r3, r6
 80085ce:	4432      	add	r2, r6
 80085d0:	60a3      	str	r3, [r4, #8]
 80085d2:	6022      	str	r2, [r4, #0]
 80085d4:	2000      	movs	r0, #0
 80085d6:	e7db      	b.n	8008590 <__ssputs_r+0x58>
 80085d8:	462a      	mov	r2, r5
 80085da:	f000 f997 	bl	800890c <_realloc_r>
 80085de:	4606      	mov	r6, r0
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1e1      	bne.n	80085a8 <__ssputs_r+0x70>
 80085e4:	6921      	ldr	r1, [r4, #16]
 80085e6:	4650      	mov	r0, sl
 80085e8:	f7ff fefc 	bl	80083e4 <_free_r>
 80085ec:	e7c7      	b.n	800857e <__ssputs_r+0x46>
	...

080085f0 <_svfiprintf_r>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	4698      	mov	r8, r3
 80085f6:	898b      	ldrh	r3, [r1, #12]
 80085f8:	061b      	lsls	r3, r3, #24
 80085fa:	b09d      	sub	sp, #116	; 0x74
 80085fc:	4607      	mov	r7, r0
 80085fe:	460d      	mov	r5, r1
 8008600:	4614      	mov	r4, r2
 8008602:	d50e      	bpl.n	8008622 <_svfiprintf_r+0x32>
 8008604:	690b      	ldr	r3, [r1, #16]
 8008606:	b963      	cbnz	r3, 8008622 <_svfiprintf_r+0x32>
 8008608:	2140      	movs	r1, #64	; 0x40
 800860a:	f7ff ff3b 	bl	8008484 <_malloc_r>
 800860e:	6028      	str	r0, [r5, #0]
 8008610:	6128      	str	r0, [r5, #16]
 8008612:	b920      	cbnz	r0, 800861e <_svfiprintf_r+0x2e>
 8008614:	230c      	movs	r3, #12
 8008616:	603b      	str	r3, [r7, #0]
 8008618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800861c:	e0d1      	b.n	80087c2 <_svfiprintf_r+0x1d2>
 800861e:	2340      	movs	r3, #64	; 0x40
 8008620:	616b      	str	r3, [r5, #20]
 8008622:	2300      	movs	r3, #0
 8008624:	9309      	str	r3, [sp, #36]	; 0x24
 8008626:	2320      	movs	r3, #32
 8008628:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800862c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008630:	2330      	movs	r3, #48	; 0x30
 8008632:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80087dc <_svfiprintf_r+0x1ec>
 8008636:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800863a:	f04f 0901 	mov.w	r9, #1
 800863e:	4623      	mov	r3, r4
 8008640:	469a      	mov	sl, r3
 8008642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008646:	b10a      	cbz	r2, 800864c <_svfiprintf_r+0x5c>
 8008648:	2a25      	cmp	r2, #37	; 0x25
 800864a:	d1f9      	bne.n	8008640 <_svfiprintf_r+0x50>
 800864c:	ebba 0b04 	subs.w	fp, sl, r4
 8008650:	d00b      	beq.n	800866a <_svfiprintf_r+0x7a>
 8008652:	465b      	mov	r3, fp
 8008654:	4622      	mov	r2, r4
 8008656:	4629      	mov	r1, r5
 8008658:	4638      	mov	r0, r7
 800865a:	f7ff ff6d 	bl	8008538 <__ssputs_r>
 800865e:	3001      	adds	r0, #1
 8008660:	f000 80aa 	beq.w	80087b8 <_svfiprintf_r+0x1c8>
 8008664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008666:	445a      	add	r2, fp
 8008668:	9209      	str	r2, [sp, #36]	; 0x24
 800866a:	f89a 3000 	ldrb.w	r3, [sl]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 80a2 	beq.w	80087b8 <_svfiprintf_r+0x1c8>
 8008674:	2300      	movs	r3, #0
 8008676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800867a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800867e:	f10a 0a01 	add.w	sl, sl, #1
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	9307      	str	r3, [sp, #28]
 8008686:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800868a:	931a      	str	r3, [sp, #104]	; 0x68
 800868c:	4654      	mov	r4, sl
 800868e:	2205      	movs	r2, #5
 8008690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008694:	4851      	ldr	r0, [pc, #324]	; (80087dc <_svfiprintf_r+0x1ec>)
 8008696:	f7f7 fdc3 	bl	8000220 <memchr>
 800869a:	9a04      	ldr	r2, [sp, #16]
 800869c:	b9d8      	cbnz	r0, 80086d6 <_svfiprintf_r+0xe6>
 800869e:	06d0      	lsls	r0, r2, #27
 80086a0:	bf44      	itt	mi
 80086a2:	2320      	movmi	r3, #32
 80086a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086a8:	0711      	lsls	r1, r2, #28
 80086aa:	bf44      	itt	mi
 80086ac:	232b      	movmi	r3, #43	; 0x2b
 80086ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086b2:	f89a 3000 	ldrb.w	r3, [sl]
 80086b6:	2b2a      	cmp	r3, #42	; 0x2a
 80086b8:	d015      	beq.n	80086e6 <_svfiprintf_r+0xf6>
 80086ba:	9a07      	ldr	r2, [sp, #28]
 80086bc:	4654      	mov	r4, sl
 80086be:	2000      	movs	r0, #0
 80086c0:	f04f 0c0a 	mov.w	ip, #10
 80086c4:	4621      	mov	r1, r4
 80086c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ca:	3b30      	subs	r3, #48	; 0x30
 80086cc:	2b09      	cmp	r3, #9
 80086ce:	d94e      	bls.n	800876e <_svfiprintf_r+0x17e>
 80086d0:	b1b0      	cbz	r0, 8008700 <_svfiprintf_r+0x110>
 80086d2:	9207      	str	r2, [sp, #28]
 80086d4:	e014      	b.n	8008700 <_svfiprintf_r+0x110>
 80086d6:	eba0 0308 	sub.w	r3, r0, r8
 80086da:	fa09 f303 	lsl.w	r3, r9, r3
 80086de:	4313      	orrs	r3, r2
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	46a2      	mov	sl, r4
 80086e4:	e7d2      	b.n	800868c <_svfiprintf_r+0x9c>
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	1d19      	adds	r1, r3, #4
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	9103      	str	r1, [sp, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bfbb      	ittet	lt
 80086f2:	425b      	neglt	r3, r3
 80086f4:	f042 0202 	orrlt.w	r2, r2, #2
 80086f8:	9307      	strge	r3, [sp, #28]
 80086fa:	9307      	strlt	r3, [sp, #28]
 80086fc:	bfb8      	it	lt
 80086fe:	9204      	strlt	r2, [sp, #16]
 8008700:	7823      	ldrb	r3, [r4, #0]
 8008702:	2b2e      	cmp	r3, #46	; 0x2e
 8008704:	d10c      	bne.n	8008720 <_svfiprintf_r+0x130>
 8008706:	7863      	ldrb	r3, [r4, #1]
 8008708:	2b2a      	cmp	r3, #42	; 0x2a
 800870a:	d135      	bne.n	8008778 <_svfiprintf_r+0x188>
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	1d1a      	adds	r2, r3, #4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	9203      	str	r2, [sp, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	bfb8      	it	lt
 8008718:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800871c:	3402      	adds	r4, #2
 800871e:	9305      	str	r3, [sp, #20]
 8008720:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087ec <_svfiprintf_r+0x1fc>
 8008724:	7821      	ldrb	r1, [r4, #0]
 8008726:	2203      	movs	r2, #3
 8008728:	4650      	mov	r0, sl
 800872a:	f7f7 fd79 	bl	8000220 <memchr>
 800872e:	b140      	cbz	r0, 8008742 <_svfiprintf_r+0x152>
 8008730:	2340      	movs	r3, #64	; 0x40
 8008732:	eba0 000a 	sub.w	r0, r0, sl
 8008736:	fa03 f000 	lsl.w	r0, r3, r0
 800873a:	9b04      	ldr	r3, [sp, #16]
 800873c:	4303      	orrs	r3, r0
 800873e:	3401      	adds	r4, #1
 8008740:	9304      	str	r3, [sp, #16]
 8008742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008746:	4826      	ldr	r0, [pc, #152]	; (80087e0 <_svfiprintf_r+0x1f0>)
 8008748:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800874c:	2206      	movs	r2, #6
 800874e:	f7f7 fd67 	bl	8000220 <memchr>
 8008752:	2800      	cmp	r0, #0
 8008754:	d038      	beq.n	80087c8 <_svfiprintf_r+0x1d8>
 8008756:	4b23      	ldr	r3, [pc, #140]	; (80087e4 <_svfiprintf_r+0x1f4>)
 8008758:	bb1b      	cbnz	r3, 80087a2 <_svfiprintf_r+0x1b2>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	3307      	adds	r3, #7
 800875e:	f023 0307 	bic.w	r3, r3, #7
 8008762:	3308      	adds	r3, #8
 8008764:	9303      	str	r3, [sp, #12]
 8008766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008768:	4433      	add	r3, r6
 800876a:	9309      	str	r3, [sp, #36]	; 0x24
 800876c:	e767      	b.n	800863e <_svfiprintf_r+0x4e>
 800876e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008772:	460c      	mov	r4, r1
 8008774:	2001      	movs	r0, #1
 8008776:	e7a5      	b.n	80086c4 <_svfiprintf_r+0xd4>
 8008778:	2300      	movs	r3, #0
 800877a:	3401      	adds	r4, #1
 800877c:	9305      	str	r3, [sp, #20]
 800877e:	4619      	mov	r1, r3
 8008780:	f04f 0c0a 	mov.w	ip, #10
 8008784:	4620      	mov	r0, r4
 8008786:	f810 2b01 	ldrb.w	r2, [r0], #1
 800878a:	3a30      	subs	r2, #48	; 0x30
 800878c:	2a09      	cmp	r2, #9
 800878e:	d903      	bls.n	8008798 <_svfiprintf_r+0x1a8>
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0c5      	beq.n	8008720 <_svfiprintf_r+0x130>
 8008794:	9105      	str	r1, [sp, #20]
 8008796:	e7c3      	b.n	8008720 <_svfiprintf_r+0x130>
 8008798:	fb0c 2101 	mla	r1, ip, r1, r2
 800879c:	4604      	mov	r4, r0
 800879e:	2301      	movs	r3, #1
 80087a0:	e7f0      	b.n	8008784 <_svfiprintf_r+0x194>
 80087a2:	ab03      	add	r3, sp, #12
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	462a      	mov	r2, r5
 80087a8:	4b0f      	ldr	r3, [pc, #60]	; (80087e8 <_svfiprintf_r+0x1f8>)
 80087aa:	a904      	add	r1, sp, #16
 80087ac:	4638      	mov	r0, r7
 80087ae:	f7fc fa85 	bl	8004cbc <_printf_float>
 80087b2:	1c42      	adds	r2, r0, #1
 80087b4:	4606      	mov	r6, r0
 80087b6:	d1d6      	bne.n	8008766 <_svfiprintf_r+0x176>
 80087b8:	89ab      	ldrh	r3, [r5, #12]
 80087ba:	065b      	lsls	r3, r3, #25
 80087bc:	f53f af2c 	bmi.w	8008618 <_svfiprintf_r+0x28>
 80087c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087c2:	b01d      	add	sp, #116	; 0x74
 80087c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c8:	ab03      	add	r3, sp, #12
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	462a      	mov	r2, r5
 80087ce:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <_svfiprintf_r+0x1f8>)
 80087d0:	a904      	add	r1, sp, #16
 80087d2:	4638      	mov	r0, r7
 80087d4:	f7fc fd16 	bl	8005204 <_printf_i>
 80087d8:	e7eb      	b.n	80087b2 <_svfiprintf_r+0x1c2>
 80087da:	bf00      	nop
 80087dc:	08009ffc 	.word	0x08009ffc
 80087e0:	0800a006 	.word	0x0800a006
 80087e4:	08004cbd 	.word	0x08004cbd
 80087e8:	08008539 	.word	0x08008539
 80087ec:	0800a002 	.word	0x0800a002

080087f0 <nan>:
 80087f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80087f8 <nan+0x8>
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	00000000 	.word	0x00000000
 80087fc:	7ff80000 	.word	0x7ff80000

08008800 <_sbrk_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4d06      	ldr	r5, [pc, #24]	; (800881c <_sbrk_r+0x1c>)
 8008804:	2300      	movs	r3, #0
 8008806:	4604      	mov	r4, r0
 8008808:	4608      	mov	r0, r1
 800880a:	602b      	str	r3, [r5, #0]
 800880c:	f7f9 fd5a 	bl	80022c4 <_sbrk>
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	d102      	bne.n	800881a <_sbrk_r+0x1a>
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	b103      	cbz	r3, 800881a <_sbrk_r+0x1a>
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	bd38      	pop	{r3, r4, r5, pc}
 800881c:	200004d4 	.word	0x200004d4

08008820 <strncmp>:
 8008820:	b510      	push	{r4, lr}
 8008822:	b16a      	cbz	r2, 8008840 <strncmp+0x20>
 8008824:	3901      	subs	r1, #1
 8008826:	1884      	adds	r4, r0, r2
 8008828:	f810 3b01 	ldrb.w	r3, [r0], #1
 800882c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008830:	4293      	cmp	r3, r2
 8008832:	d103      	bne.n	800883c <strncmp+0x1c>
 8008834:	42a0      	cmp	r0, r4
 8008836:	d001      	beq.n	800883c <strncmp+0x1c>
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1f5      	bne.n	8008828 <strncmp+0x8>
 800883c:	1a98      	subs	r0, r3, r2
 800883e:	bd10      	pop	{r4, pc}
 8008840:	4610      	mov	r0, r2
 8008842:	e7fc      	b.n	800883e <strncmp+0x1e>

08008844 <__ascii_wctomb>:
 8008844:	b149      	cbz	r1, 800885a <__ascii_wctomb+0x16>
 8008846:	2aff      	cmp	r2, #255	; 0xff
 8008848:	bf85      	ittet	hi
 800884a:	238a      	movhi	r3, #138	; 0x8a
 800884c:	6003      	strhi	r3, [r0, #0]
 800884e:	700a      	strbls	r2, [r1, #0]
 8008850:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008854:	bf98      	it	ls
 8008856:	2001      	movls	r0, #1
 8008858:	4770      	bx	lr
 800885a:	4608      	mov	r0, r1
 800885c:	4770      	bx	lr
	...

08008860 <__assert_func>:
 8008860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008862:	4614      	mov	r4, r2
 8008864:	461a      	mov	r2, r3
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <__assert_func+0x2c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4605      	mov	r5, r0
 800886c:	68d8      	ldr	r0, [r3, #12]
 800886e:	b14c      	cbz	r4, 8008884 <__assert_func+0x24>
 8008870:	4b07      	ldr	r3, [pc, #28]	; (8008890 <__assert_func+0x30>)
 8008872:	9100      	str	r1, [sp, #0]
 8008874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008878:	4906      	ldr	r1, [pc, #24]	; (8008894 <__assert_func+0x34>)
 800887a:	462b      	mov	r3, r5
 800887c:	f000 f80e 	bl	800889c <fiprintf>
 8008880:	f000 fa84 	bl	8008d8c <abort>
 8008884:	4b04      	ldr	r3, [pc, #16]	; (8008898 <__assert_func+0x38>)
 8008886:	461c      	mov	r4, r3
 8008888:	e7f3      	b.n	8008872 <__assert_func+0x12>
 800888a:	bf00      	nop
 800888c:	20000014 	.word	0x20000014
 8008890:	0800a00d 	.word	0x0800a00d
 8008894:	0800a01a 	.word	0x0800a01a
 8008898:	0800a048 	.word	0x0800a048

0800889c <fiprintf>:
 800889c:	b40e      	push	{r1, r2, r3}
 800889e:	b503      	push	{r0, r1, lr}
 80088a0:	4601      	mov	r1, r0
 80088a2:	ab03      	add	r3, sp, #12
 80088a4:	4805      	ldr	r0, [pc, #20]	; (80088bc <fiprintf+0x20>)
 80088a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088aa:	6800      	ldr	r0, [r0, #0]
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	f000 f87d 	bl	80089ac <_vfiprintf_r>
 80088b2:	b002      	add	sp, #8
 80088b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b8:	b003      	add	sp, #12
 80088ba:	4770      	bx	lr
 80088bc:	20000014 	.word	0x20000014

080088c0 <memmove>:
 80088c0:	4288      	cmp	r0, r1
 80088c2:	b510      	push	{r4, lr}
 80088c4:	eb01 0402 	add.w	r4, r1, r2
 80088c8:	d902      	bls.n	80088d0 <memmove+0x10>
 80088ca:	4284      	cmp	r4, r0
 80088cc:	4623      	mov	r3, r4
 80088ce:	d807      	bhi.n	80088e0 <memmove+0x20>
 80088d0:	1e43      	subs	r3, r0, #1
 80088d2:	42a1      	cmp	r1, r4
 80088d4:	d008      	beq.n	80088e8 <memmove+0x28>
 80088d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088de:	e7f8      	b.n	80088d2 <memmove+0x12>
 80088e0:	4402      	add	r2, r0
 80088e2:	4601      	mov	r1, r0
 80088e4:	428a      	cmp	r2, r1
 80088e6:	d100      	bne.n	80088ea <memmove+0x2a>
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088f2:	e7f7      	b.n	80088e4 <memmove+0x24>

080088f4 <__malloc_lock>:
 80088f4:	4801      	ldr	r0, [pc, #4]	; (80088fc <__malloc_lock+0x8>)
 80088f6:	f000 bc09 	b.w	800910c <__retarget_lock_acquire_recursive>
 80088fa:	bf00      	nop
 80088fc:	200004dc 	.word	0x200004dc

08008900 <__malloc_unlock>:
 8008900:	4801      	ldr	r0, [pc, #4]	; (8008908 <__malloc_unlock+0x8>)
 8008902:	f000 bc04 	b.w	800910e <__retarget_lock_release_recursive>
 8008906:	bf00      	nop
 8008908:	200004dc 	.word	0x200004dc

0800890c <_realloc_r>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	4607      	mov	r7, r0
 8008910:	4614      	mov	r4, r2
 8008912:	460e      	mov	r6, r1
 8008914:	b921      	cbnz	r1, 8008920 <_realloc_r+0x14>
 8008916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800891a:	4611      	mov	r1, r2
 800891c:	f7ff bdb2 	b.w	8008484 <_malloc_r>
 8008920:	b922      	cbnz	r2, 800892c <_realloc_r+0x20>
 8008922:	f7ff fd5f 	bl	80083e4 <_free_r>
 8008926:	4625      	mov	r5, r4
 8008928:	4628      	mov	r0, r5
 800892a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800892c:	f000 fc54 	bl	80091d8 <_malloc_usable_size_r>
 8008930:	42a0      	cmp	r0, r4
 8008932:	d20f      	bcs.n	8008954 <_realloc_r+0x48>
 8008934:	4621      	mov	r1, r4
 8008936:	4638      	mov	r0, r7
 8008938:	f7ff fda4 	bl	8008484 <_malloc_r>
 800893c:	4605      	mov	r5, r0
 800893e:	2800      	cmp	r0, #0
 8008940:	d0f2      	beq.n	8008928 <_realloc_r+0x1c>
 8008942:	4631      	mov	r1, r6
 8008944:	4622      	mov	r2, r4
 8008946:	f7ff f875 	bl	8007a34 <memcpy>
 800894a:	4631      	mov	r1, r6
 800894c:	4638      	mov	r0, r7
 800894e:	f7ff fd49 	bl	80083e4 <_free_r>
 8008952:	e7e9      	b.n	8008928 <_realloc_r+0x1c>
 8008954:	4635      	mov	r5, r6
 8008956:	e7e7      	b.n	8008928 <_realloc_r+0x1c>

08008958 <__sfputc_r>:
 8008958:	6893      	ldr	r3, [r2, #8]
 800895a:	3b01      	subs	r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	b410      	push	{r4}
 8008960:	6093      	str	r3, [r2, #8]
 8008962:	da08      	bge.n	8008976 <__sfputc_r+0x1e>
 8008964:	6994      	ldr	r4, [r2, #24]
 8008966:	42a3      	cmp	r3, r4
 8008968:	db01      	blt.n	800896e <__sfputc_r+0x16>
 800896a:	290a      	cmp	r1, #10
 800896c:	d103      	bne.n	8008976 <__sfputc_r+0x1e>
 800896e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008972:	f000 b94b 	b.w	8008c0c <__swbuf_r>
 8008976:	6813      	ldr	r3, [r2, #0]
 8008978:	1c58      	adds	r0, r3, #1
 800897a:	6010      	str	r0, [r2, #0]
 800897c:	7019      	strb	r1, [r3, #0]
 800897e:	4608      	mov	r0, r1
 8008980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008984:	4770      	bx	lr

08008986 <__sfputs_r>:
 8008986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008988:	4606      	mov	r6, r0
 800898a:	460f      	mov	r7, r1
 800898c:	4614      	mov	r4, r2
 800898e:	18d5      	adds	r5, r2, r3
 8008990:	42ac      	cmp	r4, r5
 8008992:	d101      	bne.n	8008998 <__sfputs_r+0x12>
 8008994:	2000      	movs	r0, #0
 8008996:	e007      	b.n	80089a8 <__sfputs_r+0x22>
 8008998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899c:	463a      	mov	r2, r7
 800899e:	4630      	mov	r0, r6
 80089a0:	f7ff ffda 	bl	8008958 <__sfputc_r>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d1f3      	bne.n	8008990 <__sfputs_r+0xa>
 80089a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089ac <_vfiprintf_r>:
 80089ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	460d      	mov	r5, r1
 80089b2:	b09d      	sub	sp, #116	; 0x74
 80089b4:	4614      	mov	r4, r2
 80089b6:	4698      	mov	r8, r3
 80089b8:	4606      	mov	r6, r0
 80089ba:	b118      	cbz	r0, 80089c4 <_vfiprintf_r+0x18>
 80089bc:	6983      	ldr	r3, [r0, #24]
 80089be:	b90b      	cbnz	r3, 80089c4 <_vfiprintf_r+0x18>
 80089c0:	f000 fb06 	bl	8008fd0 <__sinit>
 80089c4:	4b89      	ldr	r3, [pc, #548]	; (8008bec <_vfiprintf_r+0x240>)
 80089c6:	429d      	cmp	r5, r3
 80089c8:	d11b      	bne.n	8008a02 <_vfiprintf_r+0x56>
 80089ca:	6875      	ldr	r5, [r6, #4]
 80089cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089ce:	07d9      	lsls	r1, r3, #31
 80089d0:	d405      	bmi.n	80089de <_vfiprintf_r+0x32>
 80089d2:	89ab      	ldrh	r3, [r5, #12]
 80089d4:	059a      	lsls	r2, r3, #22
 80089d6:	d402      	bmi.n	80089de <_vfiprintf_r+0x32>
 80089d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089da:	f000 fb97 	bl	800910c <__retarget_lock_acquire_recursive>
 80089de:	89ab      	ldrh	r3, [r5, #12]
 80089e0:	071b      	lsls	r3, r3, #28
 80089e2:	d501      	bpl.n	80089e8 <_vfiprintf_r+0x3c>
 80089e4:	692b      	ldr	r3, [r5, #16]
 80089e6:	b9eb      	cbnz	r3, 8008a24 <_vfiprintf_r+0x78>
 80089e8:	4629      	mov	r1, r5
 80089ea:	4630      	mov	r0, r6
 80089ec:	f000 f960 	bl	8008cb0 <__swsetup_r>
 80089f0:	b1c0      	cbz	r0, 8008a24 <_vfiprintf_r+0x78>
 80089f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089f4:	07dc      	lsls	r4, r3, #31
 80089f6:	d50e      	bpl.n	8008a16 <_vfiprintf_r+0x6a>
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089fc:	b01d      	add	sp, #116	; 0x74
 80089fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a02:	4b7b      	ldr	r3, [pc, #492]	; (8008bf0 <_vfiprintf_r+0x244>)
 8008a04:	429d      	cmp	r5, r3
 8008a06:	d101      	bne.n	8008a0c <_vfiprintf_r+0x60>
 8008a08:	68b5      	ldr	r5, [r6, #8]
 8008a0a:	e7df      	b.n	80089cc <_vfiprintf_r+0x20>
 8008a0c:	4b79      	ldr	r3, [pc, #484]	; (8008bf4 <_vfiprintf_r+0x248>)
 8008a0e:	429d      	cmp	r5, r3
 8008a10:	bf08      	it	eq
 8008a12:	68f5      	ldreq	r5, [r6, #12]
 8008a14:	e7da      	b.n	80089cc <_vfiprintf_r+0x20>
 8008a16:	89ab      	ldrh	r3, [r5, #12]
 8008a18:	0598      	lsls	r0, r3, #22
 8008a1a:	d4ed      	bmi.n	80089f8 <_vfiprintf_r+0x4c>
 8008a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a1e:	f000 fb76 	bl	800910e <__retarget_lock_release_recursive>
 8008a22:	e7e9      	b.n	80089f8 <_vfiprintf_r+0x4c>
 8008a24:	2300      	movs	r3, #0
 8008a26:	9309      	str	r3, [sp, #36]	; 0x24
 8008a28:	2320      	movs	r3, #32
 8008a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a32:	2330      	movs	r3, #48	; 0x30
 8008a34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008bf8 <_vfiprintf_r+0x24c>
 8008a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a3c:	f04f 0901 	mov.w	r9, #1
 8008a40:	4623      	mov	r3, r4
 8008a42:	469a      	mov	sl, r3
 8008a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a48:	b10a      	cbz	r2, 8008a4e <_vfiprintf_r+0xa2>
 8008a4a:	2a25      	cmp	r2, #37	; 0x25
 8008a4c:	d1f9      	bne.n	8008a42 <_vfiprintf_r+0x96>
 8008a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a52:	d00b      	beq.n	8008a6c <_vfiprintf_r+0xc0>
 8008a54:	465b      	mov	r3, fp
 8008a56:	4622      	mov	r2, r4
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f7ff ff93 	bl	8008986 <__sfputs_r>
 8008a60:	3001      	adds	r0, #1
 8008a62:	f000 80aa 	beq.w	8008bba <_vfiprintf_r+0x20e>
 8008a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a68:	445a      	add	r2, fp
 8008a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 80a2 	beq.w	8008bba <_vfiprintf_r+0x20e>
 8008a76:	2300      	movs	r3, #0
 8008a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a80:	f10a 0a01 	add.w	sl, sl, #1
 8008a84:	9304      	str	r3, [sp, #16]
 8008a86:	9307      	str	r3, [sp, #28]
 8008a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8008a8e:	4654      	mov	r4, sl
 8008a90:	2205      	movs	r2, #5
 8008a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a96:	4858      	ldr	r0, [pc, #352]	; (8008bf8 <_vfiprintf_r+0x24c>)
 8008a98:	f7f7 fbc2 	bl	8000220 <memchr>
 8008a9c:	9a04      	ldr	r2, [sp, #16]
 8008a9e:	b9d8      	cbnz	r0, 8008ad8 <_vfiprintf_r+0x12c>
 8008aa0:	06d1      	lsls	r1, r2, #27
 8008aa2:	bf44      	itt	mi
 8008aa4:	2320      	movmi	r3, #32
 8008aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aaa:	0713      	lsls	r3, r2, #28
 8008aac:	bf44      	itt	mi
 8008aae:	232b      	movmi	r3, #43	; 0x2b
 8008ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aba:	d015      	beq.n	8008ae8 <_vfiprintf_r+0x13c>
 8008abc:	9a07      	ldr	r2, [sp, #28]
 8008abe:	4654      	mov	r4, sl
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	f04f 0c0a 	mov.w	ip, #10
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008acc:	3b30      	subs	r3, #48	; 0x30
 8008ace:	2b09      	cmp	r3, #9
 8008ad0:	d94e      	bls.n	8008b70 <_vfiprintf_r+0x1c4>
 8008ad2:	b1b0      	cbz	r0, 8008b02 <_vfiprintf_r+0x156>
 8008ad4:	9207      	str	r2, [sp, #28]
 8008ad6:	e014      	b.n	8008b02 <_vfiprintf_r+0x156>
 8008ad8:	eba0 0308 	sub.w	r3, r0, r8
 8008adc:	fa09 f303 	lsl.w	r3, r9, r3
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	9304      	str	r3, [sp, #16]
 8008ae4:	46a2      	mov	sl, r4
 8008ae6:	e7d2      	b.n	8008a8e <_vfiprintf_r+0xe2>
 8008ae8:	9b03      	ldr	r3, [sp, #12]
 8008aea:	1d19      	adds	r1, r3, #4
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	9103      	str	r1, [sp, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bfbb      	ittet	lt
 8008af4:	425b      	neglt	r3, r3
 8008af6:	f042 0202 	orrlt.w	r2, r2, #2
 8008afa:	9307      	strge	r3, [sp, #28]
 8008afc:	9307      	strlt	r3, [sp, #28]
 8008afe:	bfb8      	it	lt
 8008b00:	9204      	strlt	r2, [sp, #16]
 8008b02:	7823      	ldrb	r3, [r4, #0]
 8008b04:	2b2e      	cmp	r3, #46	; 0x2e
 8008b06:	d10c      	bne.n	8008b22 <_vfiprintf_r+0x176>
 8008b08:	7863      	ldrb	r3, [r4, #1]
 8008b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b0c:	d135      	bne.n	8008b7a <_vfiprintf_r+0x1ce>
 8008b0e:	9b03      	ldr	r3, [sp, #12]
 8008b10:	1d1a      	adds	r2, r3, #4
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	9203      	str	r2, [sp, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bfb8      	it	lt
 8008b1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b1e:	3402      	adds	r4, #2
 8008b20:	9305      	str	r3, [sp, #20]
 8008b22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c08 <_vfiprintf_r+0x25c>
 8008b26:	7821      	ldrb	r1, [r4, #0]
 8008b28:	2203      	movs	r2, #3
 8008b2a:	4650      	mov	r0, sl
 8008b2c:	f7f7 fb78 	bl	8000220 <memchr>
 8008b30:	b140      	cbz	r0, 8008b44 <_vfiprintf_r+0x198>
 8008b32:	2340      	movs	r3, #64	; 0x40
 8008b34:	eba0 000a 	sub.w	r0, r0, sl
 8008b38:	fa03 f000 	lsl.w	r0, r3, r0
 8008b3c:	9b04      	ldr	r3, [sp, #16]
 8008b3e:	4303      	orrs	r3, r0
 8008b40:	3401      	adds	r4, #1
 8008b42:	9304      	str	r3, [sp, #16]
 8008b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b48:	482c      	ldr	r0, [pc, #176]	; (8008bfc <_vfiprintf_r+0x250>)
 8008b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b4e:	2206      	movs	r2, #6
 8008b50:	f7f7 fb66 	bl	8000220 <memchr>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d03f      	beq.n	8008bd8 <_vfiprintf_r+0x22c>
 8008b58:	4b29      	ldr	r3, [pc, #164]	; (8008c00 <_vfiprintf_r+0x254>)
 8008b5a:	bb1b      	cbnz	r3, 8008ba4 <_vfiprintf_r+0x1f8>
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	3307      	adds	r3, #7
 8008b60:	f023 0307 	bic.w	r3, r3, #7
 8008b64:	3308      	adds	r3, #8
 8008b66:	9303      	str	r3, [sp, #12]
 8008b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6a:	443b      	add	r3, r7
 8008b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b6e:	e767      	b.n	8008a40 <_vfiprintf_r+0x94>
 8008b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b74:	460c      	mov	r4, r1
 8008b76:	2001      	movs	r0, #1
 8008b78:	e7a5      	b.n	8008ac6 <_vfiprintf_r+0x11a>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	3401      	adds	r4, #1
 8008b7e:	9305      	str	r3, [sp, #20]
 8008b80:	4619      	mov	r1, r3
 8008b82:	f04f 0c0a 	mov.w	ip, #10
 8008b86:	4620      	mov	r0, r4
 8008b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b8c:	3a30      	subs	r2, #48	; 0x30
 8008b8e:	2a09      	cmp	r2, #9
 8008b90:	d903      	bls.n	8008b9a <_vfiprintf_r+0x1ee>
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d0c5      	beq.n	8008b22 <_vfiprintf_r+0x176>
 8008b96:	9105      	str	r1, [sp, #20]
 8008b98:	e7c3      	b.n	8008b22 <_vfiprintf_r+0x176>
 8008b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e7f0      	b.n	8008b86 <_vfiprintf_r+0x1da>
 8008ba4:	ab03      	add	r3, sp, #12
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	462a      	mov	r2, r5
 8008baa:	4b16      	ldr	r3, [pc, #88]	; (8008c04 <_vfiprintf_r+0x258>)
 8008bac:	a904      	add	r1, sp, #16
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f7fc f884 	bl	8004cbc <_printf_float>
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	1c78      	adds	r0, r7, #1
 8008bb8:	d1d6      	bne.n	8008b68 <_vfiprintf_r+0x1bc>
 8008bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bbc:	07d9      	lsls	r1, r3, #31
 8008bbe:	d405      	bmi.n	8008bcc <_vfiprintf_r+0x220>
 8008bc0:	89ab      	ldrh	r3, [r5, #12]
 8008bc2:	059a      	lsls	r2, r3, #22
 8008bc4:	d402      	bmi.n	8008bcc <_vfiprintf_r+0x220>
 8008bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bc8:	f000 faa1 	bl	800910e <__retarget_lock_release_recursive>
 8008bcc:	89ab      	ldrh	r3, [r5, #12]
 8008bce:	065b      	lsls	r3, r3, #25
 8008bd0:	f53f af12 	bmi.w	80089f8 <_vfiprintf_r+0x4c>
 8008bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bd6:	e711      	b.n	80089fc <_vfiprintf_r+0x50>
 8008bd8:	ab03      	add	r3, sp, #12
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	462a      	mov	r2, r5
 8008bde:	4b09      	ldr	r3, [pc, #36]	; (8008c04 <_vfiprintf_r+0x258>)
 8008be0:	a904      	add	r1, sp, #16
 8008be2:	4630      	mov	r0, r6
 8008be4:	f7fc fb0e 	bl	8005204 <_printf_i>
 8008be8:	e7e4      	b.n	8008bb4 <_vfiprintf_r+0x208>
 8008bea:	bf00      	nop
 8008bec:	0800a06c 	.word	0x0800a06c
 8008bf0:	0800a08c 	.word	0x0800a08c
 8008bf4:	0800a04c 	.word	0x0800a04c
 8008bf8:	08009ffc 	.word	0x08009ffc
 8008bfc:	0800a006 	.word	0x0800a006
 8008c00:	08004cbd 	.word	0x08004cbd
 8008c04:	08008987 	.word	0x08008987
 8008c08:	0800a002 	.word	0x0800a002

08008c0c <__swbuf_r>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	460e      	mov	r6, r1
 8008c10:	4614      	mov	r4, r2
 8008c12:	4605      	mov	r5, r0
 8008c14:	b118      	cbz	r0, 8008c1e <__swbuf_r+0x12>
 8008c16:	6983      	ldr	r3, [r0, #24]
 8008c18:	b90b      	cbnz	r3, 8008c1e <__swbuf_r+0x12>
 8008c1a:	f000 f9d9 	bl	8008fd0 <__sinit>
 8008c1e:	4b21      	ldr	r3, [pc, #132]	; (8008ca4 <__swbuf_r+0x98>)
 8008c20:	429c      	cmp	r4, r3
 8008c22:	d12b      	bne.n	8008c7c <__swbuf_r+0x70>
 8008c24:	686c      	ldr	r4, [r5, #4]
 8008c26:	69a3      	ldr	r3, [r4, #24]
 8008c28:	60a3      	str	r3, [r4, #8]
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	071a      	lsls	r2, r3, #28
 8008c2e:	d52f      	bpl.n	8008c90 <__swbuf_r+0x84>
 8008c30:	6923      	ldr	r3, [r4, #16]
 8008c32:	b36b      	cbz	r3, 8008c90 <__swbuf_r+0x84>
 8008c34:	6923      	ldr	r3, [r4, #16]
 8008c36:	6820      	ldr	r0, [r4, #0]
 8008c38:	1ac0      	subs	r0, r0, r3
 8008c3a:	6963      	ldr	r3, [r4, #20]
 8008c3c:	b2f6      	uxtb	r6, r6
 8008c3e:	4283      	cmp	r3, r0
 8008c40:	4637      	mov	r7, r6
 8008c42:	dc04      	bgt.n	8008c4e <__swbuf_r+0x42>
 8008c44:	4621      	mov	r1, r4
 8008c46:	4628      	mov	r0, r5
 8008c48:	f000 f92e 	bl	8008ea8 <_fflush_r>
 8008c4c:	bb30      	cbnz	r0, 8008c9c <__swbuf_r+0x90>
 8008c4e:	68a3      	ldr	r3, [r4, #8]
 8008c50:	3b01      	subs	r3, #1
 8008c52:	60a3      	str	r3, [r4, #8]
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	6022      	str	r2, [r4, #0]
 8008c5a:	701e      	strb	r6, [r3, #0]
 8008c5c:	6963      	ldr	r3, [r4, #20]
 8008c5e:	3001      	adds	r0, #1
 8008c60:	4283      	cmp	r3, r0
 8008c62:	d004      	beq.n	8008c6e <__swbuf_r+0x62>
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	07db      	lsls	r3, r3, #31
 8008c68:	d506      	bpl.n	8008c78 <__swbuf_r+0x6c>
 8008c6a:	2e0a      	cmp	r6, #10
 8008c6c:	d104      	bne.n	8008c78 <__swbuf_r+0x6c>
 8008c6e:	4621      	mov	r1, r4
 8008c70:	4628      	mov	r0, r5
 8008c72:	f000 f919 	bl	8008ea8 <_fflush_r>
 8008c76:	b988      	cbnz	r0, 8008c9c <__swbuf_r+0x90>
 8008c78:	4638      	mov	r0, r7
 8008c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ca8 <__swbuf_r+0x9c>)
 8008c7e:	429c      	cmp	r4, r3
 8008c80:	d101      	bne.n	8008c86 <__swbuf_r+0x7a>
 8008c82:	68ac      	ldr	r4, [r5, #8]
 8008c84:	e7cf      	b.n	8008c26 <__swbuf_r+0x1a>
 8008c86:	4b09      	ldr	r3, [pc, #36]	; (8008cac <__swbuf_r+0xa0>)
 8008c88:	429c      	cmp	r4, r3
 8008c8a:	bf08      	it	eq
 8008c8c:	68ec      	ldreq	r4, [r5, #12]
 8008c8e:	e7ca      	b.n	8008c26 <__swbuf_r+0x1a>
 8008c90:	4621      	mov	r1, r4
 8008c92:	4628      	mov	r0, r5
 8008c94:	f000 f80c 	bl	8008cb0 <__swsetup_r>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d0cb      	beq.n	8008c34 <__swbuf_r+0x28>
 8008c9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ca0:	e7ea      	b.n	8008c78 <__swbuf_r+0x6c>
 8008ca2:	bf00      	nop
 8008ca4:	0800a06c 	.word	0x0800a06c
 8008ca8:	0800a08c 	.word	0x0800a08c
 8008cac:	0800a04c 	.word	0x0800a04c

08008cb0 <__swsetup_r>:
 8008cb0:	4b32      	ldr	r3, [pc, #200]	; (8008d7c <__swsetup_r+0xcc>)
 8008cb2:	b570      	push	{r4, r5, r6, lr}
 8008cb4:	681d      	ldr	r5, [r3, #0]
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	460c      	mov	r4, r1
 8008cba:	b125      	cbz	r5, 8008cc6 <__swsetup_r+0x16>
 8008cbc:	69ab      	ldr	r3, [r5, #24]
 8008cbe:	b913      	cbnz	r3, 8008cc6 <__swsetup_r+0x16>
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f000 f985 	bl	8008fd0 <__sinit>
 8008cc6:	4b2e      	ldr	r3, [pc, #184]	; (8008d80 <__swsetup_r+0xd0>)
 8008cc8:	429c      	cmp	r4, r3
 8008cca:	d10f      	bne.n	8008cec <__swsetup_r+0x3c>
 8008ccc:	686c      	ldr	r4, [r5, #4]
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cd4:	0719      	lsls	r1, r3, #28
 8008cd6:	d42c      	bmi.n	8008d32 <__swsetup_r+0x82>
 8008cd8:	06dd      	lsls	r5, r3, #27
 8008cda:	d411      	bmi.n	8008d00 <__swsetup_r+0x50>
 8008cdc:	2309      	movs	r3, #9
 8008cde:	6033      	str	r3, [r6, #0]
 8008ce0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ce4:	81a3      	strh	r3, [r4, #12]
 8008ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cea:	e03e      	b.n	8008d6a <__swsetup_r+0xba>
 8008cec:	4b25      	ldr	r3, [pc, #148]	; (8008d84 <__swsetup_r+0xd4>)
 8008cee:	429c      	cmp	r4, r3
 8008cf0:	d101      	bne.n	8008cf6 <__swsetup_r+0x46>
 8008cf2:	68ac      	ldr	r4, [r5, #8]
 8008cf4:	e7eb      	b.n	8008cce <__swsetup_r+0x1e>
 8008cf6:	4b24      	ldr	r3, [pc, #144]	; (8008d88 <__swsetup_r+0xd8>)
 8008cf8:	429c      	cmp	r4, r3
 8008cfa:	bf08      	it	eq
 8008cfc:	68ec      	ldreq	r4, [r5, #12]
 8008cfe:	e7e6      	b.n	8008cce <__swsetup_r+0x1e>
 8008d00:	0758      	lsls	r0, r3, #29
 8008d02:	d512      	bpl.n	8008d2a <__swsetup_r+0x7a>
 8008d04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d06:	b141      	cbz	r1, 8008d1a <__swsetup_r+0x6a>
 8008d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d0c:	4299      	cmp	r1, r3
 8008d0e:	d002      	beq.n	8008d16 <__swsetup_r+0x66>
 8008d10:	4630      	mov	r0, r6
 8008d12:	f7ff fb67 	bl	80083e4 <_free_r>
 8008d16:	2300      	movs	r3, #0
 8008d18:	6363      	str	r3, [r4, #52]	; 0x34
 8008d1a:	89a3      	ldrh	r3, [r4, #12]
 8008d1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d20:	81a3      	strh	r3, [r4, #12]
 8008d22:	2300      	movs	r3, #0
 8008d24:	6063      	str	r3, [r4, #4]
 8008d26:	6923      	ldr	r3, [r4, #16]
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	f043 0308 	orr.w	r3, r3, #8
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	6923      	ldr	r3, [r4, #16]
 8008d34:	b94b      	cbnz	r3, 8008d4a <__swsetup_r+0x9a>
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d40:	d003      	beq.n	8008d4a <__swsetup_r+0x9a>
 8008d42:	4621      	mov	r1, r4
 8008d44:	4630      	mov	r0, r6
 8008d46:	f000 fa07 	bl	8009158 <__smakebuf_r>
 8008d4a:	89a0      	ldrh	r0, [r4, #12]
 8008d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d50:	f010 0301 	ands.w	r3, r0, #1
 8008d54:	d00a      	beq.n	8008d6c <__swsetup_r+0xbc>
 8008d56:	2300      	movs	r3, #0
 8008d58:	60a3      	str	r3, [r4, #8]
 8008d5a:	6963      	ldr	r3, [r4, #20]
 8008d5c:	425b      	negs	r3, r3
 8008d5e:	61a3      	str	r3, [r4, #24]
 8008d60:	6923      	ldr	r3, [r4, #16]
 8008d62:	b943      	cbnz	r3, 8008d76 <__swsetup_r+0xc6>
 8008d64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d68:	d1ba      	bne.n	8008ce0 <__swsetup_r+0x30>
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	0781      	lsls	r1, r0, #30
 8008d6e:	bf58      	it	pl
 8008d70:	6963      	ldrpl	r3, [r4, #20]
 8008d72:	60a3      	str	r3, [r4, #8]
 8008d74:	e7f4      	b.n	8008d60 <__swsetup_r+0xb0>
 8008d76:	2000      	movs	r0, #0
 8008d78:	e7f7      	b.n	8008d6a <__swsetup_r+0xba>
 8008d7a:	bf00      	nop
 8008d7c:	20000014 	.word	0x20000014
 8008d80:	0800a06c 	.word	0x0800a06c
 8008d84:	0800a08c 	.word	0x0800a08c
 8008d88:	0800a04c 	.word	0x0800a04c

08008d8c <abort>:
 8008d8c:	b508      	push	{r3, lr}
 8008d8e:	2006      	movs	r0, #6
 8008d90:	f000 fa52 	bl	8009238 <raise>
 8008d94:	2001      	movs	r0, #1
 8008d96:	f7f9 fa1d 	bl	80021d4 <_exit>
	...

08008d9c <__sflush_r>:
 8008d9c:	898a      	ldrh	r2, [r1, #12]
 8008d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da2:	4605      	mov	r5, r0
 8008da4:	0710      	lsls	r0, r2, #28
 8008da6:	460c      	mov	r4, r1
 8008da8:	d458      	bmi.n	8008e5c <__sflush_r+0xc0>
 8008daa:	684b      	ldr	r3, [r1, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	dc05      	bgt.n	8008dbc <__sflush_r+0x20>
 8008db0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	dc02      	bgt.n	8008dbc <__sflush_r+0x20>
 8008db6:	2000      	movs	r0, #0
 8008db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	d0f9      	beq.n	8008db6 <__sflush_r+0x1a>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008dc8:	682f      	ldr	r7, [r5, #0]
 8008dca:	602b      	str	r3, [r5, #0]
 8008dcc:	d032      	beq.n	8008e34 <__sflush_r+0x98>
 8008dce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	075a      	lsls	r2, r3, #29
 8008dd4:	d505      	bpl.n	8008de2 <__sflush_r+0x46>
 8008dd6:	6863      	ldr	r3, [r4, #4]
 8008dd8:	1ac0      	subs	r0, r0, r3
 8008dda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ddc:	b10b      	cbz	r3, 8008de2 <__sflush_r+0x46>
 8008dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008de0:	1ac0      	subs	r0, r0, r3
 8008de2:	2300      	movs	r3, #0
 8008de4:	4602      	mov	r2, r0
 8008de6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008de8:	6a21      	ldr	r1, [r4, #32]
 8008dea:	4628      	mov	r0, r5
 8008dec:	47b0      	blx	r6
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	d106      	bne.n	8008e02 <__sflush_r+0x66>
 8008df4:	6829      	ldr	r1, [r5, #0]
 8008df6:	291d      	cmp	r1, #29
 8008df8:	d82c      	bhi.n	8008e54 <__sflush_r+0xb8>
 8008dfa:	4a2a      	ldr	r2, [pc, #168]	; (8008ea4 <__sflush_r+0x108>)
 8008dfc:	40ca      	lsrs	r2, r1
 8008dfe:	07d6      	lsls	r6, r2, #31
 8008e00:	d528      	bpl.n	8008e54 <__sflush_r+0xb8>
 8008e02:	2200      	movs	r2, #0
 8008e04:	6062      	str	r2, [r4, #4]
 8008e06:	04d9      	lsls	r1, r3, #19
 8008e08:	6922      	ldr	r2, [r4, #16]
 8008e0a:	6022      	str	r2, [r4, #0]
 8008e0c:	d504      	bpl.n	8008e18 <__sflush_r+0x7c>
 8008e0e:	1c42      	adds	r2, r0, #1
 8008e10:	d101      	bne.n	8008e16 <__sflush_r+0x7a>
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	b903      	cbnz	r3, 8008e18 <__sflush_r+0x7c>
 8008e16:	6560      	str	r0, [r4, #84]	; 0x54
 8008e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e1a:	602f      	str	r7, [r5, #0]
 8008e1c:	2900      	cmp	r1, #0
 8008e1e:	d0ca      	beq.n	8008db6 <__sflush_r+0x1a>
 8008e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e24:	4299      	cmp	r1, r3
 8008e26:	d002      	beq.n	8008e2e <__sflush_r+0x92>
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f7ff fadb 	bl	80083e4 <_free_r>
 8008e2e:	2000      	movs	r0, #0
 8008e30:	6360      	str	r0, [r4, #52]	; 0x34
 8008e32:	e7c1      	b.n	8008db8 <__sflush_r+0x1c>
 8008e34:	6a21      	ldr	r1, [r4, #32]
 8008e36:	2301      	movs	r3, #1
 8008e38:	4628      	mov	r0, r5
 8008e3a:	47b0      	blx	r6
 8008e3c:	1c41      	adds	r1, r0, #1
 8008e3e:	d1c7      	bne.n	8008dd0 <__sflush_r+0x34>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0c4      	beq.n	8008dd0 <__sflush_r+0x34>
 8008e46:	2b1d      	cmp	r3, #29
 8008e48:	d001      	beq.n	8008e4e <__sflush_r+0xb2>
 8008e4a:	2b16      	cmp	r3, #22
 8008e4c:	d101      	bne.n	8008e52 <__sflush_r+0xb6>
 8008e4e:	602f      	str	r7, [r5, #0]
 8008e50:	e7b1      	b.n	8008db6 <__sflush_r+0x1a>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e58:	81a3      	strh	r3, [r4, #12]
 8008e5a:	e7ad      	b.n	8008db8 <__sflush_r+0x1c>
 8008e5c:	690f      	ldr	r7, [r1, #16]
 8008e5e:	2f00      	cmp	r7, #0
 8008e60:	d0a9      	beq.n	8008db6 <__sflush_r+0x1a>
 8008e62:	0793      	lsls	r3, r2, #30
 8008e64:	680e      	ldr	r6, [r1, #0]
 8008e66:	bf08      	it	eq
 8008e68:	694b      	ldreq	r3, [r1, #20]
 8008e6a:	600f      	str	r7, [r1, #0]
 8008e6c:	bf18      	it	ne
 8008e6e:	2300      	movne	r3, #0
 8008e70:	eba6 0807 	sub.w	r8, r6, r7
 8008e74:	608b      	str	r3, [r1, #8]
 8008e76:	f1b8 0f00 	cmp.w	r8, #0
 8008e7a:	dd9c      	ble.n	8008db6 <__sflush_r+0x1a>
 8008e7c:	6a21      	ldr	r1, [r4, #32]
 8008e7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e80:	4643      	mov	r3, r8
 8008e82:	463a      	mov	r2, r7
 8008e84:	4628      	mov	r0, r5
 8008e86:	47b0      	blx	r6
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	dc06      	bgt.n	8008e9a <__sflush_r+0xfe>
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e92:	81a3      	strh	r3, [r4, #12]
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e98:	e78e      	b.n	8008db8 <__sflush_r+0x1c>
 8008e9a:	4407      	add	r7, r0
 8008e9c:	eba8 0800 	sub.w	r8, r8, r0
 8008ea0:	e7e9      	b.n	8008e76 <__sflush_r+0xda>
 8008ea2:	bf00      	nop
 8008ea4:	20400001 	.word	0x20400001

08008ea8 <_fflush_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	690b      	ldr	r3, [r1, #16]
 8008eac:	4605      	mov	r5, r0
 8008eae:	460c      	mov	r4, r1
 8008eb0:	b913      	cbnz	r3, 8008eb8 <_fflush_r+0x10>
 8008eb2:	2500      	movs	r5, #0
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	bd38      	pop	{r3, r4, r5, pc}
 8008eb8:	b118      	cbz	r0, 8008ec2 <_fflush_r+0x1a>
 8008eba:	6983      	ldr	r3, [r0, #24]
 8008ebc:	b90b      	cbnz	r3, 8008ec2 <_fflush_r+0x1a>
 8008ebe:	f000 f887 	bl	8008fd0 <__sinit>
 8008ec2:	4b14      	ldr	r3, [pc, #80]	; (8008f14 <_fflush_r+0x6c>)
 8008ec4:	429c      	cmp	r4, r3
 8008ec6:	d11b      	bne.n	8008f00 <_fflush_r+0x58>
 8008ec8:	686c      	ldr	r4, [r5, #4]
 8008eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0ef      	beq.n	8008eb2 <_fflush_r+0xa>
 8008ed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ed4:	07d0      	lsls	r0, r2, #31
 8008ed6:	d404      	bmi.n	8008ee2 <_fflush_r+0x3a>
 8008ed8:	0599      	lsls	r1, r3, #22
 8008eda:	d402      	bmi.n	8008ee2 <_fflush_r+0x3a>
 8008edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ede:	f000 f915 	bl	800910c <__retarget_lock_acquire_recursive>
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f7ff ff59 	bl	8008d9c <__sflush_r>
 8008eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008eec:	07da      	lsls	r2, r3, #31
 8008eee:	4605      	mov	r5, r0
 8008ef0:	d4e0      	bmi.n	8008eb4 <_fflush_r+0xc>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	059b      	lsls	r3, r3, #22
 8008ef6:	d4dd      	bmi.n	8008eb4 <_fflush_r+0xc>
 8008ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008efa:	f000 f908 	bl	800910e <__retarget_lock_release_recursive>
 8008efe:	e7d9      	b.n	8008eb4 <_fflush_r+0xc>
 8008f00:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <_fflush_r+0x70>)
 8008f02:	429c      	cmp	r4, r3
 8008f04:	d101      	bne.n	8008f0a <_fflush_r+0x62>
 8008f06:	68ac      	ldr	r4, [r5, #8]
 8008f08:	e7df      	b.n	8008eca <_fflush_r+0x22>
 8008f0a:	4b04      	ldr	r3, [pc, #16]	; (8008f1c <_fflush_r+0x74>)
 8008f0c:	429c      	cmp	r4, r3
 8008f0e:	bf08      	it	eq
 8008f10:	68ec      	ldreq	r4, [r5, #12]
 8008f12:	e7da      	b.n	8008eca <_fflush_r+0x22>
 8008f14:	0800a06c 	.word	0x0800a06c
 8008f18:	0800a08c 	.word	0x0800a08c
 8008f1c:	0800a04c 	.word	0x0800a04c

08008f20 <std>:
 8008f20:	2300      	movs	r3, #0
 8008f22:	b510      	push	{r4, lr}
 8008f24:	4604      	mov	r4, r0
 8008f26:	e9c0 3300 	strd	r3, r3, [r0]
 8008f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f2e:	6083      	str	r3, [r0, #8]
 8008f30:	8181      	strh	r1, [r0, #12]
 8008f32:	6643      	str	r3, [r0, #100]	; 0x64
 8008f34:	81c2      	strh	r2, [r0, #14]
 8008f36:	6183      	str	r3, [r0, #24]
 8008f38:	4619      	mov	r1, r3
 8008f3a:	2208      	movs	r2, #8
 8008f3c:	305c      	adds	r0, #92	; 0x5c
 8008f3e:	f7fb fe15 	bl	8004b6c <memset>
 8008f42:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <std+0x38>)
 8008f44:	6263      	str	r3, [r4, #36]	; 0x24
 8008f46:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <std+0x3c>)
 8008f48:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f4a:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <std+0x40>)
 8008f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f4e:	4b05      	ldr	r3, [pc, #20]	; (8008f64 <std+0x44>)
 8008f50:	6224      	str	r4, [r4, #32]
 8008f52:	6323      	str	r3, [r4, #48]	; 0x30
 8008f54:	bd10      	pop	{r4, pc}
 8008f56:	bf00      	nop
 8008f58:	08009271 	.word	0x08009271
 8008f5c:	08009293 	.word	0x08009293
 8008f60:	080092cb 	.word	0x080092cb
 8008f64:	080092ef 	.word	0x080092ef

08008f68 <_cleanup_r>:
 8008f68:	4901      	ldr	r1, [pc, #4]	; (8008f70 <_cleanup_r+0x8>)
 8008f6a:	f000 b8af 	b.w	80090cc <_fwalk_reent>
 8008f6e:	bf00      	nop
 8008f70:	08008ea9 	.word	0x08008ea9

08008f74 <__sfmoreglue>:
 8008f74:	b570      	push	{r4, r5, r6, lr}
 8008f76:	1e4a      	subs	r2, r1, #1
 8008f78:	2568      	movs	r5, #104	; 0x68
 8008f7a:	4355      	muls	r5, r2
 8008f7c:	460e      	mov	r6, r1
 8008f7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f82:	f7ff fa7f 	bl	8008484 <_malloc_r>
 8008f86:	4604      	mov	r4, r0
 8008f88:	b140      	cbz	r0, 8008f9c <__sfmoreglue+0x28>
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	e9c0 1600 	strd	r1, r6, [r0]
 8008f90:	300c      	adds	r0, #12
 8008f92:	60a0      	str	r0, [r4, #8]
 8008f94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f98:	f7fb fde8 	bl	8004b6c <memset>
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}

08008fa0 <__sfp_lock_acquire>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	; (8008fa8 <__sfp_lock_acquire+0x8>)
 8008fa2:	f000 b8b3 	b.w	800910c <__retarget_lock_acquire_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	200004e0 	.word	0x200004e0

08008fac <__sfp_lock_release>:
 8008fac:	4801      	ldr	r0, [pc, #4]	; (8008fb4 <__sfp_lock_release+0x8>)
 8008fae:	f000 b8ae 	b.w	800910e <__retarget_lock_release_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	200004e0 	.word	0x200004e0

08008fb8 <__sinit_lock_acquire>:
 8008fb8:	4801      	ldr	r0, [pc, #4]	; (8008fc0 <__sinit_lock_acquire+0x8>)
 8008fba:	f000 b8a7 	b.w	800910c <__retarget_lock_acquire_recursive>
 8008fbe:	bf00      	nop
 8008fc0:	200004db 	.word	0x200004db

08008fc4 <__sinit_lock_release>:
 8008fc4:	4801      	ldr	r0, [pc, #4]	; (8008fcc <__sinit_lock_release+0x8>)
 8008fc6:	f000 b8a2 	b.w	800910e <__retarget_lock_release_recursive>
 8008fca:	bf00      	nop
 8008fcc:	200004db 	.word	0x200004db

08008fd0 <__sinit>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	f7ff fff0 	bl	8008fb8 <__sinit_lock_acquire>
 8008fd8:	69a3      	ldr	r3, [r4, #24]
 8008fda:	b11b      	cbz	r3, 8008fe4 <__sinit+0x14>
 8008fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe0:	f7ff bff0 	b.w	8008fc4 <__sinit_lock_release>
 8008fe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fe8:	6523      	str	r3, [r4, #80]	; 0x50
 8008fea:	4b13      	ldr	r3, [pc, #76]	; (8009038 <__sinit+0x68>)
 8008fec:	4a13      	ldr	r2, [pc, #76]	; (800903c <__sinit+0x6c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ff2:	42a3      	cmp	r3, r4
 8008ff4:	bf04      	itt	eq
 8008ff6:	2301      	moveq	r3, #1
 8008ff8:	61a3      	streq	r3, [r4, #24]
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f000 f820 	bl	8009040 <__sfp>
 8009000:	6060      	str	r0, [r4, #4]
 8009002:	4620      	mov	r0, r4
 8009004:	f000 f81c 	bl	8009040 <__sfp>
 8009008:	60a0      	str	r0, [r4, #8]
 800900a:	4620      	mov	r0, r4
 800900c:	f000 f818 	bl	8009040 <__sfp>
 8009010:	2200      	movs	r2, #0
 8009012:	60e0      	str	r0, [r4, #12]
 8009014:	2104      	movs	r1, #4
 8009016:	6860      	ldr	r0, [r4, #4]
 8009018:	f7ff ff82 	bl	8008f20 <std>
 800901c:	68a0      	ldr	r0, [r4, #8]
 800901e:	2201      	movs	r2, #1
 8009020:	2109      	movs	r1, #9
 8009022:	f7ff ff7d 	bl	8008f20 <std>
 8009026:	68e0      	ldr	r0, [r4, #12]
 8009028:	2202      	movs	r2, #2
 800902a:	2112      	movs	r1, #18
 800902c:	f7ff ff78 	bl	8008f20 <std>
 8009030:	2301      	movs	r3, #1
 8009032:	61a3      	str	r3, [r4, #24]
 8009034:	e7d2      	b.n	8008fdc <__sinit+0xc>
 8009036:	bf00      	nop
 8009038:	08009bf8 	.word	0x08009bf8
 800903c:	08008f69 	.word	0x08008f69

08009040 <__sfp>:
 8009040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009042:	4607      	mov	r7, r0
 8009044:	f7ff ffac 	bl	8008fa0 <__sfp_lock_acquire>
 8009048:	4b1e      	ldr	r3, [pc, #120]	; (80090c4 <__sfp+0x84>)
 800904a:	681e      	ldr	r6, [r3, #0]
 800904c:	69b3      	ldr	r3, [r6, #24]
 800904e:	b913      	cbnz	r3, 8009056 <__sfp+0x16>
 8009050:	4630      	mov	r0, r6
 8009052:	f7ff ffbd 	bl	8008fd0 <__sinit>
 8009056:	3648      	adds	r6, #72	; 0x48
 8009058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800905c:	3b01      	subs	r3, #1
 800905e:	d503      	bpl.n	8009068 <__sfp+0x28>
 8009060:	6833      	ldr	r3, [r6, #0]
 8009062:	b30b      	cbz	r3, 80090a8 <__sfp+0x68>
 8009064:	6836      	ldr	r6, [r6, #0]
 8009066:	e7f7      	b.n	8009058 <__sfp+0x18>
 8009068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800906c:	b9d5      	cbnz	r5, 80090a4 <__sfp+0x64>
 800906e:	4b16      	ldr	r3, [pc, #88]	; (80090c8 <__sfp+0x88>)
 8009070:	60e3      	str	r3, [r4, #12]
 8009072:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009076:	6665      	str	r5, [r4, #100]	; 0x64
 8009078:	f000 f847 	bl	800910a <__retarget_lock_init_recursive>
 800907c:	f7ff ff96 	bl	8008fac <__sfp_lock_release>
 8009080:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009084:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009088:	6025      	str	r5, [r4, #0]
 800908a:	61a5      	str	r5, [r4, #24]
 800908c:	2208      	movs	r2, #8
 800908e:	4629      	mov	r1, r5
 8009090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009094:	f7fb fd6a 	bl	8004b6c <memset>
 8009098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800909c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80090a0:	4620      	mov	r0, r4
 80090a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a4:	3468      	adds	r4, #104	; 0x68
 80090a6:	e7d9      	b.n	800905c <__sfp+0x1c>
 80090a8:	2104      	movs	r1, #4
 80090aa:	4638      	mov	r0, r7
 80090ac:	f7ff ff62 	bl	8008f74 <__sfmoreglue>
 80090b0:	4604      	mov	r4, r0
 80090b2:	6030      	str	r0, [r6, #0]
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d1d5      	bne.n	8009064 <__sfp+0x24>
 80090b8:	f7ff ff78 	bl	8008fac <__sfp_lock_release>
 80090bc:	230c      	movs	r3, #12
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	e7ee      	b.n	80090a0 <__sfp+0x60>
 80090c2:	bf00      	nop
 80090c4:	08009bf8 	.word	0x08009bf8
 80090c8:	ffff0001 	.word	0xffff0001

080090cc <_fwalk_reent>:
 80090cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d0:	4606      	mov	r6, r0
 80090d2:	4688      	mov	r8, r1
 80090d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090d8:	2700      	movs	r7, #0
 80090da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090de:	f1b9 0901 	subs.w	r9, r9, #1
 80090e2:	d505      	bpl.n	80090f0 <_fwalk_reent+0x24>
 80090e4:	6824      	ldr	r4, [r4, #0]
 80090e6:	2c00      	cmp	r4, #0
 80090e8:	d1f7      	bne.n	80090da <_fwalk_reent+0xe>
 80090ea:	4638      	mov	r0, r7
 80090ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f0:	89ab      	ldrh	r3, [r5, #12]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d907      	bls.n	8009106 <_fwalk_reent+0x3a>
 80090f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090fa:	3301      	adds	r3, #1
 80090fc:	d003      	beq.n	8009106 <_fwalk_reent+0x3a>
 80090fe:	4629      	mov	r1, r5
 8009100:	4630      	mov	r0, r6
 8009102:	47c0      	blx	r8
 8009104:	4307      	orrs	r7, r0
 8009106:	3568      	adds	r5, #104	; 0x68
 8009108:	e7e9      	b.n	80090de <_fwalk_reent+0x12>

0800910a <__retarget_lock_init_recursive>:
 800910a:	4770      	bx	lr

0800910c <__retarget_lock_acquire_recursive>:
 800910c:	4770      	bx	lr

0800910e <__retarget_lock_release_recursive>:
 800910e:	4770      	bx	lr

08009110 <__swhatbuf_r>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	460e      	mov	r6, r1
 8009114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009118:	2900      	cmp	r1, #0
 800911a:	b096      	sub	sp, #88	; 0x58
 800911c:	4614      	mov	r4, r2
 800911e:	461d      	mov	r5, r3
 8009120:	da07      	bge.n	8009132 <__swhatbuf_r+0x22>
 8009122:	2300      	movs	r3, #0
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	89b3      	ldrh	r3, [r6, #12]
 8009128:	061a      	lsls	r2, r3, #24
 800912a:	d410      	bmi.n	800914e <__swhatbuf_r+0x3e>
 800912c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009130:	e00e      	b.n	8009150 <__swhatbuf_r+0x40>
 8009132:	466a      	mov	r2, sp
 8009134:	f000 f902 	bl	800933c <_fstat_r>
 8009138:	2800      	cmp	r0, #0
 800913a:	dbf2      	blt.n	8009122 <__swhatbuf_r+0x12>
 800913c:	9a01      	ldr	r2, [sp, #4]
 800913e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009142:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009146:	425a      	negs	r2, r3
 8009148:	415a      	adcs	r2, r3
 800914a:	602a      	str	r2, [r5, #0]
 800914c:	e7ee      	b.n	800912c <__swhatbuf_r+0x1c>
 800914e:	2340      	movs	r3, #64	; 0x40
 8009150:	2000      	movs	r0, #0
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	b016      	add	sp, #88	; 0x58
 8009156:	bd70      	pop	{r4, r5, r6, pc}

08009158 <__smakebuf_r>:
 8009158:	898b      	ldrh	r3, [r1, #12]
 800915a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800915c:	079d      	lsls	r5, r3, #30
 800915e:	4606      	mov	r6, r0
 8009160:	460c      	mov	r4, r1
 8009162:	d507      	bpl.n	8009174 <__smakebuf_r+0x1c>
 8009164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	6123      	str	r3, [r4, #16]
 800916c:	2301      	movs	r3, #1
 800916e:	6163      	str	r3, [r4, #20]
 8009170:	b002      	add	sp, #8
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	ab01      	add	r3, sp, #4
 8009176:	466a      	mov	r2, sp
 8009178:	f7ff ffca 	bl	8009110 <__swhatbuf_r>
 800917c:	9900      	ldr	r1, [sp, #0]
 800917e:	4605      	mov	r5, r0
 8009180:	4630      	mov	r0, r6
 8009182:	f7ff f97f 	bl	8008484 <_malloc_r>
 8009186:	b948      	cbnz	r0, 800919c <__smakebuf_r+0x44>
 8009188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918c:	059a      	lsls	r2, r3, #22
 800918e:	d4ef      	bmi.n	8009170 <__smakebuf_r+0x18>
 8009190:	f023 0303 	bic.w	r3, r3, #3
 8009194:	f043 0302 	orr.w	r3, r3, #2
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	e7e3      	b.n	8009164 <__smakebuf_r+0xc>
 800919c:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <__smakebuf_r+0x7c>)
 800919e:	62b3      	str	r3, [r6, #40]	; 0x28
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	6020      	str	r0, [r4, #0]
 80091a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a8:	81a3      	strh	r3, [r4, #12]
 80091aa:	9b00      	ldr	r3, [sp, #0]
 80091ac:	6163      	str	r3, [r4, #20]
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	6120      	str	r0, [r4, #16]
 80091b2:	b15b      	cbz	r3, 80091cc <__smakebuf_r+0x74>
 80091b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b8:	4630      	mov	r0, r6
 80091ba:	f000 f8d1 	bl	8009360 <_isatty_r>
 80091be:	b128      	cbz	r0, 80091cc <__smakebuf_r+0x74>
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	f023 0303 	bic.w	r3, r3, #3
 80091c6:	f043 0301 	orr.w	r3, r3, #1
 80091ca:	81a3      	strh	r3, [r4, #12]
 80091cc:	89a0      	ldrh	r0, [r4, #12]
 80091ce:	4305      	orrs	r5, r0
 80091d0:	81a5      	strh	r5, [r4, #12]
 80091d2:	e7cd      	b.n	8009170 <__smakebuf_r+0x18>
 80091d4:	08008f69 	.word	0x08008f69

080091d8 <_malloc_usable_size_r>:
 80091d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091dc:	1f18      	subs	r0, r3, #4
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bfbc      	itt	lt
 80091e2:	580b      	ldrlt	r3, [r1, r0]
 80091e4:	18c0      	addlt	r0, r0, r3
 80091e6:	4770      	bx	lr

080091e8 <_raise_r>:
 80091e8:	291f      	cmp	r1, #31
 80091ea:	b538      	push	{r3, r4, r5, lr}
 80091ec:	4604      	mov	r4, r0
 80091ee:	460d      	mov	r5, r1
 80091f0:	d904      	bls.n	80091fc <_raise_r+0x14>
 80091f2:	2316      	movs	r3, #22
 80091f4:	6003      	str	r3, [r0, #0]
 80091f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80091fe:	b112      	cbz	r2, 8009206 <_raise_r+0x1e>
 8009200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009204:	b94b      	cbnz	r3, 800921a <_raise_r+0x32>
 8009206:	4620      	mov	r0, r4
 8009208:	f000 f830 	bl	800926c <_getpid_r>
 800920c:	462a      	mov	r2, r5
 800920e:	4601      	mov	r1, r0
 8009210:	4620      	mov	r0, r4
 8009212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009216:	f000 b817 	b.w	8009248 <_kill_r>
 800921a:	2b01      	cmp	r3, #1
 800921c:	d00a      	beq.n	8009234 <_raise_r+0x4c>
 800921e:	1c59      	adds	r1, r3, #1
 8009220:	d103      	bne.n	800922a <_raise_r+0x42>
 8009222:	2316      	movs	r3, #22
 8009224:	6003      	str	r3, [r0, #0]
 8009226:	2001      	movs	r0, #1
 8009228:	e7e7      	b.n	80091fa <_raise_r+0x12>
 800922a:	2400      	movs	r4, #0
 800922c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009230:	4628      	mov	r0, r5
 8009232:	4798      	blx	r3
 8009234:	2000      	movs	r0, #0
 8009236:	e7e0      	b.n	80091fa <_raise_r+0x12>

08009238 <raise>:
 8009238:	4b02      	ldr	r3, [pc, #8]	; (8009244 <raise+0xc>)
 800923a:	4601      	mov	r1, r0
 800923c:	6818      	ldr	r0, [r3, #0]
 800923e:	f7ff bfd3 	b.w	80091e8 <_raise_r>
 8009242:	bf00      	nop
 8009244:	20000014 	.word	0x20000014

08009248 <_kill_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d07      	ldr	r5, [pc, #28]	; (8009268 <_kill_r+0x20>)
 800924c:	2300      	movs	r3, #0
 800924e:	4604      	mov	r4, r0
 8009250:	4608      	mov	r0, r1
 8009252:	4611      	mov	r1, r2
 8009254:	602b      	str	r3, [r5, #0]
 8009256:	f7f8 ffad 	bl	80021b4 <_kill>
 800925a:	1c43      	adds	r3, r0, #1
 800925c:	d102      	bne.n	8009264 <_kill_r+0x1c>
 800925e:	682b      	ldr	r3, [r5, #0]
 8009260:	b103      	cbz	r3, 8009264 <_kill_r+0x1c>
 8009262:	6023      	str	r3, [r4, #0]
 8009264:	bd38      	pop	{r3, r4, r5, pc}
 8009266:	bf00      	nop
 8009268:	200004d4 	.word	0x200004d4

0800926c <_getpid_r>:
 800926c:	f7f8 bf9a 	b.w	80021a4 <_getpid>

08009270 <__sread>:
 8009270:	b510      	push	{r4, lr}
 8009272:	460c      	mov	r4, r1
 8009274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009278:	f000 f894 	bl	80093a4 <_read_r>
 800927c:	2800      	cmp	r0, #0
 800927e:	bfab      	itete	ge
 8009280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009282:	89a3      	ldrhlt	r3, [r4, #12]
 8009284:	181b      	addge	r3, r3, r0
 8009286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800928a:	bfac      	ite	ge
 800928c:	6563      	strge	r3, [r4, #84]	; 0x54
 800928e:	81a3      	strhlt	r3, [r4, #12]
 8009290:	bd10      	pop	{r4, pc}

08009292 <__swrite>:
 8009292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009296:	461f      	mov	r7, r3
 8009298:	898b      	ldrh	r3, [r1, #12]
 800929a:	05db      	lsls	r3, r3, #23
 800929c:	4605      	mov	r5, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	4616      	mov	r6, r2
 80092a2:	d505      	bpl.n	80092b0 <__swrite+0x1e>
 80092a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a8:	2302      	movs	r3, #2
 80092aa:	2200      	movs	r2, #0
 80092ac:	f000 f868 	bl	8009380 <_lseek_r>
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092ba:	81a3      	strh	r3, [r4, #12]
 80092bc:	4632      	mov	r2, r6
 80092be:	463b      	mov	r3, r7
 80092c0:	4628      	mov	r0, r5
 80092c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092c6:	f000 b817 	b.w	80092f8 <_write_r>

080092ca <__sseek>:
 80092ca:	b510      	push	{r4, lr}
 80092cc:	460c      	mov	r4, r1
 80092ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d2:	f000 f855 	bl	8009380 <_lseek_r>
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	bf15      	itete	ne
 80092dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80092de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092e6:	81a3      	strheq	r3, [r4, #12]
 80092e8:	bf18      	it	ne
 80092ea:	81a3      	strhne	r3, [r4, #12]
 80092ec:	bd10      	pop	{r4, pc}

080092ee <__sclose>:
 80092ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f2:	f000 b813 	b.w	800931c <_close_r>
	...

080092f8 <_write_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d07      	ldr	r5, [pc, #28]	; (8009318 <_write_r+0x20>)
 80092fc:	4604      	mov	r4, r0
 80092fe:	4608      	mov	r0, r1
 8009300:	4611      	mov	r1, r2
 8009302:	2200      	movs	r2, #0
 8009304:	602a      	str	r2, [r5, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	f7f8 ff8b 	bl	8002222 <_write>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d102      	bne.n	8009316 <_write_r+0x1e>
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	b103      	cbz	r3, 8009316 <_write_r+0x1e>
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	200004d4 	.word	0x200004d4

0800931c <_close_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4d06      	ldr	r5, [pc, #24]	; (8009338 <_close_r+0x1c>)
 8009320:	2300      	movs	r3, #0
 8009322:	4604      	mov	r4, r0
 8009324:	4608      	mov	r0, r1
 8009326:	602b      	str	r3, [r5, #0]
 8009328:	f7f8 ff97 	bl	800225a <_close>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	d102      	bne.n	8009336 <_close_r+0x1a>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	b103      	cbz	r3, 8009336 <_close_r+0x1a>
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	200004d4 	.word	0x200004d4

0800933c <_fstat_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	4d07      	ldr	r5, [pc, #28]	; (800935c <_fstat_r+0x20>)
 8009340:	2300      	movs	r3, #0
 8009342:	4604      	mov	r4, r0
 8009344:	4608      	mov	r0, r1
 8009346:	4611      	mov	r1, r2
 8009348:	602b      	str	r3, [r5, #0]
 800934a:	f7f8 ff92 	bl	8002272 <_fstat>
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	d102      	bne.n	8009358 <_fstat_r+0x1c>
 8009352:	682b      	ldr	r3, [r5, #0]
 8009354:	b103      	cbz	r3, 8009358 <_fstat_r+0x1c>
 8009356:	6023      	str	r3, [r4, #0]
 8009358:	bd38      	pop	{r3, r4, r5, pc}
 800935a:	bf00      	nop
 800935c:	200004d4 	.word	0x200004d4

08009360 <_isatty_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d06      	ldr	r5, [pc, #24]	; (800937c <_isatty_r+0x1c>)
 8009364:	2300      	movs	r3, #0
 8009366:	4604      	mov	r4, r0
 8009368:	4608      	mov	r0, r1
 800936a:	602b      	str	r3, [r5, #0]
 800936c:	f7f8 ff91 	bl	8002292 <_isatty>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	d102      	bne.n	800937a <_isatty_r+0x1a>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	b103      	cbz	r3, 800937a <_isatty_r+0x1a>
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	200004d4 	.word	0x200004d4

08009380 <_lseek_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	4d07      	ldr	r5, [pc, #28]	; (80093a0 <_lseek_r+0x20>)
 8009384:	4604      	mov	r4, r0
 8009386:	4608      	mov	r0, r1
 8009388:	4611      	mov	r1, r2
 800938a:	2200      	movs	r2, #0
 800938c:	602a      	str	r2, [r5, #0]
 800938e:	461a      	mov	r2, r3
 8009390:	f7f8 ff8a 	bl	80022a8 <_lseek>
 8009394:	1c43      	adds	r3, r0, #1
 8009396:	d102      	bne.n	800939e <_lseek_r+0x1e>
 8009398:	682b      	ldr	r3, [r5, #0]
 800939a:	b103      	cbz	r3, 800939e <_lseek_r+0x1e>
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	bd38      	pop	{r3, r4, r5, pc}
 80093a0:	200004d4 	.word	0x200004d4

080093a4 <_read_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4d07      	ldr	r5, [pc, #28]	; (80093c4 <_read_r+0x20>)
 80093a8:	4604      	mov	r4, r0
 80093aa:	4608      	mov	r0, r1
 80093ac:	4611      	mov	r1, r2
 80093ae:	2200      	movs	r2, #0
 80093b0:	602a      	str	r2, [r5, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	f7f8 ff18 	bl	80021e8 <_read>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_read_r+0x1e>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_read_r+0x1e>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	200004d4 	.word	0x200004d4

080093c8 <_init>:
 80093c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ca:	bf00      	nop
 80093cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ce:	bc08      	pop	{r3}
 80093d0:	469e      	mov	lr, r3
 80093d2:	4770      	bx	lr

080093d4 <_fini>:
 80093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d6:	bf00      	nop
 80093d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093da:	bc08      	pop	{r3}
 80093dc:	469e      	mov	lr, r3
 80093de:	4770      	bx	lr
