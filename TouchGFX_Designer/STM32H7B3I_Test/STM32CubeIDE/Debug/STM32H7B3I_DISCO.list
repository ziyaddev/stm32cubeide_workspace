
STM32H7B3I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000269d4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ddc  08026c84  08026c84  00036c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000024  0802ba60  0802ba60  0003ba60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802ba84  0802ba84  001772a8  2**0
                  CONTENTS
  5 .ARM          00000000  0802ba84  0802ba84  001772a8  2**0
                  CONTENTS
  6 .preinit_array 00000000  0802ba84  0802ba84  001772a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0802ba84  0802ba84  0003ba84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802ba98  0802ba98  0003ba98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000110  24000000  0802baa0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000cd6c  24000110  0802bbb0  00040110  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  2400ce7c  0802bbb0  0004ce7c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  001772a8  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 FontFlashSection 000007e8  90000000  90000000  00110000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000040  900007e8  900007e8  001107e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 00066a80  90000828  90000828  00110828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   0004b60d  00000000  00000000  001772d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000d4f93  00000000  00000000  001c28e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00014921  00000000  00000000  00297876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00004278  00000000  00000000  002ac198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00176243  00000000  00000000  002b0410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00003dc8  00000000  00000000  00426658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  0003f909  00000000  00000000  0042a420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000d2  00000000  00000000  00469d29  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000122c4  00000000  00000000  00469dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08026c6c 	.word	0x08026c6c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08026c6c 	.word	0x08026c6c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000396:	e003      	b.n	80003a0 <LoopCopyDataInit>

08000398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800039a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800039c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800039e:	3104      	adds	r1, #4

080003a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003a0:	480b      	ldr	r0, [pc, #44]	; (80003d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003a8:	d3f6      	bcc.n	8000398 <CopyDataInit>
  ldr  r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003ac:	e002      	b.n	80003b4 <LoopFillZerobss>

080003ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003b0:	f842 3b04 	str.w	r3, [r2], #4

080003b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003b8:	d3f9      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ba:	f00a fb11 	bl	800a9e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003be:	f025 fc25 	bl	8025c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f002 fa49 	bl	8002858 <main>
  bx  lr
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003c8:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 80003cc:	0802baa0 	.word	0x0802baa0
  ldr  r0, =_sdata
 80003d0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003d4:	24000110 	.word	0x24000110
  ldr  r2, =_sbss
 80003d8:	24000110 	.word	0x24000110
  ldr  r3, = _ebss
 80003dc:	2400ce7c 	.word	0x2400ce7c

080003e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>

080003e2 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80003e6:	f001 fd0f 	bl	8001e08 <touchgfx_init>
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}

080003ee <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80003f6:	f001 fd31 	bl	8001e5c <touchgfx_taskEntry>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
    {
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	601a      	str	r2, [r3, #0]
    }
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4618      	mov	r0, r3
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	08027c90 	.word	0x08027c90

08000424 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    }
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	f7ff ffe9 	bl	8000404 <_ZN8touchgfx15TouchControllerD1Ev>
 8000432:	2104      	movs	r1, #4
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f025 fb70 	bl	8025b1a <_ZdlPvj>
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4618      	mov	r0, r3
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 800044c:	2308      	movs	r3, #8
 800044e:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8000454:	4b07      	ldr	r3, [pc, #28]	; (8000474 <_ZN20STM32TouchController4initEv+0x30>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <_ZN20STM32TouchController4initEv+0x34>)
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 8000460:	f107 0308 	add.w	r3, r7, #8
 8000464:	4619      	mov	r1, r3
 8000466:	2000      	movs	r0, #0
 8000468:	f00a f89c 	bl	800a5a4 <BSP_TS_Init>
}
 800046c:	bf00      	nop
 800046e:	3718      	adds	r7, #24
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	2400c89e 	.word	0x2400c89e
 8000478:	2400c8a0 	.word	0x2400c8a0

0800047c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	2000      	movs	r0, #0
 800049c:	f00a f928 	bl	800a6f0 <BSP_TS_GetState>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	bf14      	ite	ne
 80004a6:	2301      	movne	r3, #1
 80004a8:	2300      	moveq	r3, #0
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d00a      	beq.n	80004c6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>
		"	mov %0, %1												\n"	\
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
 80004b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004b4:	f383 8811 	msr	BASEPRI, r3
 80004b8:	f3bf 8f6f 	isb	sy
 80004bc:	f3bf 8f4f 	dsb	sy
 80004c0:	61fb      	str	r3, [r7, #28]
}
 80004c2:	bf00      	nop
    {
        configASSERT(0);
 80004c4:	e7fe      	b.n	80004c4 <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d009      	beq.n	80004e0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	461a      	mov	r2, r3
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 80004d4:	69bb      	ldr	r3, [r7, #24]
 80004d6:	461a      	mov	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	601a      	str	r2, [r3, #0]

        return true;
 80004dc:	2301      	movs	r3, #1
 80004de:	e000      	b.n	80004e2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 80004e0:	2300      	movs	r3, #0
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3720      	adds	r7, #32
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	4a05      	ldr	r2, [pc, #20]	; (800050c <_ZN20STM32TouchControllerD1Ev+0x20>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ff81 	bl	8000404 <_ZN8touchgfx15TouchControllerD1Ev>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	08027c78 	.word	0x08027c78

08000510 <_ZN20STM32TouchControllerD0Ev>:
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f7ff ffe7 	bl	80004ec <_ZN20STM32TouchControllerD1Ev>
 800051e:	2104      	movs	r1, #4
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f025 fafa 	bl	8025b1a <_ZdlPvj>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b03      	cmp	r3, #3
 800053e:	d831      	bhi.n	80005a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>
 8000540:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8000542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000546:	bf00      	nop
 8000548:	08000559 	.word	0x08000559
 800054c:	08000573 	.word	0x08000573
 8000550:	0800058b 	.word	0x0800058b
 8000554:	08000599 	.word	0x08000599
    {
    case GPIO::VSYNC_FREQ:
        HAL_GPIO_WritePin(GPIOG, LED3_Pin, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800055e:	4813      	ldr	r0, [pc, #76]	; (80005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 8000560:	f00b fa7a 	bl	800ba58 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056a:	4810      	ldr	r0, [pc, #64]	; (80005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 800056c:	f00b fa74 	bl	800ba58 <HAL_GPIO_WritePin>
        break;
 8000570:	e018      	b.n	80005a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>
    case GPIO::RENDER_TIME:
        HAL_GPIO_WritePin(GPIOG, LED2_Pin, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2104      	movs	r1, #4
 8000576:	480d      	ldr	r0, [pc, #52]	; (80005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 8000578:	f00b fa6e 	bl	800ba58 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, RENDER_TIME_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000582:	480a      	ldr	r0, [pc, #40]	; (80005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 8000584:	f00b fa68 	bl	800ba58 <HAL_GPIO_WritePin>
        break;
 8000588:	e00c      	b.n	80005a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>
    case GPIO::FRAME_RATE:
        HAL_GPIO_WritePin(GPIOG, FRAME_RATE_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000590:	4806      	ldr	r0, [pc, #24]	; (80005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 8000592:	f00b fa61 	bl	800ba58 <HAL_GPIO_WritePin>
        break;
 8000596:	e005      	b.n	80005a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>
    case GPIO::MCU_ACTIVE:
        HAL_GPIO_WritePin(GPIOG, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2101      	movs	r1, #1
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 800059e:	f00b fa5b 	bl	800ba58 <HAL_GPIO_WritePin>
        break;
 80005a2:	bf00      	nop
    }
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	58021800 	.word	0x58021800

080005b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d831      	bhi.n	8000624 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
 80005c0:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80005c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c6:	bf00      	nop
 80005c8:	080005d9 	.word	0x080005d9
 80005cc:	080005f3 	.word	0x080005f3
 80005d0:	0800060b 	.word	0x0800060b
 80005d4:	08000619 	.word	0x08000619
    {
    case GPIO::VSYNC_FREQ:
        HAL_GPIO_WritePin(GPIOG, LED3_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005de:	4813      	ldr	r0, [pc, #76]	; (800062c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 80005e0:	f00b fa3a 	bl	800ba58 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ea:	4810      	ldr	r0, [pc, #64]	; (800062c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 80005ec:	f00b fa34 	bl	800ba58 <HAL_GPIO_WritePin>
        break;
 80005f0:	e018      	b.n	8000624 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
    case GPIO::RENDER_TIME:
        HAL_GPIO_WritePin(GPIOG, LED2_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2104      	movs	r1, #4
 80005f6:	480d      	ldr	r0, [pc, #52]	; (800062c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 80005f8:	f00b fa2e 	bl	800ba58 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, RENDER_TIME_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000602:	480a      	ldr	r0, [pc, #40]	; (800062c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 8000604:	f00b fa28 	bl	800ba58 <HAL_GPIO_WritePin>
        break;
 8000608:	e00c      	b.n	8000624 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
    case GPIO::FRAME_RATE:
        HAL_GPIO_WritePin(GPIOG, FRAME_RATE_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 8000612:	f00b fa21 	bl	800ba58 <HAL_GPIO_WritePin>
        break;
 8000616:	e005      	b.n	8000624 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
    case GPIO::MCU_ACTIVE:
        HAL_GPIO_WritePin(GPIOG, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2101      	movs	r1, #1
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800061e:	f00b fa1b 	bl	800ba58 <HAL_GPIO_WritePin>
        break;
 8000622:	bf00      	nop
    }
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	58021800 	.word	0x58021800

08000630 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b03      	cmp	r3, #3
 800063e:	d82b      	bhi.n	8000698 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>
 8000640:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	08000659 	.word	0x08000659
 800064c:	0800066f 	.word	0x0800066f
 8000650:	08000683 	.word	0x08000683
 8000654:	0800068f 	.word	0x0800068f
    {
    case GPIO::VSYNC_FREQ:
        HAL_GPIO_TogglePin(GPIOG, LED3_Pin);
 8000658:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065c:	4810      	ldr	r0, [pc, #64]	; (80006a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 800065e:	f00b fa14 	bl	800ba8a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIOG, VSYNC_FREQ_Pin);
 8000662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000666:	480e      	ldr	r0, [pc, #56]	; (80006a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 8000668:	f00b fa0f 	bl	800ba8a <HAL_GPIO_TogglePin>
        break;
 800066c:	e014      	b.n	8000698 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>
    case GPIO::RENDER_TIME:
        HAL_GPIO_TogglePin(GPIOG, LED2_Pin);
 800066e:	2104      	movs	r1, #4
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 8000672:	f00b fa0a 	bl	800ba8a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIOG, RENDER_TIME_Pin);
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	4809      	ldr	r0, [pc, #36]	; (80006a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 800067c:	f00b fa05 	bl	800ba8a <HAL_GPIO_TogglePin>
        break;
 8000680:	e00a      	b.n	8000698 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>
    case GPIO::FRAME_RATE:
        HAL_GPIO_TogglePin(GPIOG, FRAME_RATE_Pin);
 8000682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 8000688:	f00b f9ff 	bl	800ba8a <HAL_GPIO_TogglePin>
        break;
 800068c:	e004      	b.n	8000698 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>
    case GPIO::MCU_ACTIVE:
        HAL_GPIO_TogglePin(GPIOG, MCU_ACTIVE_Pin);
 800068e:	2101      	movs	r1, #1
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 8000692:	f00b f9fa 	bl	800ba8a <HAL_GPIO_TogglePin>
        break;
 8000696:	bf00      	nop
    }
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	58021800 	.word	0x58021800

080006a4 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
    {
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	601a      	str	r2, [r3, #0]
    }
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	08028d90 	.word	0x08028d90

080006c4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
    }
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ffe9 	bl	80006a4 <_ZN8touchgfx3HALD1Ev>
 80006d2:	217c      	movs	r1, #124	; 0x7c
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f025 fa20 	bl	8025b1a <_ZdlPvj>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	78fa      	ldrb	r2, [r7, #3]
 80006f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2201      	movs	r2, #1
 80006fc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	807b      	strh	r3, [r7, #2]
 8000718:	4613      	mov	r3, r2
 800071a:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	887a      	ldrh	r2, [r7, #2]
 8000722:	429a      	cmp	r2, r3
 8000724:	d304      	bcc.n	8000730 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	883a      	ldrh	r2, [r7, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d205      	bcs.n	800073c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8000734:	219e      	movs	r1, #158	; 0x9e
 8000736:	480a      	ldr	r0, [pc, #40]	; (8000760 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8000738:	f025 fa1e 	bl	8025b78 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800073c:	4a09      	ldr	r2, [pc, #36]	; (8000764 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800073e:	887b      	ldrh	r3, [r7, #2]
 8000740:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000742:	4a09      	ldr	r2, [pc, #36]	; (8000768 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8000744:	883b      	ldrh	r3, [r7, #0]
 8000746:	8013      	strh	r3, [r2, #0]
    }
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2400c898 	.word	0x2400c898
 8000754:	2400c89a 	.word	0x2400c89a
 8000758:	08026c84 	.word	0x08026c84
 800075c:	08026ce8 	.word	0x08026ce8
 8000760:	08026d2c 	.word	0x08026d2c
 8000764:	2400c89e 	.word	0x2400c89e
 8000768:	2400c8a0 	.word	0x2400c8a0

0800076c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800077a:	2b00      	cmp	r3, #0
 800077c:	d009      	beq.n	8000792 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4610      	mov	r0, r2
 800078c:	4798      	blx	r3
 800078e:	4603      	mov	r3, r0
 8000790:	e000      	b.n	8000794 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8000792:	2300      	movs	r3, #0
    }
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f014 fbd3 	bl	8014f50 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	33a4      	adds	r3, #164	; 0xa4
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	4798      	blx	r3
    }
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
    {
        return false;
 80007c8:	2300      	movs	r3, #0
    }
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d106      	bne.n	80007fa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80007f0:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 80007f4:	4811      	ldr	r0, [pc, #68]	; (800083c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80007f6:	f025 f9bf 	bl	8025b78 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	68ba      	ldr	r2, [r7, #8]
 80007fe:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	bf14      	ite	ne
 8000812:	2301      	movne	r3, #1
 8000814:	2300      	moveq	r3, #0
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800081a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	bf14      	ite	ne
 8000822:	2301      	movne	r3, #1
 8000824:	2300      	moveq	r3, #0
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800082a:	701a      	strb	r2, [r3, #0]
    }
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08026d74 	.word	0x08026d74
 8000838:	08026dac 	.word	0x08026dac
 800083c:	08026d2c 	.word	0x08026d2c
 8000840:	2400c8a2 	.word	0x2400c8a2
 8000844:	2400c8a3 	.word	0x2400c8a3

08000848 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8000850:	2300      	movs	r3, #0
    }
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	460b      	mov	r3, r1
 8000868:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800086e:	2b00      	cmp	r3, #0
 8000870:	d004      	beq.n	800087c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000876:	887a      	ldrh	r2, [r7, #2]
 8000878:	4610      	mov	r0, r2
 800087a:	4798      	blx	r3
        }
    }
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800088c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685a      	ldr	r2, [r3, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3318      	adds	r3, #24
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4610      	mov	r0, r2
 80008b4:	4798      	blx	r3
 80008b6:	4603      	mov	r3, r0
    }
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d011      	beq.n	80008fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d11e      	bne.n	800091e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80008e8:	881a      	ldrh	r2, [r3, #0]
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80008ec:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80008ee:	4a11      	ldr	r2, [pc, #68]	; (8000934 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80008f0:	89bb      	ldrh	r3, [r7, #12]
 80008f2:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80008fa:	e010      	b.n	800091e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00c      	beq.n	800091e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800090c:	881a      	ldrh	r2, [r3, #0]
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000910:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000914:	89fb      	ldrh	r3, [r7, #14]
 8000916:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
    }
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2400c89c 	.word	0x2400c89c
 8000930:	2400c89a 	.word	0x2400c89a
 8000934:	2400c898 	.word	0x2400c898

08000938 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4618      	mov	r0, r3
 8000944:	f013 fcba 	bl	80142bc <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	4a05      	ldr	r2, [pc, #20]	; (8000970 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe9f 	bl	80006a4 <_ZN8touchgfx3HALD1Ev>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	08027ff8 	.word	0x08027ff8

08000974 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ffe7 	bl	8000950 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000982:	217c      	movs	r1, #124	; 0x7c
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f025 f8c8 	bl	8025b1a <_ZdlPvj>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ffca 	bl	8000938 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 fd40 	bl	800243c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	337c      	adds	r3, #124	; 0x7c
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	4798      	blx	r3
    enableInterrupts();
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3374      	adds	r3, #116	; 0x74
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80009e4:	f000 f956 	bl	8000c94 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	336c      	adds	r3, #108	; 0x6c
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4610      	mov	r0, r2
 80009f4:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	480b      	ldr	r0, [pc, #44]	; (8000a28 <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 80009fc:	f00b f82c 	bl	800ba58 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2104      	movs	r1, #4
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000a06:	f00b f827 	bl	800ba58 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4807      	ldr	r0, [pc, #28]	; (8000a2c <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000a10:	f00b f822 	bl	800ba58 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8000a14:	f000 f93e 	bl	8000c94 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	336c      	adds	r3, #108	; 0x6c
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4610      	mov	r0, r2
 8000a24:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8000a26:	e7f5      	b.n	8000a14 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 8000a28:	58022800 	.word	0x58022800
 8000a2c:	58020000 	.word	0x58020000

08000a30 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 fd96 	bl	800256c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8000a40:	4603      	mov	r3, r0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6839      	ldr	r1, [r7, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fd95 	bl	8002588 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6839      	ldr	r1, [r7, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 fd9c 	bl	80025b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a7c:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a90:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	0b5b      	lsrs	r3, r3, #13
 8000a96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a9a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000aa4:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	015a      	lsls	r2, r3, #5
 8000aaa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000aae:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000ab4:	4912      	ldr	r1, [pc, #72]	; (8000b00 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	1e5a      	subs	r2, r3, #1
 8000ac0:	60fa      	str	r2, [r7, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	bf14      	ite	ne
 8000ac6:	2301      	movne	r3, #1
 8000ac8:	2300      	moveq	r3, #0
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d000      	beq.n	8000ad2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 8000ad0:	e7e9      	b.n	8000aa6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	613a      	str	r2, [r7, #16]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	bf14      	ite	ne
 8000adc:	2301      	movne	r3, #1
 8000ade:	2300      	moveq	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d000      	beq.n	8000ae8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 8000ae6:	e7d9      	b.n	8000a9c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ae8:	f3bf 8f4f 	dsb	sy
}
 8000aec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aee:	f3bf 8f6f 	isb	sy
}
 8000af2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000af4:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 fcb8 	bl	8002484 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fcbc 	bl	80024a4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 fcbe 	bl	80024c0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fcc0 	bl	80024dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_ZN11TouchGFXHALD1Ev+0x20>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff feeb 	bl	8000950 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	08027ca8 	.word	0x08027ca8

08000b88 <_ZN11TouchGFXHALD0Ev>:
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ffe7 	bl	8000b64 <_ZN11TouchGFXHALD1Ev>
 8000b96:	217c      	movs	r1, #124	; 0x7c
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f024 ffbe 	bl	8025b1a <_ZdlPvj>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000bac:	2200      	movs	r2, #0
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f00f fd70 	bl	8010696 <osSemaphoreNew>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8000bba:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d105      	bne.n	8000bd0 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8000bc8:	2129      	movs	r1, #41	; 0x29
 8000bca:	480e      	ldr	r0, [pc, #56]	; (8000c04 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8000bcc:	f024 ffd4 	bl	8025b78 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f00f fe7d 	bl	80108d4 <osMessageQueueNew>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8000bde:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d105      	bne.n	8000bf4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8000bec:	212d      	movs	r1, #45	; 0x2d
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8000bf0:	f024 ffc2 	bl	8025b78 <__assert_func>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2400012c 	.word	0x2400012c
 8000bfc:	08026dfc 	.word	0x08026dfc
 8000c00:	08026e48 	.word	0x08026e48
 8000c04:	08026e78 	.word	0x08026e78
 8000c08:	24000130 	.word	0x24000130
 8000c0c:	08026ef4 	.word	0x08026ef4

08000c10 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f00f fdc3 	bl	80107a8 <osSemaphoreAcquire>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2400012c 	.word	0x2400012c

08000c2c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f00f fe09 	bl	801084c <osSemaphoreRelease>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2400012c 	.word	0x2400012c

08000c44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f00f fdaa 	bl	80107a8 <osSemaphoreAcquire>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2400012c 	.word	0x2400012c

08000c5c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f00f fdf1 	bl	801084c <osSemaphoreRelease>
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2400012c 	.word	0x2400012c

08000c74 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8000c7a:	6818      	ldr	r0, [r3, #0]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2200      	movs	r2, #0
 8000c80:	4903      	ldr	r1, [pc, #12]	; (8000c90 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8000c82:	f00f fe9b 	bl	80109bc <osMessageQueuePut>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24000130 	.word	0x24000130
 8000c90:	24000004 	.word	0x24000004

08000c94 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	1d39      	adds	r1, r7, #4
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f00f feea 	bl	8010a7c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8000caa:	6818      	ldr	r0, [r3, #0]
 8000cac:	1d39      	adds	r1, r7, #4
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f00f fee2 	bl	8010a7c <osMessageQueueGet>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	24000130 	.word	0x24000130

08000cc4 <__NVIC_EnableIRQ>:
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_DisableIRQ>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db12      	blt.n	8000d38 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	490a      	ldr	r1, [pc, #40]	; (8000d44 <__NVIC_DisableIRQ+0x44>)
 8000d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	3320      	adds	r3, #32
 8000d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d2c:	f3bf 8f4f 	dsb	sy
}
 8000d30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d32:	f3bf 8f6f 	isb	sy
}
 8000d36:	bf00      	nop
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
        : color(0)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
    {
    }
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    {
        return color;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
    }
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
    {
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	601a      	str	r2, [r3, #0]
    }
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	08027dc8 	.word	0x08027dc8

08000d9c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    }
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe9 	bl	8000d7c <_ZN8touchgfx9DMA_QueueD1Ev>
 8000daa:	2104      	movs	r1, #4
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f024 feb4 	bl	8025b1a <_ZdlPvj>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3344      	adds	r3, #68	; 0x44
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	4798      	blx	r3
    }
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    {
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	601a      	str	r2, [r3, #0]
    }
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	080292e8 	.word	0x080292e8

08000df8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
    }
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffe9 	bl	8000dd8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8000e06:	210c      	movs	r1, #12
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f024 fe86 	bl	8025b1a <_ZdlPvj>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000e22:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	721a      	strb	r2, [r3, #8]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	725a      	strb	r2, [r3, #9]
    {
    }
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	080292e8 	.word	0x080292e8

08000e4c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8000e54:	2301      	movs	r3, #1
    }
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3328      	adds	r3, #40	; 0x28
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4610      	mov	r0, r2
 8000e76:	4798      	blx	r3
    }
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
        return instance;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
    }
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	2400c8a4 	.word	0x2400c8a4

08000e98 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3314      	adds	r3, #20
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4798      	blx	r3
    }
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8000ec2:	f7ff ffdd 	bl	8000e80 <_ZN8touchgfx3HAL11getInstanceEv>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ffe5 	bl	8000e98 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	330c      	adds	r3, #12
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff30 	bl	8000d48 <_ZN8touchgfx9colortypeC1Ev>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	330c      	adds	r3, #12
 8000f02:	4619      	mov	r1, r3
 8000f04:	4610      	mov	r0, r2
 8000f06:	f7ff ff87 	bl	8000e18 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <_ZN8STM32DMAC1Ev+0x50>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f103 000c 	add.w	r0, r3, #12
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3320      	adds	r3, #32
 8000f1a:	2260      	movs	r2, #96	; 0x60
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f014 f97d 	bl	801521c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3320      	adds	r3, #32
 8000f26:	245f      	movs	r4, #95	; 0x5f
 8000f28:	461d      	mov	r5, r3
 8000f2a:	2c00      	cmp	r4, #0
 8000f2c:	db05      	blt.n	8000f3a <_ZN8STM32DMAC1Ev+0x46>
 8000f2e:	4628      	mov	r0, r5
 8000f30:	f7ff ffd1 	bl	8000ed6 <_ZN8touchgfx6BlitOpC1Ev>
 8000f34:	3520      	adds	r5, #32
 8000f36:	3c01      	subs	r4, #1
 8000f38:	e7f7      	b.n	8000f2a <_ZN8STM32DMAC1Ev+0x36>
{
}
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bdb0      	pop	{r4, r5, r7, pc}
 8000f44:	08027d78 	.word	0x08027d78

08000f48 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <_ZN8STM32DMAD1Ev+0x30>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8000f56:	205a      	movs	r0, #90	; 0x5a
 8000f58:	f7ff fed2 	bl	8000d00 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	330c      	adds	r3, #12
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fab1 	bl	80014c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff35 	bl	8000dd8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	08027d78 	.word	0x08027d78

08000f7c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
}
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ffdf 	bl	8000f48 <_ZN8STM32DMAD1Ev>
 8000f8a:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f024 fdc3 	bl	8025b1a <_ZdlPvj>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <_ZN8STM32DMA10initializeEv+0x54>)
 8000faa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000fae:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <_ZN8STM32DMA10initializeEv+0x54>)
 8000fb0:	f043 0310 	orr.w	r3, r3, #16
 8000fb4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <_ZN8STM32DMA10initializeEv+0x54>)
 8000fba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <_ZN8STM32DMA10initializeEv+0x54>)
 8000fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <_ZN8STM32DMA10initializeEv+0x54>)
 8000fcc:	f043 0310 	orr.w	r3, r3, #16
 8000fd0:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <_ZN8STM32DMA10initializeEv+0x54>)
 8000fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <_ZN8STM32DMA10initializeEv+0x54>)
 8000fd8:	f023 0310 	bic.w	r3, r3, #16
 8000fdc:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <_ZN8STM32DMA10initializeEv+0x58>)
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <_ZN8STM32DMA10initializeEv+0x5c>)
 8000fe2:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8000fe4:	205a      	movs	r0, #90	; 0x5a
 8000fe6:	f7ff fe6d 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	2400ccc0 	.word	0x2400ccc0
 8000ffc:	08000ebb 	.word	0x08000ebb

08001000 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	2b0b      	cmp	r3, #11
 8001014:	d826      	bhi.n	8001064 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8001016:	a201      	add	r2, pc, #4	; (adr r2, 800101c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	08001059 	.word	0x08001059
 8001020:	08001053 	.word	0x08001053
 8001024:	0800104d 	.word	0x0800104d
 8001028:	08001065 	.word	0x08001065
 800102c:	08001065 	.word	0x08001065
 8001030:	08001065 	.word	0x08001065
 8001034:	08001065 	.word	0x08001065
 8001038:	0800105f 	.word	0x0800105f
 800103c:	0800105f 	.word	0x0800105f
 8001040:	0800105f 	.word	0x0800105f
 8001044:	0800105f 	.word	0x0800105f
 8001048:	0800105f 	.word	0x0800105f
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
        break;
 8001050:	e00e      	b.n	8001070 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8001052:	2301      	movs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
        break;
 8001056:	e00b      	b.n	8001070 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001058:	2302      	movs	r3, #2
 800105a:	60fb      	str	r3, [r7, #12]
        break;
 800105c:	e008      	b.n	8001070 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800105e:	2305      	movs	r3, #5
 8001060:	60fb      	str	r3, [r7, #12]
        break;
 8001062:	e005      	b.n	8001070 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8001066:	4a06      	ldr	r2, [pc, #24]	; (8001080 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8001068:	2167      	movs	r1, #103	; 0x67
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800106c:	f024 fd84 	bl	8025b78 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8001070:	68fb      	ldr	r3, [r7, #12]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	08026f38 	.word	0x08026f38
 8001080:	08026f54 	.word	0x08026f54
 8001084:	08026fa0 	.word	0x08026fa0

08001088 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]

    switch (format)
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	2b0a      	cmp	r3, #10
 800109c:	d821      	bhi.n	80010e2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800109e:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80010a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a4:	080010dd 	.word	0x080010dd
 80010a8:	080010d7 	.word	0x080010d7
 80010ac:	080010d1 	.word	0x080010d1
 80010b0:	080010e3 	.word	0x080010e3
 80010b4:	080010e3 	.word	0x080010e3
 80010b8:	080010e3 	.word	0x080010e3
 80010bc:	080010e3 	.word	0x080010e3
 80010c0:	080010d7 	.word	0x080010d7
 80010c4:	080010d7 	.word	0x080010d7
 80010c8:	080010d7 	.word	0x080010d7
 80010cc:	080010d7 	.word	0x080010d7
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
        break;
 80010d4:	e00b      	b.n	80010ee <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80010d6:	2301      	movs	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
        break;
 80010da:	e008      	b.n	80010ee <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80010dc:	2302      	movs	r3, #2
 80010de:	60fb      	str	r3, [r7, #12]
        break;
 80010e0:	e005      	b.n	80010ee <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80010e4:	4a05      	ldr	r2, [pc, #20]	; (80010fc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80010e6:	2188      	movs	r1, #136	; 0x88
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80010ea:	f024 fd45 	bl	8025b78 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	08026f38 	.word	0x08026f38
 80010fc:	08027018 	.word	0x08027018
 8001100:	08026fa0 	.word	0x08026fa0

08001104 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800110c:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	7f5b      	ldrb	r3, [r3, #29]
 800112a:	4619      	mov	r1, r3
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff67 	bl	8001000 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8001132:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	7f9b      	ldrb	r3, [r3, #30]
 8001138:	4619      	mov	r1, r3
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff60 	bl	8001000 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8001140:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	7f9b      	ldrb	r3, [r3, #30]
 8001146:	4619      	mov	r1, r3
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff9d 	bl	8001088 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800114e:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	8b5b      	ldrh	r3, [r3, #26]
 8001154:	461a      	mov	r2, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	8a9b      	ldrh	r3, [r3, #20]
 800115a:	1ad2      	subs	r2, r2, r3
 800115c:	4b97      	ldr	r3, [pc, #604]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800115e:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	8b5b      	ldrh	r3, [r3, #26]
 8001164:	461a      	mov	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	8a9b      	ldrh	r3, [r3, #20]
 800116a:	1ad2      	subs	r2, r2, r3
 800116c:	4b93      	ldr	r3, [pc, #588]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800116e:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	8b1b      	ldrh	r3, [r3, #24]
 8001174:	461a      	mov	r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	8a9b      	ldrh	r3, [r3, #20]
 800117a:	1ad2      	subs	r2, r2, r3
 800117c:	4b8f      	ldr	r3, [pc, #572]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800117e:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001180:	4a8e      	ldr	r2, [pc, #568]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	8adb      	ldrh	r3, [r3, #22]
 800118a:	461a      	mov	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	8a9b      	ldrh	r3, [r3, #20]
 8001190:	041b      	lsls	r3, r3, #16
 8001192:	431a      	orrs	r2, r3
 8001194:	4b89      	ldr	r3, [pc, #548]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001196:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	4b87      	ldr	r3, [pc, #540]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4b85      	ldr	r3, [pc, #532]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80011a6:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011b0:	d037      	beq.n	8001222 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 80011b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011b6:	f200 80e3 	bhi.w	8001380 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 80011ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011be:	d015      	beq.n	80011ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80011c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011c4:	f200 80dc 	bhi.w	8001380 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 80011c8:	2b80      	cmp	r3, #128	; 0x80
 80011ca:	d045      	beq.n	8001258 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 80011cc:	2b80      	cmp	r3, #128	; 0x80
 80011ce:	f200 80d7 	bhi.w	8001380 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 80011d2:	2b40      	cmp	r3, #64	; 0x40
 80011d4:	f000 80bf 	beq.w	8001356 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 80011d8:	2b40      	cmp	r3, #64	; 0x40
 80011da:	f200 80d1 	bhi.w	8001380 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 80011de:	2b04      	cmp	r3, #4
 80011e0:	f000 80a4 	beq.w	800132c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 80011e4:	2b20      	cmp	r3, #32
 80011e6:	f000 80b6 	beq.w	8001356 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 80011ea:	e0c9      	b.n	8001380 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	7f1b      	ldrb	r3, [r3, #28]
 80011f0:	061b      	lsls	r3, r3, #24
 80011f2:	4619      	mov	r1, r3
 80011f4:	4a71      	ldr	r2, [pc, #452]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80011f6:	4b72      	ldr	r3, [pc, #456]	; (80013c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80011f8:	430b      	orrs	r3, r1
 80011fa:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	330c      	adds	r3, #12
 8001200:	4c6e      	ldr	r4, [pc, #440]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fdae 	bl	8000d64 <_ZNK8touchgfx9colortypecvmEv>
 8001208:	4603      	mov	r3, r0
 800120a:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800120c:	4a6b      	ldr	r2, [pc, #428]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	4b69      	ldr	r3, [pc, #420]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001218:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800121a:	4b68      	ldr	r3, [pc, #416]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800121c:	4a69      	ldr	r2, [pc, #420]	; (80013c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800121e:	601a      	str	r2, [r3, #0]
        break;
 8001220:	e0c7      	b.n	80013b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	7f1b      	ldrb	r3, [r3, #28]
 8001226:	061b      	lsls	r3, r3, #24
 8001228:	4619      	mov	r1, r3
 800122a:	4a64      	ldr	r2, [pc, #400]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800122c:	4b66      	ldr	r3, [pc, #408]	; (80013c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800122e:	430b      	orrs	r3, r1
 8001230:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	330c      	adds	r3, #12
 8001236:	4c61      	ldr	r4, [pc, #388]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fd93 	bl	8000d64 <_ZNK8touchgfx9colortypecvmEv>
 800123e:	4603      	mov	r3, r0
 8001240:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001242:	4a5e      	ldr	r2, [pc, #376]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	4b5b      	ldr	r3, [pc, #364]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800124e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001250:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001252:	4a5c      	ldr	r2, [pc, #368]	; (80013c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8001254:	601a      	str	r2, [r3, #0]
        break;
 8001256:	e0ac      	b.n	80013b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
  case BLIT_OP_COPY_L8:
      {
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	60fb      	str	r3, [r7, #12]
        bool blend = true;
 800125e:	2301      	movs	r3, #1
 8001260:	77fb      	strb	r3, [r7, #31]

        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	7f1b      	ldrb	r3, [r3, #28]
 8001266:	061b      	lsls	r3, r3, #24
 8001268:	461a      	mov	r2, r3
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	4a53      	ldr	r2, [pc, #332]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001274:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001276:	4a51      	ldr	r2, [pc, #324]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	4b4e      	ldr	r3, [pc, #312]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001282:	615a      	str	r2, [r3, #20]

        /* Write foreground CLUT memory address */
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1d1a      	adds	r2, r3, #4
 8001288:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c

        switch ((Bitmap::ClutFormat)palette->format)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d002      	beq.n	800129c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 8001296:	2b01      	cmp	r3, #1
 8001298:	d00d      	beq.n	80012b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 800129a:	e020      	b.n	80012de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
        {
        case Bitmap::CLUT_FORMAT_L8_ARGB8888:
            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800129c:	4b47      	ldr	r3, [pc, #284]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	8852      	ldrh	r2, [r2, #2]
 80012a8:	3a01      	subs	r2, #1
 80012aa:	0212      	lsls	r2, r2, #8
 80012ac:	4611      	mov	r1, r2
 80012ae:	4a43      	ldr	r2, [pc, #268]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80012b0:	430b      	orrs	r3, r1
 80012b2:	61d3      	str	r3, [r2, #28]
            break;
 80012b4:	e01a      	b.n	80012ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
        case Bitmap::CLUT_FORMAT_L8_RGB888:
            if(blitOp.alpha == 255)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	7f1b      	ldrb	r3, [r3, #28]
 80012ba:	2bff      	cmp	r3, #255	; 0xff
 80012bc:	d101      	bne.n	80012c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
            {
                blend = false;
 80012be:	2300      	movs	r3, #0
 80012c0:	77fb      	strb	r3, [r7, #31]
            }
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80012c2:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80012c4:	69da      	ldr	r2, [r3, #28]
 80012c6:	4b41      	ldr	r3, [pc, #260]	; (80013cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	8852      	ldrh	r2, [r2, #2]
 80012ce:	3a01      	subs	r2, #1
 80012d0:	0212      	lsls	r2, r2, #8
 80012d2:	4313      	orrs	r3, r2
 80012d4:	4a39      	ldr	r2, [pc, #228]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	61d3      	str	r3, [r2, #28]
            break;
 80012dc:	e006      	b.n	80012ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
        case Bitmap::CLUT_FORMAT_L8_RGB565:
        default:
            assert(0 && "Unsupported format");
 80012de:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 80012e0:	4a3c      	ldr	r2, [pc, #240]	; (80013d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 80012e2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80012e6:	483c      	ldr	r0, [pc, #240]	; (80013d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 80012e8:	f024 fc46 	bl	8025b78 <__assert_func>
            break;
        }

        /* Enable the CLUT loading for the foreground */
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80012ec:	4b33      	ldr	r3, [pc, #204]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	4a32      	ldr	r2, [pc, #200]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80012f2:	f043 0320 	orr.w	r3, r3, #32
 80012f6:	61d3      	str	r3, [r2, #28]

        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80012f8:	4b30      	ldr	r3, [pc, #192]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf14      	ite	ne
 8001304:	2301      	movne	r3, #1
 8001306:	2300      	moveq	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d000      	beq.n	8001310 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f4>
 800130e:	e7f3      	b.n	80012f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
        {
        }
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001310:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001312:	2210      	movs	r2, #16
 8001314:	609a      	str	r2, [r3, #8]

        /* Set DMA2D mode */
        if(blend)
 8001316:	7ffb      	ldrb	r3, [r7, #31]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800131e:	4a29      	ldr	r2, [pc, #164]	; (80013c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8001320:	601a      	str	r2, [r3, #0]
        else
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
      }
      break;
 8001322:	e046      	b.n	80013b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001324:	4b25      	ldr	r3, [pc, #148]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001326:	4a2d      	ldr	r2, [pc, #180]	; (80013dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 8001328:	601a      	str	r2, [r3, #0]
      break;
 800132a:	e042      	b.n	80013b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	7f1b      	ldrb	r3, [r3, #28]
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	461a      	mov	r2, r3
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	4a20      	ldr	r2, [pc, #128]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800133a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001340:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800134c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001350:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8001352:	601a      	str	r2, [r3, #0]
        break;
 8001354:	e02d      	b.n	80013b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	7f1b      	ldrb	r3, [r3, #28]
 800135a:	061b      	lsls	r3, r3, #24
 800135c:	461a      	mov	r2, r3
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800136a:	4a14      	ldr	r2, [pc, #80]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001376:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800137c:	601a      	str	r2, [r3, #0]
        break;
 800137e:	e018      	b.n	80013b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	7f1b      	ldrb	r3, [r3, #28]
 8001384:	061b      	lsls	r3, r3, #24
 8001386:	461a      	mov	r2, r3
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800138e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001392:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	7f5a      	ldrb	r2, [r3, #29]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	7f9b      	ldrb	r3, [r3, #30]
 800139c:	429a      	cmp	r2, r3
 800139e:	d003      	beq.n	80013a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 80013a4:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 80013a6:	e003      	b.n	80013b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80013aa:	f240 2201 	movw	r2, #513	; 0x201
 80013ae:	601a      	str	r2, [r3, #0]
        break;
 80013b0:	bf00      	nop
    }
}
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd90      	pop	{r4, r7, pc}
 80013ba:	bf00      	nop
 80013bc:	52001000 	.word	0x52001000
 80013c0:	0002000a 	.word	0x0002000a
 80013c4:	00020201 	.word	0x00020201
 80013c8:	00020009 	.word	0x00020009
 80013cc:	ffff00ef 	.word	0xffff00ef
 80013d0:	08027064 	.word	0x08027064
 80013d4:	08027080 	.word	0x08027080
 80013d8:	08026fa0 	.word	0x08026fa0
 80013dc:	00010201 	.word	0x00010201

080013e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	7f9b      	ldrb	r3, [r3, #30]
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fe49 	bl	8001088 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80013f6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80013f8:	4a2f      	ldr	r2, [pc, #188]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	8adb      	ldrh	r3, [r3, #22]
 8001402:	461a      	mov	r2, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	8a9b      	ldrh	r3, [r3, #20]
 8001408:	041b      	lsls	r3, r3, #16
 800140a:	431a      	orrs	r2, r3
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800140e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001416:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	8b5b      	ldrh	r3, [r3, #26]
 800141c:	461a      	mov	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	8a9b      	ldrh	r3, [r3, #20]
 8001422:	1ad2      	subs	r2, r2, r3
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001426:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b08      	cmp	r3, #8
 800142e:	d12e      	bne.n	800148e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	8b5b      	ldrh	r3, [r3, #26]
 8001434:	461a      	mov	r2, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	8a9b      	ldrh	r3, [r3, #20]
 800143a:	1ad2      	subs	r2, r2, r3
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800143e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	8b5b      	ldrh	r3, [r3, #26]
 8001444:	461a      	mov	r2, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	8a9b      	ldrh	r3, [r3, #20]
 800144a:	1ad2      	subs	r2, r2, r3
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800144e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001450:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	7f1b      	ldrb	r3, [r3, #28]
 800145a:	061b      	lsls	r3, r3, #24
 800145c:	4619      	mov	r1, r3
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 8001462:	430b      	orrs	r3, r1
 8001464:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	330c      	adds	r3, #12
 800146a:	4c13      	ldr	r4, [pc, #76]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fc79 	bl	8000d64 <_ZNK8touchgfx9colortypecvmEv>
 8001472:	4603      	mov	r3, r0
 8001474:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800147c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001484:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001488:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 800148a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800148c:	e010      	b.n	80014b0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	330c      	adds	r3, #12
 800149e:	4c06      	ldr	r4, [pc, #24]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fc5f 	bl	8000d64 <_ZNK8touchgfx9colortypecvmEv>
 80014a6:	4603      	mov	r3, r0
 80014a8:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80014aa:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80014ac:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 80014ae:	601a      	str	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd90      	pop	{r4, r7, pc}
 80014b8:	52001000 	.word	0x52001000
 80014bc:	00010009 	.word	0x00010009
 80014c0:	00020201 	.word	0x00020201
 80014c4:	00030201 	.word	0x00030201

080014c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fc4f 	bl	8000d7c <_ZN8touchgfx9DMA_QueueD1Ev>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	08029338 	.word	0x08029338

080014ec <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ffe7 	bl	80014c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80014fa:	2114      	movs	r1, #20
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f024 fb0c 	bl	8025b1a <_ZdlPvj>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	801a      	strh	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	805a      	strh	r2, [r3, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	809a      	strh	r2, [r3, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	80da      	strh	r2, [r3, #6]
    {
    }
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
    }
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	2400c920 	.word	0x2400c920

0800155c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
    {
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	601a      	str	r2, [r3, #0]
    }
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	08027fe4 	.word	0x08027fe4

0800157c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    }
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ffe9 	bl	800155c <_ZN8touchgfx12FontProviderD1Ev>
 800158a:	2104      	movs	r1, #4
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f024 fac4 	bl	8025b1a <_ZdlPvj>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80015aa:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	611a      	str	r2, [r3, #16]
    {
    }
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	08027fd4 	.word	0x08027fd4

080015dc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    {
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	601a      	str	r2, [r3, #0]
    }
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	08027fd4 	.word	0x08027fd4

080015fc <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
    }
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ffe9 	bl	80015dc <_ZN8touchgfx7MVPHeapD1Ev>
 800160a:	2114      	movs	r1, #20
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f024 fa84 	bl	8025b1a <_ZdlPvj>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
    {
    }
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
    {
    }
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
    {
    }
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	460b      	mov	r3, r1
 8001668:	70fb      	strb	r3, [r7, #3]
    {
    }
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
    {
    }
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
    {
    }
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
    {
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	601a      	str	r2, [r3, #0]
    }
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	08027fac 	.word	0x08027fac

080016c0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    }
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ffe9 	bl	80016a0 <_ZN8touchgfx15UIEventListenerD1Ev>
 80016ce:	2104      	movs	r1, #4
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f024 fa22 	bl	8025b1a <_ZdlPvj>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    {
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	601a      	str	r2, [r3, #0]
    }
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	0802a0e4 	.word	0x0802a0e4

08001700 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    }
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ffe9 	bl	80016e0 <_ZN8touchgfx3LCDD1Ev>
 800170e:	2108      	movs	r1, #8
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f024 fa02 	bl	8025b1a <_ZdlPvj>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800174a:	6810      	ldr	r0, [r2, #0]
 800174c:	6851      	ldr	r1, [r2, #4]
 800174e:	c303      	stmia	r3!, {r0, r1}
    }
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    {
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]
    }
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	08027f94 	.word	0x08027f94

0800177c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
    }
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ffe9 	bl	800175c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800178a:	2104      	movs	r1, #4
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f024 f9c4 	bl	8025b1a <_ZdlPvj>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	801a      	strh	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	805a      	strh	r2, [r3, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	809a      	strh	r2, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	80da      	strh	r2, [r3, #6]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	811a      	strh	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	815a      	strh	r2, [r3, #10]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	819a      	strh	r2, [r3, #12]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	739a      	strb	r2, [r3, #14]
        {
        }
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ffd5 	bl	800179c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	829a      	strh	r2, [r3, #20]
    {
    }
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8001816:	4a55      	ldr	r2, [pc, #340]	; (800196c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	331c      	adds	r3, #28
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ffcc 	bl	80017e2 <_ZN8touchgfx8GesturesC1Ev>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	639a      	str	r2, [r3, #56]	; 0x38
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	63da      	str	r2, [r3, #60]	; 0x3c
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	3350      	adds	r3, #80	; 0x50
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fe39 	bl	800150c <_ZN8touchgfx4RectC1Ev>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	659a      	str	r2, [r3, #88]	; 0x58
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	661a      	str	r2, [r3, #96]	; 0x60
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	671a      	str	r2, [r3, #112]	; 0x70
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8001922:	4a13      	ldr	r2, [pc, #76]	; (8001970 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001928:	4a12      	ldr	r2, [pc, #72]	; (8001974 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800192a:	8b3b      	ldrh	r3, [r7, #24]
 800192c:	8013      	strh	r3, [r2, #0]
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8001930:	881a      	ldrh	r2, [r3, #0]
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8001934:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001936:	4a11      	ldr	r2, [pc, #68]	; (800197c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8001938:	8bbb      	ldrh	r3, [r7, #28]
 800193a:	8013      	strh	r3, [r2, #0]
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800193e:	881a      	ldrh	r2, [r3, #0]
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8001942:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800194a:	8b3a      	ldrh	r2, [r7, #24]
 800194c:	8bbb      	ldrh	r3, [r7, #28]
 800194e:	429a      	cmp	r2, r3
 8001950:	bf34      	ite	cc
 8001952:	2301      	movcc	r3, #1
 8001954:	2300      	movcs	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	08028d90 	.word	0x08028d90
 8001970:	2400c8a4 	.word	0x2400c8a4
 8001974:	2400c898 	.word	0x2400c898
 8001978:	2400c89e 	.word	0x2400c89e
 800197c:	2400c89a 	.word	0x2400c89a
 8001980:	2400c8a0 	.word	0x2400c8a0
 8001984:	2400c89c 	.word	0x2400c89c

08001988 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fe81 	bl	80016a0 <_ZN8touchgfx15UIEventListenerD1Ev>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	0802a1d0 	.word	0x0802a1d0

080019ac <_ZN8touchgfx11ApplicationD0Ev>:
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffe7 	bl	8001988 <_ZN8touchgfx11ApplicationD1Ev>
 80019ba:	f44f 719c 	mov.w	r1, #312	; 0x138
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f024 f8ab 	bl	8025b1a <_ZdlPvj>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f804 	bl	80019e4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00f      	beq.n	8001a16 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	330c      	adds	r3, #12
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4798      	blx	r3
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8001a16:	2300      	movs	r3, #0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00e      	beq.n	8001a3a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff97 	bl	8001988 <_ZN8touchgfx11ApplicationD1Ev>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	08027f50 	.word	0x08027f50

08001a68 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ffe7 	bl	8001a44 <_ZN8touchgfx14MVPApplicationD1Ev>
 8001a76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f024 f84d 	bl	8025b1a <_ZdlPvj>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 faf3 	bl	800208c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ffcb 	bl	8001a44 <_ZN8touchgfx14MVPApplicationD1Ev>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	08027ef4 	.word	0x08027ef4

08001abc <_ZN23FrontendApplicationBaseD0Ev>:
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ffe1 	bl	8001a8c <_ZN23FrontendApplicationBaseD1Ev>
 8001aca:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f024 f823 	bl	8025b1a <_ZdlPvj>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <_ZN19FrontendApplicationD1Ev+0x20>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ffcb 	bl	8001a8c <_ZN23FrontendApplicationBaseD1Ev>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	08027eb0 	.word	0x08027eb0

08001b04 <_ZN19FrontendApplicationD0Ev>:
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ffe7 	bl	8001ae0 <_ZN19FrontendApplicationD1Ev>
 8001b12:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f023 ffff 	bl	8025b1a <_ZdlPvj>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001b34:	4618      	mov	r0, r3
 8001b36:	f006 f84b 	bl	8007bd0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f016 ffc9 	bl	8018ad4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f002 fa6c 	bl	8004034 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	f7ff fd0d 	bl	800159c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	601a      	str	r2, [r3, #0]
    {

    }
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	08027e9c 	.word	0x08027e9c

08001b98 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4801      	ldr	r0, [pc, #4]	; (8001ba4 <__tcf_0+0xc>)
 8001b9e:	f000 f967 	bl	8001e70 <_ZN12FrontendHeapD1Ev>
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	24000134 	.word	0x24000134

08001ba8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	f3bf 8f5b 	dmb	ish
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bf0c      	ite	eq
 8001bbe:	2301      	moveq	r3, #1
 8001bc0:	2300      	movne	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8001bc8:	480b      	ldr	r0, [pc, #44]	; (8001bf8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8001bca:	f023 ffa8 	bl	8025b1e <__cxa_guard_acquire>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8001bde:	4807      	ldr	r0, [pc, #28]	; (8001bfc <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8001be0:	f000 f868 	bl	8001cb4 <_ZN12FrontendHeapC1Ev>
 8001be4:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8001be6:	f023 ffa6 	bl	8025b36 <__cxa_guard_release>
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8001bec:	f023 ffe2 	bl	8025bb4 <atexit>
        return instance;
 8001bf0:	4b02      	ldr	r3, [pc, #8]	; (8001bfc <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	24002358 	.word	0x24002358
 8001bfc:	24000134 	.word	0x24000134
 8001c00:	08001b99 	.word	0x08001b99

08001c04 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fce1 	bl	80015dc <_ZN8touchgfx7MVPHeapD1Ev>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	08027e9c 	.word	0x08027e9c

08001c28 <_ZN16FrontendHeapBaseD0Ev>:
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ffe7 	bl	8001c04 <_ZN16FrontendHeapBaseD1Ev>
 8001c36:	2114      	movs	r1, #20
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f023 ff6e 	bl	8025b1a <_ZdlPvj>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f012 f86e 	bl	8013d34 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001c58:	4a03      	ldr	r2, [pc, #12]	; (8001c68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	08027e68 	.word	0x08027e68

08001c6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f012 f85c 	bl	8013d34 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001c7c:	4a03      	ldr	r2, [pc, #12]	; (8001c8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	08027e34 	.word	0x08027e34

08001c90 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f012 f84a 	bl	8013d34 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001ca0:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	08027e00 	.word	0x08027e00

08001cb4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8001cb4:	b5b0      	push	{r4, r5, r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f103 0414 	add.w	r4, r3, #20
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f242 026c 	movw	r2, #8300	; 0x206c
 8001cd0:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	f242 03cc 	movw	r3, #8396	; 0x20cc
 8001cd8:	440b      	add	r3, r1
                     app(model, *this)
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	462a      	mov	r2, r5
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	f7ff ff3f 	bl	8001b64 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8001ce6:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <_ZN12FrontendHeapC1Ev+0x9c>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3314      	adds	r3, #20
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ffa9 	bl	8001c48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	332c      	adds	r3, #44	; 0x2c
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ffb6 	bl	8001c6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	f242 036c 	movw	r3, #8300	; 0x206c
 8001d06:	4413      	add	r3, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ffc1 	bl	8001c90 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	f242 03c8 	movw	r3, #8392	; 0x20c8
 8001d14:	4413      	add	r3, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f005 ff4c 	bl	8007bb4 <_ZN5ModelC1Ev>
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	f242 03cc 	movw	r3, #8396	; 0x20cc
 8001d22:	4413      	add	r3, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	f242 01c8 	movw	r1, #8392	; 0x20c8
 8001d2a:	4411      	add	r1, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f005 ff2a 	bl	8007b88 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	f242 03cc 	movw	r3, #8396	; 0x20cc
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7ff ff03 	bl	8001b4a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	08027dec 	.word	0x08027dec

08001d54 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	8bbb      	ldrh	r3, [r7, #28]
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	8b3b      	ldrh	r3, [r7, #24]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	f7ff fd49 	bl	8001808 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	601a      	str	r2, [r3, #0]
    }
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	08027ff8 	.word	0x08027ff8

08001d8c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	8bbb      	ldrh	r3, [r7, #28]
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	8b3b      	ldrh	r3, [r7, #24]
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	f7ff ffd3 	bl	8001d54 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	601a      	str	r2, [r3, #0]
    }
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	08027ca8 	.word	0x08027ca8

08001dc4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	08027c90 	.word	0x08027c90

08001de4 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ffe8 	bl	8001dc4 <_ZN8touchgfx15TouchControllerC1Ev>
 8001df4:	4a03      	ldr	r2, [pc, #12]	; (8001e04 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	08027c78 	.word	0x08027c78

08001e08 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8001e0e:	f001 fd15 	bl	800383c <_ZN14BitmapDatabase11getInstanceEv>
 8001e12:	4604      	mov	r4, r0
 8001e14:	f001 fd1c 	bl	8003850 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2300      	movs	r3, #0
 8001e22:	2200      	movs	r2, #0
 8001e24:	4620      	mov	r0, r4
 8001e26:	f019 ffb3 	bl	801bd90 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8001e2a:	4809      	ldr	r0, [pc, #36]	; (8001e50 <touchgfx_init+0x48>)
 8001e2c:	f7ff fb86 	bl	800153c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8001e30:	2000      	movs	r0, #0
 8001e32:	f005 fdf7 	bl	8007a24 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8001e36:	4807      	ldr	r0, [pc, #28]	; (8001e54 <touchgfx_init+0x4c>)
 8001e38:	f019 feec 	bl	801bc14 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8001e3c:	f7ff feb4 	bl	8001ba8 <_ZN12FrontendHeap11getInstanceEv>
 8001e40:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <touchgfx_init+0x50>)
 8001e44:	f7fe fdb2 	bl	80009ac <_ZN11TouchGFXHAL10initializeEv>
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd90      	pop	{r4, r7, pc}
 8001e50:	24002fd8 	.word	0x24002fd8
 8001e54:	24000008 	.word	0x24000008
 8001e58:	24002fdc 	.word	0x24002fdc

08001e5c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <touchgfx_taskEntry+0x10>)
 8001e62:	f7fe fdaf 	bl	80009c4 <_ZN11TouchGFXHAL9taskEntryEv>
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	24002fdc 	.word	0x24002fdc

08001e70 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <_ZN12FrontendHeapD1Ev+0x50>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	f242 03cc 	movw	r3, #8396	; 0x20cc
 8001e84:	4413      	add	r3, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fe2a 	bl	8001ae0 <_ZN19FrontendApplicationD1Ev>
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	f242 036c 	movw	r3, #8300	; 0x206c
 8001e92:	4413      	add	r3, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 f827 	bl	8001ee8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	332c      	adds	r3, #44	; 0x2c
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f844 	bl	8001f2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3314      	adds	r3, #20
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f863 	bl	8001f74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fea7 	bl	8001c04 <_ZN16FrontendHeapBaseD1Ev>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	08027dec 	.word	0x08027dec

08001ec4 <_ZN12FrontendHeapD0Ev>:
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ffcf 	bl	8001e70 <_ZN12FrontendHeapD1Ev>
 8001ed2:	f242 2124 	movw	r1, #8740	; 0x2224
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f023 fe1f 	bl	8025b1a <_ZdlPvj>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f011 ff19 	bl	8013d30 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	08027e00 	.word	0x08027e00

08001f0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ffe7 	bl	8001ee8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8001f1a:	215c      	movs	r1, #92	; 0x5c
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f023 fdfc 	bl	8025b1a <_ZdlPvj>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f011 fef7 	bl	8013d30 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	08027e34 	.word	0x08027e34

08001f50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff ffe7 	bl	8001f2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001f5e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f023 fdd9 	bl	8025b1a <_ZdlPvj>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f011 fed3 	bl	8013d30 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	08027e68 	.word	0x08027e68

08001f98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ffe7 	bl	8001f74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001fa6:	2118      	movs	r1, #24
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f023 fdb6 	bl	8025b1a <_ZdlPvj>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fb89 	bl	80016e0 <_ZN8touchgfx3LCDD1Ev>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	0802b2d8 	.word	0x0802b2d8

08001fdc <_ZN8touchgfx8LCD24bppD0Ev>:
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ffe7 	bl	8001fb8 <_ZN8touchgfx8LCD24bppD1Ev>
 8001fea:	2158      	movs	r1, #88	; 0x58
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f023 fd94 	bl	8025b1a <_ZdlPvj>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_Z41__static_initialization_and_destruction_0ii>:
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af02      	add	r7, sp, #8
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d119      	bne.n	8002040 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002012:	4293      	cmp	r3, r2
 8002014:	d114      	bne.n	8002040 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8002016:	4818      	ldr	r0, [pc, #96]	; (8002078 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002018:	f7ff fee4 	bl	8001de4 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800201c:	4817      	ldr	r0, [pc, #92]	; (800207c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800201e:	f7fe ff69 	bl	8000ef4 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8002022:	4817      	ldr	r0, [pc, #92]	; (8002080 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002024:	f01c f8c4 	bl	801e1b0 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8002028:	f44f 7388 	mov.w	r3, #272	; 0x110
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002038:	4910      	ldr	r1, [pc, #64]	; (800207c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800203a:	4812      	ldr	r0, [pc, #72]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800203c:	f7ff fea6 	bl	8001d8c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d113      	bne.n	800206e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800204c:	4293      	cmp	r3, r2
 800204e:	d10e      	bne.n	800206e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002052:	f7fe fd87 	bl	8000b64 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8002056:	480c      	ldr	r0, [pc, #48]	; (8002088 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002058:	f000 f83a 	bl	80020d0 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 800205c:	4808      	ldr	r0, [pc, #32]	; (8002080 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800205e:	f7ff ffab 	bl	8001fb8 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 8002062:	4806      	ldr	r0, [pc, #24]	; (800207c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002064:	f7fe ff70 	bl	8000f48 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8002068:	4803      	ldr	r0, [pc, #12]	; (8002078 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800206a:	f7fe fa3f 	bl	80004ec <_ZN20STM32TouchControllerD1Ev>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2400235c 	.word	0x2400235c
 800207c:	24002360 	.word	0x24002360
 8002080:	24002f80 	.word	0x24002f80
 8002084:	24002fdc 	.word	0x24002fdc
 8002088:	24000008 	.word	0x24000008

0800208c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	4a05      	ldr	r2, [pc, #20]	; (80020ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fb5d 	bl	800175c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	08027f38 	.word	0x08027f38

080020b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ffe7 	bl	800208c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80020be:	2110      	movs	r1, #16
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f023 fd2a 	bl	8025b1a <_ZdlPvj>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_14_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fa3b 	bl	800155c <_ZN8touchgfx12FontProviderD1Ev>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	08028110 	.word	0x08028110

080020f4 <_ZN23ApplicationFontProviderD0Ev>:
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ffe7 	bl	80020d0 <_ZN23ApplicationFontProviderD1Ev>
 8002102:	2104      	movs	r1, #4
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f023 fd08 	bl	8025b1a <_ZdlPvj>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800211c:	2301      	movs	r3, #1
    }
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8002132:	2354      	movs	r3, #84	; 0x54
    }
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	2254      	movs	r2, #84	; 0x54
 8002150:	fb02 f303 	mul.w	r3, r2, r3
 8002154:	3308      	adds	r3, #8
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4413      	add	r3, r2
    }
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	2254      	movs	r2, #84	; 0x54
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	3308      	adds	r3, #8
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
    }
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8002194:	2301      	movs	r3, #1
    }
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80021aa:	f242 0338 	movw	r3, #8248	; 0x2038
    }
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	f242 0238 	movw	r2, #8248	; 0x2038
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	3308      	adds	r3, #8
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4413      	add	r3, r2
    }
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80021ee:	887b      	ldrh	r3, [r7, #2]
 80021f0:	f242 0238 	movw	r2, #8248	; 0x2038
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	3308      	adds	r3, #8
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4413      	add	r3, r2
    }
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8002212:	2301      	movs	r3, #1
    }
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8002228:	2310      	movs	r3, #16
    }
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	3308      	adds	r3, #8
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
    }
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8002264:	887b      	ldrh	r3, [r7, #2]
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	3308      	adds	r3, #8
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
    }
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68d2      	ldr	r2, [r2, #12]
 800228a:	1052      	asrs	r2, r2, #1
 800228c:	1899      	adds	r1, r3, r2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	e00a      	b.n	80022b6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68d2      	ldr	r2, [r2, #12]
 80022a8:	1052      	asrs	r2, r2, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6892      	ldr	r2, [r2, #8]
 80022b2:	4413      	add	r3, r2
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4608      	mov	r0, r1
 80022b8:	4798      	blx	r3
    }
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d010      	beq.n	80022f4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d107      	bne.n	80022ea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80022ea:	2300      	movs	r3, #0
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d001      	beq.n	80022f4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80022f4:	2300      	movs	r3, #0
    }
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_GLOBAL__sub_I_touchgfx_init>:
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
 8002306:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800230a:	2001      	movs	r0, #1
 800230c:	f7ff fe76 	bl	8001ffc <_Z41__static_initialization_and_destruction_0ii>
 8002310:	bd80      	pop	{r7, pc}

08002312 <_GLOBAL__sub_D_touchgfx_init>:
 8002312:	b580      	push	{r7, lr}
 8002314:	af00      	add	r7, sp, #0
 8002316:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800231a:	2000      	movs	r0, #0
 800231c:	f7ff fe6e 	bl	8001ffc <_Z41__static_initialization_and_destruction_0ii>
 8002320:	bd80      	pop	{r7, pc}

08002322 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3320      	adds	r3, #32
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
    }
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800234c:	3301      	adds	r3, #1
 800234e:	b2da      	uxtb	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <__NVIC_EnableIRQ>:
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800236e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db0b      	blt.n	800238e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4907      	ldr	r1, [pc, #28]	; (800239c <__NVIC_EnableIRQ+0x38>)
 800237e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2001      	movs	r0, #1
 8002386:	fa00 f202 	lsl.w	r2, r0, r2
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e100 	.word	0xe000e100

080023a0 <__NVIC_DisableIRQ>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	db12      	blt.n	80023d8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	490a      	ldr	r1, [pc, #40]	; (80023e4 <__NVIC_DisableIRQ+0x44>)
 80023ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	2001      	movs	r0, #1
 80023c2:	fa00 f202 	lsl.w	r2, r0, r2
 80023c6:	3320      	adds	r3, #32
 80023c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80023cc:	f3bf 8f4f 	dsb	sy
}
 80023d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023d2:	f3bf 8f6f 	isb	sy
}
 80023d6:	bf00      	nop
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <__NVIC_SetPriority>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	db0a      	blt.n	8002412 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	490c      	ldr	r1, [pc, #48]	; (8002434 <__NVIC_SetPriority+0x4c>)
 8002402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	440b      	add	r3, r1
 800240c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002410:	e00a      	b.n	8002428 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4908      	ldr	r1, [pc, #32]	; (8002438 <__NVIC_SetPriority+0x50>)
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	3b04      	subs	r3, #4
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	440b      	add	r3, r1
 8002426:	761a      	strb	r2, [r3, #24]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800243c:	b5b0      	push	{r4, r5, r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4618      	mov	r0, r3
 8002448:	f011 ff8d 	bl	8014366 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800244c:	687d      	ldr	r5, [r7, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3360      	adds	r3, #96	; 0x60
 8002454:	681c      	ldr	r4, [r3, #0]
 8002456:	f016 fc01 	bl	8018c5c <_ZN8touchgfx11Application11getInstanceEv>
 800245a:	4603      	mov	r3, r0
 800245c:	4619      	mov	r1, r3
 800245e:	4628      	mov	r0, r5
 8002460:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3384      	adds	r3, #132	; 0x84
 800246a:	681c      	ldr	r4, [r3, #0]
 800246c:	4a03      	ldr	r2, [pc, #12]	; (800247c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800246e:	2300      	movs	r3, #0
 8002470:	4903      	ldr	r1, [pc, #12]	; (8002480 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002472:	47a0      	blx	r4
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bdb0      	pop	{r4, r5, r7, pc}
 800247c:	2409fa00 	.word	0x2409fa00
 8002480:	24040000 	.word	0x24040000

08002484 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800248c:	2109      	movs	r1, #9
 800248e:	205a      	movs	r0, #90	; 0x5a
 8002490:	f7ff ffaa 	bl	80023e8 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8002494:	2109      	movs	r1, #9
 8002496:	2058      	movs	r0, #88	; 0x58
 8002498:	f7ff ffa6 	bl	80023e8 <__NVIC_SetPriority>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80024ac:	205a      	movs	r0, #90	; 0x5a
 80024ae:	f7ff ff59 	bl	8002364 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80024b2:	2058      	movs	r0, #88	; 0x58
 80024b4:	f7ff ff56 	bl	8002364 <__NVIC_EnableIRQ>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80024c8:	205a      	movs	r0, #90	; 0x5a
 80024ca:	f7ff ff69 	bl	80023a0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80024ce:	2058      	movs	r0, #88	; 0x58
 80024d0:	f7ff ff66 	bl	80023a0 <__NVIC_DisableIRQ>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80024f6:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800250a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800250e:	881a      	ldrh	r2, [r3, #0]
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8002512:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8002516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	50001000 	.word	0x50001000
 8002530:	24003058 	.word	0x24003058
 8002534:	2400305a 	.word	0x2400305a

08002538 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4618      	mov	r0, r3
 8002544:	f011 fef6 	bl	8014334 <_ZN8touchgfx3HAL10beginFrameEv>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4618      	mov	r0, r3
 800255e:	f011 fef5 	bl	801434c <_ZN8touchgfx3HAL8endFrameEv>

}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	50001084 	.word	0x50001084

08002588 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002592:	4a06      	ldr	r2, [pc, #24]	; (80025ac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800259a:	2201      	movs	r2, #1
 800259c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	50001084 	.word	0x50001084
 80025b0:	50001000 	.word	0x50001000

080025b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6839      	ldr	r1, [r7, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f011 fe80 	bl	80142c8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf14      	ite	ne
 80025d4:	2301      	movne	r3, #1
 80025d6:	2300      	moveq	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d03c      	beq.n	8002658 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80025e6:	f3bf 8f4f 	dsb	sy
}
 80025ea:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80025ec:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80025ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f2:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	0b5b      	lsrs	r3, r3, #13
 80025f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025fc:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	08db      	lsrs	r3, r3, #3
 8002602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002606:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002610:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002616:	4912      	ldr	r1, [pc, #72]	; (8002660 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1e5a      	subs	r2, r3, #1
 8002622:	60fa      	str	r2, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf14      	ite	ne
 8002628:	2301      	movne	r3, #1
 800262a:	2300      	moveq	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d000      	beq.n	8002634 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 8002632:	e7e9      	b.n	8002608 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1e5a      	subs	r2, r3, #1
 8002638:	613a      	str	r2, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	bf14      	ite	ne
 800263e:	2301      	movne	r3, #1
 8002640:	2300      	moveq	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d000      	beq.n	800264a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 8002648:	e7d9      	b.n	80025fe <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800264a:	f3bf 8f4f 	dsb	sy
}
 800264e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002650:	f3bf 8f6f 	isb	sy
}
 8002654:	bf00      	nop
}
 8002656:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002658:	bf00      	nop
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	f011 ff90 	bl	801459e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800267e:	4603      	mov	r3, r0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002690:	4b26      	ldr	r3, [pc, #152]	; (800272c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d03c      	beq.n	8002720 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80026ae:	f3bf 8f4f 	dsb	sy
}
 80026b2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80026b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ba:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	0b5b      	lsrs	r3, r3, #13
 80026c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80026c4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	08db      	lsrs	r3, r3, #3
 80026ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ce:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80026d8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80026de:	4913      	ldr	r1, [pc, #76]	; (800272c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1e5a      	subs	r2, r3, #1
 80026ea:	60fa      	str	r2, [r7, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf14      	ite	ne
 80026f0:	2301      	movne	r3, #1
 80026f2:	2300      	moveq	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d000      	beq.n	80026fc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 80026fa:	e7e9      	b.n	80026d0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1e5a      	subs	r2, r3, #1
 8002700:	613a      	str	r2, [r7, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf14      	ite	ne
 8002706:	2301      	movne	r3, #1
 8002708:	2300      	moveq	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d000      	beq.n	8002712 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8002710:	e7d9      	b.n	80026c6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8002712:	f3bf 8f4f 	dsb	sy
}
 8002716:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002718:	f3bf 8f6f 	isb	sy
}
 800271c:	bf00      	nop
}
 800271e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002720:	bf00      	nop
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002738:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf14      	ite	ne
 8002744:	2301      	movne	r3, #1
 8002746:	2300      	moveq	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d03c      	beq.n	80027c8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800274e:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8002750:	2200      	movs	r2, #0
 8002752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002756:	f3bf 8f4f 	dsb	sy
}
 800275a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 800275e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002762:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	0b5b      	lsrs	r3, r3, #13
 8002768:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800276c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	08db      	lsrs	r3, r3, #3
 8002772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002776:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002780:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002786:	4913      	ldr	r1, [pc, #76]	; (80027d4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1e5a      	subs	r2, r3, #1
 8002792:	60fa      	str	r2, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf14      	ite	ne
 8002798:	2301      	movne	r3, #1
 800279a:	2300      	moveq	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d000      	beq.n	80027a4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 80027a2:	e7e9      	b.n	8002778 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1e5a      	subs	r2, r3, #1
 80027a8:	613a      	str	r2, [r7, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf14      	ite	ne
 80027ae:	2301      	movne	r3, #1
 80027b0:	2300      	moveq	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d000      	beq.n	80027ba <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 80027b8:	e7d9      	b.n	800276e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80027ba:	f3bf 8f4f 	dsb	sy
}
 80027be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027c0:	f3bf 8f6f 	isb	sy
}
 80027c4:	bf00      	nop
}
 80027c6:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80027c8:	bf00      	nop
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_LTDC_LineEventCallback+0x74>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	4a1a      	ldr	r2, [pc, #104]	; (8002850 <HAL_LTDC_LineEventCallback+0x78>)
 80027e6:	8812      	ldrh	r2, [r2, #0]
 80027e8:	4293      	cmp	r3, r2
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d017      	beq.n	8002826 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_LTDC_LineEventCallback+0x7c>)
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	4619      	mov	r1, r3
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f00a f905 	bl	800ca0c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8002802:	f7fe fb3d 	bl	8000e80 <_ZN8touchgfx3HAL11getInstanceEv>
 8002806:	4603      	mov	r3, r0
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fd98 	bl	800233e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800280e:	f7fe fa31 	bl	8000c74 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002812:	f7fe fb35 	bl	8000e80 <_ZN8touchgfx3HAL11getInstanceEv>
 8002816:	4603      	mov	r3, r0
 8002818:	4618      	mov	r0, r3
 800281a:	f012 fb99 	bl	8014f50 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800281e:	2000      	movs	r0, #0
 8002820:	f7fd fe86 	bl	8000530 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8002824:	e00e      	b.n	8002844 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_LTDC_LineEventCallback+0x78>)
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f00a f8ed 	bl	800ca0c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002832:	2000      	movs	r0, #0
 8002834:	f7fd febc 	bl	80005b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8002838:	f7fe fb22 	bl	8000e80 <_ZN8touchgfx3HAL11getInstanceEv>
 800283c:	4603      	mov	r3, r0
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fd6f 	bl	8002322 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	50001000 	.word	0x50001000
 8002850:	24003058 	.word	0x24003058
 8002854:	2400305a 	.word	0x2400305a

08002858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800285e:	f000 fba3 	bl	8002fa8 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002862:	4b45      	ldr	r3, [pc, #276]	; (8002978 <main+0x120>)
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d11b      	bne.n	80028a6 <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 800286e:	f3bf 8f4f 	dsb	sy
}
 8002872:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002874:	f3bf 8f6f 	isb	sy
}
 8002878:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800287a:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <main+0x120>)
 800287c:	2200      	movs	r2, #0
 800287e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002882:	f3bf 8f4f 	dsb	sy
}
 8002886:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002888:	f3bf 8f6f 	isb	sy
}
 800288c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800288e:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <main+0x120>)
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	4a39      	ldr	r2, [pc, #228]	; (8002978 <main+0x120>)
 8002894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002898:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800289a:	f3bf 8f4f 	dsb	sy
}
 800289e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028a0:	f3bf 8f6f 	isb	sy
}
 80028a4:	e000      	b.n	80028a8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80028a6:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80028a8:	4b33      	ldr	r3, [pc, #204]	; (8002978 <main+0x120>)
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d138      	bne.n	8002926 <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80028b4:	4b30      	ldr	r3, [pc, #192]	; (8002978 <main+0x120>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80028bc:	f3bf 8f4f 	dsb	sy
}
 80028c0:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80028c2:	4b2d      	ldr	r3, [pc, #180]	; (8002978 <main+0x120>)
 80028c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028c8:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	0b5b      	lsrs	r3, r3, #13
 80028ce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80028d2:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	08db      	lsrs	r3, r3, #3
 80028d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028dc:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80028e6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80028ec:	4922      	ldr	r1, [pc, #136]	; (8002978 <main+0x120>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	1e5a      	subs	r2, r3, #1
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1ef      	bne.n	80028de <main+0x86>
    } while(sets-- != 0U);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	1e5a      	subs	r2, r3, #1
 8002902:	60ba      	str	r2, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e5      	bne.n	80028d4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002908:	f3bf 8f4f 	dsb	sy
}
 800290c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800290e:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <main+0x120>)
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	4a19      	ldr	r2, [pc, #100]	; (8002978 <main+0x120>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800291a:	f3bf 8f4f 	dsb	sy
}
 800291e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002920:	f3bf 8f6f 	isb	sy
}
 8002924:	e000      	b.n	8002928 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002926:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002928:	f008 f8bc 	bl	800aaa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800292c:	f000 f832 	bl	8002994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_CRC_Init();
 8002930:	f000 f8a8 	bl	8002a84 <MX_CRC_Init>
  MX_GPIO_Init();
 8002934:	f000 fa26 	bl	8002d84 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8002938:	f000 f8c6 	bl	8002ac8 <MX_DMA2D_Init>
  MX_LTDC_Init();
 800293c:	f000 f93e 	bl	8002bbc <MX_LTDC_Init>
  MX_I2C4_Init();
 8002940:	f000 f8fc 	bl	8002b3c <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8002944:	f000 f9bc 	bl	8002cc0 <MX_OCTOSPI1_Init>
  MX_TouchGFX_Init();
 8002948:	f7fd fd4b 	bl	80003e2 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800294c:	f00d fdac 	bl	80104a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002950:	4a0a      	ldr	r2, [pc, #40]	; (800297c <main+0x124>)
 8002952:	2100      	movs	r1, #0
 8002954:	480a      	ldr	r0, [pc, #40]	; (8002980 <main+0x128>)
 8002956:	f00d fdf1 	bl	801053c <osThreadNew>
 800295a:	4603      	mov	r3, r0
 800295c:	4a09      	ldr	r2, [pc, #36]	; (8002984 <main+0x12c>)
 800295e:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8002960:	4a09      	ldr	r2, [pc, #36]	; (8002988 <main+0x130>)
 8002962:	2100      	movs	r1, #0
 8002964:	4809      	ldr	r0, [pc, #36]	; (800298c <main+0x134>)
 8002966:	f00d fde9 	bl	801053c <osThreadNew>
 800296a:	4603      	mov	r3, r0
 800296c:	4a08      	ldr	r2, [pc, #32]	; (8002990 <main+0x138>)
 800296e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002970:	f00d fdbe 	bl	80104f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002974:	e7fe      	b.n	8002974 <main+0x11c>
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00
 800297c:	080280c0 	.word	0x080280c0
 8002980:	08002f99 	.word	0x08002f99
 8002984:	2400cb40 	.word	0x2400cb40
 8002988:	080280e4 	.word	0x080280e4
 800298c:	080003ef 	.word	0x080003ef
 8002990:	2400ccbc 	.word	0x2400ccbc

08002994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b09c      	sub	sp, #112	; 0x70
 8002998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800299a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299e:	224c      	movs	r2, #76	; 0x4c
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f023 f974 	bl	8025c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	2220      	movs	r2, #32
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f023 f96e 	bl	8025c90 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80029b4:	2004      	movs	r0, #4
 80029b6:	f00b f9e1 	bl	800dd7c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80029ba:	2300      	movs	r3, #0
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <SystemClock_Config+0xe8>)
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	4a2e      	ldr	r2, [pc, #184]	; (8002a7c <SystemClock_Config+0xe8>)
 80029c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029c8:	6193      	str	r3, [r2, #24]
 80029ca:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <SystemClock_Config+0xe8>)
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80029d6:	bf00      	nop
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <SystemClock_Config+0xe8>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e4:	d1f8      	bne.n	80029d8 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <SystemClock_Config+0xec>)
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	f023 0303 	bic.w	r3, r3, #3
 80029ee:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <SystemClock_Config+0xec>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029f6:	2301      	movs	r3, #1
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a00:	2302      	movs	r3, #2
 8002a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a04:	2302      	movs	r3, #2
 8002a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002a08:	230c      	movs	r3, #12
 8002a0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8002a0c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002a10:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002a12:	2302      	movs	r3, #2
 8002a14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a16:	2302      	movs	r3, #2
 8002a18:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002a1e:	2304      	movs	r3, #4
 8002a20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f00b f9fe 	bl	800de30 <HAL_RCC_OscConfig>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002a3a:	f000 fb15 	bl	8003068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a3e:	233f      	movs	r3, #63	; 0x3f
 8002a40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a42:	2303      	movs	r3, #3
 8002a44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	2103      	movs	r1, #3
 8002a62:	4618      	mov	r0, r3
 8002a64:	f00b fdcc 	bl	800e600 <HAL_RCC_ClockConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8002a6e:	f000 fafb 	bl	8003068 <Error_Handler>
  }
}
 8002a72:	bf00      	nop
 8002a74:	3770      	adds	r7, #112	; 0x70
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	58024800 	.word	0x58024800
 8002a80:	58024400 	.word	0x58024400

08002a84 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002a88:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <MX_CRC_Init+0x3c>)
 8002a8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <MX_CRC_Init+0x40>)
 8002a8c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <MX_CRC_Init+0x3c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <MX_CRC_Init+0x3c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <MX_CRC_Init+0x3c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <MX_CRC_Init+0x3c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <MX_CRC_Init+0x3c>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002aac:	4804      	ldr	r0, [pc, #16]	; (8002ac0 <MX_CRC_Init+0x3c>)
 8002aae:	f008 fa07 	bl	800aec0 <HAL_CRC_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002ab8:	f000 fad6 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	2400cbf0 	.word	0x2400cbf0
 8002ac4:	40023000 	.word	0x40023000

08002ac8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <MX_DMA2D_Init+0x6c>)
 8002ace:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <MX_DMA2D_Init+0x70>)
 8002ad0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <MX_DMA2D_Init+0x6c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <MX_DMA2D_Init+0x6c>)
 8002ada:	2202      	movs	r2, #2
 8002adc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <MX_DMA2D_Init+0x6c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <MX_DMA2D_Init+0x6c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <MX_DMA2D_Init+0x6c>)
 8002aec:	2202      	movs	r2, #2
 8002aee:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002af0:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <MX_DMA2D_Init+0x6c>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002af6:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <MX_DMA2D_Init+0x6c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8002afc:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <MX_DMA2D_Init+0x6c>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8002b02:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <MX_DMA2D_Init+0x6c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <MX_DMA2D_Init+0x6c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002b0e:	4809      	ldr	r0, [pc, #36]	; (8002b34 <MX_DMA2D_Init+0x6c>)
 8002b10:	f008 fac0 	bl	800b094 <HAL_DMA2D_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002b1a:	f000 faa5 	bl	8003068 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002b1e:	2101      	movs	r1, #1
 8002b20:	4804      	ldr	r0, [pc, #16]	; (8002b34 <MX_DMA2D_Init+0x6c>)
 8002b22:	f008 fc2b 	bl	800b37c <HAL_DMA2D_ConfigLayer>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8002b2c:	f000 fa9c 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	2400ccc0 	.word	0x2400ccc0
 8002b38:	52001000 	.word	0x52001000

08002b3c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <MX_I2C4_Init+0x74>)
 8002b42:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <MX_I2C4_Init+0x78>)
 8002b44:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8002b46:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <MX_I2C4_Init+0x74>)
 8002b48:	4a1b      	ldr	r2, [pc, #108]	; (8002bb8 <MX_I2C4_Init+0x7c>)
 8002b4a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002b4c:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <MX_I2C4_Init+0x74>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <MX_I2C4_Init+0x74>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <MX_I2C4_Init+0x74>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <MX_I2C4_Init+0x74>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <MX_I2C4_Init+0x74>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <MX_I2C4_Init+0x74>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <MX_I2C4_Init+0x74>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002b76:	480e      	ldr	r0, [pc, #56]	; (8002bb0 <MX_I2C4_Init+0x74>)
 8002b78:	f008 ffc6 	bl	800bb08 <HAL_I2C_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002b82:	f000 fa71 	bl	8003068 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8002b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b8a:	4809      	ldr	r0, [pc, #36]	; (8002bb0 <MX_I2C4_Init+0x74>)
 8002b8c:	f009 fce0 	bl	800c550 <HAL_I2CEx_ConfigAnalogFilter>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8002b96:	f000 fa67 	bl	8003068 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4804      	ldr	r0, [pc, #16]	; (8002bb0 <MX_I2C4_Init+0x74>)
 8002b9e:	f009 fd22 	bl	800c5e6 <HAL_I2CEx_ConfigDigitalFilter>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8002ba8:	f000 fa5e 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	2400cb44 	.word	0x2400cb44
 8002bb4:	58001c00 	.word	0x58001c00
 8002bb8:	30808bd0 	.word	0x30808bd0

08002bbc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08e      	sub	sp, #56	; 0x38
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	2234      	movs	r2, #52	; 0x34
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f023 f861 	bl	8025c90 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002bce:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002bd0:	4a3a      	ldr	r2, [pc, #232]	; (8002cbc <MX_LTDC_Init+0x100>)
 8002bd2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002bd4:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002be0:	4b35      	ldr	r3, [pc, #212]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002be6:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002bee:	2228      	movs	r2, #40	; 0x28
 8002bf0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002bf2:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002bf4:	2209      	movs	r2, #9
 8002bf6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002bfa:	222a      	movs	r2, #42	; 0x2a
 8002bfc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002c00:	220b      	movs	r2, #11
 8002c02:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8002c04:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002c06:	f240 220a 	movw	r2, #522	; 0x20a
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002c0c:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002c0e:	f240 121b 	movw	r2, #283	; 0x11b
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8002c14:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002c16:	f240 222a 	movw	r2, #554	; 0x22a
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002c1c:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002c1e:	f240 121d 	movw	r2, #285	; 0x11d
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002c2c:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002c34:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002c3c:	481e      	ldr	r0, [pc, #120]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002c3e:	f009 fd1f 	bl	800c680 <HAL_LTDC_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002c48:	f000 fa0e 	bl	8003068 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002c50:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002c54:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002c5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002c5e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8002c60:	2301      	movs	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002c64:	23ff      	movs	r3, #255	; 0xff
 8002c66:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c70:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002c72:	2305      	movs	r3, #5
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8002c7a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8002c80:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8002c86:	23ff      	movs	r3, #255	; 0xff
 8002c88:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <MX_LTDC_Init+0xfc>)
 8002ca0:	f009 fe76 	bl	800c990 <HAL_LTDC_ConfigLayer>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8002caa:	f000 f9dd 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	3738      	adds	r7, #56	; 0x38
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	2400cc14 	.word	0x2400cc14
 8002cbc:	50001000 	.word	0x50001000

08002cc0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8002cc6:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002cc8:	4a2d      	ldr	r2, [pc, #180]	; (8002d80 <MX_OCTOSPI1_Init+0xc0>)
 8002cca:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8002cd8:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8002cde:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002ce0:	221a      	movs	r2, #26
 8002ce2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8002ce4:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002cea:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8002cf0:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8002cf6:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 8002cfc:	4b1f      	ldr	r3, [pc, #124]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002cfe:	2203      	movs	r2, #3
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002d02:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002d08:	4b1c      	ldr	r3, [pc, #112]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8002d20:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8002d2c:	4813      	ldr	r0, [pc, #76]	; (8002d7c <MX_OCTOSPI1_Init+0xbc>)
 8002d2e:	f00a f8c1 	bl	800ceb4 <HAL_OSPI_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_OCTOSPI1_Init+0x7c>
  {
    Error_Handler();
 8002d38:	f000 f996 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8002d40:	2301      	movs	r3, #1
 8002d42:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f006 fe19 	bl	800997c <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 8002d4a:	463b      	mov	r3, r7
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f006 fd88 	bl	8009864 <BSP_OSPI_NOR_Init>
 8002d54:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_OCTOSPI1_Init+0xa0>
  {
    Error_Handler();
 8002d5c:	f000 f984 	bl	8003068 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f006 fea9 	bl	8009ab8 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8002d66:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_OCTOSPI1_Init+0xb2>
  {
    Error_Handler();
 8002d6e:	f000 f97b 	bl	8003068 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	2400cb90 	.word	0x2400cb90
 8002d80:	52005000 	.word	0x52005000

08002d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08e      	sub	sp, #56	; 0x38
 8002d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	60da      	str	r2, [r3, #12]
 8002d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002d9a:	4b78      	ldr	r3, [pc, #480]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002d9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002da0:	4a76      	ldr	r2, [pc, #472]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002daa:	4b74      	ldr	r3, [pc, #464]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002dac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	623b      	str	r3, [r7, #32]
 8002db6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002db8:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002dba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002dbe:	4a6f      	ldr	r2, [pc, #444]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dc4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002dc8:	4b6c      	ldr	r3, [pc, #432]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002dca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002dd6:	4b69      	ldr	r3, [pc, #420]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002dd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ddc:	4a67      	ldr	r2, [pc, #412]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002de6:	4b65      	ldr	r3, [pc, #404]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002de8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002df4:	4b61      	ldr	r3, [pc, #388]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002df6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002dfa:	4a60      	ldr	r2, [pc, #384]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002e04:	4b5d      	ldr	r3, [pc, #372]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002e06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	4b5a      	ldr	r3, [pc, #360]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002e14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e18:	4a58      	ldr	r2, [pc, #352]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002e22:	4b56      	ldr	r3, [pc, #344]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002e24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e30:	4b52      	ldr	r3, [pc, #328]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002e32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e36:	4a51      	ldr	r2, [pc, #324]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002e40:	4b4e      	ldr	r3, [pc, #312]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e4e:	4b4b      	ldr	r3, [pc, #300]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002e50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e54:	4a49      	ldr	r2, [pc, #292]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002e5e:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002e60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6c:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002e6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e72:	4a42      	ldr	r2, [pc, #264]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002e74:	f043 0302 	orr.w	r3, r3, #2
 8002e78:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002e7c:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <MX_GPIO_Init+0x1f8>)
 8002e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f640 0104 	movw	r1, #2052	; 0x804
 8002e90:	483b      	ldr	r0, [pc, #236]	; (8002f80 <MX_GPIO_Init+0x1fc>)
 8002e92:	f008 fde1 	bl	800ba58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2101      	movs	r1, #1
 8002e9a:	483a      	ldr	r0, [pc, #232]	; (8002f84 <MX_GPIO_Init+0x200>)
 8002e9c:	f008 fddc 	bl	800ba58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f241 0106 	movw	r1, #4102	; 0x1006
 8002ea6:	4838      	ldr	r0, [pc, #224]	; (8002f88 <MX_GPIO_Init+0x204>)
 8002ea8:	f008 fdd6 	bl	800ba58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RENDER_TIME_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 8002eac:	2200      	movs	r2, #0
 8002eae:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002eb2:	4836      	ldr	r0, [pc, #216]	; (8002f8c <MX_GPIO_Init+0x208>)
 8002eb4:	f008 fdd0 	bl	800ba58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8002eb8:	f640 0304 	movw	r3, #2052	; 0x804
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ece:	4619      	mov	r1, r3
 8002ed0:	482b      	ldr	r0, [pc, #172]	; (8002f80 <MX_GPIO_Init+0x1fc>)
 8002ed2:	f008 fb07 	bl	800b4e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eda:	2301      	movs	r3, #1
 8002edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8002ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eea:	4619      	mov	r1, r3
 8002eec:	4825      	ldr	r0, [pc, #148]	; (8002f84 <MX_GPIO_Init+0x200>)
 8002eee:	f008 faf9 	bl	800b4e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin;
 8002ef2:	f241 0302 	movw	r3, #4098	; 0x1002
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f00:	2300      	movs	r3, #0
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f08:	4619      	mov	r1, r3
 8002f0a:	481f      	ldr	r0, [pc, #124]	; (8002f88 <MX_GPIO_Init+0x204>)
 8002f0c:	f008 faea 	bl	800b4e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002f10:	2304      	movs	r3, #4
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f14:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <MX_GPIO_Init+0x20c>)
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f20:	4619      	mov	r1, r3
 8002f22:	481c      	ldr	r0, [pc, #112]	; (8002f94 <MX_GPIO_Init+0x210>)
 8002f24:	f008 fade 	bl	800b4e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RENDER_TIME_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|FRAME_RATE_Pin;
 8002f28:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	2300      	movs	r3, #0
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4812      	ldr	r0, [pc, #72]	; (8002f8c <MX_GPIO_Init+0x208>)
 8002f42:	f008 facf 	bl	800b4e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8002f46:	2304      	movs	r3, #4
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f52:	2300      	movs	r3, #0
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8002f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	480a      	ldr	r0, [pc, #40]	; (8002f88 <MX_GPIO_Init+0x204>)
 8002f5e:	f008 fac1 	bl	800b4e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2105      	movs	r1, #5
 8002f66:	2008      	movs	r0, #8
 8002f68:	f007 fef8 	bl	800ad5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002f6c:	2008      	movs	r0, #8
 8002f6e:	f007 ff0f 	bl	800ad90 <HAL_NVIC_EnableIRQ>

}
 8002f72:	bf00      	nop
 8002f74:	3738      	adds	r7, #56	; 0x38
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	58024400 	.word	0x58024400
 8002f80:	58021800 	.word	0x58021800
 8002f84:	58022000 	.word	0x58022000
 8002f88:	58020000 	.word	0x58020000
 8002f8c:	58020400 	.word	0x58020400
 8002f90:	11110000 	.word	0x11110000
 8002f94:	58021c00 	.word	0x58021c00

08002f98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8002fa0:	2064      	movs	r0, #100	; 0x64
 8002fa2:	f00d fb5d 	bl	8010660 <osDelay>
 8002fa6:	e7fb      	b.n	8002fa0 <StartDefaultTask+0x8>

08002fa8 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002fae:	463b      	mov	r3, r7
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002fba:	f007 ff05 	bl	800adc8 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8002fc6:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8002fca:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8002fcc:	231b      	movs	r3, #27
 8002fce:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002fec:	463b      	mov	r3, r7
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f007 ff22 	bl	800ae38 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8002ff8:	2319      	movs	r3, #25
 8002ffa:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003000:	2301      	movs	r3, #1
 8003002:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003004:	463b      	mov	r3, r7
 8003006:	4618      	mov	r0, r3
 8003008:	f007 ff16 	bl	800ae38 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800300c:	2302      	movs	r3, #2
 800300e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8003010:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8003014:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8003016:	2313      	movs	r3, #19
 8003018:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800301a:	463b      	mov	r3, r7
 800301c:	4618      	mov	r0, r3
 800301e:	f007 ff0b 	bl	800ae38 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8003022:	2303      	movs	r3, #3
 8003024:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8003026:	2311      	movs	r3, #17
 8003028:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800302e:	463b      	mov	r3, r7
 8003030:	4618      	mov	r0, r3
 8003032:	f007 ff01 	bl	800ae38 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003036:	2004      	movs	r0, #4
 8003038:	f007 fede 	bl	800adf8 <HAL_MPU_Enable>

}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a04      	ldr	r2, [pc, #16]	; (8003064 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003056:	f007 fd61 	bl	800ab1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40001000 	.word	0x40001000

08003068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307e:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <HAL_MspInit+0x38>)
 8003080:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003084:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <HAL_MspInit+0x38>)
 8003086:	f043 0302 	orr.w	r3, r3, #2
 800308a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_MspInit+0x38>)
 8003090:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800309c:	2200      	movs	r2, #0
 800309e:	210f      	movs	r1, #15
 80030a0:	f06f 0001 	mvn.w	r0, #1
 80030a4:	f007 fe5a 	bl	800ad5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	58024400 	.word	0x58024400

080030b4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <HAL_CRC_MspInit+0x3c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10e      	bne.n	80030e4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_CRC_MspInit+0x40>)
 80030c8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80030cc:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_CRC_MspInit+0x40>)
 80030ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030d2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <HAL_CRC_MspInit+0x40>)
 80030d8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80030dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40023000 	.word	0x40023000
 80030f4:	58024400 	.word	0x58024400

080030f8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <HAL_DMA2D_MspInit+0x48>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d116      	bne.n	8003138 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <HAL_DMA2D_MspInit+0x4c>)
 800310c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003110:	4a0c      	ldr	r2, [pc, #48]	; (8003144 <HAL_DMA2D_MspInit+0x4c>)
 8003112:	f043 0310 	orr.w	r3, r3, #16
 8003116:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <HAL_DMA2D_MspInit+0x4c>)
 800311c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003128:	2200      	movs	r2, #0
 800312a:	2105      	movs	r1, #5
 800312c:	205a      	movs	r0, #90	; 0x5a
 800312e:	f007 fe15 	bl	800ad5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003132:	205a      	movs	r0, #90	; 0x5a
 8003134:	f007 fe2c 	bl	800ad90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	52001000 	.word	0x52001000
 8003144:	58024400 	.word	0x58024400

08003148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b0b8      	sub	sp, #224	; 0xe0
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	22b8      	movs	r2, #184	; 0xb8
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f022 fd91 	bl	8025c90 <memset>
  if(hi2c->Instance==I2C4)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a25      	ldr	r2, [pc, #148]	; (8003208 <HAL_I2C_MspInit+0xc0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d142      	bne.n	80031fe <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003178:	2310      	movs	r3, #16
 800317a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4618      	mov	r0, r3
 8003188:	f00b fe08 	bl	800ed9c <HAL_RCCEx_PeriphCLKConfig>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003192:	f7ff ff69 	bl	8003068 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003196:	4b1d      	ldr	r3, [pc, #116]	; (800320c <HAL_I2C_MspInit+0xc4>)
 8003198:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800319c:	4a1b      	ldr	r2, [pc, #108]	; (800320c <HAL_I2C_MspInit+0xc4>)
 800319e:	f043 0308 	orr.w	r3, r3, #8
 80031a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80031a6:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_I2C_MspInit+0xc4>)
 80031a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 80031b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80031b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031bc:	2312      	movs	r3, #18
 80031be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031c8:	2302      	movs	r3, #2
 80031ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80031ce:	2304      	movs	r3, #4
 80031d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031d8:	4619      	mov	r1, r3
 80031da:	480d      	ldr	r0, [pc, #52]	; (8003210 <HAL_I2C_MspInit+0xc8>)
 80031dc:	f008 f982 	bl	800b4e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_I2C_MspInit+0xc4>)
 80031e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <HAL_I2C_MspInit+0xc4>)
 80031e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ec:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_I2C_MspInit+0xc4>)
 80031f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80031f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80031fe:	bf00      	nop
 8003200:	37e0      	adds	r7, #224	; 0xe0
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	58001c00 	.word	0x58001c00
 800320c:	58024400 	.word	0x58024400
 8003210:	58020c00 	.word	0x58020c00

08003214 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0c      	ldr	r2, [pc, #48]	; (8003254 <HAL_I2C_MspDeInit+0x40>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d111      	bne.n	800324a <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_I2C_MspDeInit+0x44>)
 8003228:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800322c:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HAL_I2C_MspDeInit+0x44>)
 800322e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003232:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8003236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800323a:	4808      	ldr	r0, [pc, #32]	; (800325c <HAL_I2C_MspDeInit+0x48>)
 800323c:	f008 fb02 	bl	800b844 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8003240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003244:	4805      	ldr	r0, [pc, #20]	; (800325c <HAL_I2C_MspDeInit+0x48>)
 8003246:	f008 fafd 	bl	800b844 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	58001c00 	.word	0x58001c00
 8003258:	58024400 	.word	0x58024400
 800325c:	58020c00 	.word	0x58020c00

08003260 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b0ba      	sub	sp, #232	; 0xe8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003278:	f107 031c 	add.w	r3, r7, #28
 800327c:	22b8      	movs	r2, #184	; 0xb8
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f022 fd05 	bl	8025c90 <memset>
  if(hltdc->Instance==LTDC)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a56      	ldr	r2, [pc, #344]	; (80033e4 <HAL_LTDC_MspInit+0x184>)
 800328c:	4293      	cmp	r3, r2
 800328e:	f040 80a4 	bne.w	80033da <HAL_LTDC_MspInit+0x17a>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003292:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003296:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8003298:	2318      	movs	r3, #24
 800329a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 800329c:	23c9      	movs	r3, #201	; 0xc9
 800329e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80032a0:	2302      	movs	r3, #2
 80032a2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80032a4:	2302      	movs	r3, #2
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 80032a8:	2315      	movs	r3, #21
 80032aa:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80032b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032b4:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 80032b6:	f241 5356 	movw	r3, #5462	; 0x1556
 80032ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032bc:	f107 031c 	add.w	r3, r7, #28
 80032c0:	4618      	mov	r0, r3
 80032c2:	f00b fd6b 	bl	800ed9c <HAL_RCCEx_PeriphCLKConfig>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_LTDC_MspInit+0x70>
    {
      Error_Handler();
 80032cc:	f7ff fecc 	bl	8003068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80032d0:	4b45      	ldr	r3, [pc, #276]	; (80033e8 <HAL_LTDC_MspInit+0x188>)
 80032d2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80032d6:	4a44      	ldr	r2, [pc, #272]	; (80033e8 <HAL_LTDC_MspInit+0x188>)
 80032d8:	f043 0308 	orr.w	r3, r3, #8
 80032dc:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 80032e0:	4b41      	ldr	r3, [pc, #260]	; (80033e8 <HAL_LTDC_MspInit+0x188>)
 80032e2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80032ee:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <HAL_LTDC_MspInit+0x188>)
 80032f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032f4:	4a3c      	ldr	r2, [pc, #240]	; (80033e8 <HAL_LTDC_MspInit+0x188>)
 80032f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80032fe:	4b3a      	ldr	r3, [pc, #232]	; (80033e8 <HAL_LTDC_MspInit+0x188>)
 8003300:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800330c:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <HAL_LTDC_MspInit+0x188>)
 800330e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003312:	4a35      	ldr	r2, [pc, #212]	; (80033e8 <HAL_LTDC_MspInit+0x188>)
 8003314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003318:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800331c:	4b32      	ldr	r3, [pc, #200]	; (80033e8 <HAL_LTDC_MspInit+0x188>)
 800331e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <HAL_LTDC_MspInit+0x188>)
 800332c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003330:	4a2d      	ldr	r2, [pc, #180]	; (80033e8 <HAL_LTDC_MspInit+0x188>)
 8003332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003336:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800333a:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <HAL_LTDC_MspInit+0x188>)
 800333c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8003348:	23ff      	movs	r3, #255	; 0xff
 800334a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	2302      	movs	r3, #2
 8003350:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003360:	230e      	movs	r3, #14
 8003362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003366:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800336a:	4619      	mov	r1, r3
 800336c:	481f      	ldr	r0, [pc, #124]	; (80033ec <HAL_LTDC_MspInit+0x18c>)
 800336e:	f008 f8b9 	bl	800b4e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8003372:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800338c:	230e      	movs	r3, #14
 800338e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003392:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003396:	4619      	mov	r1, r3
 8003398:	4815      	ldr	r0, [pc, #84]	; (80033f0 <HAL_LTDC_MspInit+0x190>)
 800339a:	f008 f8a3 	bl	800b4e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 800339e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80033a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033b8:	230e      	movs	r3, #14
 80033ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80033be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033c2:	4619      	mov	r1, r3
 80033c4:	480b      	ldr	r0, [pc, #44]	; (80033f4 <HAL_LTDC_MspInit+0x194>)
 80033c6:	f008 f88d 	bl	800b4e4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2105      	movs	r1, #5
 80033ce:	2058      	movs	r0, #88	; 0x58
 80033d0:	f007 fcc4 	bl	800ad5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80033d4:	2058      	movs	r0, #88	; 0x58
 80033d6:	f007 fcdb 	bl	800ad90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80033da:	bf00      	nop
 80033dc:	37e8      	adds	r7, #232	; 0xe8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	50001000 	.word	0x50001000
 80033e8:	58024400 	.word	0x58024400
 80033ec:	58022800 	.word	0x58022800
 80033f0:	58022400 	.word	0x58022400
 80033f4:	58022000 	.word	0x58022000

080033f8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b0b2      	sub	sp, #200	; 0xc8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003400:	f107 0310 	add.w	r3, r7, #16
 8003404:	22b8      	movs	r2, #184	; 0xb8
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f022 fc41 	bl	8025c90 <memset>
  if(hospi->Instance==OCTOSPI1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a26      	ldr	r2, [pc, #152]	; (80034ac <HAL_OSPI_MspInit+0xb4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d145      	bne.n	80034a4 <HAL_OSPI_MspInit+0xac>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003418:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800341c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 800341e:	2318      	movs	r3, #24
 8003420:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 266;
 8003422:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8003426:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003428:	2302      	movs	r3, #2
 800342a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800342c:	2302      	movs	r3, #2
 800342e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003430:	2302      	movs	r3, #2
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8003434:	2300      	movs	r3, #0
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003438:	2320      	movs	r3, #32
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8003440:	2320      	movs	r3, #32
 8003442:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003444:	f107 0310 	add.w	r3, r7, #16
 8003448:	4618      	mov	r0, r3
 800344a:	f00b fca7 	bl	800ed9c <HAL_RCCEx_PeriphCLKConfig>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_OSPI_MspInit+0x60>
    {
      Error_Handler();
 8003454:	f7ff fe08 	bl	8003068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8003458:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <HAL_OSPI_MspInit+0xb8>)
 800345a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800345e:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <HAL_OSPI_MspInit+0xb8>)
 8003460:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003464:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_OSPI_MspInit+0xb8>)
 800346a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800346e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <HAL_OSPI_MspInit+0xb8>)
 8003478:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800347c:	4a0c      	ldr	r2, [pc, #48]	; (80034b0 <HAL_OSPI_MspInit+0xb8>)
 800347e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003482:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <HAL_OSPI_MspInit+0xb8>)
 8003488:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800348c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8003494:	2200      	movs	r2, #0
 8003496:	2105      	movs	r1, #5
 8003498:	205c      	movs	r0, #92	; 0x5c
 800349a:	f007 fc5f 	bl	800ad5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 800349e:	205c      	movs	r0, #92	; 0x5c
 80034a0:	f007 fc76 	bl	800ad90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80034a4:	bf00      	nop
 80034a6:	37c8      	adds	r7, #200	; 0xc8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	52005000 	.word	0x52005000
 80034b0:	58024400 	.word	0x58024400

080034b4 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a0c      	ldr	r2, [pc, #48]	; (80034f4 <HAL_OSPI_MspDeInit+0x40>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d112      	bne.n	80034ec <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80034c6:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <HAL_OSPI_MspDeInit+0x44>)
 80034c8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80034cc:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <HAL_OSPI_MspDeInit+0x44>)
 80034ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034d2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_OSPI_MspDeInit+0x44>)
 80034d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80034dc:	4a06      	ldr	r2, [pc, #24]	; (80034f8 <HAL_OSPI_MspDeInit+0x44>)
 80034de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 80034e6:	205c      	movs	r0, #92	; 0x5c
 80034e8:	f007 fc60 	bl	800adac <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	52005000 	.word	0x52005000
 80034f8:	58024400 	.word	0x58024400

080034fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b090      	sub	sp, #64	; 0x40
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b0f      	cmp	r3, #15
 8003508:	d827      	bhi.n	800355a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800350a:	2200      	movs	r2, #0
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	2036      	movs	r0, #54	; 0x36
 8003510:	f007 fc24 	bl	800ad5c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003514:	2036      	movs	r0, #54	; 0x36
 8003516:	f007 fc3b 	bl	800ad90 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800351a:	4a29      	ldr	r2, [pc, #164]	; (80035c0 <HAL_InitTick+0xc4>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003520:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <HAL_InitTick+0xc8>)
 8003522:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003526:	4a27      	ldr	r2, [pc, #156]	; (80035c4 <HAL_InitTick+0xc8>)
 8003528:	f043 0310 	orr.w	r3, r3, #16
 800352c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003530:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_InitTick+0xc8>)
 8003532:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800353e:	f107 0210 	add.w	r2, r7, #16
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f00b fbe5 	bl	800ed18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003554:	2b00      	cmp	r3, #0
 8003556:	d106      	bne.n	8003566 <HAL_InitTick+0x6a>
 8003558:	e001      	b.n	800355e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e02b      	b.n	80035b6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800355e:	f00b fbaf 	bl	800ecc0 <HAL_RCC_GetPCLK1Freq>
 8003562:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003564:	e004      	b.n	8003570 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003566:	f00b fbab 	bl	800ecc0 <HAL_RCC_GetPCLK1Freq>
 800356a:	4603      	mov	r3, r0
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003572:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <HAL_InitTick+0xcc>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	0c9b      	lsrs	r3, r3, #18
 800357a:	3b01      	subs	r3, #1
 800357c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800357e:	4b13      	ldr	r3, [pc, #76]	; (80035cc <HAL_InitTick+0xd0>)
 8003580:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <HAL_InitTick+0xd4>)
 8003582:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003584:	4b11      	ldr	r3, [pc, #68]	; (80035cc <HAL_InitTick+0xd0>)
 8003586:	f240 32e7 	movw	r2, #999	; 0x3e7
 800358a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800358c:	4a0f      	ldr	r2, [pc, #60]	; (80035cc <HAL_InitTick+0xd0>)
 800358e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003590:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003592:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <HAL_InitTick+0xd0>)
 8003594:	2200      	movs	r2, #0
 8003596:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <HAL_InitTick+0xd0>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800359e:	480b      	ldr	r0, [pc, #44]	; (80035cc <HAL_InitTick+0xd0>)
 80035a0:	f00c fc6c 	bl	800fe7c <HAL_TIM_Base_Init>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80035aa:	4808      	ldr	r0, [pc, #32]	; (80035cc <HAL_InitTick+0xd0>)
 80035ac:	f00c fcc8 	bl	800ff40 <HAL_TIM_Base_Start_IT>
 80035b0:	4603      	mov	r3, r0
 80035b2:	e000      	b.n	80035b6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3740      	adds	r7, #64	; 0x40
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	24000044 	.word	0x24000044
 80035c4:	58024400 	.word	0x58024400
 80035c8:	431bde83 	.word	0x431bde83
 80035cc:	2400cd28 	.word	0x2400cd28
 80035d0:	40001000 	.word	0x40001000

080035d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035e2:	b480      	push	{r7}
 80035e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035e6:	e7fe      	b.n	80035e6 <HardFault_Handler+0x4>

080035e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035ec:	e7fe      	b.n	80035ec <MemManage_Handler+0x4>

080035ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035f2:	e7fe      	b.n	80035f2 <BusFault_Handler+0x4>

080035f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035f8:	e7fe      	b.n	80035f8 <UsageFault_Handler+0x4>

080035fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035fa:	b480      	push	{r7}
 80035fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800360c:	2004      	movs	r0, #4
 800360e:	f008 fa56 	bl	800babe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800361c:	4802      	ldr	r0, [pc, #8]	; (8003628 <TIM6_DAC_IRQHandler+0x10>)
 800361e:	f00c fcff 	bl	8010020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	2400cd28 	.word	0x2400cd28

0800362c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003630:	4802      	ldr	r0, [pc, #8]	; (800363c <LTDC_IRQHandler+0x10>)
 8003632:	f009 f8f5 	bl	800c820 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	2400cc14 	.word	0x2400cc14

08003640 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003644:	4802      	ldr	r0, [pc, #8]	; (8003650 <DMA2D_IRQHandler+0x10>)
 8003646:	f007 fd89 	bl	800b15c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	2400ccc0 	.word	0x2400ccc0

08003654 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8003658:	4802      	ldr	r0, [pc, #8]	; (8003664 <OCTOSPI1_IRQHandler+0x10>)
 800365a:	f009 fd13 	bl	800d084 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	2400cb90 	.word	0x2400cb90

08003668 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
	return 1;
 800366c:	2301      	movs	r3, #1
}
 800366e:	4618      	mov	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <_kill>:

int _kill(int pid, int sig)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003682:	f022 faab 	bl	8025bdc <__errno>
 8003686:	4603      	mov	r3, r0
 8003688:	2216      	movs	r2, #22
 800368a:	601a      	str	r2, [r3, #0]
	return -1;
 800368c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <_exit>:

void _exit (int status)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036a0:	f04f 31ff 	mov.w	r1, #4294967295
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff ffe7 	bl	8003678 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036aa:	e7fe      	b.n	80036aa <_exit+0x12>

080036ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	e00a      	b.n	80036d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036be:	f3af 8000 	nop.w
 80036c2:	4601      	mov	r1, r0
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	60ba      	str	r2, [r7, #8]
 80036ca:	b2ca      	uxtb	r2, r1
 80036cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	3301      	adds	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	429a      	cmp	r2, r3
 80036da:	dbf0      	blt.n	80036be <_read+0x12>
	}

return len;
 80036dc:	687b      	ldr	r3, [r7, #4]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b086      	sub	sp, #24
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	e009      	b.n	800370c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	60ba      	str	r2, [r7, #8]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3301      	adds	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	dbf1      	blt.n	80036f8 <_write+0x12>
	}
	return len;
 8003714:	687b      	ldr	r3, [r7, #4]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <_close>:

int _close(int file)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
	return -1;
 8003726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003746:	605a      	str	r2, [r3, #4]
	return 0;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <_isatty>:

int _isatty(int file)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
	return 1;
 800375e:	2301      	movs	r3, #1
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
	return 0;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003790:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <_sbrk+0x50>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d102      	bne.n	800379e <_sbrk+0x16>
		heap_end = &end;
 8003798:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <_sbrk+0x50>)
 800379a:	4a10      	ldr	r2, [pc, #64]	; (80037dc <_sbrk+0x54>)
 800379c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800379e:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <_sbrk+0x50>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <_sbrk+0x50>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	466a      	mov	r2, sp
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d907      	bls.n	80037c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80037b2:	f022 fa13 	bl	8025bdc <__errno>
 80037b6:	4603      	mov	r3, r0
 80037b8:	220c      	movs	r2, #12
 80037ba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295
 80037c0:	e006      	b.n	80037d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <_sbrk+0x50>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	4a03      	ldr	r2, [pc, #12]	; (80037d8 <_sbrk+0x50>)
 80037cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80037ce:	68fb      	ldr	r3, [r7, #12]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	2400305c 	.word	0x2400305c
 80037dc:	2400ce80 	.word	0x2400ce80

080037e0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80037ec:	887b      	ldrh	r3, [r7, #2]
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d81e      	bhi.n	8003830 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 80037f2:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 80037f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f8:	08003809 	.word	0x08003809
 80037fc:	08003813 	.word	0x08003813
 8003800:	0800381d 	.word	0x0800381d
 8003804:	08003827 	.word	0x08003827
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003808:	f004 f984 	bl	8007b14 <_ZN17TypedTextDatabase8getFontsEv>
 800380c:	4603      	mov	r3, r0
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	e00f      	b.n	8003832 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003812:	f004 f97f 	bl	8007b14 <_ZN17TypedTextDatabase8getFontsEv>
 8003816:	4603      	mov	r3, r0
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	e00a      	b.n	8003832 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800381c:	f004 f97a 	bl	8007b14 <_ZN17TypedTextDatabase8getFontsEv>
 8003820:	4603      	mov	r3, r0
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	e005      	b.n	8003832 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::TYPOGRAPHY_00:
        // verdana_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003826:	f004 f975 	bl	8007b14 <_ZN17TypedTextDatabase8getFontsEv>
 800382a:	4603      	mov	r3, r0
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	e000      	b.n	8003832 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 8003830:	2300      	movs	r3, #0
    }
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop

0800383c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003840:	4b02      	ldr	r3, [pc, #8]	; (800384c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	0802811c 	.word	0x0802811c

08003850 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003854:	2303      	movs	r3, #3
}
 8003856:	4618      	mov	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
    {
 8003868:	4a04      	ldr	r2, [pc, #16]	; (800387c <_ZN8touchgfx4FontD1Ev+0x1c>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	601a      	str	r2, [r3, #0]
    }
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	080285e8 	.word	0x080285e8

08003880 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    }
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ffe9 	bl	8003860 <_ZN8touchgfx4FontD1Ev>
 800388e:	2110      	movs	r1, #16
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f022 f942 	bl	8025b1a <_ZdlPvj>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80038ac:	887b      	ldrh	r3, [r7, #2]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e010      	b.n	80038d8 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3308      	adds	r3, #8
 80038c4:	681c      	ldr	r4, [r3, #0]
 80038c6:	f107 030f 	add.w	r3, r7, #15
 80038ca:	f107 0210 	add.w	r2, r7, #16
 80038ce:	8879      	ldrh	r1, [r7, #2]
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	47a0      	blx	r4
 80038d4:	6178      	str	r0, [r7, #20]
        return glyph;
 80038d6:	697b      	ldr	r3, [r7, #20]
    }
 80038d8:	4618      	mov	r0, r3
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd90      	pop	{r4, r7, pc}

080038e0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	895b      	ldrh	r3, [r3, #10]
    }
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	899b      	ldrh	r3, [r3, #12]
    }
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	889b      	ldrh	r3, [r3, #4]
    }
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	889a      	ldrh	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	799b      	ldrb	r3, [r3, #6]
 8003938:	b29b      	uxth	r3, r3
 800393a:	4413      	add	r3, r2
 800393c:	b29b      	uxth	r3, r3
    }
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	79db      	ldrb	r3, [r3, #7]
 8003956:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800395a:	b2db      	uxtb	r3, r3
    }
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	79db      	ldrb	r3, [r3, #7]
 8003974:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003978:	b2db      	uxtb	r3, r3
    }
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	4a05      	ldr	r2, [pc, #20]	; (80039a8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff61 	bl	8003860 <_ZN8touchgfx4FontD1Ev>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	0802a44c 	.word	0x0802a44c

080039ac <_ZN8touchgfx9ConstFontD0Ev>:
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ffe7 	bl	8003988 <_ZN8touchgfx9ConstFontD1Ev>
 80039ba:	2118      	movs	r1, #24
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f022 f8ac 	bl	8025b1a <_ZdlPvj>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	4a05      	ldr	r2, [pc, #20]	; (80039ec <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ffd3 	bl	8003988 <_ZN8touchgfx9ConstFontD1Ev>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	080282bc 	.word	0x080282bc

080039f0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ffe7 	bl	80039cc <_ZN8touchgfx13GeneratedFontD1Ev>
 80039fe:	2128      	movs	r1, #40	; 0x28
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f022 f88a 	bl	8025b1a <_ZdlPvj>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
    {
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	601a      	str	r2, [r3, #0]
    }
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	08028160 	.word	0x08028160

08003a30 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
    }
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ffe9 	bl	8003a10 <_ZN8touchgfx9TypedTextD1Ev>
 8003a3e:	2108      	movs	r1, #8
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f022 f86a 	bl	8025b1a <_ZdlPvj>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
    {
 8003a70:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	601a      	str	r2, [r3, #0]
    }
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	0802a3e8 	.word	0x0802a3e8

08003a88 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
    }
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ffe9 	bl	8003a68 <_ZN8touchgfx8DrawableD1Ev>
 8003a96:	2128      	movs	r1, #40	; 0x28
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f022 f83e 	bl	8025b1a <_ZdlPvj>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003ab0:	2300      	movs	r3, #0
    }
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	4608      	mov	r0, r1
 8003ac8:	4611      	mov	r1, r2
 8003aca:	461a      	mov	r2, r3
 8003acc:	4603      	mov	r3, r0
 8003ace:	817b      	strh	r3, [r7, #10]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	813b      	strh	r3, [r7, #8]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8003ad8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003adc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f837 	bl	8003b56 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8003ae8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003aec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003af0:	4619      	mov	r1, r3
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f88b 	bl	8003c0e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	460b      	mov	r3, r1
 8003b24:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	887a      	ldrh	r2, [r7, #2]
 8003b2a:	809a      	strh	r2, [r3, #4]
    }
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	80da      	strh	r2, [r3, #6]
    }
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	807b      	strh	r3, [r7, #2]
 8003b62:	4613      	mov	r3, r2
 8003b64:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	332c      	adds	r3, #44	; 0x2c
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003b72:	4611      	mov	r1, r2
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
        setY(y);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3330      	adds	r3, #48	; 0x30
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003b84:	4611      	mov	r1, r2
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4798      	blx	r3
    }
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	887a      	ldrh	r2, [r7, #2]
 8003ba2:	811a      	strh	r2, [r3, #8]
    }
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	815a      	strh	r2, [r3, #10]
    }
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
    {
    }
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
    {
    }
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
    {
    }
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	460b      	mov	r3, r1
 8003c18:	807b      	strh	r3, [r7, #2]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3334      	adds	r3, #52	; 0x34
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
        setHeight(height);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3338      	adds	r3, #56	; 0x38
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
    }
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
    {
    }
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
    {
    }
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3350      	adds	r3, #80	; 0x50
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	8879      	ldrh	r1, [r7, #2]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8003cc8:	b292      	uxth	r2, r2
 8003cca:	1a8a      	subs	r2, r1, r2
 8003ccc:	b292      	uxth	r2, r2
 8003cce:	b210      	sxth	r0, r2
 8003cd0:	8839      	ldrh	r1, [r7, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003cd8:	b292      	uxth	r2, r2
 8003cda:	1a8a      	subs	r2, r1, r2
 8003cdc:	b292      	uxth	r2, r2
 8003cde:	b212      	sxth	r2, r2
 8003ce0:	4601      	mov	r1, r0
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
    }
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cfc:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d04:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d0c:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff ffe1 	bl	8003cee <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	601a      	str	r2, [r3, #0]
    }
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003d54:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d64:	e002      	b.n	8003d6c <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003d66:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
    }
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	2400c8a4 	.word	0x2400c8a4

08003d7c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8003d84:	4a07      	ldr	r2, [pc, #28]	; (8003da4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	721a      	strb	r2, [r3, #8]
    {
    }
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	08028298 	.word	0x08028298

08003da8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
    {
 8003db0:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	601a      	str	r2, [r3, #0]
    }
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	08028298 	.word	0x08028298

08003dc8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
    }
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ffe9 	bl	8003da8 <_ZN8touchgfx10TransitionD1Ev>
 8003dd6:	210c      	movs	r1, #12
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f021 fe9e 	bl	8025b1a <_ZdlPvj>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
    {
    }
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
    {
    }
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
    {
    }
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8003e2c:	f014 ff16 	bl	8018c5c <_ZN8touchgfx11Application11getInstanceEv>
 8003e30:	4603      	mov	r3, r0
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	3230      	adds	r2, #48	; 0x30
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	4790      	blx	r2
    }
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	605a      	str	r2, [r3, #4]
    }
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f014 ff18 	bl	8018ca0 <_ZN8touchgfx11ApplicationC1Ev>
 8003e70:	4a09      	ldr	r2, [pc, #36]	; (8003e98 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8003e8a:	6013      	str	r3, [r2, #0]
    }
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	08027f50 	.word	0x08027f50
 8003e9c:	2400c910 	.word	0x2400c910

08003ea0 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	601a      	str	r2, [r3, #0]
    }
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	721a      	strb	r2, [r3, #8]
    }
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	607b      	str	r3, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	817b      	strh	r3, [r7, #10]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fec2 	bl	8003c74 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fec8 	bl	8003c8e <_ZNK8touchgfx8Drawable11isTouchableEv>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	601a      	str	r2, [r3, #0]
        }
    }
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	605a      	str	r2, [r3, #4]
    }
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	4a05      	ldr	r2, [pc, #20]	; (8003f58 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fd8d 	bl	8003a68 <_ZN8touchgfx8DrawableD1Ev>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	08028210 	.word	0x08028210

08003f5c <_ZN8touchgfx6WidgetD0Ev>:
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff ffe7 	bl	8003f38 <_ZN8touchgfx6WidgetD1Ev>
 8003f6a:	2128      	movs	r1, #40	; 0x28
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f021 fdd4 	bl	8025b1a <_ZdlPvj>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ff68 	bl	8003e60 <_ZN8touchgfx14MVPApplicationC1Ev>
 8003f90:	4a13      	ldr	r2, [pc, #76]	; (8003fe0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 f92b 	bl	80041f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003fb2:	f7fc ff65 	bl	8000e80 <_ZN8touchgfx3HAL11getInstanceEv>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	3208      	adds	r2, #8
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	f003 fd2d 	bl	8007a24 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003fca:	f7ff febb 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f01b f9da 	bl	801f38a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	08027ef4 	.word	0x08027ef4

08003fe4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	4611      	mov	r1, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ffe9 	bl	8003fe4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	3308      	adds	r3, #8
 8004020:	3208      	adds	r2, #8
 8004022:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004026:	e883 0003 	stmia.w	r3, {r0, r1}
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b089      	sub	sp, #36	; 0x24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8004042:	4b10      	ldr	r3, [pc, #64]	; (8004084 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	f107 0008 	add.w	r0, r7, #8
 800404e:	f107 0318 	add.w	r3, r7, #24
 8004052:	cb0c      	ldmia	r3, {r2, r3}
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	f000 f8eb 	bl	8004230 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800405a:	f107 0308 	add.w	r3, r7, #8
 800405e:	4619      	mov	r1, r3
 8004060:	4620      	mov	r0, r4
 8004062:	f7ff ffcb 	bl	8003ffc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004066:	f107 0308 	add.w	r3, r7, #8
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe f80e 	bl	800208c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800407c:	bf00      	nop
 800407e:	3724      	adds	r7, #36	; 0x24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd90      	pop	{r4, r7, pc}
 8004084:	08004089 	.word	0x08004089

08004088 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af02      	add	r7, sp, #8
 800408e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800409c:	461a      	mov	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80040a8:	4804      	ldr	r0, [pc, #16]	; (80040bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80040aa:	f000 f8f3 	bl	8004294 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	2400c904 	.word	0x2400c904
 80040bc:	2400c900 	.word	0x2400c900

080040c0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEast()
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionEastImpl);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80040ce:	4b10      	ldr	r3, [pc, #64]	; (8004110 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv+0x50>)
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	f107 0008 	add.w	r0, r7, #8
 80040da:	f107 0318 	add.w	r3, r7, #24
 80040de:	cb0c      	ldmia	r3, {r2, r3}
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	f000 f8a5 	bl	8004230 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80040e6:	f107 0308 	add.w	r3, r7, #8
 80040ea:	4619      	mov	r1, r3
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff ff85 	bl	8003ffc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80040f2:	f107 0308 	add.w	r3, r7, #8
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fd ffc8 	bl	800208c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8004108:	bf00      	nop
 800410a:	3724      	adds	r7, #36	; 0x24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd90      	pop	{r4, r7, pc}
 8004110:	08004115 	.word	0x08004115

08004114 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionEastImpl()
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af02      	add	r7, sp, #8
 800411a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004128:	461a      	mov	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	4b04      	ldr	r3, [pc, #16]	; (8004144 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x30>)
 8004134:	4804      	ldr	r0, [pc, #16]	; (8004148 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionEastImplEv+0x34>)
 8004136:	f000 f9cb 	bl	80044d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	2400c904 	.word	0x2400c904
 8004148:	2400c900 	.word	0x2400c900

0800414c <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionWestEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionWest()
{
 800414c:	b590      	push	{r4, r7, lr}
 800414e:	b089      	sub	sp, #36	; 0x24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionWestImpl);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800415a:	4b10      	ldr	r3, [pc, #64]	; (800419c <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionWestEv+0x50>)
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	f107 0008 	add.w	r0, r7, #8
 8004166:	f107 0318 	add.w	r3, r7, #24
 800416a:	cb0c      	ldmia	r3, {r2, r3}
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	f000 f85f 	bl	8004230 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004172:	f107 0308 	add.w	r3, r7, #8
 8004176:	4619      	mov	r1, r3
 8004178:	4620      	mov	r0, r4
 800417a:	f7ff ff3f 	bl	8003ffc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800417e:	f107 0308 	add.w	r3, r7, #8
 8004182:	4618      	mov	r0, r3
 8004184:	f7fd ff82 	bl	800208c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8004194:	bf00      	nop
 8004196:	3724      	adds	r7, #36	; 0x24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd90      	pop	{r4, r7, pc}
 800419c:	080041a1 	.word	0x080041a1

080041a0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionWestImpl()
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80041b4:	461a      	mov	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionWestImplEv+0x30>)
 80041c0:	4804      	ldr	r0, [pc, #16]	; (80041d4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionWestImplEv+0x34>)
 80041c2:	f000 faa3 	bl	800470c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	2400c904 	.word	0x2400c904
 80041d4:	2400c900 	.word	0x2400c900

080041d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	08027f94 	.word	0x08027f94

080041f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff ffe8 	bl	80041d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004208:	4a08      	ldr	r2, [pc, #32]	; (800422c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	60da      	str	r2, [r3, #12]
    }
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	08027f38 	.word	0x08027f38

08004230 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	4639      	mov	r1, r7
 800423c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ffc8 	bl	80041d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004248:	4a08      	ldr	r2, [pc, #32]	; (800426c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	605a      	str	r2, [r3, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3308      	adds	r3, #8
 8004258:	463a      	mov	r2, r7
 800425a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800425e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	08027f38 	.word	0x08027f38

08004270 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fd7e 	bl	8003d7c <_ZN8touchgfx10TransitionC1Ev>
 8004280:	4a03      	ldr	r2, [pc, #12]	; (8004290 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	08028274 	.word	0x08028274

08004294 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004294:	b590      	push	{r4, r7, lr}
 8004296:	b08f      	sub	sp, #60	; 0x3c
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3320      	adds	r3, #32
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4610      	mov	r0, r2
 80042b2:	4798      	blx	r3
 80042b4:	4603      	mov	r3, r0
 80042b6:	f242 0237 	movw	r2, #8247	; 0x2037
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d805      	bhi.n	80042ca <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80042be:	4b7f      	ldr	r3, [pc, #508]	; (80044bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80042c0:	4a7f      	ldr	r2, [pc, #508]	; (80044c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80042c2:	21a3      	movs	r1, #163	; 0xa3
 80042c4:	487f      	ldr	r0, [pc, #508]	; (80044c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80042c6:	f021 fc57 	bl	8025b78 <__assert_func>
 80042ca:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3320      	adds	r3, #32
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4610      	mov	r0, r2
 80042dc:	4798      	blx	r3
 80042de:	4603      	mov	r3, r0
 80042e0:	2b0f      	cmp	r3, #15
 80042e2:	d805      	bhi.n	80042f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 80042e4:	4b78      	ldr	r3, [pc, #480]	; (80044c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80042e6:	4a76      	ldr	r2, [pc, #472]	; (80044c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80042e8:	21a4      	movs	r1, #164	; 0xa4
 80042ea:	4876      	ldr	r0, [pc, #472]	; (80044c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80042ec:	f021 fc44 	bl	8025b78 <__assert_func>
 80042f0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3320      	adds	r3, #32
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4610      	mov	r0, r2
 8004302:	4798      	blx	r3
 8004304:	4603      	mov	r3, r0
 8004306:	2b0b      	cmp	r3, #11
 8004308:	d805      	bhi.n	8004316 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800430a:	4b70      	ldr	r3, [pc, #448]	; (80044cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800430c:	4a6c      	ldr	r2, [pc, #432]	; (80044c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800430e:	21a5      	movs	r1, #165	; 0xa5
 8004310:	486c      	ldr	r0, [pc, #432]	; (80044c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004312:	f021 fc31 	bl	8025b78 <__assert_func>
 8004316:	bf00      	nop
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004324:	f014 fc9a 	bl	8018c5c <_ZN8touchgfx11Application11getInstanceEv>
 8004328:	4603      	mov	r3, r0
 800432a:	4618      	mov	r0, r3
 800432c:	f014 fc9c 	bl	8018c68 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4610      	mov	r0, r2
 8004348:	4798      	blx	r3
    if (*currentTrans)
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4610      	mov	r0, r2
 8004360:	4798      	blx	r3
    if (*currentScreen)
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3314      	adds	r3, #20
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4610      	mov	r0, r2
 800437a:	4798      	blx	r3
    if (*currentPresenter)
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3304      	adds	r3, #4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4610      	mov	r0, r2
 8004394:	4798      	blx	r3
    if (*currentScreen)
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4610      	mov	r0, r2
 80043ac:	4798      	blx	r3
    if (*currentPresenter)
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3308      	adds	r3, #8
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4610      	mov	r0, r2
 80043c6:	4798      	blx	r3
}
 80043c8:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fab9 	bl	8004948 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80043d6:	4603      	mov	r3, r0
 80043d8:	4619      	mov	r1, r3
 80043da:	200c      	movs	r0, #12
 80043dc:	f7ff fb38 	bl	8003a50 <_ZnwjPv>
 80043e0:	4604      	mov	r4, r0
 80043e2:	4620      	mov	r0, r4
 80043e4:	f7ff ff44 	bl	8004270 <_ZN8touchgfx12NoTransitionC1Ev>
 80043e8:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fabc 	bl	800496e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 80043f6:	4603      	mov	r3, r0
 80043f8:	4619      	mov	r1, r3
 80043fa:	f242 0038 	movw	r0, #8248	; 0x2038
 80043fe:	f7ff fb27 	bl	8003a50 <_ZnwjPv>
 8004402:	4604      	mov	r4, r0
 8004404:	4620      	mov	r0, r4
 8004406:	f003 fcf1 	bl	8007dec <_ZN11Screen1ViewC1Ev>
 800440a:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2100      	movs	r1, #0
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fabe 	bl	8004994 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004418:	4603      	mov	r3, r0
 800441a:	4619      	mov	r1, r3
 800441c:	2010      	movs	r0, #16
 800441e:	f7ff fb17 	bl	8003a50 <_ZnwjPv>
 8004422:	4604      	mov	r4, r0
 8004424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004426:	4620      	mov	r0, r4
 8004428:	f003 fc88 	bl	8007d3c <_ZN16Screen1PresenterC1ER11Screen1View>
 800442c:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004432:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004438:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	3304      	adds	r3, #4
 800444a:	e000      	b.n	800444e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800444c:	2300      	movs	r3, #0
 800444e:	4619      	mov	r1, r3
 8004450:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004452:	f7ff fd25 	bl	8003ea0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	3304      	adds	r3, #4
 800445a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fd5d 	bl	8003f1c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004466:	4618      	mov	r0, r3
 8004468:	f000 faa7 	bl	80049ba <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004476:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69f8      	ldr	r0, [r7, #28]
 8004482:	4798      	blx	r3
    newPresenter->activate();
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69b8      	ldr	r0, [r7, #24]
 800448c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800448e:	6979      	ldr	r1, [r7, #20]
 8004490:	69f8      	ldr	r0, [r7, #28]
 8004492:	f016 f857 	bl	801a544 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3310      	adds	r3, #16
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6978      	ldr	r0, [r7, #20]
 80044a0:	4798      	blx	r3
    newTransition->invalidate();
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3314      	adds	r3, #20
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6978      	ldr	r0, [r7, #20]
 80044ac:	4798      	blx	r3
}
 80044ae:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	373c      	adds	r7, #60	; 0x3c
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd90      	pop	{r4, r7, pc}
 80044ba:	bf00      	nop
 80044bc:	080270d8 	.word	0x080270d8
 80044c0:	08027168 	.word	0x08027168
 80044c4:	0802726c 	.word	0x0802726c
 80044c8:	080272b4 	.word	0x080272b4
 80044cc:	08027358 	.word	0x08027358

080044d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b08f      	sub	sp, #60	; 0x3c
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3320      	adds	r3, #32
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4610      	mov	r0, r2
 80044ee:	4798      	blx	r3
 80044f0:	4603      	mov	r3, r0
 80044f2:	f242 0237 	movw	r2, #8247	; 0x2037
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d805      	bhi.n	8004506 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80044fa:	4b7f      	ldr	r3, [pc, #508]	; (80046f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80044fc:	4a7f      	ldr	r2, [pc, #508]	; (80046fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80044fe:	21a3      	movs	r1, #163	; 0xa3
 8004500:	487f      	ldr	r0, [pc, #508]	; (8004700 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004502:	f021 fb39 	bl	8025b78 <__assert_func>
 8004506:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3320      	adds	r3, #32
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4610      	mov	r0, r2
 8004518:	4798      	blx	r3
 800451a:	4603      	mov	r3, r0
 800451c:	2b0f      	cmp	r3, #15
 800451e:	d805      	bhi.n	800452c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8004520:	4b78      	ldr	r3, [pc, #480]	; (8004704 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004522:	4a76      	ldr	r2, [pc, #472]	; (80046fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004524:	21a4      	movs	r1, #164	; 0xa4
 8004526:	4876      	ldr	r0, [pc, #472]	; (8004700 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004528:	f021 fb26 	bl	8025b78 <__assert_func>
 800452c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3320      	adds	r3, #32
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4610      	mov	r0, r2
 800453e:	4798      	blx	r3
 8004540:	4603      	mov	r3, r0
 8004542:	2b53      	cmp	r3, #83	; 0x53
 8004544:	d805      	bhi.n	8004552 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8004546:	4b70      	ldr	r3, [pc, #448]	; (8004708 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8004548:	4a6c      	ldr	r2, [pc, #432]	; (80046fc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800454a:	21a5      	movs	r1, #165	; 0xa5
 800454c:	486c      	ldr	r0, [pc, #432]	; (8004700 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800454e:	f021 fb13 	bl	8025b78 <__assert_func>
 8004552:	bf00      	nop
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004560:	f014 fb7c 	bl	8018c5c <_ZN8touchgfx11Application11getInstanceEv>
 8004564:	4603      	mov	r3, r0
 8004566:	4618      	mov	r0, r3
 8004568:	f014 fb7e 	bl	8018c68 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	330c      	adds	r3, #12
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4610      	mov	r0, r2
 8004584:	4798      	blx	r3
    if (*currentTrans)
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4610      	mov	r0, r2
 800459c:	4798      	blx	r3
    if (*currentScreen)
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4610      	mov	r0, r2
 80045b6:	4798      	blx	r3
    if (*currentPresenter)
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3304      	adds	r3, #4
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4610      	mov	r0, r2
 80045d0:	4798      	blx	r3
    if (*currentScreen)
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4610      	mov	r0, r2
 80045e8:	4798      	blx	r3
    if (*currentPresenter)
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3308      	adds	r3, #8
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4610      	mov	r0, r2
 8004602:	4798      	blx	r3
}
 8004604:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f000 f9e2 	bl	80049d6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 8004612:	4603      	mov	r3, r0
 8004614:	4619      	mov	r1, r3
 8004616:	2054      	movs	r0, #84	; 0x54
 8004618:	f7ff fa1a 	bl	8003a50 <_ZnwjPv>
 800461c:	4604      	mov	r4, r0
 800461e:	2114      	movs	r1, #20
 8004620:	4620      	mov	r0, r4
 8004622:	f000 fa2f 	bl	8004a84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8004626:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f99d 	bl	800496e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8004634:	4603      	mov	r3, r0
 8004636:	4619      	mov	r1, r3
 8004638:	f242 0038 	movw	r0, #8248	; 0x2038
 800463c:	f7ff fa08 	bl	8003a50 <_ZnwjPv>
 8004640:	4604      	mov	r4, r0
 8004642:	4620      	mov	r0, r4
 8004644:	f003 fbd2 	bl	8007dec <_ZN11Screen1ViewC1Ev>
 8004648:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f000 f99f 	bl	8004994 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004656:	4603      	mov	r3, r0
 8004658:	4619      	mov	r1, r3
 800465a:	2010      	movs	r0, #16
 800465c:	f7ff f9f8 	bl	8003a50 <_ZnwjPv>
 8004660:	4604      	mov	r4, r0
 8004662:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004664:	4620      	mov	r0, r4
 8004666:	f003 fb69 	bl	8007d3c <_ZN16Screen1PresenterC1ER11Screen1View>
 800466a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004670:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004676:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	3304      	adds	r3, #4
 8004688:	e000      	b.n	800468c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1bc>
 800468a:	2300      	movs	r3, #0
 800468c:	4619      	mov	r1, r3
 800468e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004690:	f7ff fc06 	bl	8003ea0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	3304      	adds	r3, #4
 8004698:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fc3e 	bl	8003f1c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 f988 	bl	80049ba <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	330c      	adds	r3, #12
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69f8      	ldr	r0, [r7, #28]
 80046c0:	4798      	blx	r3
    newPresenter->activate();
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69b8      	ldr	r0, [r7, #24]
 80046ca:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80046cc:	6979      	ldr	r1, [r7, #20]
 80046ce:	69f8      	ldr	r0, [r7, #28]
 80046d0:	f015 ff38 	bl	801a544 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3310      	adds	r3, #16
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6978      	ldr	r0, [r7, #20]
 80046de:	4798      	blx	r3
    newTransition->invalidate();
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3314      	adds	r3, #20
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6978      	ldr	r0, [r7, #20]
 80046ea:	4798      	blx	r3
}
 80046ec:	bf00      	nop
    return newPresenter;
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	373c      	adds	r7, #60	; 0x3c
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd90      	pop	{r4, r7, pc}
 80046f8:	080270d8 	.word	0x080270d8
 80046fc:	080273fc 	.word	0x080273fc
 8004700:	0802726c 	.word	0x0802726c
 8004704:	080272b4 	.word	0x080272b4
 8004708:	08027358 	.word	0x08027358

0800470c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b08f      	sub	sp, #60	; 0x3c
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3320      	adds	r3, #32
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4610      	mov	r0, r2
 800472a:	4798      	blx	r3
 800472c:	4603      	mov	r3, r0
 800472e:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004732:	d205      	bcs.n	8004740 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004734:	4b7f      	ldr	r3, [pc, #508]	; (8004934 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004736:	4a80      	ldr	r2, [pc, #512]	; (8004938 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004738:	21a3      	movs	r1, #163	; 0xa3
 800473a:	4880      	ldr	r0, [pc, #512]	; (800493c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800473c:	f021 fa1c 	bl	8025b78 <__assert_func>
 8004740:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3320      	adds	r3, #32
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4610      	mov	r0, r2
 8004752:	4798      	blx	r3
 8004754:	4603      	mov	r3, r0
 8004756:	2b0f      	cmp	r3, #15
 8004758:	d805      	bhi.n	8004766 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800475a:	4b79      	ldr	r3, [pc, #484]	; (8004940 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800475c:	4a76      	ldr	r2, [pc, #472]	; (8004938 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800475e:	21a4      	movs	r1, #164	; 0xa4
 8004760:	4876      	ldr	r0, [pc, #472]	; (800493c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004762:	f021 fa09 	bl	8025b78 <__assert_func>
 8004766:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3320      	adds	r3, #32
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4610      	mov	r0, r2
 8004778:	4798      	blx	r3
 800477a:	4603      	mov	r3, r0
 800477c:	2b53      	cmp	r3, #83	; 0x53
 800477e:	d805      	bhi.n	800478c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004780:	4b70      	ldr	r3, [pc, #448]	; (8004944 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8004782:	4a6d      	ldr	r2, [pc, #436]	; (8004938 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004784:	21a5      	movs	r1, #165	; 0xa5
 8004786:	486d      	ldr	r0, [pc, #436]	; (800493c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004788:	f021 f9f6 	bl	8025b78 <__assert_func>
 800478c:	bf00      	nop
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800479a:	f014 fa5f 	bl	8018c5c <_ZN8touchgfx11Application11getInstanceEv>
 800479e:	4603      	mov	r3, r0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f014 fa61 	bl	8018c68 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	330c      	adds	r3, #12
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4610      	mov	r0, r2
 80047be:	4798      	blx	r3
    if (*currentTrans)
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4610      	mov	r0, r2
 80047d6:	4798      	blx	r3
    if (*currentScreen)
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3314      	adds	r3, #20
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4610      	mov	r0, r2
 80047f0:	4798      	blx	r3
    if (*currentPresenter)
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d008      	beq.n	800480c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3304      	adds	r3, #4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4610      	mov	r0, r2
 800480a:	4798      	blx	r3
    if (*currentScreen)
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4610      	mov	r0, r2
 8004822:	4798      	blx	r3
    if (*currentPresenter)
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3308      	adds	r3, #8
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4610      	mov	r0, r2
 800483c:	4798      	blx	r3
}
 800483e:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f980 	bl	8004b4c <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 800484c:	4603      	mov	r3, r0
 800484e:	4619      	mov	r1, r3
 8004850:	2054      	movs	r0, #84	; 0x54
 8004852:	f7ff f8fd 	bl	8003a50 <_ZnwjPv>
 8004856:	4604      	mov	r4, r0
 8004858:	2114      	movs	r1, #20
 800485a:	4620      	mov	r0, r4
 800485c:	f000 f9ac 	bl	8004bb8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 8004860:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2100      	movs	r1, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fa07 	bl	8004c7c <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 800486e:	4603      	mov	r3, r0
 8004870:	4619      	mov	r1, r3
 8004872:	f44f 709e 	mov.w	r0, #316	; 0x13c
 8004876:	f7ff f8eb 	bl	8003a50 <_ZnwjPv>
 800487a:	4604      	mov	r4, r0
 800487c:	4620      	mov	r0, r4
 800487e:	f003 fb6b 	bl	8007f58 <_ZN11Screen2ViewC1Ev>
 8004882:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fa09 	bl	8004ca2 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 8004890:	4603      	mov	r3, r0
 8004892:	4619      	mov	r1, r3
 8004894:	2010      	movs	r0, #16
 8004896:	f7ff f8db 	bl	8003a50 <_ZnwjPv>
 800489a:	4604      	mov	r4, r0
 800489c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800489e:	4620      	mov	r0, r4
 80048a0:	f003 fb02 	bl	8007ea8 <_ZN16Screen2PresenterC1ER11Screen2View>
 80048a4:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048aa:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80048b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	3304      	adds	r3, #4
 80048c2:	e000      	b.n	80048c6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 80048c4:	2300      	movs	r3, #0
 80048c6:	4619      	mov	r1, r3
 80048c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80048ca:	f7ff fae9 	bl	8003ea0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	3304      	adds	r3, #4
 80048d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fb21 	bl	8003f1c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f9f2 	bl	8004cc8 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ee:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69f8      	ldr	r0, [r7, #28]
 80048fa:	4798      	blx	r3
    newPresenter->activate();
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69b8      	ldr	r0, [r7, #24]
 8004904:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004906:	6979      	ldr	r1, [r7, #20]
 8004908:	69f8      	ldr	r0, [r7, #28]
 800490a:	f015 fe1b 	bl	801a544 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3310      	adds	r3, #16
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6978      	ldr	r0, [r7, #20]
 8004918:	4798      	blx	r3
    newTransition->invalidate();
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3314      	adds	r3, #20
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6978      	ldr	r0, [r7, #20]
 8004924:	4798      	blx	r3
}
 8004926:	bf00      	nop
    return newPresenter;
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800492a:	4618      	mov	r0, r3
 800492c:	373c      	adds	r7, #60	; 0x3c
 800492e:	46bd      	mov	sp, r7
 8004930:	bd90      	pop	{r4, r7, pc}
 8004932:	bf00      	nop
 8004934:	080270d8 	.word	0x080270d8
 8004938:	08027514 	.word	0x08027514
 800493c:	0802726c 	.word	0x0802726c
 8004940:	080272b4 	.word	0x080272b4
 8004944:	08027358 	.word	0x08027358

08004948 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3324      	adds	r3, #36	; 0x24
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	887a      	ldrh	r2, [r7, #2]
 800495e:	4611      	mov	r1, r2
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
 8004964:	4603      	mov	r3, r0
    }
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3324      	adds	r3, #36	; 0x24
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	887a      	ldrh	r2, [r7, #2]
 8004984:	4611      	mov	r1, r2
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
 800498a:	4603      	mov	r3, r0
    }
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3324      	adds	r3, #36	; 0x24
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	887a      	ldrh	r2, [r7, #2]
 80049aa:	4611      	mov	r1, r2
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	4798      	blx	r3
 80049b0:	4603      	mov	r3, r0
    }
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	460b      	mov	r3, r1
 80049e0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3324      	adds	r3, #36	; 0x24
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	887a      	ldrh	r2, [r7, #2]
 80049ec:	4611      	mov	r1, r2
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
 80049f2:	4603      	mov	r3, r0
    }
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	4a05      	ldr	r2, [pc, #20]	; (8004a1c <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fa93 	bl	8003f38 <_ZN8touchgfx6WidgetD1Ev>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	08029ae0 	.word	0x08029ae0

08004a20 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff ffe7 	bl	80049fc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8004a2e:	212c      	movs	r1, #44	; 0x2c
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f021 f872 	bl	8025b1a <_ZdlPvj>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 f991 	bl	8004d78 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	0802819c 	.word	0x0802819c

08004a64 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff ffe7 	bl	8004a40 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8004a72:	2110      	movs	r1, #16
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f021 f850 	bl	8025b1a <_ZdlPvj>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8004a84:	b590      	push	{r4, r7, lr}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
          snapshot(),
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff f972 	bl	8003d7c <_ZN8touchgfx10TransitionC1Ev>
 8004a98:	4a27      	ldr	r2, [pc, #156]	; (8004b38 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb4>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f011 fea0 	bl	80167e8 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8004ab8:	4a20      	ldr	r2, [pc, #128]	; (8004b3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb8>)
 8004aba:	f107 0308 	add.w	r3, r7, #8
 8004abe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ac2:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ac6:	f107 0308 	add.w	r3, r7, #8
 8004aca:	cb0c      	ldmia	r3, {r2, r3}
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f000 f932 	bl	8004d38 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xbc>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01c      	beq.n	8004b2e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xaa>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f103 000c 	add.w	r0, r3, #12
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b21a      	sxth	r2, r3
 8004b00:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc4>)
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b21b      	sxth	r3, r3
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	f7fe ffd6 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	330c      	adds	r3, #12
 8004b16:	4618      	mov	r0, r3
 8004b18:	f011 fdea 	bl	80166f0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (templateDirection)
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	425b      	negs	r3, r3
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	b21a      	sxth	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 8004b2c:	bf00      	nop
                done = true;
                // Nothing to do here
                break;
            }
        }
    }
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd90      	pop	{r4, r7, pc}
 8004b38:	08028170 	.word	0x08028170
 8004b3c:	0802762c 	.word	0x0802762c
 8004b40:	2400c8a3 	.word	0x2400c8a3
 8004b44:	2400c898 	.word	0x2400c898
 8004b48:	2400c89a 	.word	0x2400c89a

08004b4c <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3324      	adds	r3, #36	; 0x24
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	887a      	ldrh	r2, [r7, #2]
 8004b62:	4611      	mov	r1, r2
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
 8004b68:	4603      	mov	r3, r0
    }
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 f8f7 	bl	8004d78 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	080281e0 	.word	0x080281e0

08004b98 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ffe7 	bl	8004b74 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 8004ba6:	2110      	movs	r1, #16
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f020 ffb6 	bl	8025b1a <_ZdlPvj>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 8004bb8:	b590      	push	{r4, r7, lr}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	70fb      	strb	r3, [r7, #3]
          calculatedValue(0)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff f8d8 	bl	8003d7c <_ZN8touchgfx10TransitionC1Ev>
 8004bcc:	4a26      	ldr	r2, [pc, #152]	; (8004c68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb0>)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f011 fe06 	bl	80167e8 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8004bec:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb4>)
 8004bee:	f107 0308 	add.w	r3, r7, #8
 8004bf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bf6:	e883 0003 	stmia.w	r3, {r0, r1}
 8004bfa:	f107 0308 	add.w	r3, r7, #8
 8004bfe:	cb0c      	ldmia	r3, {r2, r3}
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4620      	mov	r0, r4
 8004c04:	f000 f8f2 	bl	8004dec <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        if (HAL::USE_ANIMATION_STORAGE)
 8004c20:	4b13      	ldr	r3, [pc, #76]	; (8004c70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb8>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01a      	beq.n	8004c5e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xa6>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f103 000c 	add.w	r0, r3, #12
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xbc>)
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	b21a      	sxth	r2, r3
 8004c34:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xc0>)
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	b21b      	sxth	r3, r3
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2100      	movs	r1, #0
 8004c42:	f7fe ff3c 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f011 fd50 	bl	80166f0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
                targetValue = HAL::DISPLAY_WIDTH;
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xbc>)
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b21a      	sxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 8004c5c:	bf00      	nop
    }
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd90      	pop	{r4, r7, pc}
 8004c68:	080281b4 	.word	0x080281b4
 8004c6c:	08027634 	.word	0x08027634
 8004c70:	2400c8a3 	.word	0x2400c8a3
 8004c74:	2400c898 	.word	0x2400c898
 8004c78:	2400c89a 	.word	0x2400c89a

08004c7c <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3324      	adds	r3, #36	; 0x24
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	887a      	ldrh	r2, [r7, #2]
 8004c92:	4611      	mov	r1, r2
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	4798      	blx	r3
 8004c98:	4603      	mov	r3, r0
    }
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3324      	adds	r3, #36	; 0x24
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	887a      	ldrh	r2, [r7, #2]
 8004cb8:	4611      	mov	r1, r2
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	4798      	blx	r3
 8004cbe:	4603      	mov	r3, r0
    }
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& presenter)
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d00a      	beq.n	8004d0e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2a>

        switch (templateDirection)
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3350      	adds	r3, #80	; 0x50
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	f9b2 1050 	ldrsh.w	r1, [r2, #80]	; 0x50
 8004d06:	2200      	movs	r2, #0
 8004d08:	6838      	ldr	r0, [r7, #0]
 8004d0a:	4798      	blx	r3
            break;
 8004d0c:	e000      	b.n	8004d10 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 8004d0e:	bf00      	nop
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
            break;
        }
    }
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	4a04      	ldr	r2, [pc, #16]	; (8004d34 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	080281f8 	.word	0x080281f8

08004d38 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	4639      	mov	r1, r7
 8004d44:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff ffe4 	bl	8004d18 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8004d50:	4a08      	ldr	r2, [pc, #32]	; (8004d74 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	605a      	str	r2, [r3, #4]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3308      	adds	r3, #8
 8004d60:	463a      	mov	r2, r7
 8004d62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d66:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	0802819c 	.word	0x0802819c

08004d78 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
    }
 8004d80:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	080281f8 	.word	0x080281f8

08004d98 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
    }
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff ffe9 	bl	8004d78 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8004da6:	2104      	movs	r1, #4
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f020 feb6 	bl	8025b1a <_ZdlPvj>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
        if (&d == snapshotPtr)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d00a      	beq.n	8004de2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x2a>
            d.moveRelative(calculatedValue, 0);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3350      	adds	r3, #80	; 0x50
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	f9b2 1050 	ldrsh.w	r1, [r2, #80]	; 0x50
 8004dda:	2200      	movs	r2, #0
 8004ddc:	6838      	ldr	r0, [r7, #0]
 8004dde:	4798      	blx	r3
            break;
 8004de0:	e000      	b.n	8004de4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 8004de2:	bf00      	nop
    }
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	4639      	mov	r1, r7
 8004df8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff ff8a 	bl	8004d18 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8004e04:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	605a      	str	r2, [r3, #4]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3308      	adds	r3, #8
 8004e14:	463a      	mov	r2, r7
 8004e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e1a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	080281e0 	.word	0x080281e0

08004e2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
class SlideTransition : public Transition
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	333c      	adds	r3, #60	; 0x3c
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff fdfe 	bl	8004a40 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	330c      	adds	r3, #12
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff fdd7 	bl	80049fc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe ffa9 	bl	8003da8 <_ZN8touchgfx10TransitionD1Ev>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	08028170 	.word	0x08028170

08004e64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff ffdd 	bl	8004e2c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 8004e72:	2154      	movs	r1, #84	; 0x54
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f020 fe50 	bl	8025b1a <_ZdlPvj>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	4a0a      	ldr	r2, [pc, #40]	; (8004eb8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x34>)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	333c      	adds	r3, #60	; 0x3c
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fe6c 	bl	8004b74 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fdab 	bl	80049fc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fe ff7d 	bl	8003da8 <_ZN8touchgfx10TransitionD1Ev>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	080281b4 	.word	0x080281b4

08004ebc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff ffdd 	bl	8004e84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 8004eca:	2154      	movs	r1, #84	; 0x54
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f020 fe24 	bl	8025b1a <_ZdlPvj>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <_ZN8touchgfx12NoTransitionD1Ev>:
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	4a05      	ldr	r2, [pc, #20]	; (8004efc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fe ff5b 	bl	8003da8 <_ZN8touchgfx10TransitionD1Ev>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	08028274 	.word	0x08028274

08004f00 <_ZN8touchgfx12NoTransitionD0Ev>:
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ffe7 	bl	8004edc <_ZN8touchgfx12NoTransitionD1Ev>
 8004f0e:	210c      	movs	r1, #12
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f020 fe02 	bl	8025b1a <_ZdlPvj>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8004f28:	4b40      	ldr	r3, [pc, #256]	; (800502c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x10c>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	f083 0301 	eor.w	r3, r3, #1
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	721a      	strb	r2, [r3, #8]
            return;
 8004f3c:	e073      	b.n	8005026 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fe ff51 	bl	8003de8 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d82f      	bhi.n	8004fc6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004f6c:	b298      	uxth	r0, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	f015 fae7 	bl	801a550 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8004f82:	4603      	mov	r3, r0
 8004f84:	461a      	mov	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01b      	beq.n	8004fd6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 8004fac:	2a00      	cmp	r2, #0
 8004fae:	dd01      	ble.n	8004fb4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	e001      	b.n	8004fb8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8004fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fb8:	4413      	add	r3, r2
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	b21a      	sxth	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8004fc4:	e007      	b.n	8004fd6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 8004fd4:	e027      	b.n	8005026 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getX();
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fd90 	bl	8003b00 <_ZNK8touchgfx8Drawable4getXEv>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	b28b      	uxth	r3, r1
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	b21a      	sxth	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(calculatedValue, 0);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f103 000c 	add.w	r0, r3, #12
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8005006:	2200      	movs	r2, #0
 8005008:	4619      	mov	r1, r3
 800500a:	f014 fe27 	bl	8019c5c <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800500e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6858      	ldr	r0, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3378      	adds	r3, #120	; 0x78
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	323c      	adds	r2, #60	; 0x3c
 8005022:	4611      	mov	r1, r2
 8005024:	4798      	blx	r3
    }
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	2400c8a3 	.word	0x2400c8a3

08005030 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8005038:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00e      	beq.n	800505e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6858      	ldr	r0, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3360      	adds	r3, #96	; 0x60
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	320c      	adds	r2, #12
 800505a:	4611      	mov	r1, r2
 800505c:	4798      	blx	r3
    }
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	2400c8a3 	.word	0x2400c8a3

0800506c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8005074:	4b1a      	ldr	r3, [pc, #104]	; (80050e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d02d      	beq.n	80050d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe fec6 	bl	8003e10 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8005084:	4a17      	ldr	r2, [pc, #92]	; (80050e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 8005086:	f107 0318 	add.w	r3, r7, #24
 800508a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800508e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005092:	f107 0008 	add.w	r0, r7, #8
 8005096:	f107 0318 	add.w	r3, r7, #24
 800509a:	cb0c      	ldmia	r3, {r2, r3}
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	f7ff fe4b 	bl	8004d38 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3378      	adds	r3, #120	; 0x78
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f107 0108 	add.w	r1, r7, #8
 80050b4:	4610      	mov	r0, r2
 80050b6:	4798      	blx	r3
            screenContainer->add(snapshot);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6858      	ldr	r0, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	335c      	adds	r3, #92	; 0x5c
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	320c      	adds	r2, #12
 80050ca:	4611      	mov	r1, r2
 80050cc:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80050ce:	f107 0308 	add.w	r3, r7, #8
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fcb4 	bl	8004a40 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 80050d8:	bf00      	nop
 80050da:	3720      	adds	r7, #32
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	2400c8a3 	.word	0x2400c8a3
 80050e4:	0802763c 	.word	0x0802763c

080050e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3350      	adds	r3, #80	; 0x50
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a05      	ldr	r2, [pc, #20]	; (8005110 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x28>)
 80050fc:	8812      	ldrh	r2, [r2, #0]
 80050fe:	b211      	sxth	r1, r2
 8005100:	2200      	movs	r2, #0
 8005102:	6838      	ldr	r0, [r7, #0]
 8005104:	4798      	blx	r3
            break;
 8005106:	bf00      	nop
    }
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	2400c898 	.word	0x2400c898

08005114 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	68d2      	ldr	r2, [r2, #12]
 8005126:	1052      	asrs	r2, r2, #1
 8005128:	1898      	adds	r0, r3, r2
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	e00a      	b.n	8005152 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	68d2      	ldr	r2, [r2, #12]
 8005144:	1052      	asrs	r2, r2, #1
 8005146:	4413      	add	r3, r2
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6892      	ldr	r2, [r2, #8]
 800514e:	4413      	add	r3, r2
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	4798      	blx	r3
    }
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d010      	beq.n	8005190 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d107      	bne.n	8005186 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8005186:	2300      	movs	r3, #0
 8005188:	2b01      	cmp	r3, #1
 800518a:	d001      	beq.n	8005190 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8005190:	2300      	movs	r3, #0
    }
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 80051a8:	4b40      	ldr	r3, [pc, #256]	; (80052ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x10c>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f083 0301 	eor.w	r3, r3, #1
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	721a      	strb	r2, [r3, #8]
            return;
 80051bc:	e073      	b.n	80052a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe fe11 	bl	8003de8 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80051cc:	3301      	adds	r3, #1
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d82f      	bhi.n	8005246 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80051ec:	b298      	uxth	r0, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2100      	movs	r1, #0
 80051fe:	f015 f9a7 	bl	801a550 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8005202:	4603      	mov	r3, r0
 8005204:	461a      	mov	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8005212:	b29b      	uxth	r3, r3
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01b      	beq.n	8005256 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8005224:	b29b      	uxth	r3, r3
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 800522c:	2a00      	cmp	r2, #0
 800522e:	dd01      	ble.n	8005234 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>
 8005230:	2201      	movs	r2, #1
 8005232:	e001      	b.n	8005238 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>
 8005234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005238:	4413      	add	r3, r2
 800523a:	b29b      	uxth	r3, r3
 800523c:	b21a      	sxth	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005244:	e007      	b.n	8005256 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
            done = true;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 8005254:	e027      	b.n	80052a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getX();
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	330c      	adds	r3, #12
 800525a:	4618      	mov	r0, r3
 800525c:	f7fe fc50 	bl	8003b00 <_ZNK8touchgfx8Drawable4getXEv>
 8005260:	4603      	mov	r3, r0
 8005262:	4619      	mov	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800526a:	b29a      	uxth	r2, r3
 800526c:	b28b      	uxth	r3, r1
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	b29b      	uxth	r3, r3
 8005272:	b21a      	sxth	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(calculatedValue, 0);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f103 000c 	add.w	r0, r3, #12
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8005286:	2200      	movs	r2, #0
 8005288:	4619      	mov	r1, r3
 800528a:	f014 fce7 	bl	8019c5c <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800528e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6858      	ldr	r0, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3378      	adds	r3, #120	; 0x78
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	323c      	adds	r2, #60	; 0x3c
 80052a2:	4611      	mov	r1, r2
 80052a4:	4798      	blx	r3
    }
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	2400c8a3 	.word	0x2400c8a3

080052b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00e      	beq.n	80052de <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6858      	ldr	r0, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3360      	adds	r3, #96	; 0x60
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	320c      	adds	r2, #12
 80052da:	4611      	mov	r1, r2
 80052dc:	4798      	blx	r3
    }
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	2400c8a3 	.word	0x2400c8a3

080052ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 80052f4:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x74>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d02d      	beq.n	8005358 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x6c>
            Transition::init();
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fe fd86 	bl	8003e10 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8005304:	4a17      	ldr	r2, [pc, #92]	; (8005364 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x78>)
 8005306:	f107 0318 	add.w	r3, r7, #24
 800530a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800530e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005312:	f107 0008 	add.w	r0, r7, #8
 8005316:	f107 0318 	add.w	r3, r7, #24
 800531a:	cb0c      	ldmia	r3, {r2, r3}
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	f7ff fd65 	bl	8004dec <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3378      	adds	r3, #120	; 0x78
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f107 0108 	add.w	r1, r7, #8
 8005334:	4610      	mov	r0, r2
 8005336:	4798      	blx	r3
            screenContainer->add(snapshot);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6858      	ldr	r0, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	335c      	adds	r3, #92	; 0x5c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	320c      	adds	r2, #12
 800534a:	4611      	mov	r1, r2
 800534c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800534e:	f107 0308 	add.w	r3, r7, #8
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fc0e 	bl	8004b74 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 8005358:	bf00      	nop
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	2400c8a3 	.word	0x2400c8a3
 8005364:	08027644 	.word	0x08027644

08005368 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3350      	adds	r3, #80	; 0x50
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a06      	ldr	r2, [pc, #24]	; (8005394 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x2c>)
 800537c:	8812      	ldrh	r2, [r2, #0]
 800537e:	4252      	negs	r2, r2
 8005380:	b292      	uxth	r2, r2
 8005382:	b211      	sxth	r1, r2
 8005384:	2200      	movs	r2, #0
 8005386:	6838      	ldr	r0, [r7, #0]
 8005388:	4798      	blx	r3
            break;
 800538a:	bf00      	nop
    }
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	2400c898 	.word	0x2400c898

08005398 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68d2      	ldr	r2, [r2, #12]
 80053aa:	1052      	asrs	r2, r2, #1
 80053ac:	1898      	adds	r0, r3, r2
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d102      	bne.n	80053c0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	e00a      	b.n	80053d6 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	68d2      	ldr	r2, [r2, #12]
 80053c8:	1052      	asrs	r2, r2, #1
 80053ca:	4413      	add	r3, r2
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6892      	ldr	r2, [r2, #8]
 80053d2:	4413      	add	r3, r2
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	4798      	blx	r3
    }
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d010      	beq.n	8005414 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d107      	bne.n	800540a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800540a:	2300      	movs	r3, #0
 800540c:	2b01      	cmp	r3, #1
 800540e:	d001      	beq.n	8005414 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 8005414:	2300      	movs	r3, #0
    }
 8005416:	4618      	mov	r0, r3
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
    }
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005454:	b580      	push	{r7, lr}
 8005456:	b08c      	sub	sp, #48	; 0x30
 8005458:	af08      	add	r7, sp, #32
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	4611      	mov	r1, r2
 8005460:	461a      	mov	r2, r3
 8005462:	460b      	mov	r3, r1
 8005464:	80fb      	strh	r3, [r7, #6]
 8005466:	4613      	mov	r3, r2
 8005468:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	88b9      	ldrh	r1, [r7, #4]
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005472:	9306      	str	r3, [sp, #24]
 8005474:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005476:	9305      	str	r3, [sp, #20]
 8005478:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800547c:	9304      	str	r3, [sp, #16]
 800547e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005482:	9303      	str	r3, [sp, #12]
 8005484:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005488:	9302      	str	r3, [sp, #8]
 800548a:	7f3b      	ldrb	r3, [r7, #28]
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	7e3b      	ldrb	r3, [r7, #24]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	460b      	mov	r3, r1
 8005494:	68b9      	ldr	r1, [r7, #8]
 8005496:	f014 fc0d 	bl	8019cb4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800549a:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a4:	619a      	str	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054aa:	61da      	str	r2, [r3, #28]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054b0:	621a      	str	r2, [r3, #32]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	080282bc 	.word	0x080282bc

080054c8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	889b      	ldrh	r3, [r3, #4]
 80054dc:	0adb      	lsrs	r3, r3, #11
 80054de:	b29b      	uxth	r3, r3
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4413      	add	r3, r2
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4413      	add	r3, r2
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80054fa:	b480      	push	{r7}
 80054fc:	b089      	sub	sp, #36	; 0x24
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	460b      	mov	r3, r1
 8005504:	607a      	str	r2, [r7, #4]
 8005506:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	7b1b      	ldrb	r3, [r3, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8005516:	2300      	movs	r3, #0
 8005518:	e030      	b.n	800557c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	69da      	ldr	r2, [r3, #28]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	7b5b      	ldrb	r3, [r3, #13]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	b21b      	sxth	r3, r3
 800552a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800552e:	b219      	sxth	r1, r3
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	7adb      	ldrb	r3, [r3, #11]
 8005534:	b21b      	sxth	r3, r3
 8005536:	430b      	orrs	r3, r1
 8005538:	b21b      	sxth	r3, r3
 800553a:	b29b      	uxth	r3, r3
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	7b1b      	ldrb	r3, [r3, #12]
 8005546:	837b      	strh	r3, [r7, #26]
 8005548:	8b7b      	ldrh	r3, [r7, #26]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d015      	beq.n	800557a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	897a      	ldrh	r2, [r7, #10]
 8005554:	429a      	cmp	r2, r3
 8005556:	d103      	bne.n	8005560 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800555e:	e00d      	b.n	800557c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	897a      	ldrh	r2, [r7, #10]
 8005566:	429a      	cmp	r2, r3
 8005568:	d306      	bcc.n	8005578 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800556a:	8b7b      	ldrh	r3, [r7, #26]
 800556c:	3b01      	subs	r3, #1
 800556e:	837b      	strh	r3, [r7, #26]
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	3304      	adds	r3, #4
 8005574:	61fb      	str	r3, [r7, #28]
 8005576:	e7e7      	b.n	8005548 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8005578:	bf00      	nop
        }
    }
    return 0;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3724      	adds	r7, #36	; 0x24
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
        : color(col)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	601a      	str	r2, [r3, #0]
    }
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	460b      	mov	r3, r1
 80055b0:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	887a      	ldrh	r2, [r7, #2]
 80055b6:	801a      	strh	r2, [r3, #0]
    {
    }
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
          visible(true)
 80055d0:	4a14      	ldr	r2, [pc, #80]	; (8005624 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3304      	adds	r3, #4
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fb ff96 	bl	800150c <_ZN8touchgfx4RectC1Ev>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	330c      	adds	r3, #12
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fb ff91 	bl	800150c <_ZN8touchgfx4RectC1Ev>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	615a      	str	r2, [r3, #20]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	619a      	str	r2, [r3, #24]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	61da      	str	r2, [r3, #28]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	841a      	strh	r2, [r3, #32]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	845a      	strh	r2, [r3, #34]	; 0x22
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	0802a3e8 	.word	0x0802a3e8

08005628 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8005634:	4618      	mov	r0, r3
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
    {
 8005660:	4a06      	ldr	r2, [pc, #24]	; (800567c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3304      	adds	r3, #4
 800566a:	4618      	mov	r0, r3
 800566c:	f001 f8fe 	bl	800686c <_ZN8touchgfx9ContainerD1Ev>
    }
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	0802a4e0 	.word	0x0802a4e0

08005680 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
    }
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff ffe5 	bl	8005658 <_ZN8touchgfx6ScreenD1Ev>
 800568e:	213c      	movs	r1, #60	; 0x3c
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f020 fa42 	bl	8025b1a <_ZdlPvj>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
    {
    }
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
    {
    }
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
    {
    }
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
    {
    }
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
    {
    }
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3304      	adds	r3, #4
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	4618      	mov	r0, r3
 800571a:	f00e fb7b 	bl	8013e14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <_ZN8touchgfx6WidgetC1Ev>:
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff ff48 	bl	80055c8 <_ZN8touchgfx8DrawableC1Ev>
 8005738:	4a03      	ldr	r2, [pc, #12]	; (8005748 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	08028210 	.word	0x08028210

0800574c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4618      	mov	r0, r3
 8005758:	2326      	movs	r3, #38	; 0x26
 800575a:	461a      	mov	r2, r3
 800575c:	2100      	movs	r1, #0
 800575e:	f020 fa97 	bl	8025c90 <memset>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff ffdf 	bl	8005728 <_ZN8touchgfx6WidgetC1Ev>
 800576a:	4a09      	ldr	r2, [pc, #36]	; (8005790 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	22ff      	movs	r2, #255	; 0xff
 8005774:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3328      	adds	r3, #40	; 0x28
 800577c:	2100      	movs	r1, #0
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff ff02 	bl	8005588 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	08029cb4 	.word	0x08029cb4

08005794 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4618      	mov	r0, r3
 80057be:	2326      	movs	r3, #38	; 0x26
 80057c0:	461a      	mov	r2, r3
 80057c2:	2100      	movs	r1, #0
 80057c4:	f020 fa64 	bl	8025c90 <memset>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff ffac 	bl	8005728 <_ZN8touchgfx6WidgetC1Ev>
 80057d0:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	8812      	ldrh	r2, [r2, #0]
 80057dc:	84da      	strh	r2, [r3, #38]	; 0x26
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	22ff      	movs	r2, #255	; 0xff
 80057e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f011 fbed 	bl	8016fc8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	08029ec8 	.word	0x08029ec8

080057fc <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 8005804:	4a09      	ldr	r2, [pc, #36]	; (800582c <_ZN8touchgfx15AbstractPainterC1Ev+0x30>)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	809a      	strh	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	80da      	strh	r2, [r3, #6]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	22ff      	movs	r2, #255	; 0xff
 800581a:	721a      	strb	r2, [r3, #8]
    {
    }
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	08028554 	.word	0x08028554

08005830 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
    {
 8005838:	4a04      	ldr	r2, [pc, #16]	; (800584c <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	601a      	str	r2, [r3, #0]
    }
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4618      	mov	r0, r3
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	08028554 	.word	0x08028554

08005850 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
    }
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff ffe9 	bl	8005830 <_ZN8touchgfx15AbstractPainterD1Ev>
 800585e:	210c      	movs	r1, #12
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f020 f95a 	bl	8025b1a <_ZdlPvj>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     * @see setPainter
     */
    virtual AbstractPainter& getPainter() const;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	78fa      	ldrb	r2, [r7, #3]
 8005880:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff ffa0 	bl	80057fc <_ZN8touchgfx15AbstractPainterC1Ev>
 80058bc:	4a29      	ldr	r2, [pc, #164]	; (8005964 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	60da      	str	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	611a      	str	r2, [r3, #16]
 80058ce:	2301      	movs	r3, #1
 80058d0:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80058d2:	f7fe fa37 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 80058d6:	4603      	mov	r3, r0
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	3224      	adds	r2, #36	; 0x24
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	4790      	blx	r2
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	4293      	cmp	r3, r2
 80058ea:	bf0c      	ite	eq
 80058ec:	2301      	moveq	r3, #1
 80058ee:	2300      	movne	r3, #0
 80058f0:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80058f2:	f7fb fac5 	bl	8000e80 <_ZN8touchgfx3HAL11getInstanceEv>
 80058f6:	4603      	mov	r3, r0
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff fea1 	bl	8005640 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01b      	beq.n	8005946 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x9a>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800590e:	f7fb fab7 	bl	8000e80 <_ZN8touchgfx3HAL11getInstanceEv>
 8005912:	4603      	mov	r3, r0
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff fe93 	bl	8005640 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800591a:	4603      	mov	r3, r0
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	3224      	adds	r2, #36	; 0x24
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	4790      	blx	r2
 8005926:	4603      	mov	r3, r0
 8005928:	461a      	mov	r2, r3
 800592a:	7bfb      	ldrb	r3, [r7, #15]
 800592c:	4293      	cmp	r3, r2
 800592e:	bf0c      	ite	eq
 8005930:	2301      	moveq	r3, #1
 8005932:	2300      	movne	r3, #0
 8005934:	b2da      	uxtb	r2, r3
 8005936:	7bbb      	ldrb	r3, [r7, #14]
 8005938:	4313      	orrs	r3, r2
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	bf14      	ite	ne
 8005940:	2301      	movne	r3, #1
 8005942:	2300      	moveq	r3, #0
 8005944:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8005946:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8005948:	2b00      	cmp	r3, #0
 800594a:	d105      	bne.n	8005958 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>
 800594c:	4b06      	ldr	r3, [pc, #24]	; (8005968 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 800594e:	4a07      	ldr	r2, [pc, #28]	; (800596c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc0>)
 8005950:	2128      	movs	r1, #40	; 0x28
 8005952:	4807      	ldr	r0, [pc, #28]	; (8005970 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc4>)
 8005954:	f020 f910 	bl	8025b78 <__assert_func>
 8005958:	bf00      	nop
    }
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	0802940c 	.word	0x0802940c
 8005968:	0802764c 	.word	0x0802764c
 800596c:	080276ac 	.word	0x080276ac
 8005970:	080276e8 	.word	0x080276e8

08005974 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	4a05      	ldr	r2, [pc, #20]	; (8005994 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff ff53 	bl	8005830 <_ZN8touchgfx15AbstractPainterD1Ev>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	0802940c 	.word	0x0802940c

08005998 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ffe7 	bl	8005974 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80059a6:	2114      	movs	r1, #20
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f020 f8b6 	bl	8025b1a <_ZdlPvj>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff ff71 	bl	80058ac <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80059ca:	4a0a      	ldr	r2, [pc, #40]	; (80059f4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x3c>)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	751a      	strb	r2, [r3, #20]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	755a      	strb	r2, [r3, #21]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	759a      	strb	r2, [r3, #22]
    {
        setColor(color);
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f807 	bl	80059f8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    }
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	0802942c 	.word	0x0802942c

080059f8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 8005a06:	f107 0314 	add.w	r3, r7, #20
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fb f9aa 	bl	8000d64 <_ZNK8touchgfx9colortypecvmEv>
 8005a10:	4603      	mov	r3, r0
 8005a12:	0c1b      	lsrs	r3, r3, #16
 8005a14:	b2da      	uxtb	r2, r3
    {
        painterRed = Color::getRed(color);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	751a      	strb	r2, [r3, #20]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 8005a1e:	f107 0310 	add.w	r3, r7, #16
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fb f99e 	bl	8000d64 <_ZNK8touchgfx9colortypecvmEv>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	0a1b      	lsrs	r3, r3, #8
 8005a2c:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	755a      	strb	r2, [r3, #21]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 8005a36:	f107 030c 	add.w	r3, r7, #12
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fb f992 	bl	8000d64 <_ZNK8touchgfx9colortypecvmEv>
 8005a40:	4603      	mov	r3, r0
 8005a42:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	759a      	strb	r2, [r3, #22]
    }
 8005a48:	bf00      	nop
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005a5c:	4a06      	ldr	r2, [pc, #24]	; (8005a78 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	887a      	ldrh	r2, [r7, #2]
 8005a66:	809a      	strh	r2, [r3, #4]
    }
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	08028160 	.word	0x08028160

08005a7c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	4a05      	ldr	r2, [pc, #20]	; (8005ab8 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fe fa45 	bl	8003f38 <_ZN8touchgfx6WidgetD1Ev>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	08029a74 	.word	0x08029a74

08005abc <_ZN8touchgfx14AbstractButtonD0Ev>:
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff ffe7 	bl	8005a98 <_ZN8touchgfx14AbstractButtonD1Ev>
 8005aca:	2130      	movs	r1, #48	; 0x30
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f020 f824 	bl	8025b1a <_ZdlPvj>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	889a      	ldrh	r2, [r3, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	809a      	strh	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3334      	adds	r3, #52	; 0x34
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff ffe5 	bl	8005adc <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f820 	bl	8005b58 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8005b58:	b590      	push	{r4, r7, lr}
 8005b5a:	b08b      	sub	sp, #44	; 0x2c
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3334      	adds	r3, #52	; 0x34
 8005b64:	61fb      	str	r3, [r7, #28]
        return typedTextId != TYPED_TEXT_INVALID;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	889b      	ldrh	r3, [r3, #4]
 8005b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	bf14      	ite	ne
 8005b72:	2301      	movne	r3, #1
 8005b74:	2300      	moveq	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d072      	beq.n	8005c62 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10a>
        {
            const Font* f = typedText.getFont();
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3334      	adds	r3, #52	; 0x34
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	60fb      	str	r3, [r7, #12]

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005b86:	4b3b      	ldr	r3, [pc, #236]	; (8005c74 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d105      	bne.n	8005b9a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 8005b8e:	4b3a      	ldr	r3, [pc, #232]	; (8005c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8005b90:	4a3a      	ldr	r2, [pc, #232]	; (8005c7c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8005b92:	21ae      	movs	r1, #174	; 0xae
 8005b94:	483a      	ldr	r0, [pc, #232]	; (8005c80 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8005b96:	f01f ffef 	bl	8025b78 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	889a      	ldrh	r2, [r3, #4]
 8005b9e:	4b39      	ldr	r3, [pc, #228]	; (8005c84 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d305      	bcc.n	8005bb2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 8005ba6:	4b38      	ldr	r3, [pc, #224]	; (8005c88 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 8005ba8:	4a34      	ldr	r2, [pc, #208]	; (8005c7c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8005baa:	21af      	movs	r1, #175	; 0xaf
 8005bac:	4834      	ldr	r0, [pc, #208]	; (8005c80 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8005bae:	f01f ffe3 	bl	8025b78 <__assert_func>
    }
 8005bb2:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 8005bb4:	4b35      	ldr	r3, [pc, #212]	; (8005c8c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4b2e      	ldr	r3, [pc, #184]	; (8005c74 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8005bba:	6819      	ldr	r1, [r3, #0]
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	889b      	ldrh	r3, [r3, #4]
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	440b      	add	r3, r1
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3334      	adds	r3, #52	; 0x34
 8005bd2:	61bb      	str	r3, [r7, #24]
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8005bd8:	4b26      	ldr	r3, [pc, #152]	; (8005c74 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d105      	bne.n	8005bec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>
 8005be0:	4b25      	ldr	r3, [pc, #148]	; (8005c78 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8005be2:	4a26      	ldr	r2, [pc, #152]	; (8005c7c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8005be4:	21ae      	movs	r1, #174	; 0xae
 8005be6:	4826      	ldr	r0, [pc, #152]	; (8005c80 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8005be8:	f01f ffc6 	bl	8025b78 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	889a      	ldrh	r2, [r3, #4]
 8005bf0:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d305      	bcc.n	8005c04 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xac>
 8005bf8:	4b23      	ldr	r3, [pc, #140]	; (8005c88 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 8005bfa:	4a20      	ldr	r2, [pc, #128]	; (8005c7c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8005bfc:	21af      	movs	r1, #175	; 0xaf
 8005bfe:	4820      	ldr	r0, [pc, #128]	; (8005c80 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8005c00:	f01f ffba 	bl	8025b78 <__assert_func>
    }
 8005c04:	bf00      	nop
        return texts->getText(typedTextId);
 8005c06:	4b22      	ldr	r3, [pc, #136]	; (8005c90 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	889b      	ldrh	r3, [r3, #4]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f001 ff5d 	bl	8007ad0 <_ZNK8touchgfx5Texts7getTextEt>
 8005c16:	4603      	mov	r3, r0
 8005c18:	bf00      	nop
 8005c1a:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3328      	adds	r3, #40	; 0x28
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6a39      	ldr	r1, [r7, #32]
 8005c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c28:	4798      	blx	r3
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	b2dc      	uxtb	r4, r3
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3340      	adds	r3, #64	; 0x40
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6a39      	ldr	r1, [r7, #32]
 8005c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c3a:	4798      	blx	r3
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	fb14 f303 	smulbb	r3, r4, r3
 8005c44:	b2dc      	uxtb	r4, r3
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3324      	adds	r3, #36	; 0x24
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6a39      	ldr	r1, [r7, #32]
 8005c50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c52:	4798      	blx	r3
 8005c54:	4603      	mov	r3, r0
 8005c56:	4423      	add	r3, r4
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8005c60:	e003      	b.n	8005c6a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x112>
            textHeightIncludingSpacing = 0;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 8005c6a:	bf00      	nop
 8005c6c:	372c      	adds	r7, #44	; 0x2c
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd90      	pop	{r4, r7, pc}
 8005c72:	bf00      	nop
 8005c74:	2400c914 	.word	0x2400c914
 8005c78:	0802774c 	.word	0x0802774c
 8005c7c:	08027790 	.word	0x08027790
 8005c80:	080277c0 	.word	0x080277c0
 8005c84:	2400c918 	.word	0x2400c918
 8005c88:	08027808 	.word	0x08027808
 8005c8c:	2400c91c 	.word	0x2400c91c
 8005c90:	2400c920 	.word	0x2400c920

08005c94 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	4a05      	ldr	r2, [pc, #20]	; (8005cb4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff fcd7 	bl	8005658 <_ZN8touchgfx6ScreenD1Ev>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	08028488 	.word	0x08028488

08005cb8 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff ffe7 	bl	8005c94 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8005cc6:	2140      	movs	r1, #64	; 0x40
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f01f ff26 	bl	8025b1a <_ZdlPvj>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	4a19      	ldr	r2, [pc, #100]	; (8005d48 <_ZN15Screen1ViewBaseD1Ev+0x70>)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fecb 	bl	8006a88 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fff9 	bl	8006cf0 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 ffaf 	bl	8006c68 <_ZN8touchgfx13PainterRGB888D1Ev>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 ff87 	bl	8006c24 <_ZN8touchgfx16GraphElementLineD1Ev>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3398      	adds	r3, #152	; 0x98
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fed6 	bl	8006acc <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	336c      	adds	r3, #108	; 0x6c
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 ff17 	bl	8006b58 <_ZN8touchgfx5ImageD1Ev>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	3340      	adds	r3, #64	; 0x40
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fef0 	bl	8006b14 <_ZN8touchgfx3BoxD1Ev>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff ffac 	bl	8005c94 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	08028314 	.word	0x08028314

08005d4c <_ZN15Screen1ViewBaseD0Ev>:
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff ffbf 	bl	8005cd8 <_ZN15Screen1ViewBaseD1Ev>
 8005d5a:	f242 0138 	movw	r1, #8248	; 0x2038
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f01f fedb 	bl	8025b1a <_ZdlPvj>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005d76:	f012 ff71 	bl	8018c5c <_ZN8touchgfx11Application11getInstanceEv>
 8005d7a:	4603      	mov	r3, r0
    }
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <_ZN15Screen1ViewBaseC1Ev>:
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen1ViewBase::Screen1ViewBase() :
 8005d84:	b590      	push	{r4, r7, lr}
 8005d86:	b095      	sub	sp, #84	; 0x54
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fd56 	bl	8006840 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8005d94:	4add      	ldr	r2, [pc, #884]	; (800610c <_ZN15Screen1ViewBaseC1Ev+0x388>)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3340      	adds	r3, #64	; 0x40
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fcd4 	bl	800574c <_ZN8touchgfx3BoxC1Ev>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005daa:	f107 0308 	add.w	r3, r7, #8
 8005dae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fbf7 	bl	80055a6 <_ZN8touchgfx6BitmapC1Et>
 8005db8:	f107 0308 	add.w	r3, r7, #8
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f7ff fcf6 	bl	80057b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3398      	adds	r3, #152	; 0x98
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fdf7 	bl	80069bc <_ZN8touchgfx17GraphWrapAndClearILs100EEC1Ev>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f010 fb23 	bl	8016420 <_ZN8touchgfx16GraphElementLineC1Ev>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f503 746a 	add.w	r4, r3, #936	; 0x3a8
 8005de0:	f107 030c 	add.w	r3, r7, #12
 8005de4:	2100      	movs	r1, #0
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff fbce 	bl	8005588 <_ZN8touchgfx9colortypeC1Em>
 8005dec:	68f9      	ldr	r1, [r7, #12]
 8005dee:	4620      	mov	r0, r4
 8005df0:	f7ff fde2 	bl	80059b8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f011 fa1a 	bl	8017234 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8005e06:	4bc2      	ldr	r3, [pc, #776]	; (8006110 <_ZN15Screen1ViewBaseC1Ev+0x38c>)
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	f107 0310 	add.w	r3, r7, #16
 8005e12:	cb0c      	ldmia	r3, {r2, r3}
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	f000 fdf7 	bl	8006a08 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005e20:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8005e24:	4618      	mov	r0, r3
 8005e26:	f011 fa33 	bl	8017290 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 480, 272);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005e30:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	f7fd fe3e 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005e54:	2300      	movs	r3, #0
 8005e56:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005e5a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005e5e:	041b      	lsls	r3, r3, #16
 8005e60:	461a      	mov	r2, r3
 8005e62:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005e74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005e78:	4611      	mov	r1, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fb84 	bl	8005588 <_ZN8touchgfx9colortypeC1Em>
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	4619      	mov	r1, r3
 8005e84:	4620      	mov	r0, r4
 8005e86:	f7ff fc85 	bl	8005794 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, 0);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	336c      	adds	r3, #108	; 0x6c
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2100      	movs	r1, #0
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fd fe5f 	bl	8003b56 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_480X272PX_ID));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005e9e:	f107 0318 	add.w	r3, r7, #24
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff fb7e 	bl	80055a6 <_ZN8touchgfx6BitmapC1Et>
 8005eaa:	f107 0318 	add.w	r3, r7, #24
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f011 f889 	bl	8016fc8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    dynamicGraph1.setScale(1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3398      	adds	r3, #152	; 0x98
 8005eba:	2101      	movs	r1, #1
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f010 f8f1 	bl	80160a4 <_ZN8touchgfx22AbstractDataGraphWithY8setScaleEi>
    dynamicGraph1.setPosition(80, 16, 320, 240);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8005ec8:	23f0      	movs	r3, #240	; 0xf0
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	2150      	movs	r1, #80	; 0x50
 8005ed4:	f7fd fdf3 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	f010 f814 	bl	8015f14 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2100      	movs	r1, #0
 8005efc:	f00f fdfb 	bl	8015af6 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3398      	adds	r3, #152	; 0x98
 8005f04:	2264      	movs	r2, #100	; 0x64
 8005f06:	2100      	movs	r1, #0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f00f fc13 	bl	8015734 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEii>

    dynamicGraph1Line1.setScale(1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8005f14:	2101      	movs	r1, #1
 8005f16:	4618      	mov	r0, r3
 8005f18:	f010 f9c4 	bl	80162a4 <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    dynamicGraph1Line1Painter.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f503 746a 	add.w	r4, r3, #936	; 0x3a8
 8005f22:	2314      	movs	r3, #20
 8005f24:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8005f28:	2397      	movs	r3, #151	; 0x97
 8005f2a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8005f2e:	23c5      	movs	r3, #197	; 0xc5
 8005f30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005f34:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8005f38:	041b      	lsls	r3, r3, #16
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	431a      	orrs	r2, r3
 8005f44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005f4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005f52:	4611      	mov	r1, r2
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff fb17 	bl	8005588 <_ZN8touchgfx9colortypeC1Em>
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f7ff fd4a 	bl	80059f8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    dynamicGraph1Line1.setPainter(dynamicGraph1Line1Painter);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f503 725c 	add.w	r2, r3, #880	; 0x370
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8005f70:	4619      	mov	r1, r3
 8005f72:	4610      	mov	r0, r2
 8005f74:	f00f fa88 	bl	8015488 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    dynamicGraph1Line1.setLineWidth(2);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8005f7e:	2102      	movs	r1, #2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f010 fa5b 	bl	801643c <_ZN8touchgfx16GraphElementLine12setLineWidthEh>
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8005f92:	4619      	mov	r1, r3
 8005f94:	4610      	mov	r0, r2
 8005f96:	f00f fe65 	bl	8015c64 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1.addDataPoint(28.74452346240019f);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3398      	adds	r3, #152	; 0x98
 8005f9e:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8006114 <_ZN15Screen1ViewBaseC1Ev+0x390>
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f010 f8d8 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(45.11768501489635f);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3398      	adds	r3, #152	; 0x98
 8005fac:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8006118 <_ZN15Screen1ViewBaseC1Ev+0x394>
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f010 f8d1 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(62.39972809352306f);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3398      	adds	r3, #152	; 0x98
 8005fba:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800611c <_ZN15Screen1ViewBaseC1Ev+0x398>
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f010 f8ca 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(77.3815456748776f);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3398      	adds	r3, #152	; 0x98
 8005fc8:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8006120 <_ZN15Screen1ViewBaseC1Ev+0x39c>
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f010 f8c3 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(87.38787770112283f);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3398      	adds	r3, #152	; 0x98
 8005fd6:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8006124 <_ZN15Screen1ViewBaseC1Ev+0x3a0>
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f010 f8bc 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(90.89272751251812f);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3398      	adds	r3, #152	; 0x98
 8005fe4:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8006128 <_ZN15Screen1ViewBaseC1Ev+0x3a4>
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f010 f8b5 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(87.85614705021672f);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3398      	adds	r3, #152	; 0x98
 8005ff2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800612c <_ZN15Screen1ViewBaseC1Ev+0x3a8>
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f010 f8ae 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(79.70139838643279f);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3398      	adds	r3, #152	; 0x98
 8006000:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8006130 <_ZN15Screen1ViewBaseC1Ev+0x3ac>
 8006004:	4618      	mov	r0, r3
 8006006:	f010 f8a7 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(68.93938915119692f);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3398      	adds	r3, #152	; 0x98
 800600e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8006134 <_ZN15Screen1ViewBaseC1Ev+0x3b0>
 8006012:	4618      	mov	r0, r3
 8006014:	f010 f8a0 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(58.53340931159046f);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3398      	adds	r3, #152	; 0x98
 800601c:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8006138 <_ZN15Screen1ViewBaseC1Ev+0x3b4>
 8006020:	4618      	mov	r0, r3
 8006022:	f010 f899 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.16052323753144f);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3398      	adds	r3, #152	; 0x98
 800602a:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800613c <_ZN15Screen1ViewBaseC1Ev+0x3b8>
 800602e:	4618      	mov	r0, r3
 8006030:	f010 f892 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(48.55097532700286f);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3398      	adds	r3, #152	; 0x98
 8006038:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8006140 <_ZN15Screen1ViewBaseC1Ev+0x3bc>
 800603c:	4618      	mov	r0, r3
 800603e:	f010 f88b 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.06755181997222f);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3398      	adds	r3, #152	; 0x98
 8006046:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8006144 <_ZN15Screen1ViewBaseC1Ev+0x3c0>
 800604a:	4618      	mov	r0, r3
 800604c:	f010 f884 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(57.627766154533184f);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3398      	adds	r3, #152	; 0x98
 8006054:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8006148 <_ZN15Screen1ViewBaseC1Ev+0x3c4>
 8006058:	4618      	mov	r0, r3
 800605a:	f010 f87d 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(65.98748095966721f);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3398      	adds	r3, #152	; 0x98
 8006062:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800614c <_ZN15Screen1ViewBaseC1Ev+0x3c8>
 8006066:	4618      	mov	r0, r3
 8006068:	f010 f876 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(73.31578527010987f);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3398      	adds	r3, #152	; 0x98
 8006070:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8006150 <_ZN15Screen1ViewBaseC1Ev+0x3cc>
 8006074:	4618      	mov	r0, r3
 8006076:	f010 f86f 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(76.91936104223073f);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3398      	adds	r3, #152	; 0x98
 800607e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8006154 <_ZN15Screen1ViewBaseC1Ev+0x3d0>
 8006082:	4618      	mov	r0, r3
 8006084:	f010 f868 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(74.93774716298641f);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3398      	adds	r3, #152	; 0x98
 800608c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006158 <_ZN15Screen1ViewBaseC1Ev+0x3d4>
 8006090:	4618      	mov	r0, r3
 8006092:	f010 f861 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(66.83784097854614f);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3398      	adds	r3, #152	; 0x98
 800609a:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800615c <_ZN15Screen1ViewBaseC1Ev+0x3d8>
 800609e:	4618      	mov	r0, r3
 80060a0:	f010 f85a 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(53.585015970898404f);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3398      	adds	r3, #152	; 0x98
 80060a8:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8006160 <_ZN15Screen1ViewBaseC1Ev+0x3dc>
 80060ac:	4618      	mov	r0, r3
 80060ae:	f010 f853 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(37.44734008953912f);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3398      	adds	r3, #152	; 0x98
 80060b6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8006164 <_ZN15Screen1ViewBaseC1Ev+0x3e0>
 80060ba:	4618      	mov	r0, r3
 80060bc:	f010 f84c 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(21.479209810086797f);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3398      	adds	r3, #152	; 0x98
 80060c4:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8006168 <_ZN15Screen1ViewBaseC1Ev+0x3e4>
 80060c8:	4618      	mov	r0, r3
 80060ca:	f010 f845 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(8.809276521775686f);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3398      	adds	r3, #152	; 0x98
 80060d2:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800616c <_ZN15Screen1ViewBaseC1Ev+0x3e8>
 80060d6:	4618      	mov	r0, r3
 80060d8:	f010 f83e 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(1.905574472123881f);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3398      	adds	r3, #152	; 0x98
 80060e0:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8006170 <_ZN15Screen1ViewBaseC1Ev+0x3ec>
 80060e4:	4618      	mov	r0, r3
 80060e6:	f010 f837 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(1.9965361213089423f);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3398      	adds	r3, #152	; 0x98
 80060ee:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8006174 <_ZN15Screen1ViewBaseC1Ev+0x3f0>
 80060f2:	4618      	mov	r0, r3
 80060f4:	f010 f830 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(8.788640908751642f);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3398      	adds	r3, #152	; 0x98
 80060fc:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8006178 <_ZN15Screen1ViewBaseC1Ev+0x3f4>
 8006100:	4618      	mov	r0, r3
 8006102:	f010 f829 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(20.549093174231515f);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	e0b6      	b.n	8006278 <_ZN15Screen1ViewBaseC1Ev+0x4f4>
 800610a:	bf00      	nop
 800610c:	08028314 	.word	0x08028314
 8006110:	08006815 	.word	0x08006815
 8006114:	41e5f4c9 	.word	0x41e5f4c9
 8006118:	42347882 	.word	0x42347882
 800611c:	42799952 	.word	0x42799952
 8006120:	429ac35a 	.word	0x429ac35a
 8006124:	42aec698 	.word	0x42aec698
 8006128:	42b5c914 	.word	0x42b5c914
 800612c:	42afb659 	.word	0x42afb659
 8006130:	429f671e 	.word	0x429f671e
 8006134:	4289e0f8 	.word	0x4289e0f8
 8006138:	426a2236 	.word	0x426a2236
 800613c:	424ca460 	.word	0x424ca460
 8006140:	42423433 	.word	0x42423433
 8006144:	424c452c 	.word	0x424c452c
 8006148:	426682d5 	.word	0x426682d5
 800614c:	4283f997 	.word	0x4283f997
 8006150:	4292a1af 	.word	0x4292a1af
 8006154:	4299d6b6 	.word	0x4299d6b6
 8006158:	4295e020 	.word	0x4295e020
 800615c:	4285acf9 	.word	0x4285acf9
 8006160:	4256570e 	.word	0x4256570e
 8006164:	4215ca14 	.word	0x4215ca14
 8006168:	41abd56c 	.word	0x41abd56c
 800616c:	410cf2cc 	.word	0x410cf2cc
 8006170:	3ff3e9dd 	.word	0x3ff3e9dd
 8006174:	3fff8e7f 	.word	0x3fff8e7f
 8006178:	410c9e46 	.word	0x410c9e46
 800617c:	41a4648b 	.word	0x41a4648b
 8006180:	420a21a5 	.word	0x420a21a5
 8006184:	423e98f6 	.word	0x423e98f6
 8006188:	4264d2ec 	.word	0x4264d2ec
 800618c:	42762f8e 	.word	0x42762f8e
 8006190:	4271b790 	.word	0x4271b790
 8006194:	425c3752 	.word	0x425c3752
 8006198:	423eec55 	.word	0x423eec55
 800619c:	42251981 	.word	0x42251981
 80061a0:	42191b8d 	.word	0x42191b8d
 80061a4:	4221b650 	.word	0x4221b650
 80061a8:	424045a5 	.word	0x424045a5
 80061ac:	427044e4 	.word	0x427044e4
 80061b0:	429425e9 	.word	0x429425e9
 80061b4:	42ae2229 	.word	0x42ae2229
 80061b8:	42c027a7 	.word	0x42c027a7
 80061bc:	42c5d20a 	.word	0x42c5d20a
 80061c0:	42bd5b3d 	.word	0x42bd5b3d
 80061c4:	42a80e90 	.word	0x42a80e90
 80061c8:	4289ff88 	.word	0x4289ff88
 80061cc:	42522c07 	.word	0x42522c07
 80061d0:	421755cc 	.word	0x421755cc
 80061d4:	41dc2eeb 	.word	0x41dc2eeb
 80061d8:	41b906e0 	.word	0x41b906e0
 80061dc:	41c5a000 	.word	0x41c5a000
 80061e0:	41f6e778 	.word	0x41f6e778
 80061e4:	421ca95a 	.word	0x421ca95a
 80061e8:	423afa3b 	.word	0x423afa3b
 80061ec:	424c2ef1 	.word	0x424c2ef1
 80061f0:	4249ec17 	.word	0x4249ec17
 80061f4:	423356ab 	.word	0x423356ab
 80061f8:	420d5809 	.word	0x420d5809
 80061fc:	41c2e0c9 	.word	0x41c2e0c9
 8006200:	416d8514 	.word	0x416d8514
 8006204:	4119099b 	.word	0x4119099b
 8006208:	4126e176 	.word	0x4126e176
 800620c:	418ff89e 	.word	0x418ff89e
 8006210:	41fa6287 	.word	0x41fa6287
 8006214:	42403216 	.word	0x42403216
 8006218:	42825384 	.word	0x42825384
 800621c:	429ef0f4 	.word	0x429ef0f4
 8006220:	42b0e79c 	.word	0x42b0e79c
 8006224:	42b5a2c6 	.word	0x42b5a2c6
 8006228:	42ad9200 	.word	0x42ad9200
 800622c:	429bfd84 	.word	0x429bfd84
 8006230:	42862b2a 	.word	0x42862b2a
 8006234:	4264140d 	.word	0x4264140d
 8006238:	424970f3 	.word	0x424970f3
 800623c:	424282ca 	.word	0x424282ca
 8006240:	424fbf71 	.word	0x424fbf71
 8006244:	426beca1 	.word	0x426beca1
 8006248:	4286bdee 	.word	0x4286bdee
 800624c:	42947e46 	.word	0x42947e46
 8006250:	429a04f6 	.word	0x429a04f6
 8006254:	4293fdec 	.word	0x4293fdec
 8006258:	4281d82a 	.word	0x4281d82a
 800625c:	424bfc48 	.word	0x424bfc48
 8006260:	420aa5fa 	.word	0x420aa5fa
 8006264:	41984fcb 	.word	0x41984fcb
 8006268:	40e633fd 	.word	0x40e633fd
 800626c:	3fb5c8aa 	.word	0x3fb5c8aa
 8006270:	402cd83f 	.word	0x402cd83f
 8006274:	4127be3b 	.word	0x4127be3b
 8006278:	3398      	adds	r3, #152	; 0x98
 800627a:	ed1f 0a40 	vldr	s0, [pc, #-256]	; 800617c <_ZN15Screen1ViewBaseC1Ev+0x3f8>
 800627e:	4618      	mov	r0, r3
 8006280:	f00f ff6a 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(34.53285586828418f);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3398      	adds	r3, #152	; 0x98
 8006288:	ed1f 0a43 	vldr	s0, [pc, #-268]	; 8006180 <_ZN15Screen1ViewBaseC1Ev+0x3fc>
 800628c:	4618      	mov	r0, r3
 800628e:	f00f ff63 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(47.64937581214845f);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3398      	adds	r3, #152	; 0x98
 8006296:	ed1f 0a45 	vldr	s0, [pc, #-276]	; 8006184 <_ZN15Screen1ViewBaseC1Ev+0x400>
 800629a:	4618      	mov	r0, r3
 800629c:	f00f ff5c 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(57.20597694167037f);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3398      	adds	r3, #152	; 0x98
 80062a4:	ed1f 0a48 	vldr	s0, [pc, #-288]	; 8006188 <_ZN15Screen1ViewBaseC1Ev+0x404>
 80062a8:	4618      	mov	r0, r3
 80062aa:	f00f ff55 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(61.54644184753728f);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3398      	adds	r3, #152	; 0x98
 80062b2:	ed1f 0a4a 	vldr	s0, [pc, #-296]	; 800618c <_ZN15Screen1ViewBaseC1Ev+0x408>
 80062b6:	4618      	mov	r0, r3
 80062b8:	f00f ff4e 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(60.42926086265153f);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3398      	adds	r3, #152	; 0x98
 80062c0:	ed1f 0a4d 	vldr	s0, [pc, #-308]	; 8006190 <_ZN15Screen1ViewBaseC1Ev+0x40c>
 80062c4:	4618      	mov	r0, r3
 80062c6:	f00f ff47 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(55.05402225620439f);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3398      	adds	r3, #152	; 0x98
 80062ce:	ed1f 0a4f 	vldr	s0, [pc, #-316]	; 8006194 <_ZN15Screen1ViewBaseC1Ev+0x410>
 80062d2:	4618      	mov	r0, r3
 80062d4:	f00f ff40 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(47.7307930399861f);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3398      	adds	r3, #152	; 0x98
 80062dc:	ed1f 0a52 	vldr	s0, [pc, #-328]	; 8006198 <_ZN15Screen1ViewBaseC1Ev+0x414>
 80062e0:	4618      	mov	r0, r3
 80062e2:	f00f ff39 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(41.27490523524253f);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3398      	adds	r3, #152	; 0x98
 80062ea:	ed1f 0a54 	vldr	s0, [pc, #-336]	; 800619c <_ZN15Screen1ViewBaseC1Ev+0x418>
 80062ee:	4618      	mov	r0, r3
 80062f0:	f00f ff32 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(38.276906198489485f);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3398      	adds	r3, #152	; 0x98
 80062f8:	ed1f 0a57 	vldr	s0, [pc, #-348]	; 80061a0 <_ZN15Screen1ViewBaseC1Ev+0x41c>
 80062fc:	4618      	mov	r0, r3
 80062fe:	f00f ff2b 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(40.42804120026084f);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3398      	adds	r3, #152	; 0x98
 8006306:	ed1f 0a59 	vldr	s0, [pc, #-356]	; 80061a4 <_ZN15Screen1ViewBaseC1Ev+0x420>
 800630a:	4618      	mov	r0, r3
 800630c:	f00f ff24 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(48.068013925356595f);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3398      	adds	r3, #152	; 0x98
 8006314:	ed1f 0a5c 	vldr	s0, [pc, #-368]	; 80061a8 <_ZN15Screen1ViewBaseC1Ev+0x424>
 8006318:	4618      	mov	r0, r3
 800631a:	f00f ff1d 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(60.06727678820226f);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3398      	adds	r3, #152	; 0x98
 8006322:	ed1f 0a5e 	vldr	s0, [pc, #-376]	; 80061ac <_ZN15Screen1ViewBaseC1Ev+0x428>
 8006326:	4618      	mov	r0, r3
 8006328:	f00f ff16 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(74.07404251396511f);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3398      	adds	r3, #152	; 0x98
 8006330:	ed1f 0a61 	vldr	s0, [pc, #-388]	; 80061b0 <_ZN15Screen1ViewBaseC1Ev+0x42c>
 8006334:	4618      	mov	r0, r3
 8006336:	f00f ff0f 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(87.06671964879548f);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3398      	adds	r3, #152	; 0x98
 800633e:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 80061b4 <_ZN15Screen1ViewBaseC1Ev+0x430>
 8006342:	4618      	mov	r0, r3
 8006344:	f00f ff08 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(96.07744791785164f);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3398      	adds	r3, #152	; 0x98
 800634c:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 80061b8 <_ZN15Screen1ViewBaseC1Ev+0x434>
 8006350:	4618      	mov	r0, r3
 8006352:	f00f ff01 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(98.91023388235061f);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3398      	adds	r3, #152	; 0x98
 800635a:	ed1f 0a68 	vldr	s0, [pc, #-416]	; 80061bc <_ZN15Screen1ViewBaseC1Ev+0x438>
 800635e:	4618      	mov	r0, r3
 8006360:	f00f fefa 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(94.67820254228927f);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3398      	adds	r3, #152	; 0x98
 8006368:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 80061c0 <_ZN15Screen1ViewBaseC1Ev+0x43c>
 800636c:	4618      	mov	r0, r3
 800636e:	f00f fef3 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(84.02844182151661f);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3398      	adds	r3, #152	; 0x98
 8006376:	ed1f 0a6d 	vldr	s0, [pc, #-436]	; 80061c4 <_ZN15Screen1ViewBaseC1Ev+0x440>
 800637a:	4618      	mov	r0, r3
 800637c:	f00f feec 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(68.99908379809915f);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3398      	adds	r3, #152	; 0x98
 8006384:	ed1f 0a70 	vldr	s0, [pc, #-448]	; 80061c8 <_ZN15Screen1ViewBaseC1Ev+0x444>
 8006388:	4618      	mov	r0, r3
 800638a:	f00f fee5 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(52.54299408032624f);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3398      	adds	r3, #152	; 0x98
 8006392:	ed1f 0a72 	vldr	s0, [pc, #-456]	; 80061cc <_ZN15Screen1ViewBaseC1Ev+0x448>
 8006396:	4618      	mov	r0, r3
 8006398:	f00f fede 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(37.833785805414934f);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3398      	adds	r3, #152	; 0x98
 80063a0:	ed1f 0a75 	vldr	s0, [pc, #-468]	; 80061d0 <_ZN15Screen1ViewBaseC1Ev+0x44c>
 80063a4:	4618      	mov	r0, r3
 80063a6:	f00f fed7 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(27.522910077176782f);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3398      	adds	r3, #152	; 0x98
 80063ae:	ed1f 0a77 	vldr	s0, [pc, #-476]	; 80061d4 <_ZN15Screen1ViewBaseC1Ev+0x450>
 80063b2:	4618      	mov	r0, r3
 80063b4:	f00f fed0 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(23.128357063431903f);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3398      	adds	r3, #152	; 0x98
 80063bc:	ed1f 0a7a 	vldr	s0, [pc, #-488]	; 80061d8 <_ZN15Screen1ViewBaseC1Ev+0x454>
 80063c0:	4618      	mov	r0, r3
 80063c2:	f00f fec9 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(24.703124271213053f);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3398      	adds	r3, #152	; 0x98
 80063ca:	ed1f 0a7c 	vldr	s0, [pc, #-496]	; 80061dc <_ZN15Screen1ViewBaseC1Ev+0x458>
 80063ce:	4618      	mov	r0, r3
 80063d0:	f00f fec2 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(30.863021048375394f);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3398      	adds	r3, #152	; 0x98
 80063d8:	ed1f 0a7f 	vldr	s0, [pc, #-508]	; 80061e0 <_ZN15Screen1ViewBaseC1Ev+0x45c>
 80063dc:	4618      	mov	r0, r3
 80063de:	f00f febb 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(39.16538106044089f);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3398      	adds	r3, #152	; 0x98
 80063e6:	ed1f 0a81 	vldr	s0, [pc, #-516]	; 80061e4 <_ZN15Screen1ViewBaseC1Ev+0x460>
 80063ea:	4618      	mov	r0, r3
 80063ec:	f00f feb4 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(46.74436674419273f);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3398      	adds	r3, #152	; 0x98
 80063f4:	ed1f 0a84 	vldr	s0, [pc, #-528]	; 80061e8 <_ZN15Screen1ViewBaseC1Ev+0x464>
 80063f8:	4618      	mov	r0, r3
 80063fa:	f00f fead 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.045840938661115f);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3398      	adds	r3, #152	; 0x98
 8006402:	ed1f 0a86 	vldr	s0, [pc, #-536]	; 80061ec <_ZN15Screen1ViewBaseC1Ev+0x468>
 8006406:	4618      	mov	r0, r3
 8006408:	f00f fea6 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(50.48055730569306f);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3398      	adds	r3, #152	; 0x98
 8006410:	ed1f 0a89 	vldr	s0, [pc, #-548]	; 80061f0 <_ZN15Screen1ViewBaseC1Ev+0x46c>
 8006414:	4618      	mov	r0, r3
 8006416:	f00f fe9f 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(44.83463527638875f);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3398      	adds	r3, #152	; 0x98
 800641e:	ed1f 0a8b 	vldr	s0, [pc, #-556]	; 80061f4 <_ZN15Screen1ViewBaseC1Ev+0x470>
 8006422:	4618      	mov	r0, r3
 8006424:	f00f fe98 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(35.33597053777403f);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3398      	adds	r3, #152	; 0x98
 800642c:	ed1f 0a8e 	vldr	s0, [pc, #-568]	; 80061f8 <_ZN15Screen1ViewBaseC1Ev+0x474>
 8006430:	4618      	mov	r0, r3
 8006432:	f00f fe91 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(24.359759158970007f);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3398      	adds	r3, #152	; 0x98
 800643a:	ed1f 0a90 	vldr	s0, [pc, #-576]	; 80061fc <_ZN15Screen1ViewBaseC1Ev+0x478>
 800643e:	4618      	mov	r0, r3
 8006440:	f00f fe8a 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(14.844989854966554f);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3398      	adds	r3, #152	; 0x98
 8006448:	ed1f 0a93 	vldr	s0, [pc, #-588]	; 8006200 <_ZN15Screen1ViewBaseC1Ev+0x47c>
 800644c:	4618      	mov	r0, r3
 800644e:	f00f fe83 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(9.564845126012845f);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3398      	adds	r3, #152	; 0x98
 8006456:	ed1f 0a95 	vldr	s0, [pc, #-596]	; 8006204 <_ZN15Screen1ViewBaseC1Ev+0x480>
 800645a:	4618      	mov	r0, r3
 800645c:	f00f fe7c 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(10.430044022752096f);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3398      	adds	r3, #152	; 0x98
 8006464:	ed1f 0a98 	vldr	s0, [pc, #-608]	; 8006208 <_ZN15Screen1ViewBaseC1Ev+0x484>
 8006468:	4618      	mov	r0, r3
 800646a:	f00f fe75 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(17.99639431510043f);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3398      	adds	r3, #152	; 0x98
 8006472:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800620c <_ZN15Screen1ViewBaseC1Ev+0x488>
 8006476:	4618      	mov	r0, r3
 8006478:	f00f fe6e 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(31.29810882351785f);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3398      	adds	r3, #152	; 0x98
 8006480:	ed1f 0a9d 	vldr	s0, [pc, #-628]	; 8006210 <_ZN15Screen1ViewBaseC1Ev+0x48c>
 8006484:	4618      	mov	r0, r3
 8006486:	f00f fe67 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(48.048912909678016f);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3398      	adds	r3, #152	; 0x98
 800648e:	ed1f 0a9f 	vldr	s0, [pc, #-636]	; 8006214 <_ZN15Screen1ViewBaseC1Ev+0x490>
 8006492:	4618      	mov	r0, r3
 8006494:	f00f fe60 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(65.1631151380571f);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3398      	adds	r3, #152	; 0x98
 800649c:	ed1f 0aa2 	vldr	s0, [pc, #-648]	; 8006218 <_ZN15Screen1ViewBaseC1Ev+0x494>
 80064a0:	4618      	mov	r0, r3
 80064a2:	f00f fe59 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(79.47060917188513f);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3398      	adds	r3, #152	; 0x98
 80064aa:	ed1f 0aa4 	vldr	s0, [pc, #-656]	; 800621c <_ZN15Screen1ViewBaseC1Ev+0x498>
 80064ae:	4618      	mov	r0, r3
 80064b0:	f00f fe52 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(88.45235826335303f);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3398      	adds	r3, #152	; 0x98
 80064b8:	ed1f 0aa7 	vldr	s0, [pc, #-668]	; 8006220 <_ZN15Screen1ViewBaseC1Ev+0x49c>
 80064bc:	4618      	mov	r0, r3
 80064be:	f00f fe4b 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(90.81791824103075f);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3398      	adds	r3, #152	; 0x98
 80064c6:	ed1f 0aa9 	vldr	s0, [pc, #-676]	; 8006224 <_ZN15Screen1ViewBaseC1Ev+0x4a0>
 80064ca:	4618      	mov	r0, r3
 80064cc:	f00f fe44 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(86.78515981053084f);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3398      	adds	r3, #152	; 0x98
 80064d4:	ed1f 0aac 	vldr	s0, [pc, #-688]	; 8006228 <_ZN15Screen1ViewBaseC1Ev+0x4a4>
 80064d8:	4618      	mov	r0, r3
 80064da:	f00f fe3d 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(77.995150502737f);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3398      	adds	r3, #152	; 0x98
 80064e2:	ed1f 0aae 	vldr	s0, [pc, #-696]	; 800622c <_ZN15Screen1ViewBaseC1Ev+0x4a8>
 80064e6:	4618      	mov	r0, r3
 80064e8:	f00f fe36 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(67.0843034487154f);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3398      	adds	r3, #152	; 0x98
 80064f0:	ed1f 0ab1 	vldr	s0, [pc, #-708]	; 8006230 <_ZN15Screen1ViewBaseC1Ev+0x4ac>
 80064f4:	4618      	mov	r0, r3
 80064f6:	f00f fe2f 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(57.019582527015615f);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3398      	adds	r3, #152	; 0x98
 80064fe:	ed1f 0ab3 	vldr	s0, [pc, #-716]	; 8006234 <_ZN15Screen1ViewBaseC1Ev+0x4b0>
 8006502:	4618      	mov	r0, r3
 8006504:	f00f fe28 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(50.360301888008316f);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3398      	adds	r3, #152	; 0x98
 800650c:	ed1f 0ab6 	vldr	s0, [pc, #-728]	; 8006238 <_ZN15Screen1ViewBaseC1Ev+0x4b4>
 8006510:	4618      	mov	r0, r3
 8006512:	f00f fe21 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(48.62772427006246f);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3398      	adds	r3, #152	; 0x98
 800651a:	ed1f 0ab8 	vldr	s0, [pc, #-736]	; 800623c <_ZN15Screen1ViewBaseC1Ev+0x4b8>
 800651e:	4618      	mov	r0, r3
 8006520:	f00f fe1a 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.93695495893144f);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3398      	adds	r3, #152	; 0x98
 8006528:	ed1f 0abb 	vldr	s0, [pc, #-748]	; 8006240 <_ZN15Screen1ViewBaseC1Ev+0x4bc>
 800652c:	4618      	mov	r0, r3
 800652e:	f00f fe13 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(58.98108171545762f);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3398      	adds	r3, #152	; 0x98
 8006536:	ed1f 0abd 	vldr	s0, [pc, #-756]	; 8006244 <_ZN15Screen1ViewBaseC1Ev+0x4c0>
 800653a:	4618      	mov	r0, r3
 800653c:	f00f fe0c 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(67.37095521210523f);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3398      	adds	r3, #152	; 0x98
 8006544:	ed1f 0ac0 	vldr	s0, [pc, #-768]	; 8006248 <_ZN15Screen1ViewBaseC1Ev+0x4c4>
 8006548:	4618      	mov	r0, r3
 800654a:	f00f fe05 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(74.24662706982184f);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3398      	adds	r3, #152	; 0x98
 8006552:	ed1f 0ac2 	vldr	s0, [pc, #-776]	; 800624c <_ZN15Screen1ViewBaseC1Ev+0x4c8>
 8006556:	4618      	mov	r0, r3
 8006558:	f00f fdfe 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(77.00969040459248f);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3398      	adds	r3, #152	; 0x98
 8006560:	ed1f 0ac5 	vldr	s0, [pc, #-788]	; 8006250 <_ZN15Screen1ViewBaseC1Ev+0x4cc>
 8006564:	4618      	mov	r0, r3
 8006566:	f00f fdf7 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(73.99593909545894f);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3398      	adds	r3, #152	; 0x98
 800656e:	ed1f 0ac7 	vldr	s0, [pc, #-796]	; 8006254 <_ZN15Screen1ViewBaseC1Ev+0x4d0>
 8006572:	4618      	mov	r0, r3
 8006574:	f00f fdf0 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(64.92219904668131f);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3398      	adds	r3, #152	; 0x98
 800657c:	ed1f 0aca 	vldr	s0, [pc, #-808]	; 8006258 <_ZN15Screen1ViewBaseC1Ev+0x4d4>
 8006580:	4618      	mov	r0, r3
 8006582:	f00f fde9 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(50.99636698492516f);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3398      	adds	r3, #152	; 0x98
 800658a:	ed1f 0acc 	vldr	s0, [pc, #-816]	; 800625c <_ZN15Screen1ViewBaseC1Ev+0x4d8>
 800658e:	4618      	mov	r0, r3
 8006590:	f00f fde2 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(34.66208570570065f);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3398      	adds	r3, #152	; 0x98
 8006598:	ed1f 0acf 	vldr	s0, [pc, #-828]	; 8006260 <_ZN15Screen1ViewBaseC1Ev+0x4dc>
 800659c:	4618      	mov	r0, r3
 800659e:	f00f fddb 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(19.038962310337382f);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3398      	adds	r3, #152	; 0x98
 80065a6:	ed1f 0ad1 	vldr	s0, [pc, #-836]	; 8006264 <_ZN15Screen1ViewBaseC1Ev+0x4e0>
 80065aa:	4618      	mov	r0, r3
 80065ac:	f00f fdd4 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(7.193846440680581f);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3398      	adds	r3, #152	; 0x98
 80065b4:	ed1f 0ad4 	vldr	s0, [pc, #-848]	; 8006268 <_ZN15Screen1ViewBaseC1Ev+0x4e4>
 80065b8:	4618      	mov	r0, r3
 80065ba:	f00f fdcd 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(1.4201862250157724f);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3398      	adds	r3, #152	; 0x98
 80065c2:	ed1f 0ad6 	vldr	s0, [pc, #-856]	; 800626c <_ZN15Screen1ViewBaseC1Ev+0x4e8>
 80065c6:	4618      	mov	r0, r3
 80065c8:	f00f fdc6 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(2.700698596420139f);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3398      	adds	r3, #152	; 0x98
 80065d0:	ed1f 0ad9 	vldr	s0, [pc, #-868]	; 8006270 <_ZN15Screen1ViewBaseC1Ev+0x4ec>
 80065d4:	4618      	mov	r0, r3
 80065d6:	f00f fdbf 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(10.48394272112446f);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3398      	adds	r3, #152	; 0x98
 80065de:	ed1f 0adb 	vldr	s0, [pc, #-876]	; 8006274 <_ZN15Screen1ViewBaseC1Ev+0x4f0>
 80065e2:	4618      	mov	r0, r3
 80065e4:	f00f fdb8 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(22.82881758533667f);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3398      	adds	r3, #152	; 0x98
 80065ec:	ed9f 0a79 	vldr	s0, [pc, #484]	; 80067d4 <_ZN15Screen1ViewBaseC1Ev+0xa50>
 80065f0:	4618      	mov	r0, r3
 80065f2:	f00f fdb1 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(36.88122598476857f);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3398      	adds	r3, #152	; 0x98
 80065fa:	ed9f 0a77 	vldr	s0, [pc, #476]	; 80067d8 <_ZN15Screen1ViewBaseC1Ev+0xa54>
 80065fe:	4618      	mov	r0, r3
 8006600:	f00f fdaa 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(49.56614568809184f);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3398      	adds	r3, #152	; 0x98
 8006608:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80067dc <_ZN15Screen1ViewBaseC1Ev+0xa58>
 800660c:	4618      	mov	r0, r3
 800660e:	f00f fda3 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(58.32593016470574f);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3398      	adds	r3, #152	; 0x98
 8006616:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80067e0 <_ZN15Screen1ViewBaseC1Ev+0xa5c>
 800661a:	4618      	mov	r0, r3
 800661c:	f00f fd9c 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(61.724660501363545f);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3398      	adds	r3, #152	; 0x98
 8006624:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80067e4 <_ZN15Screen1ViewBaseC1Ev+0xa60>
 8006628:	4618      	mov	r0, r3
 800662a:	f00f fd95 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(59.771451437977994f);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3398      	adds	r3, #152	; 0x98
 8006632:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80067e8 <_ZN15Screen1ViewBaseC1Ev+0xa64>
 8006636:	4618      	mov	r0, r3
 8006638:	f00f fd8e 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(53.88468170771511f);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3398      	adds	r3, #152	; 0x98
 8006640:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 80067ec <_ZN15Screen1ViewBaseC1Ev+0xa68>
 8006644:	4618      	mov	r0, r3
 8006646:	f00f fd87 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(46.50724541722864f);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3398      	adds	r3, #152	; 0x98
 800664e:	ed9f 0a68 	vldr	s0, [pc, #416]	; 80067f0 <_ZN15Screen1ViewBaseC1Ev+0xa6c>
 8006652:	4618      	mov	r0, r3
 8006654:	f00f fd80 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(40.46851343672763f);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3398      	adds	r3, #152	; 0x98
 800665c:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80067f4 <_ZN15Screen1ViewBaseC1Ev+0xa70>
 8006660:	4618      	mov	r0, r3
 8006662:	f00f fd79 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(38.25081762839007f);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3398      	adds	r3, #152	; 0x98
 800666a:	ed9f 0a63 	vldr	s0, [pc, #396]	; 80067f8 <_ZN15Screen1ViewBaseC1Ev+0xa74>
 800666e:	4618      	mov	r0, r3
 8006670:	f00f fd72 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(41.3416691560294f);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3398      	adds	r3, #152	; 0x98
 8006678:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80067fc <_ZN15Screen1ViewBaseC1Ev+0xa78>
 800667c:	4618      	mov	r0, r3
 800667e:	f00f fd6b 	bl	8016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>

    buttonWithLabel1.setXY(420, 0);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8006688:	2200      	movs	r2, #0
 800668a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800668e:	4618      	mov	r0, r3
 8006690:	f7fd fa61 	bl	8003b56 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f503 7470 	add.w	r4, r3, #960	; 0x3c0
 800669a:	f107 031c 	add.w	r3, r7, #28
 800669e:	2100      	movs	r1, #0
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fe ff80 	bl	80055a6 <_ZN8touchgfx6BitmapC1Et>
 80066a6:	f107 0320 	add.w	r3, r7, #32
 80066aa:	2101      	movs	r1, #1
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe ff7a 	bl	80055a6 <_ZN8touchgfx6BitmapC1Et>
 80066b2:	f107 0220 	add.w	r2, r7, #32
 80066b6:	f107 031c 	add.w	r3, r7, #28
 80066ba:	4619      	mov	r1, r3
 80066bc:	4620      	mov	r0, r4
 80066be:	f010 facd 	bl	8016c5c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_5GOA));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f503 7470 	add.w	r4, r3, #960	; 0x3c0
 80066c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066cc:	2100      	movs	r1, #0
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff f9be 	bl	8005a50 <_ZN8touchgfx9TypedTextC1Et>
 80066d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066d8:	4619      	mov	r1, r3
 80066da:	4620      	mov	r0, r4
 80066dc:	f7ff fa0e 	bl	8005afc <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80066e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fd f993 	bl	8003a10 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f503 7470 	add.w	r4, r3, #960	; 0x3c0
 80066f0:	23ff      	movs	r3, #255	; 0xff
 80066f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80066f6:	23ff      	movs	r3, #255	; 0xff
 80066f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066fc:	23ff      	movs	r3, #255	; 0xff
 80066fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006702:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006706:	041b      	lsls	r3, r3, #16
 8006708:	461a      	mov	r2, r3
 800670a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	431a      	orrs	r2, r3
 8006712:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8006716:	4313      	orrs	r3, r2
 8006718:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800671c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006720:	4611      	mov	r1, r2
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe ff30 	bl	8005588 <_ZN8touchgfx9colortypeC1Em>
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	4619      	mov	r1, r3
 800672c:	4620      	mov	r0, r4
 800672e:	f7ff f9f7 	bl	8005b20 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(112, 112, 112));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f503 7470 	add.w	r4, r3, #960	; 0x3c0
 8006738:	2370      	movs	r3, #112	; 0x70
 800673a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800673e:	2370      	movs	r3, #112	; 0x70
 8006740:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006744:	2370      	movs	r3, #112	; 0x70
 8006746:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800674a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800674e:	041b      	lsls	r3, r3, #16
 8006750:	461a      	mov	r2, r3
 8006752:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	431a      	orrs	r2, r3
 800675a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800675e:	4313      	orrs	r3, r2
 8006760:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006768:	4611      	mov	r1, r2
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe ff0c 	bl	8005588 <_ZN8touchgfx9colortypeC1Em>
 8006770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006772:	4619      	mov	r1, r3
 8006774:	4620      	mov	r0, r4
 8006776:	f7ff f9e1 	bl	8005b3c <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7ff f977 	bl	8005a7c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3340      	adds	r3, #64	; 0x40
 8006794:	4619      	mov	r1, r3
 8006796:	4610      	mov	r0, r2
 8006798:	f7fe ffb6 	bl	8005708 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	336c      	adds	r3, #108	; 0x6c
 80067a2:	4619      	mov	r1, r3
 80067a4:	4610      	mov	r0, r2
 80067a6:	f7fe ffaf 	bl	8005708 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(dynamicGraph1);
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3398      	adds	r3, #152	; 0x98
 80067b0:	4619      	mov	r1, r3
 80067b2:	4610      	mov	r0, r2
 80067b4:	f7fe ffa8 	bl	8005708 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f7fe ffa0 	bl	8005708 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4618      	mov	r0, r3
 80067cc:	374c      	adds	r7, #76	; 0x4c
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd90      	pop	{r4, r7, pc}
 80067d2:	bf00      	nop
 80067d4:	41b6a16b 	.word	0x41b6a16b
 80067d8:	42138660 	.word	0x42138660
 80067dc:	424643bc 	.word	0x424643bc
 80067e0:	42694dc1 	.word	0x42694dc1
 80067e4:	4276e60d 	.word	0x4276e60d
 80067e8:	426f15f7 	.word	0x426f15f7
 80067ec:	425789ea 	.word	0x425789ea
 80067f0:	423a076b 	.word	0x423a076b
 80067f4:	4221dfc2 	.word	0x4221dfc2
 80067f8:	421900d6 	.word	0x421900d6
 80067fc:	42255ddf 	.word	0x42255ddf

08006800 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d106      	bne.n	8006838 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards West
        application().gotoScreen2ScreenSlideTransitionWest();
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff fa9f 	bl	8005d6e <_ZN15Screen1ViewBase11applicationEv>
 8006830:	4603      	mov	r3, r0
 8006832:	4618      	mov	r0, r3
 8006834:	f7fd fc8a 	bl	800414c <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionWestEv>
    }
}
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4618      	mov	r0, r3
 800684c:	f013 fcce 	bl	801a1ec <_ZN8touchgfx6ScreenC1Ev>
 8006850:	4a05      	ldr	r2, [pc, #20]	; (8006868 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	08028488 	.word	0x08028488

0800686c <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	4a05      	ldr	r2, [pc, #20]	; (800688c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4618      	mov	r0, r3
 800687e:	f7fd f8f3 	bl	8003a68 <_ZN8touchgfx8DrawableD1Ev>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	08028a68 	.word	0x08028a68

08006890 <_ZN8touchgfx9ContainerD0Ev>:
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff ffe7 	bl	800686c <_ZN8touchgfx9ContainerD1Ev>
 800689e:	212c      	movs	r1, #44	; 0x2c
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f01f f93a 	bl	8025b1a <_ZdlPvj>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <_ZN8touchgfx17AbstractDataGraphD1Ev>:
{
class AbstractGraphElement;
class AbstractGraphDecoration;

/** An abstract data graph. */
class AbstractDataGraph : public Container
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	4a12      	ldr	r2, [pc, #72]	; (8006904 <_ZN8touchgfx17AbstractDataGraphD1Ev+0x54>)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	33e4      	adds	r3, #228	; 0xe4
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff ffd2 	bl	800686c <_ZN8touchgfx9ContainerD1Ev>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	33b8      	adds	r3, #184	; 0xb8
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff ffcd 	bl	800686c <_ZN8touchgfx9ContainerD1Ev>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	338c      	adds	r3, #140	; 0x8c
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff ffc8 	bl	800686c <_ZN8touchgfx9ContainerD1Ev>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3360      	adds	r3, #96	; 0x60
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff ffc3 	bl	800686c <_ZN8touchgfx9ContainerD1Ev>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3334      	adds	r3, #52	; 0x34
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff ffbe 	bl	800686c <_ZN8touchgfx9ContainerD1Ev>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff ffba 	bl	800686c <_ZN8touchgfx9ContainerD1Ev>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	080295d0 	.word	0x080295d0

08006908 <_ZN8touchgfx17AbstractDataGraphD0Ev>:
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7ff ffcd 	bl	80068b0 <_ZN8touchgfx17AbstractDataGraphD1Ev>
 8006916:	f44f 7194 	mov.w	r1, #296	; 0x128
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f01f f8fd 	bl	8025b1a <_ZdlPvj>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <_ZN8touchgfx22AbstractDataGraphWithYD1Ev>:
};

/**
 * Abstract helper class used to implement graphs with the same distance between the x values (i.e. x is ignored).
 */
class AbstractDataGraphWithY : public AbstractDataGraph
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	4a05      	ldr	r2, [pc, #20]	; (800694c <_ZN8touchgfx22AbstractDataGraphWithYD1Ev+0x20>)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4618      	mov	r0, r3
 800693e:	f7ff ffb7 	bl	80068b0 <_ZN8touchgfx17AbstractDataGraphD1Ev>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	080296c4 	.word	0x080296c4

08006950 <_ZN8touchgfx22AbstractDataGraphWithYD0Ev>:
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff ffe7 	bl	800692c <_ZN8touchgfx22AbstractDataGraphWithYD1Ev>
 800695e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f01f f8d9 	bl	8025b1a <_ZdlPvj>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <_ZN8touchgfx21DataGraphWrapAndClearD1Ev>:
/**
 * The DataGraphWrapAndClear will show new points progressing across the graph. Once the graph is
 * filled, the next point added will cause the graph to be cleared and a new graph will slowly
 * be created as new values are added.
 */
class DataGraphWrapAndClear : public AbstractDataGraphWithY
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	4a05      	ldr	r2, [pc, #20]	; (8006994 <_ZN8touchgfx21DataGraphWrapAndClearD1Ev+0x20>)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff ffd1 	bl	800692c <_ZN8touchgfx22AbstractDataGraphWithYD1Ev>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	0802994c 	.word	0x0802994c

08006998 <_ZN8touchgfx21DataGraphWrapAndClearD0Ev>:
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff ffe7 	bl	8006974 <_ZN8touchgfx21DataGraphWrapAndClearD1Ev>
 80069a6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f01f f8b5 	bl	8025b1a <_ZdlPvj>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <_ZN8touchgfx17GraphWrapAndClearILs100EEC1Ev>:
 */
template <int16_t CAPACITY>
class GraphWrapAndClear : public DataGraphWrapAndClear
{
public:
    GraphWrapAndClear()
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
        : DataGraphWrapAndClear(CAPACITY, yValues)
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80069cc:	461a      	mov	r2, r3
 80069ce:	2164      	movs	r1, #100	; 0x64
 80069d0:	f00f fe52 	bl	8016678 <_ZN8touchgfx21DataGraphWrapAndClearC1EsPi>
 80069d4:	4a03      	ldr	r2, [pc, #12]	; (80069e4 <_ZN8touchgfx17GraphWrapAndClearILs100EEC1Ev+0x28>)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	601a      	str	r2, [r3, #0]
    {
    }
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	08028360 	.word	0x08028360

080069e8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	4a04      	ldr	r2, [pc, #16]	; (8006a04 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4618      	mov	r0, r3
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	080284bc 	.word	0x080284bc

08006a08 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	4639      	mov	r1, r7
 8006a14:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff ffe4 	bl	80069e8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8006a20:	4a08      	ldr	r2, [pc, #32]	; (8006a44 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	605a      	str	r2, [r3, #4]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	463a      	mov	r2, r7
 8006a32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a36:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	08028348 	.word	0x08028348

08006a48 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
    }
 8006a50:	4a04      	ldr	r2, [pc, #16]	; (8006a64 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	080284bc 	.word	0x080284bc

08006a68 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
    }
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ffe9 	bl	8006a48 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8006a76:	2104      	movs	r1, #4
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f01f f84e 	bl	8025b1a <_ZdlPvj>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	4a05      	ldr	r2, [pc, #20]	; (8006aa8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff ffd5 	bl	8006a48 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	08028348 	.word	0x08028348

08006aac <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff ffe7 	bl	8006a88 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006aba:	2110      	movs	r1, #16
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f01f f82c 	bl	8025b1a <_ZdlPvj>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev>:
class GraphWrapAndClear : public DataGraphWrapAndClear
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	4a05      	ldr	r2, [pc, #20]	; (8006aec <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev+0x20>)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff ff49 	bl	8006974 <_ZN8touchgfx21DataGraphWrapAndClearD1Ev>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	08028360 	.word	0x08028360

08006af0 <_ZN8touchgfx17GraphWrapAndClearILs100EED0Ev>:
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff ffe7 	bl	8006acc <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev>
 8006afe:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f01f f809 	bl	8025b1a <_ZdlPvj>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	4a05      	ldr	r2, [pc, #20]	; (8006b34 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fd fa07 	bl	8003f38 <_ZN8touchgfx6WidgetD1Ev>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	08029cb4 	.word	0x08029cb4

08006b38 <_ZN8touchgfx3BoxD0Ev>:
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff ffe7 	bl	8006b14 <_ZN8touchgfx3BoxD1Ev>
 8006b46:	212c      	movs	r1, #44	; 0x2c
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f01e ffe6 	bl	8025b1a <_ZdlPvj>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	4a05      	ldr	r2, [pc, #20]	; (8006b78 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fd f9e5 	bl	8003f38 <_ZN8touchgfx6WidgetD1Ev>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	08029ec8 	.word	0x08029ec8

08006b7c <_ZN8touchgfx5ImageD0Ev>:
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff ffe7 	bl	8006b58 <_ZN8touchgfx5ImageD1Ev>
 8006b8a:	212c      	movs	r1, #44	; 0x2c
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f01e ffc4 	bl	8025b1a <_ZdlPvj>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	4a05      	ldr	r2, [pc, #20]	; (8006bbc <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fd f9c3 	bl	8003f38 <_ZN8touchgfx6WidgetD1Ev>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	080294b0 	.word	0x080294b0

08006bc0 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff ffe7 	bl	8006b9c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8006bce:	2130      	movs	r1, #48	; 0x30
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f01e ffa2 	bl	8025b1a <_ZdlPvj>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <_ZN8touchgfx20AbstractGraphElementD1Ev>:
#include <touchgfx/widgets/graph/AbstractDataGraph.hpp>

namespace touchgfx
{
/** An abstract graph element. Declares a couple of useful functions to help subclasses which use CWR (Canvas Widget Renderer). */
class AbstractGraphElement : public CanvasWidget
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	4a05      	ldr	r2, [pc, #20]	; (8006c00 <_ZN8touchgfx20AbstractGraphElementD1Ev+0x20>)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff ffd3 	bl	8006b9c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	080284d4 	.word	0x080284d4

08006c04 <_ZN8touchgfx20AbstractGraphElementD0Ev>:
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff ffe7 	bl	8006be0 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 8006c12:	2134      	movs	r1, #52	; 0x34
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f01e ff80 	bl	8025b1a <_ZdlPvj>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <_ZN8touchgfx16GraphElementLineD1Ev>:
 * GraphElementLine will draw a line with a given thickness through the data points in the graph.
 *
 * @note The Line is drawn using Canvas Widget Renderer which is slower but produces much nicer
 *       graphics.
 */
class GraphElementLine : public AbstractGraphElement
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	4a05      	ldr	r2, [pc, #20]	; (8006c44 <_ZN8touchgfx16GraphElementLineD1Ev+0x20>)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff ffd3 	bl	8006be0 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	080298cc 	.word	0x080298cc

08006c48 <_ZN8touchgfx16GraphElementLineD0Ev>:
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff ffe7 	bl	8006c24 <_ZN8touchgfx16GraphElementLineD1Ev>
 8006c56:	2138      	movs	r1, #56	; 0x38
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f01e ff5e 	bl	8025b1a <_ZdlPvj>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4618      	mov	r0, r3
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	4a05      	ldr	r2, [pc, #20]	; (8006c88 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fe fe7b 	bl	8005974 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	0802942c 	.word	0x0802942c

08006c8c <_ZN8touchgfx13PainterRGB888D0Ev>:
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff ffe7 	bl	8006c68 <_ZN8touchgfx13PainterRGB888D1Ev>
 8006c9a:	2118      	movs	r1, #24
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f01e ff3c 	bl	8025b1a <_ZdlPvj>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	4a05      	ldr	r2, [pc, #20]	; (8006ccc <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fe feeb 	bl	8005a98 <_ZN8touchgfx14AbstractButtonD1Ev>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	08029d7c 	.word	0x08029d7c

08006cd0 <_ZN8touchgfx6ButtonD0Ev>:
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff ffe7 	bl	8006cac <_ZN8touchgfx6ButtonD1Ev>
 8006cde:	2134      	movs	r1, #52	; 0x34
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f01e ff1a 	bl	8025b1a <_ZdlPvj>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	4a08      	ldr	r2, [pc, #32]	; (8006d1c <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3334      	adds	r3, #52	; 0x34
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fc fe84 	bl	8003a10 <_ZN8touchgfx9TypedTextD1Ev>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7ff ffce 	bl	8006cac <_ZN8touchgfx6ButtonD1Ev>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	08029f30 	.word	0x08029f30

08006d20 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff ffe1 	bl	8006cf0 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8006d2e:	2148      	movs	r1, #72	; 0x48
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f01e fef2 	bl	8025b1a <_ZdlPvj>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	68d2      	ldr	r2, [r2, #12]
 8006d52:	1052      	asrs	r2, r2, #1
 8006d54:	1898      	adds	r0, r3, r2
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d102      	bne.n	8006d68 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	e00a      	b.n	8006d7e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	68d2      	ldr	r2, [r2, #12]
 8006d70:	1052      	asrs	r2, r2, #1
 8006d72:	4413      	add	r3, r2
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	6892      	ldr	r2, [r2, #8]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6839      	ldr	r1, [r7, #0]
 8006d80:	4798      	blx	r3
    }
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d010      	beq.n	8006dbc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d107      	bne.n	8006db2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e000      	b.n	8006db4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8006db2:	2300      	movs	r3, #0
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d001      	beq.n	8006dbc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8006dbc:	2300      	movs	r3, #0
    }
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
	...

08006dcc <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	2326      	movs	r3, #38	; 0x26
 8006dda:	461a      	mov	r2, r3
 8006ddc:	2100      	movs	r1, #0
 8006dde:	f01e ff57 	bl	8025c90 <memset>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fe fc9f 	bl	8005728 <_ZN8touchgfx6WidgetC1Ev>
 8006dea:	4a14      	ldr	r2, [pc, #80]	; (8006e3c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3328      	adds	r3, #40	; 0x28
 8006df4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fe fe29 	bl	8005a50 <_ZN8touchgfx9TypedTextC1Et>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3330      	adds	r3, #48	; 0x30
 8006e02:	2100      	movs	r1, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fe fbbf 	bl	8005588 <_ZN8touchgfx9colortypeC1Em>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	869a      	strh	r2, [r3, #52]	; 0x34
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	22ff      	movs	r2, #255	; 0xff
 8006e14:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	08029c0c 	.word	0x08029c0c

08006e40 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	4a08      	ldr	r2, [pc, #32]	; (8006e6c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3328      	adds	r3, #40	; 0x28
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fc fddc 	bl	8003a10 <_ZN8touchgfx9TypedTextD1Ev>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fd f86c 	bl	8003f38 <_ZN8touchgfx6WidgetD1Ev>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	08029c0c 	.word	0x08029c0c

08006e70 <_ZN8touchgfx8TextAreaD0Ev>:
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7ff ffe1 	bl	8006e40 <_ZN8touchgfx8TextAreaD1Ev>
 8006e7e:	213c      	movs	r1, #60	; 0x3c
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f01e fe4a 	bl	8025b1a <_ZdlPvj>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff ff96 	bl	8006dcc <_ZN8touchgfx8TextAreaC1Ev>
 8006ea0:	4a05      	ldr	r2, [pc, #20]	; (8006eb8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	08029e20 	.word	0x08029e20

08006ebc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	4a05      	ldr	r2, [pc, #20]	; (8006ef8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe fbb5 	bl	8005658 <_ZN8touchgfx6ScreenD1Ev>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	080285b4 	.word	0x080285b4

08006efc <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff ffe7 	bl	8006ed8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8006f0a:	2140      	movs	r1, #64	; 0x40
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f01e fe04 	bl	8025b1a <_ZdlPvj>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	4a12      	ldr	r2, [pc, #72]	; (8006f70 <_ZN15Screen2ViewBaseD1Ev+0x54>)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fa59 	bl	80073e8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	33e0      	adds	r3, #224	; 0xe0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fa76 	bl	800742c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3398      	adds	r3, #152	; 0x98
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7ff fed3 	bl	8006cf0 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	336c      	adds	r3, #108	; 0x6c
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7ff fe02 	bl	8006b58 <_ZN8touchgfx5ImageD1Ev>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3340      	adds	r3, #64	; 0x40
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff fddb 	bl	8006b14 <_ZN8touchgfx3BoxD1Ev>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7ff ffb9 	bl	8006ed8 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	08028568 	.word	0x08028568

08006f74 <_ZN15Screen2ViewBaseD0Ev>:
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff ffcd 	bl	8006f1c <_ZN15Screen2ViewBaseD1Ev>
 8006f82:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f01e fdc7 	bl	8025b1a <_ZdlPvj>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006f9e:	f011 fe5d 	bl	8018c5c <_ZN8touchgfx11Application11getInstanceEv>
 8006fa2:	4603      	mov	r3, r0
    }
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase() :
 8006fac:	b590      	push	{r4, r7, lr}
 8006fae:	b09d      	sub	sp, #116	; 0x74
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 f9e0 	bl	800737c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 8006fbc:	4ad5      	ldr	r2, [pc, #852]	; (8007314 <_ZN15Screen2ViewBaseC1Ev+0x368>)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3340      	adds	r3, #64	; 0x40
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe fbc0 	bl	800574c <_ZN8touchgfx3BoxC1Ev>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8006fd2:	f107 030c 	add.w	r3, r7, #12
 8006fd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fae3 	bl	80055a6 <_ZN8touchgfx6BitmapC1Et>
 8006fe0:	f107 030c 	add.w	r3, r7, #12
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f7fe fbe2 	bl	80057b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3398      	adds	r3, #152	; 0x98
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f010 f91f 	bl	8017234 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	33e0      	adds	r3, #224	; 0xe0
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff ff48 	bl	8006e90 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8007006:	4bc4      	ldr	r3, [pc, #784]	; (8007318 <_ZN15Screen2ViewBaseC1Ev+0x36c>)
 8007008:	613b      	str	r3, [r7, #16]
 800700a:	2300      	movs	r3, #0
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	f107 0310 	add.w	r3, r7, #16
 8007012:	cb0c      	ldmia	r3, {r2, r3}
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	f000 f9c7 	bl	80073a8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007020:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800702a:	2200      	movs	r2, #0
 800702c:	2100      	movs	r1, #0
 800702e:	f7fc fd46 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007038:	2300      	movs	r3, #0
 800703a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800703e:	2300      	movs	r3, #0
 8007040:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8007044:	2300      	movs	r3, #0
 8007046:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 800704a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800704e:	041b      	lsls	r3, r3, #16
 8007050:	461a      	mov	r2, r3
 8007052:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	431a      	orrs	r2, r3
 800705a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800705e:	4313      	orrs	r3, r2
 8007060:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007064:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007068:	4611      	mov	r1, r2
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe fa8c 	bl	8005588 <_ZN8touchgfx9colortypeC1Em>
 8007070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007072:	4619      	mov	r1, r3
 8007074:	4620      	mov	r0, r4
 8007076:	f7fe fb8d 	bl	8005794 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    image1.setXY(0, 0);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	336c      	adds	r3, #108	; 0x6c
 800707e:	2200      	movs	r2, #0
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f7fc fd67 	bl	8003b56 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_480X272PX_ID));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800708e:	f107 0318 	add.w	r3, r7, #24
 8007092:	2102      	movs	r1, #2
 8007094:	4618      	mov	r0, r3
 8007096:	f7fe fa86 	bl	80055a6 <_ZN8touchgfx6BitmapC1Et>
 800709a:	f107 0318 	add.w	r3, r7, #24
 800709e:	4619      	mov	r1, r3
 80070a0:	4620      	mov	r0, r4
 80070a2:	f00f ff91 	bl	8016fc8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    buttonWithLabel1.setXY(420, 0);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3398      	adds	r3, #152	; 0x98
 80070aa:	2200      	movs	r2, #0
 80070ac:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fc fd50 	bl	8003b56 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80070bc:	f107 031c 	add.w	r3, r7, #28
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fa6f 	bl	80055a6 <_ZN8touchgfx6BitmapC1Et>
 80070c8:	f107 0320 	add.w	r3, r7, #32
 80070cc:	2101      	movs	r1, #1
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe fa69 	bl	80055a6 <_ZN8touchgfx6BitmapC1Et>
 80070d4:	f107 0220 	add.w	r2, r7, #32
 80070d8:	f107 031c 	add.w	r3, r7, #28
 80070dc:	4619      	mov	r1, r3
 80070de:	4620      	mov	r0, r4
 80070e0:	f00f fdbc 	bl	8016c5c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_E1DF));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80070ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ee:	2101      	movs	r1, #1
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fe fcad 	bl	8005a50 <_ZN8touchgfx9TypedTextC1Et>
 80070f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070fa:	4619      	mov	r1, r3
 80070fc:	4620      	mov	r0, r4
 80070fe:	f7fe fcfd 	bl	8005afc <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8007102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007106:	4618      	mov	r0, r3
 8007108:	f7fc fc82 	bl	8003a10 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8007112:	23ff      	movs	r3, #255	; 0xff
 8007114:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8007118:	23ff      	movs	r3, #255	; 0xff
 800711a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800711e:	23ff      	movs	r3, #255	; 0xff
 8007120:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007124:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8007128:	041b      	lsls	r3, r3, #16
 800712a:	461a      	mov	r2, r3
 800712c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	431a      	orrs	r2, r3
 8007134:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007138:	4313      	orrs	r3, r2
 800713a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800713e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007142:	4611      	mov	r1, r2
 8007144:	4618      	mov	r0, r3
 8007146:	f7fe fa1f 	bl	8005588 <_ZN8touchgfx9colortypeC1Em>
 800714a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800714c:	4619      	mov	r1, r3
 800714e:	4620      	mov	r0, r4
 8007150:	f7fe fce6 	bl	8005b20 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(112, 112, 112));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800715a:	2370      	movs	r3, #112	; 0x70
 800715c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8007160:	2370      	movs	r3, #112	; 0x70
 8007162:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8007166:	2370      	movs	r3, #112	; 0x70
 8007168:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800716c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007170:	041b      	lsls	r3, r3, #16
 8007172:	461a      	mov	r2, r3
 8007174:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	431a      	orrs	r2, r3
 800717c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8007180:	4313      	orrs	r3, r2
 8007182:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007186:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800718a:	4611      	mov	r1, r2
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe f9fb 	bl	8005588 <_ZN8touchgfx9colortypeC1Em>
 8007192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007194:	4619      	mov	r1, r3
 8007196:	4620      	mov	r0, r4
 8007198:	f7fe fcd0 	bl	8005b3c <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f7fe fc66 	bl	8005a7c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(174, 112);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	33e0      	adds	r3, #224	; 0xe0
 80071b4:	2270      	movs	r2, #112	; 0x70
 80071b6:	21ae      	movs	r1, #174	; 0xae
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fc fccc 	bl	8003b56 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80071c4:	2300      	movs	r3, #0
 80071c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80071ca:	2300      	movs	r3, #0
 80071cc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80071d0:	2300      	movs	r3, #0
 80071d2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80071d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071da:	041b      	lsls	r3, r3, #16
 80071dc:	461a      	mov	r2, r3
 80071de:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80071e2:	021b      	lsls	r3, r3, #8
 80071e4:	431a      	orrs	r2, r3
 80071e6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80071f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80071f4:	4611      	mov	r1, r2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe f9c6 	bl	8005588 <_ZN8touchgfx9colortypeC1Em>
 80071fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fe:	65bc      	str	r4, [r7, #88]	; 0x58
 8007200:	60bb      	str	r3, [r7, #8]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8007202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007208:	bf00      	nop
    textArea1.setLinespacing(0);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	33e0      	adds	r3, #224	; 0xe0
 800720e:	663b      	str	r3, [r7, #96]	; 0x60
 8007210:	2300      	movs	r3, #0
 8007212:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8007216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007218:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800721c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800721e:	bf00      	nop
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ZYNN).getText());
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8007226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800722a:	2103      	movs	r1, #3
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe fc0f 	bl	8005a50 <_ZN8touchgfx9TypedTextC1Et>
 8007232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007236:	667b      	str	r3, [r7, #100]	; 0x64
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007238:	4b38      	ldr	r3, [pc, #224]	; (800731c <_ZN15Screen2ViewBaseC1Ev+0x370>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d105      	bne.n	800724c <_ZN15Screen2ViewBaseC1Ev+0x2a0>
 8007240:	4b37      	ldr	r3, [pc, #220]	; (8007320 <_ZN15Screen2ViewBaseC1Ev+0x374>)
 8007242:	4a38      	ldr	r2, [pc, #224]	; (8007324 <_ZN15Screen2ViewBaseC1Ev+0x378>)
 8007244:	21ae      	movs	r1, #174	; 0xae
 8007246:	4838      	ldr	r0, [pc, #224]	; (8007328 <_ZN15Screen2ViewBaseC1Ev+0x37c>)
 8007248:	f01e fc96 	bl	8025b78 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800724c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800724e:	889a      	ldrh	r2, [r3, #4]
 8007250:	4b36      	ldr	r3, [pc, #216]	; (800732c <_ZN15Screen2ViewBaseC1Ev+0x380>)
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d305      	bcc.n	8007264 <_ZN15Screen2ViewBaseC1Ev+0x2b8>
 8007258:	4b35      	ldr	r3, [pc, #212]	; (8007330 <_ZN15Screen2ViewBaseC1Ev+0x384>)
 800725a:	4a32      	ldr	r2, [pc, #200]	; (8007324 <_ZN15Screen2ViewBaseC1Ev+0x378>)
 800725c:	21af      	movs	r1, #175	; 0xaf
 800725e:	4832      	ldr	r0, [pc, #200]	; (8007328 <_ZN15Screen2ViewBaseC1Ev+0x37c>)
 8007260:	f01e fc8a 	bl	8025b78 <__assert_func>
    }
 8007264:	bf00      	nop
        return texts->getText(typedTextId);
 8007266:	4b33      	ldr	r3, [pc, #204]	; (8007334 <_ZN15Screen2ViewBaseC1Ev+0x388>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800726c:	4611      	mov	r1, r2
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fc2e 	bl	8007ad0 <_ZNK8touchgfx5Texts7getTextEt>
 8007274:	4603      	mov	r3, r0
 8007276:	bf00      	nop
 8007278:	4a2f      	ldr	r2, [pc, #188]	; (8007338 <_ZN15Screen2ViewBaseC1Ev+0x38c>)
 800727a:	2105      	movs	r1, #5
 800727c:	4620      	mov	r0, r4
 800727e:	f014 fcbb 	bl	801bbf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8007282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007286:	4618      	mov	r0, r3
 8007288:	f7fc fbc2 	bl	8003a10 <_ZN8touchgfx9TypedTextD1Ev>
    textArea1.setWildcard(textArea1Buffer);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007298:	4619      	mov	r1, r3
 800729a:	4610      	mov	r0, r2
 800729c:	f7ff fe0e 	bl	8006ebc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea1.resizeToCurrentText();
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	33e0      	adds	r3, #224	; 0xe0
 80072a4:	4618      	mov	r0, r3
 80072a6:	f00f fc85 	bl	8016bb4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3IOP));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80072b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80072b4:	2102      	movs	r1, #2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fbca 	bl	8005a50 <_ZN8touchgfx9TypedTextC1Et>
 80072bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80072c0:	4619      	mov	r1, r3
 80072c2:	4620      	mov	r0, r4
 80072c4:	f00f fc93 	bl	8016bee <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80072c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fc fb9f 	bl	8003a10 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3340      	adds	r3, #64	; 0x40
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7fe fa14 	bl	8005708 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	336c      	adds	r3, #108	; 0x6c
 80072e6:	4619      	mov	r1, r3
 80072e8:	4610      	mov	r0, r2
 80072ea:	f7fe fa0d 	bl	8005708 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3398      	adds	r3, #152	; 0x98
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f7fe fa06 	bl	8005708 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	33e0      	adds	r3, #224	; 0xe0
 8007302:	4619      	mov	r1, r3
 8007304:	4610      	mov	r0, r2
 8007306:	f7fe f9ff 	bl	8005708 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4618      	mov	r0, r3
 800730e:	376c      	adds	r7, #108	; 0x6c
 8007310:	46bd      	mov	sp, r7
 8007312:	bd90      	pop	{r4, r7, pc}
 8007314:	08028568 	.word	0x08028568
 8007318:	08007351 	.word	0x08007351
 800731c:	2400c914 	.word	0x2400c914
 8007320:	0802785c 	.word	0x0802785c
 8007324:	080278a0 	.word	0x080278a0
 8007328:	080278d0 	.word	0x080278d0
 800732c:	2400c918 	.word	0x2400c918
 8007330:	08027918 	.word	0x08027918
 8007334:	2400c920 	.word	0x2400c920
 8007338:	0802796c 	.word	0x0802796c

0800733c <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]

}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3398      	adds	r3, #152	; 0x98
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d106      	bne.n	8007372 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenSlideTransitionEast();
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff fe16 	bl	8006f96 <_ZN15Screen2ViewBase11applicationEv>
 800736a:	4603      	mov	r3, r0
 800736c:	4618      	mov	r0, r3
 800736e:	f7fc fea7 	bl	80040c0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionEastEv>
    }
}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4618      	mov	r0, r3
 8007388:	f012 ff30 	bl	801a1ec <_ZN8touchgfx6ScreenC1Ev>
 800738c:	4a05      	ldr	r2, [pc, #20]	; (80073a4 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	080285b4 	.word	0x080285b4

080073a8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	4639      	mov	r1, r7
 80073b4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff fb14 	bl	80069e8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80073c0:	4a08      	ldr	r2, [pc, #32]	; (80073e4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	605a      	str	r2, [r3, #4]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3308      	adds	r3, #8
 80073d0:	463a      	mov	r2, r7
 80073d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073d6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	0802859c 	.word	0x0802859c

080073e8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	4a05      	ldr	r2, [pc, #20]	; (8007408 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff fb25 	bl	8006a48 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	0802859c 	.word	0x0802859c

0800740c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7ff ffe7 	bl	80073e8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800741a:	2110      	movs	r1, #16
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f01e fb7c 	bl	8025b1a <_ZdlPvj>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4618      	mov	r0, r3
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	4a05      	ldr	r2, [pc, #20]	; (800744c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4618      	mov	r0, r3
 800743e:	f7ff fcff 	bl	8006e40 <_ZN8touchgfx8TextAreaD1Ev>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	08029e20 	.word	0x08029e20

08007450 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff ffe7 	bl	800742c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800745e:	2140      	movs	r1, #64	; 0x40
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f01e fb5a 	bl	8025b1a <_ZdlPvj>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	68d2      	ldr	r2, [r2, #12]
 8007482:	1052      	asrs	r2, r2, #1
 8007484:	1898      	adds	r0, r3, r2
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d102      	bne.n	8007498 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	e00a      	b.n	80074ae <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	68d2      	ldr	r2, [r2, #12]
 80074a0:	1052      	asrs	r2, r2, #1
 80074a2:	4413      	add	r3, r2
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6892      	ldr	r2, [r2, #8]
 80074aa:	4413      	add	r3, r2
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	4798      	blx	r3
    }
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d010      	beq.n	80074ec <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d107      	bne.n	80074e2 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80074e2:	2300      	movs	r3, #0
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d001      	beq.n	80074ec <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80074e8:	2301      	movs	r3, #1
 80074ea:	e000      	b.n	80074ee <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80074ec:	2300      	movs	r3, #0
    }
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
	...

080074fc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
 8007500:	4801      	ldr	r0, [pc, #4]	; (8007508 <__tcf_0+0xc>)
 8007502:	f7fc fa63 	bl	80039cc <_ZN8touchgfx13GeneratedFontD1Ev>
 8007506:	bd80      	pop	{r7, pc}
 8007508:	24003060 	.word	0x24003060

0800750c <_Z23getFont_verdana_10_4bppv>:
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08c      	sub	sp, #48	; 0x30
 8007510:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007512:	4b1f      	ldr	r3, [pc, #124]	; (8007590 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	f3bf 8f5b 	dmb	ish
 800751a:	b2db      	uxtb	r3, r3
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	bf0c      	ite	eq
 8007524:	2301      	moveq	r3, #1
 8007526:	2300      	movne	r3, #0
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d02c      	beq.n	8007588 <_Z23getFont_verdana_10_4bppv+0x7c>
 800752e:	4818      	ldr	r0, [pc, #96]	; (8007590 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007530:	f01e faf5 	bl	8025b1e <__cxa_guard_acquire>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	bf14      	ite	ne
 800753a:	2301      	movne	r3, #1
 800753c:	2300      	moveq	r3, #0
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d021      	beq.n	8007588 <_Z23getFont_verdana_10_4bppv+0x7c>
 8007544:	2300      	movs	r3, #0
 8007546:	930a      	str	r3, [sp, #40]	; 0x28
 8007548:	2300      	movs	r3, #0
 800754a:	9309      	str	r3, [sp, #36]	; 0x24
 800754c:	2300      	movs	r3, #0
 800754e:	9308      	str	r3, [sp, #32]
 8007550:	233f      	movs	r3, #63	; 0x3f
 8007552:	9307      	str	r3, [sp, #28]
 8007554:	4b0f      	ldr	r3, [pc, #60]	; (8007594 <_Z23getFont_verdana_10_4bppv+0x88>)
 8007556:	9306      	str	r3, [sp, #24]
 8007558:	4b0f      	ldr	r3, [pc, #60]	; (8007598 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800755a:	9305      	str	r3, [sp, #20]
 800755c:	2300      	movs	r3, #0
 800755e:	9304      	str	r3, [sp, #16]
 8007560:	2300      	movs	r3, #0
 8007562:	9303      	str	r3, [sp, #12]
 8007564:	2301      	movs	r3, #1
 8007566:	9302      	str	r3, [sp, #8]
 8007568:	2304      	movs	r3, #4
 800756a:	9301      	str	r3, [sp, #4]
 800756c:	2300      	movs	r3, #0
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	230a      	movs	r3, #10
 8007572:	2201      	movs	r2, #1
 8007574:	4909      	ldr	r1, [pc, #36]	; (800759c <_Z23getFont_verdana_10_4bppv+0x90>)
 8007576:	480a      	ldr	r0, [pc, #40]	; (80075a0 <_Z23getFont_verdana_10_4bppv+0x94>)
 8007578:	f7fd ff6c 	bl	8005454 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800757c:	4804      	ldr	r0, [pc, #16]	; (8007590 <_Z23getFont_verdana_10_4bppv+0x84>)
 800757e:	f01e fada 	bl	8025b36 <__cxa_guard_release>
 8007582:	4808      	ldr	r0, [pc, #32]	; (80075a4 <_Z23getFont_verdana_10_4bppv+0x98>)
 8007584:	f01e fb16 	bl	8025bb4 <atexit>
    return verdana_10_4bpp;
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800758a:	4618      	mov	r0, r3
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	24003088 	.word	0x24003088
 8007594:	0802ba60 	.word	0x0802ba60
 8007598:	0802ba74 	.word	0x0802ba74
 800759c:	90000700 	.word	0x90000700
 80075a0:	24003060 	.word	0x24003060
 80075a4:	080074fd 	.word	0x080074fd

080075a8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_14_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_14_4bpp();

touchgfx::GeneratedFont& getFont_verdana_14_4bpp()
{
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 7, 14, 0, 4, 1, 0, 0, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0, 0);
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	4801      	ldr	r0, [pc, #4]	; (80075b4 <__tcf_0+0xc>)
 80075ae:	f7fc fa0d 	bl	80039cc <_ZN8touchgfx13GeneratedFontD1Ev>
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	2400308c 	.word	0x2400308c

080075b8 <_Z23getFont_verdana_14_4bppv>:
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08c      	sub	sp, #48	; 0x30
 80075bc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 7, 14, 0, 4, 1, 0, 0, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 63, 0, 0, 0);
 80075be:	4b1f      	ldr	r3, [pc, #124]	; (800763c <_Z23getFont_verdana_14_4bppv+0x84>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	f3bf 8f5b 	dmb	ish
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	bf0c      	ite	eq
 80075d0:	2301      	moveq	r3, #1
 80075d2:	2300      	movne	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d02c      	beq.n	8007634 <_Z23getFont_verdana_14_4bppv+0x7c>
 80075da:	4818      	ldr	r0, [pc, #96]	; (800763c <_Z23getFont_verdana_14_4bppv+0x84>)
 80075dc:	f01e fa9f 	bl	8025b1e <__cxa_guard_acquire>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bf14      	ite	ne
 80075e6:	2301      	movne	r3, #1
 80075e8:	2300      	moveq	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d021      	beq.n	8007634 <_Z23getFont_verdana_14_4bppv+0x7c>
 80075f0:	2300      	movs	r3, #0
 80075f2:	930a      	str	r3, [sp, #40]	; 0x28
 80075f4:	2300      	movs	r3, #0
 80075f6:	9309      	str	r3, [sp, #36]	; 0x24
 80075f8:	2300      	movs	r3, #0
 80075fa:	9308      	str	r3, [sp, #32]
 80075fc:	233f      	movs	r3, #63	; 0x3f
 80075fe:	9307      	str	r3, [sp, #28]
 8007600:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <_Z23getFont_verdana_14_4bppv+0x88>)
 8007602:	9306      	str	r3, [sp, #24]
 8007604:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <_Z23getFont_verdana_14_4bppv+0x8c>)
 8007606:	9305      	str	r3, [sp, #20]
 8007608:	2300      	movs	r3, #0
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	2300      	movs	r3, #0
 800760e:	9303      	str	r3, [sp, #12]
 8007610:	2301      	movs	r3, #1
 8007612:	9302      	str	r3, [sp, #8]
 8007614:	2304      	movs	r3, #4
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	2300      	movs	r3, #0
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	230e      	movs	r3, #14
 800761e:	2207      	movs	r2, #7
 8007620:	4909      	ldr	r1, [pc, #36]	; (8007648 <_Z23getFont_verdana_14_4bppv+0x90>)
 8007622:	480a      	ldr	r0, [pc, #40]	; (800764c <_Z23getFont_verdana_14_4bppv+0x94>)
 8007624:	f7fd ff16 	bl	8005454 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007628:	4804      	ldr	r0, [pc, #16]	; (800763c <_Z23getFont_verdana_14_4bppv+0x84>)
 800762a:	f01e fa84 	bl	8025b36 <__cxa_guard_release>
 800762e:	4808      	ldr	r0, [pc, #32]	; (8007650 <_Z23getFont_verdana_14_4bppv+0x98>)
 8007630:	f01e fac0 	bl	8025bb4 <atexit>
    return verdana_14_4bpp;
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <_Z23getFont_verdana_14_4bppv+0x94>)
}
 8007636:	4618      	mov	r0, r3
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	240030b4 	.word	0x240030b4
 8007640:	0802ba64 	.word	0x0802ba64
 8007644:	0802ba78 	.word	0x0802ba78
 8007648:	90000710 	.word	0x90000710
 800764c:	2400308c 	.word	0x2400308c
 8007650:	080075a9 	.word	0x080075a9

08007654 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
 8007658:	4801      	ldr	r0, [pc, #4]	; (8007660 <__tcf_0+0xc>)
 800765a:	f7fc f9b7 	bl	80039cc <_ZN8touchgfx13GeneratedFontD1Ev>
 800765e:	bd80      	pop	{r7, pc}
 8007660:	240030b8 	.word	0x240030b8

08007664 <_Z23getFont_verdana_20_4bppv>:
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08c      	sub	sp, #48	; 0x30
 8007668:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800766a:	4b1f      	ldr	r3, [pc, #124]	; (80076e8 <_Z23getFont_verdana_20_4bppv+0x84>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	f3bf 8f5b 	dmb	ish
 8007672:	b2db      	uxtb	r3, r3
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	bf0c      	ite	eq
 800767c:	2301      	moveq	r3, #1
 800767e:	2300      	movne	r3, #0
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d02c      	beq.n	80076e0 <_Z23getFont_verdana_20_4bppv+0x7c>
 8007686:	4818      	ldr	r0, [pc, #96]	; (80076e8 <_Z23getFont_verdana_20_4bppv+0x84>)
 8007688:	f01e fa49 	bl	8025b1e <__cxa_guard_acquire>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	bf14      	ite	ne
 8007692:	2301      	movne	r3, #1
 8007694:	2300      	moveq	r3, #0
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d021      	beq.n	80076e0 <_Z23getFont_verdana_20_4bppv+0x7c>
 800769c:	2300      	movs	r3, #0
 800769e:	930a      	str	r3, [sp, #40]	; 0x28
 80076a0:	2300      	movs	r3, #0
 80076a2:	9309      	str	r3, [sp, #36]	; 0x24
 80076a4:	2300      	movs	r3, #0
 80076a6:	9308      	str	r3, [sp, #32]
 80076a8:	233f      	movs	r3, #63	; 0x3f
 80076aa:	9307      	str	r3, [sp, #28]
 80076ac:	4b0f      	ldr	r3, [pc, #60]	; (80076ec <_Z23getFont_verdana_20_4bppv+0x88>)
 80076ae:	9306      	str	r3, [sp, #24]
 80076b0:	4b0f      	ldr	r3, [pc, #60]	; (80076f0 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80076b2:	9305      	str	r3, [sp, #20]
 80076b4:	2300      	movs	r3, #0
 80076b6:	9304      	str	r3, [sp, #16]
 80076b8:	2300      	movs	r3, #0
 80076ba:	9303      	str	r3, [sp, #12]
 80076bc:	2301      	movs	r3, #1
 80076be:	9302      	str	r3, [sp, #8]
 80076c0:	2304      	movs	r3, #4
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	2300      	movs	r3, #0
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	2314      	movs	r3, #20
 80076ca:	2201      	movs	r2, #1
 80076cc:	4909      	ldr	r1, [pc, #36]	; (80076f4 <_Z23getFont_verdana_20_4bppv+0x90>)
 80076ce:	480a      	ldr	r0, [pc, #40]	; (80076f8 <_Z23getFont_verdana_20_4bppv+0x94>)
 80076d0:	f7fd fec0 	bl	8005454 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80076d4:	4804      	ldr	r0, [pc, #16]	; (80076e8 <_Z23getFont_verdana_20_4bppv+0x84>)
 80076d6:	f01e fa2e 	bl	8025b36 <__cxa_guard_release>
 80076da:	4808      	ldr	r0, [pc, #32]	; (80076fc <_Z23getFont_verdana_20_4bppv+0x98>)
 80076dc:	f01e fa6a 	bl	8025bb4 <atexit>
    return verdana_20_4bpp;
 80076e0:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	240030e0 	.word	0x240030e0
 80076ec:	0802ba68 	.word	0x0802ba68
 80076f0:	0802ba7c 	.word	0x0802ba7c
 80076f4:	90000774 	.word	0x90000774
 80076f8:	240030b8 	.word	0x240030b8
 80076fc:	08007655 	.word	0x08007655

08007700 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 7, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0
 8007704:	4801      	ldr	r0, [pc, #4]	; (800770c <__tcf_0+0xc>)
 8007706:	f7fc f961 	bl	80039cc <_ZN8touchgfx13GeneratedFontD1Ev>
 800770a:	bd80      	pop	{r7, pc}
 800770c:	240030e4 	.word	0x240030e4

08007710 <_Z23getFont_verdana_40_4bppv>:
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08c      	sub	sp, #48	; 0x30
 8007714:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 7, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007716:	4b1f      	ldr	r3, [pc, #124]	; (8007794 <_Z23getFont_verdana_40_4bppv+0x84>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	f3bf 8f5b 	dmb	ish
 800771e:	b2db      	uxtb	r3, r3
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	bf0c      	ite	eq
 8007728:	2301      	moveq	r3, #1
 800772a:	2300      	movne	r3, #0
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d02c      	beq.n	800778c <_Z23getFont_verdana_40_4bppv+0x7c>
 8007732:	4818      	ldr	r0, [pc, #96]	; (8007794 <_Z23getFont_verdana_40_4bppv+0x84>)
 8007734:	f01e f9f3 	bl	8025b1e <__cxa_guard_acquire>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	bf14      	ite	ne
 800773e:	2301      	movne	r3, #1
 8007740:	2300      	moveq	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d021      	beq.n	800778c <_Z23getFont_verdana_40_4bppv+0x7c>
 8007748:	2300      	movs	r3, #0
 800774a:	930a      	str	r3, [sp, #40]	; 0x28
 800774c:	2300      	movs	r3, #0
 800774e:	9309      	str	r3, [sp, #36]	; 0x24
 8007750:	2300      	movs	r3, #0
 8007752:	9308      	str	r3, [sp, #32]
 8007754:	233f      	movs	r3, #63	; 0x3f
 8007756:	9307      	str	r3, [sp, #28]
 8007758:	4b0f      	ldr	r3, [pc, #60]	; (8007798 <_Z23getFont_verdana_40_4bppv+0x88>)
 800775a:	9306      	str	r3, [sp, #24]
 800775c:	4b0f      	ldr	r3, [pc, #60]	; (800779c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800775e:	9305      	str	r3, [sp, #20]
 8007760:	2300      	movs	r3, #0
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	2300      	movs	r3, #0
 8007766:	9303      	str	r3, [sp, #12]
 8007768:	2301      	movs	r3, #1
 800776a:	9302      	str	r3, [sp, #8]
 800776c:	2304      	movs	r3, #4
 800776e:	9301      	str	r3, [sp, #4]
 8007770:	2301      	movs	r3, #1
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	2328      	movs	r3, #40	; 0x28
 8007776:	2207      	movs	r2, #7
 8007778:	4909      	ldr	r1, [pc, #36]	; (80077a0 <_Z23getFont_verdana_40_4bppv+0x90>)
 800777a:	480a      	ldr	r0, [pc, #40]	; (80077a4 <_Z23getFont_verdana_40_4bppv+0x94>)
 800777c:	f7fd fe6a 	bl	8005454 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007780:	4804      	ldr	r0, [pc, #16]	; (8007794 <_Z23getFont_verdana_40_4bppv+0x84>)
 8007782:	f01e f9d8 	bl	8025b36 <__cxa_guard_release>
 8007786:	4808      	ldr	r0, [pc, #32]	; (80077a8 <_Z23getFont_verdana_40_4bppv+0x98>)
 8007788:	f01e fa14 	bl	8025bb4 <atexit>
    return verdana_40_4bpp;
 800778c:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800778e:	4618      	mov	r0, r3
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	2400310c 	.word	0x2400310c
 8007798:	0802ba6c 	.word	0x0802ba6c
 800779c:	0802ba80 	.word	0x0802ba80
 80077a0:	90000784 	.word	0x90000784
 80077a4:	240030e4 	.word	0x240030e4
 80077a8:	08007701 	.word	0x08007701

080077ac <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	460b      	mov	r3, r1
 80077b6:	607a      	str	r2, [r7, #4]
 80077b8:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 80077ba:	2300      	movs	r3, #0
    }
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80077d0:	2300      	movs	r3, #0
    }
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80077e6:	2300      	movs	r3, #0
    }
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8007802:	4a07      	ldr	r2, [pc, #28]	; (8007820 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6013      	str	r3, [r2, #0]
        fonts = f;
 8007808:	4a06      	ldr	r2, [pc, #24]	; (8007824 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800780e:	4a06      	ldr	r2, [pc, #24]	; (8007828 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8007810:	88fb      	ldrh	r3, [r7, #6]
 8007812:	8013      	strh	r3, [r2, #0]
    }
 8007814:	bf00      	nop
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	2400c914 	.word	0x2400c914
 8007824:	2400c91c 	.word	0x2400c91c
 8007828:	2400c918 	.word	0x2400c918

0800782c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800782c:	b40e      	push	{r1, r2, r3}
 800782e:	b580      	push	{r7, lr}
 8007830:	b085      	sub	sp, #20
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8007836:	f107 0320 	add.w	r3, r7, #32
 800783a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	2100      	movs	r1, #0
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f012 f86a 	bl	801991c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8007848:	4603      	mov	r3, r0
 800784a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800784c:	89fb      	ldrh	r3, [r7, #14]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007858:	b003      	add	sp, #12
 800785a:	4770      	bx	lr

0800785c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800785c:	b40c      	push	{r2, r3}
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800786a:	f107 031c 	add.w	r3, r7, #28
 800786e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8007870:	78f9      	ldrb	r1, [r7, #3]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f012 f850 	bl	801991c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800787c:	4603      	mov	r3, r0
 800787e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8007880:	89fb      	ldrh	r3, [r7, #14]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800788c:	b002      	add	sp, #8
 800788e:	4770      	bx	lr

08007890 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08a      	sub	sp, #40	; 0x28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d016      	beq.n	80078d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3322      	adds	r3, #34	; 0x22
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	8adb      	ldrh	r3, [r3, #22]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d105      	bne.n	80078be <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80078b2:	4b43      	ldr	r3, [pc, #268]	; (80079c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80078b4:	4a43      	ldr	r2, [pc, #268]	; (80079c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80078b6:	21c0      	movs	r1, #192	; 0xc0
 80078b8:	4843      	ldr	r0, [pc, #268]	; (80079c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80078ba:	f01e f95d 	bl	8025b78 <__assert_func>
            return buffer[pos];
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	8a9b      	ldrh	r3, [r3, #20]
 80078c2:	461a      	mov	r2, r3
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80078d2:	2300      	movs	r3, #0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d06a      	beq.n	80079ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f013 fbd5 	bl	801b088 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	3322      	adds	r3, #34	; 0x22
 80078e2:	623b      	str	r3, [r7, #32]
 80078e4:	2301      	movs	r3, #1
 80078e6:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	8adb      	ldrh	r3, [r3, #22]
 80078ec:	8bfa      	ldrh	r2, [r7, #30]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d305      	bcc.n	80078fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80078f2:	4b36      	ldr	r3, [pc, #216]	; (80079cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80078f4:	4a36      	ldr	r2, [pc, #216]	; (80079d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80078f6:	21c5      	movs	r1, #197	; 0xc5
 80078f8:	4833      	ldr	r0, [pc, #204]	; (80079c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80078fa:	f01e f93d 	bl	8025b78 <__assert_func>
            const uint16_t index = pos + offset;
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	8a9a      	ldrh	r2, [r3, #20]
 8007902:	8bfb      	ldrh	r3, [r7, #30]
 8007904:	4413      	add	r3, r2
 8007906:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8007908:	8bbb      	ldrh	r3, [r7, #28]
 800790a:	2b09      	cmp	r3, #9
 800790c:	d801      	bhi.n	8007912 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800790e:	8bbb      	ldrh	r3, [r7, #28]
 8007910:	e001      	b.n	8007916 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8007912:	8bbb      	ldrh	r3, [r7, #28]
 8007914:	3b0a      	subs	r3, #10
 8007916:	6a3a      	ldr	r2, [r7, #32]
 8007918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800791c:	f640 123f 	movw	r2, #2367	; 0x93f
 8007920:	4293      	cmp	r3, r2
 8007922:	bf0c      	ite	eq
 8007924:	2301      	moveq	r3, #1
 8007926:	2300      	movne	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d03f      	beq.n	80079ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3322      	adds	r3, #34	; 0x22
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	3222      	adds	r2, #34	; 0x22
 8007936:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	8ad2      	ldrh	r2, [r2, #22]
 800793c:	2a00      	cmp	r2, #0
 800793e:	d105      	bne.n	800794c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8007940:	4b1f      	ldr	r3, [pc, #124]	; (80079c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8007942:	4a20      	ldr	r2, [pc, #128]	; (80079c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8007944:	21c0      	movs	r1, #192	; 0xc0
 8007946:	4820      	ldr	r0, [pc, #128]	; (80079c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8007948:	f01e f916 	bl	8025b78 <__assert_func>
            return buffer[pos];
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	8a92      	ldrh	r2, [r2, #20]
 8007950:	4611      	mov	r1, r2
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	4613      	mov	r3, r2
 800795c:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	8adb      	ldrh	r3, [r3, #22]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d806      	bhi.n	8007974 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8007966:	4b1b      	ldr	r3, [pc, #108]	; (80079d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8007968:	4a1b      	ldr	r2, [pc, #108]	; (80079d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800796a:	f240 110d 	movw	r1, #269	; 0x10d
 800796e:	4816      	ldr	r0, [pc, #88]	; (80079c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8007970:	f01e f902 	bl	8025b78 <__assert_func>
            const uint16_t index = pos + 1;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	8a9b      	ldrh	r3, [r3, #20]
 8007978:	3301      	adds	r3, #1
 800797a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800797c:	89bb      	ldrh	r3, [r7, #12]
 800797e:	2b09      	cmp	r3, #9
 8007980:	d801      	bhi.n	8007986 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8007982:	89bb      	ldrh	r3, [r7, #12]
 8007984:	e000      	b.n	8007988 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8007986:	2300      	movs	r3, #0
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	89f9      	ldrh	r1, [r7, #14]
 800798c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8007990:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3322      	adds	r3, #34	; 0x22
 8007996:	61bb      	str	r3, [r7, #24]
 8007998:	f640 133f 	movw	r3, #2367	; 0x93f
 800799c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	8a9b      	ldrh	r3, [r3, #20]
 80079a2:	4619      	mov	r1, r3
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	8afa      	ldrh	r2, [r7, #22]
 80079a8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80079ac:	bf00      	nop
        }
    }
    return getNextChar();
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f013 fa4e 	bl	801ae50 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80079b4:	4603      	mov	r3, r0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3728      	adds	r7, #40	; 0x28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	08027970 	.word	0x08027970
 80079c4:	0802797c 	.word	0x0802797c
 80079c8:	08027a28 	.word	0x08027a28
 80079cc:	08027a74 	.word	0x08027a74
 80079d0:	08027a84 	.word	0x08027a84
 80079d4:	08027b58 	.word	0x08027b58
 80079d8:	08027b64 	.word	0x08027b64

080079dc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f013 f9eb 	bl	801adc0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80079ea:	bf00      	nop
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b088      	sub	sp, #32
 80079f6:	af02      	add	r7, sp, #8
 80079f8:	60f8      	str	r0, [r7, #12]
 80079fa:	1d38      	adds	r0, r7, #4
 80079fc:	e880 0006 	stmia.w	r0, {r1, r2}
 8007a00:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8007a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a06:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8007a08:	1d39      	adds	r1, r7, #4
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f010 fd08 	bl	801842c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8007a1c:	bf00      	nop
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8007a24:	b590      	push	{r4, r7, lr}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d127      	bne.n	8007a88 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8007a38:	88fb      	ldrh	r3, [r7, #6]
 8007a3a:	4a1e      	ldr	r2, [pc, #120]	; (8007ab4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8007a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d016      	beq.n	8007a72 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8007a44:	88fb      	ldrh	r3, [r7, #6]
 8007a46:	4a1b      	ldr	r2, [pc, #108]	; (8007ab4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8007a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a4c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	4413      	add	r3, r2
 8007a56:	4a18      	ldr	r2, [pc, #96]	; (8007ab8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8007a58:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	4413      	add	r3, r2
 8007a62:	4a16      	ldr	r2, [pc, #88]	; (8007abc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8007a64:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	e00a      	b.n	8007a88 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8007a72:	4b11      	ldr	r3, [pc, #68]	; (8007ab8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8007a74:	4a12      	ldr	r2, [pc, #72]	; (8007ac0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8007a76:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8007a78:	4a12      	ldr	r2, [pc, #72]	; (8007ac4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8007a7a:	4b10      	ldr	r3, [pc, #64]	; (8007abc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8007a7c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8007a7e:	88fb      	ldrh	r3, [r7, #6]
 8007a80:	4a11      	ldr	r2, [pc, #68]	; (8007ac8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8007a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a86:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00d      	beq.n	8007aaa <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8007a8e:	4a0f      	ldr	r2, [pc, #60]	; (8007acc <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8007a90:	88fb      	ldrh	r3, [r7, #6]
 8007a92:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8007a94:	f000 f83e 	bl	8007b14 <_ZN17TypedTextDatabase8getFontsEv>
 8007a98:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8007a9a:	f000 f833 	bl	8007b04 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f7ff fea5 	bl	80077f4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8007aaa:	bf00      	nop
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd90      	pop	{r4, r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	24003110 	.word	0x24003110
 8007ab8:	24003118 	.word	0x24003118
 8007abc:	2400311c 	.word	0x2400311c
 8007ac0:	900007f8 	.word	0x900007f8
 8007ac4:	900007e8 	.word	0x900007e8
 8007ac8:	90000824 	.word	0x90000824
 8007acc:	24003114 	.word	0x24003114

08007ad0 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8007adc:	4b07      	ldr	r3, [pc, #28]	; (8007afc <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	4b07      	ldr	r3, [pc, #28]	; (8007b00 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8007ae2:	6819      	ldr	r1, [r3, #0]
 8007ae4:	887b      	ldrh	r3, [r7, #2]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	440b      	add	r3, r1
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	4413      	add	r3, r2
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	24003118 	.word	0x24003118
 8007b00:	2400311c 	.word	0x2400311c

08007b04 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8007b04:	b480      	push	{r7}
 8007b06:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8007b08:	2304      	movs	r3, #4
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8007b14:	b480      	push	{r7}
 8007b16:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8007b18:	4b02      	ldr	r3, [pc, #8]	; (8007b24 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	24003120 	.word	0x24003120

08007b28 <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_14_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d118      	bne.n	8007b6a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d113      	bne.n	8007b6a <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_20_4bpp()),
 8007b42:	f7ff fd8f 	bl	8007664 <_Z23getFont_verdana_20_4bppv>
 8007b46:	4603      	mov	r3, r0
};
 8007b48:	4a0a      	ldr	r2, [pc, #40]	; (8007b74 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007b4a:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8007b4c:	f7ff fde0 	bl	8007710 <_Z23getFont_verdana_40_4bppv>
 8007b50:	4603      	mov	r3, r0
};
 8007b52:	4a08      	ldr	r2, [pc, #32]	; (8007b74 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007b54:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 8007b56:	f7ff fcd9 	bl	800750c <_Z23getFont_verdana_10_4bppv>
 8007b5a:	4603      	mov	r3, r0
};
 8007b5c:	4a05      	ldr	r2, [pc, #20]	; (8007b74 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007b5e:	6093      	str	r3, [r2, #8]
    &(getFont_verdana_14_4bpp())
 8007b60:	f7ff fd2a 	bl	80075b8 <_Z23getFont_verdana_14_4bppv>
 8007b64:	4603      	mov	r3, r0
};
 8007b66:	4a03      	ldr	r2, [pc, #12]	; (8007b74 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007b68:	60d3      	str	r3, [r2, #12]
} // namespace TypedTextDatabase
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	24003120 	.word	0x24003120

08007b78 <_GLOBAL__sub_I_touchgfx_fonts>:
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007b80:	2001      	movs	r0, #1
 8007b82:	f7ff ffd1 	bl	8007b28 <_Z41__static_initialization_and_destruction_0ii>
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fc f9ee 	bl	8003f7c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8007ba0:	4a03      	ldr	r2, [pc, #12]	; (8007bb0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	601a      	str	r2, [r3, #0]
{

}
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	08027eb0 	.word	0x08027eb0

08007bb4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]
{

}
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <_ZN5Model4tickEv>:

void Model::tick()
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]

}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
    {
    }
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
    {
    }
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
    {
 8007c14:	4a04      	ldr	r2, [pc, #16]	; (8007c28 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	601a      	str	r2, [r3, #0]
    }
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	08028674 	.word	0x08028674

08007c2c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
    }
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff ffe9 	bl	8007c0c <_ZN8touchgfx9PresenterD1Ev>
 8007c3a:	2104      	movs	r1, #4
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f01d ff6c 	bl	8025b1a <_ZdlPvj>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
    {
 8007c54:	4a04      	ldr	r2, [pc, #16]	; (8007c68 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	601a      	str	r2, [r3, #0]
    }
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	08028674 	.word	0x08028674

08007c6c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	4a06      	ldr	r2, [pc, #24]	; (8007c90 <_ZN13ModelListenerC1Ev+0x24>)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	605a      	str	r2, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4618      	mov	r0, r3
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	08028664 	.word	0x08028664

08007c94 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	4a04      	ldr	r2, [pc, #16]	; (8007cb0 <_ZN13ModelListenerD1Ev+0x1c>)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	08028664 	.word	0x08028664

08007cb4 <_ZN13ModelListenerD0Ev>:
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff ffe9 	bl	8007c94 <_ZN13ModelListenerD1Ev>
 8007cc2:	2108      	movs	r1, #8
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f01d ff28 	bl	8025b1a <_ZdlPvj>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	4a09      	ldr	r2, [pc, #36]	; (8007d04 <_ZN16Screen1PresenterD1Ev+0x30>)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	4a09      	ldr	r2, [pc, #36]	; (8007d08 <_ZN16Screen1PresenterD1Ev+0x34>)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	605a      	str	r2, [r3, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3304      	adds	r3, #4
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7ff ffd1 	bl	8007c94 <_ZN13ModelListenerD1Ev>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff ff89 	bl	8007c0c <_ZN8touchgfx9PresenterD1Ev>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	0802863c 	.word	0x0802863c
 8007d08:	08028654 	.word	0x08028654

08007d0c <_ZThn4_N16Screen1PresenterD1Ev>:
 8007d0c:	f1a0 0004 	sub.w	r0, r0, #4
 8007d10:	e7e0      	b.n	8007cd4 <_ZN16Screen1PresenterD1Ev>
 8007d12:	bf00      	nop

08007d14 <_ZN16Screen1PresenterD0Ev>:
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff ffd9 	bl	8007cd4 <_ZN16Screen1PresenterD1Ev>
 8007d22:	2110      	movs	r1, #16
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f01d fef8 	bl	8025b1a <_ZdlPvj>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <_ZThn4_N16Screen1PresenterD0Ev>:
 8007d34:	f1a0 0004 	sub.w	r0, r0, #4
 8007d38:	e7ec      	b.n	8007d14 <_ZN16Screen1PresenterD0Ev>
	...

08007d3c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
    : view(v)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff ff7f 	bl	8007c4c <_ZN8touchgfx9PresenterC1Ev>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff ff8a 	bl	8007c6c <_ZN13ModelListenerC1Ev>
 8007d58:	4a06      	ldr	r2, [pc, #24]	; (8007d74 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	4a06      	ldr	r2, [pc, #24]	; (8007d78 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	605a      	str	r2, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	60da      	str	r2, [r3, #12]
{

}
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	0802863c 	.word	0x0802863c
 8007d78:	08028654 	.word	0x08028654

08007d7c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]

}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]

}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	4a05      	ldr	r2, [pc, #20]	; (8007dc4 <_ZN11Screen1ViewD1Ev+0x20>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fd ff8f 	bl	8005cd8 <_ZN15Screen1ViewBaseD1Ev>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	0802868c 	.word	0x0802868c

08007dc8 <_ZN11Screen1ViewD0Ev>:
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff ffe7 	bl	8007da4 <_ZN11Screen1ViewD1Ev>
 8007dd6:	f242 0138 	movw	r1, #8248	; 0x2038
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f01d fe9d 	bl	8025b1a <_ZdlPvj>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fd ffc4 	bl	8005d84 <_ZN15Screen1ViewBaseC1Ev>
 8007dfc:	4a03      	ldr	r2, [pc, #12]	; (8007e0c <_ZN11Screen1ViewC1Ev+0x20>)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	601a      	str	r2, [r3, #0]
{

}
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	0802868c 	.word	0x0802868c

08007e10 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe fcf0 	bl	8006800 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fd fc48 	bl	80056c8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8007e38:	bf00      	nop
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	4a09      	ldr	r2, [pc, #36]	; (8007e70 <_ZN16Screen2PresenterD1Ev+0x30>)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	4a09      	ldr	r2, [pc, #36]	; (8007e74 <_ZN16Screen2PresenterD1Ev+0x34>)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	605a      	str	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7ff ff1b 	bl	8007c94 <_ZN13ModelListenerD1Ev>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff fed3 	bl	8007c0c <_ZN8touchgfx9PresenterD1Ev>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	080286c0 	.word	0x080286c0
 8007e74:	080286d8 	.word	0x080286d8

08007e78 <_ZThn4_N16Screen2PresenterD1Ev>:
 8007e78:	f1a0 0004 	sub.w	r0, r0, #4
 8007e7c:	e7e0      	b.n	8007e40 <_ZN16Screen2PresenterD1Ev>
 8007e7e:	bf00      	nop

08007e80 <_ZN16Screen2PresenterD0Ev>:
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff ffd9 	bl	8007e40 <_ZN16Screen2PresenterD1Ev>
 8007e8e:	2110      	movs	r1, #16
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f01d fe42 	bl	8025b1a <_ZdlPvj>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <_ZThn4_N16Screen2PresenterD0Ev>:
 8007ea0:	f1a0 0004 	sub.w	r0, r0, #4
 8007ea4:	e7ec      	b.n	8007e80 <_ZN16Screen2PresenterD0Ev>
	...

08007ea8 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
    : view(v)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff fec9 	bl	8007c4c <_ZN8touchgfx9PresenterC1Ev>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff fed4 	bl	8007c6c <_ZN13ModelListenerC1Ev>
 8007ec4:	4a06      	ldr	r2, [pc, #24]	; (8007ee0 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	4a06      	ldr	r2, [pc, #24]	; (8007ee4 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	605a      	str	r2, [r3, #4]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	60da      	str	r2, [r3, #12]
{

}
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	080286c0 	.word	0x080286c0
 8007ee4:	080286d8 	.word	0x080286d8

08007ee8 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]

}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]

}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	4a05      	ldr	r2, [pc, #20]	; (8007f30 <_ZN11Screen2ViewD1Ev+0x20>)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe fffb 	bl	8006f1c <_ZN15Screen2ViewBaseD1Ev>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	080286e8 	.word	0x080286e8

08007f34 <_ZN11Screen2ViewD0Ev>:
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff ffe7 	bl	8007f10 <_ZN11Screen2ViewD1Ev>
 8007f42:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f01d fde7 	bl	8025b1a <_ZdlPvj>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff f822 	bl	8006fac <_ZN15Screen2ViewBaseC1Ev>
 8007f68:	4a03      	ldr	r2, [pc, #12]	; (8007f78 <_ZN11Screen2ViewC1Ev+0x20>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	601a      	str	r2, [r3, #0]
{

}
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	080286e8 	.word	0x080286e8

08007f7c <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff f9d8 	bl	800733c <_ZN15Screen2ViewBase11setupScreenEv>
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fd fb92 	bl	80056c8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d103      	bne.n	8007fc4 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8007fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	e02c      	b.n	800801e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	891a      	ldrh	r2, [r3, #8]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	68da      	ldr	r2, [r3, #12]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	695a      	ldr	r2, [r3, #20]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a0c      	ldr	r2, [pc, #48]	; (8008028 <FT5336_RegisterBusIO+0x7c>)
 8007ff8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a0b      	ldr	r2, [pc, #44]	; (800802c <FT5336_RegisterBusIO+0x80>)
 8007ffe:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d004      	beq.n	8008018 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4798      	blx	r3
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	e002      	b.n	800801e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8008018:	f04f 33ff 	mov.w	r3, #4294967295
 800801c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800801e:	68fb      	ldr	r3, [r7, #12]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	08008433 	.word	0x08008433
 800802c:	08008467 	.word	0x08008467

08008030 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2201      	movs	r2, #1
 800803e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2201      	movs	r2, #1
 8008044:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2205      	movs	r2, #5
 800804a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008052:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	f44f 7288 	mov.w	r2, #272	; 0x110
 800805a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10d      	bne.n	800809c <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f98e 	bl	80083a8 <FT5336_DisableIT>
 800808c:	4602      	mov	r2, r0
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4413      	add	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 80080a2:	f04f 33ff 	mov.w	r3, #4294967295
 80080a6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80080a8:	68fb      	ldr	r3, [r7, #12]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b085      	sub	sp, #20
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d103      	bne.n	80080d0 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 80080d0:	68fb      	ldr	r3, [r7, #12]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f103 0218 	add.w	r2, r3, #24
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	4619      	mov	r1, r3
 80080f6:	4610      	mov	r0, r2
 80080f8:	f000 fa2c 	bl	8008554 <ft5336_radian_value>
 80080fc:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f103 0218 	add.w	r2, r3, #24
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	b2db      	uxtb	r3, r3
 800810a:	4619      	mov	r1, r3
 800810c:	4610      	mov	r0, r2
 800810e:	f000 fa32 	bl	8008576 <ft5336_offset_left_right>
 8008112:	4602      	mov	r2, r0
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4413      	add	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f103 0218 	add.w	r2, r3, #24
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	4619      	mov	r1, r3
 8008128:	4610      	mov	r0, r2
 800812a:	f000 fa35 	bl	8008598 <ft5336_offset_up_down>
 800812e:	4602      	mov	r2, r0
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f103 0218 	add.w	r2, r3, #24
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	4619      	mov	r1, r3
 8008144:	4610      	mov	r0, r2
 8008146:	f000 fa38 	bl	80085ba <ft5336_disatnce_left_right>
 800814a:	4602      	mov	r2, r0
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4413      	add	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f103 0218 	add.w	r2, r3, #24
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	b2db      	uxtb	r3, r3
 800815e:	4619      	mov	r1, r3
 8008160:	4610      	mov	r0, r2
 8008162:	f000 fa3b 	bl	80085dc <ft5336_distance_up_down>
 8008166:	4602      	mov	r2, r0
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4413      	add	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f103 0218 	add.w	r2, r3, #24
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	b2db      	uxtb	r3, r3
 800817a:	4619      	mov	r1, r3
 800817c:	4610      	mov	r0, r2
 800817e:	f000 fa3e 	bl	80085fe <ft5336_distance_zoom>
 8008182:	4602      	mov	r2, r0
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8008190:	f04f 33ff 	mov.w	r3, #4294967295
 8008194:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008196:	68fb      	ldr	r3, [r7, #12]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3318      	adds	r3, #24
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 fa46 	bl	8008642 <ft5336_chip_id>
 80081b6:	4603      	mov	r3, r0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f90f 	bl	80083f2 <FT5336_DetectTouch>
 80081d4:	4603      	mov	r3, r0
 80081d6:	461a      	mov	r2, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f103 0018 	add.w	r0, r3, #24
 80081e2:	f107 0208 	add.w	r2, r7, #8
 80081e6:	2304      	movs	r3, #4
 80081e8:	2103      	movs	r1, #3
 80081ea:	f000 f956 	bl	800849a <ft5336_read_reg>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 80081f4:	f04f 33ff 	mov.w	r3, #4294967295
 80081f8:	60fb      	str	r3, [r7, #12]
 80081fa:	e00f      	b.n	800821c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80081fc:	7a3b      	ldrb	r3, [r7, #8]
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008204:	7a7a      	ldrb	r2, [r7, #9]
 8008206:	431a      	orrs	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800820c:	7abb      	ldrb	r3, [r7, #10]
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008214:	7afa      	ldrb	r2, [r7, #11]
 8008216:	431a      	orrs	r2, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800821c:	68fb      	ldr	r3, [r7, #12]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b08c      	sub	sp, #48	; 0x30
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f8dc 	bl	80083f2 <FT5336_DetectTouch>
 800823a:	4603      	mov	r3, r0
 800823c:	461a      	mov	r2, r3
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f103 0018 	add.w	r0, r3, #24
 8008248:	f107 0208 	add.w	r2, r7, #8
 800824c:	231e      	movs	r3, #30
 800824e:	2103      	movs	r1, #3
 8008250:	f000 f923 	bl	800849a <ft5336_read_reg>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800825a:	f04f 33ff 	mov.w	r3, #4294967295
 800825e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008260:	e07e      	b.n	8008360 <FT5336_GetMultiTouchState+0x13a>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8008262:	2300      	movs	r3, #0
 8008264:	62bb      	str	r3, [r7, #40]	; 0x28
 8008266:	e078      	b.n	800835a <FT5336_GetMultiTouchState+0x134>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8008268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800826a:	4613      	mov	r3, r2
 800826c:	005b      	lsls	r3, r3, #1
 800826e:	4413      	add	r3, r2
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008276:	4413      	add	r3, r2
 8008278:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800827c:	021b      	lsls	r3, r3, #8
 800827e:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8008282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008284:	4613      	mov	r3, r2
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	4413      	add	r3, r2
 800828a:	005b      	lsls	r3, r3, #1
 800828c:	3301      	adds	r3, #1
 800828e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008292:	4413      	add	r3, r2
 8008294:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008298:	ea41 0203 	orr.w	r2, r1, r3
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80082a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082a8:	4613      	mov	r3, r2
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	4413      	add	r3, r2
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	3302      	adds	r3, #2
 80082b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80082b6:	4413      	add	r3, r2
 80082b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 80082c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082c4:	4613      	mov	r3, r2
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	4413      	add	r3, r2
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	3303      	adds	r3, #3
 80082ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80082d2:	4413      	add	r3, r2
 80082d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80082d8:	4319      	orrs	r1, r3
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082de:	3206      	adds	r2, #6
 80082e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80082e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082e6:	4613      	mov	r3, r2
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	4413      	add	r3, r2
 80082ec:	005b      	lsls	r3, r3, #1
 80082ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80082f2:	4413      	add	r3, r2
 80082f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80082f8:	099b      	lsrs	r3, r3, #6
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	4619      	mov	r1, r3
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008302:	3210      	adds	r2, #16
 8008304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8008308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800830a:	4613      	mov	r3, r2
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	4413      	add	r3, r2
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	3304      	adds	r3, #4
 8008314:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008318:	4413      	add	r3, r2
 800831a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800831e:	4619      	mov	r1, r3
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	330a      	adds	r3, #10
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800832c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800832e:	4613      	mov	r3, r2
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	4413      	add	r3, r2
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	3305      	adds	r3, #5
 8008338:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800833c:	4413      	add	r3, r2
 800833e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008342:	091b      	lsrs	r3, r3, #4
 8008344:	b2db      	uxtb	r3, r3
 8008346:	4619      	mov	r1, r3
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	3314      	adds	r3, #20
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8008354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008356:	3301      	adds	r3, #1
 8008358:	62bb      	str	r3, [r7, #40]	; 0x28
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	2b04      	cmp	r3, #4
 800835e:	d983      	bls.n	8008268 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8008360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008362:	4618      	mov	r0, r3
 8008364:	3730      	adds	r7, #48	; 0x30
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	3318      	adds	r3, #24
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	4618      	mov	r0, r3
 800837c:	f000 f8bb 	bl	80084f6 <ft5336_gest_id>
 8008380:	4603      	mov	r3, r0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	3318      	adds	r3, #24
 8008396:	2101      	movs	r1, #1
 8008398:	4618      	mov	r0, r3
 800839a:	f000 f941 	bl	8008620 <ft5336_g_mode>
 800839e:	4603      	mov	r3, r0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3318      	adds	r3, #24
 80083b4:	2100      	movs	r1, #0
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 f932 	bl	8008620 <ft5336_g_mode>
 80083bc:	4603      	mov	r3, r0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b083      	sub	sp, #12
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3318      	adds	r3, #24
 80083fe:	f107 020b 	add.w	r2, r7, #11
 8008402:	4611      	mov	r1, r2
 8008404:	4618      	mov	r0, r3
 8008406:	f000 f886 	bl	8008516 <ft5336_td_status>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8008410:	f04f 33ff 	mov.w	r3, #4294967295
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	e007      	b.n	8008428 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8008418:	7afb      	ldrb	r3, [r7, #11]
 800841a:	2b05      	cmp	r3, #5
 800841c:	d902      	bls.n	8008424 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	e001      	b.n	8008428 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8008424:	7afb      	ldrb	r3, [r7, #11]
 8008426:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8008428:	68fb      	ldr	r3, [r7, #12]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008432:	b590      	push	{r4, r7, lr}
 8008434:	b087      	sub	sp, #28
 8008436:	af00      	add	r7, sp, #0
 8008438:	60f8      	str	r0, [r7, #12]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	461a      	mov	r2, r3
 800843e:	460b      	mov	r3, r1
 8008440:	72fb      	strb	r3, [r7, #11]
 8008442:	4613      	mov	r3, r2
 8008444:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	691c      	ldr	r4, [r3, #16]
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	8918      	ldrh	r0, [r3, #8]
 8008452:	7afb      	ldrb	r3, [r7, #11]
 8008454:	b299      	uxth	r1, r3
 8008456:	893b      	ldrh	r3, [r7, #8]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	47a0      	blx	r4
 800845c:	4603      	mov	r3, r0
}
 800845e:	4618      	mov	r0, r3
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	bd90      	pop	{r4, r7, pc}

08008466 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008466:	b590      	push	{r4, r7, lr}
 8008468:	b087      	sub	sp, #28
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	461a      	mov	r2, r3
 8008472:	460b      	mov	r3, r1
 8008474:	72fb      	strb	r3, [r7, #11]
 8008476:	4613      	mov	r3, r2
 8008478:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	68dc      	ldr	r4, [r3, #12]
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	8918      	ldrh	r0, [r3, #8]
 8008486:	7afb      	ldrb	r3, [r7, #11]
 8008488:	b299      	uxth	r1, r3
 800848a:	893b      	ldrh	r3, [r7, #8]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	47a0      	blx	r4
 8008490:	4603      	mov	r3, r0
}
 8008492:	4618      	mov	r0, r3
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	bd90      	pop	{r4, r7, pc}

0800849a <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800849a:	b590      	push	{r4, r7, lr}
 800849c:	b085      	sub	sp, #20
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	461a      	mov	r2, r3
 80084a6:	460b      	mov	r3, r1
 80084a8:	72fb      	strb	r3, [r7, #11]
 80084aa:	4613      	mov	r3, r2
 80084ac:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	685c      	ldr	r4, [r3, #4]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6898      	ldr	r0, [r3, #8]
 80084b6:	893b      	ldrh	r3, [r7, #8]
 80084b8:	7af9      	ldrb	r1, [r7, #11]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	47a0      	blx	r4
 80084be:	4603      	mov	r3, r0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd90      	pop	{r4, r7, pc}

080084c8 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80084c8:	b590      	push	{r4, r7, lr}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	607a      	str	r2, [r7, #4]
 80084d2:	461a      	mov	r2, r3
 80084d4:	460b      	mov	r3, r1
 80084d6:	72fb      	strb	r3, [r7, #11]
 80084d8:	4613      	mov	r3, r2
 80084da:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681c      	ldr	r4, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6898      	ldr	r0, [r3, #8]
 80084e4:	893b      	ldrh	r3, [r7, #8]
 80084e6:	7af9      	ldrb	r1, [r7, #11]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	47a0      	blx	r4
 80084ec:	4603      	mov	r3, r0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd90      	pop	{r4, r7, pc}

080084f6 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b082      	sub	sp, #8
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8008500:	2301      	movs	r3, #1
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	2101      	movs	r1, #1
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff ffc7 	bl	800849a <ft5336_read_reg>
 800850c:	4603      	mov	r3, r0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8008520:	2301      	movs	r3, #1
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	2102      	movs	r1, #2
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff ffb7 	bl	800849a <ft5336_read_reg>
 800852c:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f003 030f 	and.w	r3, r3, #15
 800853c:	b2da      	uxtb	r2, r3
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781a      	ldrb	r2, [r3, #0]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800854a:	68fb      	ldr	r3, [r7, #12]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8008560:	1cfa      	adds	r2, r7, #3
 8008562:	2301      	movs	r3, #1
 8008564:	2191      	movs	r1, #145	; 0x91
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff ffae 	bl	80084c8 <ft5336_write_reg>
 800856c:	4603      	mov	r3, r0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	460b      	mov	r3, r1
 8008580:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8008582:	1cfa      	adds	r2, r7, #3
 8008584:	2301      	movs	r3, #1
 8008586:	2192      	movs	r1, #146	; 0x92
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff ff9d 	bl	80084c8 <ft5336_write_reg>
 800858e:	4603      	mov	r3, r0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 80085a4:	1cfa      	adds	r2, r7, #3
 80085a6:	2301      	movs	r3, #1
 80085a8:	2193      	movs	r1, #147	; 0x93
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7ff ff8c 	bl	80084c8 <ft5336_write_reg>
 80085b0:	4603      	mov	r3, r0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	460b      	mov	r3, r1
 80085c4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 80085c6:	1cfa      	adds	r2, r7, #3
 80085c8:	2301      	movs	r3, #1
 80085ca:	2194      	movs	r1, #148	; 0x94
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7ff ff7b 	bl	80084c8 <ft5336_write_reg>
 80085d2:	4603      	mov	r3, r0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 80085e8:	1cfa      	adds	r2, r7, #3
 80085ea:	2301      	movs	r3, #1
 80085ec:	2195      	movs	r1, #149	; 0x95
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7ff ff6a 	bl	80084c8 <ft5336_write_reg>
 80085f4:	4603      	mov	r3, r0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b082      	sub	sp, #8
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	460b      	mov	r3, r1
 8008608:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800860a:	1cfa      	adds	r2, r7, #3
 800860c:	2301      	movs	r3, #1
 800860e:	2196      	movs	r1, #150	; 0x96
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff ff59 	bl	80084c8 <ft5336_write_reg>
 8008616:	4603      	mov	r3, r0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800862c:	1cfa      	adds	r2, r7, #3
 800862e:	2301      	movs	r3, #1
 8008630:	21a4      	movs	r1, #164	; 0xa4
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7ff ff48 	bl	80084c8 <ft5336_write_reg>
 8008638:	4603      	mov	r3, r0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800864c:	2301      	movs	r3, #1
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	21a8      	movs	r1, #168	; 0xa8
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7ff ff21 	bl	800849a <ft5336_read_reg>
 8008658:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d107      	bne.n	8008670 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781a      	ldrb	r2, [r3, #0]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	781a      	ldrb	r2, [r3, #0]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8008670:	68fb      	ldr	r3, [r7, #12]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 800867a:	b480      	push	{r7}
 800867c:	b083      	sub	sp, #12
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008688:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008690:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008698:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80086a0:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80086a8:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80086b0:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80086b8:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086c0:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80086c8:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 80086ca:	2300      	movs	r3, #0
};
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b09c      	sub	sp, #112	; 0x70
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	70fb      	strb	r3, [r7, #3]
 80086e4:	4613      	mov	r3, r2
 80086e6:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 80086e8:	f107 0320 	add.w	r3, r7, #32
 80086ec:	2250      	movs	r2, #80	; 0x50
 80086ee:	2100      	movs	r1, #0
 80086f0:	4618      	mov	r0, r3
 80086f2:	f01d facd 	bl	8025c90 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80086f6:	f107 030c 	add.w	r3, r7, #12
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	605a      	str	r2, [r3, #4]
 8008700:	609a      	str	r2, [r3, #8]
 8008702:	60da      	str	r2, [r3, #12]
 8008704:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d105      	bne.n	8008718 <MX25LM51245G_AutoPollingMemReady+0x40>
 800870c:	78bb      	ldrb	r3, [r7, #2]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d102      	bne.n	8008718 <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 8008712:	f04f 33ff 	mov.w	r3, #4294967295
 8008716:	e088      	b.n	800882a <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008718:	2300      	movs	r3, #0
 800871a:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800871c:	2300      	movs	r3, #0
 800871e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <MX25LM51245G_AutoPollingMemReady+0x52>
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <MX25LM51245G_AutoPollingMemReady+0x54>
 800872a:	2304      	movs	r3, #4
 800872c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800872e:	78bb      	ldrb	r3, [r7, #2]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d101      	bne.n	8008738 <MX25LM51245G_AutoPollingMemReady+0x60>
 8008734:	2308      	movs	r3, #8
 8008736:	e000      	b.n	800873a <MX25LM51245G_AutoPollingMemReady+0x62>
 8008738:	2300      	movs	r3, #0
 800873a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800873c:	78fb      	ldrb	r3, [r7, #3]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <MX25LM51245G_AutoPollingMemReady+0x6e>
 8008742:	2300      	movs	r3, #0
 8008744:	e000      	b.n	8008748 <MX25LM51245G_AutoPollingMemReady+0x70>
 8008746:	2310      	movs	r3, #16
 8008748:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <MX25LM51245G_AutoPollingMemReady+0x7c>
 8008750:	2305      	movs	r3, #5
 8008752:	e001      	b.n	8008758 <MX25LM51245G_AutoPollingMemReady+0x80>
 8008754:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8008758:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800875a:	78fb      	ldrb	r3, [r7, #3]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <MX25LM51245G_AutoPollingMemReady+0x8c>
 8008760:	2300      	movs	r3, #0
 8008762:	e001      	b.n	8008768 <MX25LM51245G_AutoPollingMemReady+0x90>
 8008764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800876a:	78bb      	ldrb	r3, [r7, #2]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d102      	bne.n	8008776 <MX25LM51245G_AutoPollingMemReady+0x9e>
 8008770:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008774:	e000      	b.n	8008778 <MX25LM51245G_AutoPollingMemReady+0xa0>
 8008776:	2300      	movs	r3, #0
 8008778:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800877a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800877e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008784:	2300      	movs	r3, #0
 8008786:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d102      	bne.n	8008794 <MX25LM51245G_AutoPollingMemReady+0xbc>
 800878e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008792:	e001      	b.n	8008798 <MX25LM51245G_AutoPollingMemReady+0xc0>
 8008794:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008798:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800879a:	78bb      	ldrb	r3, [r7, #2]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d102      	bne.n	80087a6 <MX25LM51245G_AutoPollingMemReady+0xce>
 80087a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087a4:	e000      	b.n	80087a8 <MX25LM51245G_AutoPollingMemReady+0xd0>
 80087a6:	2300      	movs	r3, #0
 80087a8:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80087aa:	78fb      	ldrb	r3, [r7, #3]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <MX25LM51245G_AutoPollingMemReady+0xdc>
 80087b0:	2300      	movs	r3, #0
 80087b2:	e000      	b.n	80087b6 <MX25LM51245G_AutoPollingMemReady+0xde>
 80087b4:	2305      	movs	r3, #5
 80087b6:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80087b8:	78bb      	ldrb	r3, [r7, #2]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d101      	bne.n	80087c2 <MX25LM51245G_AutoPollingMemReady+0xea>
 80087be:	2302      	movs	r3, #2
 80087c0:	e000      	b.n	80087c4 <MX25LM51245G_AutoPollingMemReady+0xec>
 80087c2:	2301      	movs	r3, #1
 80087c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80087c6:	78bb      	ldrb	r3, [r7, #2]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d102      	bne.n	80087d2 <MX25LM51245G_AutoPollingMemReady+0xfa>
 80087cc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80087d0:	e000      	b.n	80087d4 <MX25LM51245G_AutoPollingMemReady+0xfc>
 80087d2:	2300      	movs	r3, #0
 80087d4:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80087d6:	2300      	movs	r3, #0
 80087d8:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 80087da:	2300      	movs	r3, #0
 80087dc:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 80087de:	2301      	movs	r3, #1
 80087e0:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80087e2:	2300      	movs	r3, #0
 80087e4:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 80087e6:	2310      	movs	r3, #16
 80087e8:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80087ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80087ee:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80087f0:	f107 0320 	add.w	r3, r7, #32
 80087f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f004 fd84 	bl	800d308 <HAL_OSPI_Command>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 8008806:	f04f 33ff 	mov.w	r3, #4294967295
 800880a:	e00e      	b.n	800882a <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800880c:	f107 030c 	add.w	r3, r7, #12
 8008810:	f241 3288 	movw	r2, #5000	; 0x1388
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f004 ff19 	bl	800d64e <HAL_OSPI_AutoPolling>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 8008822:	f04f 33ff 	mov.w	r3, #4294967295
 8008826:	e000      	b.n	800882a <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3770      	adds	r7, #112	; 0x70
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b098      	sub	sp, #96	; 0x60
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	70fb      	strb	r3, [r7, #3]
 800883e:	4613      	mov	r3, r2
 8008840:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 8008842:	f107 0310 	add.w	r3, r7, #16
 8008846:	2250      	movs	r2, #80	; 0x50
 8008848:	2100      	movs	r1, #0
 800884a:	4618      	mov	r0, r3
 800884c:	f01d fa20 	bl	8025c90 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8008850:	f107 0308 	add.w	r3, r7, #8
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 800885a:	78fb      	ldrb	r3, [r7, #3]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d105      	bne.n	800886c <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8008860:	78bb      	ldrb	r3, [r7, #2]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d102      	bne.n	800886c <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 8008866:	f04f 33ff 	mov.w	r3, #4294967295
 800886a:	e088      	b.n	800897e <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 800886c:	2301      	movs	r3, #1
 800886e:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008870:	2300      	movs	r3, #0
 8008872:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008874:	78fb      	ldrb	r3, [r7, #3]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 800887e:	2304      	movs	r3, #4
 8008880:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008882:	2300      	movs	r3, #0
 8008884:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008886:	78fb      	ldrb	r3, [r7, #3]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 800888c:	2300      	movs	r3, #0
 800888e:	e000      	b.n	8008892 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 8008890:	2310      	movs	r3, #16
 8008892:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d106      	bne.n	80088a8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 800889a:	78bb      	ldrb	r3, [r7, #2]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 80088a0:	230b      	movs	r3, #11
 80088a2:	e003      	b.n	80088ac <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 80088a4:	230c      	movs	r3, #12
 80088a6:	e001      	b.n	80088ac <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 80088a8:	f64e 4313 	movw	r3, #60435	; 0xec13
 80088ac:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80088ae:	78fb      	ldrb	r3, [r7, #3]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d102      	bne.n	80088ba <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 80088b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088b8:	e001      	b.n	80088be <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 80088ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088be:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80088c0:	2300      	movs	r3, #0
 80088c2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 80088c4:	78bb      	ldrb	r3, [r7, #2]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d102      	bne.n	80088d0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 80088ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088ce:	e001      	b.n	80088d4 <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 80088d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80088d4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80088d6:	2300      	movs	r3, #0
 80088d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d102      	bne.n	80088e6 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 80088e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088e4:	e001      	b.n	80088ea <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 80088e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80088ea:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 80088f6:	2308      	movs	r3, #8
 80088f8:	e000      	b.n	80088fc <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 80088fa:	2306      	movs	r3, #6
 80088fc:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80088fe:	2300      	movs	r3, #0
 8008900:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008902:	2300      	movs	r3, #0
 8008904:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008906:	f107 0310 	add.w	r3, r7, #16
 800890a:	f241 3288 	movw	r2, #5000	; 0x1388
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f004 fcf9 	bl	800d308 <HAL_OSPI_Command>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d002      	beq.n	8008922 <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 800891c:	f04f 33ff 	mov.w	r3, #4294967295
 8008920:	e02d      	b.n	800897e <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8008922:	2302      	movs	r3, #2
 8008924:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8008926:	78fb      	ldrb	r3, [r7, #3]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d106      	bne.n	800893a <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 800892c:	78bb      	ldrb	r3, [r7, #2]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 8008932:	2302      	movs	r3, #2
 8008934:	e003      	b.n	800893e <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8008936:	2312      	movs	r3, #18
 8008938:	e001      	b.n	800893e <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 800893a:	f241 23ed 	movw	r3, #4845	; 0x12ed
 800893e:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008944:	f107 0310 	add.w	r3, r7, #16
 8008948:	f241 3288 	movw	r2, #5000	; 0x1388
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f004 fcda 	bl	800d308 <HAL_OSPI_Command>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 800895a:	f04f 33ff 	mov.w	r3, #4294967295
 800895e:	e00e      	b.n	800897e <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8008960:	2300      	movs	r3, #0
 8008962:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8008964:	f107 0308 	add.w	r3, r7, #8
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f004 fef6 	bl	800d75c <HAL_OSPI_MemoryMapped>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 8008976:	f04f 33ff 	mov.w	r3, #4294967295
 800897a:	e000      	b.n	800897e <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3760      	adds	r7, #96	; 0x60
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b098      	sub	sp, #96	; 0x60
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	460b      	mov	r3, r1
 8008990:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8008992:	f107 0310 	add.w	r3, r7, #16
 8008996:	2250      	movs	r2, #80	; 0x50
 8008998:	2100      	movs	r1, #0
 800899a:	4618      	mov	r0, r3
 800899c:	f01d f978 	bl	8025c90 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80089a0:	f107 0308 	add.w	r3, r7, #8
 80089a4:	2200      	movs	r2, #0
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80089aa:	2301      	movs	r3, #1
 80089ac:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80089ae:	2300      	movs	r3, #0
 80089b0:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80089b2:	2304      	movs	r3, #4
 80089b4:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 80089b6:	2308      	movs	r3, #8
 80089b8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80089ba:	2310      	movs	r3, #16
 80089bc:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80089be:	f64e 6311 	movw	r3, #60945	; 0xee11
 80089c2:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80089c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 80089ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089ce:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80089d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80089d4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80089da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80089de:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 80089e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089e4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80089e6:	2306      	movs	r3, #6
 80089e8:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 80089ea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80089ee:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80089f0:	2300      	movs	r3, #0
 80089f2:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80089f4:	f107 0310 	add.w	r3, r7, #16
 80089f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f004 fc82 	bl	800d308 <HAL_OSPI_Command>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 8008a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0e:	e025      	b.n	8008a5c <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8008a10:	2302      	movs	r3, #2
 8008a12:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8008a14:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8008a18:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008a22:	f107 0310 	add.w	r3, r7, #16
 8008a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f004 fc6b 	bl	800d308 <HAL_OSPI_Command>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 8008a38:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3c:	e00e      	b.n	8008a5c <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8008a42:	f107 0308 	add.w	r3, r7, #8
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f004 fe87 	bl	800d75c <HAL_OSPI_MemoryMapped>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 8008a54:	f04f 33ff 	mov.w	r3, #4294967295
 8008a58:	e000      	b.n	8008a5c <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3760      	adds	r7, #96	; 0x60
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b09c      	sub	sp, #112	; 0x70
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
 8008a70:	4613      	mov	r3, r2
 8008a72:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 8008a74:	f107 0320 	add.w	r3, r7, #32
 8008a78:	2250      	movs	r2, #80	; 0x50
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f01d f907 	bl	8025c90 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8008a82:	f107 030c 	add.w	r3, r7, #12
 8008a86:	2200      	movs	r2, #0
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	605a      	str	r2, [r3, #4]
 8008a8c:	609a      	str	r2, [r3, #8]
 8008a8e:	60da      	str	r2, [r3, #12]
 8008a90:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d105      	bne.n	8008aa4 <MX25LM51245G_WriteEnable+0x40>
 8008a98:	78bb      	ldrb	r3, [r7, #2]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d102      	bne.n	8008aa4 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8008a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa2:	e0a6      	b.n	8008bf2 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <MX25LM51245G_WriteEnable+0x52>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e000      	b.n	8008ab8 <MX25LM51245G_WriteEnable+0x54>
 8008ab6:	2304      	movs	r3, #4
 8008ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008aba:	78bb      	ldrb	r3, [r7, #2]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d101      	bne.n	8008ac4 <MX25LM51245G_WriteEnable+0x60>
 8008ac0:	2308      	movs	r3, #8
 8008ac2:	e000      	b.n	8008ac6 <MX25LM51245G_WriteEnable+0x62>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008ac8:	78fb      	ldrb	r3, [r7, #3]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <MX25LM51245G_WriteEnable+0x6e>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e000      	b.n	8008ad4 <MX25LM51245G_WriteEnable+0x70>
 8008ad2:	2310      	movs	r3, #16
 8008ad4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <MX25LM51245G_WriteEnable+0x7c>
 8008adc:	2306      	movs	r3, #6
 8008ade:	e001      	b.n	8008ae4 <MX25LM51245G_WriteEnable+0x80>
 8008ae0:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8008ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008aea:	2300      	movs	r3, #0
 8008aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8008aee:	2300      	movs	r3, #0
 8008af0:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8008af6:	2300      	movs	r3, #0
 8008af8:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008afa:	2300      	movs	r3, #0
 8008afc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008afe:	f107 0320 	add.w	r3, r7, #32
 8008b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f004 fbfd 	bl	800d308 <HAL_OSPI_Command>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 8008b14:	f04f 33ff 	mov.w	r3, #4294967295
 8008b18:	e06b      	b.n	8008bf2 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8008b1a:	78fb      	ldrb	r3, [r7, #3]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <MX25LM51245G_WriteEnable+0xc0>
 8008b20:	2305      	movs	r3, #5
 8008b22:	e001      	b.n	8008b28 <MX25LM51245G_WriteEnable+0xc4>
 8008b24:	f240 53fa 	movw	r3, #1530	; 0x5fa
 8008b28:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8008b2a:	78fb      	ldrb	r3, [r7, #3]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <MX25LM51245G_WriteEnable+0xd0>
 8008b30:	2300      	movs	r3, #0
 8008b32:	e001      	b.n	8008b38 <MX25LM51245G_WriteEnable+0xd4>
 8008b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008b3a:	78bb      	ldrb	r3, [r7, #2]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d102      	bne.n	8008b46 <MX25LM51245G_WriteEnable+0xe2>
 8008b40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b44:	e000      	b.n	8008b48 <MX25LM51245G_WriteEnable+0xe4>
 8008b46:	2300      	movs	r3, #0
 8008b48:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8008b4a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008b4e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 8008b50:	2300      	movs	r3, #0
 8008b52:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d102      	bne.n	8008b60 <MX25LM51245G_WriteEnable+0xfc>
 8008b5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b5e:	e001      	b.n	8008b64 <MX25LM51245G_WriteEnable+0x100>
 8008b60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008b64:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008b66:	78bb      	ldrb	r3, [r7, #2]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d102      	bne.n	8008b72 <MX25LM51245G_WriteEnable+0x10e>
 8008b6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b70:	e000      	b.n	8008b74 <MX25LM51245G_WriteEnable+0x110>
 8008b72:	2300      	movs	r3, #0
 8008b74:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8008b76:	78fb      	ldrb	r3, [r7, #3]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <MX25LM51245G_WriteEnable+0x11c>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	e000      	b.n	8008b82 <MX25LM51245G_WriteEnable+0x11e>
 8008b80:	2305      	movs	r3, #5
 8008b82:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8008b84:	78bb      	ldrb	r3, [r7, #2]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d101      	bne.n	8008b8e <MX25LM51245G_WriteEnable+0x12a>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e000      	b.n	8008b90 <MX25LM51245G_WriteEnable+0x12c>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8008b92:	78bb      	ldrb	r3, [r7, #2]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d102      	bne.n	8008b9e <MX25LM51245G_WriteEnable+0x13a>
 8008b98:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008b9c:	e000      	b.n	8008ba0 <MX25LM51245G_WriteEnable+0x13c>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008ba2:	f107 0320 	add.w	r3, r7, #32
 8008ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f004 fbab 	bl	800d308 <HAL_OSPI_Command>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 8008bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bbc:	e019      	b.n	8008bf2 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8008bca:	2310      	movs	r3, #16
 8008bcc:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8008bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008bd2:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008bd4:	f107 030c 	add.w	r3, r7, #12
 8008bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f004 fd35 	bl	800d64e <HAL_OSPI_AutoPolling>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 8008bea:	f04f 33ff 	mov.w	r3, #4294967295
 8008bee:	e000      	b.n	8008bf2 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3770      	adds	r7, #112	; 0x70
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b098      	sub	sp, #96	; 0x60
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	60f8      	str	r0, [r7, #12]
 8008c02:	607b      	str	r3, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	72fb      	strb	r3, [r7, #11]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8008c0c:	f107 0310 	add.w	r3, r7, #16
 8008c10:	2250      	movs	r2, #80	; 0x50
 8008c12:	2100      	movs	r1, #0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f01d f83b 	bl	8025c90 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008c1a:	7afb      	ldrb	r3, [r7, #11]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d105      	bne.n	8008c2c <MX25LM51245G_WriteCfg2Register+0x32>
 8008c20:	7abb      	ldrb	r3, [r7, #10]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d102      	bne.n	8008c2c <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8008c26:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2a:	e077      	b.n	8008d1c <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008c30:	2300      	movs	r3, #0
 8008c32:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008c34:	7afb      	ldrb	r3, [r7, #11]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <MX25LM51245G_WriteCfg2Register+0x44>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <MX25LM51245G_WriteCfg2Register+0x46>
 8008c3e:	2304      	movs	r3, #4
 8008c40:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008c42:	7abb      	ldrb	r3, [r7, #10]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d101      	bne.n	8008c4c <MX25LM51245G_WriteCfg2Register+0x52>
 8008c48:	2308      	movs	r3, #8
 8008c4a:	e000      	b.n	8008c4e <MX25LM51245G_WriteCfg2Register+0x54>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008c50:	7afb      	ldrb	r3, [r7, #11]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <MX25LM51245G_WriteCfg2Register+0x60>
 8008c56:	2300      	movs	r3, #0
 8008c58:	e000      	b.n	8008c5c <MX25LM51245G_WriteCfg2Register+0x62>
 8008c5a:	2310      	movs	r3, #16
 8008c5c:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 8008c5e:	7afb      	ldrb	r3, [r7, #11]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <MX25LM51245G_WriteCfg2Register+0x6e>
 8008c64:	2372      	movs	r3, #114	; 0x72
 8008c66:	e001      	b.n	8008c6c <MX25LM51245G_WriteCfg2Register+0x72>
 8008c68:	f247 238d 	movw	r3, #29325	; 0x728d
 8008c6c:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8008c6e:	7afb      	ldrb	r3, [r7, #11]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d102      	bne.n	8008c7a <MX25LM51245G_WriteCfg2Register+0x80>
 8008c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c78:	e001      	b.n	8008c7e <MX25LM51245G_WriteCfg2Register+0x84>
 8008c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008c80:	7abb      	ldrb	r3, [r7, #10]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d102      	bne.n	8008c8c <MX25LM51245G_WriteCfg2Register+0x92>
 8008c86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c8a:	e000      	b.n	8008c8e <MX25LM51245G_WriteCfg2Register+0x94>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8008c90:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008c94:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008c9e:	7afb      	ldrb	r3, [r7, #11]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d102      	bne.n	8008caa <MX25LM51245G_WriteCfg2Register+0xb0>
 8008ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ca8:	e001      	b.n	8008cae <MX25LM51245G_WriteCfg2Register+0xb4>
 8008caa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008cae:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008cb0:	7abb      	ldrb	r3, [r7, #10]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d102      	bne.n	8008cbc <MX25LM51245G_WriteCfg2Register+0xc2>
 8008cb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cba:	e000      	b.n	8008cbe <MX25LM51245G_WriteCfg2Register+0xc4>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8008cc4:	7afb      	ldrb	r3, [r7, #11]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d006      	beq.n	8008cd8 <MX25LM51245G_WriteCfg2Register+0xde>
 8008cca:	7abb      	ldrb	r3, [r7, #10]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d101      	bne.n	8008cd4 <MX25LM51245G_WriteCfg2Register+0xda>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	e002      	b.n	8008cda <MX25LM51245G_WriteCfg2Register+0xe0>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e000      	b.n	8008cda <MX25LM51245G_WriteCfg2Register+0xe0>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008ce4:	f107 0310 	add.w	r3, r7, #16
 8008ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cec:	4619      	mov	r1, r3
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f004 fb0a 	bl	800d308 <HAL_OSPI_Command>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d002      	beq.n	8008d00 <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 8008cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cfe:	e00d      	b.n	8008d1c <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d04:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f004 fb8a 	bl	800d422 <HAL_OSPI_Transmit>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 8008d14:	f04f 33ff 	mov.w	r3, #4294967295
 8008d18:	e000      	b.n	8008d1c <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3760      	adds	r7, #96	; 0x60
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b098      	sub	sp, #96	; 0x60
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	607b      	str	r3, [r7, #4]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	72fb      	strb	r3, [r7, #11]
 8008d32:	4613      	mov	r3, r2
 8008d34:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8008d36:	f107 0310 	add.w	r3, r7, #16
 8008d3a:	2250      	movs	r2, #80	; 0x50
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f01c ffa6 	bl	8025c90 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d105      	bne.n	8008d56 <MX25LM51245G_ReadCfg2Register+0x32>
 8008d4a:	7abb      	ldrb	r3, [r7, #10]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d102      	bne.n	8008d56 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8008d50:	f04f 33ff 	mov.w	r3, #4294967295
 8008d54:	e07c      	b.n	8008e50 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008d56:	2300      	movs	r3, #0
 8008d58:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008d5e:	7afb      	ldrb	r3, [r7, #11]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <MX25LM51245G_ReadCfg2Register+0x44>
 8008d64:	2301      	movs	r3, #1
 8008d66:	e000      	b.n	8008d6a <MX25LM51245G_ReadCfg2Register+0x46>
 8008d68:	2304      	movs	r3, #4
 8008d6a:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008d6c:	7abb      	ldrb	r3, [r7, #10]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d101      	bne.n	8008d76 <MX25LM51245G_ReadCfg2Register+0x52>
 8008d72:	2308      	movs	r3, #8
 8008d74:	e000      	b.n	8008d78 <MX25LM51245G_ReadCfg2Register+0x54>
 8008d76:	2300      	movs	r3, #0
 8008d78:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008d7a:	7afb      	ldrb	r3, [r7, #11]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <MX25LM51245G_ReadCfg2Register+0x60>
 8008d80:	2300      	movs	r3, #0
 8008d82:	e000      	b.n	8008d86 <MX25LM51245G_ReadCfg2Register+0x62>
 8008d84:	2310      	movs	r3, #16
 8008d86:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8008d88:	7afb      	ldrb	r3, [r7, #11]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <MX25LM51245G_ReadCfg2Register+0x6e>
 8008d8e:	2371      	movs	r3, #113	; 0x71
 8008d90:	e001      	b.n	8008d96 <MX25LM51245G_ReadCfg2Register+0x72>
 8008d92:	f247 138e 	movw	r3, #29070	; 0x718e
 8008d96:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8008d98:	7afb      	ldrb	r3, [r7, #11]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d102      	bne.n	8008da4 <MX25LM51245G_ReadCfg2Register+0x80>
 8008d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008da2:	e001      	b.n	8008da8 <MX25LM51245G_ReadCfg2Register+0x84>
 8008da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008daa:	7abb      	ldrb	r3, [r7, #10]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d102      	bne.n	8008db6 <MX25LM51245G_ReadCfg2Register+0x92>
 8008db0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008db4:	e000      	b.n	8008db8 <MX25LM51245G_ReadCfg2Register+0x94>
 8008db6:	2300      	movs	r3, #0
 8008db8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8008dba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008dbe:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d102      	bne.n	8008dd4 <MX25LM51245G_ReadCfg2Register+0xb0>
 8008dce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008dd2:	e001      	b.n	8008dd8 <MX25LM51245G_ReadCfg2Register+0xb4>
 8008dd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8008dda:	7abb      	ldrb	r3, [r7, #10]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d102      	bne.n	8008de6 <MX25LM51245G_ReadCfg2Register+0xc2>
 8008de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008de4:	e000      	b.n	8008de8 <MX25LM51245G_ReadCfg2Register+0xc4>
 8008de6:	2300      	movs	r3, #0
 8008de8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <MX25LM51245G_ReadCfg2Register+0xd0>
 8008df0:	2300      	movs	r3, #0
 8008df2:	e000      	b.n	8008df6 <MX25LM51245G_ReadCfg2Register+0xd2>
 8008df4:	2305      	movs	r3, #5
 8008df6:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8008df8:	7abb      	ldrb	r3, [r7, #10]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d101      	bne.n	8008e02 <MX25LM51245G_ReadCfg2Register+0xde>
 8008dfe:	2302      	movs	r3, #2
 8008e00:	e000      	b.n	8008e04 <MX25LM51245G_ReadCfg2Register+0xe0>
 8008e02:	2301      	movs	r3, #1
 8008e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8008e06:	7abb      	ldrb	r3, [r7, #10]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d102      	bne.n	8008e12 <MX25LM51245G_ReadCfg2Register+0xee>
 8008e0c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008e10:	e000      	b.n	8008e14 <MX25LM51245G_ReadCfg2Register+0xf0>
 8008e12:	2300      	movs	r3, #0
 8008e14:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008e16:	2300      	movs	r3, #0
 8008e18:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e1a:	f107 0310 	add.w	r3, r7, #16
 8008e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e22:	4619      	mov	r1, r3
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f004 fa6f 	bl	800d308 <HAL_OSPI_Command>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 8008e30:	f04f 33ff 	mov.w	r3, #4294967295
 8008e34:	e00c      	b.n	8008e50 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f004 fb63 	bl	800d508 <HAL_OSPI_Receive>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 8008e48:	f04f 33ff 	mov.w	r3, #4294967295
 8008e4c:	e000      	b.n	8008e50 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3760      	adds	r7, #96	; 0x60
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b096      	sub	sp, #88	; 0x58
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
 8008e64:	4613      	mov	r3, r2
 8008e66:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8008e68:	f107 0308 	add.w	r3, r7, #8
 8008e6c:	2250      	movs	r2, #80	; 0x50
 8008e6e:	2100      	movs	r1, #0
 8008e70:	4618      	mov	r0, r3
 8008e72:	f01c ff0d 	bl	8025c90 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008e76:	78fb      	ldrb	r3, [r7, #3]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d105      	bne.n	8008e88 <MX25LM51245G_ResetEnable+0x30>
 8008e7c:	78bb      	ldrb	r3, [r7, #2]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d102      	bne.n	8008e88 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 8008e82:	f04f 33ff 	mov.w	r3, #4294967295
 8008e86:	e03b      	b.n	8008f00 <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <MX25LM51245G_ResetEnable+0x42>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e000      	b.n	8008e9c <MX25LM51245G_ResetEnable+0x44>
 8008e9a:	2304      	movs	r3, #4
 8008e9c:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008e9e:	78bb      	ldrb	r3, [r7, #2]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d101      	bne.n	8008ea8 <MX25LM51245G_ResetEnable+0x50>
 8008ea4:	2308      	movs	r3, #8
 8008ea6:	e000      	b.n	8008eaa <MX25LM51245G_ResetEnable+0x52>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d101      	bne.n	8008eb6 <MX25LM51245G_ResetEnable+0x5e>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	e000      	b.n	8008eb8 <MX25LM51245G_ResetEnable+0x60>
 8008eb6:	2310      	movs	r3, #16
 8008eb8:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <MX25LM51245G_ResetEnable+0x6c>
 8008ec0:	2366      	movs	r3, #102	; 0x66
 8008ec2:	e001      	b.n	8008ec8 <MX25LM51245G_ResetEnable+0x70>
 8008ec4:	f246 6399 	movw	r3, #26265	; 0x6699
 8008ec8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8008eda:	2300      	movs	r3, #0
 8008edc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f004 fa0b 	bl	800d308 <HAL_OSPI_Command>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 8008ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8008efc:	e000      	b.n	8008f00 <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3758      	adds	r7, #88	; 0x58
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b096      	sub	sp, #88	; 0x58
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
 8008f14:	4613      	mov	r3, r2
 8008f16:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 8008f18:	f107 0308 	add.w	r3, r7, #8
 8008f1c:	2250      	movs	r2, #80	; 0x50
 8008f1e:	2100      	movs	r1, #0
 8008f20:	4618      	mov	r0, r3
 8008f22:	f01c feb5 	bl	8025c90 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8008f26:	78fb      	ldrb	r3, [r7, #3]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d105      	bne.n	8008f38 <MX25LM51245G_ResetMemory+0x30>
 8008f2c:	78bb      	ldrb	r3, [r7, #2]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d102      	bne.n	8008f38 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 8008f32:	f04f 33ff 	mov.w	r3, #4294967295
 8008f36:	e03b      	b.n	8008fb0 <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8008f40:	78fb      	ldrb	r3, [r7, #3]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <MX25LM51245G_ResetMemory+0x42>
 8008f46:	2301      	movs	r3, #1
 8008f48:	e000      	b.n	8008f4c <MX25LM51245G_ResetMemory+0x44>
 8008f4a:	2304      	movs	r3, #4
 8008f4c:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008f4e:	78bb      	ldrb	r3, [r7, #2]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d101      	bne.n	8008f58 <MX25LM51245G_ResetMemory+0x50>
 8008f54:	2308      	movs	r3, #8
 8008f56:	e000      	b.n	8008f5a <MX25LM51245G_ResetMemory+0x52>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <MX25LM51245G_ResetMemory+0x5e>
 8008f62:	2300      	movs	r3, #0
 8008f64:	e000      	b.n	8008f68 <MX25LM51245G_ResetMemory+0x60>
 8008f66:	2310      	movs	r3, #16
 8008f68:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <MX25LM51245G_ResetMemory+0x6c>
 8008f70:	2399      	movs	r3, #153	; 0x99
 8008f72:	e001      	b.n	8008f78 <MX25LM51245G_ResetMemory+0x70>
 8008f74:	f649 1366 	movw	r3, #39270	; 0x9966
 8008f78:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8008f82:	2300      	movs	r3, #0
 8008f84:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 8008f86:	2300      	movs	r3, #0
 8008f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008f92:	f107 0308 	add.w	r3, r7, #8
 8008f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f004 f9b3 	bl	800d308 <HAL_OSPI_Command>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 8008fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fac:	e000      	b.n	8008fb0 <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3758      	adds	r7, #88	; 0x58
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8008fc2:	4b16      	ldr	r3, [pc, #88]	; (800901c <BSP_I2C4_Init+0x64>)
 8008fc4:	4a16      	ldr	r2, [pc, #88]	; (8009020 <BSP_I2C4_Init+0x68>)
 8008fc6:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8008fc8:	4b16      	ldr	r3, [pc, #88]	; (8009024 <BSP_I2C4_Init+0x6c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d11f      	bne.n	8009010 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8008fd0:	4b14      	ldr	r3, [pc, #80]	; (8009024 <BSP_I2C4_Init+0x6c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	4a13      	ldr	r2, [pc, #76]	; (8009024 <BSP_I2C4_Init+0x6c>)
 8008fd8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8008fda:	4810      	ldr	r0, [pc, #64]	; (800901c <BSP_I2C4_Init+0x64>)
 8008fdc:	f003 f882 	bl	800c0e4 <HAL_I2C_GetState>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d114      	bne.n	8009010 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8008fe6:	480d      	ldr	r0, [pc, #52]	; (800901c <BSP_I2C4_Init+0x64>)
 8008fe8:	f000 fb60 	bl	80096ac <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8008fec:	f005 fe7e 	bl	800ecec <HAL_RCC_GetPCLK2Freq>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	490d      	ldr	r1, [pc, #52]	; (8009028 <BSP_I2C4_Init+0x70>)
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 f8e3 	bl	80091c0 <I2C_GetTiming>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4807      	ldr	r0, [pc, #28]	; (800901c <BSP_I2C4_Init+0x64>)
 8009000:	f000 f838 	bl	8009074 <MX_I2C4_Init>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800900a:	f06f 0307 	mvn.w	r3, #7
 800900e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8009010:	687b      	ldr	r3, [r7, #4]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	2400cd74 	.word	0x2400cd74
 8009020:	58001c00 	.word	0x58001c00
 8009024:	24003130 	.word	0x24003130
 8009028:	000186a0 	.word	0x000186a0

0800902c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8009032:	2300      	movs	r3, #0
 8009034:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8009036:	4b0d      	ldr	r3, [pc, #52]	; (800906c <BSP_I2C4_DeInit+0x40>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3b01      	subs	r3, #1
 800903c:	4a0b      	ldr	r2, [pc, #44]	; (800906c <BSP_I2C4_DeInit+0x40>)
 800903e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8009040:	4b0a      	ldr	r3, [pc, #40]	; (800906c <BSP_I2C4_DeInit+0x40>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10b      	bne.n	8009060 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8009048:	4809      	ldr	r0, [pc, #36]	; (8009070 <BSP_I2C4_DeInit+0x44>)
 800904a:	f000 fb9b 	bl	8009784 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800904e:	4808      	ldr	r0, [pc, #32]	; (8009070 <BSP_I2C4_DeInit+0x44>)
 8009050:	f002 fdea 	bl	800bc28 <HAL_I2C_DeInit>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800905a:	f06f 0307 	mvn.w	r3, #7
 800905e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8009060:	687b      	ldr	r3, [r7, #4]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	24003130 	.word	0x24003130
 8009070:	2400cd74 	.word	0x2400cd74

08009074 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f002 fd28 	bl	800bb08 <HAL_I2C_Init>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	73fb      	strb	r3, [r7, #15]
 80090c2:	e014      	b.n	80090ee <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 80090c4:	2300      	movs	r3, #0
 80090c6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80090c8:	68b9      	ldr	r1, [r7, #8]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f003 fa40 	bl	800c550 <HAL_I2CEx_ConfigAnalogFilter>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	73fb      	strb	r3, [r7, #15]
 80090da:	e008      	b.n	80090ee <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80090dc:	2100      	movs	r1, #0
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f003 fa81 	bl	800c5e6 <HAL_I2CEx_ConfigDigitalFilter>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af02      	add	r7, sp, #8
 80090fe:	60ba      	str	r2, [r7, #8]
 8009100:	461a      	mov	r2, r3
 8009102:	4603      	mov	r3, r0
 8009104:	81fb      	strh	r3, [r7, #14]
 8009106:	460b      	mov	r3, r1
 8009108:	81bb      	strh	r3, [r7, #12]
 800910a:	4613      	mov	r3, r2
 800910c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800910e:	89b9      	ldrh	r1, [r7, #12]
 8009110:	89f8      	ldrh	r0, [r7, #14]
 8009112:	88fb      	ldrh	r3, [r7, #6]
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2201      	movs	r2, #1
 800911a:	f000 fb57 	bl	80097cc <I2C4_WriteReg>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d102      	bne.n	800912a <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8009124:	2300      	movs	r3, #0
 8009126:	617b      	str	r3, [r7, #20]
 8009128:	e00c      	b.n	8009144 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800912a:	4809      	ldr	r0, [pc, #36]	; (8009150 <BSP_I2C4_WriteReg+0x58>)
 800912c:	f002 ffe8 	bl	800c100 <HAL_I2C_GetError>
 8009130:	4603      	mov	r3, r0
 8009132:	2b04      	cmp	r3, #4
 8009134:	d103      	bne.n	800913e <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009136:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800913a:	617b      	str	r3, [r7, #20]
 800913c:	e002      	b.n	8009144 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800913e:	f06f 0303 	mvn.w	r3, #3
 8009142:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009144:	697b      	ldr	r3, [r7, #20]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	2400cd74 	.word	0x2400cd74

08009154 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af02      	add	r7, sp, #8
 800915a:	60ba      	str	r2, [r7, #8]
 800915c:	461a      	mov	r2, r3
 800915e:	4603      	mov	r3, r0
 8009160:	81fb      	strh	r3, [r7, #14]
 8009162:	460b      	mov	r3, r1
 8009164:	81bb      	strh	r3, [r7, #12]
 8009166:	4613      	mov	r3, r2
 8009168:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800916a:	89b9      	ldrh	r1, [r7, #12]
 800916c:	89f8      	ldrh	r0, [r7, #14]
 800916e:	88fb      	ldrh	r3, [r7, #6]
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2201      	movs	r2, #1
 8009176:	f000 fb4f 	bl	8009818 <I2C4_ReadReg>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d102      	bne.n	8009186 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8009180:	2300      	movs	r3, #0
 8009182:	617b      	str	r3, [r7, #20]
 8009184:	e00c      	b.n	80091a0 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009186:	4809      	ldr	r0, [pc, #36]	; (80091ac <BSP_I2C4_ReadReg+0x58>)
 8009188:	f002 ffba 	bl	800c100 <HAL_I2C_GetError>
 800918c:	4603      	mov	r3, r0
 800918e:	2b04      	cmp	r3, #4
 8009190:	d103      	bne.n	800919a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009192:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8009196:	617b      	str	r3, [r7, #20]
 8009198:	e002      	b.n	80091a0 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800919a:	f06f 0303 	mvn.w	r3, #3
 800919e:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80091a0:	697b      	ldr	r3, [r7, #20]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3718      	adds	r7, #24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	2400cd74 	.word	0x2400cd74

080091b0 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80091b4:	f001 fcc6 	bl	800ab44 <HAL_GetTick>
 80091b8:	4603      	mov	r3, r0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d06b      	beq.n	80092ac <I2C_GetTiming+0xec>
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d068      	beq.n	80092ac <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80091da:	2300      	movs	r3, #0
 80091dc:	613b      	str	r3, [r7, #16]
 80091de:	e060      	b.n	80092a2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80091e0:	4a35      	ldr	r2, [pc, #212]	; (80092b8 <I2C_GetTiming+0xf8>)
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	212c      	movs	r1, #44	; 0x2c
 80091e6:	fb01 f303 	mul.w	r3, r1, r3
 80091ea:	4413      	add	r3, r2
 80091ec:	3304      	adds	r3, #4
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d352      	bcc.n	800929c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80091f6:	4a30      	ldr	r2, [pc, #192]	; (80092b8 <I2C_GetTiming+0xf8>)
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	212c      	movs	r1, #44	; 0x2c
 80091fc:	fb01 f303 	mul.w	r3, r1, r3
 8009200:	4413      	add	r3, r2
 8009202:	3308      	adds	r3, #8
 8009204:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	429a      	cmp	r2, r3
 800920a:	d847      	bhi.n	800929c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800920c:	6939      	ldr	r1, [r7, #16]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f856 	bl	80092c0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8009214:	6939      	ldr	r1, [r7, #16]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f940 	bl	800949c <I2C_Compute_SCLL_SCLH>
 800921c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b7f      	cmp	r3, #127	; 0x7f
 8009222:	d842      	bhi.n	80092aa <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009224:	4925      	ldr	r1, [pc, #148]	; (80092bc <I2C_GetTiming+0xfc>)
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	4613      	mov	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	440b      	add	r3, r1
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009236:	4821      	ldr	r0, [pc, #132]	; (80092bc <I2C_GetTiming+0xfc>)
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	4613      	mov	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4403      	add	r3, r0
 8009244:	3304      	adds	r3, #4
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	051b      	lsls	r3, r3, #20
 800924a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800924e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009250:	481a      	ldr	r0, [pc, #104]	; (80092bc <I2C_GetTiming+0xfc>)
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	4613      	mov	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4403      	add	r3, r0
 800925e:	3308      	adds	r3, #8
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	041b      	lsls	r3, r3, #16
 8009264:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009268:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800926a:	4814      	ldr	r0, [pc, #80]	; (80092bc <I2C_GetTiming+0xfc>)
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	4613      	mov	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4413      	add	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4403      	add	r3, r0
 8009278:	330c      	adds	r3, #12
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	021b      	lsls	r3, r3, #8
 800927e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009280:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8009282:	480e      	ldr	r0, [pc, #56]	; (80092bc <I2C_GetTiming+0xfc>)
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4613      	mov	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4413      	add	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4403      	add	r3, r0
 8009290:	3310      	adds	r3, #16
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009296:	430b      	orrs	r3, r1
 8009298:	617b      	str	r3, [r7, #20]
        }
        break;
 800929a:	e006      	b.n	80092aa <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	3301      	adds	r3, #1
 80092a0:	613b      	str	r3, [r7, #16]
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d99b      	bls.n	80091e0 <I2C_GetTiming+0x20>
 80092a8:	e000      	b.n	80092ac <I2C_GetTiming+0xec>
        break;
 80092aa:	bf00      	nop
      }
    }
  }

  return ret;
 80092ac:	697b      	ldr	r3, [r7, #20]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3718      	adds	r7, #24
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	08028714 	.word	0x08028714
 80092bc:	24003134 	.word	0x24003134

080092c0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b08f      	sub	sp, #60	; 0x3c
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 80092ca:	2310      	movs	r3, #16
 80092cc:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	085a      	lsrs	r2, r3, #1
 80092d2:	4b6e      	ldr	r3, [pc, #440]	; (800948c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 80092d4:	4413      	add	r3, r2
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80092dc:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80092de:	2332      	movs	r3, #50	; 0x32
 80092e0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80092e2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80092e6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80092e8:	4a69      	ldr	r2, [pc, #420]	; (8009490 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	212c      	movs	r1, #44	; 0x2c
 80092ee:	fb01 f303 	mul.w	r3, r1, r3
 80092f2:	4413      	add	r3, r2
 80092f4:	3324      	adds	r3, #36	; 0x24
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4618      	mov	r0, r3
 80092fa:	4a65      	ldr	r2, [pc, #404]	; (8009490 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	212c      	movs	r1, #44	; 0x2c
 8009300:	fb01 f303 	mul.w	r3, r1, r3
 8009304:	4413      	add	r3, r2
 8009306:	330c      	adds	r3, #12
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800930c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800930e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009310:	495f      	ldr	r1, [pc, #380]	; (8009490 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	202c      	movs	r0, #44	; 0x2c
 8009316:	fb00 f303 	mul.w	r3, r0, r3
 800931a:	440b      	add	r3, r1
 800931c:	3328      	adds	r3, #40	; 0x28
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3303      	adds	r3, #3
 8009322:	69f9      	ldr	r1, [r7, #28]
 8009324:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800932c:	4a58      	ldr	r2, [pc, #352]	; (8009490 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	212c      	movs	r1, #44	; 0x2c
 8009332:	fb01 f303 	mul.w	r3, r1, r3
 8009336:	4413      	add	r3, r2
 8009338:	3310      	adds	r3, #16
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4618      	mov	r0, r3
 800933e:	4a54      	ldr	r2, [pc, #336]	; (8009490 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	212c      	movs	r1, #44	; 0x2c
 8009344:	fb01 f303 	mul.w	r3, r1, r3
 8009348:	4413      	add	r3, r2
 800934a:	3320      	adds	r3, #32
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8009350:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009352:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8009354:	494e      	ldr	r1, [pc, #312]	; (8009490 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	202c      	movs	r0, #44	; 0x2c
 800935a:	fb00 f303 	mul.w	r3, r0, r3
 800935e:	440b      	add	r3, r1
 8009360:	3328      	adds	r3, #40	; 0x28
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3304      	adds	r3, #4
 8009366:	69f9      	ldr	r1, [r7, #28]
 8009368:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8009370:	4a47      	ldr	r2, [pc, #284]	; (8009490 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	212c      	movs	r1, #44	; 0x2c
 8009376:	fb01 f303 	mul.w	r3, r1, r3
 800937a:	4413      	add	r3, r2
 800937c:	3320      	adds	r3, #32
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4618      	mov	r0, r3
 8009382:	4a43      	ldr	r2, [pc, #268]	; (8009490 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	212c      	movs	r1, #44	; 0x2c
 8009388:	fb01 f303 	mul.w	r3, r1, r3
 800938c:	4413      	add	r3, r2
 800938e:	3314      	adds	r3, #20
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4403      	add	r3, r0
 8009394:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	2b00      	cmp	r3, #0
 800939a:	dc01      	bgt.n	80093a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800939c:	2300      	movs	r3, #0
 800939e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80093a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	dc01      	bgt.n	80093aa <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80093aa:	2300      	movs	r3, #0
 80093ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80093ae:	e062      	b.n	8009476 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80093b0:	2300      	movs	r3, #0
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
 80093b4:	e059      	b.n	800946a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	3301      	adds	r3, #1
 80093ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093bc:	3201      	adds	r2, #1
 80093be:	fb02 f203 	mul.w	r2, r2, r3
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	fb02 f303 	mul.w	r3, r2, r3
 80093c8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d348      	bcc.n	8009464 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80093d2:	2300      	movs	r3, #0
 80093d4:	623b      	str	r3, [r7, #32]
 80093d6:	e042      	b.n	800945e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	3301      	adds	r3, #1
 80093dc:	6a3a      	ldr	r2, [r7, #32]
 80093de:	fb02 f203 	mul.w	r2, r2, r3
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	fb02 f303 	mul.w	r3, r2, r3
 80093e8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80093ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d332      	bcc.n	8009458 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80093f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d82e      	bhi.n	8009458 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80093fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fe:	429a      	cmp	r2, r3
 8009400:	d02a      	beq.n	8009458 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009402:	4b24      	ldr	r3, [pc, #144]	; (8009494 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	4924      	ldr	r1, [pc, #144]	; (8009498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	440b      	add	r3, r1
 8009412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009414:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009416:	4b1f      	ldr	r3, [pc, #124]	; (8009494 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	491f      	ldr	r1, [pc, #124]	; (8009498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800941c:	4613      	mov	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	440b      	add	r3, r1
 8009426:	3304      	adds	r3, #4
 8009428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800942c:	4b19      	ldr	r3, [pc, #100]	; (8009494 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	4919      	ldr	r1, [pc, #100]	; (8009498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8009432:	4613      	mov	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	440b      	add	r3, r1
 800943c:	3308      	adds	r3, #8
 800943e:	6a3a      	ldr	r2, [r7, #32]
 8009440:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8009442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009444:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8009446:	4b13      	ldr	r3, [pc, #76]	; (8009494 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3301      	adds	r3, #1
 800944c:	4a11      	ldr	r2, [pc, #68]	; (8009494 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800944e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009450:	4b10      	ldr	r3, [pc, #64]	; (8009494 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b7f      	cmp	r3, #127	; 0x7f
 8009456:	d812      	bhi.n	800947e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	3301      	adds	r3, #1
 800945c:	623b      	str	r3, [r7, #32]
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	2b0f      	cmp	r3, #15
 8009462:	d9b9      	bls.n	80093d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	3301      	adds	r3, #1
 8009468:	627b      	str	r3, [r7, #36]	; 0x24
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	2b0f      	cmp	r3, #15
 800946e:	d9a2      	bls.n	80093b6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	3301      	adds	r3, #1
 8009474:	62bb      	str	r3, [r7, #40]	; 0x28
 8009476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009478:	2b0f      	cmp	r3, #15
 800947a:	d999      	bls.n	80093b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800947c:	e000      	b.n	8009480 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800947e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8009480:	373c      	adds	r7, #60	; 0x3c
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	3b9aca00 	.word	0x3b9aca00
 8009490:	08028714 	.word	0x08028714
 8009494:	24003b34 	.word	0x24003b34
 8009498:	24003134 	.word	0x24003134

0800949c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800949c:	b480      	push	{r7}
 800949e:	b093      	sub	sp, #76	; 0x4c
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80094a6:	f04f 33ff 	mov.w	r3, #4294967295
 80094aa:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	085a      	lsrs	r2, r3, #1
 80094b0:	4b7a      	ldr	r3, [pc, #488]	; (800969c <I2C_Compute_SCLL_SCLH+0x200>)
 80094b2:	4413      	add	r3, r2
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80094ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80094bc:	4a78      	ldr	r2, [pc, #480]	; (80096a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	212c      	movs	r1, #44	; 0x2c
 80094c2:	fb01 f303 	mul.w	r3, r1, r3
 80094c6:	4413      	add	r3, r2
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	085a      	lsrs	r2, r3, #1
 80094cc:	4b73      	ldr	r3, [pc, #460]	; (800969c <I2C_Compute_SCLL_SCLH+0x200>)
 80094ce:	4413      	add	r3, r2
 80094d0:	4973      	ldr	r1, [pc, #460]	; (80096a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80094d2:	683a      	ldr	r2, [r7, #0]
 80094d4:	202c      	movs	r0, #44	; 0x2c
 80094d6:	fb00 f202 	mul.w	r2, r0, r2
 80094da:	440a      	add	r2, r1
 80094dc:	6812      	ldr	r2, [r2, #0]
 80094de:	fbb3 f3f2 	udiv	r3, r3, r2
 80094e2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80094e4:	2332      	movs	r3, #50	; 0x32
 80094e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80094e8:	4a6d      	ldr	r2, [pc, #436]	; (80096a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	212c      	movs	r1, #44	; 0x2c
 80094ee:	fb01 f303 	mul.w	r3, r1, r3
 80094f2:	4413      	add	r3, r2
 80094f4:	3328      	adds	r3, #40	; 0x28
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fa:	fb02 f303 	mul.w	r3, r2, r3
 80094fe:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8009500:	4a67      	ldr	r2, [pc, #412]	; (80096a0 <I2C_Compute_SCLL_SCLH+0x204>)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	212c      	movs	r1, #44	; 0x2c
 8009506:	fb01 f303 	mul.w	r3, r1, r3
 800950a:	4413      	add	r3, r2
 800950c:	3304      	adds	r3, #4
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a62      	ldr	r2, [pc, #392]	; (800969c <I2C_Compute_SCLL_SCLH+0x200>)
 8009512:	fbb2 f3f3 	udiv	r3, r2, r3
 8009516:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8009518:	4a61      	ldr	r2, [pc, #388]	; (80096a0 <I2C_Compute_SCLL_SCLH+0x204>)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	212c      	movs	r1, #44	; 0x2c
 800951e:	fb01 f303 	mul.w	r3, r1, r3
 8009522:	4413      	add	r3, r2
 8009524:	3308      	adds	r3, #8
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a5c      	ldr	r2, [pc, #368]	; (800969c <I2C_Compute_SCLL_SCLH+0x200>)
 800952a:	fbb2 f3f3 	udiv	r3, r2, r3
 800952e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8009530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009532:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009534:	2300      	movs	r3, #0
 8009536:	637b      	str	r3, [r7, #52]	; 0x34
 8009538:	e0a3      	b.n	8009682 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800953a:	495a      	ldr	r1, [pc, #360]	; (80096a4 <I2C_Compute_SCLL_SCLH+0x208>)
 800953c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	440b      	add	r3, r1
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954e:	fb02 f303 	mul.w	r3, r2, r3
 8009552:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009554:	2300      	movs	r3, #0
 8009556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009558:	e08c      	b.n	8009674 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800955a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	441a      	add	r2, r3
 8009560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009562:	3301      	adds	r3, #1
 8009564:	6979      	ldr	r1, [r7, #20]
 8009566:	fb01 f103 	mul.w	r1, r1, r3
 800956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956c:	005b      	lsls	r3, r3, #1
 800956e:	440b      	add	r3, r1
 8009570:	4413      	add	r3, r2
 8009572:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009574:	4a4a      	ldr	r2, [pc, #296]	; (80096a0 <I2C_Compute_SCLL_SCLH+0x204>)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	212c      	movs	r1, #44	; 0x2c
 800957a:	fb01 f303 	mul.w	r3, r1, r3
 800957e:	4413      	add	r3, r2
 8009580:	3318      	adds	r3, #24
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	429a      	cmp	r2, r3
 8009588:	d971      	bls.n	800966e <I2C_Compute_SCLL_SCLH+0x1d2>
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	1ad2      	subs	r2, r2, r3
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	089b      	lsrs	r3, r3, #2
 8009596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009598:	429a      	cmp	r2, r3
 800959a:	d268      	bcs.n	800966e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800959c:	2300      	movs	r3, #0
 800959e:	63bb      	str	r3, [r7, #56]	; 0x38
 80095a0:	e062      	b.n	8009668 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80095a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	441a      	add	r2, r3
 80095a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095aa:	3301      	adds	r3, #1
 80095ac:	6979      	ldr	r1, [r7, #20]
 80095ae:	fb01 f103 	mul.w	r1, r1, r3
 80095b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	440b      	add	r3, r1
 80095b8:	4413      	add	r3, r2
 80095ba:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	441a      	add	r2, r3
 80095c2:	4937      	ldr	r1, [pc, #220]	; (80096a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	202c      	movs	r0, #44	; 0x2c
 80095c8:	fb00 f303 	mul.w	r3, r0, r3
 80095cc:	440b      	add	r3, r1
 80095ce:	3320      	adds	r3, #32
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	441a      	add	r2, r3
 80095d4:	4932      	ldr	r1, [pc, #200]	; (80096a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	202c      	movs	r0, #44	; 0x2c
 80095da:	fb00 f303 	mul.w	r3, r0, r3
 80095de:	440b      	add	r3, r1
 80095e0:	3324      	adds	r3, #36	; 0x24
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4413      	add	r3, r2
 80095e6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d338      	bcc.n	8009662 <I2C_Compute_SCLL_SCLH+0x1c6>
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d834      	bhi.n	8009662 <I2C_Compute_SCLL_SCLH+0x1c6>
 80095f8:	4a29      	ldr	r2, [pc, #164]	; (80096a0 <I2C_Compute_SCLL_SCLH+0x204>)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	212c      	movs	r1, #44	; 0x2c
 80095fe:	fb01 f303 	mul.w	r3, r1, r3
 8009602:	4413      	add	r3, r2
 8009604:	331c      	adds	r3, #28
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	429a      	cmp	r2, r3
 800960c:	d329      	bcc.n	8009662 <I2C_Compute_SCLL_SCLH+0x1c6>
 800960e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	429a      	cmp	r2, r3
 8009614:	d225      	bcs.n	8009662 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800961e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009620:	2b00      	cmp	r3, #0
 8009622:	da02      	bge.n	800962a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8009624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009626:	425b      	negs	r3, r3
 8009628:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800962e:	429a      	cmp	r2, r3
 8009630:	d917      	bls.n	8009662 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8009636:	491b      	ldr	r1, [pc, #108]	; (80096a4 <I2C_Compute_SCLL_SCLH+0x208>)
 8009638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800963a:	4613      	mov	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	440b      	add	r3, r1
 8009644:	3310      	adds	r3, #16
 8009646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009648:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800964a:	4916      	ldr	r1, [pc, #88]	; (80096a4 <I2C_Compute_SCLL_SCLH+0x208>)
 800964c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	440b      	add	r3, r1
 8009658:	330c      	adds	r3, #12
 800965a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800965c:	601a      	str	r2, [r3, #0]
              ret = count;
 800965e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009660:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009664:	3301      	adds	r3, #1
 8009666:	63bb      	str	r3, [r7, #56]	; 0x38
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	2bff      	cmp	r3, #255	; 0xff
 800966c:	d999      	bls.n	80095a2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800966e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009670:	3301      	adds	r3, #1
 8009672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009676:	2bff      	cmp	r3, #255	; 0xff
 8009678:	f67f af6f 	bls.w	800955a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800967c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967e:	3301      	adds	r3, #1
 8009680:	637b      	str	r3, [r7, #52]	; 0x34
 8009682:	4b09      	ldr	r3, [pc, #36]	; (80096a8 <I2C_Compute_SCLL_SCLH+0x20c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009688:	429a      	cmp	r2, r3
 800968a:	f4ff af56 	bcc.w	800953a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800968e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009690:	4618      	mov	r0, r3
 8009692:	374c      	adds	r7, #76	; 0x4c
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	3b9aca00 	.word	0x3b9aca00
 80096a0:	08028714 	.word	0x08028714
 80096a4:	24003134 	.word	0x24003134
 80096a8:	24003b34 	.word	0x24003b34

080096ac <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08a      	sub	sp, #40	; 0x28
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80096b4:	4b31      	ldr	r3, [pc, #196]	; (800977c <I2C4_MspInit+0xd0>)
 80096b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80096ba:	4a30      	ldr	r2, [pc, #192]	; (800977c <I2C4_MspInit+0xd0>)
 80096bc:	f043 0308 	orr.w	r3, r3, #8
 80096c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80096c4:	4b2d      	ldr	r3, [pc, #180]	; (800977c <I2C4_MspInit+0xd0>)
 80096c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80096ca:	f003 0308 	and.w	r3, r3, #8
 80096ce:	613b      	str	r3, [r7, #16]
 80096d0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80096d2:	4b2a      	ldr	r3, [pc, #168]	; (800977c <I2C4_MspInit+0xd0>)
 80096d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80096d8:	4a28      	ldr	r2, [pc, #160]	; (800977c <I2C4_MspInit+0xd0>)
 80096da:	f043 0308 	orr.w	r3, r3, #8
 80096de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80096e2:	4b26      	ldr	r3, [pc, #152]	; (800977c <I2C4_MspInit+0xd0>)
 80096e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80096e8:	f003 0308 	and.w	r3, r3, #8
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80096f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096f4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80096f6:	2312      	movs	r3, #18
 80096f8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80096fa:	2300      	movs	r3, #0
 80096fc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80096fe:	2302      	movs	r3, #2
 8009700:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8009702:	2304      	movs	r3, #4
 8009704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8009706:	f107 0314 	add.w	r3, r7, #20
 800970a:	4619      	mov	r1, r3
 800970c:	481c      	ldr	r0, [pc, #112]	; (8009780 <I2C4_MspInit+0xd4>)
 800970e:	f001 fee9 	bl	800b4e4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8009712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009716:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8009718:	2312      	movs	r3, #18
 800971a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800971c:	2300      	movs	r3, #0
 800971e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8009720:	2302      	movs	r3, #2
 8009722:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8009724:	2304      	movs	r3, #4
 8009726:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8009728:	f107 0314 	add.w	r3, r7, #20
 800972c:	4619      	mov	r1, r3
 800972e:	4814      	ldr	r0, [pc, #80]	; (8009780 <I2C4_MspInit+0xd4>)
 8009730:	f001 fed8 	bl	800b4e4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8009734:	4b11      	ldr	r3, [pc, #68]	; (800977c <I2C4_MspInit+0xd0>)
 8009736:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800973a:	4a10      	ldr	r2, [pc, #64]	; (800977c <I2C4_MspInit+0xd0>)
 800973c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009740:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8009744:	4b0d      	ldr	r3, [pc, #52]	; (800977c <I2C4_MspInit+0xd0>)
 8009746:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800974a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800974e:	60bb      	str	r3, [r7, #8]
 8009750:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8009752:	4b0a      	ldr	r3, [pc, #40]	; (800977c <I2C4_MspInit+0xd0>)
 8009754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009758:	4a08      	ldr	r2, [pc, #32]	; (800977c <I2C4_MspInit+0xd0>)
 800975a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800975e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8009762:	4b06      	ldr	r3, [pc, #24]	; (800977c <I2C4_MspInit+0xd0>)
 8009764:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009768:	4a04      	ldr	r2, [pc, #16]	; (800977c <I2C4_MspInit+0xd0>)
 800976a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800976e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8009772:	bf00      	nop
 8009774:	3728      	adds	r7, #40	; 0x28
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	58024400 	.word	0x58024400
 8009780:	58020c00 	.word	0x58020c00

08009784 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b088      	sub	sp, #32
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800978c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009790:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4619      	mov	r1, r3
 8009796:	480b      	ldr	r0, [pc, #44]	; (80097c4 <I2C4_MspDeInit+0x40>)
 8009798:	f002 f854 	bl	800b844 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800979c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4619      	mov	r1, r3
 80097a6:	4807      	ldr	r0, [pc, #28]	; (80097c4 <I2C4_MspDeInit+0x40>)
 80097a8:	f002 f84c 	bl	800b844 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80097ac:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <I2C4_MspDeInit+0x44>)
 80097ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80097b2:	4a05      	ldr	r2, [pc, #20]	; (80097c8 <I2C4_MspDeInit+0x44>)
 80097b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097b8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 80097bc:	bf00      	nop
 80097be:	3720      	adds	r7, #32
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	58020c00 	.word	0x58020c00
 80097c8:	58024400 	.word	0x58024400

080097cc <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af04      	add	r7, sp, #16
 80097d2:	607b      	str	r3, [r7, #4]
 80097d4:	4603      	mov	r3, r0
 80097d6:	81fb      	strh	r3, [r7, #14]
 80097d8:	460b      	mov	r3, r1
 80097da:	81bb      	strh	r3, [r7, #12]
 80097dc:	4613      	mov	r3, r2
 80097de:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80097e0:	8978      	ldrh	r0, [r7, #10]
 80097e2:	89ba      	ldrh	r2, [r7, #12]
 80097e4:	89f9      	ldrh	r1, [r7, #14]
 80097e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80097ea:	9302      	str	r3, [sp, #8]
 80097ec:	8b3b      	ldrh	r3, [r7, #24]
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	4603      	mov	r3, r0
 80097f6:	4807      	ldr	r0, [pc, #28]	; (8009814 <I2C4_WriteReg+0x48>)
 80097f8:	f002 fa46 	bl	800bc88 <HAL_I2C_Mem_Write>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d101      	bne.n	8009806 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8009802:	2300      	movs	r3, #0
 8009804:	e001      	b.n	800980a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8009806:	f06f 0307 	mvn.w	r3, #7
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	2400cd74 	.word	0x2400cd74

08009818 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b088      	sub	sp, #32
 800981c:	af04      	add	r7, sp, #16
 800981e:	607b      	str	r3, [r7, #4]
 8009820:	4603      	mov	r3, r0
 8009822:	81fb      	strh	r3, [r7, #14]
 8009824:	460b      	mov	r3, r1
 8009826:	81bb      	strh	r3, [r7, #12]
 8009828:	4613      	mov	r3, r2
 800982a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800982c:	8978      	ldrh	r0, [r7, #10]
 800982e:	89ba      	ldrh	r2, [r7, #12]
 8009830:	89f9      	ldrh	r1, [r7, #14]
 8009832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009836:	9302      	str	r3, [sp, #8]
 8009838:	8b3b      	ldrh	r3, [r7, #24]
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	4603      	mov	r3, r0
 8009842:	4807      	ldr	r0, [pc, #28]	; (8009860 <I2C4_ReadReg+0x48>)
 8009844:	f002 fb34 	bl	800beb0 <HAL_I2C_Mem_Read>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800984e:	2300      	movs	r3, #0
 8009850:	e001      	b.n	8009856 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8009852:	f06f 0307 	mvn.w	r3, #7
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	2400cd74 	.word	0x2400cd74

08009864 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b094      	sub	sp, #80	; 0x50
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800986e:	2300      	movs	r3, #0
 8009870:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009878:	f06f 0301 	mvn.w	r3, #1
 800987c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800987e:	e074      	b.n	800996a <BSP_OSPI_NOR_Init+0x106>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8009880:	4a3c      	ldr	r2, [pc, #240]	; (8009974 <BSP_OSPI_NOR_Init+0x110>)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d16e      	bne.n	800996a <BSP_OSPI_NOR_Init+0x106>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	4613      	mov	r3, r2
 8009890:	005b      	lsls	r3, r3, #1
 8009892:	4413      	add	r3, r2
 8009894:	015b      	lsls	r3, r3, #5
 8009896:	4a38      	ldr	r2, [pc, #224]	; (8009978 <BSP_OSPI_NOR_Init+0x114>)
 8009898:	4413      	add	r3, r2
 800989a:	4618      	mov	r0, r3
 800989c:	f000 fa0e 	bl	8009cbc <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 80098a0:	f107 031c 	add.w	r3, r7, #28
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fee8 	bl	800867a <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 80098aa:	2303      	movs	r3, #3
 80098ac:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098b4:	fa93 f3a3 	rbit	r3, r3
 80098b8:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80098ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098bc:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80098be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <BSP_OSPI_NOR_Init+0x64>
  {
    return 32U;
 80098c4:	2320      	movs	r3, #32
 80098c6:	e003      	b.n	80098d0 <BSP_OSPI_NOR_Init+0x6c>
  }
  return __builtin_clz(value);
 80098c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098ca:	fab3 f383 	clz	r3, r3
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80098d2:	2300      	movs	r3, #0
 80098d4:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	4613      	mov	r3, r2
 80098e0:	005b      	lsls	r3, r3, #1
 80098e2:	4413      	add	r3, r2
 80098e4:	015b      	lsls	r3, r3, #5
 80098e6:	4a24      	ldr	r2, [pc, #144]	; (8009978 <BSP_OSPI_NOR_Init+0x114>)
 80098e8:	4413      	add	r3, r2
 80098ea:	f107 020c 	add.w	r2, r7, #12
 80098ee:	4611      	mov	r1, r2
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 f897 	bl	8009a24 <MX_OSPI_NOR_Init>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d003      	beq.n	8009904 <BSP_OSPI_NOR_Init+0xa0>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80098fc:	f06f 0303 	mvn.w	r3, #3
 8009900:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009902:	e032      	b.n	800996a <BSP_OSPI_NOR_Init+0x106>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fb83 	bl	800a010 <OSPI_NOR_ResetMemory>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <BSP_OSPI_NOR_Init+0xb4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009910:	f06f 0304 	mvn.w	r3, #4
 8009914:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009916:	e028      	b.n	800996a <BSP_OSPI_NOR_Init+0x106>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	4613      	mov	r3, r2
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	4413      	add	r3, r2
 8009920:	015b      	lsls	r3, r3, #5
 8009922:	4a15      	ldr	r2, [pc, #84]	; (8009978 <BSP_OSPI_NOR_Init+0x114>)
 8009924:	1898      	adds	r0, r3, r2
 8009926:	4a13      	ldr	r2, [pc, #76]	; (8009974 <BSP_OSPI_NOR_Init+0x110>)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	4413      	add	r3, r2
 800992e:	7859      	ldrb	r1, [r3, #1]
 8009930:	4a10      	ldr	r2, [pc, #64]	; (8009974 <BSP_OSPI_NOR_Init+0x110>)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	00db      	lsls	r3, r3, #3
 8009936:	4413      	add	r3, r2
 8009938:	789b      	ldrb	r3, [r3, #2]
 800993a:	461a      	mov	r2, r3
 800993c:	f7fe fecc 	bl	80086d8 <MX25LM51245G_AutoPollingMemReady>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <BSP_OSPI_NOR_Init+0xea>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8009946:	f06f 0304 	mvn.w	r3, #4
 800994a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800994c:	e00d      	b.n	800996a <BSP_OSPI_NOR_Init+0x106>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	7819      	ldrb	r1, [r3, #0]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	785b      	ldrb	r3, [r3, #1]
 8009956:	461a      	mov	r2, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f939 	bl	8009bd0 <BSP_OSPI_NOR_ConfigFlash>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <BSP_OSPI_NOR_Init+0x106>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8009964:	f06f 0304 	mvn.w	r3, #4
 8009968:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 800996a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800996c:	4618      	mov	r0, r3
 800996e:	3750      	adds	r7, #80	; 0x50
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	2400cdc0 	.word	0x2400cdc0
 8009978:	2400cdc8 	.word	0x2400cdc8

0800997c <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8009984:	2300      	movs	r3, #0
 8009986:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800998e:	f06f 0301 	mvn.w	r3, #1
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	e03c      	b.n	8009a10 <BSP_OSPI_NOR_DeInit+0x94>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8009996:	4a21      	ldr	r2, [pc, #132]	; (8009a1c <BSP_OSPI_NOR_DeInit+0xa0>)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d108      	bne.n	80099b4 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f8de 	bl	8009b64 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80099ae:	f06f 0304 	mvn.w	r3, #4
 80099b2:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d12a      	bne.n	8009a10 <BSP_OSPI_NOR_DeInit+0x94>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 80099ba:	4a18      	ldr	r2, [pc, #96]	; (8009a1c <BSP_OSPI_NOR_DeInit+0xa0>)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2100      	movs	r1, #0
 80099c0:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 80099c4:	4a15      	ldr	r2, [pc, #84]	; (8009a1c <BSP_OSPI_NOR_DeInit+0xa0>)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	00db      	lsls	r3, r3, #3
 80099ca:	4413      	add	r3, r2
 80099cc:	2200      	movs	r2, #0
 80099ce:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 80099d0:	4a12      	ldr	r2, [pc, #72]	; (8009a1c <BSP_OSPI_NOR_DeInit+0xa0>)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	00db      	lsls	r3, r3, #3
 80099d6:	4413      	add	r3, r2
 80099d8:	2200      	movs	r2, #0
 80099da:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	4613      	mov	r3, r2
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	4413      	add	r3, r2
 80099e4:	015b      	lsls	r3, r3, #5
 80099e6:	4a0e      	ldr	r2, [pc, #56]	; (8009a20 <BSP_OSPI_NOR_DeInit+0xa4>)
 80099e8:	4413      	add	r3, r2
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 fab6 	bl	8009f5c <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	4613      	mov	r3, r2
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	4413      	add	r3, r2
 80099f8:	015b      	lsls	r3, r3, #5
 80099fa:	4a09      	ldr	r2, [pc, #36]	; (8009a20 <BSP_OSPI_NOR_DeInit+0xa4>)
 80099fc:	4413      	add	r3, r2
 80099fe:	4618      	mov	r0, r3
 8009a00:	f003 fb18 	bl	800d034 <HAL_OSPI_DeInit>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d002      	beq.n	8009a10 <BSP_OSPI_NOR_DeInit+0x94>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8009a0a:	f06f 0303 	mvn.w	r3, #3
 8009a0e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8009a10:	68fb      	ldr	r3, [r7, #12]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	2400cdc0 	.word	0x2400cdc0
 8009a20:	2400cdc8 	.word	0x2400cdc8

08009a24 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a20      	ldr	r2, [pc, #128]	; (8009ab4 <MX_OSPI_NOR_Init+0x90>)
 8009a32:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2204      	movs	r2, #4
 8009a38:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2208      	movs	r2, #8
 8009a7a:	639a      	str	r2, [r3, #56]	; 0x38

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d108      	bne.n	8009a96 <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a8a:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a92:	62da      	str	r2, [r3, #44]	; 0x2c
 8009a94:	e005      	b.n	8009aa2 <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f003 fa06 	bl	800ceb4 <HAL_OSPI_Init>
 8009aa8:	4603      	mov	r3, r0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	52005000 	.word	0x52005000

08009ab8 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009aca:	f06f 0301 	mvn.w	r3, #1
 8009ace:	60fb      	str	r3, [r7, #12]
 8009ad0:	e03f      	b.n	8009b52 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x9a>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8009ad2:	4a22      	ldr	r2, [pc, #136]	; (8009b5c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	4413      	add	r3, r2
 8009ada:	789b      	ldrb	r3, [r3, #2]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d11c      	bne.n	8009b1a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x62>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	4413      	add	r3, r2
 8009ae8:	015b      	lsls	r3, r3, #5
 8009aea:	4a1d      	ldr	r2, [pc, #116]	; (8009b60 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa8>)
 8009aec:	1898      	adds	r0, r3, r2
 8009aee:	4a1b      	ldr	r2, [pc, #108]	; (8009b5c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	00db      	lsls	r3, r3, #3
 8009af4:	4413      	add	r3, r2
 8009af6:	785b      	ldrb	r3, [r3, #1]
 8009af8:	2201      	movs	r2, #1
 8009afa:	4619      	mov	r1, r3
 8009afc:	f7fe fe99 	bl	8008832 <MX25LM51245G_EnableMemoryMappedModeSTR>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x56>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b06:	f06f 0304 	mvn.w	r3, #4
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	e021      	b.n	8009b52 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x9a>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8009b0e:	4a13      	ldr	r2, [pc, #76]	; (8009b5c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2102      	movs	r1, #2
 8009b14:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 8009b18:	e01b      	b.n	8009b52 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x9a>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	005b      	lsls	r3, r3, #1
 8009b20:	4413      	add	r3, r2
 8009b22:	015b      	lsls	r3, r3, #5
 8009b24:	4a0e      	ldr	r2, [pc, #56]	; (8009b60 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa8>)
 8009b26:	441a      	add	r2, r3
 8009b28:	490c      	ldr	r1, [pc, #48]	; (8009b5c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	00db      	lsls	r3, r3, #3
 8009b2e:	440b      	add	r3, r1
 8009b30:	785b      	ldrb	r3, [r3, #1]
 8009b32:	4619      	mov	r1, r3
 8009b34:	4610      	mov	r0, r2
 8009b36:	f7fe ff26 	bl	8008986 <MX25LM51245G_EnableMemoryMappedModeDTR>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d003      	beq.n	8009b48 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x90>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009b40:	f06f 0304 	mvn.w	r3, #4
 8009b44:	60fb      	str	r3, [r7, #12]
 8009b46:	e004      	b.n	8009b52 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x9a>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8009b48:	4a04      	ldr	r2, [pc, #16]	; (8009b5c <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2102      	movs	r1, #2
 8009b4e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 8009b52:	68fb      	ldr	r3, [r7, #12]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	2400cdc0 	.word	0x2400cdc0
 8009b60:	2400cdc8 	.word	0x2400cdc8

08009b64 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009b76:	f06f 0301 	mvn.w	r3, #1
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	e01f      	b.n	8009bbe <BSP_OSPI_NOR_DisableMemoryMappedMode+0x5a>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8009b7e:	4a12      	ldr	r2, [pc, #72]	; (8009bc8 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d003      	beq.n	8009b92 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8009b8a:	f06f 031a 	mvn.w	r3, #26
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	e015      	b.n	8009bbe <BSP_OSPI_NOR_DisableMemoryMappedMode+0x5a>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	4613      	mov	r3, r2
 8009b96:	005b      	lsls	r3, r3, #1
 8009b98:	4413      	add	r3, r2
 8009b9a:	015b      	lsls	r3, r3, #5
 8009b9c:	4a0b      	ldr	r2, [pc, #44]	; (8009bcc <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 8009b9e:	4413      	add	r3, r2
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f003 fe79 	bl	800d898 <HAL_OSPI_Abort>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x50>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8009bac:	f06f 0303 	mvn.w	r3, #3
 8009bb0:	60fb      	str	r3, [r7, #12]
 8009bb2:	e004      	b.n	8009bbe <BSP_OSPI_NOR_DisableMemoryMappedMode+0x5a>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8009bb4:	4a04      	ldr	r2, [pc, #16]	; (8009bc8 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2101      	movs	r1, #1
 8009bba:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	2400cdc0 	.word	0x2400cdc0
 8009bcc:	2400cdc8 	.word	0x2400cdc8

08009bd0 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	460b      	mov	r3, r1
 8009bda:	70fb      	strb	r3, [r7, #3]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8009be0:	2300      	movs	r3, #0
 8009be2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009bea:	f06f 0301 	mvn.w	r3, #1
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	e05d      	b.n	8009cae <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8009bf2:	4a31      	ldr	r2, [pc, #196]	; (8009cb8 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d103      	bne.n	8009c06 <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8009bfe:	f06f 0319 	mvn.w	r3, #25
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	e053      	b.n	8009cae <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8009c06:	4a2c      	ldr	r2, [pc, #176]	; (8009cb8 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	4413      	add	r3, r2
 8009c0e:	785b      	ldrb	r3, [r3, #1]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d125      	bne.n	8009c60 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8009c14:	78fb      	ldrb	r3, [r7, #3]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d107      	bne.n	8009c2a <BSP_OSPI_NOR_ConfigFlash+0x5a>
 8009c1a:	4a27      	ldr	r2, [pc, #156]	; (8009cb8 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	4413      	add	r3, r2
 8009c22:	789b      	ldrb	r3, [r3, #2]
 8009c24:	78ba      	ldrb	r2, [r7, #2]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d02a      	beq.n	8009c80 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fc12 	bl	800a454 <OSPI_NOR_ExitOPIMode>
 8009c30:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d123      	bne.n	8009c80 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d120      	bne.n	8009c80 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8009c3e:	4a1e      	ldr	r2, [pc, #120]	; (8009cb8 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	00db      	lsls	r3, r3, #3
 8009c44:	4413      	add	r3, r2
 8009c46:	789b      	ldrb	r3, [r3, #2]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d104      	bne.n	8009c56 <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fa75 	bl	800a13c <OSPI_NOR_EnterDOPIMode>
 8009c52:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 8009c54:	e014      	b.n	8009c80 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fb4a 	bl	800a2f0 <OSPI_NOR_EnterSOPIMode>
 8009c5c:	60f8      	str	r0, [r7, #12]
      break;
 8009c5e:	e00f      	b.n	8009c80 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8009c60:	78fb      	ldrb	r3, [r7, #3]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d10e      	bne.n	8009c84 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8009c66:	78bb      	ldrb	r3, [r7, #2]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d104      	bne.n	8009c76 <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fb3f 	bl	800a2f0 <OSPI_NOR_EnterSOPIMode>
 8009c72:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 8009c74:	e006      	b.n	8009c84 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa60 	bl	800a13c <OSPI_NOR_EnterDOPIMode>
 8009c7c:	60f8      	str	r0, [r7, #12]
      break;
 8009c7e:	e001      	b.n	8009c84 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 8009c80:	bf00      	nop
 8009c82:	e000      	b.n	8009c86 <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 8009c84:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d110      	bne.n	8009cae <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8009c8c:	4a0a      	ldr	r2, [pc, #40]	; (8009cb8 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2101      	movs	r1, #1
 8009c92:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8009c96:	4a08      	ldr	r2, [pc, #32]	; (8009cb8 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	00db      	lsls	r3, r3, #3
 8009c9c:	4413      	add	r3, r2
 8009c9e:	78fa      	ldrb	r2, [r7, #3]
 8009ca0:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8009ca2:	4a05      	ldr	r2, [pc, #20]	; (8009cb8 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	00db      	lsls	r3, r3, #3
 8009ca8:	4413      	add	r3, r2
 8009caa:	78ba      	ldrb	r2, [r7, #2]
 8009cac:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 8009cae:	68fb      	ldr	r3, [r7, #12]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	2400cdc0 	.word	0x2400cdc0

08009cbc <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b094      	sub	sp, #80	; 0x50
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8009cc4:	4b9e      	ldr	r3, [pc, #632]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009cc6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8009cca:	4a9d      	ldr	r2, [pc, #628]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cd0:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8009cd4:	4b9a      	ldr	r3, [pc, #616]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009cd6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8009cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cde:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8009ce2:	4b97      	ldr	r3, [pc, #604]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ce6:	4a96      	ldr	r2, [pc, #600]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cec:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8009cee:	4b94      	ldr	r3, [pc, #592]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cf2:	4a93      	ldr	r2, [pc, #588]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cf8:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8009cfa:	4b91      	ldr	r3, [pc, #580]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009cfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d00:	4a8f      	ldr	r2, [pc, #572]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d02:	f043 0302 	orr.w	r3, r3, #2
 8009d06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009d0a:	4b8d      	ldr	r3, [pc, #564]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d10:	f003 0302 	and.w	r3, r3, #2
 8009d14:	637b      	str	r3, [r7, #52]	; 0x34
 8009d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 8009d18:	4b89      	ldr	r3, [pc, #548]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d1e:	4a88      	ldr	r2, [pc, #544]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d20:	f043 0304 	orr.w	r3, r3, #4
 8009d24:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009d28:	4b85      	ldr	r3, [pc, #532]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d2e:	f003 0304 	and.w	r3, r3, #4
 8009d32:	633b      	str	r3, [r7, #48]	; 0x30
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 8009d36:	4b82      	ldr	r3, [pc, #520]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d3c:	4a80      	ldr	r2, [pc, #512]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009d46:	4b7e      	ldr	r3, [pc, #504]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 8009d54:	4b7a      	ldr	r3, [pc, #488]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d5a:	4a79      	ldr	r2, [pc, #484]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d5c:	f043 0308 	orr.w	r3, r3, #8
 8009d60:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009d64:	4b76      	ldr	r3, [pc, #472]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d6a:	f003 0308 	and.w	r3, r3, #8
 8009d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 8009d72:	4b73      	ldr	r3, [pc, #460]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d78:	4a71      	ldr	r2, [pc, #452]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d7a:	f043 0320 	orr.w	r3, r3, #32
 8009d7e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009d82:	4b6f      	ldr	r3, [pc, #444]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d88:	f003 0320 	and.w	r3, r3, #32
 8009d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 8009d90:	4b6b      	ldr	r3, [pc, #428]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d96:	4a6a      	ldr	r2, [pc, #424]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009d98:	f043 0320 	orr.w	r3, r3, #32
 8009d9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009da0:	4b67      	ldr	r3, [pc, #412]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009da2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009da6:	f003 0320 	and.w	r3, r3, #32
 8009daa:	623b      	str	r3, [r7, #32]
 8009dac:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 8009dae:	4b64      	ldr	r3, [pc, #400]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009db0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009db4:	4a62      	ldr	r2, [pc, #392]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009db6:	f043 0320 	orr.w	r3, r3, #32
 8009dba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009dbe:	4b60      	ldr	r3, [pc, #384]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009dc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009dc4:	f003 0320 	and.w	r3, r3, #32
 8009dc8:	61fb      	str	r3, [r7, #28]
 8009dca:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 8009dcc:	4b5c      	ldr	r3, [pc, #368]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009dce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009dd2:	4a5b      	ldr	r2, [pc, #364]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009dd4:	f043 0304 	orr.w	r3, r3, #4
 8009dd8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009ddc:	4b58      	ldr	r3, [pc, #352]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009dde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009de2:	f003 0304 	and.w	r3, r3, #4
 8009de6:	61bb      	str	r3, [r7, #24]
 8009de8:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 8009dea:	4b55      	ldr	r3, [pc, #340]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009dec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009df0:	4a53      	ldr	r2, [pc, #332]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009dfa:	4b51      	ldr	r3, [pc, #324]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009dfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e04:	617b      	str	r3, [r7, #20]
 8009e06:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 8009e08:	4b4d      	ldr	r3, [pc, #308]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009e0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009e0e:	4a4c      	ldr	r2, [pc, #304]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e14:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009e18:	4b49      	ldr	r3, [pc, #292]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009e1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e22:	613b      	str	r3, [r7, #16]
 8009e24:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 8009e26:	4b46      	ldr	r3, [pc, #280]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009e28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009e2c:	4a44      	ldr	r2, [pc, #272]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e32:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8009e36:	4b42      	ldr	r3, [pc, #264]	; (8009f40 <OSPI_NOR_MspInit+0x284>)
 8009e38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e40:	60fb      	str	r3, [r7, #12]
 8009e42:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 8009e44:	2340      	movs	r3, #64	; 0x40
 8009e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009e48:	2302      	movs	r3, #2
 8009e4a:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e50:	2303      	movs	r3, #3
 8009e52:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 8009e54:	230a      	movs	r3, #10
 8009e56:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8009e58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4839      	ldr	r0, [pc, #228]	; (8009f44 <OSPI_NOR_MspInit+0x288>)
 8009e60:	f001 fb40 	bl	800b4e4 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 8009e64:	2320      	movs	r3, #32
 8009e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 8009e68:	230a      	movs	r3, #10
 8009e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 8009e6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009e70:	4619      	mov	r1, r3
 8009e72:	4835      	ldr	r0, [pc, #212]	; (8009f48 <OSPI_NOR_MspInit+0x28c>)
 8009e74:	f001 fb36 	bl	800b4e4 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8009e78:	2304      	movs	r3, #4
 8009e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 8009e80:	2309      	movs	r3, #9
 8009e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8009e84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009e88:	4619      	mov	r1, r3
 8009e8a:	4830      	ldr	r0, [pc, #192]	; (8009f4c <OSPI_NOR_MspInit+0x290>)
 8009e8c:	f001 fb2a 	bl	800b4e4 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 8009e90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 8009e96:	2309      	movs	r3, #9
 8009e98:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8009e9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	482b      	ldr	r0, [pc, #172]	; (8009f50 <OSPI_NOR_MspInit+0x294>)
 8009ea2:	f001 fb1f 	bl	800b4e4 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8009ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8009eac:	230a      	movs	r3, #10
 8009eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8009eb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4827      	ldr	r0, [pc, #156]	; (8009f54 <OSPI_NOR_MspInit+0x298>)
 8009eb8:	f001 fb14 	bl	800b4e4 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8009ebc:	2380      	movs	r3, #128	; 0x80
 8009ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8009ec0:	230a      	movs	r3, #10
 8009ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8009ec4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009ec8:	4619      	mov	r1, r3
 8009eca:	4822      	ldr	r0, [pc, #136]	; (8009f54 <OSPI_NOR_MspInit+0x298>)
 8009ecc:	f001 fb0a 	bl	800b4e4 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8009ed0:	2340      	movs	r3, #64	; 0x40
 8009ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8009ed4:	230a      	movs	r3, #10
 8009ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8009ed8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009edc:	4619      	mov	r1, r3
 8009ede:	481d      	ldr	r0, [pc, #116]	; (8009f54 <OSPI_NOR_MspInit+0x298>)
 8009ee0:	f001 fb00 	bl	800b4e4 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 8009ee8:	230a      	movs	r3, #10
 8009eea:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8009eec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4815      	ldr	r0, [pc, #84]	; (8009f48 <OSPI_NOR_MspInit+0x28c>)
 8009ef4:	f001 faf6 	bl	800b4e4 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8009ef8:	2308      	movs	r3, #8
 8009efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8009efc:	2309      	movs	r3, #9
 8009efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8009f00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009f04:	4619      	mov	r1, r3
 8009f06:	4814      	ldr	r0, [pc, #80]	; (8009f58 <OSPI_NOR_MspInit+0x29c>)
 8009f08:	f001 faec 	bl	800b4e4 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8009f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 8009f12:	2309      	movs	r3, #9
 8009f14:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 8009f16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4809      	ldr	r0, [pc, #36]	; (8009f44 <OSPI_NOR_MspInit+0x288>)
 8009f1e:	f001 fae1 	bl	800b4e4 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 8009f22:	2380      	movs	r3, #128	; 0x80
 8009f24:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 8009f26:	230a      	movs	r3, #10
 8009f28:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8009f2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009f2e:	4619      	mov	r1, r3
 8009f30:	4807      	ldr	r0, [pc, #28]	; (8009f50 <OSPI_NOR_MspInit+0x294>)
 8009f32:	f001 fad7 	bl	800b4e4 <HAL_GPIO_Init>
}
 8009f36:	bf00      	nop
 8009f38:	3750      	adds	r7, #80	; 0x50
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	58024400 	.word	0x58024400
 8009f44:	58021800 	.word	0x58021800
 8009f48:	58020800 	.word	0x58020800
 8009f4c:	58020400 	.word	0x58020400
 8009f50:	58020c00 	.word	0x58020c00
 8009f54:	58021400 	.word	0x58021400
 8009f58:	58021c00 	.word	0x58021c00

08009f5c <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 8009f64:	2104      	movs	r1, #4
 8009f66:	4823      	ldr	r0, [pc, #140]	; (8009ff4 <OSPI_NOR_MspDeInit+0x98>)
 8009f68:	f001 fc6c 	bl	800b844 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 8009f6c:	2120      	movs	r1, #32
 8009f6e:	4822      	ldr	r0, [pc, #136]	; (8009ff8 <OSPI_NOR_MspDeInit+0x9c>)
 8009f70:	f001 fc68 	bl	800b844 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8009f74:	2140      	movs	r1, #64	; 0x40
 8009f76:	4821      	ldr	r0, [pc, #132]	; (8009ffc <OSPI_NOR_MspDeInit+0xa0>)
 8009f78:	f001 fc64 	bl	800b844 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8009f7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f80:	481f      	ldr	r0, [pc, #124]	; (800a000 <OSPI_NOR_MspDeInit+0xa4>)
 8009f82:	f001 fc5f 	bl	800b844 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 8009f86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f8a:	481e      	ldr	r0, [pc, #120]	; (800a004 <OSPI_NOR_MspDeInit+0xa8>)
 8009f8c:	f001 fc5a 	bl	800b844 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 8009f90:	2180      	movs	r1, #128	; 0x80
 8009f92:	481c      	ldr	r0, [pc, #112]	; (800a004 <OSPI_NOR_MspDeInit+0xa8>)
 8009f94:	f001 fc56 	bl	800b844 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8009f98:	2140      	movs	r1, #64	; 0x40
 8009f9a:	481a      	ldr	r0, [pc, #104]	; (800a004 <OSPI_NOR_MspDeInit+0xa8>)
 8009f9c:	f001 fc52 	bl	800b844 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 8009fa0:	2102      	movs	r1, #2
 8009fa2:	4815      	ldr	r0, [pc, #84]	; (8009ff8 <OSPI_NOR_MspDeInit+0x9c>)
 8009fa4:	f001 fc4e 	bl	800b844 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8009fa8:	2108      	movs	r1, #8
 8009faa:	4817      	ldr	r0, [pc, #92]	; (800a008 <OSPI_NOR_MspDeInit+0xac>)
 8009fac:	f001 fc4a 	bl	800b844 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 8009fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009fb4:	4811      	ldr	r0, [pc, #68]	; (8009ffc <OSPI_NOR_MspDeInit+0xa0>)
 8009fb6:	f001 fc45 	bl	800b844 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8009fba:	2180      	movs	r1, #128	; 0x80
 8009fbc:	4810      	ldr	r0, [pc, #64]	; (800a000 <OSPI_NOR_MspDeInit+0xa4>)
 8009fbe:	f001 fc41 	bl	800b844 <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 8009fc2:	4b12      	ldr	r3, [pc, #72]	; (800a00c <OSPI_NOR_MspDeInit+0xb0>)
 8009fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fc6:	4a11      	ldr	r2, [pc, #68]	; (800a00c <OSPI_NOR_MspDeInit+0xb0>)
 8009fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009fcc:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 8009fce:	4b0f      	ldr	r3, [pc, #60]	; (800a00c <OSPI_NOR_MspDeInit+0xb0>)
 8009fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fd2:	4a0e      	ldr	r2, [pc, #56]	; (800a00c <OSPI_NOR_MspDeInit+0xb0>)
 8009fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fd8:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 8009fda:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <OSPI_NOR_MspDeInit+0xb0>)
 8009fdc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8009fe0:	4a0a      	ldr	r2, [pc, #40]	; (800a00c <OSPI_NOR_MspDeInit+0xb0>)
 8009fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fe6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 8009fea:	bf00      	nop
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	58020400 	.word	0x58020400
 8009ff8:	58020800 	.word	0x58020800
 8009ffc:	58021800 	.word	0x58021800
 800a000:	58020c00 	.word	0x58020c00
 800a004:	58021400 	.word	0x58021400
 800a008:	58021c00 	.word	0x58021c00
 800a00c:	58024400 	.word	0x58024400

0800a010 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a018:	2300      	movs	r3, #0
 800a01a:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	4613      	mov	r3, r2
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	4413      	add	r3, r2
 800a024:	015b      	lsls	r3, r3, #5
 800a026:	4a43      	ldr	r2, [pc, #268]	; (800a134 <OSPI_NOR_ResetMemory+0x124>)
 800a028:	4413      	add	r3, r2
 800a02a:	2200      	movs	r2, #0
 800a02c:	2100      	movs	r1, #0
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe ff12 	bl	8008e58 <MX25LM51245G_ResetEnable>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <OSPI_NOR_ResetMemory+0x32>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a03a:	f06f 0304 	mvn.w	r3, #4
 800a03e:	60fb      	str	r3, [r7, #12]
 800a040:	e072      	b.n	800a128 <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	4613      	mov	r3, r2
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	4413      	add	r3, r2
 800a04a:	015b      	lsls	r3, r3, #5
 800a04c:	4a39      	ldr	r2, [pc, #228]	; (800a134 <OSPI_NOR_ResetMemory+0x124>)
 800a04e:	4413      	add	r3, r2
 800a050:	2200      	movs	r2, #0
 800a052:	2100      	movs	r1, #0
 800a054:	4618      	mov	r0, r3
 800a056:	f7fe ff57 	bl	8008f08 <MX25LM51245G_ResetMemory>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <OSPI_NOR_ResetMemory+0x58>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a060:	f06f 0304 	mvn.w	r3, #4
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	e05f      	b.n	800a128 <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	4613      	mov	r3, r2
 800a06c:	005b      	lsls	r3, r3, #1
 800a06e:	4413      	add	r3, r2
 800a070:	015b      	lsls	r3, r3, #5
 800a072:	4a30      	ldr	r2, [pc, #192]	; (800a134 <OSPI_NOR_ResetMemory+0x124>)
 800a074:	4413      	add	r3, r2
 800a076:	2200      	movs	r2, #0
 800a078:	2101      	movs	r1, #1
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fe feec 	bl	8008e58 <MX25LM51245G_ResetEnable>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d003      	beq.n	800a08e <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a086:	f06f 0304 	mvn.w	r3, #4
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	e04c      	b.n	800a128 <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	4613      	mov	r3, r2
 800a092:	005b      	lsls	r3, r3, #1
 800a094:	4413      	add	r3, r2
 800a096:	015b      	lsls	r3, r3, #5
 800a098:	4a26      	ldr	r2, [pc, #152]	; (800a134 <OSPI_NOR_ResetMemory+0x124>)
 800a09a:	4413      	add	r3, r2
 800a09c:	2200      	movs	r2, #0
 800a09e:	2101      	movs	r1, #1
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7fe ff31 	bl	8008f08 <MX25LM51245G_ResetMemory>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d003      	beq.n	800a0b4 <OSPI_NOR_ResetMemory+0xa4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0ac:	f06f 0304 	mvn.w	r3, #4
 800a0b0:	60fb      	str	r3, [r7, #12]
 800a0b2:	e039      	b.n	800a128 <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	005b      	lsls	r3, r3, #1
 800a0ba:	4413      	add	r3, r2
 800a0bc:	015b      	lsls	r3, r3, #5
 800a0be:	4a1d      	ldr	r2, [pc, #116]	; (800a134 <OSPI_NOR_ResetMemory+0x124>)
 800a0c0:	4413      	add	r3, r2
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fec6 	bl	8008e58 <MX25LM51245G_ResetEnable>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <OSPI_NOR_ResetMemory+0xca>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0d2:	f06f 0304 	mvn.w	r3, #4
 800a0d6:	60fb      	str	r3, [r7, #12]
 800a0d8:	e026      	b.n	800a128 <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	005b      	lsls	r3, r3, #1
 800a0e0:	4413      	add	r3, r2
 800a0e2:	015b      	lsls	r3, r3, #5
 800a0e4:	4a13      	ldr	r2, [pc, #76]	; (800a134 <OSPI_NOR_ResetMemory+0x124>)
 800a0e6:	4413      	add	r3, r2
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	2101      	movs	r1, #1
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe ff0b 	bl	8008f08 <MX25LM51245G_ResetMemory>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d003      	beq.n	800a100 <OSPI_NOR_ResetMemory+0xf0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0f8:	f06f 0304 	mvn.w	r3, #4
 800a0fc:	60fb      	str	r3, [r7, #12]
 800a0fe:	e013      	b.n	800a128 <OSPI_NOR_ResetMemory+0x118>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 800a100:	4a0d      	ldr	r2, [pc, #52]	; (800a138 <OSPI_NOR_ResetMemory+0x128>)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2101      	movs	r1, #1
 800a106:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800a10a:	4a0b      	ldr	r2, [pc, #44]	; (800a138 <OSPI_NOR_ResetMemory+0x128>)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	4413      	add	r3, r2
 800a112:	2200      	movs	r2, #0
 800a114:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 800a116:	4a08      	ldr	r2, [pc, #32]	; (800a138 <OSPI_NOR_ResetMemory+0x128>)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	4413      	add	r3, r2
 800a11e:	2200      	movs	r2, #0
 800a120:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 800a122:	2064      	movs	r0, #100	; 0x64
 800a124:	f000 fd1a 	bl	800ab5c <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 800a128:	68fb      	ldr	r3, [r7, #12]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	2400cdc8 	.word	0x2400cdc8
 800a138:	2400cdc0 	.word	0x2400cdc0

0800a13c <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af02      	add	r7, sp, #8
 800a142:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a144:	2300      	movs	r3, #0
 800a146:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	4613      	mov	r3, r2
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	4413      	add	r3, r2
 800a150:	015b      	lsls	r3, r3, #5
 800a152:	4a65      	ldr	r2, [pc, #404]	; (800a2e8 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800a154:	1898      	adds	r0, r3, r2
 800a156:	4a65      	ldr	r2, [pc, #404]	; (800a2ec <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	00db      	lsls	r3, r3, #3
 800a15c:	4413      	add	r3, r2
 800a15e:	7859      	ldrb	r1, [r3, #1]
 800a160:	4a62      	ldr	r2, [pc, #392]	; (800a2ec <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	00db      	lsls	r3, r3, #3
 800a166:	4413      	add	r3, r2
 800a168:	789b      	ldrb	r3, [r3, #2]
 800a16a:	461a      	mov	r2, r3
 800a16c:	f7fe fc7a 	bl	8008a64 <MX25LM51245G_WriteEnable>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <OSPI_NOR_EnterDOPIMode+0x42>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a176:	f06f 0304 	mvn.w	r3, #4
 800a17a:	60fb      	str	r3, [r7, #12]
 800a17c:	e0ae      	b.n	800a2dc <OSPI_NOR_EnterDOPIMode+0x1a0>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	4613      	mov	r3, r2
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	4413      	add	r3, r2
 800a186:	015b      	lsls	r3, r3, #5
 800a188:	4a57      	ldr	r2, [pc, #348]	; (800a2e8 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800a18a:	1898      	adds	r0, r3, r2
 800a18c:	4a57      	ldr	r2, [pc, #348]	; (800a2ec <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	00db      	lsls	r3, r3, #3
 800a192:	4413      	add	r3, r2
 800a194:	7859      	ldrb	r1, [r3, #1]
 800a196:	4a55      	ldr	r2, [pc, #340]	; (800a2ec <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	00db      	lsls	r3, r3, #3
 800a19c:	4413      	add	r3, r2
 800a19e:	789a      	ldrb	r2, [r3, #2]
 800a1a0:	2307      	movs	r3, #7
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a1a8:	f7fe fd27 	bl	8008bfa <MX25LM51245G_WriteCfg2Register>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <OSPI_NOR_EnterDOPIMode+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a1b2:	f06f 0304 	mvn.w	r3, #4
 800a1b6:	60fb      	str	r3, [r7, #12]
 800a1b8:	e090      	b.n	800a2dc <OSPI_NOR_EnterDOPIMode+0x1a0>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	4413      	add	r3, r2
 800a1c2:	015b      	lsls	r3, r3, #5
 800a1c4:	4a48      	ldr	r2, [pc, #288]	; (800a2e8 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800a1c6:	1898      	adds	r0, r3, r2
 800a1c8:	4a48      	ldr	r2, [pc, #288]	; (800a2ec <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	00db      	lsls	r3, r3, #3
 800a1ce:	4413      	add	r3, r2
 800a1d0:	7859      	ldrb	r1, [r3, #1]
 800a1d2:	4a46      	ldr	r2, [pc, #280]	; (800a2ec <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	4413      	add	r3, r2
 800a1da:	789b      	ldrb	r3, [r3, #2]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	f7fe fc41 	bl	8008a64 <MX25LM51245G_WriteEnable>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d003      	beq.n	800a1f0 <OSPI_NOR_EnterDOPIMode+0xb4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a1e8:	f06f 0304 	mvn.w	r3, #4
 800a1ec:	60fb      	str	r3, [r7, #12]
 800a1ee:	e075      	b.n	800a2dc <OSPI_NOR_EnterDOPIMode+0x1a0>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	005b      	lsls	r3, r3, #1
 800a1f6:	4413      	add	r3, r2
 800a1f8:	015b      	lsls	r3, r3, #5
 800a1fa:	4a3b      	ldr	r2, [pc, #236]	; (800a2e8 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800a1fc:	1898      	adds	r0, r3, r2
 800a1fe:	4a3b      	ldr	r2, [pc, #236]	; (800a2ec <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	00db      	lsls	r3, r3, #3
 800a204:	4413      	add	r3, r2
 800a206:	7859      	ldrb	r1, [r3, #1]
 800a208:	4a38      	ldr	r2, [pc, #224]	; (800a2ec <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	00db      	lsls	r3, r3, #3
 800a20e:	4413      	add	r3, r2
 800a210:	789a      	ldrb	r2, [r3, #2]
 800a212:	2302      	movs	r3, #2
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	2300      	movs	r3, #0
 800a218:	f7fe fcef 	bl	8008bfa <MX25LM51245G_WriteCfg2Register>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d003      	beq.n	800a22a <OSPI_NOR_EnterDOPIMode+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a222:	f06f 0304 	mvn.w	r3, #4
 800a226:	60fb      	str	r3, [r7, #12]
 800a228:	e058      	b.n	800a2dc <OSPI_NOR_EnterDOPIMode+0x1a0>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800a22a:	2028      	movs	r0, #40	; 0x28
 800a22c:	f000 fc96 	bl	800ab5c <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800a230:	492d      	ldr	r1, [pc, #180]	; (800a2e8 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	4613      	mov	r3, r2
 800a236:	005b      	lsls	r3, r3, #1
 800a238:	4413      	add	r3, r2
 800a23a:	015b      	lsls	r3, r3, #5
 800a23c:	440b      	add	r3, r1
 800a23e:	330c      	adds	r3, #12
 800a240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a244:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800a246:	4928      	ldr	r1, [pc, #160]	; (800a2e8 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	4613      	mov	r3, r2
 800a24c:	005b      	lsls	r3, r3, #1
 800a24e:	4413      	add	r3, r2
 800a250:	015b      	lsls	r3, r3, #5
 800a252:	440b      	add	r3, r1
 800a254:	332c      	adds	r3, #44	; 0x2c
 800a256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a25a:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	4613      	mov	r3, r2
 800a260:	005b      	lsls	r3, r3, #1
 800a262:	4413      	add	r3, r2
 800a264:	015b      	lsls	r3, r3, #5
 800a266:	4a20      	ldr	r2, [pc, #128]	; (800a2e8 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800a268:	4413      	add	r3, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f002 fe22 	bl	800ceb4 <HAL_OSPI_Init>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d003      	beq.n	800a27e <OSPI_NOR_EnterDOPIMode+0x142>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a276:	f06f 0303 	mvn.w	r3, #3
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	e02e      	b.n	800a2dc <OSPI_NOR_EnterDOPIMode+0x1a0>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	4613      	mov	r3, r2
 800a282:	005b      	lsls	r3, r3, #1
 800a284:	4413      	add	r3, r2
 800a286:	015b      	lsls	r3, r3, #5
 800a288:	4a17      	ldr	r2, [pc, #92]	; (800a2e8 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800a28a:	4413      	add	r3, r2
 800a28c:	2201      	movs	r2, #1
 800a28e:	2101      	movs	r1, #1
 800a290:	4618      	mov	r0, r3
 800a292:	f7fe fa21 	bl	80086d8 <MX25LM51245G_AutoPollingMemReady>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d003      	beq.n	800a2a4 <OSPI_NOR_EnterDOPIMode+0x168>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a29c:	f06f 0304 	mvn.w	r3, #4
 800a2a0:	60fb      	str	r3, [r7, #12]
 800a2a2:	e01b      	b.n	800a2dc <OSPI_NOR_EnterDOPIMode+0x1a0>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	4413      	add	r3, r2
 800a2ac:	015b      	lsls	r3, r3, #5
 800a2ae:	4a0e      	ldr	r2, [pc, #56]	; (800a2e8 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800a2b0:	1898      	adds	r0, r3, r2
 800a2b2:	f107 0308 	add.w	r3, r7, #8
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	2101      	movs	r1, #1
 800a2be:	f7fe fd31 	bl	8008d24 <MX25LM51245G_ReadCfg2Register>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d003      	beq.n	800a2d0 <OSPI_NOR_EnterDOPIMode+0x194>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2c8:	f06f 0304 	mvn.w	r3, #4
 800a2cc:	60fb      	str	r3, [r7, #12]
 800a2ce:	e005      	b.n	800a2dc <OSPI_NOR_EnterDOPIMode+0x1a0>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 800a2d0:	7a3b      	ldrb	r3, [r7, #8]
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d002      	beq.n	800a2dc <OSPI_NOR_EnterDOPIMode+0x1a0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2d6:	f06f 0304 	mvn.w	r3, #4
 800a2da:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	2400cdc8 	.word	0x2400cdc8
 800a2ec:	2400cdc0 	.word	0x2400cdc0

0800a2f0 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af02      	add	r7, sp, #8
 800a2f6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	4613      	mov	r3, r2
 800a300:	005b      	lsls	r3, r3, #1
 800a302:	4413      	add	r3, r2
 800a304:	015b      	lsls	r3, r3, #5
 800a306:	4a51      	ldr	r2, [pc, #324]	; (800a44c <OSPI_NOR_EnterSOPIMode+0x15c>)
 800a308:	1898      	adds	r0, r3, r2
 800a30a:	4a51      	ldr	r2, [pc, #324]	; (800a450 <OSPI_NOR_EnterSOPIMode+0x160>)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	00db      	lsls	r3, r3, #3
 800a310:	4413      	add	r3, r2
 800a312:	7859      	ldrb	r1, [r3, #1]
 800a314:	4a4e      	ldr	r2, [pc, #312]	; (800a450 <OSPI_NOR_EnterSOPIMode+0x160>)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	00db      	lsls	r3, r3, #3
 800a31a:	4413      	add	r3, r2
 800a31c:	789b      	ldrb	r3, [r3, #2]
 800a31e:	461a      	mov	r2, r3
 800a320:	f7fe fba0 	bl	8008a64 <MX25LM51245G_WriteEnable>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <OSPI_NOR_EnterSOPIMode+0x42>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a32a:	f06f 0304 	mvn.w	r3, #4
 800a32e:	60fb      	str	r3, [r7, #12]
 800a330:	e087      	b.n	800a442 <OSPI_NOR_EnterSOPIMode+0x152>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	4613      	mov	r3, r2
 800a336:	005b      	lsls	r3, r3, #1
 800a338:	4413      	add	r3, r2
 800a33a:	015b      	lsls	r3, r3, #5
 800a33c:	4a43      	ldr	r2, [pc, #268]	; (800a44c <OSPI_NOR_EnterSOPIMode+0x15c>)
 800a33e:	1898      	adds	r0, r3, r2
 800a340:	4a43      	ldr	r2, [pc, #268]	; (800a450 <OSPI_NOR_EnterSOPIMode+0x160>)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	4413      	add	r3, r2
 800a348:	7859      	ldrb	r1, [r3, #1]
 800a34a:	4a41      	ldr	r2, [pc, #260]	; (800a450 <OSPI_NOR_EnterSOPIMode+0x160>)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	00db      	lsls	r3, r3, #3
 800a350:	4413      	add	r3, r2
 800a352:	789a      	ldrb	r2, [r3, #2]
 800a354:	2307      	movs	r3, #7
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a35c:	f7fe fc4d 	bl	8008bfa <MX25LM51245G_WriteCfg2Register>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d003      	beq.n	800a36e <OSPI_NOR_EnterSOPIMode+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a366:	f06f 0304 	mvn.w	r3, #4
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	e069      	b.n	800a442 <OSPI_NOR_EnterSOPIMode+0x152>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	4613      	mov	r3, r2
 800a372:	005b      	lsls	r3, r3, #1
 800a374:	4413      	add	r3, r2
 800a376:	015b      	lsls	r3, r3, #5
 800a378:	4a34      	ldr	r2, [pc, #208]	; (800a44c <OSPI_NOR_EnterSOPIMode+0x15c>)
 800a37a:	1898      	adds	r0, r3, r2
 800a37c:	4a34      	ldr	r2, [pc, #208]	; (800a450 <OSPI_NOR_EnterSOPIMode+0x160>)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	00db      	lsls	r3, r3, #3
 800a382:	4413      	add	r3, r2
 800a384:	7859      	ldrb	r1, [r3, #1]
 800a386:	4a32      	ldr	r2, [pc, #200]	; (800a450 <OSPI_NOR_EnterSOPIMode+0x160>)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	4413      	add	r3, r2
 800a38e:	789b      	ldrb	r3, [r3, #2]
 800a390:	461a      	mov	r2, r3
 800a392:	f7fe fb67 	bl	8008a64 <MX25LM51245G_WriteEnable>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d003      	beq.n	800a3a4 <OSPI_NOR_EnterSOPIMode+0xb4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a39c:	f06f 0304 	mvn.w	r3, #4
 800a3a0:	60fb      	str	r3, [r7, #12]
 800a3a2:	e04e      	b.n	800a442 <OSPI_NOR_EnterSOPIMode+0x152>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	005b      	lsls	r3, r3, #1
 800a3aa:	4413      	add	r3, r2
 800a3ac:	015b      	lsls	r3, r3, #5
 800a3ae:	4a27      	ldr	r2, [pc, #156]	; (800a44c <OSPI_NOR_EnterSOPIMode+0x15c>)
 800a3b0:	1898      	adds	r0, r3, r2
 800a3b2:	4a27      	ldr	r2, [pc, #156]	; (800a450 <OSPI_NOR_EnterSOPIMode+0x160>)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	00db      	lsls	r3, r3, #3
 800a3b8:	4413      	add	r3, r2
 800a3ba:	7859      	ldrb	r1, [r3, #1]
 800a3bc:	4a24      	ldr	r2, [pc, #144]	; (800a450 <OSPI_NOR_EnterSOPIMode+0x160>)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	00db      	lsls	r3, r3, #3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	789a      	ldrb	r2, [r3, #2]
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f7fe fc15 	bl	8008bfa <MX25LM51245G_WriteCfg2Register>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d003      	beq.n	800a3de <OSPI_NOR_EnterSOPIMode+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a3d6:	f06f 0304 	mvn.w	r3, #4
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	e031      	b.n	800a442 <OSPI_NOR_EnterSOPIMode+0x152>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800a3de:	2028      	movs	r0, #40	; 0x28
 800a3e0:	f000 fbbc 	bl	800ab5c <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	4413      	add	r3, r2
 800a3ec:	015b      	lsls	r3, r3, #5
 800a3ee:	4a17      	ldr	r2, [pc, #92]	; (800a44c <OSPI_NOR_EnterSOPIMode+0x15c>)
 800a3f0:	4413      	add	r3, r2
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	2101      	movs	r1, #1
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe f96e 	bl	80086d8 <MX25LM51245G_AutoPollingMemReady>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <OSPI_NOR_EnterSOPIMode+0x11a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a402:	f06f 0304 	mvn.w	r3, #4
 800a406:	60fb      	str	r3, [r7, #12]
 800a408:	e01b      	b.n	800a442 <OSPI_NOR_EnterSOPIMode+0x152>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	4613      	mov	r3, r2
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	4413      	add	r3, r2
 800a412:	015b      	lsls	r3, r3, #5
 800a414:	4a0d      	ldr	r2, [pc, #52]	; (800a44c <OSPI_NOR_EnterSOPIMode+0x15c>)
 800a416:	1898      	adds	r0, r3, r2
 800a418:	f107 0308 	add.w	r3, r7, #8
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	2300      	movs	r3, #0
 800a420:	2200      	movs	r2, #0
 800a422:	2101      	movs	r1, #1
 800a424:	f7fe fc7e 	bl	8008d24 <MX25LM51245G_ReadCfg2Register>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d003      	beq.n	800a436 <OSPI_NOR_EnterSOPIMode+0x146>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a42e:	f06f 0304 	mvn.w	r3, #4
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	e005      	b.n	800a442 <OSPI_NOR_EnterSOPIMode+0x152>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800a436:	7a3b      	ldrb	r3, [r7, #8]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d002      	beq.n	800a442 <OSPI_NOR_EnterSOPIMode+0x152>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a43c:	f06f 0304 	mvn.w	r3, #4
 800a440:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800a442:	68fb      	ldr	r3, [r7, #12]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	2400cdc8 	.word	0x2400cdc8
 800a450:	2400cdc0 	.word	0x2400cdc0

0800a454 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b086      	sub	sp, #24
 800a458:	af02      	add	r7, sp, #8
 800a45a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a45c:	2300      	movs	r3, #0
 800a45e:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	4613      	mov	r3, r2
 800a464:	005b      	lsls	r3, r3, #1
 800a466:	4413      	add	r3, r2
 800a468:	015b      	lsls	r3, r3, #5
 800a46a:	4a4c      	ldr	r2, [pc, #304]	; (800a59c <OSPI_NOR_ExitOPIMode+0x148>)
 800a46c:	1898      	adds	r0, r3, r2
 800a46e:	4a4c      	ldr	r2, [pc, #304]	; (800a5a0 <OSPI_NOR_ExitOPIMode+0x14c>)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	4413      	add	r3, r2
 800a476:	7859      	ldrb	r1, [r3, #1]
 800a478:	4a49      	ldr	r2, [pc, #292]	; (800a5a0 <OSPI_NOR_ExitOPIMode+0x14c>)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	00db      	lsls	r3, r3, #3
 800a47e:	4413      	add	r3, r2
 800a480:	789b      	ldrb	r3, [r3, #2]
 800a482:	461a      	mov	r2, r3
 800a484:	f7fe faee 	bl	8008a64 <MX25LM51245G_WriteEnable>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d003      	beq.n	800a496 <OSPI_NOR_ExitOPIMode+0x42>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a48e:	f06f 0304 	mvn.w	r3, #4
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	e07d      	b.n	800a592 <OSPI_NOR_ExitOPIMode+0x13e>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	005b      	lsls	r3, r3, #1
 800a4a4:	4413      	add	r3, r2
 800a4a6:	015b      	lsls	r3, r3, #5
 800a4a8:	4a3c      	ldr	r2, [pc, #240]	; (800a59c <OSPI_NOR_ExitOPIMode+0x148>)
 800a4aa:	1898      	adds	r0, r3, r2
 800a4ac:	4a3c      	ldr	r2, [pc, #240]	; (800a5a0 <OSPI_NOR_ExitOPIMode+0x14c>)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	00db      	lsls	r3, r3, #3
 800a4b2:	4413      	add	r3, r2
 800a4b4:	7859      	ldrb	r1, [r3, #1]
 800a4b6:	4a3a      	ldr	r2, [pc, #232]	; (800a5a0 <OSPI_NOR_ExitOPIMode+0x14c>)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	4413      	add	r3, r2
 800a4be:	789a      	ldrb	r2, [r3, #2]
 800a4c0:	7a3b      	ldrb	r3, [r7, #8]
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f7fe fb98 	bl	8008bfa <MX25LM51245G_WriteCfg2Register>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d003      	beq.n	800a4d8 <OSPI_NOR_ExitOPIMode+0x84>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a4d0:	f06f 0304 	mvn.w	r3, #4
 800a4d4:	60fb      	str	r3, [r7, #12]
 800a4d6:	e05c      	b.n	800a592 <OSPI_NOR_ExitOPIMode+0x13e>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800a4d8:	2028      	movs	r0, #40	; 0x28
 800a4da:	f000 fb3f 	bl	800ab5c <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800a4de:	4a30      	ldr	r2, [pc, #192]	; (800a5a0 <OSPI_NOR_ExitOPIMode+0x14c>)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	4413      	add	r3, r2
 800a4e6:	789b      	ldrb	r3, [r3, #2]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d123      	bne.n	800a534 <OSPI_NOR_ExitOPIMode+0xe0>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800a4ec:	492b      	ldr	r1, [pc, #172]	; (800a59c <OSPI_NOR_ExitOPIMode+0x148>)
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	005b      	lsls	r3, r3, #1
 800a4f4:	4413      	add	r3, r2
 800a4f6:	015b      	lsls	r3, r3, #5
 800a4f8:	440b      	add	r3, r1
 800a4fa:	330c      	adds	r3, #12
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800a500:	4926      	ldr	r1, [pc, #152]	; (800a59c <OSPI_NOR_ExitOPIMode+0x148>)
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	4613      	mov	r3, r2
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	4413      	add	r3, r2
 800a50a:	015b      	lsls	r3, r3, #5
 800a50c:	440b      	add	r3, r1
 800a50e:	332c      	adds	r3, #44	; 0x2c
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	4613      	mov	r3, r2
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	4413      	add	r3, r2
 800a51c:	015b      	lsls	r3, r3, #5
 800a51e:	4a1f      	ldr	r2, [pc, #124]	; (800a59c <OSPI_NOR_ExitOPIMode+0x148>)
 800a520:	4413      	add	r3, r2
 800a522:	4618      	mov	r0, r3
 800a524:	f002 fcc6 	bl	800ceb4 <HAL_OSPI_Init>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <OSPI_NOR_ExitOPIMode+0xe0>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a52e:	f06f 0303 	mvn.w	r3, #3
 800a532:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	4613      	mov	r3, r2
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	4413      	add	r3, r2
 800a53c:	015b      	lsls	r3, r3, #5
 800a53e:	4a17      	ldr	r2, [pc, #92]	; (800a59c <OSPI_NOR_ExitOPIMode+0x148>)
 800a540:	4413      	add	r3, r2
 800a542:	2200      	movs	r2, #0
 800a544:	2100      	movs	r1, #0
 800a546:	4618      	mov	r0, r3
 800a548:	f7fe f8c6 	bl	80086d8 <MX25LM51245G_AutoPollingMemReady>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <OSPI_NOR_ExitOPIMode+0x106>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a552:	f06f 0304 	mvn.w	r3, #4
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	e01b      	b.n	800a592 <OSPI_NOR_ExitOPIMode+0x13e>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	4613      	mov	r3, r2
 800a55e:	005b      	lsls	r3, r3, #1
 800a560:	4413      	add	r3, r2
 800a562:	015b      	lsls	r3, r3, #5
 800a564:	4a0d      	ldr	r2, [pc, #52]	; (800a59c <OSPI_NOR_ExitOPIMode+0x148>)
 800a566:	1898      	adds	r0, r3, r2
 800a568:	f107 0308 	add.w	r3, r7, #8
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	2300      	movs	r3, #0
 800a570:	2200      	movs	r2, #0
 800a572:	2100      	movs	r1, #0
 800a574:	f7fe fbd6 	bl	8008d24 <MX25LM51245G_ReadCfg2Register>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d003      	beq.n	800a586 <OSPI_NOR_ExitOPIMode+0x132>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a57e:	f06f 0304 	mvn.w	r3, #4
 800a582:	60fb      	str	r3, [r7, #12]
 800a584:	e005      	b.n	800a592 <OSPI_NOR_ExitOPIMode+0x13e>
      }
      else
      {
        if (reg[0] != 0U)
 800a586:	7a3b      	ldrb	r3, [r7, #8]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <OSPI_NOR_ExitOPIMode+0x13e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a58c:	f06f 0304 	mvn.w	r3, #4
 800a590:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800a592:	68fb      	ldr	r3, [r7, #12]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	2400cdc8 	.word	0x2400cdc8
 800a5a0:	2400cdc0 	.word	0x2400cdc0

0800a5a4 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d11c      	bne.n	800a5f2 <BSP_TS_Init+0x4e>
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d018      	beq.n	800a5f2 <BSP_TS_Init+0x4e>
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800a5c8:	d813      	bhi.n	800a5f2 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00f      	beq.n	800a5f2 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800a5da:	d80a      	bhi.n	800a5f2 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	6819      	ldr	r1, [r3, #0]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	428b      	cmp	r3, r1
 800a5ea:	bf28      	it	cs
 800a5ec:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d903      	bls.n	800a5fa <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a5f2:	f06f 0301 	mvn.w	r3, #1
 800a5f6:	61fb      	str	r3, [r7, #28]
 800a5f8:	e06e      	b.n	800a6d8 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f98c 	bl	800a918 <FT5336_Probe>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800a606:	f04f 33ff 	mov.w	r3, #4294967295
 800a60a:	61fb      	str	r3, [r7, #28]
 800a60c:	e064      	b.n	800a6d8 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	4934      	ldr	r1, [pc, #208]	; (800a6e4 <BSP_TS_Init+0x140>)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	015b      	lsls	r3, r3, #5
 800a618:	440b      	add	r3, r1
 800a61a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	4930      	ldr	r1, [pc, #192]	; (800a6e4 <BSP_TS_Init+0x140>)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	015b      	lsls	r3, r3, #5
 800a626:	440b      	add	r3, r1
 800a628:	3304      	adds	r3, #4
 800a62a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	689a      	ldr	r2, [r3, #8]
 800a630:	492c      	ldr	r1, [pc, #176]	; (800a6e4 <BSP_TS_Init+0x140>)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	015b      	lsls	r3, r3, #5
 800a636:	440b      	add	r3, r1
 800a638:	3308      	adds	r3, #8
 800a63a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	68da      	ldr	r2, [r3, #12]
 800a640:	4928      	ldr	r1, [pc, #160]	; (800a6e4 <BSP_TS_Init+0x140>)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	015b      	lsls	r3, r3, #5
 800a646:	440b      	add	r3, r1
 800a648:	330c      	adds	r3, #12
 800a64a:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800a64c:	4b26      	ldr	r3, [pc, #152]	; (800a6e8 <BSP_TS_Init+0x144>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	69db      	ldr	r3, [r3, #28]
 800a652:	4926      	ldr	r1, [pc, #152]	; (800a6ec <BSP_TS_Init+0x148>)
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a65a:	f107 010c 	add.w	r1, r7, #12
 800a65e:	4610      	mov	r0, r2
 800a660:	4798      	blx	r3
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	da03      	bge.n	800a670 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a668:	f06f 0304 	mvn.w	r3, #4
 800a66c:	61fb      	str	r3, [r7, #28]
 800a66e:	e033      	b.n	800a6d8 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	491c      	ldr	r1, [pc, #112]	; (800a6e4 <BSP_TS_Init+0x140>)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	015b      	lsls	r3, r3, #5
 800a678:	440b      	add	r3, r1
 800a67a:	3310      	adds	r3, #16
 800a67c:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	4918      	ldr	r1, [pc, #96]	; (800a6e4 <BSP_TS_Init+0x140>)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	015b      	lsls	r3, r3, #5
 800a686:	440b      	add	r3, r1
 800a688:	3314      	adds	r3, #20
 800a68a:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800a68c:	2300      	movs	r3, #0
 800a68e:	61bb      	str	r3, [r7, #24]
 800a690:	e01f      	b.n	800a6d2 <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	4413      	add	r3, r2
 800a69c:	1c5a      	adds	r2, r3, #1
 800a69e:	4811      	ldr	r0, [pc, #68]	; (800a6e4 <BSP_TS_Init+0x140>)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	00d9      	lsls	r1, r3, #3
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	440b      	add	r3, r1
 800a6a8:	3306      	adds	r3, #6
 800a6aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	685a      	ldr	r2, [r3, #4]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	1c5a      	adds	r2, r3, #1
 800a6ba:	480a      	ldr	r0, [pc, #40]	; (800a6e4 <BSP_TS_Init+0x140>)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	00d9      	lsls	r1, r3, #3
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	440b      	add	r3, r1
 800a6c4:	3306      	adds	r3, #6
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4403      	add	r3, r0
 800a6ca:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	61bb      	str	r3, [r7, #24]
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d0dc      	beq.n	800a692 <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 800a6d8:	69fb      	ldr	r3, [r7, #28]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3720      	adds	r7, #32
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	24003b40 	.word	0x24003b40
 800a6e8:	24003b38 	.word	0x24003b38
 800a6ec:	24003b3c 	.word	0x24003b3c

0800a6f0 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08a      	sub	sp, #40	; 0x28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d003      	beq.n	800a70c <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a704:	f06f 0301 	mvn.w	r3, #1
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
 800a70a:	e0f9      	b.n	800a900 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800a70c:	4b7f      	ldr	r3, [pc, #508]	; (800a90c <BSP_TS_GetState+0x21c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	497f      	ldr	r1, [pc, #508]	; (800a910 <BSP_TS_GetState+0x220>)
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a71a:	f107 0108 	add.w	r1, r7, #8
 800a71e:	4610      	mov	r0, r2
 800a720:	4798      	blx	r3
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	da03      	bge.n	800a730 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a728:	f06f 0304 	mvn.w	r3, #4
 800a72c:	627b      	str	r3, [r7, #36]	; 0x24
 800a72e:	e0e7      	b.n	800a900 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2b00      	cmp	r3, #0
 800a734:	f000 80d1 	beq.w	800a8da <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800a740:	4a74      	ldr	r2, [pc, #464]	; (800a914 <BSP_TS_GetState+0x224>)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	015b      	lsls	r3, r3, #5
 800a746:	4413      	add	r3, r2
 800a748:	3308      	adds	r3, #8
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 0308 	and.w	r3, r3, #8
 800a750:	2b00      	cmp	r3, #0
 800a752:	d003      	beq.n	800a75c <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800a75c:	4a6d      	ldr	r2, [pc, #436]	; (800a914 <BSP_TS_GetState+0x224>)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	015b      	lsls	r3, r3, #5
 800a762:	4413      	add	r3, r2
 800a764:	3308      	adds	r3, #8
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 0302 	and.w	r3, r3, #2
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d009      	beq.n	800a784 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800a770:	4a68      	ldr	r2, [pc, #416]	; (800a914 <BSP_TS_GetState+0x224>)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	015b      	lsls	r3, r3, #5
 800a776:	4413      	add	r3, r2
 800a778:	3310      	adds	r3, #16
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	3b01      	subs	r3, #1
 800a782:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800a784:	4a63      	ldr	r2, [pc, #396]	; (800a914 <BSP_TS_GetState+0x224>)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	015b      	lsls	r3, r3, #5
 800a78a:	4413      	add	r3, r2
 800a78c:	3308      	adds	r3, #8
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0304 	and.w	r3, r3, #4
 800a794:	2b00      	cmp	r3, #0
 800a796:	d008      	beq.n	800a7aa <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800a798:	4a5e      	ldr	r2, [pc, #376]	; (800a914 <BSP_TS_GetState+0x224>)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	015b      	lsls	r3, r3, #5
 800a79e:	4413      	add	r3, r2
 800a7a0:	3314      	adds	r3, #20
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800a7aa:	4a5a      	ldr	r2, [pc, #360]	; (800a914 <BSP_TS_GetState+0x224>)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	015b      	lsls	r3, r3, #5
 800a7b0:	4413      	add	r3, r2
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6a3a      	ldr	r2, [r7, #32]
 800a7b6:	fb02 f203 	mul.w	r2, r2, r3
 800a7ba:	4956      	ldr	r1, [pc, #344]	; (800a914 <BSP_TS_GetState+0x224>)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	015b      	lsls	r3, r3, #5
 800a7c0:	440b      	add	r3, r1
 800a7c2:	3310      	adds	r3, #16
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	fbb2 f2f3 	udiv	r2, r2, r3
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800a7ce:	4a51      	ldr	r2, [pc, #324]	; (800a914 <BSP_TS_GetState+0x224>)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	015b      	lsls	r3, r3, #5
 800a7d4:	4413      	add	r3, r2
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	69fa      	ldr	r2, [r7, #28]
 800a7dc:	fb02 f203 	mul.w	r2, r2, r3
 800a7e0:	494c      	ldr	r1, [pc, #304]	; (800a914 <BSP_TS_GetState+0x224>)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	015b      	lsls	r3, r3, #5
 800a7e6:	440b      	add	r3, r1
 800a7e8:	3314      	adds	r3, #20
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	fbb2 f2f3 	udiv	r2, r2, r3
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	685a      	ldr	r2, [r3, #4]
 800a7fe:	4945      	ldr	r1, [pc, #276]	; (800a914 <BSP_TS_GetState+0x224>)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	015b      	lsls	r3, r3, #5
 800a804:	440b      	add	r3, r1
 800a806:	3318      	adds	r3, #24
 800a808:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d909      	bls.n	800a822 <BSP_TS_GetState+0x132>
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	685a      	ldr	r2, [r3, #4]
 800a812:	4940      	ldr	r1, [pc, #256]	; (800a914 <BSP_TS_GetState+0x224>)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	015b      	lsls	r3, r3, #5
 800a818:	440b      	add	r3, r1
 800a81a:	3318      	adds	r3, #24
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	e008      	b.n	800a834 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800a822:	4a3c      	ldr	r2, [pc, #240]	; (800a914 <BSP_TS_GetState+0x224>)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	015b      	lsls	r3, r3, #5
 800a828:	4413      	add	r3, r2
 800a82a:	3318      	adds	r3, #24
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800a832:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800a834:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	689a      	ldr	r2, [r3, #8]
 800a83a:	4936      	ldr	r1, [pc, #216]	; (800a914 <BSP_TS_GetState+0x224>)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	015b      	lsls	r3, r3, #5
 800a840:	440b      	add	r3, r1
 800a842:	331c      	adds	r3, #28
 800a844:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800a846:	429a      	cmp	r2, r3
 800a848:	d909      	bls.n	800a85e <BSP_TS_GetState+0x16e>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	689a      	ldr	r2, [r3, #8]
 800a84e:	4931      	ldr	r1, [pc, #196]	; (800a914 <BSP_TS_GetState+0x224>)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	015b      	lsls	r3, r3, #5
 800a854:	440b      	add	r3, r1
 800a856:	331c      	adds	r3, #28
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	1ad3      	subs	r3, r2, r3
 800a85c:	e008      	b.n	800a870 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800a85e:	4a2d      	ldr	r2, [pc, #180]	; (800a914 <BSP_TS_GetState+0x224>)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	015b      	lsls	r3, r3, #5
 800a864:	4413      	add	r3, r2
 800a866:	331c      	adds	r3, #28
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800a86e:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800a870:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800a872:	4a28      	ldr	r2, [pc, #160]	; (800a914 <BSP_TS_GetState+0x224>)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	015b      	lsls	r3, r3, #5
 800a878:	4413      	add	r3, r2
 800a87a:	330c      	adds	r3, #12
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	69ba      	ldr	r2, [r7, #24]
 800a880:	429a      	cmp	r2, r3
 800a882:	d808      	bhi.n	800a896 <BSP_TS_GetState+0x1a6>
 800a884:	4a23      	ldr	r2, [pc, #140]	; (800a914 <BSP_TS_GetState+0x224>)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	015b      	lsls	r3, r3, #5
 800a88a:	4413      	add	r3, r2
 800a88c:	330c      	adds	r3, #12
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	697a      	ldr	r2, [r7, #20]
 800a892:	429a      	cmp	r2, r3
 800a894:	d910      	bls.n	800a8b8 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	685a      	ldr	r2, [r3, #4]
 800a89a:	491e      	ldr	r1, [pc, #120]	; (800a914 <BSP_TS_GetState+0x224>)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	015b      	lsls	r3, r3, #5
 800a8a0:	440b      	add	r3, r1
 800a8a2:	3318      	adds	r3, #24
 800a8a4:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	689a      	ldr	r2, [r3, #8]
 800a8aa:	491a      	ldr	r1, [pc, #104]	; (800a914 <BSP_TS_GetState+0x224>)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	015b      	lsls	r3, r3, #5
 800a8b0:	440b      	add	r3, r1
 800a8b2:	331c      	adds	r3, #28
 800a8b4:	601a      	str	r2, [r3, #0]
 800a8b6:	e023      	b.n	800a900 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800a8b8:	4a16      	ldr	r2, [pc, #88]	; (800a914 <BSP_TS_GetState+0x224>)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	015b      	lsls	r3, r3, #5
 800a8be:	4413      	add	r3, r2
 800a8c0:	3318      	adds	r3, #24
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800a8c8:	4a12      	ldr	r2, [pc, #72]	; (800a914 <BSP_TS_GetState+0x224>)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	015b      	lsls	r3, r3, #5
 800a8ce:	4413      	add	r3, r2
 800a8d0:	331c      	adds	r3, #28
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	609a      	str	r2, [r3, #8]
 800a8d8:	e012      	b.n	800a900 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800a8e0:	4a0c      	ldr	r2, [pc, #48]	; (800a914 <BSP_TS_GetState+0x224>)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	015b      	lsls	r3, r3, #5
 800a8e6:	4413      	add	r3, r2
 800a8e8:	3318      	adds	r3, #24
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800a8f0:	4a08      	ldr	r2, [pc, #32]	; (800a914 <BSP_TS_GetState+0x224>)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	015b      	lsls	r3, r3, #5
 800a8f6:	4413      	add	r3, r2
 800a8f8:	331c      	adds	r3, #28
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a902:	4618      	mov	r0, r3
 800a904:	3728      	adds	r7, #40	; 0x28
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	24003b38 	.word	0x24003b38
 800a910:	24003b3c 	.word	0x24003b3c
 800a914:	24003b40 	.word	0x24003b40

0800a918 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08a      	sub	sp, #40	; 0x28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 800a920:	2300      	movs	r3, #0
 800a922:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800a928:	2370      	movs	r3, #112	; 0x70
 800a92a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800a92c:	4b23      	ldr	r3, [pc, #140]	; (800a9bc <FT5336_Probe+0xa4>)
 800a92e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800a930:	4b23      	ldr	r3, [pc, #140]	; (800a9c0 <FT5336_Probe+0xa8>)
 800a932:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800a934:	4b23      	ldr	r3, [pc, #140]	; (800a9c4 <FT5336_Probe+0xac>)
 800a936:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800a938:	4b23      	ldr	r3, [pc, #140]	; (800a9c8 <FT5336_Probe+0xb0>)
 800a93a:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800a93c:	4b23      	ldr	r3, [pc, #140]	; (800a9cc <FT5336_Probe+0xb4>)
 800a93e:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800a940:	f107 030c 	add.w	r3, r7, #12
 800a944:	4619      	mov	r1, r3
 800a946:	4822      	ldr	r0, [pc, #136]	; (800a9d0 <FT5336_Probe+0xb8>)
 800a948:	f7fd fb30 	bl	8007fac <FT5336_RegisterBusIO>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800a952:	f06f 0307 	mvn.w	r3, #7
 800a956:	627b      	str	r3, [r7, #36]	; 0x24
 800a958:	e02a      	b.n	800a9b0 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800a95a:	f107 0308 	add.w	r3, r7, #8
 800a95e:	4619      	mov	r1, r3
 800a960:	481b      	ldr	r0, [pc, #108]	; (800a9d0 <FT5336_Probe+0xb8>)
 800a962:	f7fd fc1d 	bl	80081a0 <FT5336_ReadID>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d003      	beq.n	800a974 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a96c:	f06f 0304 	mvn.w	r3, #4
 800a970:	627b      	str	r3, [r7, #36]	; 0x24
 800a972:	e01d      	b.n	800a9b0 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2b51      	cmp	r3, #81	; 0x51
 800a978:	d003      	beq.n	800a982 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a97a:	f06f 0306 	mvn.w	r3, #6
 800a97e:	627b      	str	r3, [r7, #36]	; 0x24
 800a980:	e016      	b.n	800a9b0 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800a982:	4a14      	ldr	r2, [pc, #80]	; (800a9d4 <FT5336_Probe+0xbc>)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4912      	ldr	r1, [pc, #72]	; (800a9d0 <FT5336_Probe+0xb8>)
 800a988:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800a98c:	4b12      	ldr	r3, [pc, #72]	; (800a9d8 <FT5336_Probe+0xc0>)
 800a98e:	4a13      	ldr	r2, [pc, #76]	; (800a9dc <FT5336_Probe+0xc4>)
 800a990:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800a992:	4b11      	ldr	r3, [pc, #68]	; (800a9d8 <FT5336_Probe+0xc0>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	490e      	ldr	r1, [pc, #56]	; (800a9d4 <FT5336_Probe+0xbc>)
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	4798      	blx	r3
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d002      	beq.n	800a9b0 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9aa:	f06f 0304 	mvn.w	r3, #4
 800a9ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3728      	adds	r7, #40	; 0x28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	08008fb9 	.word	0x08008fb9
 800a9c0:	0800902d 	.word	0x0800902d
 800a9c4:	08009155 	.word	0x08009155
 800a9c8:	080090f9 	.word	0x080090f9
 800a9cc:	080091b1 	.word	0x080091b1
 800a9d0:	24003b60 	.word	0x24003b60
 800a9d4:	24003b3c 	.word	0x24003b3c
 800a9d8:	24003b38 	.word	0x24003b38
 800a9dc:	2400000c 	.word	0x2400000c

0800a9e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a9e4:	4b29      	ldr	r3, [pc, #164]	; (800aa8c <SystemInit+0xac>)
 800a9e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ea:	4a28      	ldr	r2, [pc, #160]	; (800aa8c <SystemInit+0xac>)
 800a9ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a9f4:	4b26      	ldr	r3, [pc, #152]	; (800aa90 <SystemInit+0xb0>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a25      	ldr	r2, [pc, #148]	; (800aa90 <SystemInit+0xb0>)
 800a9fa:	f043 0301 	orr.w	r3, r3, #1
 800a9fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800aa00:	4b23      	ldr	r3, [pc, #140]	; (800aa90 <SystemInit+0xb0>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800aa06:	4b22      	ldr	r3, [pc, #136]	; (800aa90 <SystemInit+0xb0>)
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	4921      	ldr	r1, [pc, #132]	; (800aa90 <SystemInit+0xb0>)
 800aa0c:	4b21      	ldr	r3, [pc, #132]	; (800aa94 <SystemInit+0xb4>)
 800aa0e:	4013      	ands	r3, r2
 800aa10:	600b      	str	r3, [r1, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800aa12:	4b1f      	ldr	r3, [pc, #124]	; (800aa90 <SystemInit+0xb0>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800aa18:	4b1d      	ldr	r3, [pc, #116]	; (800aa90 <SystemInit+0xb0>)
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800aa1e:	4b1c      	ldr	r3, [pc, #112]	; (800aa90 <SystemInit+0xb0>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800aa24:	4b1a      	ldr	r3, [pc, #104]	; (800aa90 <SystemInit+0xb0>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800aa2a:	4b19      	ldr	r3, [pc, #100]	; (800aa90 <SystemInit+0xb0>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800aa30:	4b17      	ldr	r3, [pc, #92]	; (800aa90 <SystemInit+0xb0>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800aa36:	4b16      	ldr	r3, [pc, #88]	; (800aa90 <SystemInit+0xb0>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800aa3c:	4b14      	ldr	r3, [pc, #80]	; (800aa90 <SystemInit+0xb0>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800aa42:	4b13      	ldr	r3, [pc, #76]	; (800aa90 <SystemInit+0xb0>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800aa48:	4b11      	ldr	r3, [pc, #68]	; (800aa90 <SystemInit+0xb0>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800aa4e:	4b10      	ldr	r3, [pc, #64]	; (800aa90 <SystemInit+0xb0>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800aa54:	4b0e      	ldr	r3, [pc, #56]	; (800aa90 <SystemInit+0xb0>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a0d      	ldr	r2, [pc, #52]	; (800aa90 <SystemInit+0xb0>)
 800aa5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800aa60:	4b0b      	ldr	r3, [pc, #44]	; (800aa90 <SystemInit+0xb0>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800aa66:	4b0c      	ldr	r3, [pc, #48]	; (800aa98 <SystemInit+0xb8>)
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	4b0c      	ldr	r3, [pc, #48]	; (800aa9c <SystemInit+0xbc>)
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa72:	d202      	bcs.n	800aa7a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800aa74:	4b0a      	ldr	r3, [pc, #40]	; (800aaa0 <SystemInit+0xc0>)
 800aa76:	2201      	movs	r2, #1
 800aa78:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800aa7a:	4b04      	ldr	r3, [pc, #16]	; (800aa8c <SystemInit+0xac>)
 800aa7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aa80:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800aa82:	bf00      	nop
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	e000ed00 	.word	0xe000ed00
 800aa90:	58024400 	.word	0x58024400
 800aa94:	eaf6ed7f 	.word	0xeaf6ed7f
 800aa98:	5c001000 	.word	0x5c001000
 800aa9c:	ffff0000 	.word	0xffff0000
 800aaa0:	51008108 	.word	0x51008108

0800aaa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aaaa:	2003      	movs	r0, #3
 800aaac:	f000 f94b 	bl	800ad46 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800aab0:	f003 ff5c 	bl	800e96c <HAL_RCC_GetSysClockFreq>
 800aab4:	4602      	mov	r2, r0
 800aab6:	4b15      	ldr	r3, [pc, #84]	; (800ab0c <HAL_Init+0x68>)
 800aab8:	699b      	ldr	r3, [r3, #24]
 800aaba:	0a1b      	lsrs	r3, r3, #8
 800aabc:	f003 030f 	and.w	r3, r3, #15
 800aac0:	4913      	ldr	r1, [pc, #76]	; (800ab10 <HAL_Init+0x6c>)
 800aac2:	5ccb      	ldrb	r3, [r1, r3]
 800aac4:	f003 031f 	and.w	r3, r3, #31
 800aac8:	fa22 f303 	lsr.w	r3, r2, r3
 800aacc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800aace:	4b0f      	ldr	r3, [pc, #60]	; (800ab0c <HAL_Init+0x68>)
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	f003 030f 	and.w	r3, r3, #15
 800aad6:	4a0e      	ldr	r2, [pc, #56]	; (800ab10 <HAL_Init+0x6c>)
 800aad8:	5cd3      	ldrb	r3, [r2, r3]
 800aada:	f003 031f 	and.w	r3, r3, #31
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	fa22 f303 	lsr.w	r3, r2, r3
 800aae4:	4a0b      	ldr	r2, [pc, #44]	; (800ab14 <HAL_Init+0x70>)
 800aae6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aae8:	4a0b      	ldr	r2, [pc, #44]	; (800ab18 <HAL_Init+0x74>)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aaee:	2000      	movs	r0, #0
 800aaf0:	f7f8 fd04 	bl	80034fc <HAL_InitTick>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d001      	beq.n	800aafe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e002      	b.n	800ab04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800aafe:	f7f8 fabb 	bl	8003078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	58024400 	.word	0x58024400
 800ab10:	08028798 	.word	0x08028798
 800ab14:	24000040 	.word	0x24000040
 800ab18:	2400003c 	.word	0x2400003c

0800ab1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ab20:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <HAL_IncTick+0x20>)
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	461a      	mov	r2, r3
 800ab26:	4b06      	ldr	r3, [pc, #24]	; (800ab40 <HAL_IncTick+0x24>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	4a04      	ldr	r2, [pc, #16]	; (800ab40 <HAL_IncTick+0x24>)
 800ab2e:	6013      	str	r3, [r2, #0]
}
 800ab30:	bf00      	nop
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	24000048 	.word	0x24000048
 800ab40:	2400ce28 	.word	0x2400ce28

0800ab44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ab44:	b480      	push	{r7}
 800ab46:	af00      	add	r7, sp, #0
  return uwTick;
 800ab48:	4b03      	ldr	r3, [pc, #12]	; (800ab58 <HAL_GetTick+0x14>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	2400ce28 	.word	0x2400ce28

0800ab5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ab64:	f7ff ffee 	bl	800ab44 <HAL_GetTick>
 800ab68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab74:	d005      	beq.n	800ab82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ab76:	4b0a      	ldr	r3, [pc, #40]	; (800aba0 <HAL_Delay+0x44>)
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4413      	add	r3, r2
 800ab80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ab82:	bf00      	nop
 800ab84:	f7ff ffde 	bl	800ab44 <HAL_GetTick>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d8f7      	bhi.n	800ab84 <HAL_Delay+0x28>
  {
  }
}
 800ab94:	bf00      	nop
 800ab96:	bf00      	nop
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	24000048 	.word	0x24000048

0800aba4 <__NVIC_SetPriorityGrouping>:
{
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f003 0307 	and.w	r3, r3, #7
 800abb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800abb4:	4b0b      	ldr	r3, [pc, #44]	; (800abe4 <__NVIC_SetPriorityGrouping+0x40>)
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800abc0:	4013      	ands	r3, r2
 800abc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800abcc:	4b06      	ldr	r3, [pc, #24]	; (800abe8 <__NVIC_SetPriorityGrouping+0x44>)
 800abce:	4313      	orrs	r3, r2
 800abd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800abd2:	4a04      	ldr	r2, [pc, #16]	; (800abe4 <__NVIC_SetPriorityGrouping+0x40>)
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	60d3      	str	r3, [r2, #12]
}
 800abd8:	bf00      	nop
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	e000ed00 	.word	0xe000ed00
 800abe8:	05fa0000 	.word	0x05fa0000

0800abec <__NVIC_GetPriorityGrouping>:
{
 800abec:	b480      	push	{r7}
 800abee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800abf0:	4b04      	ldr	r3, [pc, #16]	; (800ac04 <__NVIC_GetPriorityGrouping+0x18>)
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	0a1b      	lsrs	r3, r3, #8
 800abf6:	f003 0307 	and.w	r3, r3, #7
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr
 800ac04:	e000ed00 	.word	0xe000ed00

0800ac08 <__NVIC_EnableIRQ>:
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ac12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	db0b      	blt.n	800ac32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac1a:	88fb      	ldrh	r3, [r7, #6]
 800ac1c:	f003 021f 	and.w	r2, r3, #31
 800ac20:	4907      	ldr	r1, [pc, #28]	; (800ac40 <__NVIC_EnableIRQ+0x38>)
 800ac22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac26:	095b      	lsrs	r3, r3, #5
 800ac28:	2001      	movs	r0, #1
 800ac2a:	fa00 f202 	lsl.w	r2, r0, r2
 800ac2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ac32:	bf00      	nop
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	e000e100 	.word	0xe000e100

0800ac44 <__NVIC_DisableIRQ>:
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ac4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	db12      	blt.n	800ac7c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac56:	88fb      	ldrh	r3, [r7, #6]
 800ac58:	f003 021f 	and.w	r2, r3, #31
 800ac5c:	490a      	ldr	r1, [pc, #40]	; (800ac88 <__NVIC_DisableIRQ+0x44>)
 800ac5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac62:	095b      	lsrs	r3, r3, #5
 800ac64:	2001      	movs	r0, #1
 800ac66:	fa00 f202 	lsl.w	r2, r0, r2
 800ac6a:	3320      	adds	r3, #32
 800ac6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ac70:	f3bf 8f4f 	dsb	sy
}
 800ac74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ac76:	f3bf 8f6f 	isb	sy
}
 800ac7a:	bf00      	nop
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	e000e100 	.word	0xe000e100

0800ac8c <__NVIC_SetPriority>:
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	4603      	mov	r3, r0
 800ac94:	6039      	str	r1, [r7, #0]
 800ac96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ac98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	db0a      	blt.n	800acb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	490c      	ldr	r1, [pc, #48]	; (800acd8 <__NVIC_SetPriority+0x4c>)
 800aca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800acaa:	0112      	lsls	r2, r2, #4
 800acac:	b2d2      	uxtb	r2, r2
 800acae:	440b      	add	r3, r1
 800acb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800acb4:	e00a      	b.n	800accc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	b2da      	uxtb	r2, r3
 800acba:	4908      	ldr	r1, [pc, #32]	; (800acdc <__NVIC_SetPriority+0x50>)
 800acbc:	88fb      	ldrh	r3, [r7, #6]
 800acbe:	f003 030f 	and.w	r3, r3, #15
 800acc2:	3b04      	subs	r3, #4
 800acc4:	0112      	lsls	r2, r2, #4
 800acc6:	b2d2      	uxtb	r2, r2
 800acc8:	440b      	add	r3, r1
 800acca:	761a      	strb	r2, [r3, #24]
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	e000e100 	.word	0xe000e100
 800acdc:	e000ed00 	.word	0xe000ed00

0800ace0 <NVIC_EncodePriority>:
{
 800ace0:	b480      	push	{r7}
 800ace2:	b089      	sub	sp, #36	; 0x24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f003 0307 	and.w	r3, r3, #7
 800acf2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	f1c3 0307 	rsb	r3, r3, #7
 800acfa:	2b04      	cmp	r3, #4
 800acfc:	bf28      	it	cs
 800acfe:	2304      	movcs	r3, #4
 800ad00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	3304      	adds	r3, #4
 800ad06:	2b06      	cmp	r3, #6
 800ad08:	d902      	bls.n	800ad10 <NVIC_EncodePriority+0x30>
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	3b03      	subs	r3, #3
 800ad0e:	e000      	b.n	800ad12 <NVIC_EncodePriority+0x32>
 800ad10:	2300      	movs	r3, #0
 800ad12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad14:	f04f 32ff 	mov.w	r2, #4294967295
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad1e:	43da      	mvns	r2, r3
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	401a      	ands	r2, r3
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ad28:	f04f 31ff 	mov.w	r1, #4294967295
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad32:	43d9      	mvns	r1, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad38:	4313      	orrs	r3, r2
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3724      	adds	r7, #36	; 0x24
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b082      	sub	sp, #8
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff ff28 	bl	800aba4 <__NVIC_SetPriorityGrouping>
}
 800ad54:	bf00      	nop
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	4603      	mov	r3, r0
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
 800ad68:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ad6a:	f7ff ff3f 	bl	800abec <__NVIC_GetPriorityGrouping>
 800ad6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	68b9      	ldr	r1, [r7, #8]
 800ad74:	6978      	ldr	r0, [r7, #20]
 800ad76:	f7ff ffb3 	bl	800ace0 <NVIC_EncodePriority>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ad80:	4611      	mov	r1, r2
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7ff ff82 	bl	800ac8c <__NVIC_SetPriority>
}
 800ad88:	bf00      	nop
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	4603      	mov	r3, r0
 800ad98:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ad9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7ff ff32 	bl	800ac08 <__NVIC_EnableIRQ>
}
 800ada4:	bf00      	nop
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	4603      	mov	r3, r0
 800adb4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800adb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7ff ff42 	bl	800ac44 <__NVIC_DisableIRQ>
}
 800adc0:	bf00      	nop
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800adc8:	b480      	push	{r7}
 800adca:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800adcc:	f3bf 8f5f 	dmb	sy
}
 800add0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800add2:	4b07      	ldr	r3, [pc, #28]	; (800adf0 <HAL_MPU_Disable+0x28>)
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	4a06      	ldr	r2, [pc, #24]	; (800adf0 <HAL_MPU_Disable+0x28>)
 800add8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800addc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800adde:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <HAL_MPU_Disable+0x2c>)
 800ade0:	2200      	movs	r2, #0
 800ade2:	605a      	str	r2, [r3, #4]
}
 800ade4:	bf00      	nop
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	e000ed00 	.word	0xe000ed00
 800adf4:	e000ed90 	.word	0xe000ed90

0800adf8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800ae00:	4a0b      	ldr	r2, [pc, #44]	; (800ae30 <HAL_MPU_Enable+0x38>)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f043 0301 	orr.w	r3, r3, #1
 800ae08:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800ae0a:	4b0a      	ldr	r3, [pc, #40]	; (800ae34 <HAL_MPU_Enable+0x3c>)
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0e:	4a09      	ldr	r2, [pc, #36]	; (800ae34 <HAL_MPU_Enable+0x3c>)
 800ae10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae14:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800ae16:	f3bf 8f4f 	dsb	sy
}
 800ae1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ae1c:	f3bf 8f6f 	isb	sy
}
 800ae20:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800ae22:	bf00      	nop
 800ae24:	370c      	adds	r7, #12
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	e000ed90 	.word	0xe000ed90
 800ae34:	e000ed00 	.word	0xe000ed00

0800ae38 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	785a      	ldrb	r2, [r3, #1]
 800ae44:	4b1d      	ldr	r3, [pc, #116]	; (800aebc <HAL_MPU_ConfigRegion+0x84>)
 800ae46:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d029      	beq.n	800aea4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800ae50:	4a1a      	ldr	r2, [pc, #104]	; (800aebc <HAL_MPU_ConfigRegion+0x84>)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	7b1b      	ldrb	r3, [r3, #12]
 800ae5c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	7adb      	ldrb	r3, [r3, #11]
 800ae62:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ae64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	7a9b      	ldrb	r3, [r3, #10]
 800ae6a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ae6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	7b5b      	ldrb	r3, [r3, #13]
 800ae72:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800ae74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	7b9b      	ldrb	r3, [r3, #14]
 800ae7a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800ae7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	7bdb      	ldrb	r3, [r3, #15]
 800ae82:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800ae84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	7a5b      	ldrb	r3, [r3, #9]
 800ae8a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800ae8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	7a1b      	ldrb	r3, [r3, #8]
 800ae92:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800ae94:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	7812      	ldrb	r2, [r2, #0]
 800ae9a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ae9c:	4a07      	ldr	r2, [pc, #28]	; (800aebc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ae9e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800aea0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800aea2:	e005      	b.n	800aeb0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800aea4:	4b05      	ldr	r3, [pc, #20]	; (800aebc <HAL_MPU_ConfigRegion+0x84>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800aeaa:	4b04      	ldr	r3, [pc, #16]	; (800aebc <HAL_MPU_ConfigRegion+0x84>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	611a      	str	r2, [r3, #16]
}
 800aeb0:	bf00      	nop
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr
 800aebc:	e000ed90 	.word	0xe000ed90

0800aec0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	e054      	b.n	800af7c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	7f5b      	ldrb	r3, [r3, #29]
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d105      	bne.n	800aee8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7f8 f8e6 	bl	80030b4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2202      	movs	r2, #2
 800aeec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	791b      	ldrb	r3, [r3, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d10c      	bne.n	800af10 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a22      	ldr	r2, [pc, #136]	; (800af84 <HAL_CRC_Init+0xc4>)
 800aefc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	689a      	ldr	r2, [r3, #8]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f022 0218 	bic.w	r2, r2, #24
 800af0c:	609a      	str	r2, [r3, #8]
 800af0e:	e00c      	b.n	800af2a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6899      	ldr	r1, [r3, #8]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	461a      	mov	r2, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f834 	bl	800af88 <HAL_CRCEx_Polynomial_Set>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e028      	b.n	800af7c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	795b      	ldrb	r3, [r3, #5]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d105      	bne.n	800af3e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f04f 32ff 	mov.w	r2, #4294967295
 800af3a:	611a      	str	r2, [r3, #16]
 800af3c:	e004      	b.n	800af48 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	6912      	ldr	r2, [r2, #16]
 800af46:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	695a      	ldr	r2, [r3, #20]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	430a      	orrs	r2, r1
 800af5c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	699a      	ldr	r2, [r3, #24]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	430a      	orrs	r2, r1
 800af72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	04c11db7 	.word	0x04c11db7

0800af88 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800af88:	b480      	push	{r7}
 800af8a:	b087      	sub	sp, #28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af94:	2300      	movs	r3, #0
 800af96:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800af98:	231f      	movs	r3, #31
 800af9a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800af9c:	bf00      	nop
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	1e5a      	subs	r2, r3, #1
 800afa2:	613a      	str	r2, [r7, #16]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d009      	beq.n	800afbc <HAL_CRCEx_Polynomial_Set+0x34>
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	f003 031f 	and.w	r3, r3, #31
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	fa22 f303 	lsr.w	r3, r2, r3
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d0f0      	beq.n	800af9e <HAL_CRCEx_Polynomial_Set+0x16>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b18      	cmp	r3, #24
 800afc0:	d846      	bhi.n	800b050 <HAL_CRCEx_Polynomial_Set+0xc8>
 800afc2:	a201      	add	r2, pc, #4	; (adr r2, 800afc8 <HAL_CRCEx_Polynomial_Set+0x40>)
 800afc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc8:	0800b057 	.word	0x0800b057
 800afcc:	0800b051 	.word	0x0800b051
 800afd0:	0800b051 	.word	0x0800b051
 800afd4:	0800b051 	.word	0x0800b051
 800afd8:	0800b051 	.word	0x0800b051
 800afdc:	0800b051 	.word	0x0800b051
 800afe0:	0800b051 	.word	0x0800b051
 800afe4:	0800b051 	.word	0x0800b051
 800afe8:	0800b045 	.word	0x0800b045
 800afec:	0800b051 	.word	0x0800b051
 800aff0:	0800b051 	.word	0x0800b051
 800aff4:	0800b051 	.word	0x0800b051
 800aff8:	0800b051 	.word	0x0800b051
 800affc:	0800b051 	.word	0x0800b051
 800b000:	0800b051 	.word	0x0800b051
 800b004:	0800b051 	.word	0x0800b051
 800b008:	0800b039 	.word	0x0800b039
 800b00c:	0800b051 	.word	0x0800b051
 800b010:	0800b051 	.word	0x0800b051
 800b014:	0800b051 	.word	0x0800b051
 800b018:	0800b051 	.word	0x0800b051
 800b01c:	0800b051 	.word	0x0800b051
 800b020:	0800b051 	.word	0x0800b051
 800b024:	0800b051 	.word	0x0800b051
 800b028:	0800b02d 	.word	0x0800b02d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	2b06      	cmp	r3, #6
 800b030:	d913      	bls.n	800b05a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b036:	e010      	b.n	800b05a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	2b07      	cmp	r3, #7
 800b03c:	d90f      	bls.n	800b05e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b042:	e00c      	b.n	800b05e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	2b0f      	cmp	r3, #15
 800b048:	d90b      	bls.n	800b062 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b04e:	e008      	b.n	800b062 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	75fb      	strb	r3, [r7, #23]
      break;
 800b054:	e006      	b.n	800b064 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b056:	bf00      	nop
 800b058:	e004      	b.n	800b064 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b05a:	bf00      	nop
 800b05c:	e002      	b.n	800b064 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b05e:	bf00      	nop
 800b060:	e000      	b.n	800b064 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800b062:	bf00      	nop
  }
  if (status == HAL_OK)
 800b064:	7dfb      	ldrb	r3, [r7, #23]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10d      	bne.n	800b086 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	f023 0118 	bic.w	r1, r3, #24
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	430a      	orrs	r2, r1
 800b084:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800b086:	7dfb      	ldrb	r3, [r7, #23]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	371c      	adds	r7, #28
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d101      	bne.n	800b0a6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e04f      	b.n	800b146 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d106      	bne.n	800b0c0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7f8 f81c 	bl	80030f8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	4b20      	ldr	r3, [pc, #128]	; (800b150 <HAL_DMA2D_Init+0xbc>)
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	6851      	ldr	r1, [r2, #4]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	69d2      	ldr	r2, [r2, #28]
 800b0da:	4311      	orrs	r1, r2
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	6812      	ldr	r2, [r2, #0]
 800b0e0:	430b      	orrs	r3, r1
 800b0e2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0ea:	4b1a      	ldr	r3, [pc, #104]	; (800b154 <HAL_DMA2D_Init+0xc0>)
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	6891      	ldr	r1, [r2, #8]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	6992      	ldr	r2, [r2, #24]
 800b0f6:	4311      	orrs	r1, r2
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	6812      	ldr	r2, [r2, #0]
 800b0fc:	430b      	orrs	r3, r1
 800b0fe:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b106:	4b14      	ldr	r3, [pc, #80]	; (800b158 <HAL_DMA2D_Init+0xc4>)
 800b108:	4013      	ands	r3, r2
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	68d1      	ldr	r1, [r2, #12]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	6812      	ldr	r2, [r2, #0]
 800b112:	430b      	orrs	r3, r1
 800b114:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b11c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	051a      	lsls	r2, r3, #20
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	695b      	ldr	r3, [r3, #20]
 800b12a:	055b      	lsls	r3, r3, #21
 800b12c:	431a      	orrs	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	430a      	orrs	r2, r1
 800b134:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	fff8ffbf 	.word	0xfff8ffbf
 800b154:	fffffef8 	.word	0xfffffef8
 800b158:	ffff0000 	.word	0xffff0000

0800b15c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f003 0301 	and.w	r3, r3, #1
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d026      	beq.n	800b1cc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b184:	2b00      	cmp	r3, #0
 800b186:	d021      	beq.n	800b1cc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b196:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b19c:	f043 0201 	orr.w	r2, r3, #1
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2204      	movs	r2, #4
 800b1b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d003      	beq.n	800b1cc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f003 0320 	and.w	r3, r3, #32
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d026      	beq.n	800b224 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d021      	beq.n	800b224 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b1ee:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2220      	movs	r2, #32
 800b1f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1fc:	f043 0202 	orr.w	r2, r3, #2
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2204      	movs	r2, #4
 800b208:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d003      	beq.n	800b224 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f003 0308 	and.w	r3, r3, #8
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d026      	beq.n	800b27c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b234:	2b00      	cmp	r3, #0
 800b236:	d021      	beq.n	800b27c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b246:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2208      	movs	r2, #8
 800b24e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b254:	f043 0204 	orr.w	r2, r3, #4
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2204      	movs	r2, #4
 800b260:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	2b00      	cmp	r3, #0
 800b272:	d003      	beq.n	800b27c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f003 0304 	and.w	r3, r3, #4
 800b282:	2b00      	cmp	r3, #0
 800b284:	d013      	beq.n	800b2ae <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00e      	beq.n	800b2ae <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b29e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2204      	movs	r2, #4
 800b2a6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 f853 	bl	800b354 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f003 0302 	and.w	r3, r3, #2
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d024      	beq.n	800b302 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d01f      	beq.n	800b302 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b2d0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2202      	movs	r2, #2
 800b2d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a1b      	ldr	r3, [r3, #32]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d003      	beq.n	800b302 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f003 0310 	and.w	r3, r3, #16
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01f      	beq.n	800b34c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b312:	2b00      	cmp	r3, #0
 800b314:	d01a      	beq.n	800b34c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b324:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2210      	movs	r2, #16
 800b32c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2201      	movs	r2, #1
 800b33a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f80e 	bl	800b368 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800b34c:	bf00      	nop
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d104      	bne.n	800b39e <HAL_DMA2D_ConfigLayer+0x22>
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	4613      	mov	r3, r2
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	1a9b      	subs	r3, r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d101      	bne.n	800b3ac <HAL_DMA2D_ConfigLayer+0x30>
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	e092      	b.n	800b4d2 <HAL_DMA2D_ConfigLayer+0x156>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2202      	movs	r2, #2
 800b3b8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800b3bc:	683a      	ldr	r2, [r7, #0]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	00db      	lsls	r3, r3, #3
 800b3c2:	1a9b      	subs	r3, r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	3328      	adds	r3, #40	; 0x28
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	685a      	ldr	r2, [r3, #4]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	041b      	lsls	r3, r3, #16
 800b3d8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800b3e0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	695b      	ldr	r3, [r3, #20]
 800b3e6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800b3ec:	4b3c      	ldr	r3, [pc, #240]	; (800b4e0 <HAL_DMA2D_ConfigLayer+0x164>)
 800b3ee:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	2b0a      	cmp	r3, #10
 800b3f6:	d003      	beq.n	800b400 <HAL_DMA2D_ConfigLayer+0x84>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	2b09      	cmp	r3, #9
 800b3fe:	d107      	bne.n	800b410 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	613b      	str	r3, [r7, #16]
 800b40e:	e005      	b.n	800b41c <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	061b      	lsls	r3, r3, #24
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	4313      	orrs	r3, r2
 800b41a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d120      	bne.n	800b464 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	43db      	mvns	r3, r3
 800b42c:	ea02 0103 	and.w	r1, r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	430a      	orrs	r2, r1
 800b438:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	6812      	ldr	r2, [r2, #0]
 800b442:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	2b0a      	cmp	r3, #10
 800b44a:	d003      	beq.n	800b454 <HAL_DMA2D_ConfigLayer+0xd8>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	2b09      	cmp	r3, #9
 800b452:	d135      	bne.n	800b4c0 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	68da      	ldr	r2, [r3, #12]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b460:	629a      	str	r2, [r3, #40]	; 0x28
 800b462:	e02d      	b.n	800b4c0 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	2b0b      	cmp	r3, #11
 800b46a:	d109      	bne.n	800b480 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	049b      	lsls	r3, r3, #18
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	4313      	orrs	r3, r2
 800b476:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800b47e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	69da      	ldr	r2, [r3, #28]
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	43db      	mvns	r3, r3
 800b48a:	ea02 0103 	and.w	r1, r2, r3
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	693a      	ldr	r2, [r7, #16]
 800b494:	430a      	orrs	r2, r1
 800b496:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	6812      	ldr	r2, [r2, #0]
 800b4a0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	2b0a      	cmp	r3, #10
 800b4a8:	d003      	beq.n	800b4b2 <HAL_DMA2D_ConfigLayer+0x136>
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	2b09      	cmp	r3, #9
 800b4b0:	d106      	bne.n	800b4c0 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	68da      	ldr	r2, [r3, #12]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b4be:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	371c      	adds	r7, #28
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	ff33000f 	.word	0xff33000f

0800b4e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b089      	sub	sp, #36	; 0x24
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b4f2:	4b89      	ldr	r3, [pc, #548]	; (800b718 <HAL_GPIO_Init+0x234>)
 800b4f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b4f6:	e194      	b.n	800b822 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	fa01 f303 	lsl.w	r3, r1, r3
 800b504:	4013      	ands	r3, r2
 800b506:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 8186 	beq.w	800b81c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d00b      	beq.n	800b530 <HAL_GPIO_Init+0x4c>
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d007      	beq.n	800b530 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b524:	2b11      	cmp	r3, #17
 800b526:	d003      	beq.n	800b530 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	2b12      	cmp	r3, #18
 800b52e:	d130      	bne.n	800b592 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	005b      	lsls	r3, r3, #1
 800b53a:	2203      	movs	r2, #3
 800b53c:	fa02 f303 	lsl.w	r3, r2, r3
 800b540:	43db      	mvns	r3, r3
 800b542:	69ba      	ldr	r2, [r7, #24]
 800b544:	4013      	ands	r3, r2
 800b546:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	68da      	ldr	r2, [r3, #12]
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	005b      	lsls	r3, r3, #1
 800b550:	fa02 f303 	lsl.w	r3, r2, r3
 800b554:	69ba      	ldr	r2, [r7, #24]
 800b556:	4313      	orrs	r3, r2
 800b558:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b566:	2201      	movs	r2, #1
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	fa02 f303 	lsl.w	r3, r2, r3
 800b56e:	43db      	mvns	r3, r3
 800b570:	69ba      	ldr	r2, [r7, #24]
 800b572:	4013      	ands	r3, r2
 800b574:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	091b      	lsrs	r3, r3, #4
 800b57c:	f003 0201 	and.w	r2, r3, #1
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	fa02 f303 	lsl.w	r3, r2, r3
 800b586:	69ba      	ldr	r2, [r7, #24]
 800b588:	4313      	orrs	r3, r2
 800b58a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	69ba      	ldr	r2, [r7, #24]
 800b590:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	005b      	lsls	r3, r3, #1
 800b59c:	2203      	movs	r2, #3
 800b59e:	fa02 f303 	lsl.w	r3, r2, r3
 800b5a2:	43db      	mvns	r3, r3
 800b5a4:	69ba      	ldr	r2, [r7, #24]
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	689a      	ldr	r2, [r3, #8]
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	69ba      	ldr	r2, [r7, #24]
 800b5c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d003      	beq.n	800b5d2 <HAL_GPIO_Init+0xee>
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	2b12      	cmp	r3, #18
 800b5d0:	d123      	bne.n	800b61a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	08da      	lsrs	r2, r3, #3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	3208      	adds	r2, #8
 800b5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	f003 0307 	and.w	r3, r3, #7
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	220f      	movs	r2, #15
 800b5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ee:	43db      	mvns	r3, r3
 800b5f0:	69ba      	ldr	r2, [r7, #24]
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	691a      	ldr	r2, [r3, #16]
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	f003 0307 	and.w	r3, r3, #7
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	fa02 f303 	lsl.w	r3, r2, r3
 800b606:	69ba      	ldr	r2, [r7, #24]
 800b608:	4313      	orrs	r3, r2
 800b60a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	08da      	lsrs	r2, r3, #3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	3208      	adds	r2, #8
 800b614:	69b9      	ldr	r1, [r7, #24]
 800b616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	2203      	movs	r2, #3
 800b626:	fa02 f303 	lsl.w	r3, r2, r3
 800b62a:	43db      	mvns	r3, r3
 800b62c:	69ba      	ldr	r2, [r7, #24]
 800b62e:	4013      	ands	r3, r2
 800b630:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	f003 0203 	and.w	r2, r3, #3
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	005b      	lsls	r3, r3, #1
 800b63e:	fa02 f303 	lsl.w	r3, r2, r3
 800b642:	69ba      	ldr	r2, [r7, #24]
 800b644:	4313      	orrs	r3, r2
 800b646:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	69ba      	ldr	r2, [r7, #24]
 800b64c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b656:	2b00      	cmp	r3, #0
 800b658:	f000 80e0 	beq.w	800b81c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b65c:	4b2f      	ldr	r3, [pc, #188]	; (800b71c <HAL_GPIO_Init+0x238>)
 800b65e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b662:	4a2e      	ldr	r2, [pc, #184]	; (800b71c <HAL_GPIO_Init+0x238>)
 800b664:	f043 0302 	orr.w	r3, r3, #2
 800b668:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800b66c:	4b2b      	ldr	r3, [pc, #172]	; (800b71c <HAL_GPIO_Init+0x238>)
 800b66e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b672:	f003 0302 	and.w	r3, r3, #2
 800b676:	60fb      	str	r3, [r7, #12]
 800b678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b67a:	4a29      	ldr	r2, [pc, #164]	; (800b720 <HAL_GPIO_Init+0x23c>)
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	089b      	lsrs	r3, r3, #2
 800b680:	3302      	adds	r3, #2
 800b682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	f003 0303 	and.w	r3, r3, #3
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	220f      	movs	r2, #15
 800b692:	fa02 f303 	lsl.w	r3, r2, r3
 800b696:	43db      	mvns	r3, r3
 800b698:	69ba      	ldr	r2, [r7, #24]
 800b69a:	4013      	ands	r3, r2
 800b69c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a20      	ldr	r2, [pc, #128]	; (800b724 <HAL_GPIO_Init+0x240>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d052      	beq.n	800b74c <HAL_GPIO_Init+0x268>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a1f      	ldr	r2, [pc, #124]	; (800b728 <HAL_GPIO_Init+0x244>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d031      	beq.n	800b712 <HAL_GPIO_Init+0x22e>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a1e      	ldr	r2, [pc, #120]	; (800b72c <HAL_GPIO_Init+0x248>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d02b      	beq.n	800b70e <HAL_GPIO_Init+0x22a>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a1d      	ldr	r2, [pc, #116]	; (800b730 <HAL_GPIO_Init+0x24c>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d025      	beq.n	800b70a <HAL_GPIO_Init+0x226>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4a1c      	ldr	r2, [pc, #112]	; (800b734 <HAL_GPIO_Init+0x250>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d01f      	beq.n	800b706 <HAL_GPIO_Init+0x222>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a1b      	ldr	r2, [pc, #108]	; (800b738 <HAL_GPIO_Init+0x254>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d019      	beq.n	800b702 <HAL_GPIO_Init+0x21e>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a1a      	ldr	r2, [pc, #104]	; (800b73c <HAL_GPIO_Init+0x258>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d013      	beq.n	800b6fe <HAL_GPIO_Init+0x21a>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a19      	ldr	r2, [pc, #100]	; (800b740 <HAL_GPIO_Init+0x25c>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d00d      	beq.n	800b6fa <HAL_GPIO_Init+0x216>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a18      	ldr	r2, [pc, #96]	; (800b744 <HAL_GPIO_Init+0x260>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d007      	beq.n	800b6f6 <HAL_GPIO_Init+0x212>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a17      	ldr	r2, [pc, #92]	; (800b748 <HAL_GPIO_Init+0x264>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d101      	bne.n	800b6f2 <HAL_GPIO_Init+0x20e>
 800b6ee:	2309      	movs	r3, #9
 800b6f0:	e02d      	b.n	800b74e <HAL_GPIO_Init+0x26a>
 800b6f2:	230a      	movs	r3, #10
 800b6f4:	e02b      	b.n	800b74e <HAL_GPIO_Init+0x26a>
 800b6f6:	2308      	movs	r3, #8
 800b6f8:	e029      	b.n	800b74e <HAL_GPIO_Init+0x26a>
 800b6fa:	2307      	movs	r3, #7
 800b6fc:	e027      	b.n	800b74e <HAL_GPIO_Init+0x26a>
 800b6fe:	2306      	movs	r3, #6
 800b700:	e025      	b.n	800b74e <HAL_GPIO_Init+0x26a>
 800b702:	2305      	movs	r3, #5
 800b704:	e023      	b.n	800b74e <HAL_GPIO_Init+0x26a>
 800b706:	2304      	movs	r3, #4
 800b708:	e021      	b.n	800b74e <HAL_GPIO_Init+0x26a>
 800b70a:	2303      	movs	r3, #3
 800b70c:	e01f      	b.n	800b74e <HAL_GPIO_Init+0x26a>
 800b70e:	2302      	movs	r3, #2
 800b710:	e01d      	b.n	800b74e <HAL_GPIO_Init+0x26a>
 800b712:	2301      	movs	r3, #1
 800b714:	e01b      	b.n	800b74e <HAL_GPIO_Init+0x26a>
 800b716:	bf00      	nop
 800b718:	58000080 	.word	0x58000080
 800b71c:	58024400 	.word	0x58024400
 800b720:	58000400 	.word	0x58000400
 800b724:	58020000 	.word	0x58020000
 800b728:	58020400 	.word	0x58020400
 800b72c:	58020800 	.word	0x58020800
 800b730:	58020c00 	.word	0x58020c00
 800b734:	58021000 	.word	0x58021000
 800b738:	58021400 	.word	0x58021400
 800b73c:	58021800 	.word	0x58021800
 800b740:	58021c00 	.word	0x58021c00
 800b744:	58022000 	.word	0x58022000
 800b748:	58022400 	.word	0x58022400
 800b74c:	2300      	movs	r3, #0
 800b74e:	69fa      	ldr	r2, [r7, #28]
 800b750:	f002 0203 	and.w	r2, r2, #3
 800b754:	0092      	lsls	r2, r2, #2
 800b756:	4093      	lsls	r3, r2
 800b758:	69ba      	ldr	r2, [r7, #24]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b75e:	4938      	ldr	r1, [pc, #224]	; (800b840 <HAL_GPIO_Init+0x35c>)
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	089b      	lsrs	r3, r3, #2
 800b764:	3302      	adds	r3, #2
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	43db      	mvns	r3, r3
 800b776:	69ba      	ldr	r2, [r7, #24]
 800b778:	4013      	ands	r3, r2
 800b77a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b784:	2b00      	cmp	r3, #0
 800b786:	d003      	beq.n	800b790 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b788:	69ba      	ldr	r2, [r7, #24]
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	4313      	orrs	r3, r2
 800b78e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	69ba      	ldr	r2, [r7, #24]
 800b794:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	43db      	mvns	r3, r3
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d003      	beq.n	800b7ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b7b2:	69ba      	ldr	r2, [r7, #24]
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	69ba      	ldr	r2, [r7, #24]
 800b7be:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b7c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	43db      	mvns	r3, r3
 800b7cc:	69ba      	ldr	r2, [r7, #24]
 800b7ce:	4013      	ands	r3, r2
 800b7d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800b7de:	69ba      	ldr	r2, [r7, #24]
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b7e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b7ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	43db      	mvns	r3, r3
 800b7fa:	69ba      	ldr	r2, [r7, #24]
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d003      	beq.n	800b814 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800b80c:	69ba      	ldr	r2, [r7, #24]
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	4313      	orrs	r3, r2
 800b812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	3301      	adds	r3, #1
 800b820:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	fa22 f303 	lsr.w	r3, r2, r3
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f47f ae63 	bne.w	800b4f8 <HAL_GPIO_Init+0x14>
  }
}
 800b832:	bf00      	nop
 800b834:	bf00      	nop
 800b836:	3724      	adds	r7, #36	; 0x24
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	58000400 	.word	0x58000400

0800b844 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b844:	b480      	push	{r7}
 800b846:	b087      	sub	sp, #28
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b84e:	2300      	movs	r3, #0
 800b850:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b852:	4b75      	ldr	r3, [pc, #468]	; (800ba28 <HAL_GPIO_DeInit+0x1e4>)
 800b854:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800b856:	e0d9      	b.n	800ba0c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b858:	2201      	movs	r2, #1
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	fa02 f303 	lsl.w	r3, r2, r3
 800b860:	683a      	ldr	r2, [r7, #0]
 800b862:	4013      	ands	r3, r2
 800b864:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f000 80cc 	beq.w	800ba06 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b86e:	4a6f      	ldr	r2, [pc, #444]	; (800ba2c <HAL_GPIO_DeInit+0x1e8>)
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	089b      	lsrs	r3, r3, #2
 800b874:	3302      	adds	r3, #2
 800b876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b87a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f003 0303 	and.w	r3, r3, #3
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	220f      	movs	r2, #15
 800b886:	fa02 f303 	lsl.w	r3, r2, r3
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	4013      	ands	r3, r2
 800b88e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a67      	ldr	r2, [pc, #412]	; (800ba30 <HAL_GPIO_DeInit+0x1ec>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d037      	beq.n	800b908 <HAL_GPIO_DeInit+0xc4>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4a66      	ldr	r2, [pc, #408]	; (800ba34 <HAL_GPIO_DeInit+0x1f0>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d031      	beq.n	800b904 <HAL_GPIO_DeInit+0xc0>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4a65      	ldr	r2, [pc, #404]	; (800ba38 <HAL_GPIO_DeInit+0x1f4>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d02b      	beq.n	800b900 <HAL_GPIO_DeInit+0xbc>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4a64      	ldr	r2, [pc, #400]	; (800ba3c <HAL_GPIO_DeInit+0x1f8>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d025      	beq.n	800b8fc <HAL_GPIO_DeInit+0xb8>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a63      	ldr	r2, [pc, #396]	; (800ba40 <HAL_GPIO_DeInit+0x1fc>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d01f      	beq.n	800b8f8 <HAL_GPIO_DeInit+0xb4>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a62      	ldr	r2, [pc, #392]	; (800ba44 <HAL_GPIO_DeInit+0x200>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d019      	beq.n	800b8f4 <HAL_GPIO_DeInit+0xb0>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a61      	ldr	r2, [pc, #388]	; (800ba48 <HAL_GPIO_DeInit+0x204>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d013      	beq.n	800b8f0 <HAL_GPIO_DeInit+0xac>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a60      	ldr	r2, [pc, #384]	; (800ba4c <HAL_GPIO_DeInit+0x208>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d00d      	beq.n	800b8ec <HAL_GPIO_DeInit+0xa8>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a5f      	ldr	r2, [pc, #380]	; (800ba50 <HAL_GPIO_DeInit+0x20c>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d007      	beq.n	800b8e8 <HAL_GPIO_DeInit+0xa4>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a5e      	ldr	r2, [pc, #376]	; (800ba54 <HAL_GPIO_DeInit+0x210>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d101      	bne.n	800b8e4 <HAL_GPIO_DeInit+0xa0>
 800b8e0:	2309      	movs	r3, #9
 800b8e2:	e012      	b.n	800b90a <HAL_GPIO_DeInit+0xc6>
 800b8e4:	230a      	movs	r3, #10
 800b8e6:	e010      	b.n	800b90a <HAL_GPIO_DeInit+0xc6>
 800b8e8:	2308      	movs	r3, #8
 800b8ea:	e00e      	b.n	800b90a <HAL_GPIO_DeInit+0xc6>
 800b8ec:	2307      	movs	r3, #7
 800b8ee:	e00c      	b.n	800b90a <HAL_GPIO_DeInit+0xc6>
 800b8f0:	2306      	movs	r3, #6
 800b8f2:	e00a      	b.n	800b90a <HAL_GPIO_DeInit+0xc6>
 800b8f4:	2305      	movs	r3, #5
 800b8f6:	e008      	b.n	800b90a <HAL_GPIO_DeInit+0xc6>
 800b8f8:	2304      	movs	r3, #4
 800b8fa:	e006      	b.n	800b90a <HAL_GPIO_DeInit+0xc6>
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e004      	b.n	800b90a <HAL_GPIO_DeInit+0xc6>
 800b900:	2302      	movs	r3, #2
 800b902:	e002      	b.n	800b90a <HAL_GPIO_DeInit+0xc6>
 800b904:	2301      	movs	r3, #1
 800b906:	e000      	b.n	800b90a <HAL_GPIO_DeInit+0xc6>
 800b908:	2300      	movs	r3, #0
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	f002 0203 	and.w	r2, r2, #3
 800b910:	0092      	lsls	r2, r2, #2
 800b912:	4093      	lsls	r3, r2
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	429a      	cmp	r2, r3
 800b918:	d136      	bne.n	800b988 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	43db      	mvns	r3, r3
 800b922:	401a      	ands	r2, r3
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	43db      	mvns	r3, r3
 800b930:	401a      	ands	r2, r3
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800b936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	43db      	mvns	r3, r3
 800b940:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b944:	4013      	ands	r3, r2
 800b946:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800b948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b94c:	685a      	ldr	r2, [r3, #4]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	43db      	mvns	r3, r3
 800b952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b956:	4013      	ands	r3, r2
 800b958:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f003 0303 	and.w	r3, r3, #3
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	220f      	movs	r2, #15
 800b964:	fa02 f303 	lsl.w	r3, r2, r3
 800b968:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b96a:	4a30      	ldr	r2, [pc, #192]	; (800ba2c <HAL_GPIO_DeInit+0x1e8>)
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	089b      	lsrs	r3, r3, #2
 800b970:	3302      	adds	r3, #2
 800b972:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	43da      	mvns	r2, r3
 800b97a:	482c      	ldr	r0, [pc, #176]	; (800ba2c <HAL_GPIO_DeInit+0x1e8>)
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	089b      	lsrs	r3, r3, #2
 800b980:	400a      	ands	r2, r1
 800b982:	3302      	adds	r3, #2
 800b984:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	005b      	lsls	r3, r3, #1
 800b990:	2103      	movs	r1, #3
 800b992:	fa01 f303 	lsl.w	r3, r1, r3
 800b996:	431a      	orrs	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	08da      	lsrs	r2, r3, #3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	3208      	adds	r2, #8
 800b9a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	f003 0307 	and.w	r3, r3, #7
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	220f      	movs	r2, #15
 800b9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b6:	43db      	mvns	r3, r3
 800b9b8:	697a      	ldr	r2, [r7, #20]
 800b9ba:	08d2      	lsrs	r2, r2, #3
 800b9bc:	4019      	ands	r1, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	3208      	adds	r2, #8
 800b9c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	68da      	ldr	r2, [r3, #12]
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	005b      	lsls	r3, r3, #1
 800b9ce:	2103      	movs	r1, #3
 800b9d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b9d4:	43db      	mvns	r3, r3
 800b9d6:	401a      	ands	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	685a      	ldr	r2, [r3, #4]
 800b9e0:	2101      	movs	r1, #1
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b9e8:	43db      	mvns	r3, r3
 800b9ea:	401a      	ands	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	689a      	ldr	r2, [r3, #8]
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	005b      	lsls	r3, r3, #1
 800b9f8:	2103      	movs	r1, #3
 800b9fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b9fe:	43db      	mvns	r3, r3
 800ba00:	401a      	ands	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	609a      	str	r2, [r3, #8]
    }

    position++;
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800ba0c:	683a      	ldr	r2, [r7, #0]
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	fa22 f303 	lsr.w	r3, r2, r3
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f47f af1f 	bne.w	800b858 <HAL_GPIO_DeInit+0x14>
  }
}
 800ba1a:	bf00      	nop
 800ba1c:	bf00      	nop
 800ba1e:	371c      	adds	r7, #28
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr
 800ba28:	58000080 	.word	0x58000080
 800ba2c:	58000400 	.word	0x58000400
 800ba30:	58020000 	.word	0x58020000
 800ba34:	58020400 	.word	0x58020400
 800ba38:	58020800 	.word	0x58020800
 800ba3c:	58020c00 	.word	0x58020c00
 800ba40:	58021000 	.word	0x58021000
 800ba44:	58021400 	.word	0x58021400
 800ba48:	58021800 	.word	0x58021800
 800ba4c:	58021c00 	.word	0x58021c00
 800ba50:	58022000 	.word	0x58022000
 800ba54:	58022400 	.word	0x58022400

0800ba58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	460b      	mov	r3, r1
 800ba62:	807b      	strh	r3, [r7, #2]
 800ba64:	4613      	mov	r3, r2
 800ba66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ba68:	787b      	ldrb	r3, [r7, #1]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d003      	beq.n	800ba76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ba6e:	887a      	ldrh	r2, [r7, #2]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ba74:	e003      	b.n	800ba7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ba76:	887b      	ldrh	r3, [r7, #2]
 800ba78:	041a      	lsls	r2, r3, #16
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	619a      	str	r2, [r3, #24]
}
 800ba7e:	bf00      	nop
 800ba80:	370c      	adds	r7, #12
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b085      	sub	sp, #20
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	460b      	mov	r3, r1
 800ba94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ba9c:	887a      	ldrh	r2, [r7, #2]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	4013      	ands	r3, r2
 800baa2:	041a      	lsls	r2, r3, #16
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	43d9      	mvns	r1, r3
 800baa8:	887b      	ldrh	r3, [r7, #2]
 800baaa:	400b      	ands	r3, r1
 800baac:	431a      	orrs	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	619a      	str	r2, [r3, #24]
}
 800bab2:	bf00      	nop
 800bab4:	3714      	adds	r7, #20
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	4603      	mov	r3, r0
 800bac6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800bac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bacc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800bad0:	88fb      	ldrh	r3, [r7, #6]
 800bad2:	4013      	ands	r3, r2
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d008      	beq.n	800baea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800badc:	88fb      	ldrh	r3, [r7, #6]
 800bade:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bae2:	88fb      	ldrh	r3, [r7, #6]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f000 f804 	bl	800baf2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800baea:	bf00      	nop
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800baf2:	b480      	push	{r7}
 800baf4:	b083      	sub	sp, #12
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	4603      	mov	r3, r0
 800bafa:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800bafc:	bf00      	nop
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d101      	bne.n	800bb1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	e07f      	b.n	800bc1a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d106      	bne.n	800bb34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f7f7 fb0a 	bl	8003148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2224      	movs	r2, #36	; 0x24
 800bb38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f022 0201 	bic.w	r2, r2, #1
 800bb4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	685a      	ldr	r2, [r3, #4]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bb58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	689a      	ldr	r2, [r3, #8]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bb68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d107      	bne.n	800bb82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	689a      	ldr	r2, [r3, #8]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bb7e:	609a      	str	r2, [r3, #8]
 800bb80:	e006      	b.n	800bb90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	689a      	ldr	r2, [r3, #8]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bb8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d104      	bne.n	800bba2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bba0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	6859      	ldr	r1, [r3, #4]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	4b1d      	ldr	r3, [pc, #116]	; (800bc24 <HAL_I2C_Init+0x11c>)
 800bbae:	430b      	orrs	r3, r1
 800bbb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68da      	ldr	r2, [r3, #12]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bbc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	691a      	ldr	r2, [r3, #16]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	ea42 0103 	orr.w	r1, r2, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	699b      	ldr	r3, [r3, #24]
 800bbd2:	021a      	lsls	r2, r3, #8
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	430a      	orrs	r2, r1
 800bbda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	69d9      	ldr	r1, [r3, #28]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a1a      	ldr	r2, [r3, #32]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	430a      	orrs	r2, r1
 800bbea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f042 0201 	orr.w	r2, r2, #1
 800bbfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2220      	movs	r2, #32
 800bc06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	02008000 	.word	0x02008000

0800bc28 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e021      	b.n	800bc7e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2224      	movs	r2, #36	; 0x24
 800bc3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f022 0201 	bic.w	r2, r2, #1
 800bc50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7f7 fade 	bl	8003214 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
	...

0800bc88 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b088      	sub	sp, #32
 800bc8c:	af02      	add	r7, sp, #8
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	4608      	mov	r0, r1
 800bc92:	4611      	mov	r1, r2
 800bc94:	461a      	mov	r2, r3
 800bc96:	4603      	mov	r3, r0
 800bc98:	817b      	strh	r3, [r7, #10]
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	813b      	strh	r3, [r7, #8]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b20      	cmp	r3, #32
 800bcac:	f040 80f9 	bne.w	800bea2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcb0:	6a3b      	ldr	r3, [r7, #32]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d002      	beq.n	800bcbc <HAL_I2C_Mem_Write+0x34>
 800bcb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d105      	bne.n	800bcc8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcc2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e0ed      	b.n	800bea4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d101      	bne.n	800bcd6 <HAL_I2C_Mem_Write+0x4e>
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	e0e6      	b.n	800bea4 <HAL_I2C_Mem_Write+0x21c>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bcde:	f7fe ff31 	bl	800ab44 <HAL_GetTick>
 800bce2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	2319      	movs	r3, #25
 800bcea:	2201      	movs	r2, #1
 800bcec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	f000 fadd 	bl	800c2b0 <I2C_WaitOnFlagUntilTimeout>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d001      	beq.n	800bd00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e0d1      	b.n	800bea4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2221      	movs	r2, #33	; 0x21
 800bd04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2240      	movs	r2, #64	; 0x40
 800bd0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6a3a      	ldr	r2, [r7, #32]
 800bd1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2200      	movs	r2, #0
 800bd26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bd28:	88f8      	ldrh	r0, [r7, #6]
 800bd2a:	893a      	ldrh	r2, [r7, #8]
 800bd2c:	8979      	ldrh	r1, [r7, #10]
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	9301      	str	r3, [sp, #4]
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	9300      	str	r3, [sp, #0]
 800bd36:	4603      	mov	r3, r0
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f000 f9ed 	bl	800c118 <I2C_RequestMemoryWrite>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d005      	beq.n	800bd50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e0a9      	b.n	800bea4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	2bff      	cmp	r3, #255	; 0xff
 800bd58:	d90e      	bls.n	800bd78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	22ff      	movs	r2, #255	; 0xff
 800bd5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	8979      	ldrh	r1, [r7, #10]
 800bd68:	2300      	movs	r3, #0
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f000 fbbf 	bl	800c4f4 <I2C_TransferConfig>
 800bd76:	e00f      	b.n	800bd98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd86:	b2da      	uxtb	r2, r3
 800bd88:	8979      	ldrh	r1, [r7, #10]
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f000 fbae 	bl	800c4f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd98:	697a      	ldr	r2, [r7, #20]
 800bd9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f000 fac7 	bl	800c330 <I2C_WaitOnTXISFlagUntilTimeout>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d001      	beq.n	800bdac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e07b      	b.n	800bea4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb0:	781a      	ldrb	r2, [r3, #0]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdbc:	1c5a      	adds	r2, r3, #1
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d034      	beq.n	800be50 <HAL_I2C_Mem_Write+0x1c8>
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d130      	bne.n	800be50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	2180      	movs	r1, #128	; 0x80
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f000 fa59 	bl	800c2b0 <I2C_WaitOnFlagUntilTimeout>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d001      	beq.n	800be08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800be04:	2301      	movs	r3, #1
 800be06:	e04d      	b.n	800bea4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	2bff      	cmp	r3, #255	; 0xff
 800be10:	d90e      	bls.n	800be30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	22ff      	movs	r2, #255	; 0xff
 800be16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	8979      	ldrh	r1, [r7, #10]
 800be20:	2300      	movs	r3, #0
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f000 fb63 	bl	800c4f4 <I2C_TransferConfig>
 800be2e:	e00f      	b.n	800be50 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be34:	b29a      	uxth	r2, r3
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	8979      	ldrh	r1, [r7, #10]
 800be42:	2300      	movs	r3, #0
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f000 fb52 	bl	800c4f4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be54:	b29b      	uxth	r3, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	d19e      	bne.n	800bd98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be5a:	697a      	ldr	r2, [r7, #20]
 800be5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f000 faa6 	bl	800c3b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d001      	beq.n	800be6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	e01a      	b.n	800bea4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2220      	movs	r2, #32
 800be74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	6859      	ldr	r1, [r3, #4]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	4b0a      	ldr	r3, [pc, #40]	; (800beac <HAL_I2C_Mem_Write+0x224>)
 800be82:	400b      	ands	r3, r1
 800be84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2220      	movs	r2, #32
 800be8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	e000      	b.n	800bea4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bea2:	2302      	movs	r3, #2
  }
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3718      	adds	r7, #24
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	fe00e800 	.word	0xfe00e800

0800beb0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b088      	sub	sp, #32
 800beb4:	af02      	add	r7, sp, #8
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	4608      	mov	r0, r1
 800beba:	4611      	mov	r1, r2
 800bebc:	461a      	mov	r2, r3
 800bebe:	4603      	mov	r3, r0
 800bec0:	817b      	strh	r3, [r7, #10]
 800bec2:	460b      	mov	r3, r1
 800bec4:	813b      	strh	r3, [r7, #8]
 800bec6:	4613      	mov	r3, r2
 800bec8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	2b20      	cmp	r3, #32
 800bed4:	f040 80fd 	bne.w	800c0d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d002      	beq.n	800bee4 <HAL_I2C_Mem_Read+0x34>
 800bede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d105      	bne.n	800bef0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800beea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	e0f1      	b.n	800c0d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d101      	bne.n	800befe <HAL_I2C_Mem_Read+0x4e>
 800befa:	2302      	movs	r3, #2
 800befc:	e0ea      	b.n	800c0d4 <HAL_I2C_Mem_Read+0x224>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2201      	movs	r2, #1
 800bf02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bf06:	f7fe fe1d 	bl	800ab44 <HAL_GetTick>
 800bf0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	2319      	movs	r3, #25
 800bf12:	2201      	movs	r2, #1
 800bf14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f000 f9c9 	bl	800c2b0 <I2C_WaitOnFlagUntilTimeout>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d001      	beq.n	800bf28 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	e0d5      	b.n	800c0d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2222      	movs	r2, #34	; 0x22
 800bf2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2240      	movs	r2, #64	; 0x40
 800bf34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6a3a      	ldr	r2, [r7, #32]
 800bf42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bf48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bf50:	88f8      	ldrh	r0, [r7, #6]
 800bf52:	893a      	ldrh	r2, [r7, #8]
 800bf54:	8979      	ldrh	r1, [r7, #10]
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	9301      	str	r3, [sp, #4]
 800bf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	4603      	mov	r3, r0
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f000 f92d 	bl	800c1c0 <I2C_RequestMemoryRead>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d005      	beq.n	800bf78 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bf74:	2301      	movs	r3, #1
 800bf76:	e0ad      	b.n	800c0d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	2bff      	cmp	r3, #255	; 0xff
 800bf80:	d90e      	bls.n	800bfa0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	22ff      	movs	r2, #255	; 0xff
 800bf86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf8c:	b2da      	uxtb	r2, r3
 800bf8e:	8979      	ldrh	r1, [r7, #10]
 800bf90:	4b52      	ldr	r3, [pc, #328]	; (800c0dc <HAL_I2C_Mem_Read+0x22c>)
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f000 faab 	bl	800c4f4 <I2C_TransferConfig>
 800bf9e:	e00f      	b.n	800bfc0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	8979      	ldrh	r1, [r7, #10]
 800bfb2:	4b4a      	ldr	r3, [pc, #296]	; (800c0dc <HAL_I2C_Mem_Read+0x22c>)
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f000 fa9a 	bl	800c4f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	2104      	movs	r1, #4
 800bfca:	68f8      	ldr	r0, [r7, #12]
 800bfcc:	f000 f970 	bl	800c2b0 <I2C_WaitOnFlagUntilTimeout>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d001      	beq.n	800bfda <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e07c      	b.n	800c0d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe4:	b2d2      	uxtb	r2, r2
 800bfe6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfec:	1c5a      	adds	r2, r3, #1
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bff6:	3b01      	subs	r3, #1
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c002:	b29b      	uxth	r3, r3
 800c004:	3b01      	subs	r3, #1
 800c006:	b29a      	uxth	r2, r3
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c010:	b29b      	uxth	r3, r3
 800c012:	2b00      	cmp	r3, #0
 800c014:	d034      	beq.n	800c080 <HAL_I2C_Mem_Read+0x1d0>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d130      	bne.n	800c080 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c024:	2200      	movs	r2, #0
 800c026:	2180      	movs	r1, #128	; 0x80
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 f941 	bl	800c2b0 <I2C_WaitOnFlagUntilTimeout>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	e04d      	b.n	800c0d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	2bff      	cmp	r3, #255	; 0xff
 800c040:	d90e      	bls.n	800c060 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	22ff      	movs	r2, #255	; 0xff
 800c046:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	8979      	ldrh	r1, [r7, #10]
 800c050:	2300      	movs	r3, #0
 800c052:	9300      	str	r3, [sp, #0]
 800c054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f000 fa4b 	bl	800c4f4 <I2C_TransferConfig>
 800c05e:	e00f      	b.n	800c080 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c064:	b29a      	uxth	r2, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	8979      	ldrh	r1, [r7, #10]
 800c072:	2300      	movs	r3, #0
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c07a:	68f8      	ldr	r0, [r7, #12]
 800c07c:	f000 fa3a 	bl	800c4f4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c084:	b29b      	uxth	r3, r3
 800c086:	2b00      	cmp	r3, #0
 800c088:	d19a      	bne.n	800bfc0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c08a:	697a      	ldr	r2, [r7, #20]
 800c08c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c08e:	68f8      	ldr	r0, [r7, #12]
 800c090:	f000 f98e 	bl	800c3b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d001      	beq.n	800c09e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c09a:	2301      	movs	r3, #1
 800c09c:	e01a      	b.n	800c0d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2220      	movs	r2, #32
 800c0a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	6859      	ldr	r1, [r3, #4]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	4b0b      	ldr	r3, [pc, #44]	; (800c0e0 <HAL_I2C_Mem_Read+0x230>)
 800c0b2:	400b      	ands	r3, r1
 800c0b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2220      	movs	r2, #32
 800c0ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	e000      	b.n	800c0d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c0d2:	2302      	movs	r3, #2
  }
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3718      	adds	r7, #24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	80002400 	.word	0x80002400
 800c0e0:	fe00e800 	.word	0xfe00e800

0800c0e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0f2:	b2db      	uxtb	r3, r3
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af02      	add	r7, sp, #8
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	4608      	mov	r0, r1
 800c122:	4611      	mov	r1, r2
 800c124:	461a      	mov	r2, r3
 800c126:	4603      	mov	r3, r0
 800c128:	817b      	strh	r3, [r7, #10]
 800c12a:	460b      	mov	r3, r1
 800c12c:	813b      	strh	r3, [r7, #8]
 800c12e:	4613      	mov	r3, r2
 800c130:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c132:	88fb      	ldrh	r3, [r7, #6]
 800c134:	b2da      	uxtb	r2, r3
 800c136:	8979      	ldrh	r1, [r7, #10]
 800c138:	4b20      	ldr	r3, [pc, #128]	; (800c1bc <I2C_RequestMemoryWrite+0xa4>)
 800c13a:	9300      	str	r3, [sp, #0]
 800c13c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c140:	68f8      	ldr	r0, [r7, #12]
 800c142:	f000 f9d7 	bl	800c4f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c146:	69fa      	ldr	r2, [r7, #28]
 800c148:	69b9      	ldr	r1, [r7, #24]
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f000 f8f0 	bl	800c330 <I2C_WaitOnTXISFlagUntilTimeout>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d001      	beq.n	800c15a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	e02c      	b.n	800c1b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c15a:	88fb      	ldrh	r3, [r7, #6]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d105      	bne.n	800c16c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c160:	893b      	ldrh	r3, [r7, #8]
 800c162:	b2da      	uxtb	r2, r3
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	629a      	str	r2, [r3, #40]	; 0x28
 800c16a:	e015      	b.n	800c198 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c16c:	893b      	ldrh	r3, [r7, #8]
 800c16e:	0a1b      	lsrs	r3, r3, #8
 800c170:	b29b      	uxth	r3, r3
 800c172:	b2da      	uxtb	r2, r3
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c17a:	69fa      	ldr	r2, [r7, #28]
 800c17c:	69b9      	ldr	r1, [r7, #24]
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f000 f8d6 	bl	800c330 <I2C_WaitOnTXISFlagUntilTimeout>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d001      	beq.n	800c18e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	e012      	b.n	800c1b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c18e:	893b      	ldrh	r3, [r7, #8]
 800c190:	b2da      	uxtb	r2, r3
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	2180      	movs	r1, #128	; 0x80
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	f000 f884 	bl	800c2b0 <I2C_WaitOnFlagUntilTimeout>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e000      	b.n	800c1b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	80002000 	.word	0x80002000

0800c1c0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af02      	add	r7, sp, #8
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	4608      	mov	r0, r1
 800c1ca:	4611      	mov	r1, r2
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	817b      	strh	r3, [r7, #10]
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	813b      	strh	r3, [r7, #8]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c1da:	88fb      	ldrh	r3, [r7, #6]
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	8979      	ldrh	r1, [r7, #10]
 800c1e0:	4b20      	ldr	r3, [pc, #128]	; (800c264 <I2C_RequestMemoryRead+0xa4>)
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f000 f984 	bl	800c4f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c1ec:	69fa      	ldr	r2, [r7, #28]
 800c1ee:	69b9      	ldr	r1, [r7, #24]
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f000 f89d 	bl	800c330 <I2C_WaitOnTXISFlagUntilTimeout>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e02c      	b.n	800c25a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c200:	88fb      	ldrh	r3, [r7, #6]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d105      	bne.n	800c212 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c206:	893b      	ldrh	r3, [r7, #8]
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	629a      	str	r2, [r3, #40]	; 0x28
 800c210:	e015      	b.n	800c23e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c212:	893b      	ldrh	r3, [r7, #8]
 800c214:	0a1b      	lsrs	r3, r3, #8
 800c216:	b29b      	uxth	r3, r3
 800c218:	b2da      	uxtb	r2, r3
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c220:	69fa      	ldr	r2, [r7, #28]
 800c222:	69b9      	ldr	r1, [r7, #24]
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f000 f883 	bl	800c330 <I2C_WaitOnTXISFlagUntilTimeout>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d001      	beq.n	800c234 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	e012      	b.n	800c25a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c234:	893b      	ldrh	r3, [r7, #8]
 800c236:	b2da      	uxtb	r2, r3
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	9300      	str	r3, [sp, #0]
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	2200      	movs	r2, #0
 800c246:	2140      	movs	r1, #64	; 0x40
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f000 f831 	bl	800c2b0 <I2C_WaitOnFlagUntilTimeout>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d001      	beq.n	800c258 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	e000      	b.n	800c25a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	80002000 	.word	0x80002000

0800c268 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	f003 0302 	and.w	r3, r3, #2
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	d103      	bne.n	800c286 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2200      	movs	r2, #0
 800c284:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	699b      	ldr	r3, [r3, #24]
 800c28c:	f003 0301 	and.w	r3, r3, #1
 800c290:	2b01      	cmp	r3, #1
 800c292:	d007      	beq.n	800c2a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	699a      	ldr	r2, [r3, #24]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f042 0201 	orr.w	r2, r2, #1
 800c2a2:	619a      	str	r2, [r3, #24]
  }
}
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	603b      	str	r3, [r7, #0]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c2c0:	e022      	b.n	800c308 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c8:	d01e      	beq.n	800c308 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2ca:	f7fe fc3b 	bl	800ab44 <HAL_GetTick>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	683a      	ldr	r2, [r7, #0]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d302      	bcc.n	800c2e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d113      	bne.n	800c308 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2e4:	f043 0220 	orr.w	r2, r3, #32
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2220      	movs	r2, #32
 800c2f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c304:	2301      	movs	r3, #1
 800c306:	e00f      	b.n	800c328 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	699a      	ldr	r2, [r3, #24]
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	4013      	ands	r3, r2
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	429a      	cmp	r2, r3
 800c316:	bf0c      	ite	eq
 800c318:	2301      	moveq	r3, #1
 800c31a:	2300      	movne	r3, #0
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	461a      	mov	r2, r3
 800c320:	79fb      	ldrb	r3, [r7, #7]
 800c322:	429a      	cmp	r2, r3
 800c324:	d0cd      	beq.n	800c2c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c33c:	e02c      	b.n	800c398 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	68b9      	ldr	r1, [r7, #8]
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f000 f870 	bl	800c428 <I2C_IsAcknowledgeFailed>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c34e:	2301      	movs	r3, #1
 800c350:	e02a      	b.n	800c3a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c358:	d01e      	beq.n	800c398 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c35a:	f7fe fbf3 	bl	800ab44 <HAL_GetTick>
 800c35e:	4602      	mov	r2, r0
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	1ad3      	subs	r3, r2, r3
 800c364:	68ba      	ldr	r2, [r7, #8]
 800c366:	429a      	cmp	r2, r3
 800c368:	d302      	bcc.n	800c370 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d113      	bne.n	800c398 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c374:	f043 0220 	orr.w	r2, r3, #32
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2220      	movs	r2, #32
 800c380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2200      	movs	r2, #0
 800c388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	e007      	b.n	800c3a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	699b      	ldr	r3, [r3, #24]
 800c39e:	f003 0302 	and.w	r3, r3, #2
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d1cb      	bne.n	800c33e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c3bc:	e028      	b.n	800c410 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	68b9      	ldr	r1, [r7, #8]
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f000 f830 	bl	800c428 <I2C_IsAcknowledgeFailed>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e026      	b.n	800c420 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3d2:	f7fe fbb7 	bl	800ab44 <HAL_GetTick>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	68ba      	ldr	r2, [r7, #8]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d302      	bcc.n	800c3e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d113      	bne.n	800c410 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ec:	f043 0220 	orr.w	r2, r3, #32
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2220      	movs	r2, #32
 800c3f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2200      	movs	r2, #0
 800c408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e007      	b.n	800c420 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	f003 0320 	and.w	r3, r3, #32
 800c41a:	2b20      	cmp	r3, #32
 800c41c:	d1cf      	bne.n	800c3be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3710      	adds	r7, #16
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	699b      	ldr	r3, [r3, #24]
 800c43a:	f003 0310 	and.w	r3, r3, #16
 800c43e:	2b10      	cmp	r3, #16
 800c440:	d151      	bne.n	800c4e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c442:	e022      	b.n	800c48a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c44a:	d01e      	beq.n	800c48a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c44c:	f7fe fb7a 	bl	800ab44 <HAL_GetTick>
 800c450:	4602      	mov	r2, r0
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	1ad3      	subs	r3, r2, r3
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d302      	bcc.n	800c462 <I2C_IsAcknowledgeFailed+0x3a>
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d113      	bne.n	800c48a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c466:	f043 0220 	orr.w	r2, r3, #32
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2220      	movs	r2, #32
 800c472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2200      	movs	r2, #0
 800c47a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2200      	movs	r2, #0
 800c482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c486:	2301      	movs	r3, #1
 800c488:	e02e      	b.n	800c4e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	699b      	ldr	r3, [r3, #24]
 800c490:	f003 0320 	and.w	r3, r3, #32
 800c494:	2b20      	cmp	r3, #32
 800c496:	d1d5      	bne.n	800c444 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2210      	movs	r2, #16
 800c49e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2220      	movs	r2, #32
 800c4a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f7ff fedd 	bl	800c268 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6859      	ldr	r1, [r3, #4]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	4b0d      	ldr	r3, [pc, #52]	; (800c4f0 <I2C_IsAcknowledgeFailed+0xc8>)
 800c4ba:	400b      	ands	r3, r1
 800c4bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4c2:	f043 0204 	orr.w	r2, r3, #4
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2220      	movs	r2, #32
 800c4ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e000      	b.n	800c4e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	fe00e800 	.word	0xfe00e800

0800c4f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	607b      	str	r3, [r7, #4]
 800c4fe:	460b      	mov	r3, r1
 800c500:	817b      	strh	r3, [r7, #10]
 800c502:	4613      	mov	r3, r2
 800c504:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	69bb      	ldr	r3, [r7, #24]
 800c50e:	0d5b      	lsrs	r3, r3, #21
 800c510:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c514:	4b0d      	ldr	r3, [pc, #52]	; (800c54c <I2C_TransferConfig+0x58>)
 800c516:	430b      	orrs	r3, r1
 800c518:	43db      	mvns	r3, r3
 800c51a:	ea02 0103 	and.w	r1, r2, r3
 800c51e:	897b      	ldrh	r3, [r7, #10]
 800c520:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c524:	7a7b      	ldrb	r3, [r7, #9]
 800c526:	041b      	lsls	r3, r3, #16
 800c528:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c52c:	431a      	orrs	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	431a      	orrs	r2, r3
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	431a      	orrs	r2, r3
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	430a      	orrs	r2, r1
 800c53c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800c53e:	bf00      	nop
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	03ff63ff 	.word	0x03ff63ff

0800c550 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c560:	b2db      	uxtb	r3, r3
 800c562:	2b20      	cmp	r3, #32
 800c564:	d138      	bne.n	800c5d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d101      	bne.n	800c574 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c570:	2302      	movs	r3, #2
 800c572:	e032      	b.n	800c5da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2224      	movs	r2, #36	; 0x24
 800c580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f022 0201 	bic.w	r2, r2, #1
 800c592:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c5a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	6819      	ldr	r1, [r3, #0]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	683a      	ldr	r2, [r7, #0]
 800c5b0:	430a      	orrs	r2, r1
 800c5b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f042 0201 	orr.w	r2, r2, #1
 800c5c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2220      	movs	r2, #32
 800c5c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	e000      	b.n	800c5da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c5d8:	2302      	movs	r3, #2
  }
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	b085      	sub	sp, #20
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
 800c5ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	2b20      	cmp	r3, #32
 800c5fa:	d139      	bne.n	800c670 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c602:	2b01      	cmp	r3, #1
 800c604:	d101      	bne.n	800c60a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c606:	2302      	movs	r3, #2
 800c608:	e033      	b.n	800c672 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2201      	movs	r2, #1
 800c60e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2224      	movs	r2, #36	; 0x24
 800c616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f022 0201 	bic.w	r2, r2, #1
 800c628:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c638:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	021b      	lsls	r3, r3, #8
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	4313      	orrs	r3, r2
 800c642:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f042 0201 	orr.w	r2, r2, #1
 800c65a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2220      	movs	r2, #32
 800c660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c66c:	2300      	movs	r3, #0
 800c66e:	e000      	b.n	800c672 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c670:	2302      	movs	r3, #2
  }
}
 800c672:	4618      	mov	r0, r3
 800c674:	3714      	adds	r7, #20
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
	...

0800c680 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	e0bf      	b.n	800c812 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d106      	bne.n	800c6ac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7f6 fdda 	bl	8003260 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	699a      	ldr	r2, [r3, #24]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c6c2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	6999      	ldr	r1, [r3, #24]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685a      	ldr	r2, [r3, #4]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c6d8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	691b      	ldr	r3, [r3, #16]
 800c6de:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	430a      	orrs	r2, r1
 800c6e6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	6899      	ldr	r1, [r3, #8]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	4b4a      	ldr	r3, [pc, #296]	; (800c81c <HAL_LTDC_Init+0x19c>)
 800c6f4:	400b      	ands	r3, r1
 800c6f6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	695b      	ldr	r3, [r3, #20]
 800c6fc:	041b      	lsls	r3, r3, #16
 800c6fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	6899      	ldr	r1, [r3, #8]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	699a      	ldr	r2, [r3, #24]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	431a      	orrs	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	430a      	orrs	r2, r1
 800c714:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	68d9      	ldr	r1, [r3, #12]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	4b3e      	ldr	r3, [pc, #248]	; (800c81c <HAL_LTDC_Init+0x19c>)
 800c722:	400b      	ands	r3, r1
 800c724:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	69db      	ldr	r3, [r3, #28]
 800c72a:	041b      	lsls	r3, r3, #16
 800c72c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	68d9      	ldr	r1, [r3, #12]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6a1a      	ldr	r2, [r3, #32]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	431a      	orrs	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	430a      	orrs	r2, r1
 800c742:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	6919      	ldr	r1, [r3, #16]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	4b33      	ldr	r3, [pc, #204]	; (800c81c <HAL_LTDC_Init+0x19c>)
 800c750:	400b      	ands	r3, r1
 800c752:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c758:	041b      	lsls	r3, r3, #16
 800c75a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6919      	ldr	r1, [r3, #16]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	431a      	orrs	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	430a      	orrs	r2, r1
 800c770:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	6959      	ldr	r1, [r3, #20]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	4b27      	ldr	r3, [pc, #156]	; (800c81c <HAL_LTDC_Init+0x19c>)
 800c77e:	400b      	ands	r3, r1
 800c780:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c786:	041b      	lsls	r3, r3, #16
 800c788:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	6959      	ldr	r1, [r3, #20]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	431a      	orrs	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	430a      	orrs	r2, r1
 800c79e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c7a6:	021b      	lsls	r3, r3, #8
 800c7a8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c7b0:	041b      	lsls	r3, r3, #16
 800c7b2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c7c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c7d6:	431a      	orrs	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f042 0206 	orr.w	r2, r2, #6
 800c7ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	699a      	ldr	r2, [r3, #24]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f042 0201 	orr.w	r2, r2, #1
 800c7fe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3710      	adds	r7, #16
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	f000f800 	.word	0xf000f800

0800c820 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c836:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f003 0304 	and.w	r3, r3, #4
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d023      	beq.n	800c88a <HAL_LTDC_IRQHandler+0x6a>
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	f003 0304 	and.w	r3, r3, #4
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d01e      	beq.n	800c88a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f022 0204 	bic.w	r2, r2, #4
 800c85a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2204      	movs	r2, #4
 800c862:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c86a:	f043 0201 	orr.w	r2, r3, #1
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2204      	movs	r2, #4
 800c878:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2200      	movs	r2, #0
 800c880:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f86f 	bl	800c968 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f003 0302 	and.w	r3, r3, #2
 800c890:	2b00      	cmp	r3, #0
 800c892:	d023      	beq.n	800c8dc <HAL_LTDC_IRQHandler+0xbc>
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	f003 0302 	and.w	r3, r3, #2
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d01e      	beq.n	800c8dc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f022 0202 	bic.w	r2, r2, #2
 800c8ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2202      	movs	r2, #2
 800c8b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c8bc:	f043 0202 	orr.w	r2, r3, #2
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2204      	movs	r2, #4
 800c8ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 f846 	bl	800c968 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f003 0301 	and.w	r3, r3, #1
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d01b      	beq.n	800c91e <HAL_LTDC_IRQHandler+0xfe>
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	f003 0301 	and.w	r3, r3, #1
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d016      	beq.n	800c91e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f022 0201 	bic.w	r2, r2, #1
 800c8fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2201      	movs	r2, #1
 800c906:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2201      	movs	r2, #1
 800c90c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7f5 ff5d 	bl	80027d8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f003 0308 	and.w	r3, r3, #8
 800c924:	2b00      	cmp	r3, #0
 800c926:	d01b      	beq.n	800c960 <HAL_LTDC_IRQHandler+0x140>
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	f003 0308 	and.w	r3, r3, #8
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d016      	beq.n	800c960 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f022 0208 	bic.w	r2, r2, #8
 800c940:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2208      	movs	r2, #8
 800c948:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2201      	movs	r2, #1
 800c94e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 f80e 	bl	800c97c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800c960:	bf00      	nop
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800c970:	bf00      	nop
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800c984:	bf00      	nop
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c990:	b5b0      	push	{r4, r5, r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d101      	bne.n	800c9aa <HAL_LTDC_ConfigLayer+0x1a>
 800c9a6:	2302      	movs	r3, #2
 800c9a8:	e02c      	b.n	800ca04 <HAL_LTDC_ConfigLayer+0x74>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2202      	movs	r2, #2
 800c9b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2134      	movs	r1, #52	; 0x34
 800c9c0:	fb01 f303 	mul.w	r3, r1, r3
 800c9c4:	4413      	add	r3, r2
 800c9c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	4614      	mov	r4, r2
 800c9ce:	461d      	mov	r5, r3
 800c9d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9dc:	682b      	ldr	r3, [r5, #0]
 800c9de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	68b9      	ldr	r1, [r7, #8]
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f000 f849 	bl	800ca7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ca02:	2300      	movs	r3, #0
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3710      	adds	r7, #16
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bdb0      	pop	{r4, r5, r7, pc}

0800ca0c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d101      	bne.n	800ca24 <HAL_LTDC_ProgramLineEvent+0x18>
 800ca20:	2302      	movs	r3, #2
 800ca22:	e023      	b.n	800ca6c <HAL_LTDC_ProgramLineEvent+0x60>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2201      	movs	r2, #1
 800ca28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2202      	movs	r2, #2
 800ca30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f022 0201 	bic.w	r2, r2, #1
 800ca42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800ca44:	4a0c      	ldr	r2, [pc, #48]	; (800ca78 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f042 0201 	orr.w	r2, r2, #1
 800ca58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	370c      	adds	r7, #12
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr
 800ca78:	50001000 	.word	0x50001000

0800ca7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b089      	sub	sp, #36	; 0x24
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	0c1b      	lsrs	r3, r3, #16
 800ca94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca98:	4413      	add	r3, r2
 800ca9a:	041b      	lsls	r3, r3, #16
 800ca9c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	461a      	mov	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	01db      	lsls	r3, r3, #7
 800caa8:	4413      	add	r3, r2
 800caaa:	3384      	adds	r3, #132	; 0x84
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	6812      	ldr	r2, [r2, #0]
 800cab2:	4611      	mov	r1, r2
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	01d2      	lsls	r2, r2, #7
 800cab8:	440a      	add	r2, r1
 800caba:	3284      	adds	r2, #132	; 0x84
 800cabc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800cac0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	0c1b      	lsrs	r3, r3, #16
 800cace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cad2:	4413      	add	r3, r2
 800cad4:	1c5a      	adds	r2, r3, #1
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4619      	mov	r1, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	01db      	lsls	r3, r3, #7
 800cae0:	440b      	add	r3, r1
 800cae2:	3384      	adds	r3, #132	; 0x84
 800cae4:	4619      	mov	r1, r3
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	4313      	orrs	r3, r2
 800caea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	68da      	ldr	r2, [r3, #12]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cafa:	4413      	add	r3, r2
 800cafc:	041b      	lsls	r3, r3, #16
 800cafe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	461a      	mov	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	01db      	lsls	r3, r3, #7
 800cb0a:	4413      	add	r3, r2
 800cb0c:	3384      	adds	r3, #132	; 0x84
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	6812      	ldr	r2, [r2, #0]
 800cb14:	4611      	mov	r1, r2
 800cb16:	687a      	ldr	r2, [r7, #4]
 800cb18:	01d2      	lsls	r2, r2, #7
 800cb1a:	440a      	add	r2, r1
 800cb1c:	3284      	adds	r2, #132	; 0x84
 800cb1e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800cb22:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	689a      	ldr	r2, [r3, #8]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb32:	4413      	add	r3, r2
 800cb34:	1c5a      	adds	r2, r3, #1
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	01db      	lsls	r3, r3, #7
 800cb40:	440b      	add	r3, r1
 800cb42:	3384      	adds	r3, #132	; 0x84
 800cb44:	4619      	mov	r1, r3
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	461a      	mov	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	01db      	lsls	r3, r3, #7
 800cb56:	4413      	add	r3, r2
 800cb58:	3384      	adds	r3, #132	; 0x84
 800cb5a:	691b      	ldr	r3, [r3, #16]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	6812      	ldr	r2, [r2, #0]
 800cb60:	4611      	mov	r1, r2
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	01d2      	lsls	r2, r2, #7
 800cb66:	440a      	add	r2, r1
 800cb68:	3284      	adds	r2, #132	; 0x84
 800cb6a:	f023 0307 	bic.w	r3, r3, #7
 800cb6e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	461a      	mov	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	01db      	lsls	r3, r3, #7
 800cb7a:	4413      	add	r3, r2
 800cb7c:	3384      	adds	r3, #132	; 0x84
 800cb7e:	461a      	mov	r2, r3
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	691b      	ldr	r3, [r3, #16]
 800cb84:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cb8c:	021b      	lsls	r3, r3, #8
 800cb8e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cb96:	041b      	lsls	r3, r3, #16
 800cb98:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	699b      	ldr	r3, [r3, #24]
 800cb9e:	061b      	lsls	r3, r3, #24
 800cba0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	461a      	mov	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	01db      	lsls	r3, r3, #7
 800cbac:	4413      	add	r3, r2
 800cbae:	3384      	adds	r3, #132	; 0x84
 800cbb0:	699b      	ldr	r3, [r3, #24]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	01db      	lsls	r3, r3, #7
 800cbbc:	4413      	add	r3, r2
 800cbbe:	3384      	adds	r3, #132	; 0x84
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbcc:	461a      	mov	r2, r3
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	431a      	orrs	r2, r3
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	431a      	orrs	r2, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4619      	mov	r1, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	01db      	lsls	r3, r3, #7
 800cbe0:	440b      	add	r3, r1
 800cbe2:	3384      	adds	r3, #132	; 0x84
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	01db      	lsls	r3, r3, #7
 800cbf6:	4413      	add	r3, r2
 800cbf8:	3384      	adds	r3, #132	; 0x84
 800cbfa:	695b      	ldr	r3, [r3, #20]
 800cbfc:	68fa      	ldr	r2, [r7, #12]
 800cbfe:	6812      	ldr	r2, [r2, #0]
 800cc00:	4611      	mov	r1, r2
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	01d2      	lsls	r2, r2, #7
 800cc06:	440a      	add	r2, r1
 800cc08:	3284      	adds	r2, #132	; 0x84
 800cc0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc0e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	461a      	mov	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	01db      	lsls	r3, r3, #7
 800cc1a:	4413      	add	r3, r2
 800cc1c:	3384      	adds	r3, #132	; 0x84
 800cc1e:	461a      	mov	r2, r3
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	695b      	ldr	r3, [r3, #20]
 800cc24:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	01db      	lsls	r3, r3, #7
 800cc30:	4413      	add	r3, r2
 800cc32:	3384      	adds	r3, #132	; 0x84
 800cc34:	69da      	ldr	r2, [r3, #28]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	01db      	lsls	r3, r3, #7
 800cc40:	440b      	add	r3, r1
 800cc42:	3384      	adds	r3, #132	; 0x84
 800cc44:	4619      	mov	r1, r3
 800cc46:	4b58      	ldr	r3, [pc, #352]	; (800cda8 <LTDC_SetConfig+0x32c>)
 800cc48:	4013      	ands	r3, r2
 800cc4a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	69da      	ldr	r2, [r3, #28]
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	6a1b      	ldr	r3, [r3, #32]
 800cc54:	68f9      	ldr	r1, [r7, #12]
 800cc56:	6809      	ldr	r1, [r1, #0]
 800cc58:	4608      	mov	r0, r1
 800cc5a:	6879      	ldr	r1, [r7, #4]
 800cc5c:	01c9      	lsls	r1, r1, #7
 800cc5e:	4401      	add	r1, r0
 800cc60:	3184      	adds	r1, #132	; 0x84
 800cc62:	4313      	orrs	r3, r2
 800cc64:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	01db      	lsls	r3, r3, #7
 800cc70:	4413      	add	r3, r2
 800cc72:	3384      	adds	r3, #132	; 0x84
 800cc74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	01db      	lsls	r3, r3, #7
 800cc80:	4413      	add	r3, r2
 800cc82:	3384      	adds	r3, #132	; 0x84
 800cc84:	461a      	mov	r2, r3
 800cc86:	2300      	movs	r3, #0
 800cc88:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	01db      	lsls	r3, r3, #7
 800cc94:	4413      	add	r3, r2
 800cc96:	3384      	adds	r3, #132	; 0x84
 800cc98:	461a      	mov	r2, r3
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d102      	bne.n	800ccae <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800cca8:	2304      	movs	r3, #4
 800ccaa:	61fb      	str	r3, [r7, #28]
 800ccac:	e01b      	b.n	800cce6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	691b      	ldr	r3, [r3, #16]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d102      	bne.n	800ccbc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800ccb6:	2303      	movs	r3, #3
 800ccb8:	61fb      	str	r3, [r7, #28]
 800ccba:	e014      	b.n	800cce6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	691b      	ldr	r3, [r3, #16]
 800ccc0:	2b04      	cmp	r3, #4
 800ccc2:	d00b      	beq.n	800ccdc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d007      	beq.n	800ccdc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ccd0:	2b03      	cmp	r3, #3
 800ccd2:	d003      	beq.n	800ccdc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ccd8:	2b07      	cmp	r3, #7
 800ccda:	d102      	bne.n	800cce2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800ccdc:	2302      	movs	r3, #2
 800ccde:	61fb      	str	r3, [r7, #28]
 800cce0:	e001      	b.n	800cce6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800cce2:	2301      	movs	r3, #1
 800cce4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	461a      	mov	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	01db      	lsls	r3, r3, #7
 800ccf0:	4413      	add	r3, r2
 800ccf2:	3384      	adds	r3, #132	; 0x84
 800ccf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	6812      	ldr	r2, [r2, #0]
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	01d2      	lsls	r2, r2, #7
 800cd00:	440a      	add	r2, r1
 800cd02:	3284      	adds	r2, #132	; 0x84
 800cd04:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800cd08:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0e:	69fa      	ldr	r2, [r7, #28]
 800cd10:	fb02 f303 	mul.w	r3, r2, r3
 800cd14:	041a      	lsls	r2, r3, #16
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	6859      	ldr	r1, [r3, #4]
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	1acb      	subs	r3, r1, r3
 800cd20:	69f9      	ldr	r1, [r7, #28]
 800cd22:	fb01 f303 	mul.w	r3, r1, r3
 800cd26:	3307      	adds	r3, #7
 800cd28:	68f9      	ldr	r1, [r7, #12]
 800cd2a:	6809      	ldr	r1, [r1, #0]
 800cd2c:	4608      	mov	r0, r1
 800cd2e:	6879      	ldr	r1, [r7, #4]
 800cd30:	01c9      	lsls	r1, r1, #7
 800cd32:	4401      	add	r1, r0
 800cd34:	3184      	adds	r1, #132	; 0x84
 800cd36:	4313      	orrs	r3, r2
 800cd38:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	01db      	lsls	r3, r3, #7
 800cd44:	4413      	add	r3, r2
 800cd46:	3384      	adds	r3, #132	; 0x84
 800cd48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4619      	mov	r1, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	01db      	lsls	r3, r3, #7
 800cd54:	440b      	add	r3, r1
 800cd56:	3384      	adds	r3, #132	; 0x84
 800cd58:	4619      	mov	r1, r3
 800cd5a:	4b14      	ldr	r3, [pc, #80]	; (800cdac <LTDC_SetConfig+0x330>)
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	461a      	mov	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	01db      	lsls	r3, r3, #7
 800cd6a:	4413      	add	r3, r2
 800cd6c:	3384      	adds	r3, #132	; 0x84
 800cd6e:	461a      	mov	r2, r3
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd74:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	01db      	lsls	r3, r3, #7
 800cd80:	4413      	add	r3, r2
 800cd82:	3384      	adds	r3, #132	; 0x84
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	6812      	ldr	r2, [r2, #0]
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	01d2      	lsls	r2, r2, #7
 800cd90:	440a      	add	r2, r1
 800cd92:	3284      	adds	r2, #132	; 0x84
 800cd94:	f043 0301 	orr.w	r3, r3, #1
 800cd98:	6013      	str	r3, [r2, #0]
}
 800cd9a:	bf00      	nop
 800cd9c:	3724      	adds	r7, #36	; 0x24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr
 800cda6:	bf00      	nop
 800cda8:	fffff8f8 	.word	0xfffff8f8
 800cdac:	fffff800 	.word	0xfffff800

0800cdb0 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 800cdb8:	f7fd fec4 	bl	800ab44 <HAL_GetTick>
 800cdbc:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d101      	bne.n	800cdc8 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e04a      	b.n	800ce5e <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	2b02      	cmp	r3, #2
 800cdd2:	d008      	beq.n	800cde6 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2280      	movs	r2, #128	; 0x80
 800cdd8:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2200      	movs	r2, #0
 800cdde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e03b      	b.n	800ce5e <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68da      	ldr	r2, [r3, #12]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800cdf4:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	68da      	ldr	r2, [r3, #12]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f022 0201 	bic.w	r2, r2, #1
 800ce04:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ce06:	e016      	b.n	800ce36 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ce08:	f7fd fe9c 	bl	800ab44 <HAL_GetTick>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	1ad3      	subs	r3, r2, r3
 800ce12:	2b05      	cmp	r3, #5
 800ce14:	d90f      	bls.n	800ce36 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2203      	movs	r2, #3
 800ce2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 800ce32:	2301      	movs	r3, #1
 800ce34:	e013      	b.n	800ce5e <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	f003 0301 	and.w	r3, r3, #1
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1e1      	bne.n	800ce08 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	221f      	movs	r2, #31
 800ce4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2201      	movs	r2, #1
 800ce58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800ce66:	b480      	push	{r7}
 800ce68:	b083      	sub	sp, #12
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d101      	bne.n	800ce78 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800ce74:	2301      	movs	r3, #1
 800ce76:	e017      	b.n	800cea8 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	2b02      	cmp	r3, #2
 800ce82:	d004      	beq.n	800ce8e <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2280      	movs	r2, #128	; 0x80
 800ce88:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e00c      	b.n	800cea8 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2204      	movs	r2, #4
 800ce92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68da      	ldr	r2, [r3, #12]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f022 0201 	bic.w	r2, r2, #1
 800cea4:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800cea6:	2300      	movs	r3, #0
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	370c      	adds	r7, #12
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af02      	add	r7, sp, #8
 800ceba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800cec0:	f7fd fe40 	bl	800ab44 <HAL_GetTick>
 800cec4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d102      	bne.n	800ced2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800cecc:	2301      	movs	r3, #1
 800cece:	73fb      	strb	r3, [r7, #15]
 800ced0:	e0a9      	b.n	800d026 <HAL_OSPI_Init+0x172>
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f040 80a2 	bne.w	800d026 <HAL_OSPI_Init+0x172>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7f6 fa88 	bl	80033f8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800cee8:	f241 3188 	movw	r1, #5000	; 0x1388
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 fd48 	bl	800d982 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	689a      	ldr	r2, [r3, #8]
 800cef8:	4b4d      	ldr	r3, [pc, #308]	; (800d030 <HAL_OSPI_Init+0x17c>)
 800cefa:	4013      	ands	r3, r2
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	68d1      	ldr	r1, [r2, #12]
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	6912      	ldr	r2, [r2, #16]
 800cf04:	3a01      	subs	r2, #1
 800cf06:	0412      	lsls	r2, r2, #16
 800cf08:	4311      	orrs	r1, r2
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	6952      	ldr	r2, [r2, #20]
 800cf0e:	3a01      	subs	r2, #1
 800cf10:	0212      	lsls	r2, r2, #8
 800cf12:	4311      	orrs	r1, r2
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cf18:	0112      	lsls	r2, r2, #4
 800cf1a:	4311      	orrs	r1, r2
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cf20:	4311      	orrs	r1, r2
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	69d2      	ldr	r2, [r2, #28]
 800cf26:	4311      	orrs	r1, r2
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	6812      	ldr	r2, [r2, #0]
 800cf2c:	430b      	orrs	r3, r1
 800cf2e:	6093      	str	r3, [r2, #8]
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	68db      	ldr	r3, [r3, #12]
 800cf36:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6a1a      	ldr	r2, [r3, #32]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	430a      	orrs	r2, r1
 800cf44:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf4a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	430a      	orrs	r2, r1
 800cf56:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cf60:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	3b01      	subs	r3, #1
 800cf72:	021a      	lsls	r2, r3, #8
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	430a      	orrs	r2, r1
 800cf7a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	2200      	movs	r2, #0
 800cf86:	2120      	movs	r1, #32
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fd45 	bl	800da18 <OSPI_WaitFlagStateUntilTimeout>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800cf92:	7bfb      	ldrb	r3, [r7, #15]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d146      	bne.n	800d026 <HAL_OSPI_Init+0x172>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, 
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa6:	1e5a      	subs	r2, r3, #1
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	430a      	orrs	r2, r1
 800cfae:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	689a      	ldr	r2, [r3, #8]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	430a      	orrs	r2, r1
 800cfc4:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800cfce:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfda:	431a      	orrs	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	430a      	orrs	r2, r1
 800cfe2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f042 0201 	orr.w	r2, r2, #1
 800cff4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	699b      	ldr	r3, [r3, #24]
 800cffa:	2b02      	cmp	r3, #2
 800cffc:	d107      	bne.n	800d00e <HAL_OSPI_Init+0x15a>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	689a      	ldr	r2, [r3, #8]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f042 0202 	orr.w	r2, r2, #2
 800d00c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d016:	d103      	bne.n	800d020 <HAL_OSPI_Init+0x16c>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	655a      	str	r2, [r3, #84]	; 0x54
 800d01e:	e002      	b.n	800d026 <HAL_OSPI_Init+0x172>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2202      	movs	r2, #2
 800d024:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 800d026:	7bfb      	ldrb	r3, [r7, #15]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}
 800d030:	f8e0f884 	.word	0xf8e0f884

0800d034 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d03c:	2300      	movs	r3, #0
 800d03e:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d102      	bne.n	800d04c <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	73fb      	strb	r3, [r7, #15]
 800d04a:	e015      	b.n	800d078 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f022 0201 	bic.w	r2, r2, #1
 800d05a:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	689a      	ldr	r2, [r3, #8]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f022 0202 	bic.w	r2, r2, #2
 800d06a:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f7f6 fa21 	bl	80034b4 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	655a      	str	r2, [r3, #84]	; 0x54
  }

  return status;
 800d078:	7bfb      	ldrb	r3, [r7, #15]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
	...

0800d084 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b086      	sub	sp, #24
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	3350      	adds	r3, #80	; 0x50
 800d092:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6a1b      	ldr	r3, [r3, #32]
 800d09a:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0a8:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	f003 0304 	and.w	r3, r3, #4
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d03a      	beq.n	800d12a <HAL_OSPI_IRQHandler+0xa6>
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d035      	beq.n	800d12a <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	2b18      	cmp	r3, #24
 800d0c2:	d10f      	bne.n	800d0e4 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0c8:	781a      	ldrb	r2, [r3, #0]
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0dc:	1e5a      	subs	r2, r3, #1
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	64da      	str	r2, [r3, #76]	; 0x4c
 800d0e2:	e012      	b.n	800d10a <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	2b28      	cmp	r3, #40	; 0x28
 800d0e8:	d10f      	bne.n	800d10a <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0ee:	697a      	ldr	r2, [r7, #20]
 800d0f0:	7812      	ldrb	r2, [r2, #0]
 800d0f2:	b2d2      	uxtb	r2, r2
 800d0f4:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d104:	1e5a      	subs	r2, r3, #1
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	64da      	str	r2, [r3, #76]	; 0x4c
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d107      	bne.n	800d122 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d120:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 fb7c 	bl	800d820 <HAL_OSPI_FifoThresholdCallback>
 800d128:	e0e7      	b.n	800d2fa <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/ 
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	f003 0302 	and.w	r3, r3, #2
 800d130:	2b00      	cmp	r3, #0
 800d132:	d067      	beq.n	800d204 <HAL_OSPI_IRQHandler+0x180>
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d062      	beq.n	800d204 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	2b28      	cmp	r3, #40	; 0x28
 800d142:	d131      	bne.n	800d1a8 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d015      	beq.n	800d178 <HAL_OSPI_IRQHandler+0xf4>
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800d152:	2b00      	cmp	r3, #0
 800d154:	d010      	beq.n	800d178 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d15a:	697a      	ldr	r2, [r7, #20]
 800d15c:	7812      	ldrb	r2, [r2, #0]
 800d15e:	b2d2      	uxtb	r2, r2
 800d160:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d166:	1c5a      	adds	r2, r3, #1
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d170:	1e5a      	subs	r2, r3, #1
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	64da      	str	r2, [r3, #76]	; 0x4c
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d176:	e0bd      	b.n	800d2f4 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	f040 80b9 	bne.w	800d2f4 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2202      	movs	r2, #2
 800d188:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800d198:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2202      	movs	r2, #2
 800d19e:	655a      	str	r2, [r3, #84]	; 0x54

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 fb51 	bl	800d848 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d1a6:	e0a5      	b.n	800d2f4 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2202      	movs	r2, #2
 800d1ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800d1be:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2202      	movs	r2, #2
 800d1c4:	655a      	str	r2, [r3, #84]	; 0x54

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	2b18      	cmp	r3, #24
 800d1ca:	d103      	bne.n	800d1d4 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 fb45 	bl	800d85c <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d1d2:	e08f      	b.n	800d2f4 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */ 
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	2b08      	cmp	r3, #8
 800d1d8:	d103      	bne.n	800d1e2 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 fb2a 	bl	800d834 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d1e0:	e088      	b.n	800d2f4 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1e8:	f040 8084 	bne.w	800d2f4 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d103      	bne.n	800d1fc <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fb09 	bl	800d80c <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d1fa:	e07b      	b.n	800d2f4 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 fafb 	bl	800d7f8 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d202:	e077      	b.n	800d2f4 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	f003 0308 	and.w	r3, r3, #8
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d01e      	beq.n	800d24c <HAL_OSPI_IRQHandler+0x1c8>
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d019      	beq.n	800d24c <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2208      	movs	r2, #8
 800d21e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00a      	beq.n	800d244 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800d23c:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2202      	movs	r2, #2
 800d242:	655a      	str	r2, [r3, #84]	; 0x54

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 fb13 	bl	800d870 <HAL_OSPI_StatusMatchCallback>
 800d24a:	e056      	b.n	800d2fa <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	2b00      	cmp	r3, #0
 800d254:	d03c      	beq.n	800d2d0 <HAL_OSPI_IRQHandler+0x24c>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d037      	beq.n	800d2d0 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2201      	movs	r2, #1
 800d266:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800d276:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2202      	movs	r2, #2
 800d27c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f003 0304 	and.w	r3, r3, #4
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d01a      	beq.n	800d2c2 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f022 0204 	bic.w	r2, r2, #4
 800d29a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2a0:	4a18      	ldr	r2, [pc, #96]	; (800d304 <HAL_OSPI_IRQHandler+0x280>)
 800d2a2:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7ff fddc 	bl	800ce66 <HAL_MDMA_Abort_IT>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d021      	beq.n	800d2f8 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 fa9c 	bl	800d7f8 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800d2c0:	e01a      	b.n	800d2f8 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2202      	movs	r2, #2
 800d2c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 fa95 	bl	800d7f8 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800d2ce:	e013      	b.n	800d2f8 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */ 
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	f003 0310 	and.w	r3, r3, #16
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00f      	beq.n	800d2fa <HAL_OSPI_IRQHandler+0x276>
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d00a      	beq.n	800d2fa <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2210      	movs	r2, #16
 800d2ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 fac9 	bl	800d884 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d2f2:	e002      	b.n	800d2fa <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800d2f4:	bf00      	nop
 800d2f6:	e000      	b.n	800d2fa <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800d2f8:	bf00      	nop
}
 800d2fa:	bf00      	nop
 800d2fc:	3718      	adds	r7, #24
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	0800d9a1 	.word	0x0800d9a1

0800d308 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b08a      	sub	sp, #40	; 0x28
 800d30c:	af02      	add	r7, sp, #8
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800d314:	f7fd fc16 	bl	800ab44 <HAL_GetTick>
 800d318:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31e:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d324:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	2b02      	cmp	r3, #2
 800d32a:	d104      	bne.n	800d336 <HAL_OSPI_Command+0x2e>
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d334:	d115      	bne.n	800d362 <HAL_OSPI_Command+0x5a>
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	2b14      	cmp	r3, #20
 800d33a:	d107      	bne.n	800d34c <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG) 
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b02      	cmp	r3, #2
 800d342:	d00e      	beq.n	800d362 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b03      	cmp	r3, #3
 800d34a:	d00a      	beq.n	800d362 <HAL_OSPI_Command+0x5a>
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	2b24      	cmp	r3, #36	; 0x24
 800d350:	d15b      	bne.n	800d40a <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  || 
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b01      	cmp	r3, #1
 800d358:	d003      	beq.n	800d362 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  || 
 800d35e:	2b03      	cmp	r3, #3
 800d360:	d153      	bne.n	800d40a <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	2200      	movs	r2, #0
 800d36a:	2120      	movs	r1, #32
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f000 fb53 	bl	800da18 <OSPI_WaitFlagStateUntilTimeout>
 800d372:	4603      	mov	r3, r0
 800d374:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800d376:	7ffb      	ldrb	r3, [r7, #31]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d14c      	bne.n	800d416 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2200      	movs	r2, #0
 800d380:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800d382:	68b9      	ldr	r1, [r7, #8]
 800d384:	68f8      	ldr	r0, [r7, #12]
 800d386:	f000 fb7f 	bl	800da88 <OSPI_ConfigCmd>
 800d38a:	4603      	mov	r3, r0
 800d38c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800d38e:	7ffb      	ldrb	r3, [r7, #31]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d140      	bne.n	800d416 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10e      	bne.n	800d3ba <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	2102      	movs	r1, #2
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f000 fb36 	bl	800da18 <OSPI_WaitFlagStateUntilTimeout>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800d3b8:	e02d      	b.n	800d416 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d103      	bne.n	800d3ca <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2204      	movs	r2, #4
 800d3c6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800d3c8:	e025      	b.n	800d416 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d10b      	bne.n	800d3ea <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3d6:	2b24      	cmp	r3, #36	; 0x24
 800d3d8:	d103      	bne.n	800d3e2 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2204      	movs	r2, #4
 800d3de:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800d3e0:	e019      	b.n	800d416 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2214      	movs	r2, #20
 800d3e6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800d3e8:	e015      	b.n	800d416 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2b02      	cmp	r3, #2
 800d3f0:	d111      	bne.n	800d416 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3f6:	2b14      	cmp	r3, #20
 800d3f8:	d103      	bne.n	800d402 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2204      	movs	r2, #4
 800d3fe:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800d400:	e009      	b.n	800d416 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2224      	movs	r2, #36	; 0x24
 800d406:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800d408:	e005      	b.n	800d416 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2210      	movs	r2, #16
 800d412:	659a      	str	r2, [r3, #88]	; 0x58
 800d414:	e000      	b.n	800d418 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800d416:	bf00      	nop
  }

  /* Return function status */
  return status;
 800d418:	7ffb      	ldrb	r3, [r7, #31]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3720      	adds	r7, #32
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b08a      	sub	sp, #40	; 0x28
 800d426:	af02      	add	r7, sp, #8
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d42e:	f7fd fb89 	bl	800ab44 <HAL_GetTick>
 800d432:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	3350      	adds	r3, #80	; 0x50
 800d43a:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d105      	bne.n	800d44e <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2208      	movs	r2, #8
 800d44a:	659a      	str	r2, [r3, #88]	; 0x58
 800d44c:	e057      	b.n	800d4fe <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d452:	2b04      	cmp	r3, #4
 800d454:	d14e      	bne.n	800d4f4 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d45c:	1c5a      	adds	r2, r3, #1
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	64da      	str	r2, [r3, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->pBuffPtr  = pData;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	68ba      	ldr	r2, [r7, #8]
 800d46e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800d47e:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	2201      	movs	r2, #1
 800d488:	2104      	movs	r1, #4
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	f000 fac4 	bl	800da18 <OSPI_WaitFlagStateUntilTimeout>
 800d490:	4603      	mov	r3, r0
 800d492:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800d494:	7ffb      	ldrb	r3, [r7, #31]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d113      	bne.n	800d4c2 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d49e:	781a      	ldrb	r2, [r3, #0]
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4a8:	1c5a      	adds	r2, r3, #1
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4b2:	1e5a      	subs	r2, r3, #1
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	64da      	str	r2, [r3, #76]	; 0x4c
      } while (hospi->XferCount > 0U);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d1df      	bne.n	800d480 <HAL_OSPI_Transmit+0x5e>
 800d4c0:	e000      	b.n	800d4c4 <HAL_OSPI_Transmit+0xa2>
          break;
 800d4c2:	bf00      	nop

      if (status == HAL_OK)
 800d4c4:	7ffb      	ldrb	r3, [r7, #31]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d119      	bne.n	800d4fe <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	9300      	str	r3, [sp, #0]
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	2102      	movs	r1, #2
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	f000 fa9f 	bl	800da18 <OSPI_WaitFlagStateUntilTimeout>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800d4de:	7ffb      	ldrb	r3, [r7, #31]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d10c      	bne.n	800d4fe <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2202      	movs	r2, #2
 800d4ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2202      	movs	r2, #2
 800d4f0:	655a      	str	r2, [r3, #84]	; 0x54
 800d4f2:	e004      	b.n	800d4fe <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2210      	movs	r2, #16
 800d4fc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 800d4fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800d500:	4618      	mov	r0, r3
 800d502:	3720      	adds	r7, #32
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b08c      	sub	sp, #48	; 0x30
 800d50c:	af02      	add	r7, sp, #8
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d514:	f7fd fb16 	bl	800ab44 <HAL_GetTick>
 800d518:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	3350      	adds	r3, #80	; 0x50
 800d520:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d528:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800d532:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d106      	bne.n	800d548 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2208      	movs	r2, #8
 800d544:	659a      	str	r2, [r3, #88]	; 0x58
 800d546:	e07c      	b.n	800d642 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d54c:	2b04      	cmp	r3, #4
 800d54e:	d172      	bne.n	800d636 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d556:	1c5a      	adds	r2, r3, #1
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	64da      	str	r2, [r3, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->pBuffPtr  = pData;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	645a      	str	r2, [r3, #68]	; 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d57c:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d586:	d104      	bne.n	800d592 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	69ba      	ldr	r2, [r7, #24]
 800d58e:	649a      	str	r2, [r3, #72]	; 0x48
 800d590:	e011      	b.n	800d5b6 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800d59a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d004      	beq.n	800d5ac <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	69ba      	ldr	r2, [r7, #24]
 800d5a8:	649a      	str	r2, [r3, #72]	; 0x48
 800d5aa:	e004      	b.n	800d5b6 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	697a      	ldr	r2, [r7, #20]
 800d5b2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	9300      	str	r3, [sp, #0]
 800d5ba:	6a3b      	ldr	r3, [r7, #32]
 800d5bc:	2201      	movs	r2, #1
 800d5be:	2106      	movs	r1, #6
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f000 fa29 	bl	800da18 <OSPI_WaitFlagStateUntilTimeout>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800d5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d114      	bne.n	800d5fe <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5d8:	69fa      	ldr	r2, [r7, #28]
 800d5da:	7812      	ldrb	r2, [r2, #0]
 800d5dc:	b2d2      	uxtb	r2, r2
 800d5de:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5e4:	1c5a      	adds	r2, r3, #1
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5ee:	1e5a      	subs	r2, r3, #1
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	64da      	str	r2, [r3, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1dc      	bne.n	800d5b6 <HAL_OSPI_Receive+0xae>
 800d5fc:	e000      	b.n	800d600 <HAL_OSPI_Receive+0xf8>
          break;
 800d5fe:	bf00      	nop

      if (status == HAL_OK)
 800d600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d604:	2b00      	cmp	r3, #0
 800d606:	d11c      	bne.n	800d642 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	9300      	str	r3, [sp, #0]
 800d60c:	6a3b      	ldr	r3, [r7, #32]
 800d60e:	2201      	movs	r2, #1
 800d610:	2102      	movs	r1, #2
 800d612:	68f8      	ldr	r0, [r7, #12]
 800d614:	f000 fa00 	bl	800da18 <OSPI_WaitFlagStateUntilTimeout>
 800d618:	4603      	mov	r3, r0
 800d61a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800d61e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10d      	bne.n	800d642 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2202      	movs	r2, #2
 800d62c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2202      	movs	r2, #2
 800d632:	655a      	str	r2, [r3, #84]	; 0x54
 800d634:	e005      	b.n	800d642 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800d636:	2301      	movs	r3, #1
 800d638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2210      	movs	r2, #16
 800d640:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 800d642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d646:	4618      	mov	r0, r3
 800d648:	3728      	adds	r7, #40	; 0x28
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b08a      	sub	sp, #40	; 0x28
 800d652:	af02      	add	r7, sp, #8
 800d654:	60f8      	str	r0, [r7, #12]
 800d656:	60b9      	str	r1, [r7, #8]
 800d658:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d65a:	f7fd fa73 	bl	800ab44 <HAL_GetTick>
 800d65e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d666:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800d670:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d676:	2b04      	cmp	r3, #4
 800d678:	d164      	bne.n	800d744 <HAL_OSPI_AutoPolling+0xf6>
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d682:	d15f      	bne.n	800d744 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	9300      	str	r3, [sp, #0]
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	2200      	movs	r2, #0
 800d68c:	2120      	movs	r1, #32
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f000 f9c2 	bl	800da18 <OSPI_WaitFlagStateUntilTimeout>
 800d694:	4603      	mov	r3, r0
 800d696:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800d698:	7ffb      	ldrb	r3, [r7, #31]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d158      	bne.n	800d750 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	68ba      	ldr	r2, [r7, #8]
 800d6a4:	6812      	ldr	r2, [r2, #0]
 800d6a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	6852      	ldr	r2, [r2, #4]
 800d6b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	68ba      	ldr	r2, [r7, #8]
 800d6bc:	6912      	ldr	r2, [r2, #16]
 800d6be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	6899      	ldr	r1, [r3, #8]
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	430b      	orrs	r3, r1
 800d6d6:	431a      	orrs	r2, r3
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800d6e0:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d6ea:	d104      	bne.n	800d6f6 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	697a      	ldr	r2, [r7, #20]
 800d6f2:	649a      	str	r2, [r3, #72]	; 0x48
 800d6f4:	e011      	b.n	800d71a <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800d6fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d702:	2b00      	cmp	r3, #0
 800d704:	d004      	beq.n	800d710 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	697a      	ldr	r2, [r7, #20]
 800d70c:	649a      	str	r2, [r3, #72]	; 0x48
 800d70e:	e004      	b.n	800d71a <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	693a      	ldr	r2, [r7, #16]
 800d716:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	9300      	str	r3, [sp, #0]
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	2201      	movs	r2, #1
 800d722:	2108      	movs	r1, #8
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f000 f977 	bl	800da18 <OSPI_WaitFlagStateUntilTimeout>
 800d72a:	4603      	mov	r3, r0
 800d72c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800d72e:	7ffb      	ldrb	r3, [r7, #31]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10d      	bne.n	800d750 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2208      	movs	r2, #8
 800d73a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2202      	movs	r2, #2
 800d740:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800d742:	e005      	b.n	800d750 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800d744:	2301      	movs	r3, #1
 800d746:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2210      	movs	r2, #16
 800d74c:	659a      	str	r2, [r3, #88]	; 0x58
 800d74e:	e000      	b.n	800d752 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800d750:	bf00      	nop
  }

  /* Return function status */
  return status;
 800d752:	7ffb      	ldrb	r3, [r7, #31]
}
 800d754:	4618      	mov	r0, r3
 800d756:	3720      	adds	r7, #32
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b086      	sub	sp, #24
 800d760:	af02      	add	r7, sp, #8
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800d766:	f7fd f9ed 	bl	800ab44 <HAL_GetTick>
 800d76a:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d770:	2b04      	cmp	r3, #4
 800d772:	d134      	bne.n	800d7de <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	2200      	movs	r2, #0
 800d77e:	2120      	movs	r1, #32
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 f949 	bl	800da18 <OSPI_WaitFlagStateUntilTimeout>
 800d786:	4603      	mov	r3, r0
 800d788:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d78a:	7bfb      	ldrb	r3, [r7, #15]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d12b      	bne.n	800d7e8 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2288      	movs	r2, #136	; 0x88
 800d794:	655a      	str	r2, [r3, #84]	; 0x54

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2b08      	cmp	r3, #8
 800d79c:	d111      	bne.n	800d7c2 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	683a      	ldr	r2, [r7, #0]
 800d7a4:	6852      	ldr	r2, [r2, #4]
 800d7a6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2210      	movs	r2, #16
 800d7b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d7c0:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	4b0a      	ldr	r3, [pc, #40]	; (800d7f4 <HAL_OSPI_MemoryMapped+0x98>)
 800d7ca:	4013      	ands	r3, r2
 800d7cc:	683a      	ldr	r2, [r7, #0]
 800d7ce:	6812      	ldr	r2, [r2, #0]
 800d7d0:	431a      	orrs	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800d7da:	601a      	str	r2, [r3, #0]
 800d7dc:	e004      	b.n	800d7e8 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2210      	movs	r2, #16
 800d7e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Return function status */
  return status;
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	cffffff7 	.word	0xcffffff7

0800d7f8 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 800d800:	bf00      	nop
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800d814:	bf00      	nop
 800d816:	370c      	adds	r7, #12
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800d828:	bf00      	nop
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800d83c:	bf00      	nop
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 800d850:	bf00      	nop
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800d864:	bf00      	nop
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800d878:	bf00      	nop
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 800d88c:	bf00      	nop
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b088      	sub	sp, #32
 800d89c:	af02      	add	r7, sp, #8
 800d89e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800d8a4:	f7fd f94e 	bl	800ab44 <HAL_GetTick>
 800d8a8:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ae:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f003 0308 	and.w	r3, r3, #8
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d104      	bne.n	800d8c4 <HAL_OSPI_Abort+0x2c>
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f003 0304 	and.w	r3, r3, #4
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d052      	beq.n	800d96a <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f003 0304 	and.w	r3, r3, #4
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d014      	beq.n	800d8fc <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f022 0204 	bic.w	r2, r2, #4
 800d8e0:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7ff fa62 	bl	800cdb0 <HAL_MDMA_Abort>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800d8f0:	7dfb      	ldrb	r3, [r7, #23]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d002      	beq.n	800d8fc <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2204      	movs	r2, #4
 800d8fa:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	6a1b      	ldr	r3, [r3, #32]
 800d902:	f003 0320 	and.w	r3, r3, #32
 800d906:	2b00      	cmp	r3, #0
 800d908:	d02b      	beq.n	800d962 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f042 0202 	orr.w	r2, r2, #2
 800d918:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d91e:	9300      	str	r3, [sp, #0]
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	2201      	movs	r2, #1
 800d924:	2102      	movs	r1, #2
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 f876 	bl	800da18 <OSPI_WaitFlagStateUntilTimeout>
 800d92c:	4603      	mov	r3, r0
 800d92e:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800d930:	7dfb      	ldrb	r3, [r7, #23]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d11f      	bne.n	800d976 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	2202      	movs	r2, #2
 800d93c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	2200      	movs	r2, #0
 800d948:	2120      	movs	r1, #32
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 f864 	bl	800da18 <OSPI_WaitFlagStateUntilTimeout>
 800d950:	4603      	mov	r3, r0
 800d952:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800d954:	7dfb      	ldrb	r3, [r7, #23]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d10d      	bne.n	800d976 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2202      	movs	r2, #2
 800d95e:	655a      	str	r2, [r3, #84]	; 0x54
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800d960:	e009      	b.n	800d976 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2202      	movs	r2, #2
 800d966:	655a      	str	r2, [r3, #84]	; 0x54
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800d968:	e005      	b.n	800d976 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800d96a:	2301      	movs	r3, #1
 800d96c:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2210      	movs	r2, #16
 800d972:	659a      	str	r2, [r3, #88]	; 0x58
 800d974:	e000      	b.n	800d978 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800d976:	bf00      	nop
  }

  /* Return function status */
  return status;
 800d978:	7dfb      	ldrb	r3, [r7, #23]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3718      	adds	r7, #24
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800d982:	b480      	push	{r7}
 800d984:	b083      	sub	sp, #12
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	683a      	ldr	r2, [r7, #0]
 800d990:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 800d992:	2300      	movs	r3, #0
}
 800d994:	4618      	mov	r0, r3
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ac:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9bc:	d122      	bne.n	800da04 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	6a1b      	ldr	r3, [r3, #32]
 800d9c4:	f003 0320 	and.w	r3, r3, #32
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d014      	beq.n	800d9f6 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d9e2:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f042 0202 	orr.w	r2, r2, #2
 800d9f2:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 800d9f4:	e00c      	b.n	800da10 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2202      	movs	r2, #2
 800d9fa:	655a      	str	r2, [r3, #84]	; 0x54
      HAL_OSPI_AbortCpltCallback(hospi);
 800d9fc:	68f8      	ldr	r0, [r7, #12]
 800d9fe:	f7ff ff05 	bl	800d80c <HAL_OSPI_AbortCpltCallback>
}
 800da02:	e005      	b.n	800da10 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2202      	movs	r2, #2
 800da08:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_OSPI_ErrorCallback(hospi);
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f7ff fef4 	bl	800d7f8 <HAL_OSPI_ErrorCallback>
}
 800da10:	bf00      	nop
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	603b      	str	r3, [r7, #0]
 800da24:	4613      	mov	r3, r2
 800da26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800da28:	e01a      	b.n	800da60 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da30:	d016      	beq.n	800da60 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da32:	f7fd f887 	bl	800ab44 <HAL_GetTick>
 800da36:	4602      	mov	r2, r0
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	1ad3      	subs	r3, r2, r3
 800da3c:	69ba      	ldr	r2, [r7, #24]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d302      	bcc.n	800da48 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800da42:	69bb      	ldr	r3, [r7, #24]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d10b      	bne.n	800da60 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da4e:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da54:	f043 0201 	orr.w	r2, r3, #1
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800da5c:	2301      	movs	r3, #1
 800da5e:	e00e      	b.n	800da7e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	6a1a      	ldr	r2, [r3, #32]
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	4013      	ands	r3, r2
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	bf14      	ite	ne
 800da6e:	2301      	movne	r3, #1
 800da70:	2300      	moveq	r3, #0
 800da72:	b2db      	uxtb	r3, r3
 800da74:	461a      	mov	r2, r3
 800da76:	79fb      	ldrb	r3, [r7, #7]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d1d6      	bne.n	800da2a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800da7c:	2300      	movs	r3, #0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
	...

0800da88 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800da88:	b480      	push	{r7}
 800da8a:	b089      	sub	sp, #36	; 0x24
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800da92:	2300      	movs	r3, #0
 800da94:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg; 
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800daa4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d10a      	bne.n	800dac4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	685a      	ldr	r2, [r3, #4]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	430a      	orrs	r2, r1
 800dac2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b02      	cmp	r3, #2
 800daca:	d114      	bne.n	800daf6 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800dad4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800dade:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dae8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800daf2:	60fb      	str	r3, [r7, #12]
 800daf4:	e02c      	b.n	800db50 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b03      	cmp	r3, #3
 800dafc:	d114      	bne.n	800db28 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800db06:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800db10:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800db1a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800db24:	60fb      	str	r3, [r7, #12]
 800db26:	e013      	b.n	800db50 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800db30:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800db3a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800db44:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800db4e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db58:	431a      	orrs	r2, r3
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db62:	2b00      	cmp	r3, #0
 800db64:	d012      	beq.n	800db8c <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db7e:	4319      	orrs	r1, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db84:	430b      	orrs	r3, r1
 800db86:	431a      	orrs	r2, r3
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f023 021f 	bic.w	r2, r3, #31
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db98:	431a      	orrs	r2, r3
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d009      	beq.n	800dbba <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d105      	bne.n	800dbba <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	3a01      	subs	r2, #1
 800dbb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f000 8095 	beq.w	800dcee <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	69db      	ldr	r3, [r3, #28]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d053      	beq.n	800dc74 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d01e      	beq.n	800dc12 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800dbd4:	69bb      	ldr	r3, [r7, #24]
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	4b64      	ldr	r3, [pc, #400]	; (800dd6c <OSPI_ConfigCmd+0x2e4>)
 800dbda:	4013      	ands	r3, r2
 800dbdc:	683a      	ldr	r2, [r7, #0]
 800dbde:	68d1      	ldr	r1, [r2, #12]
 800dbe0:	683a      	ldr	r2, [r7, #0]
 800dbe2:	6952      	ldr	r2, [r2, #20]
 800dbe4:	4311      	orrs	r1, r2
 800dbe6:	683a      	ldr	r2, [r7, #0]
 800dbe8:	6912      	ldr	r2, [r2, #16]
 800dbea:	4311      	orrs	r1, r2
 800dbec:	683a      	ldr	r2, [r7, #0]
 800dbee:	69d2      	ldr	r2, [r2, #28]
 800dbf0:	4311      	orrs	r1, r2
 800dbf2:	683a      	ldr	r2, [r7, #0]
 800dbf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dbf6:	4311      	orrs	r1, r2
 800dbf8:	683a      	ldr	r2, [r7, #0]
 800dbfa:	6a12      	ldr	r2, [r2, #32]
 800dbfc:	4311      	orrs	r1, r2
 800dbfe:	683a      	ldr	r2, [r7, #0]
 800dc00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dc02:	4311      	orrs	r1, r2
 800dc04:	683a      	ldr	r2, [r7, #0]
 800dc06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800dc08:	430a      	orrs	r2, r1
 800dc0a:	431a      	orrs	r2, r3
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	601a      	str	r2, [r3, #0]
 800dc10:	e026      	b.n	800dc60 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	681a      	ldr	r2, [r3, #0]
 800dc16:	4b56      	ldr	r3, [pc, #344]	; (800dd70 <OSPI_ConfigCmd+0x2e8>)
 800dc18:	4013      	ands	r3, r2
 800dc1a:	683a      	ldr	r2, [r7, #0]
 800dc1c:	68d1      	ldr	r1, [r2, #12]
 800dc1e:	683a      	ldr	r2, [r7, #0]
 800dc20:	6952      	ldr	r2, [r2, #20]
 800dc22:	4311      	orrs	r1, r2
 800dc24:	683a      	ldr	r2, [r7, #0]
 800dc26:	6912      	ldr	r2, [r2, #16]
 800dc28:	4311      	orrs	r1, r2
 800dc2a:	683a      	ldr	r2, [r7, #0]
 800dc2c:	69d2      	ldr	r2, [r2, #28]
 800dc2e:	4311      	orrs	r1, r2
 800dc30:	683a      	ldr	r2, [r7, #0]
 800dc32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dc34:	4311      	orrs	r1, r2
 800dc36:	683a      	ldr	r2, [r7, #0]
 800dc38:	6a12      	ldr	r2, [r2, #32]
 800dc3a:	430a      	orrs	r2, r1
 800dc3c:	431a      	orrs	r2, r3
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc4a:	d109      	bne.n	800dc60 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800dc50:	2b08      	cmp	r3, #8
 800dc52:	d105      	bne.n	800dc60 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800dc54:	69bb      	ldr	r3, [r7, #24]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	689a      	ldr	r2, [r3, #8]
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	683a      	ldr	r2, [r7, #0]
 800dc6e:	6992      	ldr	r2, [r2, #24]
 800dc70:	649a      	str	r2, [r3, #72]	; 0x48
 800dc72:	e074      	b.n	800dd5e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d015      	beq.n	800dca8 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	4b3c      	ldr	r3, [pc, #240]	; (800dd74 <OSPI_ConfigCmd+0x2ec>)
 800dc82:	4013      	ands	r3, r2
 800dc84:	683a      	ldr	r2, [r7, #0]
 800dc86:	68d1      	ldr	r1, [r2, #12]
 800dc88:	683a      	ldr	r2, [r7, #0]
 800dc8a:	6952      	ldr	r2, [r2, #20]
 800dc8c:	4311      	orrs	r1, r2
 800dc8e:	683a      	ldr	r2, [r7, #0]
 800dc90:	6912      	ldr	r2, [r2, #16]
 800dc92:	4311      	orrs	r1, r2
 800dc94:	683a      	ldr	r2, [r7, #0]
 800dc96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dc98:	4311      	orrs	r1, r2
 800dc9a:	683a      	ldr	r2, [r7, #0]
 800dc9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800dc9e:	430a      	orrs	r2, r1
 800dca0:	431a      	orrs	r2, r3
 800dca2:	69bb      	ldr	r3, [r7, #24]
 800dca4:	601a      	str	r2, [r3, #0]
 800dca6:	e01d      	b.n	800dce4 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	68d9      	ldr	r1, [r3, #12]
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	695b      	ldr	r3, [r3, #20]
 800dcb8:	4319      	orrs	r1, r3
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	691b      	ldr	r3, [r3, #16]
 800dcbe:	430b      	orrs	r3, r1
 800dcc0:	431a      	orrs	r2, r3
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dcce:	d109      	bne.n	800dce4 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800dcd4:	2b08      	cmp	r3, #8
 800dcd6:	d105      	bne.n	800dce4 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800dcd8:	69bb      	ldr	r3, [r7, #24]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dce0:	69bb      	ldr	r3, [r7, #24]
 800dce2:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	689a      	ldr	r2, [r3, #8]
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	601a      	str	r2, [r3, #0]
 800dcec:	e037      	b.n	800dd5e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	69db      	ldr	r3, [r3, #28]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d02e      	beq.n	800dd54 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d015      	beq.n	800dd2a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	4b1d      	ldr	r3, [pc, #116]	; (800dd78 <OSPI_ConfigCmd+0x2f0>)
 800dd04:	4013      	ands	r3, r2
 800dd06:	683a      	ldr	r2, [r7, #0]
 800dd08:	69d1      	ldr	r1, [r2, #28]
 800dd0a:	683a      	ldr	r2, [r7, #0]
 800dd0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dd0e:	4311      	orrs	r1, r2
 800dd10:	683a      	ldr	r2, [r7, #0]
 800dd12:	6a12      	ldr	r2, [r2, #32]
 800dd14:	4311      	orrs	r1, r2
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dd1a:	4311      	orrs	r1, r2
 800dd1c:	683a      	ldr	r2, [r7, #0]
 800dd1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800dd20:	430a      	orrs	r2, r1
 800dd22:	431a      	orrs	r2, r3
 800dd24:	69bb      	ldr	r3, [r7, #24]
 800dd26:	601a      	str	r2, [r3, #0]
 800dd28:	e00e      	b.n	800dd48 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	69d9      	ldr	r1, [r3, #28]
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd3a:	4319      	orrs	r1, r3
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	6a1b      	ldr	r3, [r3, #32]
 800dd40:	430b      	orrs	r3, r1
 800dd42:	431a      	orrs	r2, r3
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	683a      	ldr	r2, [r7, #0]
 800dd4e:	6992      	ldr	r2, [r2, #24]
 800dd50:	649a      	str	r2, [r3, #72]	; 0x48
 800dd52:	e004      	b.n	800dd5e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800dd54:	2301      	movs	r3, #1
 800dd56:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2208      	movs	r2, #8
 800dd5c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 800dd5e:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3724      	adds	r7, #36	; 0x24
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr
 800dd6c:	f0ffc0c0 	.word	0xf0ffc0c0
 800dd70:	ffffc0c0 	.word	0xffffc0c0
 800dd74:	f0ffffc0 	.word	0xf0ffffc0
 800dd78:	f0ffc0ff 	.word	0xf0ffc0ff

0800dd7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800dd84:	4b29      	ldr	r3, [pc, #164]	; (800de2c <HAL_PWREx_ConfigSupply+0xb0>)
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	f003 0307 	and.w	r3, r3, #7
 800dd8c:	2b06      	cmp	r3, #6
 800dd8e:	d00a      	beq.n	800dda6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800dd90:	4b26      	ldr	r3, [pc, #152]	; (800de2c <HAL_PWREx_ConfigSupply+0xb0>)
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d001      	beq.n	800dda2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800dd9e:	2301      	movs	r3, #1
 800dda0:	e040      	b.n	800de24 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800dda2:	2300      	movs	r3, #0
 800dda4:	e03e      	b.n	800de24 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800dda6:	4b21      	ldr	r3, [pc, #132]	; (800de2c <HAL_PWREx_ConfigSupply+0xb0>)
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800ddae:	491f      	ldr	r1, [pc, #124]	; (800de2c <HAL_PWREx_ConfigSupply+0xb0>)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ddb6:	f7fc fec5 	bl	800ab44 <HAL_GetTick>
 800ddba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ddbc:	e009      	b.n	800ddd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ddbe:	f7fc fec1 	bl	800ab44 <HAL_GetTick>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ddcc:	d901      	bls.n	800ddd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e028      	b.n	800de24 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ddd2:	4b16      	ldr	r3, [pc, #88]	; (800de2c <HAL_PWREx_ConfigSupply+0xb0>)
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ddda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddde:	d1ee      	bne.n	800ddbe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2b1e      	cmp	r3, #30
 800dde4:	d008      	beq.n	800ddf8 <HAL_PWREx_ConfigSupply+0x7c>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b2e      	cmp	r3, #46	; 0x2e
 800ddea:	d005      	beq.n	800ddf8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b1d      	cmp	r3, #29
 800ddf0:	d002      	beq.n	800ddf8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2b2d      	cmp	r3, #45	; 0x2d
 800ddf6:	d114      	bne.n	800de22 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800ddf8:	f7fc fea4 	bl	800ab44 <HAL_GetTick>
 800ddfc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ddfe:	e009      	b.n	800de14 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800de00:	f7fc fea0 	bl	800ab44 <HAL_GetTick>
 800de04:	4602      	mov	r2, r0
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	1ad3      	subs	r3, r2, r3
 800de0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de0e:	d901      	bls.n	800de14 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800de10:	2301      	movs	r3, #1
 800de12:	e007      	b.n	800de24 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800de14:	4b05      	ldr	r3, [pc, #20]	; (800de2c <HAL_PWREx_ConfigSupply+0xb0>)
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de20:	d1ee      	bne.n	800de00 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800de22:	2300      	movs	r3, #0
}
 800de24:	4618      	mov	r0, r3
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}
 800de2c:	58024800 	.word	0x58024800

0800de30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b08c      	sub	sp, #48	; 0x30
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d101      	bne.n	800de42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800de3e:	2301      	movs	r3, #1
 800de40:	e3d7      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f003 0301 	and.w	r3, r3, #1
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f000 80b3 	beq.w	800dfb6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de50:	4b90      	ldr	r3, [pc, #576]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800de52:	691b      	ldr	r3, [r3, #16]
 800de54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de58:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800de5a:	4b8e      	ldr	r3, [pc, #568]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800de5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800de60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de62:	2b10      	cmp	r3, #16
 800de64:	d007      	beq.n	800de76 <HAL_RCC_OscConfig+0x46>
 800de66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de68:	2b18      	cmp	r3, #24
 800de6a:	d112      	bne.n	800de92 <HAL_RCC_OscConfig+0x62>
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	f003 0303 	and.w	r3, r3, #3
 800de72:	2b02      	cmp	r3, #2
 800de74:	d10d      	bne.n	800de92 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800de76:	4b87      	ldr	r3, [pc, #540]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 8098 	beq.w	800dfb4 <HAL_RCC_OscConfig+0x184>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f040 8093 	bne.w	800dfb4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800de8e:	2301      	movs	r3, #1
 800de90:	e3af      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de9a:	d106      	bne.n	800deaa <HAL_RCC_OscConfig+0x7a>
 800de9c:	4b7d      	ldr	r3, [pc, #500]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a7c      	ldr	r2, [pc, #496]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800dea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	e058      	b.n	800df5c <HAL_RCC_OscConfig+0x12c>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d112      	bne.n	800ded8 <HAL_RCC_OscConfig+0xa8>
 800deb2:	4b78      	ldr	r3, [pc, #480]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4a77      	ldr	r2, [pc, #476]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800deb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800debc:	6013      	str	r3, [r2, #0]
 800debe:	4b75      	ldr	r3, [pc, #468]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4a74      	ldr	r2, [pc, #464]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800dec4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dec8:	6013      	str	r3, [r2, #0]
 800deca:	4b72      	ldr	r3, [pc, #456]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4a71      	ldr	r2, [pc, #452]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800ded0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ded4:	6013      	str	r3, [r2, #0]
 800ded6:	e041      	b.n	800df5c <HAL_RCC_OscConfig+0x12c>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dee0:	d112      	bne.n	800df08 <HAL_RCC_OscConfig+0xd8>
 800dee2:	4b6c      	ldr	r3, [pc, #432]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4a6b      	ldr	r2, [pc, #428]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800dee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800deec:	6013      	str	r3, [r2, #0]
 800deee:	4b69      	ldr	r3, [pc, #420]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4a68      	ldr	r2, [pc, #416]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800def4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800def8:	6013      	str	r3, [r2, #0]
 800defa:	4b66      	ldr	r3, [pc, #408]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4a65      	ldr	r2, [pc, #404]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df04:	6013      	str	r3, [r2, #0]
 800df06:	e029      	b.n	800df5c <HAL_RCC_OscConfig+0x12c>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800df10:	d112      	bne.n	800df38 <HAL_RCC_OscConfig+0x108>
 800df12:	4b60      	ldr	r3, [pc, #384]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4a5f      	ldr	r2, [pc, #380]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800df1c:	6013      	str	r3, [r2, #0]
 800df1e:	4b5d      	ldr	r3, [pc, #372]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a5c      	ldr	r2, [pc, #368]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df28:	6013      	str	r3, [r2, #0]
 800df2a:	4b5a      	ldr	r3, [pc, #360]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a59      	ldr	r2, [pc, #356]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df34:	6013      	str	r3, [r2, #0]
 800df36:	e011      	b.n	800df5c <HAL_RCC_OscConfig+0x12c>
 800df38:	4b56      	ldr	r3, [pc, #344]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a55      	ldr	r2, [pc, #340]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df42:	6013      	str	r3, [r2, #0]
 800df44:	4b53      	ldr	r3, [pc, #332]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a52      	ldr	r2, [pc, #328]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df4e:	6013      	str	r3, [r2, #0]
 800df50:	4b50      	ldr	r3, [pc, #320]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a4f      	ldr	r2, [pc, #316]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800df5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d013      	beq.n	800df8c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df64:	f7fc fdee 	bl	800ab44 <HAL_GetTick>
 800df68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800df6a:	e008      	b.n	800df7e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800df6c:	f7fc fdea 	bl	800ab44 <HAL_GetTick>
 800df70:	4602      	mov	r2, r0
 800df72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	2b64      	cmp	r3, #100	; 0x64
 800df78:	d901      	bls.n	800df7e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800df7a:	2303      	movs	r3, #3
 800df7c:	e339      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800df7e:	4b45      	ldr	r3, [pc, #276]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df86:	2b00      	cmp	r3, #0
 800df88:	d0f0      	beq.n	800df6c <HAL_RCC_OscConfig+0x13c>
 800df8a:	e014      	b.n	800dfb6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df8c:	f7fc fdda 	bl	800ab44 <HAL_GetTick>
 800df90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800df92:	e008      	b.n	800dfa6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800df94:	f7fc fdd6 	bl	800ab44 <HAL_GetTick>
 800df98:	4602      	mov	r2, r0
 800df9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	2b64      	cmp	r3, #100	; 0x64
 800dfa0:	d901      	bls.n	800dfa6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800dfa2:	2303      	movs	r3, #3
 800dfa4:	e325      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dfa6:	4b3b      	ldr	r3, [pc, #236]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d1f0      	bne.n	800df94 <HAL_RCC_OscConfig+0x164>
 800dfb2:	e000      	b.n	800dfb6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dfb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f003 0302 	and.w	r3, r3, #2
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d070      	beq.n	800e0a4 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dfc2:	4b34      	ldr	r3, [pc, #208]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800dfc4:	691b      	ldr	r3, [r3, #16]
 800dfc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dfcc:	4b31      	ldr	r3, [pc, #196]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800dfce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfd0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800dfd2:	6a3b      	ldr	r3, [r7, #32]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d007      	beq.n	800dfe8 <HAL_RCC_OscConfig+0x1b8>
 800dfd8:	6a3b      	ldr	r3, [r7, #32]
 800dfda:	2b18      	cmp	r3, #24
 800dfdc:	d11b      	bne.n	800e016 <HAL_RCC_OscConfig+0x1e6>
 800dfde:	69fb      	ldr	r3, [r7, #28]
 800dfe0:	f003 0303 	and.w	r3, r3, #3
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d116      	bne.n	800e016 <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dfe8:	4b2a      	ldr	r3, [pc, #168]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f003 0304 	and.w	r3, r3, #4
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d005      	beq.n	800e000 <HAL_RCC_OscConfig+0x1d0>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d101      	bne.n	800e000 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 800dffc:	2301      	movs	r3, #1
 800dffe:	e2f8      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e000:	4b24      	ldr	r3, [pc, #144]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	691b      	ldr	r3, [r3, #16]
 800e00c:	061b      	lsls	r3, r3, #24
 800e00e:	4921      	ldr	r1, [pc, #132]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800e010:	4313      	orrs	r3, r2
 800e012:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e014:	e046      	b.n	800e0a4 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d026      	beq.n	800e06c <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e01e:	4b1d      	ldr	r3, [pc, #116]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f023 0219 	bic.w	r2, r3, #25
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	491a      	ldr	r1, [pc, #104]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800e02c:	4313      	orrs	r3, r2
 800e02e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e030:	f7fc fd88 	bl	800ab44 <HAL_GetTick>
 800e034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e036:	e008      	b.n	800e04a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e038:	f7fc fd84 	bl	800ab44 <HAL_GetTick>
 800e03c:	4602      	mov	r2, r0
 800e03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	2b02      	cmp	r3, #2
 800e044:	d901      	bls.n	800e04a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800e046:	2303      	movs	r3, #3
 800e048:	e2d3      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e04a:	4b12      	ldr	r3, [pc, #72]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f003 0304 	and.w	r3, r3, #4
 800e052:	2b00      	cmp	r3, #0
 800e054:	d0f0      	beq.n	800e038 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e056:	4b0f      	ldr	r3, [pc, #60]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	061b      	lsls	r3, r3, #24
 800e064:	490b      	ldr	r1, [pc, #44]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800e066:	4313      	orrs	r3, r2
 800e068:	604b      	str	r3, [r1, #4]
 800e06a:	e01b      	b.n	800e0a4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e06c:	4b09      	ldr	r3, [pc, #36]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a08      	ldr	r2, [pc, #32]	; (800e094 <HAL_RCC_OscConfig+0x264>)
 800e072:	f023 0301 	bic.w	r3, r3, #1
 800e076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e078:	f7fc fd64 	bl	800ab44 <HAL_GetTick>
 800e07c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e07e:	e00b      	b.n	800e098 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e080:	f7fc fd60 	bl	800ab44 <HAL_GetTick>
 800e084:	4602      	mov	r2, r0
 800e086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e088:	1ad3      	subs	r3, r2, r3
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	d904      	bls.n	800e098 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800e08e:	2303      	movs	r3, #3
 800e090:	e2af      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
 800e092:	bf00      	nop
 800e094:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e098:	4b99      	ldr	r3, [pc, #612]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f003 0304 	and.w	r3, r3, #4
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d1ed      	bne.n	800e080 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f003 0310 	and.w	r3, r3, #16
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d06a      	beq.n	800e186 <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e0b0:	4b93      	ldr	r3, [pc, #588]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e0b2:	691b      	ldr	r3, [r3, #16]
 800e0b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0b8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e0ba:	4b91      	ldr	r3, [pc, #580]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0be:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	2b08      	cmp	r3, #8
 800e0c4:	d007      	beq.n	800e0d6 <HAL_RCC_OscConfig+0x2a6>
 800e0c6:	69bb      	ldr	r3, [r7, #24]
 800e0c8:	2b18      	cmp	r3, #24
 800e0ca:	d11b      	bne.n	800e104 <HAL_RCC_OscConfig+0x2d4>
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	f003 0303 	and.w	r3, r3, #3
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d116      	bne.n	800e104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e0d6:	4b8a      	ldr	r3, [pc, #552]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d005      	beq.n	800e0ee <HAL_RCC_OscConfig+0x2be>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	69db      	ldr	r3, [r3, #28]
 800e0e6:	2b80      	cmp	r3, #128	; 0x80
 800e0e8:	d001      	beq.n	800e0ee <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	e281      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e0ee:	4b84      	ldr	r3, [pc, #528]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a1b      	ldr	r3, [r3, #32]
 800e0fa:	061b      	lsls	r3, r3, #24
 800e0fc:	4980      	ldr	r1, [pc, #512]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e0fe:	4313      	orrs	r3, r2
 800e100:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e102:	e040      	b.n	800e186 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	69db      	ldr	r3, [r3, #28]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d023      	beq.n	800e154 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e10c:	4b7c      	ldr	r3, [pc, #496]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4a7b      	ldr	r2, [pc, #492]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e118:	f7fc fd14 	bl	800ab44 <HAL_GetTick>
 800e11c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e11e:	e008      	b.n	800e132 <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e120:	f7fc fd10 	bl	800ab44 <HAL_GetTick>
 800e124:	4602      	mov	r2, r0
 800e126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e128:	1ad3      	subs	r3, r2, r3
 800e12a:	2b02      	cmp	r3, #2
 800e12c:	d901      	bls.n	800e132 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800e12e:	2303      	movs	r3, #3
 800e130:	e25f      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e132:	4b73      	ldr	r3, [pc, #460]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d0f0      	beq.n	800e120 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e13e:	4b70      	ldr	r3, [pc, #448]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6a1b      	ldr	r3, [r3, #32]
 800e14a:	061b      	lsls	r3, r3, #24
 800e14c:	496c      	ldr	r1, [pc, #432]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e14e:	4313      	orrs	r3, r2
 800e150:	60cb      	str	r3, [r1, #12]
 800e152:	e018      	b.n	800e186 <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e154:	4b6a      	ldr	r3, [pc, #424]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a69      	ldr	r2, [pc, #420]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e15a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e15e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e160:	f7fc fcf0 	bl	800ab44 <HAL_GetTick>
 800e164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e166:	e008      	b.n	800e17a <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e168:	f7fc fcec 	bl	800ab44 <HAL_GetTick>
 800e16c:	4602      	mov	r2, r0
 800e16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e170:	1ad3      	subs	r3, r2, r3
 800e172:	2b02      	cmp	r3, #2
 800e174:	d901      	bls.n	800e17a <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 800e176:	2303      	movs	r3, #3
 800e178:	e23b      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e17a:	4b61      	ldr	r3, [pc, #388]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e182:	2b00      	cmp	r3, #0
 800e184:	d1f0      	bne.n	800e168 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f003 0308 	and.w	r3, r3, #8
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d036      	beq.n	800e200 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	695b      	ldr	r3, [r3, #20]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d019      	beq.n	800e1ce <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e19a:	4b59      	ldr	r3, [pc, #356]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e19c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e19e:	4a58      	ldr	r2, [pc, #352]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e1a0:	f043 0301 	orr.w	r3, r3, #1
 800e1a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e1a6:	f7fc fccd 	bl	800ab44 <HAL_GetTick>
 800e1aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e1ac:	e008      	b.n	800e1c0 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e1ae:	f7fc fcc9 	bl	800ab44 <HAL_GetTick>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	1ad3      	subs	r3, r2, r3
 800e1b8:	2b02      	cmp	r3, #2
 800e1ba:	d901      	bls.n	800e1c0 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 800e1bc:	2303      	movs	r3, #3
 800e1be:	e218      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e1c0:	4b4f      	ldr	r3, [pc, #316]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e1c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1c4:	f003 0302 	and.w	r3, r3, #2
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d0f0      	beq.n	800e1ae <HAL_RCC_OscConfig+0x37e>
 800e1cc:	e018      	b.n	800e200 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e1ce:	4b4c      	ldr	r3, [pc, #304]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e1d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1d2:	4a4b      	ldr	r2, [pc, #300]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e1d4:	f023 0301 	bic.w	r3, r3, #1
 800e1d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e1da:	f7fc fcb3 	bl	800ab44 <HAL_GetTick>
 800e1de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e1e0:	e008      	b.n	800e1f4 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e1e2:	f7fc fcaf 	bl	800ab44 <HAL_GetTick>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ea:	1ad3      	subs	r3, r2, r3
 800e1ec:	2b02      	cmp	r3, #2
 800e1ee:	d901      	bls.n	800e1f4 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 800e1f0:	2303      	movs	r3, #3
 800e1f2:	e1fe      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e1f4:	4b42      	ldr	r3, [pc, #264]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e1f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1f8:	f003 0302 	and.w	r3, r3, #2
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1f0      	bne.n	800e1e2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f003 0320 	and.w	r3, r3, #32
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d036      	beq.n	800e27a <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	699b      	ldr	r3, [r3, #24]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d019      	beq.n	800e248 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e214:	4b3a      	ldr	r3, [pc, #232]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a39      	ldr	r2, [pc, #228]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e21a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e21e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e220:	f7fc fc90 	bl	800ab44 <HAL_GetTick>
 800e224:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e226:	e008      	b.n	800e23a <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800e228:	f7fc fc8c 	bl	800ab44 <HAL_GetTick>
 800e22c:	4602      	mov	r2, r0
 800e22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	2b02      	cmp	r3, #2
 800e234:	d901      	bls.n	800e23a <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 800e236:	2303      	movs	r3, #3
 800e238:	e1db      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e23a:	4b31      	ldr	r3, [pc, #196]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e242:	2b00      	cmp	r3, #0
 800e244:	d0f0      	beq.n	800e228 <HAL_RCC_OscConfig+0x3f8>
 800e246:	e018      	b.n	800e27a <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e248:	4b2d      	ldr	r3, [pc, #180]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a2c      	ldr	r2, [pc, #176]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e24e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e252:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e254:	f7fc fc76 	bl	800ab44 <HAL_GetTick>
 800e258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e25a:	e008      	b.n	800e26e <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800e25c:	f7fc fc72 	bl	800ab44 <HAL_GetTick>
 800e260:	4602      	mov	r2, r0
 800e262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	2b02      	cmp	r3, #2
 800e268:	d901      	bls.n	800e26e <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 800e26a:	2303      	movs	r3, #3
 800e26c:	e1c1      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e26e:	4b24      	ldr	r3, [pc, #144]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1f0      	bne.n	800e25c <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f003 0304 	and.w	r3, r3, #4
 800e282:	2b00      	cmp	r3, #0
 800e284:	f000 80af 	beq.w	800e3e6 <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e288:	4b1e      	ldr	r3, [pc, #120]	; (800e304 <HAL_RCC_OscConfig+0x4d4>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a1d      	ldr	r2, [pc, #116]	; (800e304 <HAL_RCC_OscConfig+0x4d4>)
 800e28e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e292:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e294:	f7fc fc56 	bl	800ab44 <HAL_GetTick>
 800e298:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e29a:	e008      	b.n	800e2ae <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e29c:	f7fc fc52 	bl	800ab44 <HAL_GetTick>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a4:	1ad3      	subs	r3, r2, r3
 800e2a6:	2b64      	cmp	r3, #100	; 0x64
 800e2a8:	d901      	bls.n	800e2ae <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 800e2aa:	2303      	movs	r3, #3
 800e2ac:	e1a1      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e2ae:	4b15      	ldr	r3, [pc, #84]	; (800e304 <HAL_RCC_OscConfig+0x4d4>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d0f0      	beq.n	800e29c <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d106      	bne.n	800e2d0 <HAL_RCC_OscConfig+0x4a0>
 800e2c2:	4b0f      	ldr	r3, [pc, #60]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e2c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2c6:	4a0e      	ldr	r2, [pc, #56]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e2c8:	f043 0301 	orr.w	r3, r3, #1
 800e2cc:	6713      	str	r3, [r2, #112]	; 0x70
 800e2ce:	e05b      	b.n	800e388 <HAL_RCC_OscConfig+0x558>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	689b      	ldr	r3, [r3, #8]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d117      	bne.n	800e308 <HAL_RCC_OscConfig+0x4d8>
 800e2d8:	4b09      	ldr	r3, [pc, #36]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e2da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2dc:	4a08      	ldr	r2, [pc, #32]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e2de:	f023 0301 	bic.w	r3, r3, #1
 800e2e2:	6713      	str	r3, [r2, #112]	; 0x70
 800e2e4:	4b06      	ldr	r3, [pc, #24]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2e8:	4a05      	ldr	r2, [pc, #20]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e2ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2ee:	6713      	str	r3, [r2, #112]	; 0x70
 800e2f0:	4b03      	ldr	r3, [pc, #12]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2f4:	4a02      	ldr	r2, [pc, #8]	; (800e300 <HAL_RCC_OscConfig+0x4d0>)
 800e2f6:	f023 0304 	bic.w	r3, r3, #4
 800e2fa:	6713      	str	r3, [r2, #112]	; 0x70
 800e2fc:	e044      	b.n	800e388 <HAL_RCC_OscConfig+0x558>
 800e2fe:	bf00      	nop
 800e300:	58024400 	.word	0x58024400
 800e304:	58024800 	.word	0x58024800
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	689b      	ldr	r3, [r3, #8]
 800e30c:	2b05      	cmp	r3, #5
 800e30e:	d112      	bne.n	800e336 <HAL_RCC_OscConfig+0x506>
 800e310:	4b95      	ldr	r3, [pc, #596]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e314:	4a94      	ldr	r2, [pc, #592]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e316:	f043 0304 	orr.w	r3, r3, #4
 800e31a:	6713      	str	r3, [r2, #112]	; 0x70
 800e31c:	4b92      	ldr	r3, [pc, #584]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e31e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e320:	4a91      	ldr	r2, [pc, #580]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e326:	6713      	str	r3, [r2, #112]	; 0x70
 800e328:	4b8f      	ldr	r3, [pc, #572]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e32a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e32c:	4a8e      	ldr	r2, [pc, #568]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e32e:	f043 0301 	orr.w	r3, r3, #1
 800e332:	6713      	str	r3, [r2, #112]	; 0x70
 800e334:	e028      	b.n	800e388 <HAL_RCC_OscConfig+0x558>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	689b      	ldr	r3, [r3, #8]
 800e33a:	2b85      	cmp	r3, #133	; 0x85
 800e33c:	d112      	bne.n	800e364 <HAL_RCC_OscConfig+0x534>
 800e33e:	4b8a      	ldr	r3, [pc, #552]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e342:	4a89      	ldr	r2, [pc, #548]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e344:	f043 0304 	orr.w	r3, r3, #4
 800e348:	6713      	str	r3, [r2, #112]	; 0x70
 800e34a:	4b87      	ldr	r3, [pc, #540]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e34e:	4a86      	ldr	r2, [pc, #536]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e354:	6713      	str	r3, [r2, #112]	; 0x70
 800e356:	4b84      	ldr	r3, [pc, #528]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e35a:	4a83      	ldr	r2, [pc, #524]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e35c:	f043 0301 	orr.w	r3, r3, #1
 800e360:	6713      	str	r3, [r2, #112]	; 0x70
 800e362:	e011      	b.n	800e388 <HAL_RCC_OscConfig+0x558>
 800e364:	4b80      	ldr	r3, [pc, #512]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e368:	4a7f      	ldr	r2, [pc, #508]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e36a:	f023 0301 	bic.w	r3, r3, #1
 800e36e:	6713      	str	r3, [r2, #112]	; 0x70
 800e370:	4b7d      	ldr	r3, [pc, #500]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e374:	4a7c      	ldr	r2, [pc, #496]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e376:	f023 0304 	bic.w	r3, r3, #4
 800e37a:	6713      	str	r3, [r2, #112]	; 0x70
 800e37c:	4b7a      	ldr	r3, [pc, #488]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e37e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e380:	4a79      	ldr	r2, [pc, #484]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e386:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	689b      	ldr	r3, [r3, #8]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d015      	beq.n	800e3bc <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e390:	f7fc fbd8 	bl	800ab44 <HAL_GetTick>
 800e394:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e396:	e00a      	b.n	800e3ae <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e398:	f7fc fbd4 	bl	800ab44 <HAL_GetTick>
 800e39c:	4602      	mov	r2, r0
 800e39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a0:	1ad3      	subs	r3, r2, r3
 800e3a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d901      	bls.n	800e3ae <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800e3aa:	2303      	movs	r3, #3
 800e3ac:	e121      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e3ae:	4b6e      	ldr	r3, [pc, #440]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3b2:	f003 0302 	and.w	r3, r3, #2
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d0ee      	beq.n	800e398 <HAL_RCC_OscConfig+0x568>
 800e3ba:	e014      	b.n	800e3e6 <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e3bc:	f7fc fbc2 	bl	800ab44 <HAL_GetTick>
 800e3c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e3c2:	e00a      	b.n	800e3da <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e3c4:	f7fc fbbe 	bl	800ab44 <HAL_GetTick>
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d901      	bls.n	800e3da <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800e3d6:	2303      	movs	r3, #3
 800e3d8:	e10b      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e3da:	4b63      	ldr	r3, [pc, #396]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3de:	f003 0302 	and.w	r3, r3, #2
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d1ee      	bne.n	800e3c4 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	f000 8100 	beq.w	800e5f0 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e3f0:	4b5d      	ldr	r3, [pc, #372]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e3f8:	2b18      	cmp	r3, #24
 800e3fa:	f000 80bb 	beq.w	800e574 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e402:	2b02      	cmp	r3, #2
 800e404:	f040 8095 	bne.w	800e532 <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e408:	4b57      	ldr	r3, [pc, #348]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4a56      	ldr	r2, [pc, #344]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e40e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e414:	f7fc fb96 	bl	800ab44 <HAL_GetTick>
 800e418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e41a:	e008      	b.n	800e42e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e41c:	f7fc fb92 	bl	800ab44 <HAL_GetTick>
 800e420:	4602      	mov	r2, r0
 800e422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e424:	1ad3      	subs	r3, r2, r3
 800e426:	2b02      	cmp	r3, #2
 800e428:	d901      	bls.n	800e42e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800e42a:	2303      	movs	r3, #3
 800e42c:	e0e1      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e42e:	4b4e      	ldr	r3, [pc, #312]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1f0      	bne.n	800e41c <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e43a:	4b4b      	ldr	r3, [pc, #300]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e43c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e43e:	4b4b      	ldr	r3, [pc, #300]	; (800e56c <HAL_RCC_OscConfig+0x73c>)
 800e440:	4013      	ands	r3, r2
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e44a:	0112      	lsls	r2, r2, #4
 800e44c:	430a      	orrs	r2, r1
 800e44e:	4946      	ldr	r1, [pc, #280]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e450:	4313      	orrs	r3, r2
 800e452:	628b      	str	r3, [r1, #40]	; 0x28
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e458:	3b01      	subs	r3, #1
 800e45a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e462:	3b01      	subs	r3, #1
 800e464:	025b      	lsls	r3, r3, #9
 800e466:	b29b      	uxth	r3, r3
 800e468:	431a      	orrs	r2, r3
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e46e:	3b01      	subs	r3, #1
 800e470:	041b      	lsls	r3, r3, #16
 800e472:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e476:	431a      	orrs	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e47c:	3b01      	subs	r3, #1
 800e47e:	061b      	lsls	r3, r3, #24
 800e480:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e484:	4938      	ldr	r1, [pc, #224]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e486:	4313      	orrs	r3, r2
 800e488:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800e48a:	4b37      	ldr	r3, [pc, #220]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e48e:	4a36      	ldr	r2, [pc, #216]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e490:	f023 0301 	bic.w	r3, r3, #1
 800e494:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e496:	4b34      	ldr	r3, [pc, #208]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e49a:	4b35      	ldr	r3, [pc, #212]	; (800e570 <HAL_RCC_OscConfig+0x740>)
 800e49c:	4013      	ands	r3, r2
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e4a2:	00d2      	lsls	r2, r2, #3
 800e4a4:	4930      	ldr	r1, [pc, #192]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e4aa:	4b2f      	ldr	r3, [pc, #188]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ae:	f023 020c 	bic.w	r2, r3, #12
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4b6:	492c      	ldr	r1, [pc, #176]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e4bc:	4b2a      	ldr	r3, [pc, #168]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c0:	f023 0202 	bic.w	r2, r3, #2
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4c8:	4927      	ldr	r1, [pc, #156]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e4ce:	4b26      	ldr	r3, [pc, #152]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4d2:	4a25      	ldr	r2, [pc, #148]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e4d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4da:	4b23      	ldr	r3, [pc, #140]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4de:	4a22      	ldr	r2, [pc, #136]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e4e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e4e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e4e6:	4b20      	ldr	r3, [pc, #128]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ea:	4a1f      	ldr	r2, [pc, #124]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e4ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e4f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800e4f2:	4b1d      	ldr	r3, [pc, #116]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4f6:	4a1c      	ldr	r2, [pc, #112]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e4f8:	f043 0301 	orr.w	r3, r3, #1
 800e4fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e4fe:	4b1a      	ldr	r3, [pc, #104]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a19      	ldr	r2, [pc, #100]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e50a:	f7fc fb1b 	bl	800ab44 <HAL_GetTick>
 800e50e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e510:	e008      	b.n	800e524 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e512:	f7fc fb17 	bl	800ab44 <HAL_GetTick>
 800e516:	4602      	mov	r2, r0
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51a:	1ad3      	subs	r3, r2, r3
 800e51c:	2b02      	cmp	r3, #2
 800e51e:	d901      	bls.n	800e524 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 800e520:	2303      	movs	r3, #3
 800e522:	e066      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e524:	4b10      	ldr	r3, [pc, #64]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d0f0      	beq.n	800e512 <HAL_RCC_OscConfig+0x6e2>
 800e530:	e05e      	b.n	800e5f0 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e532:	4b0d      	ldr	r3, [pc, #52]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4a0c      	ldr	r2, [pc, #48]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e538:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e53c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e53e:	f7fc fb01 	bl	800ab44 <HAL_GetTick>
 800e542:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e544:	e008      	b.n	800e558 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e546:	f7fc fafd 	bl	800ab44 <HAL_GetTick>
 800e54a:	4602      	mov	r2, r0
 800e54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54e:	1ad3      	subs	r3, r2, r3
 800e550:	2b02      	cmp	r3, #2
 800e552:	d901      	bls.n	800e558 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 800e554:	2303      	movs	r3, #3
 800e556:	e04c      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e558:	4b03      	ldr	r3, [pc, #12]	; (800e568 <HAL_RCC_OscConfig+0x738>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e560:	2b00      	cmp	r3, #0
 800e562:	d1f0      	bne.n	800e546 <HAL_RCC_OscConfig+0x716>
 800e564:	e044      	b.n	800e5f0 <HAL_RCC_OscConfig+0x7c0>
 800e566:	bf00      	nop
 800e568:	58024400 	.word	0x58024400
 800e56c:	fffffc0c 	.word	0xfffffc0c
 800e570:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e574:	4b21      	ldr	r3, [pc, #132]	; (800e5fc <HAL_RCC_OscConfig+0x7cc>)
 800e576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e578:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e57a:	4b20      	ldr	r3, [pc, #128]	; (800e5fc <HAL_RCC_OscConfig+0x7cc>)
 800e57c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e57e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e584:	2b01      	cmp	r3, #1
 800e586:	d031      	beq.n	800e5ec <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	f003 0203 	and.w	r2, r3, #3
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e592:	429a      	cmp	r2, r3
 800e594:	d12a      	bne.n	800e5ec <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	091b      	lsrs	r3, r3, #4
 800e59a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d122      	bne.n	800e5ec <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d11a      	bne.n	800e5ec <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	0a5b      	lsrs	r3, r3, #9
 800e5ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5c2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d111      	bne.n	800e5ec <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	0c1b      	lsrs	r3, r3, #16
 800e5cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d108      	bne.n	800e5ec <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	0e1b      	lsrs	r3, r3, #24
 800e5de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d001      	beq.n	800e5f0 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e000      	b.n	800e5f2 <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3730      	adds	r7, #48	; 0x30
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	58024400 	.word	0x58024400

0800e600 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b086      	sub	sp, #24
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d101      	bne.n	800e614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e610:	2301      	movs	r3, #1
 800e612:	e19c      	b.n	800e94e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e614:	4b8a      	ldr	r3, [pc, #552]	; (800e840 <HAL_RCC_ClockConfig+0x240>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f003 030f 	and.w	r3, r3, #15
 800e61c:	683a      	ldr	r2, [r7, #0]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d910      	bls.n	800e644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e622:	4b87      	ldr	r3, [pc, #540]	; (800e840 <HAL_RCC_ClockConfig+0x240>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f023 020f 	bic.w	r2, r3, #15
 800e62a:	4985      	ldr	r1, [pc, #532]	; (800e840 <HAL_RCC_ClockConfig+0x240>)
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	4313      	orrs	r3, r2
 800e630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e632:	4b83      	ldr	r3, [pc, #524]	; (800e840 <HAL_RCC_ClockConfig+0x240>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f003 030f 	and.w	r3, r3, #15
 800e63a:	683a      	ldr	r2, [r7, #0]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d001      	beq.n	800e644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e640:	2301      	movs	r3, #1
 800e642:	e184      	b.n	800e94e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f003 0304 	and.w	r3, r3, #4
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d010      	beq.n	800e672 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	691a      	ldr	r2, [r3, #16]
 800e654:	4b7b      	ldr	r3, [pc, #492]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e656:	699b      	ldr	r3, [r3, #24]
 800e658:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d908      	bls.n	800e672 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e660:	4b78      	ldr	r3, [pc, #480]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e662:	699b      	ldr	r3, [r3, #24]
 800e664:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	691b      	ldr	r3, [r3, #16]
 800e66c:	4975      	ldr	r1, [pc, #468]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e66e:	4313      	orrs	r3, r2
 800e670:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f003 0308 	and.w	r3, r3, #8
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d010      	beq.n	800e6a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	695a      	ldr	r2, [r3, #20]
 800e682:	4b70      	ldr	r3, [pc, #448]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e684:	69db      	ldr	r3, [r3, #28]
 800e686:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d908      	bls.n	800e6a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e68e:	4b6d      	ldr	r3, [pc, #436]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e690:	69db      	ldr	r3, [r3, #28]
 800e692:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	695b      	ldr	r3, [r3, #20]
 800e69a:	496a      	ldr	r1, [pc, #424]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e69c:	4313      	orrs	r3, r2
 800e69e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f003 0310 	and.w	r3, r3, #16
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d010      	beq.n	800e6ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	699a      	ldr	r2, [r3, #24]
 800e6b0:	4b64      	ldr	r3, [pc, #400]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e6b2:	69db      	ldr	r3, [r3, #28]
 800e6b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d908      	bls.n	800e6ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e6bc:	4b61      	ldr	r3, [pc, #388]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e6be:	69db      	ldr	r3, [r3, #28]
 800e6c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	699b      	ldr	r3, [r3, #24]
 800e6c8:	495e      	ldr	r1, [pc, #376]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f003 0320 	and.w	r3, r3, #32
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d010      	beq.n	800e6fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	69da      	ldr	r2, [r3, #28]
 800e6de:	4b59      	ldr	r3, [pc, #356]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e6e0:	6a1b      	ldr	r3, [r3, #32]
 800e6e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d908      	bls.n	800e6fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800e6ea:	4b56      	ldr	r3, [pc, #344]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e6ec:	6a1b      	ldr	r3, [r3, #32]
 800e6ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	69db      	ldr	r3, [r3, #28]
 800e6f6:	4953      	ldr	r1, [pc, #332]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f003 0302 	and.w	r3, r3, #2
 800e704:	2b00      	cmp	r3, #0
 800e706:	d010      	beq.n	800e72a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	68da      	ldr	r2, [r3, #12]
 800e70c:	4b4d      	ldr	r3, [pc, #308]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e70e:	699b      	ldr	r3, [r3, #24]
 800e710:	f003 030f 	and.w	r3, r3, #15
 800e714:	429a      	cmp	r2, r3
 800e716:	d908      	bls.n	800e72a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e718:	4b4a      	ldr	r3, [pc, #296]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e71a:	699b      	ldr	r3, [r3, #24]
 800e71c:	f023 020f 	bic.w	r2, r3, #15
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	68db      	ldr	r3, [r3, #12]
 800e724:	4947      	ldr	r1, [pc, #284]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e726:	4313      	orrs	r3, r2
 800e728:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f003 0301 	and.w	r3, r3, #1
 800e732:	2b00      	cmp	r3, #0
 800e734:	d055      	beq.n	800e7e2 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e736:	4b43      	ldr	r3, [pc, #268]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e738:	699b      	ldr	r3, [r3, #24]
 800e73a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	689b      	ldr	r3, [r3, #8]
 800e742:	4940      	ldr	r1, [pc, #256]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e744:	4313      	orrs	r3, r2
 800e746:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	2b02      	cmp	r3, #2
 800e74e:	d107      	bne.n	800e760 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e750:	4b3c      	ldr	r3, [pc, #240]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d121      	bne.n	800e7a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800e75c:	2301      	movs	r3, #1
 800e75e:	e0f6      	b.n	800e94e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	2b03      	cmp	r3, #3
 800e766:	d107      	bne.n	800e778 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e768:	4b36      	ldr	r3, [pc, #216]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e770:	2b00      	cmp	r3, #0
 800e772:	d115      	bne.n	800e7a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800e774:	2301      	movs	r3, #1
 800e776:	e0ea      	b.n	800e94e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d107      	bne.n	800e790 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e780:	4b30      	ldr	r3, [pc, #192]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d109      	bne.n	800e7a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800e78c:	2301      	movs	r3, #1
 800e78e:	e0de      	b.n	800e94e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e790:	4b2c      	ldr	r3, [pc, #176]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f003 0304 	and.w	r3, r3, #4
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d101      	bne.n	800e7a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800e79c:	2301      	movs	r3, #1
 800e79e:	e0d6      	b.n	800e94e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e7a0:	4b28      	ldr	r3, [pc, #160]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e7a2:	691b      	ldr	r3, [r3, #16]
 800e7a4:	f023 0207 	bic.w	r2, r3, #7
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	4925      	ldr	r1, [pc, #148]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e7b2:	f7fc f9c7 	bl	800ab44 <HAL_GetTick>
 800e7b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e7b8:	e00a      	b.n	800e7d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e7ba:	f7fc f9c3 	bl	800ab44 <HAL_GetTick>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	1ad3      	subs	r3, r2, r3
 800e7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d901      	bls.n	800e7d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800e7cc:	2303      	movs	r3, #3
 800e7ce:	e0be      	b.n	800e94e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e7d0:	4b1c      	ldr	r3, [pc, #112]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	00db      	lsls	r3, r3, #3
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d1eb      	bne.n	800e7ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f003 0302 	and.w	r3, r3, #2
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d010      	beq.n	800e810 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	68da      	ldr	r2, [r3, #12]
 800e7f2:	4b14      	ldr	r3, [pc, #80]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e7f4:	699b      	ldr	r3, [r3, #24]
 800e7f6:	f003 030f 	and.w	r3, r3, #15
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d208      	bcs.n	800e810 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e7fe:	4b11      	ldr	r3, [pc, #68]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e800:	699b      	ldr	r3, [r3, #24]
 800e802:	f023 020f 	bic.w	r2, r3, #15
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	68db      	ldr	r3, [r3, #12]
 800e80a:	490e      	ldr	r1, [pc, #56]	; (800e844 <HAL_RCC_ClockConfig+0x244>)
 800e80c:	4313      	orrs	r3, r2
 800e80e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e810:	4b0b      	ldr	r3, [pc, #44]	; (800e840 <HAL_RCC_ClockConfig+0x240>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f003 030f 	and.w	r3, r3, #15
 800e818:	683a      	ldr	r2, [r7, #0]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d214      	bcs.n	800e848 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e81e:	4b08      	ldr	r3, [pc, #32]	; (800e840 <HAL_RCC_ClockConfig+0x240>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f023 020f 	bic.w	r2, r3, #15
 800e826:	4906      	ldr	r1, [pc, #24]	; (800e840 <HAL_RCC_ClockConfig+0x240>)
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	4313      	orrs	r3, r2
 800e82c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e82e:	4b04      	ldr	r3, [pc, #16]	; (800e840 <HAL_RCC_ClockConfig+0x240>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f003 030f 	and.w	r3, r3, #15
 800e836:	683a      	ldr	r2, [r7, #0]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d005      	beq.n	800e848 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e83c:	2301      	movs	r3, #1
 800e83e:	e086      	b.n	800e94e <HAL_RCC_ClockConfig+0x34e>
 800e840:	52002000 	.word	0x52002000
 800e844:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f003 0304 	and.w	r3, r3, #4
 800e850:	2b00      	cmp	r3, #0
 800e852:	d010      	beq.n	800e876 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	691a      	ldr	r2, [r3, #16]
 800e858:	4b3f      	ldr	r3, [pc, #252]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e85a:	699b      	ldr	r3, [r3, #24]
 800e85c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e860:	429a      	cmp	r2, r3
 800e862:	d208      	bcs.n	800e876 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e864:	4b3c      	ldr	r3, [pc, #240]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e866:	699b      	ldr	r3, [r3, #24]
 800e868:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	691b      	ldr	r3, [r3, #16]
 800e870:	4939      	ldr	r1, [pc, #228]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e872:	4313      	orrs	r3, r2
 800e874:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f003 0308 	and.w	r3, r3, #8
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d010      	beq.n	800e8a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	695a      	ldr	r2, [r3, #20]
 800e886:	4b34      	ldr	r3, [pc, #208]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e888:	69db      	ldr	r3, [r3, #28]
 800e88a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e88e:	429a      	cmp	r2, r3
 800e890:	d208      	bcs.n	800e8a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e892:	4b31      	ldr	r3, [pc, #196]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e894:	69db      	ldr	r3, [r3, #28]
 800e896:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	695b      	ldr	r3, [r3, #20]
 800e89e:	492e      	ldr	r1, [pc, #184]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f003 0310 	and.w	r3, r3, #16
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d010      	beq.n	800e8d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	699a      	ldr	r2, [r3, #24]
 800e8b4:	4b28      	ldr	r3, [pc, #160]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e8b6:	69db      	ldr	r3, [r3, #28]
 800e8b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d208      	bcs.n	800e8d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e8c0:	4b25      	ldr	r3, [pc, #148]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e8c2:	69db      	ldr	r3, [r3, #28]
 800e8c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	699b      	ldr	r3, [r3, #24]
 800e8cc:	4922      	ldr	r1, [pc, #136]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e8ce:	4313      	orrs	r3, r2
 800e8d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f003 0320 	and.w	r3, r3, #32
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d010      	beq.n	800e900 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	69da      	ldr	r2, [r3, #28]
 800e8e2:	4b1d      	ldr	r3, [pc, #116]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e8e4:	6a1b      	ldr	r3, [r3, #32]
 800e8e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d208      	bcs.n	800e900 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800e8ee:	4b1a      	ldr	r3, [pc, #104]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e8f0:	6a1b      	ldr	r3, [r3, #32]
 800e8f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	69db      	ldr	r3, [r3, #28]
 800e8fa:	4917      	ldr	r1, [pc, #92]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800e900:	f000 f834 	bl	800e96c <HAL_RCC_GetSysClockFreq>
 800e904:	4602      	mov	r2, r0
 800e906:	4b14      	ldr	r3, [pc, #80]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e908:	699b      	ldr	r3, [r3, #24]
 800e90a:	0a1b      	lsrs	r3, r3, #8
 800e90c:	f003 030f 	and.w	r3, r3, #15
 800e910:	4912      	ldr	r1, [pc, #72]	; (800e95c <HAL_RCC_ClockConfig+0x35c>)
 800e912:	5ccb      	ldrb	r3, [r1, r3]
 800e914:	f003 031f 	and.w	r3, r3, #31
 800e918:	fa22 f303 	lsr.w	r3, r2, r3
 800e91c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800e91e:	4b0e      	ldr	r3, [pc, #56]	; (800e958 <HAL_RCC_ClockConfig+0x358>)
 800e920:	699b      	ldr	r3, [r3, #24]
 800e922:	f003 030f 	and.w	r3, r3, #15
 800e926:	4a0d      	ldr	r2, [pc, #52]	; (800e95c <HAL_RCC_ClockConfig+0x35c>)
 800e928:	5cd3      	ldrb	r3, [r2, r3]
 800e92a:	f003 031f 	and.w	r3, r3, #31
 800e92e:	693a      	ldr	r2, [r7, #16]
 800e930:	fa22 f303 	lsr.w	r3, r2, r3
 800e934:	4a0a      	ldr	r2, [pc, #40]	; (800e960 <HAL_RCC_ClockConfig+0x360>)
 800e936:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e938:	4a0a      	ldr	r2, [pc, #40]	; (800e964 <HAL_RCC_ClockConfig+0x364>)
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800e93e:	4b0a      	ldr	r3, [pc, #40]	; (800e968 <HAL_RCC_ClockConfig+0x368>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4618      	mov	r0, r3
 800e944:	f7f4 fdda 	bl	80034fc <HAL_InitTick>
 800e948:	4603      	mov	r3, r0
 800e94a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3718      	adds	r7, #24
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	58024400 	.word	0x58024400
 800e95c:	08028798 	.word	0x08028798
 800e960:	24000040 	.word	0x24000040
 800e964:	2400003c 	.word	0x2400003c
 800e968:	24000044 	.word	0x24000044

0800e96c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b089      	sub	sp, #36	; 0x24
 800e970:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e972:	4bb3      	ldr	r3, [pc, #716]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e974:	691b      	ldr	r3, [r3, #16]
 800e976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e97a:	2b18      	cmp	r3, #24
 800e97c:	f200 8155 	bhi.w	800ec2a <HAL_RCC_GetSysClockFreq+0x2be>
 800e980:	a201      	add	r2, pc, #4	; (adr r2, 800e988 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e986:	bf00      	nop
 800e988:	0800e9ed 	.word	0x0800e9ed
 800e98c:	0800ec2b 	.word	0x0800ec2b
 800e990:	0800ec2b 	.word	0x0800ec2b
 800e994:	0800ec2b 	.word	0x0800ec2b
 800e998:	0800ec2b 	.word	0x0800ec2b
 800e99c:	0800ec2b 	.word	0x0800ec2b
 800e9a0:	0800ec2b 	.word	0x0800ec2b
 800e9a4:	0800ec2b 	.word	0x0800ec2b
 800e9a8:	0800ea13 	.word	0x0800ea13
 800e9ac:	0800ec2b 	.word	0x0800ec2b
 800e9b0:	0800ec2b 	.word	0x0800ec2b
 800e9b4:	0800ec2b 	.word	0x0800ec2b
 800e9b8:	0800ec2b 	.word	0x0800ec2b
 800e9bc:	0800ec2b 	.word	0x0800ec2b
 800e9c0:	0800ec2b 	.word	0x0800ec2b
 800e9c4:	0800ec2b 	.word	0x0800ec2b
 800e9c8:	0800ea19 	.word	0x0800ea19
 800e9cc:	0800ec2b 	.word	0x0800ec2b
 800e9d0:	0800ec2b 	.word	0x0800ec2b
 800e9d4:	0800ec2b 	.word	0x0800ec2b
 800e9d8:	0800ec2b 	.word	0x0800ec2b
 800e9dc:	0800ec2b 	.word	0x0800ec2b
 800e9e0:	0800ec2b 	.word	0x0800ec2b
 800e9e4:	0800ec2b 	.word	0x0800ec2b
 800e9e8:	0800ea1f 	.word	0x0800ea1f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9ec:	4b94      	ldr	r3, [pc, #592]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f003 0320 	and.w	r3, r3, #32
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d009      	beq.n	800ea0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e9f8:	4b91      	ldr	r3, [pc, #580]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	08db      	lsrs	r3, r3, #3
 800e9fe:	f003 0303 	and.w	r3, r3, #3
 800ea02:	4a90      	ldr	r2, [pc, #576]	; (800ec44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ea04:	fa22 f303 	lsr.w	r3, r2, r3
 800ea08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ea0a:	e111      	b.n	800ec30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ea0c:	4b8d      	ldr	r3, [pc, #564]	; (800ec44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ea0e:	61bb      	str	r3, [r7, #24]
    break;
 800ea10:	e10e      	b.n	800ec30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ea12:	4b8d      	ldr	r3, [pc, #564]	; (800ec48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ea14:	61bb      	str	r3, [r7, #24]
    break;
 800ea16:	e10b      	b.n	800ec30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ea18:	4b8c      	ldr	r3, [pc, #560]	; (800ec4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ea1a:	61bb      	str	r3, [r7, #24]
    break;
 800ea1c:	e108      	b.n	800ec30 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ea1e:	4b88      	ldr	r3, [pc, #544]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea22:	f003 0303 	and.w	r3, r3, #3
 800ea26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ea28:	4b85      	ldr	r3, [pc, #532]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea2c:	091b      	lsrs	r3, r3, #4
 800ea2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ea34:	4b82      	ldr	r3, [pc, #520]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea38:	f003 0301 	and.w	r3, r3, #1
 800ea3c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ea3e:	4b80      	ldr	r3, [pc, #512]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea42:	08db      	lsrs	r3, r3, #3
 800ea44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea48:	68fa      	ldr	r2, [r7, #12]
 800ea4a:	fb02 f303 	mul.w	r3, r2, r3
 800ea4e:	ee07 3a90 	vmov	s15, r3
 800ea52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea56:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f000 80e1 	beq.w	800ec24 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	2b02      	cmp	r3, #2
 800ea66:	f000 8083 	beq.w	800eb70 <HAL_RCC_GetSysClockFreq+0x204>
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	2b02      	cmp	r3, #2
 800ea6e:	f200 80a1 	bhi.w	800ebb4 <HAL_RCC_GetSysClockFreq+0x248>
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d003      	beq.n	800ea80 <HAL_RCC_GetSysClockFreq+0x114>
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d056      	beq.n	800eb2c <HAL_RCC_GetSysClockFreq+0x1c0>
 800ea7e:	e099      	b.n	800ebb4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea80:	4b6f      	ldr	r3, [pc, #444]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f003 0320 	and.w	r3, r3, #32
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d02d      	beq.n	800eae8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ea8c:	4b6c      	ldr	r3, [pc, #432]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	08db      	lsrs	r3, r3, #3
 800ea92:	f003 0303 	and.w	r3, r3, #3
 800ea96:	4a6b      	ldr	r2, [pc, #428]	; (800ec44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ea98:	fa22 f303 	lsr.w	r3, r2, r3
 800ea9c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	ee07 3a90 	vmov	s15, r3
 800eaa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	ee07 3a90 	vmov	s15, r3
 800eaae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eab6:	4b62      	ldr	r3, [pc, #392]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eabe:	ee07 3a90 	vmov	s15, r3
 800eac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eac6:	ed97 6a02 	vldr	s12, [r7, #8]
 800eaca:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ec50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800eace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ead2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ead6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eae2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800eae6:	e087      	b.n	800ebf8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	ee07 3a90 	vmov	s15, r3
 800eaee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaf2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ec54 <HAL_RCC_GetSysClockFreq+0x2e8>
 800eaf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eafa:	4b51      	ldr	r3, [pc, #324]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb02:	ee07 3a90 	vmov	s15, r3
 800eb06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800eb0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ec50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800eb12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eb2a:	e065      	b.n	800ebf8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	ee07 3a90 	vmov	s15, r3
 800eb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb36:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ec58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800eb3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb3e:	4b40      	ldr	r3, [pc, #256]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb46:	ee07 3a90 	vmov	s15, r3
 800eb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800eb52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ec50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800eb56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eb6e:	e043      	b.n	800ebf8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	ee07 3a90 	vmov	s15, r3
 800eb76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ec5c <HAL_RCC_GetSysClockFreq+0x2f0>
 800eb7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb82:	4b2f      	ldr	r3, [pc, #188]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb8a:	ee07 3a90 	vmov	s15, r3
 800eb8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb92:	ed97 6a02 	vldr	s12, [r7, #8]
 800eb96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ec50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800eb9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ebaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ebb2:	e021      	b.n	800ebf8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	ee07 3a90 	vmov	s15, r3
 800ebba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ec58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ebc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebc6:	4b1e      	ldr	r3, [pc, #120]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ebc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebce:	ee07 3a90 	vmov	s15, r3
 800ebd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebd6:	ed97 6a02 	vldr	s12, [r7, #8]
 800ebda:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ec50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ebde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ebe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ebe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ebea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ebee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ebf6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ebf8:	4b11      	ldr	r3, [pc, #68]	; (800ec40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ebfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebfc:	0a5b      	lsrs	r3, r3, #9
 800ebfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec02:	3301      	adds	r3, #1
 800ec04:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	ee07 3a90 	vmov	s15, r3
 800ec0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ec10:	edd7 6a07 	vldr	s13, [r7, #28]
 800ec14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ec1c:	ee17 3a90 	vmov	r3, s15
 800ec20:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ec22:	e005      	b.n	800ec30 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ec24:	2300      	movs	r3, #0
 800ec26:	61bb      	str	r3, [r7, #24]
    break;
 800ec28:	e002      	b.n	800ec30 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ec2a:	4b07      	ldr	r3, [pc, #28]	; (800ec48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ec2c:	61bb      	str	r3, [r7, #24]
    break;
 800ec2e:	bf00      	nop
  }

  return sysclockfreq;
 800ec30:	69bb      	ldr	r3, [r7, #24]
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3724      	adds	r7, #36	; 0x24
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr
 800ec3e:	bf00      	nop
 800ec40:	58024400 	.word	0x58024400
 800ec44:	03d09000 	.word	0x03d09000
 800ec48:	003d0900 	.word	0x003d0900
 800ec4c:	016e3600 	.word	0x016e3600
 800ec50:	46000000 	.word	0x46000000
 800ec54:	4c742400 	.word	0x4c742400
 800ec58:	4a742400 	.word	0x4a742400
 800ec5c:	4bb71b00 	.word	0x4bb71b00

0800ec60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800ec66:	f7ff fe81 	bl	800e96c <HAL_RCC_GetSysClockFreq>
 800ec6a:	4602      	mov	r2, r0
 800ec6c:	4b10      	ldr	r3, [pc, #64]	; (800ecb0 <HAL_RCC_GetHCLKFreq+0x50>)
 800ec6e:	699b      	ldr	r3, [r3, #24]
 800ec70:	0a1b      	lsrs	r3, r3, #8
 800ec72:	f003 030f 	and.w	r3, r3, #15
 800ec76:	490f      	ldr	r1, [pc, #60]	; (800ecb4 <HAL_RCC_GetHCLKFreq+0x54>)
 800ec78:	5ccb      	ldrb	r3, [r1, r3]
 800ec7a:	f003 031f 	and.w	r3, r3, #31
 800ec7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ec82:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800ec84:	4b0a      	ldr	r3, [pc, #40]	; (800ecb0 <HAL_RCC_GetHCLKFreq+0x50>)
 800ec86:	699b      	ldr	r3, [r3, #24]
 800ec88:	f003 030f 	and.w	r3, r3, #15
 800ec8c:	4a09      	ldr	r2, [pc, #36]	; (800ecb4 <HAL_RCC_GetHCLKFreq+0x54>)
 800ec8e:	5cd3      	ldrb	r3, [r2, r3]
 800ec90:	f003 031f 	and.w	r3, r3, #31
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	fa22 f303 	lsr.w	r3, r2, r3
 800ec9a:	4a07      	ldr	r2, [pc, #28]	; (800ecb8 <HAL_RCC_GetHCLKFreq+0x58>)
 800ec9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ec9e:	4a07      	ldr	r2, [pc, #28]	; (800ecbc <HAL_RCC_GetHCLKFreq+0x5c>)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800eca4:	4b04      	ldr	r3, [pc, #16]	; (800ecb8 <HAL_RCC_GetHCLKFreq+0x58>)
 800eca6:	681b      	ldr	r3, [r3, #0]
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3708      	adds	r7, #8
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	58024400 	.word	0x58024400
 800ecb4:	08028798 	.word	0x08028798
 800ecb8:	24000040 	.word	0x24000040
 800ecbc:	2400003c 	.word	0x2400003c

0800ecc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800ecc4:	f7ff ffcc 	bl	800ec60 <HAL_RCC_GetHCLKFreq>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	4b06      	ldr	r3, [pc, #24]	; (800ece4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800eccc:	69db      	ldr	r3, [r3, #28]
 800ecce:	091b      	lsrs	r3, r3, #4
 800ecd0:	f003 0307 	and.w	r3, r3, #7
 800ecd4:	4904      	ldr	r1, [pc, #16]	; (800ece8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ecd6:	5ccb      	ldrb	r3, [r1, r3]
 800ecd8:	f003 031f 	and.w	r3, r3, #31
 800ecdc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	58024400 	.word	0x58024400
 800ece8:	08028798 	.word	0x08028798

0800ecec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800ecf0:	f7ff ffb6 	bl	800ec60 <HAL_RCC_GetHCLKFreq>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	4b06      	ldr	r3, [pc, #24]	; (800ed10 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ecf8:	69db      	ldr	r3, [r3, #28]
 800ecfa:	0a1b      	lsrs	r3, r3, #8
 800ecfc:	f003 0307 	and.w	r3, r3, #7
 800ed00:	4904      	ldr	r1, [pc, #16]	; (800ed14 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ed02:	5ccb      	ldrb	r3, [r1, r3]
 800ed04:	f003 031f 	and.w	r3, r3, #31
 800ed08:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	bd80      	pop	{r7, pc}
 800ed10:	58024400 	.word	0x58024400
 800ed14:	08028798 	.word	0x08028798

0800ed18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	223f      	movs	r2, #63	; 0x3f
 800ed26:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ed28:	4b1a      	ldr	r3, [pc, #104]	; (800ed94 <HAL_RCC_GetClockConfig+0x7c>)
 800ed2a:	691b      	ldr	r3, [r3, #16]
 800ed2c:	f003 0207 	and.w	r2, r3, #7
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800ed34:	4b17      	ldr	r3, [pc, #92]	; (800ed94 <HAL_RCC_GetClockConfig+0x7c>)
 800ed36:	699b      	ldr	r3, [r3, #24]
 800ed38:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800ed40:	4b14      	ldr	r3, [pc, #80]	; (800ed94 <HAL_RCC_GetClockConfig+0x7c>)
 800ed42:	699b      	ldr	r3, [r3, #24]
 800ed44:	f003 020f 	and.w	r2, r3, #15
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800ed4c:	4b11      	ldr	r3, [pc, #68]	; (800ed94 <HAL_RCC_GetClockConfig+0x7c>)
 800ed4e:	699b      	ldr	r3, [r3, #24]
 800ed50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800ed58:	4b0e      	ldr	r3, [pc, #56]	; (800ed94 <HAL_RCC_GetClockConfig+0x7c>)
 800ed5a:	69db      	ldr	r3, [r3, #28]
 800ed5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800ed64:	4b0b      	ldr	r3, [pc, #44]	; (800ed94 <HAL_RCC_GetClockConfig+0x7c>)
 800ed66:	69db      	ldr	r3, [r3, #28]
 800ed68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800ed70:	4b08      	ldr	r3, [pc, #32]	; (800ed94 <HAL_RCC_GetClockConfig+0x7c>)
 800ed72:	6a1b      	ldr	r3, [r3, #32]
 800ed74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ed7c:	4b06      	ldr	r3, [pc, #24]	; (800ed98 <HAL_RCC_GetClockConfig+0x80>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f003 020f 	and.w	r2, r3, #15
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	601a      	str	r2, [r3, #0]
}
 800ed88:	bf00      	nop
 800ed8a:	370c      	adds	r7, #12
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr
 800ed94:	58024400 	.word	0x58024400
 800ed98:	52002000 	.word	0x52002000

0800ed9c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b086      	sub	sp, #24
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800eda4:	2300      	movs	r3, #0
 800eda6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800eda8:	2300      	movs	r3, #0
 800edaa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d03f      	beq.n	800ee38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800edbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800edc0:	d02a      	beq.n	800ee18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800edc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800edc6:	d824      	bhi.n	800ee12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800edc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800edcc:	d018      	beq.n	800ee00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800edce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800edd2:	d81e      	bhi.n	800ee12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d003      	beq.n	800ede0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800edd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eddc:	d007      	beq.n	800edee <HAL_RCCEx_PeriphCLKConfig+0x52>
 800edde:	e018      	b.n	800ee12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ede0:	4ba6      	ldr	r3, [pc, #664]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ede2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ede4:	4aa5      	ldr	r2, [pc, #660]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ede6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800edea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800edec:	e015      	b.n	800ee1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	3304      	adds	r3, #4
 800edf2:	2102      	movs	r1, #2
 800edf4:	4618      	mov	r0, r3
 800edf6:	f000 fedd 	bl	800fbb4 <RCCEx_PLL2_Config>
 800edfa:	4603      	mov	r3, r0
 800edfc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800edfe:	e00c      	b.n	800ee1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	3324      	adds	r3, #36	; 0x24
 800ee04:	2102      	movs	r1, #2
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 ff86 	bl	800fd18 <RCCEx_PLL3_Config>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ee10:	e003      	b.n	800ee1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ee12:	2301      	movs	r3, #1
 800ee14:	75fb      	strb	r3, [r7, #23]
      break;
 800ee16:	e000      	b.n	800ee1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ee18:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ee1a:	7dfb      	ldrb	r3, [r7, #23]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d109      	bne.n	800ee34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ee20:	4b96      	ldr	r3, [pc, #600]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ee22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee2c:	4993      	ldr	r1, [pc, #588]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ee2e:	4313      	orrs	r3, r2
 800ee30:	650b      	str	r3, [r1, #80]	; 0x50
 800ee32:	e001      	b.n	800ee38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee34:	7dfb      	ldrb	r3, [r7, #23]
 800ee36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d03d      	beq.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee48:	2b04      	cmp	r3, #4
 800ee4a:	d826      	bhi.n	800ee9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ee4c:	a201      	add	r2, pc, #4	; (adr r2, 800ee54 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800ee4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee52:	bf00      	nop
 800ee54:	0800ee69 	.word	0x0800ee69
 800ee58:	0800ee77 	.word	0x0800ee77
 800ee5c:	0800ee89 	.word	0x0800ee89
 800ee60:	0800eea1 	.word	0x0800eea1
 800ee64:	0800eea1 	.word	0x0800eea1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee68:	4b84      	ldr	r3, [pc, #528]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ee6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6c:	4a83      	ldr	r2, [pc, #524]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ee6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ee72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ee74:	e015      	b.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	3304      	adds	r3, #4
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f000 fe99 	bl	800fbb4 <RCCEx_PLL2_Config>
 800ee82:	4603      	mov	r3, r0
 800ee84:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ee86:	e00c      	b.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	3324      	adds	r3, #36	; 0x24
 800ee8c:	2100      	movs	r1, #0
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f000 ff42 	bl	800fd18 <RCCEx_PLL3_Config>
 800ee94:	4603      	mov	r3, r0
 800ee96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ee98:	e003      	b.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	75fb      	strb	r3, [r7, #23]
      break;
 800ee9e:	e000      	b.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800eea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800eea2:	7dfb      	ldrb	r3, [r7, #23]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d109      	bne.n	800eebc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800eea8:	4b74      	ldr	r3, [pc, #464]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800eeaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eeac:	f023 0207 	bic.w	r2, r3, #7
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeb4:	4971      	ldr	r1, [pc, #452]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800eeb6:	4313      	orrs	r3, r2
 800eeb8:	650b      	str	r3, [r1, #80]	; 0x50
 800eeba:	e001      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eebc:	7dfb      	ldrb	r3, [r7, #23]
 800eebe:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d04a      	beq.n	800ef62 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eed0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800eed4:	d031      	beq.n	800ef3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800eed6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800eeda:	d82b      	bhi.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800eedc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eee0:	d02d      	beq.n	800ef3e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800eee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eee6:	d825      	bhi.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800eee8:	2bc0      	cmp	r3, #192	; 0xc0
 800eeea:	d02a      	beq.n	800ef42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800eeec:	2bc0      	cmp	r3, #192	; 0xc0
 800eeee:	d821      	bhi.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800eef0:	2b80      	cmp	r3, #128	; 0x80
 800eef2:	d016      	beq.n	800ef22 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800eef4:	2b80      	cmp	r3, #128	; 0x80
 800eef6:	d81d      	bhi.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d002      	beq.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800eefc:	2b40      	cmp	r3, #64	; 0x40
 800eefe:	d007      	beq.n	800ef10 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800ef00:	e018      	b.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef02:	4b5e      	ldr	r3, [pc, #376]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ef04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef06:	4a5d      	ldr	r2, [pc, #372]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ef08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800ef0e:	e019      	b.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	3304      	adds	r3, #4
 800ef14:	2100      	movs	r1, #0
 800ef16:	4618      	mov	r0, r3
 800ef18:	f000 fe4c 	bl	800fbb4 <RCCEx_PLL2_Config>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800ef20:	e010      	b.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	3324      	adds	r3, #36	; 0x24
 800ef26:	2100      	movs	r1, #0
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f000 fef5 	bl	800fd18 <RCCEx_PLL3_Config>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800ef32:	e007      	b.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ef34:	2301      	movs	r3, #1
 800ef36:	75fb      	strb	r3, [r7, #23]
      break;
 800ef38:	e004      	b.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800ef3a:	bf00      	nop
 800ef3c:	e002      	b.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800ef3e:	bf00      	nop
 800ef40:	e000      	b.n	800ef44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800ef42:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ef44:	7dfb      	ldrb	r3, [r7, #23]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d109      	bne.n	800ef5e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800ef4a:	4b4c      	ldr	r3, [pc, #304]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ef4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef4e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef56:	4949      	ldr	r1, [pc, #292]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	650b      	str	r3, [r1, #80]	; 0x50
 800ef5c:	e001      	b.n	800ef62 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef5e:	7dfb      	ldrb	r3, [r7, #23]
 800ef60:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d04f      	beq.n	800f00e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef72:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800ef76:	d036      	beq.n	800efe6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800ef78:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800ef7c:	d830      	bhi.n	800efe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800ef7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef82:	d032      	beq.n	800efea <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800ef84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef88:	d82a      	bhi.n	800efe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800ef8a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ef8e:	d02e      	beq.n	800efee <HAL_RCCEx_PeriphCLKConfig+0x252>
 800ef90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ef94:	d824      	bhi.n	800efe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800ef96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef9a:	d018      	beq.n	800efce <HAL_RCCEx_PeriphCLKConfig+0x232>
 800ef9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efa0:	d81e      	bhi.n	800efe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d003      	beq.n	800efae <HAL_RCCEx_PeriphCLKConfig+0x212>
 800efa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800efaa:	d007      	beq.n	800efbc <HAL_RCCEx_PeriphCLKConfig+0x220>
 800efac:	e018      	b.n	800efe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800efae:	4b33      	ldr	r3, [pc, #204]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800efb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efb2:	4a32      	ldr	r2, [pc, #200]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800efb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800efb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800efba:	e019      	b.n	800eff0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	3304      	adds	r3, #4
 800efc0:	2100      	movs	r1, #0
 800efc2:	4618      	mov	r0, r3
 800efc4:	f000 fdf6 	bl	800fbb4 <RCCEx_PLL2_Config>
 800efc8:	4603      	mov	r3, r0
 800efca:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800efcc:	e010      	b.n	800eff0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	3324      	adds	r3, #36	; 0x24
 800efd2:	2100      	movs	r1, #0
 800efd4:	4618      	mov	r0, r3
 800efd6:	f000 fe9f 	bl	800fd18 <RCCEx_PLL3_Config>
 800efda:	4603      	mov	r3, r0
 800efdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800efde:	e007      	b.n	800eff0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800efe0:	2301      	movs	r3, #1
 800efe2:	75fb      	strb	r3, [r7, #23]
      break;
 800efe4:	e004      	b.n	800eff0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800efe6:	bf00      	nop
 800efe8:	e002      	b.n	800eff0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800efea:	bf00      	nop
 800efec:	e000      	b.n	800eff0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800efee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800eff0:	7dfb      	ldrb	r3, [r7, #23]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d109      	bne.n	800f00a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800eff6:	4b21      	ldr	r3, [pc, #132]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800eff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800effa:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f002:	491e      	ldr	r1, [pc, #120]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f004:	4313      	orrs	r3, r2
 800f006:	650b      	str	r3, [r1, #80]	; 0x50
 800f008:	e001      	b.n	800f00e <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f00a:	7dfb      	ldrb	r3, [r7, #23]
 800f00c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f016:	2b00      	cmp	r3, #0
 800f018:	d034      	beq.n	800f084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f01e:	2b30      	cmp	r3, #48	; 0x30
 800f020:	d01c      	beq.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800f022:	2b30      	cmp	r3, #48	; 0x30
 800f024:	d817      	bhi.n	800f056 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800f026:	2b20      	cmp	r3, #32
 800f028:	d00c      	beq.n	800f044 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f02a:	2b20      	cmp	r3, #32
 800f02c:	d813      	bhi.n	800f056 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d016      	beq.n	800f060 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800f032:	2b10      	cmp	r3, #16
 800f034:	d10f      	bne.n	800f056 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f036:	4b11      	ldr	r3, [pc, #68]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f03a:	4a10      	ldr	r2, [pc, #64]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f03c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f040:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800f042:	e00e      	b.n	800f062 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	3304      	adds	r3, #4
 800f048:	2102      	movs	r1, #2
 800f04a:	4618      	mov	r0, r3
 800f04c:	f000 fdb2 	bl	800fbb4 <RCCEx_PLL2_Config>
 800f050:	4603      	mov	r3, r0
 800f052:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800f054:	e005      	b.n	800f062 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800f056:	2301      	movs	r3, #1
 800f058:	75fb      	strb	r3, [r7, #23]
      break;
 800f05a:	e002      	b.n	800f062 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800f05c:	bf00      	nop
 800f05e:	e000      	b.n	800f062 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800f060:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f062:	7dfb      	ldrb	r3, [r7, #23]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d10b      	bne.n	800f080 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800f068:	4b04      	ldr	r3, [pc, #16]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f06a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f06c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f074:	4901      	ldr	r1, [pc, #4]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f076:	4313      	orrs	r3, r2
 800f078:	64cb      	str	r3, [r1, #76]	; 0x4c
 800f07a:	e003      	b.n	800f084 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800f07c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f080:	7dfb      	ldrb	r3, [r7, #23]
 800f082:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d047      	beq.n	800f120 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f098:	d030      	beq.n	800f0fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800f09a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f09e:	d82a      	bhi.n	800f0f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800f0a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f0a4:	d02c      	beq.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800f0a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f0aa:	d824      	bhi.n	800f0f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800f0ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0b0:	d018      	beq.n	800f0e4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800f0b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0b6:	d81e      	bhi.n	800f0f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d003      	beq.n	800f0c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800f0bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0c0:	d007      	beq.n	800f0d2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800f0c2:	e018      	b.n	800f0f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f0c4:	4bb0      	ldr	r3, [pc, #704]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c8:	4aaf      	ldr	r2, [pc, #700]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f0ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f0ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f0d0:	e017      	b.n	800f102 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	3304      	adds	r3, #4
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f000 fd6b 	bl	800fbb4 <RCCEx_PLL2_Config>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f0e2:	e00e      	b.n	800f102 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	3324      	adds	r3, #36	; 0x24
 800f0e8:	2100      	movs	r1, #0
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f000 fe14 	bl	800fd18 <RCCEx_PLL3_Config>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f0f4:	e005      	b.n	800f102 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	75fb      	strb	r3, [r7, #23]
      break;
 800f0fa:	e002      	b.n	800f102 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800f0fc:	bf00      	nop
 800f0fe:	e000      	b.n	800f102 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800f100:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f102:	7dfb      	ldrb	r3, [r7, #23]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d109      	bne.n	800f11c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f108:	4b9f      	ldr	r3, [pc, #636]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f10a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f10c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f114:	499c      	ldr	r1, [pc, #624]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f116:	4313      	orrs	r3, r2
 800f118:	650b      	str	r3, [r1, #80]	; 0x50
 800f11a:	e001      	b.n	800f120 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f11c:	7dfb      	ldrb	r3, [r7, #23]
 800f11e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d049      	beq.n	800f1c0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f134:	d02e      	beq.n	800f194 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f136:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f13a:	d828      	bhi.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800f13c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f140:	d02a      	beq.n	800f198 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800f142:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f146:	d822      	bhi.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800f148:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f14c:	d026      	beq.n	800f19c <HAL_RCCEx_PeriphCLKConfig+0x400>
 800f14e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f152:	d81c      	bhi.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800f154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f158:	d010      	beq.n	800f17c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800f15a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f15e:	d816      	bhi.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800f160:	2b00      	cmp	r3, #0
 800f162:	d01d      	beq.n	800f1a0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800f164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f168:	d111      	bne.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	3304      	adds	r3, #4
 800f16e:	2101      	movs	r1, #1
 800f170:	4618      	mov	r0, r3
 800f172:	f000 fd1f 	bl	800fbb4 <RCCEx_PLL2_Config>
 800f176:	4603      	mov	r3, r0
 800f178:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800f17a:	e012      	b.n	800f1a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	3324      	adds	r3, #36	; 0x24
 800f180:	2101      	movs	r1, #1
 800f182:	4618      	mov	r0, r3
 800f184:	f000 fdc8 	bl	800fd18 <RCCEx_PLL3_Config>
 800f188:	4603      	mov	r3, r0
 800f18a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800f18c:	e009      	b.n	800f1a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f18e:	2301      	movs	r3, #1
 800f190:	75fb      	strb	r3, [r7, #23]
      break;
 800f192:	e006      	b.n	800f1a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800f194:	bf00      	nop
 800f196:	e004      	b.n	800f1a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800f198:	bf00      	nop
 800f19a:	e002      	b.n	800f1a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800f19c:	bf00      	nop
 800f19e:	e000      	b.n	800f1a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800f1a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f1a2:	7dfb      	ldrb	r3, [r7, #23]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d109      	bne.n	800f1bc <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f1a8:	4b77      	ldr	r3, [pc, #476]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f1aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1b4:	4974      	ldr	r1, [pc, #464]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	650b      	str	r3, [r1, #80]	; 0x50
 800f1ba:	e001      	b.n	800f1c0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1bc:	7dfb      	ldrb	r3, [r7, #23]
 800f1be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d053      	beq.n	800f274 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f1d2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800f1d6:	d034      	beq.n	800f242 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800f1d8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800f1dc:	d82e      	bhi.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800f1de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f1e2:	d030      	beq.n	800f246 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800f1e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f1e8:	d828      	bhi.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800f1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1ee:	d02c      	beq.n	800f24a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800f1f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1f4:	d822      	bhi.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800f1f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f1fa:	d028      	beq.n	800f24e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800f1fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f200:	d81c      	bhi.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800f202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f206:	d010      	beq.n	800f22a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800f208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f20c:	d816      	bhi.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d01f      	beq.n	800f252 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800f212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f216:	d111      	bne.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	3304      	adds	r3, #4
 800f21c:	2101      	movs	r1, #1
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 fcc8 	bl	800fbb4 <RCCEx_PLL2_Config>
 800f224:	4603      	mov	r3, r0
 800f226:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800f228:	e014      	b.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	3324      	adds	r3, #36	; 0x24
 800f22e:	2101      	movs	r1, #1
 800f230:	4618      	mov	r0, r3
 800f232:	f000 fd71 	bl	800fd18 <RCCEx_PLL3_Config>
 800f236:	4603      	mov	r3, r0
 800f238:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800f23a:	e00b      	b.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800f23c:	2301      	movs	r3, #1
 800f23e:	75fb      	strb	r3, [r7, #23]
      break;
 800f240:	e008      	b.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800f242:	bf00      	nop
 800f244:	e006      	b.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800f246:	bf00      	nop
 800f248:	e004      	b.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800f24a:	bf00      	nop
 800f24c:	e002      	b.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800f24e:	bf00      	nop
 800f250:	e000      	b.n	800f254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800f252:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f254:	7dfb      	ldrb	r3, [r7, #23]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d10a      	bne.n	800f270 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f25a:	4b4b      	ldr	r3, [pc, #300]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f25c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f25e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f268:	4947      	ldr	r1, [pc, #284]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f26a:	4313      	orrs	r3, r2
 800f26c:	658b      	str	r3, [r1, #88]	; 0x58
 800f26e:	e001      	b.n	800f274 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f270:	7dfb      	ldrb	r3, [r7, #23]
 800f272:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d02f      	beq.n	800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f288:	d00e      	beq.n	800f2a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800f28a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f28e:	d814      	bhi.n	800f2ba <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800f290:	2b00      	cmp	r3, #0
 800f292:	d015      	beq.n	800f2c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800f294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f298:	d10f      	bne.n	800f2ba <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f29a:	4b3b      	ldr	r3, [pc, #236]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f29e:	4a3a      	ldr	r2, [pc, #232]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f2a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800f2a6:	e00c      	b.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	3304      	adds	r3, #4
 800f2ac:	2101      	movs	r1, #1
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f000 fc80 	bl	800fbb4 <RCCEx_PLL2_Config>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800f2b8:	e003      	b.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	75fb      	strb	r3, [r7, #23]
      break;
 800f2be:	e000      	b.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 800f2c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f2c2:	7dfb      	ldrb	r3, [r7, #23]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d109      	bne.n	800f2dc <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f2c8:	4b2f      	ldr	r3, [pc, #188]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f2ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2d4:	492c      	ldr	r1, [pc, #176]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	650b      	str	r3, [r1, #80]	; 0x50
 800f2da:	e001      	b.n	800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2dc:	7dfb      	ldrb	r3, [r7, #23]
 800f2de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d032      	beq.n	800f352 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2f0:	2b03      	cmp	r3, #3
 800f2f2:	d81b      	bhi.n	800f32c <HAL_RCCEx_PeriphCLKConfig+0x590>
 800f2f4:	a201      	add	r2, pc, #4	; (adr r2, 800f2fc <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800f2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2fa:	bf00      	nop
 800f2fc:	0800f333 	.word	0x0800f333
 800f300:	0800f30d 	.word	0x0800f30d
 800f304:	0800f31b 	.word	0x0800f31b
 800f308:	0800f333 	.word	0x0800f333
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f30c:	4b1e      	ldr	r3, [pc, #120]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f310:	4a1d      	ldr	r2, [pc, #116]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800f318:	e00c      	b.n	800f334 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	3304      	adds	r3, #4
 800f31e:	2102      	movs	r1, #2
 800f320:	4618      	mov	r0, r3
 800f322:	f000 fc47 	bl	800fbb4 <RCCEx_PLL2_Config>
 800f326:	4603      	mov	r3, r0
 800f328:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800f32a:	e003      	b.n	800f334 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800f32c:	2301      	movs	r3, #1
 800f32e:	75fb      	strb	r3, [r7, #23]
      break;
 800f330:	e000      	b.n	800f334 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 800f332:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f334:	7dfb      	ldrb	r3, [r7, #23]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d109      	bne.n	800f34e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f33a:	4b13      	ldr	r3, [pc, #76]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f33c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f33e:	f023 0203 	bic.w	r2, r3, #3
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f346:	4910      	ldr	r1, [pc, #64]	; (800f388 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800f348:	4313      	orrs	r3, r2
 800f34a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800f34c:	e001      	b.n	800f352 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f34e:	7dfb      	ldrb	r3, [r7, #23]
 800f350:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	f000 808a 	beq.w	800f474 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f360:	4b0a      	ldr	r3, [pc, #40]	; (800f38c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	4a09      	ldr	r2, [pc, #36]	; (800f38c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800f366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f36a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f36c:	f7fb fbea 	bl	800ab44 <HAL_GetTick>
 800f370:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f372:	e00d      	b.n	800f390 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f374:	f7fb fbe6 	bl	800ab44 <HAL_GetTick>
 800f378:	4602      	mov	r2, r0
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	1ad3      	subs	r3, r2, r3
 800f37e:	2b64      	cmp	r3, #100	; 0x64
 800f380:	d906      	bls.n	800f390 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800f382:	2303      	movs	r3, #3
 800f384:	75fb      	strb	r3, [r7, #23]
        break;
 800f386:	e009      	b.n	800f39c <HAL_RCCEx_PeriphCLKConfig+0x600>
 800f388:	58024400 	.word	0x58024400
 800f38c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f390:	4bba      	ldr	r3, [pc, #744]	; (800f67c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d0eb      	beq.n	800f374 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 800f39c:	7dfb      	ldrb	r3, [r7, #23]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d166      	bne.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f3a2:	4bb7      	ldr	r3, [pc, #732]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f3a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f3ac:	4053      	eors	r3, r2
 800f3ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d013      	beq.n	800f3de <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f3b6:	4bb2      	ldr	r3, [pc, #712]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f3b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3be:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f3c0:	4baf      	ldr	r3, [pc, #700]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f3c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3c4:	4aae      	ldr	r2, [pc, #696]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f3c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f3ca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f3cc:	4bac      	ldr	r3, [pc, #688]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f3ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3d0:	4aab      	ldr	r2, [pc, #684]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f3d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f3d6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f3d8:	4aa9      	ldr	r2, [pc, #676]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f3e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3e8:	d115      	bne.n	800f416 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3ea:	f7fb fbab 	bl	800ab44 <HAL_GetTick>
 800f3ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f3f0:	e00b      	b.n	800f40a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f3f2:	f7fb fba7 	bl	800ab44 <HAL_GetTick>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	1ad3      	subs	r3, r2, r3
 800f3fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f400:	4293      	cmp	r3, r2
 800f402:	d902      	bls.n	800f40a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800f404:	2303      	movs	r3, #3
 800f406:	75fb      	strb	r3, [r7, #23]
            break;
 800f408:	e005      	b.n	800f416 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f40a:	4b9d      	ldr	r3, [pc, #628]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f40e:	f003 0302 	and.w	r3, r3, #2
 800f412:	2b00      	cmp	r3, #0
 800f414:	d0ed      	beq.n	800f3f2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800f416:	7dfb      	ldrb	r3, [r7, #23]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d126      	bne.n	800f46a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f42a:	d10d      	bne.n	800f448 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800f42c:	4b94      	ldr	r3, [pc, #592]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f42e:	691b      	ldr	r3, [r3, #16]
 800f430:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f43a:	0919      	lsrs	r1, r3, #4
 800f43c:	4b91      	ldr	r3, [pc, #580]	; (800f684 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800f43e:	400b      	ands	r3, r1
 800f440:	498f      	ldr	r1, [pc, #572]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f442:	4313      	orrs	r3, r2
 800f444:	610b      	str	r3, [r1, #16]
 800f446:	e005      	b.n	800f454 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800f448:	4b8d      	ldr	r3, [pc, #564]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f44a:	691b      	ldr	r3, [r3, #16]
 800f44c:	4a8c      	ldr	r2, [pc, #560]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f44e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f452:	6113      	str	r3, [r2, #16]
 800f454:	4b8a      	ldr	r3, [pc, #552]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f456:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f45e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f462:	4987      	ldr	r1, [pc, #540]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f464:	4313      	orrs	r3, r2
 800f466:	670b      	str	r3, [r1, #112]	; 0x70
 800f468:	e004      	b.n	800f474 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f46a:	7dfb      	ldrb	r3, [r7, #23]
 800f46c:	75bb      	strb	r3, [r7, #22]
 800f46e:	e001      	b.n	800f474 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f470:	7dfb      	ldrb	r3, [r7, #23]
 800f472:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f003 0301 	and.w	r3, r3, #1
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d07f      	beq.n	800f580 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f486:	2b28      	cmp	r3, #40	; 0x28
 800f488:	d866      	bhi.n	800f558 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800f48a:	a201      	add	r2, pc, #4	; (adr r2, 800f490 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800f48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f490:	0800f55f 	.word	0x0800f55f
 800f494:	0800f559 	.word	0x0800f559
 800f498:	0800f559 	.word	0x0800f559
 800f49c:	0800f559 	.word	0x0800f559
 800f4a0:	0800f559 	.word	0x0800f559
 800f4a4:	0800f559 	.word	0x0800f559
 800f4a8:	0800f559 	.word	0x0800f559
 800f4ac:	0800f559 	.word	0x0800f559
 800f4b0:	0800f535 	.word	0x0800f535
 800f4b4:	0800f559 	.word	0x0800f559
 800f4b8:	0800f559 	.word	0x0800f559
 800f4bc:	0800f559 	.word	0x0800f559
 800f4c0:	0800f559 	.word	0x0800f559
 800f4c4:	0800f559 	.word	0x0800f559
 800f4c8:	0800f559 	.word	0x0800f559
 800f4cc:	0800f559 	.word	0x0800f559
 800f4d0:	0800f547 	.word	0x0800f547
 800f4d4:	0800f559 	.word	0x0800f559
 800f4d8:	0800f559 	.word	0x0800f559
 800f4dc:	0800f559 	.word	0x0800f559
 800f4e0:	0800f559 	.word	0x0800f559
 800f4e4:	0800f559 	.word	0x0800f559
 800f4e8:	0800f559 	.word	0x0800f559
 800f4ec:	0800f559 	.word	0x0800f559
 800f4f0:	0800f55f 	.word	0x0800f55f
 800f4f4:	0800f559 	.word	0x0800f559
 800f4f8:	0800f559 	.word	0x0800f559
 800f4fc:	0800f559 	.word	0x0800f559
 800f500:	0800f559 	.word	0x0800f559
 800f504:	0800f559 	.word	0x0800f559
 800f508:	0800f559 	.word	0x0800f559
 800f50c:	0800f559 	.word	0x0800f559
 800f510:	0800f55f 	.word	0x0800f55f
 800f514:	0800f559 	.word	0x0800f559
 800f518:	0800f559 	.word	0x0800f559
 800f51c:	0800f559 	.word	0x0800f559
 800f520:	0800f559 	.word	0x0800f559
 800f524:	0800f559 	.word	0x0800f559
 800f528:	0800f559 	.word	0x0800f559
 800f52c:	0800f559 	.word	0x0800f559
 800f530:	0800f55f 	.word	0x0800f55f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	3304      	adds	r3, #4
 800f538:	2101      	movs	r1, #1
 800f53a:	4618      	mov	r0, r3
 800f53c:	f000 fb3a 	bl	800fbb4 <RCCEx_PLL2_Config>
 800f540:	4603      	mov	r3, r0
 800f542:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800f544:	e00c      	b.n	800f560 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	3324      	adds	r3, #36	; 0x24
 800f54a:	2101      	movs	r1, #1
 800f54c:	4618      	mov	r0, r3
 800f54e:	f000 fbe3 	bl	800fd18 <RCCEx_PLL3_Config>
 800f552:	4603      	mov	r3, r0
 800f554:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800f556:	e003      	b.n	800f560 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f558:	2301      	movs	r3, #1
 800f55a:	75fb      	strb	r3, [r7, #23]
      break;
 800f55c:	e000      	b.n	800f560 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800f55e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f560:	7dfb      	ldrb	r3, [r7, #23]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d10a      	bne.n	800f57c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f566:	4b46      	ldr	r3, [pc, #280]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f56a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f574:	4942      	ldr	r1, [pc, #264]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f576:	4313      	orrs	r3, r2
 800f578:	654b      	str	r3, [r1, #84]	; 0x54
 800f57a:	e001      	b.n	800f580 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f57c:	7dfb      	ldrb	r3, [r7, #23]
 800f57e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	f003 0302 	and.w	r3, r3, #2
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d038      	beq.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f590:	2b05      	cmp	r3, #5
 800f592:	d821      	bhi.n	800f5d8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800f594:	a201      	add	r2, pc, #4	; (adr r2, 800f59c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800f596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f59a:	bf00      	nop
 800f59c:	0800f5df 	.word	0x0800f5df
 800f5a0:	0800f5b5 	.word	0x0800f5b5
 800f5a4:	0800f5c7 	.word	0x0800f5c7
 800f5a8:	0800f5df 	.word	0x0800f5df
 800f5ac:	0800f5df 	.word	0x0800f5df
 800f5b0:	0800f5df 	.word	0x0800f5df
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	3304      	adds	r3, #4
 800f5b8:	2101      	movs	r1, #1
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f000 fafa 	bl	800fbb4 <RCCEx_PLL2_Config>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800f5c4:	e00c      	b.n	800f5e0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	3324      	adds	r3, #36	; 0x24
 800f5ca:	2101      	movs	r1, #1
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f000 fba3 	bl	800fd18 <RCCEx_PLL3_Config>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800f5d6:	e003      	b.n	800f5e0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f5d8:	2301      	movs	r3, #1
 800f5da:	75fb      	strb	r3, [r7, #23]
      break;
 800f5dc:	e000      	b.n	800f5e0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800f5de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f5e0:	7dfb      	ldrb	r3, [r7, #23]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d109      	bne.n	800f5fa <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f5e6:	4b26      	ldr	r3, [pc, #152]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ea:	f023 0207 	bic.w	r2, r3, #7
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5f2:	4923      	ldr	r1, [pc, #140]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	654b      	str	r3, [r1, #84]	; 0x54
 800f5f8:	e001      	b.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5fa:	7dfb      	ldrb	r3, [r7, #23]
 800f5fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f003 0304 	and.w	r3, r3, #4
 800f606:	2b00      	cmp	r3, #0
 800f608:	d040      	beq.n	800f68c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f610:	2b05      	cmp	r3, #5
 800f612:	d821      	bhi.n	800f658 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800f614:	a201      	add	r2, pc, #4	; (adr r2, 800f61c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800f616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f61a:	bf00      	nop
 800f61c:	0800f65f 	.word	0x0800f65f
 800f620:	0800f635 	.word	0x0800f635
 800f624:	0800f647 	.word	0x0800f647
 800f628:	0800f65f 	.word	0x0800f65f
 800f62c:	0800f65f 	.word	0x0800f65f
 800f630:	0800f65f 	.word	0x0800f65f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	3304      	adds	r3, #4
 800f638:	2101      	movs	r1, #1
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 faba 	bl	800fbb4 <RCCEx_PLL2_Config>
 800f640:	4603      	mov	r3, r0
 800f642:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800f644:	e00c      	b.n	800f660 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	3324      	adds	r3, #36	; 0x24
 800f64a:	2101      	movs	r1, #1
 800f64c:	4618      	mov	r0, r3
 800f64e:	f000 fb63 	bl	800fd18 <RCCEx_PLL3_Config>
 800f652:	4603      	mov	r3, r0
 800f654:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800f656:	e003      	b.n	800f660 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f658:	2301      	movs	r3, #1
 800f65a:	75fb      	strb	r3, [r7, #23]
      break;
 800f65c:	e000      	b.n	800f660 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800f65e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f660:	7dfb      	ldrb	r3, [r7, #23]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d110      	bne.n	800f688 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f666:	4b06      	ldr	r3, [pc, #24]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f66a:	f023 0207 	bic.w	r2, r3, #7
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f674:	4902      	ldr	r1, [pc, #8]	; (800f680 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800f676:	4313      	orrs	r3, r2
 800f678:	658b      	str	r3, [r1, #88]	; 0x58
 800f67a:	e007      	b.n	800f68c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800f67c:	58024800 	.word	0x58024800
 800f680:	58024400 	.word	0x58024400
 800f684:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f688:	7dfb      	ldrb	r3, [r7, #23]
 800f68a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f003 0320 	and.w	r3, r3, #32
 800f694:	2b00      	cmp	r3, #0
 800f696:	d04b      	beq.n	800f730 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f69e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f6a2:	d02e      	beq.n	800f702 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800f6a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f6a8:	d828      	bhi.n	800f6fc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800f6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6ae:	d02a      	beq.n	800f706 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800f6b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6b4:	d822      	bhi.n	800f6fc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800f6b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f6ba:	d026      	beq.n	800f70a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800f6bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f6c0:	d81c      	bhi.n	800f6fc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800f6c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6c6:	d010      	beq.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800f6c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6cc:	d816      	bhi.n	800f6fc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d01d      	beq.n	800f70e <HAL_RCCEx_PeriphCLKConfig+0x972>
 800f6d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f6d6:	d111      	bne.n	800f6fc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	3304      	adds	r3, #4
 800f6dc:	2100      	movs	r1, #0
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f000 fa68 	bl	800fbb4 <RCCEx_PLL2_Config>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800f6e8:	e012      	b.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	3324      	adds	r3, #36	; 0x24
 800f6ee:	2102      	movs	r1, #2
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f000 fb11 	bl	800fd18 <RCCEx_PLL3_Config>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800f6fa:	e009      	b.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	75fb      	strb	r3, [r7, #23]
      break;
 800f700:	e006      	b.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800f702:	bf00      	nop
 800f704:	e004      	b.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800f706:	bf00      	nop
 800f708:	e002      	b.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800f70a:	bf00      	nop
 800f70c:	e000      	b.n	800f710 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800f70e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f710:	7dfb      	ldrb	r3, [r7, #23]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d10a      	bne.n	800f72c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f716:	4bb3      	ldr	r3, [pc, #716]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f71a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f724:	49af      	ldr	r1, [pc, #700]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f726:	4313      	orrs	r3, r2
 800f728:	654b      	str	r3, [r1, #84]	; 0x54
 800f72a:	e001      	b.n	800f730 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f72c:	7dfb      	ldrb	r3, [r7, #23]
 800f72e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d04b      	beq.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f742:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f746:	d02e      	beq.n	800f7a6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800f748:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f74c:	d828      	bhi.n	800f7a0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800f74e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f752:	d02a      	beq.n	800f7aa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800f754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f758:	d822      	bhi.n	800f7a0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800f75a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f75e:	d026      	beq.n	800f7ae <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800f760:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f764:	d81c      	bhi.n	800f7a0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800f766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f76a:	d010      	beq.n	800f78e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800f76c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f770:	d816      	bhi.n	800f7a0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800f772:	2b00      	cmp	r3, #0
 800f774:	d01d      	beq.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800f776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f77a:	d111      	bne.n	800f7a0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	3304      	adds	r3, #4
 800f780:	2100      	movs	r1, #0
 800f782:	4618      	mov	r0, r3
 800f784:	f000 fa16 	bl	800fbb4 <RCCEx_PLL2_Config>
 800f788:	4603      	mov	r3, r0
 800f78a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800f78c:	e012      	b.n	800f7b4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	3324      	adds	r3, #36	; 0x24
 800f792:	2102      	movs	r1, #2
 800f794:	4618      	mov	r0, r3
 800f796:	f000 fabf 	bl	800fd18 <RCCEx_PLL3_Config>
 800f79a:	4603      	mov	r3, r0
 800f79c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800f79e:	e009      	b.n	800f7b4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	75fb      	strb	r3, [r7, #23]
      break;
 800f7a4:	e006      	b.n	800f7b4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800f7a6:	bf00      	nop
 800f7a8:	e004      	b.n	800f7b4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800f7aa:	bf00      	nop
 800f7ac:	e002      	b.n	800f7b4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800f7ae:	bf00      	nop
 800f7b0:	e000      	b.n	800f7b4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800f7b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f7b4:	7dfb      	ldrb	r3, [r7, #23]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d10a      	bne.n	800f7d0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f7ba:	4b8a      	ldr	r3, [pc, #552]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f7bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f7c8:	4986      	ldr	r1, [pc, #536]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f7ca:	4313      	orrs	r3, r2
 800f7cc:	658b      	str	r3, [r1, #88]	; 0x58
 800f7ce:	e001      	b.n	800f7d4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7d0:	7dfb      	ldrb	r3, [r7, #23]
 800f7d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d04b      	beq.n	800f878 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f7e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f7ea:	d02e      	beq.n	800f84a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800f7ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f7f0:	d828      	bhi.n	800f844 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800f7f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7f6:	d02a      	beq.n	800f84e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800f7f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7fc:	d822      	bhi.n	800f844 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800f7fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f802:	d026      	beq.n	800f852 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800f804:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f808:	d81c      	bhi.n	800f844 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800f80a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f80e:	d010      	beq.n	800f832 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800f810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f814:	d816      	bhi.n	800f844 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800f816:	2b00      	cmp	r3, #0
 800f818:	d01d      	beq.n	800f856 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800f81a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f81e:	d111      	bne.n	800f844 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	3304      	adds	r3, #4
 800f824:	2100      	movs	r1, #0
 800f826:	4618      	mov	r0, r3
 800f828:	f000 f9c4 	bl	800fbb4 <RCCEx_PLL2_Config>
 800f82c:	4603      	mov	r3, r0
 800f82e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800f830:	e012      	b.n	800f858 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	3324      	adds	r3, #36	; 0x24
 800f836:	2102      	movs	r1, #2
 800f838:	4618      	mov	r0, r3
 800f83a:	f000 fa6d 	bl	800fd18 <RCCEx_PLL3_Config>
 800f83e:	4603      	mov	r3, r0
 800f840:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800f842:	e009      	b.n	800f858 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f844:	2301      	movs	r3, #1
 800f846:	75fb      	strb	r3, [r7, #23]
      break;
 800f848:	e006      	b.n	800f858 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800f84a:	bf00      	nop
 800f84c:	e004      	b.n	800f858 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800f84e:	bf00      	nop
 800f850:	e002      	b.n	800f858 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800f852:	bf00      	nop
 800f854:	e000      	b.n	800f858 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800f856:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f858:	7dfb      	ldrb	r3, [r7, #23]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d10a      	bne.n	800f874 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f85e:	4b61      	ldr	r3, [pc, #388]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f86c:	495d      	ldr	r1, [pc, #372]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f86e:	4313      	orrs	r3, r2
 800f870:	658b      	str	r3, [r1, #88]	; 0x58
 800f872:	e001      	b.n	800f878 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f874:	7dfb      	ldrb	r3, [r7, #23]
 800f876:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	f003 0308 	and.w	r3, r3, #8
 800f880:	2b00      	cmp	r3, #0
 800f882:	d01a      	beq.n	800f8ba <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f88a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f88e:	d10a      	bne.n	800f8a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	3324      	adds	r3, #36	; 0x24
 800f894:	2102      	movs	r1, #2
 800f896:	4618      	mov	r0, r3
 800f898:	f000 fa3e 	bl	800fd18 <RCCEx_PLL3_Config>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d001      	beq.n	800f8a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f8a6:	4b4f      	ldr	r3, [pc, #316]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8b4:	494b      	ldr	r1, [pc, #300]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f003 0310 	and.w	r3, r3, #16
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d01a      	beq.n	800f8fc <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f8cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8d0:	d10a      	bne.n	800f8e8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	3324      	adds	r3, #36	; 0x24
 800f8d6:	2102      	movs	r1, #2
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f000 fa1d 	bl	800fd18 <RCCEx_PLL3_Config>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d001      	beq.n	800f8e8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f8e8:	4b3e      	ldr	r3, [pc, #248]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f8ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f8f6:	493b      	ldr	r1, [pc, #236]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f8f8:	4313      	orrs	r3, r2
 800f8fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f904:	2b00      	cmp	r3, #0
 800f906:	d034      	beq.n	800f972 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f90e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f912:	d01d      	beq.n	800f950 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800f914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f918:	d817      	bhi.n	800f94a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d003      	beq.n	800f926 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800f91e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f922:	d009      	beq.n	800f938 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800f924:	e011      	b.n	800f94a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	3304      	adds	r3, #4
 800f92a:	2100      	movs	r1, #0
 800f92c:	4618      	mov	r0, r3
 800f92e:	f000 f941 	bl	800fbb4 <RCCEx_PLL2_Config>
 800f932:	4603      	mov	r3, r0
 800f934:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800f936:	e00c      	b.n	800f952 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	3324      	adds	r3, #36	; 0x24
 800f93c:	2102      	movs	r1, #2
 800f93e:	4618      	mov	r0, r3
 800f940:	f000 f9ea 	bl	800fd18 <RCCEx_PLL3_Config>
 800f944:	4603      	mov	r3, r0
 800f946:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800f948:	e003      	b.n	800f952 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f94a:	2301      	movs	r3, #1
 800f94c:	75fb      	strb	r3, [r7, #23]
      break;
 800f94e:	e000      	b.n	800f952 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800f950:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f952:	7dfb      	ldrb	r3, [r7, #23]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d10a      	bne.n	800f96e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f958:	4b22      	ldr	r3, [pc, #136]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f95a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f95c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f966:	491f      	ldr	r1, [pc, #124]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f968:	4313      	orrs	r3, r2
 800f96a:	658b      	str	r3, [r1, #88]	; 0x58
 800f96c:	e001      	b.n	800f972 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f96e:	7dfb      	ldrb	r3, [r7, #23]
 800f970:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d036      	beq.n	800f9ec <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f984:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f988:	d01c      	beq.n	800f9c4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800f98a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f98e:	d816      	bhi.n	800f9be <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800f990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f994:	d003      	beq.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800f996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f99a:	d007      	beq.n	800f9ac <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800f99c:	e00f      	b.n	800f9be <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f99e:	4b11      	ldr	r3, [pc, #68]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a2:	4a10      	ldr	r2, [pc, #64]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f9a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f9a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800f9aa:	e00c      	b.n	800f9c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	3324      	adds	r3, #36	; 0x24
 800f9b0:	2101      	movs	r1, #1
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f000 f9b0 	bl	800fd18 <RCCEx_PLL3_Config>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800f9bc:	e003      	b.n	800f9c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f9be:	2301      	movs	r3, #1
 800f9c0:	75fb      	strb	r3, [r7, #23]
      break;
 800f9c2:	e000      	b.n	800f9c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800f9c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f9c6:	7dfb      	ldrb	r3, [r7, #23]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d10d      	bne.n	800f9e8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f9cc:	4b05      	ldr	r3, [pc, #20]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f9ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9da:	4902      	ldr	r1, [pc, #8]	; (800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	654b      	str	r3, [r1, #84]	; 0x54
 800f9e0:	e004      	b.n	800f9ec <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800f9e2:	bf00      	nop
 800f9e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9e8:	7dfb      	ldrb	r3, [r7, #23]
 800f9ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d029      	beq.n	800fa4c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d003      	beq.n	800fa08 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800fa00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa04:	d007      	beq.n	800fa16 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800fa06:	e00f      	b.n	800fa28 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa08:	4b69      	ldr	r3, [pc, #420]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa0c:	4a68      	ldr	r2, [pc, #416]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fa0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fa12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800fa14:	e00b      	b.n	800fa2e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	3304      	adds	r3, #4
 800fa1a:	2102      	movs	r1, #2
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f000 f8c9 	bl	800fbb4 <RCCEx_PLL2_Config>
 800fa22:	4603      	mov	r3, r0
 800fa24:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800fa26:	e002      	b.n	800fa2e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 800fa28:	2301      	movs	r3, #1
 800fa2a:	75fb      	strb	r3, [r7, #23]
      break;
 800fa2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fa2e:	7dfb      	ldrb	r3, [r7, #23]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d109      	bne.n	800fa48 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fa34:	4b5e      	ldr	r3, [pc, #376]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fa36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa40:	495b      	ldr	r1, [pc, #364]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fa42:	4313      	orrs	r3, r2
 800fa44:	64cb      	str	r3, [r1, #76]	; 0x4c
 800fa46:	e001      	b.n	800fa4c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa48:	7dfb      	ldrb	r3, [r7, #23]
 800fa4a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d00a      	beq.n	800fa6e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	3324      	adds	r3, #36	; 0x24
 800fa5c:	2102      	movs	r1, #2
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f000 f95a 	bl	800fd18 <RCCEx_PLL3_Config>
 800fa64:	4603      	mov	r3, r0
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d001      	beq.n	800fa6e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d032      	beq.n	800fae0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa84:	d017      	beq.n	800fab6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800fa86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa8a:	d811      	bhi.n	800fab0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800fa8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa90:	d013      	beq.n	800faba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800fa92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa96:	d80b      	bhi.n	800fab0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d010      	beq.n	800fabe <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800fa9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800faa0:	d106      	bne.n	800fab0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800faa2:	4b43      	ldr	r3, [pc, #268]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800faa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faa6:	4a42      	ldr	r2, [pc, #264]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800faa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800faac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800faae:	e007      	b.n	800fac0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fab0:	2301      	movs	r3, #1
 800fab2:	75fb      	strb	r3, [r7, #23]
      break;
 800fab4:	e004      	b.n	800fac0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800fab6:	bf00      	nop
 800fab8:	e002      	b.n	800fac0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800faba:	bf00      	nop
 800fabc:	e000      	b.n	800fac0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800fabe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fac0:	7dfb      	ldrb	r3, [r7, #23]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d10a      	bne.n	800fadc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fac6:	4b3a      	ldr	r3, [pc, #232]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fad4:	4936      	ldr	r1, [pc, #216]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fad6:	4313      	orrs	r3, r2
 800fad8:	654b      	str	r3, [r1, #84]	; 0x54
 800fada:	e001      	b.n	800fae0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fadc:	7dfb      	ldrb	r3, [r7, #23]
 800fade:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d008      	beq.n	800fafe <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800faec:	4b30      	ldr	r3, [pc, #192]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800faee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800faf8:	492d      	ldr	r1, [pc, #180]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fafa:	4313      	orrs	r3, r2
 800fafc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d008      	beq.n	800fb1c <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fb0a:	4b29      	ldr	r3, [pc, #164]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fb0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb16:	4926      	ldr	r1, [pc, #152]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d008      	beq.n	800fb3a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800fb28:	4b21      	ldr	r3, [pc, #132]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fb2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb34:	491e      	ldr	r1, [pc, #120]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fb36:	4313      	orrs	r3, r2
 800fb38:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00d      	beq.n	800fb62 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fb46:	4b1a      	ldr	r3, [pc, #104]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fb48:	691b      	ldr	r3, [r3, #16]
 800fb4a:	4a19      	ldr	r2, [pc, #100]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fb4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fb50:	6113      	str	r3, [r2, #16]
 800fb52:	4b17      	ldr	r3, [pc, #92]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fb54:	691a      	ldr	r2, [r3, #16]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fb5c:	4914      	ldr	r1, [pc, #80]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	da08      	bge.n	800fb7c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fb6a:	4b11      	ldr	r3, [pc, #68]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fb6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb76:	490e      	ldr	r1, [pc, #56]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d009      	beq.n	800fb9c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fb88:	4b09      	ldr	r3, [pc, #36]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fb8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb96:	4906      	ldr	r1, [pc, #24]	; (800fbb0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800fb9c:	7dbb      	ldrb	r3, [r7, #22]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d101      	bne.n	800fba6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800fba2:	2300      	movs	r3, #0
 800fba4:	e000      	b.n	800fba8 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800fba6:	2301      	movs	r3, #1
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3718      	adds	r7, #24
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	58024400 	.word	0x58024400

0800fbb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fbc2:	4b53      	ldr	r3, [pc, #332]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fbc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbc6:	f003 0303 	and.w	r3, r3, #3
 800fbca:	2b03      	cmp	r3, #3
 800fbcc:	d101      	bne.n	800fbd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	e099      	b.n	800fd06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fbd2:	4b4f      	ldr	r3, [pc, #316]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	4a4e      	ldr	r2, [pc, #312]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fbd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fbdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fbde:	f7fa ffb1 	bl	800ab44 <HAL_GetTick>
 800fbe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fbe4:	e008      	b.n	800fbf8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800fbe6:	f7fa ffad 	bl	800ab44 <HAL_GetTick>
 800fbea:	4602      	mov	r2, r0
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	1ad3      	subs	r3, r2, r3
 800fbf0:	2b02      	cmp	r3, #2
 800fbf2:	d901      	bls.n	800fbf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fbf4:	2303      	movs	r3, #3
 800fbf6:	e086      	b.n	800fd06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fbf8:	4b45      	ldr	r3, [pc, #276]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d1f0      	bne.n	800fbe6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fc04:	4b42      	ldr	r3, [pc, #264]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	031b      	lsls	r3, r3, #12
 800fc12:	493f      	ldr	r1, [pc, #252]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fc14:	4313      	orrs	r3, r2
 800fc16:	628b      	str	r3, [r1, #40]	; 0x28
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	3b01      	subs	r3, #1
 800fc1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	689b      	ldr	r3, [r3, #8]
 800fc26:	3b01      	subs	r3, #1
 800fc28:	025b      	lsls	r3, r3, #9
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	431a      	orrs	r2, r3
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	68db      	ldr	r3, [r3, #12]
 800fc32:	3b01      	subs	r3, #1
 800fc34:	041b      	lsls	r3, r3, #16
 800fc36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fc3a:	431a      	orrs	r2, r3
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	691b      	ldr	r3, [r3, #16]
 800fc40:	3b01      	subs	r3, #1
 800fc42:	061b      	lsls	r3, r3, #24
 800fc44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fc48:	4931      	ldr	r1, [pc, #196]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fc4e:	4b30      	ldr	r3, [pc, #192]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fc50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	695b      	ldr	r3, [r3, #20]
 800fc5a:	492d      	ldr	r1, [pc, #180]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fc60:	4b2b      	ldr	r3, [pc, #172]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc64:	f023 0220 	bic.w	r2, r3, #32
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	699b      	ldr	r3, [r3, #24]
 800fc6c:	4928      	ldr	r1, [pc, #160]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fc72:	4b27      	ldr	r3, [pc, #156]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc76:	4a26      	ldr	r2, [pc, #152]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fc78:	f023 0310 	bic.w	r3, r3, #16
 800fc7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fc7e:	4b24      	ldr	r3, [pc, #144]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fc80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc82:	4b24      	ldr	r3, [pc, #144]	; (800fd14 <RCCEx_PLL2_Config+0x160>)
 800fc84:	4013      	ands	r3, r2
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	69d2      	ldr	r2, [r2, #28]
 800fc8a:	00d2      	lsls	r2, r2, #3
 800fc8c:	4920      	ldr	r1, [pc, #128]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fc8e:	4313      	orrs	r3, r2
 800fc90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800fc92:	4b1f      	ldr	r3, [pc, #124]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc96:	4a1e      	ldr	r2, [pc, #120]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fc98:	f043 0310 	orr.w	r3, r3, #16
 800fc9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d106      	bne.n	800fcb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fca4:	4b1a      	ldr	r3, [pc, #104]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fca8:	4a19      	ldr	r2, [pc, #100]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fcaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fcae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fcb0:	e00f      	b.n	800fcd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d106      	bne.n	800fcc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800fcb8:	4b15      	ldr	r3, [pc, #84]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcbc:	4a14      	ldr	r2, [pc, #80]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fcbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fcc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fcc4:	e005      	b.n	800fcd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800fcc6:	4b12      	ldr	r3, [pc, #72]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fcc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcca:	4a11      	ldr	r2, [pc, #68]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fcd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800fcd2:	4b0f      	ldr	r3, [pc, #60]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a0e      	ldr	r2, [pc, #56]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fcd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fcdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fcde:	f7fa ff31 	bl	800ab44 <HAL_GetTick>
 800fce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fce4:	e008      	b.n	800fcf8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800fce6:	f7fa ff2d 	bl	800ab44 <HAL_GetTick>
 800fcea:	4602      	mov	r2, r0
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	1ad3      	subs	r3, r2, r3
 800fcf0:	2b02      	cmp	r3, #2
 800fcf2:	d901      	bls.n	800fcf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fcf4:	2303      	movs	r3, #3
 800fcf6:	e006      	b.n	800fd06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fcf8:	4b05      	ldr	r3, [pc, #20]	; (800fd10 <RCCEx_PLL2_Config+0x15c>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d0f0      	beq.n	800fce6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800fd04:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3710      	adds	r7, #16
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	58024400 	.word	0x58024400
 800fd14:	ffff0007 	.word	0xffff0007

0800fd18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fd22:	2300      	movs	r3, #0
 800fd24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fd26:	4b53      	ldr	r3, [pc, #332]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fd28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd2a:	f003 0303 	and.w	r3, r3, #3
 800fd2e:	2b03      	cmp	r3, #3
 800fd30:	d101      	bne.n	800fd36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800fd32:	2301      	movs	r3, #1
 800fd34:	e099      	b.n	800fe6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800fd36:	4b4f      	ldr	r3, [pc, #316]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	4a4e      	ldr	r2, [pc, #312]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fd3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fd40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd42:	f7fa feff 	bl	800ab44 <HAL_GetTick>
 800fd46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fd48:	e008      	b.n	800fd5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800fd4a:	f7fa fefb 	bl	800ab44 <HAL_GetTick>
 800fd4e:	4602      	mov	r2, r0
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	1ad3      	subs	r3, r2, r3
 800fd54:	2b02      	cmp	r3, #2
 800fd56:	d901      	bls.n	800fd5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fd58:	2303      	movs	r3, #3
 800fd5a:	e086      	b.n	800fe6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fd5c:	4b45      	ldr	r3, [pc, #276]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d1f0      	bne.n	800fd4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800fd68:	4b42      	ldr	r3, [pc, #264]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	051b      	lsls	r3, r3, #20
 800fd76:	493f      	ldr	r1, [pc, #252]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fd78:	4313      	orrs	r3, r2
 800fd7a:	628b      	str	r3, [r1, #40]	; 0x28
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	3b01      	subs	r3, #1
 800fd82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	689b      	ldr	r3, [r3, #8]
 800fd8a:	3b01      	subs	r3, #1
 800fd8c:	025b      	lsls	r3, r3, #9
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	431a      	orrs	r2, r3
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	68db      	ldr	r3, [r3, #12]
 800fd96:	3b01      	subs	r3, #1
 800fd98:	041b      	lsls	r3, r3, #16
 800fd9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fd9e:	431a      	orrs	r2, r3
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	691b      	ldr	r3, [r3, #16]
 800fda4:	3b01      	subs	r3, #1
 800fda6:	061b      	lsls	r3, r3, #24
 800fda8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fdac:	4931      	ldr	r1, [pc, #196]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800fdb2:	4b30      	ldr	r3, [pc, #192]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fdb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	695b      	ldr	r3, [r3, #20]
 800fdbe:	492d      	ldr	r1, [pc, #180]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fdc0:	4313      	orrs	r3, r2
 800fdc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800fdc4:	4b2b      	ldr	r3, [pc, #172]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	699b      	ldr	r3, [r3, #24]
 800fdd0:	4928      	ldr	r1, [pc, #160]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fdd2:	4313      	orrs	r3, r2
 800fdd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800fdd6:	4b27      	ldr	r3, [pc, #156]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fdd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdda:	4a26      	ldr	r2, [pc, #152]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fde0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fde2:	4b24      	ldr	r3, [pc, #144]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fde4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fde6:	4b24      	ldr	r3, [pc, #144]	; (800fe78 <RCCEx_PLL3_Config+0x160>)
 800fde8:	4013      	ands	r3, r2
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	69d2      	ldr	r2, [r2, #28]
 800fdee:	00d2      	lsls	r2, r2, #3
 800fdf0:	4920      	ldr	r1, [pc, #128]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fdf2:	4313      	orrs	r3, r2
 800fdf4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800fdf6:	4b1f      	ldr	r3, [pc, #124]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fdf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdfa:	4a1e      	ldr	r2, [pc, #120]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fdfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d106      	bne.n	800fe16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fe08:	4b1a      	ldr	r3, [pc, #104]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fe0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe0c:	4a19      	ldr	r2, [pc, #100]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fe0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fe12:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fe14:	e00f      	b.n	800fe36 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	2b01      	cmp	r3, #1
 800fe1a:	d106      	bne.n	800fe2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800fe1c:	4b15      	ldr	r3, [pc, #84]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fe1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe20:	4a14      	ldr	r2, [pc, #80]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fe22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fe26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fe28:	e005      	b.n	800fe36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800fe2a:	4b12      	ldr	r3, [pc, #72]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fe2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe2e:	4a11      	ldr	r2, [pc, #68]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fe30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fe34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800fe36:	4b0f      	ldr	r3, [pc, #60]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	4a0e      	ldr	r2, [pc, #56]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fe3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe42:	f7fa fe7f 	bl	800ab44 <HAL_GetTick>
 800fe46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fe48:	e008      	b.n	800fe5c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800fe4a:	f7fa fe7b 	bl	800ab44 <HAL_GetTick>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	1ad3      	subs	r3, r2, r3
 800fe54:	2b02      	cmp	r3, #2
 800fe56:	d901      	bls.n	800fe5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fe58:	2303      	movs	r3, #3
 800fe5a:	e006      	b.n	800fe6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fe5c:	4b05      	ldr	r3, [pc, #20]	; (800fe74 <RCCEx_PLL3_Config+0x15c>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d0f0      	beq.n	800fe4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800fe68:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3710      	adds	r7, #16
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	58024400 	.word	0x58024400
 800fe78:	ffff0007 	.word	0xffff0007

0800fe7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d101      	bne.n	800fe8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	e049      	b.n	800ff22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d106      	bne.n	800fea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f000 f841 	bl	800ff2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2202      	movs	r2, #2
 800feac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	3304      	adds	r3, #4
 800feb8:	4619      	mov	r1, r3
 800feba:	4610      	mov	r0, r2
 800febc:	f000 f9f8 	bl	80102b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2201      	movs	r2, #1
 800fec4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2201      	movs	r2, #1
 800fecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2201      	movs	r2, #1
 800fed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2201      	movs	r2, #1
 800fedc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2201      	movs	r2, #1
 800fee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2201      	movs	r2, #1
 800feec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2201      	movs	r2, #1
 800fef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2201      	movs	r2, #1
 800fefc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2201      	movs	r2, #1
 800ff04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2201      	movs	r2, #1
 800ff14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ff20:	2300      	movs	r3, #0
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3708      	adds	r7, #8
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ff2a:	b480      	push	{r7}
 800ff2c:	b083      	sub	sp, #12
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ff32:	bf00      	nop
 800ff34:	370c      	adds	r7, #12
 800ff36:	46bd      	mov	sp, r7
 800ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3c:	4770      	bx	lr
	...

0800ff40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b085      	sub	sp, #20
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	d001      	beq.n	800ff58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ff54:	2301      	movs	r3, #1
 800ff56:	e04f      	b.n	800fff8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2202      	movs	r2, #2
 800ff5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	68da      	ldr	r2, [r3, #12]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	f042 0201 	orr.w	r2, r2, #1
 800ff6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4a23      	ldr	r2, [pc, #140]	; (8010004 <HAL_TIM_Base_Start_IT+0xc4>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d01d      	beq.n	800ffb6 <HAL_TIM_Base_Start_IT+0x76>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff82:	d018      	beq.n	800ffb6 <HAL_TIM_Base_Start_IT+0x76>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4a1f      	ldr	r2, [pc, #124]	; (8010008 <HAL_TIM_Base_Start_IT+0xc8>)
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d013      	beq.n	800ffb6 <HAL_TIM_Base_Start_IT+0x76>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4a1e      	ldr	r2, [pc, #120]	; (801000c <HAL_TIM_Base_Start_IT+0xcc>)
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d00e      	beq.n	800ffb6 <HAL_TIM_Base_Start_IT+0x76>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4a1c      	ldr	r2, [pc, #112]	; (8010010 <HAL_TIM_Base_Start_IT+0xd0>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d009      	beq.n	800ffb6 <HAL_TIM_Base_Start_IT+0x76>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4a1b      	ldr	r2, [pc, #108]	; (8010014 <HAL_TIM_Base_Start_IT+0xd4>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d004      	beq.n	800ffb6 <HAL_TIM_Base_Start_IT+0x76>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4a19      	ldr	r2, [pc, #100]	; (8010018 <HAL_TIM_Base_Start_IT+0xd8>)
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d115      	bne.n	800ffe2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	689a      	ldr	r2, [r3, #8]
 800ffbc:	4b17      	ldr	r3, [pc, #92]	; (801001c <HAL_TIM_Base_Start_IT+0xdc>)
 800ffbe:	4013      	ands	r3, r2
 800ffc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	2b06      	cmp	r3, #6
 800ffc6:	d015      	beq.n	800fff4 <HAL_TIM_Base_Start_IT+0xb4>
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffce:	d011      	beq.n	800fff4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	681a      	ldr	r2, [r3, #0]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f042 0201 	orr.w	r2, r2, #1
 800ffde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ffe0:	e008      	b.n	800fff4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f042 0201 	orr.w	r2, r2, #1
 800fff0:	601a      	str	r2, [r3, #0]
 800fff2:	e000      	b.n	800fff6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fff4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fff6:	2300      	movs	r3, #0
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3714      	adds	r7, #20
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr
 8010004:	40010000 	.word	0x40010000
 8010008:	40000400 	.word	0x40000400
 801000c:	40000800 	.word	0x40000800
 8010010:	40000c00 	.word	0x40000c00
 8010014:	40010400 	.word	0x40010400
 8010018:	40001800 	.word	0x40001800
 801001c:	00010007 	.word	0x00010007

08010020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	691b      	ldr	r3, [r3, #16]
 801002e:	f003 0302 	and.w	r3, r3, #2
 8010032:	2b02      	cmp	r3, #2
 8010034:	d122      	bne.n	801007c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	f003 0302 	and.w	r3, r3, #2
 8010040:	2b02      	cmp	r3, #2
 8010042:	d11b      	bne.n	801007c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f06f 0202 	mvn.w	r2, #2
 801004c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2201      	movs	r2, #1
 8010052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	699b      	ldr	r3, [r3, #24]
 801005a:	f003 0303 	and.w	r3, r3, #3
 801005e:	2b00      	cmp	r3, #0
 8010060:	d003      	beq.n	801006a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f000 f905 	bl	8010272 <HAL_TIM_IC_CaptureCallback>
 8010068:	e005      	b.n	8010076 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 f8f7 	bl	801025e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 f908 	bl	8010286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2200      	movs	r2, #0
 801007a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	691b      	ldr	r3, [r3, #16]
 8010082:	f003 0304 	and.w	r3, r3, #4
 8010086:	2b04      	cmp	r3, #4
 8010088:	d122      	bne.n	80100d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	68db      	ldr	r3, [r3, #12]
 8010090:	f003 0304 	and.w	r3, r3, #4
 8010094:	2b04      	cmp	r3, #4
 8010096:	d11b      	bne.n	80100d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f06f 0204 	mvn.w	r2, #4
 80100a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2202      	movs	r2, #2
 80100a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	699b      	ldr	r3, [r3, #24]
 80100ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d003      	beq.n	80100be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f000 f8db 	bl	8010272 <HAL_TIM_IC_CaptureCallback>
 80100bc:	e005      	b.n	80100ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 f8cd 	bl	801025e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 f8de 	bl	8010286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2200      	movs	r2, #0
 80100ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	691b      	ldr	r3, [r3, #16]
 80100d6:	f003 0308 	and.w	r3, r3, #8
 80100da:	2b08      	cmp	r3, #8
 80100dc:	d122      	bne.n	8010124 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	f003 0308 	and.w	r3, r3, #8
 80100e8:	2b08      	cmp	r3, #8
 80100ea:	d11b      	bne.n	8010124 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	f06f 0208 	mvn.w	r2, #8
 80100f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2204      	movs	r2, #4
 80100fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	69db      	ldr	r3, [r3, #28]
 8010102:	f003 0303 	and.w	r3, r3, #3
 8010106:	2b00      	cmp	r3, #0
 8010108:	d003      	beq.n	8010112 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f000 f8b1 	bl	8010272 <HAL_TIM_IC_CaptureCallback>
 8010110:	e005      	b.n	801011e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f000 f8a3 	bl	801025e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f000 f8b4 	bl	8010286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	691b      	ldr	r3, [r3, #16]
 801012a:	f003 0310 	and.w	r3, r3, #16
 801012e:	2b10      	cmp	r3, #16
 8010130:	d122      	bne.n	8010178 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	68db      	ldr	r3, [r3, #12]
 8010138:	f003 0310 	and.w	r3, r3, #16
 801013c:	2b10      	cmp	r3, #16
 801013e:	d11b      	bne.n	8010178 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	f06f 0210 	mvn.w	r2, #16
 8010148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2208      	movs	r2, #8
 801014e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	69db      	ldr	r3, [r3, #28]
 8010156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801015a:	2b00      	cmp	r3, #0
 801015c:	d003      	beq.n	8010166 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f000 f887 	bl	8010272 <HAL_TIM_IC_CaptureCallback>
 8010164:	e005      	b.n	8010172 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f000 f879 	bl	801025e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 f88a 	bl	8010286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2200      	movs	r2, #0
 8010176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	691b      	ldr	r3, [r3, #16]
 801017e:	f003 0301 	and.w	r3, r3, #1
 8010182:	2b01      	cmp	r3, #1
 8010184:	d10e      	bne.n	80101a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	f003 0301 	and.w	r3, r3, #1
 8010190:	2b01      	cmp	r3, #1
 8010192:	d107      	bne.n	80101a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f06f 0201 	mvn.w	r2, #1
 801019c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f7f2 ff50 	bl	8003044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	691b      	ldr	r3, [r3, #16]
 80101aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101ae:	2b80      	cmp	r3, #128	; 0x80
 80101b0:	d10e      	bne.n	80101d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	68db      	ldr	r3, [r3, #12]
 80101b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101bc:	2b80      	cmp	r3, #128	; 0x80
 80101be:	d107      	bne.n	80101d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80101c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f000 f914 	bl	80103f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	691b      	ldr	r3, [r3, #16]
 80101d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101de:	d10e      	bne.n	80101fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101ea:	2b80      	cmp	r3, #128	; 0x80
 80101ec:	d107      	bne.n	80101fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80101f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f000 f907 	bl	801040c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	691b      	ldr	r3, [r3, #16]
 8010204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010208:	2b40      	cmp	r3, #64	; 0x40
 801020a:	d10e      	bne.n	801022a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	68db      	ldr	r3, [r3, #12]
 8010212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010216:	2b40      	cmp	r3, #64	; 0x40
 8010218:	d107      	bne.n	801022a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 f838 	bl	801029a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	691b      	ldr	r3, [r3, #16]
 8010230:	f003 0320 	and.w	r3, r3, #32
 8010234:	2b20      	cmp	r3, #32
 8010236:	d10e      	bne.n	8010256 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	f003 0320 	and.w	r3, r3, #32
 8010242:	2b20      	cmp	r3, #32
 8010244:	d107      	bne.n	8010256 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	f06f 0220 	mvn.w	r2, #32
 801024e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f000 f8c7 	bl	80103e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010256:	bf00      	nop
 8010258:	3708      	adds	r7, #8
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801025e:	b480      	push	{r7}
 8010260:	b083      	sub	sp, #12
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010266:	bf00      	nop
 8010268:	370c      	adds	r7, #12
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr

08010272 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010272:	b480      	push	{r7}
 8010274:	b083      	sub	sp, #12
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801027a:	bf00      	nop
 801027c:	370c      	adds	r7, #12
 801027e:	46bd      	mov	sp, r7
 8010280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010284:	4770      	bx	lr

08010286 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010286:	b480      	push	{r7}
 8010288:	b083      	sub	sp, #12
 801028a:	af00      	add	r7, sp, #0
 801028c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801028e:	bf00      	nop
 8010290:	370c      	adds	r7, #12
 8010292:	46bd      	mov	sp, r7
 8010294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010298:	4770      	bx	lr

0801029a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801029a:	b480      	push	{r7}
 801029c:	b083      	sub	sp, #12
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80102a2:	bf00      	nop
 80102a4:	370c      	adds	r7, #12
 80102a6:	46bd      	mov	sp, r7
 80102a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ac:	4770      	bx	lr
	...

080102b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b085      	sub	sp, #20
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	4a40      	ldr	r2, [pc, #256]	; (80103c4 <TIM_Base_SetConfig+0x114>)
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d013      	beq.n	80102f0 <TIM_Base_SetConfig+0x40>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102ce:	d00f      	beq.n	80102f0 <TIM_Base_SetConfig+0x40>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	4a3d      	ldr	r2, [pc, #244]	; (80103c8 <TIM_Base_SetConfig+0x118>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d00b      	beq.n	80102f0 <TIM_Base_SetConfig+0x40>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	4a3c      	ldr	r2, [pc, #240]	; (80103cc <TIM_Base_SetConfig+0x11c>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d007      	beq.n	80102f0 <TIM_Base_SetConfig+0x40>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	4a3b      	ldr	r2, [pc, #236]	; (80103d0 <TIM_Base_SetConfig+0x120>)
 80102e4:	4293      	cmp	r3, r2
 80102e6:	d003      	beq.n	80102f0 <TIM_Base_SetConfig+0x40>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	4a3a      	ldr	r2, [pc, #232]	; (80103d4 <TIM_Base_SetConfig+0x124>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d108      	bne.n	8010302 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	68fa      	ldr	r2, [r7, #12]
 80102fe:	4313      	orrs	r3, r2
 8010300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4a2f      	ldr	r2, [pc, #188]	; (80103c4 <TIM_Base_SetConfig+0x114>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d01f      	beq.n	801034a <TIM_Base_SetConfig+0x9a>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010310:	d01b      	beq.n	801034a <TIM_Base_SetConfig+0x9a>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	4a2c      	ldr	r2, [pc, #176]	; (80103c8 <TIM_Base_SetConfig+0x118>)
 8010316:	4293      	cmp	r3, r2
 8010318:	d017      	beq.n	801034a <TIM_Base_SetConfig+0x9a>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4a2b      	ldr	r2, [pc, #172]	; (80103cc <TIM_Base_SetConfig+0x11c>)
 801031e:	4293      	cmp	r3, r2
 8010320:	d013      	beq.n	801034a <TIM_Base_SetConfig+0x9a>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	4a2a      	ldr	r2, [pc, #168]	; (80103d0 <TIM_Base_SetConfig+0x120>)
 8010326:	4293      	cmp	r3, r2
 8010328:	d00f      	beq.n	801034a <TIM_Base_SetConfig+0x9a>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4a29      	ldr	r2, [pc, #164]	; (80103d4 <TIM_Base_SetConfig+0x124>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d00b      	beq.n	801034a <TIM_Base_SetConfig+0x9a>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4a28      	ldr	r2, [pc, #160]	; (80103d8 <TIM_Base_SetConfig+0x128>)
 8010336:	4293      	cmp	r3, r2
 8010338:	d007      	beq.n	801034a <TIM_Base_SetConfig+0x9a>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	4a27      	ldr	r2, [pc, #156]	; (80103dc <TIM_Base_SetConfig+0x12c>)
 801033e:	4293      	cmp	r3, r2
 8010340:	d003      	beq.n	801034a <TIM_Base_SetConfig+0x9a>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	4a26      	ldr	r2, [pc, #152]	; (80103e0 <TIM_Base_SetConfig+0x130>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d108      	bne.n	801035c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	68fa      	ldr	r2, [r7, #12]
 8010358:	4313      	orrs	r3, r2
 801035a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	695b      	ldr	r3, [r3, #20]
 8010366:	4313      	orrs	r3, r2
 8010368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	68fa      	ldr	r2, [r7, #12]
 801036e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	689a      	ldr	r2, [r3, #8]
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	4a10      	ldr	r2, [pc, #64]	; (80103c4 <TIM_Base_SetConfig+0x114>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d00f      	beq.n	80103a8 <TIM_Base_SetConfig+0xf8>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	4a12      	ldr	r2, [pc, #72]	; (80103d4 <TIM_Base_SetConfig+0x124>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d00b      	beq.n	80103a8 <TIM_Base_SetConfig+0xf8>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	4a11      	ldr	r2, [pc, #68]	; (80103d8 <TIM_Base_SetConfig+0x128>)
 8010394:	4293      	cmp	r3, r2
 8010396:	d007      	beq.n	80103a8 <TIM_Base_SetConfig+0xf8>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	4a10      	ldr	r2, [pc, #64]	; (80103dc <TIM_Base_SetConfig+0x12c>)
 801039c:	4293      	cmp	r3, r2
 801039e:	d003      	beq.n	80103a8 <TIM_Base_SetConfig+0xf8>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4a0f      	ldr	r2, [pc, #60]	; (80103e0 <TIM_Base_SetConfig+0x130>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d103      	bne.n	80103b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	691a      	ldr	r2, [r3, #16]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2201      	movs	r2, #1
 80103b4:	615a      	str	r2, [r3, #20]
}
 80103b6:	bf00      	nop
 80103b8:	3714      	adds	r7, #20
 80103ba:	46bd      	mov	sp, r7
 80103bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c0:	4770      	bx	lr
 80103c2:	bf00      	nop
 80103c4:	40010000 	.word	0x40010000
 80103c8:	40000400 	.word	0x40000400
 80103cc:	40000800 	.word	0x40000800
 80103d0:	40000c00 	.word	0x40000c00
 80103d4:	40010400 	.word	0x40010400
 80103d8:	40014000 	.word	0x40014000
 80103dc:	40014400 	.word	0x40014400
 80103e0:	40014800 	.word	0x40014800

080103e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80103ec:	bf00      	nop
 80103ee:	370c      	adds	r7, #12
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr

080103f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80103f8:	b480      	push	{r7}
 80103fa:	b083      	sub	sp, #12
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010400:	bf00      	nop
 8010402:	370c      	adds	r7, #12
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801040c:	b480      	push	{r7}
 801040e:	b083      	sub	sp, #12
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010414:	bf00      	nop
 8010416:	370c      	adds	r7, #12
 8010418:	46bd      	mov	sp, r7
 801041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041e:	4770      	bx	lr

08010420 <__NVIC_SetPriority>:
{
 8010420:	b480      	push	{r7}
 8010422:	b083      	sub	sp, #12
 8010424:	af00      	add	r7, sp, #0
 8010426:	4603      	mov	r3, r0
 8010428:	6039      	str	r1, [r7, #0]
 801042a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801042c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010430:	2b00      	cmp	r3, #0
 8010432:	db0a      	blt.n	801044a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	b2da      	uxtb	r2, r3
 8010438:	490c      	ldr	r1, [pc, #48]	; (801046c <__NVIC_SetPriority+0x4c>)
 801043a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801043e:	0112      	lsls	r2, r2, #4
 8010440:	b2d2      	uxtb	r2, r2
 8010442:	440b      	add	r3, r1
 8010444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010448:	e00a      	b.n	8010460 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	b2da      	uxtb	r2, r3
 801044e:	4908      	ldr	r1, [pc, #32]	; (8010470 <__NVIC_SetPriority+0x50>)
 8010450:	88fb      	ldrh	r3, [r7, #6]
 8010452:	f003 030f 	and.w	r3, r3, #15
 8010456:	3b04      	subs	r3, #4
 8010458:	0112      	lsls	r2, r2, #4
 801045a:	b2d2      	uxtb	r2, r2
 801045c:	440b      	add	r3, r1
 801045e:	761a      	strb	r2, [r3, #24]
}
 8010460:	bf00      	nop
 8010462:	370c      	adds	r7, #12
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr
 801046c:	e000e100 	.word	0xe000e100
 8010470:	e000ed00 	.word	0xe000ed00

08010474 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010474:	b580      	push	{r7, lr}
 8010476:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010478:	4b05      	ldr	r3, [pc, #20]	; (8010490 <SysTick_Handler+0x1c>)
 801047a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801047c:	f002 fea8 	bl	80131d0 <xTaskGetSchedulerState>
 8010480:	4603      	mov	r3, r0
 8010482:	2b01      	cmp	r3, #1
 8010484:	d001      	beq.n	801048a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010486:	f000 ffe7 	bl	8011458 <xPortSysTickHandler>
  }
}
 801048a:	bf00      	nop
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	e000e010 	.word	0xe000e010

08010494 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010494:	b580      	push	{r7, lr}
 8010496:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010498:	2100      	movs	r1, #0
 801049a:	f06f 0004 	mvn.w	r0, #4
 801049e:	f7ff ffbf 	bl	8010420 <__NVIC_SetPriority>
#endif
}
 80104a2:	bf00      	nop
 80104a4:	bd80      	pop	{r7, pc}
	...

080104a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80104a8:	b480      	push	{r7}
 80104aa:	b083      	sub	sp, #12
 80104ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104ae:	f3ef 8305 	mrs	r3, IPSR
 80104b2:	603b      	str	r3, [r7, #0]
  return(result);
 80104b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d003      	beq.n	80104c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80104ba:	f06f 0305 	mvn.w	r3, #5
 80104be:	607b      	str	r3, [r7, #4]
 80104c0:	e00c      	b.n	80104dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80104c2:	4b0a      	ldr	r3, [pc, #40]	; (80104ec <osKernelInitialize+0x44>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d105      	bne.n	80104d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80104ca:	4b08      	ldr	r3, [pc, #32]	; (80104ec <osKernelInitialize+0x44>)
 80104cc:	2201      	movs	r2, #1
 80104ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80104d0:	2300      	movs	r3, #0
 80104d2:	607b      	str	r3, [r7, #4]
 80104d4:	e002      	b.n	80104dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80104d6:	f04f 33ff 	mov.w	r3, #4294967295
 80104da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80104dc:	687b      	ldr	r3, [r7, #4]
}
 80104de:	4618      	mov	r0, r3
 80104e0:	370c      	adds	r7, #12
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	24003b88 	.word	0x24003b88

080104f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104f6:	f3ef 8305 	mrs	r3, IPSR
 80104fa:	603b      	str	r3, [r7, #0]
  return(result);
 80104fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d003      	beq.n	801050a <osKernelStart+0x1a>
    stat = osErrorISR;
 8010502:	f06f 0305 	mvn.w	r3, #5
 8010506:	607b      	str	r3, [r7, #4]
 8010508:	e010      	b.n	801052c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801050a:	4b0b      	ldr	r3, [pc, #44]	; (8010538 <osKernelStart+0x48>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	2b01      	cmp	r3, #1
 8010510:	d109      	bne.n	8010526 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010512:	f7ff ffbf 	bl	8010494 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010516:	4b08      	ldr	r3, [pc, #32]	; (8010538 <osKernelStart+0x48>)
 8010518:	2202      	movs	r2, #2
 801051a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801051c:	f002 fa10 	bl	8012940 <vTaskStartScheduler>
      stat = osOK;
 8010520:	2300      	movs	r3, #0
 8010522:	607b      	str	r3, [r7, #4]
 8010524:	e002      	b.n	801052c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010526:	f04f 33ff 	mov.w	r3, #4294967295
 801052a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801052c:	687b      	ldr	r3, [r7, #4]
}
 801052e:	4618      	mov	r0, r3
 8010530:	3708      	adds	r7, #8
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
 8010536:	bf00      	nop
 8010538:	24003b88 	.word	0x24003b88

0801053c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801053c:	b580      	push	{r7, lr}
 801053e:	b08e      	sub	sp, #56	; 0x38
 8010540:	af04      	add	r7, sp, #16
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010548:	2300      	movs	r3, #0
 801054a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801054c:	f3ef 8305 	mrs	r3, IPSR
 8010550:	617b      	str	r3, [r7, #20]
  return(result);
 8010552:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010554:	2b00      	cmp	r3, #0
 8010556:	d17e      	bne.n	8010656 <osThreadNew+0x11a>
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d07b      	beq.n	8010656 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801055e:	2380      	movs	r3, #128	; 0x80
 8010560:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010562:	2318      	movs	r3, #24
 8010564:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010566:	2300      	movs	r3, #0
 8010568:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801056a:	f04f 33ff 	mov.w	r3, #4294967295
 801056e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d045      	beq.n	8010602 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d002      	beq.n	8010584 <osThreadNew+0x48>
        name = attr->name;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	699b      	ldr	r3, [r3, #24]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d002      	beq.n	8010592 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	699b      	ldr	r3, [r3, #24]
 8010590:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010592:	69fb      	ldr	r3, [r7, #28]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d008      	beq.n	80105aa <osThreadNew+0x6e>
 8010598:	69fb      	ldr	r3, [r7, #28]
 801059a:	2b38      	cmp	r3, #56	; 0x38
 801059c:	d805      	bhi.n	80105aa <osThreadNew+0x6e>
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	f003 0301 	and.w	r3, r3, #1
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d001      	beq.n	80105ae <osThreadNew+0x72>
        return (NULL);
 80105aa:	2300      	movs	r3, #0
 80105ac:	e054      	b.n	8010658 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	695b      	ldr	r3, [r3, #20]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d003      	beq.n	80105be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	695b      	ldr	r3, [r3, #20]
 80105ba:	089b      	lsrs	r3, r3, #2
 80105bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	689b      	ldr	r3, [r3, #8]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00e      	beq.n	80105e4 <osThreadNew+0xa8>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	2b5b      	cmp	r3, #91	; 0x5b
 80105cc:	d90a      	bls.n	80105e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d006      	beq.n	80105e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	695b      	ldr	r3, [r3, #20]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d002      	beq.n	80105e4 <osThreadNew+0xa8>
        mem = 1;
 80105de:	2301      	movs	r3, #1
 80105e0:	61bb      	str	r3, [r7, #24]
 80105e2:	e010      	b.n	8010606 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	689b      	ldr	r3, [r3, #8]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d10c      	bne.n	8010606 <osThreadNew+0xca>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d108      	bne.n	8010606 <osThreadNew+0xca>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	691b      	ldr	r3, [r3, #16]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d104      	bne.n	8010606 <osThreadNew+0xca>
          mem = 0;
 80105fc:	2300      	movs	r3, #0
 80105fe:	61bb      	str	r3, [r7, #24]
 8010600:	e001      	b.n	8010606 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010602:	2300      	movs	r3, #0
 8010604:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010606:	69bb      	ldr	r3, [r7, #24]
 8010608:	2b01      	cmp	r3, #1
 801060a:	d110      	bne.n	801062e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010614:	9202      	str	r2, [sp, #8]
 8010616:	9301      	str	r3, [sp, #4]
 8010618:	69fb      	ldr	r3, [r7, #28]
 801061a:	9300      	str	r3, [sp, #0]
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	6a3a      	ldr	r2, [r7, #32]
 8010620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010622:	68f8      	ldr	r0, [r7, #12]
 8010624:	f001 ffb6 	bl	8012594 <xTaskCreateStatic>
 8010628:	4603      	mov	r3, r0
 801062a:	613b      	str	r3, [r7, #16]
 801062c:	e013      	b.n	8010656 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801062e:	69bb      	ldr	r3, [r7, #24]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d110      	bne.n	8010656 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010634:	6a3b      	ldr	r3, [r7, #32]
 8010636:	b29a      	uxth	r2, r3
 8010638:	f107 0310 	add.w	r3, r7, #16
 801063c:	9301      	str	r3, [sp, #4]
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	9300      	str	r3, [sp, #0]
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010646:	68f8      	ldr	r0, [r7, #12]
 8010648:	f002 f801 	bl	801264e <xTaskCreate>
 801064c:	4603      	mov	r3, r0
 801064e:	2b01      	cmp	r3, #1
 8010650:	d001      	beq.n	8010656 <osThreadNew+0x11a>
            hTask = NULL;
 8010652:	2300      	movs	r3, #0
 8010654:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010656:	693b      	ldr	r3, [r7, #16]
}
 8010658:	4618      	mov	r0, r3
 801065a:	3728      	adds	r7, #40	; 0x28
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010660:	b580      	push	{r7, lr}
 8010662:	b084      	sub	sp, #16
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010668:	f3ef 8305 	mrs	r3, IPSR
 801066c:	60bb      	str	r3, [r7, #8]
  return(result);
 801066e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010670:	2b00      	cmp	r3, #0
 8010672:	d003      	beq.n	801067c <osDelay+0x1c>
    stat = osErrorISR;
 8010674:	f06f 0305 	mvn.w	r3, #5
 8010678:	60fb      	str	r3, [r7, #12]
 801067a:	e007      	b.n	801068c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801067c:	2300      	movs	r3, #0
 801067e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d002      	beq.n	801068c <osDelay+0x2c>
      vTaskDelay(ticks);
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f002 f926 	bl	80128d8 <vTaskDelay>
    }
  }

  return (stat);
 801068c:	68fb      	ldr	r3, [r7, #12]
}
 801068e:	4618      	mov	r0, r3
 8010690:	3710      	adds	r7, #16
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}

08010696 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010696:	b580      	push	{r7, lr}
 8010698:	b08a      	sub	sp, #40	; 0x28
 801069a:	af02      	add	r7, sp, #8
 801069c:	60f8      	str	r0, [r7, #12]
 801069e:	60b9      	str	r1, [r7, #8]
 80106a0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80106a2:	2300      	movs	r3, #0
 80106a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106a6:	f3ef 8305 	mrs	r3, IPSR
 80106aa:	613b      	str	r3, [r7, #16]
  return(result);
 80106ac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d175      	bne.n	801079e <osSemaphoreNew+0x108>
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d072      	beq.n	801079e <osSemaphoreNew+0x108>
 80106b8:	68ba      	ldr	r2, [r7, #8]
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	429a      	cmp	r2, r3
 80106be:	d86e      	bhi.n	801079e <osSemaphoreNew+0x108>
    mem = -1;
 80106c0:	f04f 33ff 	mov.w	r3, #4294967295
 80106c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d015      	beq.n	80106f8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	689b      	ldr	r3, [r3, #8]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d006      	beq.n	80106e2 <osSemaphoreNew+0x4c>
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	2b4f      	cmp	r3, #79	; 0x4f
 80106da:	d902      	bls.n	80106e2 <osSemaphoreNew+0x4c>
        mem = 1;
 80106dc:	2301      	movs	r3, #1
 80106de:	61bb      	str	r3, [r7, #24]
 80106e0:	e00c      	b.n	80106fc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	689b      	ldr	r3, [r3, #8]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d108      	bne.n	80106fc <osSemaphoreNew+0x66>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	68db      	ldr	r3, [r3, #12]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d104      	bne.n	80106fc <osSemaphoreNew+0x66>
          mem = 0;
 80106f2:	2300      	movs	r3, #0
 80106f4:	61bb      	str	r3, [r7, #24]
 80106f6:	e001      	b.n	80106fc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80106f8:	2300      	movs	r3, #0
 80106fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80106fc:	69bb      	ldr	r3, [r7, #24]
 80106fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010702:	d04c      	beq.n	801079e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2b01      	cmp	r3, #1
 8010708:	d128      	bne.n	801075c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801070a:	69bb      	ldr	r3, [r7, #24]
 801070c:	2b01      	cmp	r3, #1
 801070e:	d10a      	bne.n	8010726 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	689b      	ldr	r3, [r3, #8]
 8010714:	2203      	movs	r2, #3
 8010716:	9200      	str	r2, [sp, #0]
 8010718:	2200      	movs	r2, #0
 801071a:	2100      	movs	r1, #0
 801071c:	2001      	movs	r0, #1
 801071e:	f000 ff93 	bl	8011648 <xQueueGenericCreateStatic>
 8010722:	61f8      	str	r0, [r7, #28]
 8010724:	e005      	b.n	8010732 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8010726:	2203      	movs	r2, #3
 8010728:	2100      	movs	r1, #0
 801072a:	2001      	movs	r0, #1
 801072c:	f001 f804 	bl	8011738 <xQueueGenericCreate>
 8010730:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d022      	beq.n	801077e <osSemaphoreNew+0xe8>
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d01f      	beq.n	801077e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801073e:	2300      	movs	r3, #0
 8010740:	2200      	movs	r2, #0
 8010742:	2100      	movs	r1, #0
 8010744:	69f8      	ldr	r0, [r7, #28]
 8010746:	f001 f8bf 	bl	80118c8 <xQueueGenericSend>
 801074a:	4603      	mov	r3, r0
 801074c:	2b01      	cmp	r3, #1
 801074e:	d016      	beq.n	801077e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8010750:	69f8      	ldr	r0, [r7, #28]
 8010752:	f001 fd4b 	bl	80121ec <vQueueDelete>
            hSemaphore = NULL;
 8010756:	2300      	movs	r3, #0
 8010758:	61fb      	str	r3, [r7, #28]
 801075a:	e010      	b.n	801077e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801075c:	69bb      	ldr	r3, [r7, #24]
 801075e:	2b01      	cmp	r3, #1
 8010760:	d108      	bne.n	8010774 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	689b      	ldr	r3, [r3, #8]
 8010766:	461a      	mov	r2, r3
 8010768:	68b9      	ldr	r1, [r7, #8]
 801076a:	68f8      	ldr	r0, [r7, #12]
 801076c:	f001 f841 	bl	80117f2 <xQueueCreateCountingSemaphoreStatic>
 8010770:	61f8      	str	r0, [r7, #28]
 8010772:	e004      	b.n	801077e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010774:	68b9      	ldr	r1, [r7, #8]
 8010776:	68f8      	ldr	r0, [r7, #12]
 8010778:	f001 f872 	bl	8011860 <xQueueCreateCountingSemaphore>
 801077c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d00c      	beq.n	801079e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d003      	beq.n	8010792 <osSemaphoreNew+0xfc>
          name = attr->name;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	617b      	str	r3, [r7, #20]
 8010790:	e001      	b.n	8010796 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8010792:	2300      	movs	r3, #0
 8010794:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010796:	6979      	ldr	r1, [r7, #20]
 8010798:	69f8      	ldr	r0, [r7, #28]
 801079a:	f001 fe73 	bl	8012484 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801079e:	69fb      	ldr	r3, [r7, #28]
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3720      	adds	r7, #32
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b086      	sub	sp, #24
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80107b6:	2300      	movs	r3, #0
 80107b8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d103      	bne.n	80107c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80107c0:	f06f 0303 	mvn.w	r3, #3
 80107c4:	617b      	str	r3, [r7, #20]
 80107c6:	e039      	b.n	801083c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107c8:	f3ef 8305 	mrs	r3, IPSR
 80107cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80107ce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d022      	beq.n	801081a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d003      	beq.n	80107e2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80107da:	f06f 0303 	mvn.w	r3, #3
 80107de:	617b      	str	r3, [r7, #20]
 80107e0:	e02c      	b.n	801083c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80107e2:	2300      	movs	r3, #0
 80107e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80107e6:	f107 0308 	add.w	r3, r7, #8
 80107ea:	461a      	mov	r2, r3
 80107ec:	2100      	movs	r1, #0
 80107ee:	6938      	ldr	r0, [r7, #16]
 80107f0:	f001 fc7c 	bl	80120ec <xQueueReceiveFromISR>
 80107f4:	4603      	mov	r3, r0
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	d003      	beq.n	8010802 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80107fa:	f06f 0302 	mvn.w	r3, #2
 80107fe:	617b      	str	r3, [r7, #20]
 8010800:	e01c      	b.n	801083c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d019      	beq.n	801083c <osSemaphoreAcquire+0x94>
 8010808:	4b0f      	ldr	r3, [pc, #60]	; (8010848 <osSemaphoreAcquire+0xa0>)
 801080a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801080e:	601a      	str	r2, [r3, #0]
 8010810:	f3bf 8f4f 	dsb	sy
 8010814:	f3bf 8f6f 	isb	sy
 8010818:	e010      	b.n	801083c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801081a:	6839      	ldr	r1, [r7, #0]
 801081c:	6938      	ldr	r0, [r7, #16]
 801081e:	f001 fb59 	bl	8011ed4 <xQueueSemaphoreTake>
 8010822:	4603      	mov	r3, r0
 8010824:	2b01      	cmp	r3, #1
 8010826:	d009      	beq.n	801083c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d003      	beq.n	8010836 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801082e:	f06f 0301 	mvn.w	r3, #1
 8010832:	617b      	str	r3, [r7, #20]
 8010834:	e002      	b.n	801083c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8010836:	f06f 0302 	mvn.w	r3, #2
 801083a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801083c:	697b      	ldr	r3, [r7, #20]
}
 801083e:	4618      	mov	r0, r3
 8010840:	3718      	adds	r7, #24
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
 8010846:	bf00      	nop
 8010848:	e000ed04 	.word	0xe000ed04

0801084c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801084c:	b580      	push	{r7, lr}
 801084e:	b086      	sub	sp, #24
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010858:	2300      	movs	r3, #0
 801085a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d103      	bne.n	801086a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010862:	f06f 0303 	mvn.w	r3, #3
 8010866:	617b      	str	r3, [r7, #20]
 8010868:	e02c      	b.n	80108c4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801086a:	f3ef 8305 	mrs	r3, IPSR
 801086e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010870:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010872:	2b00      	cmp	r3, #0
 8010874:	d01a      	beq.n	80108ac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8010876:	2300      	movs	r3, #0
 8010878:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801087a:	f107 0308 	add.w	r3, r7, #8
 801087e:	4619      	mov	r1, r3
 8010880:	6938      	ldr	r0, [r7, #16]
 8010882:	f001 f9ba 	bl	8011bfa <xQueueGiveFromISR>
 8010886:	4603      	mov	r3, r0
 8010888:	2b01      	cmp	r3, #1
 801088a:	d003      	beq.n	8010894 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 801088c:	f06f 0302 	mvn.w	r3, #2
 8010890:	617b      	str	r3, [r7, #20]
 8010892:	e017      	b.n	80108c4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d014      	beq.n	80108c4 <osSemaphoreRelease+0x78>
 801089a:	4b0d      	ldr	r3, [pc, #52]	; (80108d0 <osSemaphoreRelease+0x84>)
 801089c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108a0:	601a      	str	r2, [r3, #0]
 80108a2:	f3bf 8f4f 	dsb	sy
 80108a6:	f3bf 8f6f 	isb	sy
 80108aa:	e00b      	b.n	80108c4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80108ac:	2300      	movs	r3, #0
 80108ae:	2200      	movs	r2, #0
 80108b0:	2100      	movs	r1, #0
 80108b2:	6938      	ldr	r0, [r7, #16]
 80108b4:	f001 f808 	bl	80118c8 <xQueueGenericSend>
 80108b8:	4603      	mov	r3, r0
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d002      	beq.n	80108c4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80108be:	f06f 0302 	mvn.w	r3, #2
 80108c2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80108c4:	697b      	ldr	r3, [r7, #20]
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3718      	adds	r7, #24
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	e000ed04 	.word	0xe000ed04

080108d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b08a      	sub	sp, #40	; 0x28
 80108d8:	af02      	add	r7, sp, #8
 80108da:	60f8      	str	r0, [r7, #12]
 80108dc:	60b9      	str	r1, [r7, #8]
 80108de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80108e0:	2300      	movs	r3, #0
 80108e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108e4:	f3ef 8305 	mrs	r3, IPSR
 80108e8:	613b      	str	r3, [r7, #16]
  return(result);
 80108ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d15f      	bne.n	80109b0 <osMessageQueueNew+0xdc>
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d05c      	beq.n	80109b0 <osMessageQueueNew+0xdc>
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d059      	beq.n	80109b0 <osMessageQueueNew+0xdc>
    mem = -1;
 80108fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010900:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d029      	beq.n	801095c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d012      	beq.n	8010936 <osMessageQueueNew+0x62>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	2b4f      	cmp	r3, #79	; 0x4f
 8010916:	d90e      	bls.n	8010936 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801091c:	2b00      	cmp	r3, #0
 801091e:	d00a      	beq.n	8010936 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	695a      	ldr	r2, [r3, #20]
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	68b9      	ldr	r1, [r7, #8]
 8010928:	fb01 f303 	mul.w	r3, r1, r3
 801092c:	429a      	cmp	r2, r3
 801092e:	d302      	bcc.n	8010936 <osMessageQueueNew+0x62>
        mem = 1;
 8010930:	2301      	movs	r3, #1
 8010932:	61bb      	str	r3, [r7, #24]
 8010934:	e014      	b.n	8010960 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	689b      	ldr	r3, [r3, #8]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d110      	bne.n	8010960 <osMessageQueueNew+0x8c>
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	68db      	ldr	r3, [r3, #12]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d10c      	bne.n	8010960 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801094a:	2b00      	cmp	r3, #0
 801094c:	d108      	bne.n	8010960 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	695b      	ldr	r3, [r3, #20]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d104      	bne.n	8010960 <osMessageQueueNew+0x8c>
          mem = 0;
 8010956:	2300      	movs	r3, #0
 8010958:	61bb      	str	r3, [r7, #24]
 801095a:	e001      	b.n	8010960 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801095c:	2300      	movs	r3, #0
 801095e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	2b01      	cmp	r3, #1
 8010964:	d10b      	bne.n	801097e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	691a      	ldr	r2, [r3, #16]
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	689b      	ldr	r3, [r3, #8]
 801096e:	2100      	movs	r1, #0
 8010970:	9100      	str	r1, [sp, #0]
 8010972:	68b9      	ldr	r1, [r7, #8]
 8010974:	68f8      	ldr	r0, [r7, #12]
 8010976:	f000 fe67 	bl	8011648 <xQueueGenericCreateStatic>
 801097a:	61f8      	str	r0, [r7, #28]
 801097c:	e008      	b.n	8010990 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801097e:	69bb      	ldr	r3, [r7, #24]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d105      	bne.n	8010990 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010984:	2200      	movs	r2, #0
 8010986:	68b9      	ldr	r1, [r7, #8]
 8010988:	68f8      	ldr	r0, [r7, #12]
 801098a:	f000 fed5 	bl	8011738 <xQueueGenericCreate>
 801098e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010990:	69fb      	ldr	r3, [r7, #28]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d00c      	beq.n	80109b0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d003      	beq.n	80109a4 <osMessageQueueNew+0xd0>
        name = attr->name;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	617b      	str	r3, [r7, #20]
 80109a2:	e001      	b.n	80109a8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80109a4:	2300      	movs	r3, #0
 80109a6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80109a8:	6979      	ldr	r1, [r7, #20]
 80109aa:	69f8      	ldr	r0, [r7, #28]
 80109ac:	f001 fd6a 	bl	8012484 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80109b0:	69fb      	ldr	r3, [r7, #28]
}
 80109b2:	4618      	mov	r0, r3
 80109b4:	3720      	adds	r7, #32
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}
	...

080109bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80109bc:	b580      	push	{r7, lr}
 80109be:	b088      	sub	sp, #32
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	60f8      	str	r0, [r7, #12]
 80109c4:	60b9      	str	r1, [r7, #8]
 80109c6:	603b      	str	r3, [r7, #0]
 80109c8:	4613      	mov	r3, r2
 80109ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80109d0:	2300      	movs	r3, #0
 80109d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109d4:	f3ef 8305 	mrs	r3, IPSR
 80109d8:	617b      	str	r3, [r7, #20]
  return(result);
 80109da:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d028      	beq.n	8010a32 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80109e0:	69bb      	ldr	r3, [r7, #24]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d005      	beq.n	80109f2 <osMessageQueuePut+0x36>
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d002      	beq.n	80109f2 <osMessageQueuePut+0x36>
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d003      	beq.n	80109fa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80109f2:	f06f 0303 	mvn.w	r3, #3
 80109f6:	61fb      	str	r3, [r7, #28]
 80109f8:	e038      	b.n	8010a6c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80109fa:	2300      	movs	r3, #0
 80109fc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80109fe:	f107 0210 	add.w	r2, r7, #16
 8010a02:	2300      	movs	r3, #0
 8010a04:	68b9      	ldr	r1, [r7, #8]
 8010a06:	69b8      	ldr	r0, [r7, #24]
 8010a08:	f001 f85c 	bl	8011ac4 <xQueueGenericSendFromISR>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	d003      	beq.n	8010a1a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010a12:	f06f 0302 	mvn.w	r3, #2
 8010a16:	61fb      	str	r3, [r7, #28]
 8010a18:	e028      	b.n	8010a6c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d025      	beq.n	8010a6c <osMessageQueuePut+0xb0>
 8010a20:	4b15      	ldr	r3, [pc, #84]	; (8010a78 <osMessageQueuePut+0xbc>)
 8010a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a26:	601a      	str	r2, [r3, #0]
 8010a28:	f3bf 8f4f 	dsb	sy
 8010a2c:	f3bf 8f6f 	isb	sy
 8010a30:	e01c      	b.n	8010a6c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010a32:	69bb      	ldr	r3, [r7, #24]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d002      	beq.n	8010a3e <osMessageQueuePut+0x82>
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d103      	bne.n	8010a46 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8010a3e:	f06f 0303 	mvn.w	r3, #3
 8010a42:	61fb      	str	r3, [r7, #28]
 8010a44:	e012      	b.n	8010a6c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010a46:	2300      	movs	r3, #0
 8010a48:	683a      	ldr	r2, [r7, #0]
 8010a4a:	68b9      	ldr	r1, [r7, #8]
 8010a4c:	69b8      	ldr	r0, [r7, #24]
 8010a4e:	f000 ff3b 	bl	80118c8 <xQueueGenericSend>
 8010a52:	4603      	mov	r3, r0
 8010a54:	2b01      	cmp	r3, #1
 8010a56:	d009      	beq.n	8010a6c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d003      	beq.n	8010a66 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8010a5e:	f06f 0301 	mvn.w	r3, #1
 8010a62:	61fb      	str	r3, [r7, #28]
 8010a64:	e002      	b.n	8010a6c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8010a66:	f06f 0302 	mvn.w	r3, #2
 8010a6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010a6c:	69fb      	ldr	r3, [r7, #28]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3720      	adds	r7, #32
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	e000ed04 	.word	0xe000ed04

08010a7c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b088      	sub	sp, #32
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	60f8      	str	r0, [r7, #12]
 8010a84:	60b9      	str	r1, [r7, #8]
 8010a86:	607a      	str	r2, [r7, #4]
 8010a88:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a92:	f3ef 8305 	mrs	r3, IPSR
 8010a96:	617b      	str	r3, [r7, #20]
  return(result);
 8010a98:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d028      	beq.n	8010af0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010a9e:	69bb      	ldr	r3, [r7, #24]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d005      	beq.n	8010ab0 <osMessageQueueGet+0x34>
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d002      	beq.n	8010ab0 <osMessageQueueGet+0x34>
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d003      	beq.n	8010ab8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010ab0:	f06f 0303 	mvn.w	r3, #3
 8010ab4:	61fb      	str	r3, [r7, #28]
 8010ab6:	e037      	b.n	8010b28 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010abc:	f107 0310 	add.w	r3, r7, #16
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	68b9      	ldr	r1, [r7, #8]
 8010ac4:	69b8      	ldr	r0, [r7, #24]
 8010ac6:	f001 fb11 	bl	80120ec <xQueueReceiveFromISR>
 8010aca:	4603      	mov	r3, r0
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d003      	beq.n	8010ad8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010ad0:	f06f 0302 	mvn.w	r3, #2
 8010ad4:	61fb      	str	r3, [r7, #28]
 8010ad6:	e027      	b.n	8010b28 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d024      	beq.n	8010b28 <osMessageQueueGet+0xac>
 8010ade:	4b15      	ldr	r3, [pc, #84]	; (8010b34 <osMessageQueueGet+0xb8>)
 8010ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ae4:	601a      	str	r2, [r3, #0]
 8010ae6:	f3bf 8f4f 	dsb	sy
 8010aea:	f3bf 8f6f 	isb	sy
 8010aee:	e01b      	b.n	8010b28 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010af0:	69bb      	ldr	r3, [r7, #24]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d002      	beq.n	8010afc <osMessageQueueGet+0x80>
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d103      	bne.n	8010b04 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8010afc:	f06f 0303 	mvn.w	r3, #3
 8010b00:	61fb      	str	r3, [r7, #28]
 8010b02:	e011      	b.n	8010b28 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010b04:	683a      	ldr	r2, [r7, #0]
 8010b06:	68b9      	ldr	r1, [r7, #8]
 8010b08:	69b8      	ldr	r0, [r7, #24]
 8010b0a:	f001 f903 	bl	8011d14 <xQueueReceive>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d009      	beq.n	8010b28 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d003      	beq.n	8010b22 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8010b1a:	f06f 0301 	mvn.w	r3, #1
 8010b1e:	61fb      	str	r3, [r7, #28]
 8010b20:	e002      	b.n	8010b28 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010b22:	f06f 0302 	mvn.w	r3, #2
 8010b26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010b28:	69fb      	ldr	r3, [r7, #28]
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3720      	adds	r7, #32
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	e000ed04 	.word	0xe000ed04

08010b38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010b38:	b480      	push	{r7}
 8010b3a:	b085      	sub	sp, #20
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	60f8      	str	r0, [r7, #12]
 8010b40:	60b9      	str	r1, [r7, #8]
 8010b42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	4a07      	ldr	r2, [pc, #28]	; (8010b64 <vApplicationGetIdleTaskMemory+0x2c>)
 8010b48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	4a06      	ldr	r2, [pc, #24]	; (8010b68 <vApplicationGetIdleTaskMemory+0x30>)
 8010b4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2280      	movs	r2, #128	; 0x80
 8010b54:	601a      	str	r2, [r3, #0]
}
 8010b56:	bf00      	nop
 8010b58:	3714      	adds	r7, #20
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop
 8010b64:	24003b8c 	.word	0x24003b8c
 8010b68:	24003be8 	.word	0x24003be8

08010b6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010b6c:	b480      	push	{r7}
 8010b6e:	b085      	sub	sp, #20
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	4a07      	ldr	r2, [pc, #28]	; (8010b98 <vApplicationGetTimerTaskMemory+0x2c>)
 8010b7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	4a06      	ldr	r2, [pc, #24]	; (8010b9c <vApplicationGetTimerTaskMemory+0x30>)
 8010b82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010b8a:	601a      	str	r2, [r3, #0]
}
 8010b8c:	bf00      	nop
 8010b8e:	3714      	adds	r7, #20
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr
 8010b98:	24003de8 	.word	0x24003de8
 8010b9c:	24003e44 	.word	0x24003e44

08010ba0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b08a      	sub	sp, #40	; 0x28
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010bac:	f001 ff2e 	bl	8012a0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010bb0:	4b5b      	ldr	r3, [pc, #364]	; (8010d20 <pvPortMalloc+0x180>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d101      	bne.n	8010bbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010bb8:	f000 f920 	bl	8010dfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010bbc:	4b59      	ldr	r3, [pc, #356]	; (8010d24 <pvPortMalloc+0x184>)
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	4013      	ands	r3, r2
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f040 8093 	bne.w	8010cf0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d01d      	beq.n	8010c0c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010bd0:	2208      	movs	r2, #8
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f003 0307 	and.w	r3, r3, #7
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d014      	beq.n	8010c0c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f023 0307 	bic.w	r3, r3, #7
 8010be8:	3308      	adds	r3, #8
 8010bea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f003 0307 	and.w	r3, r3, #7
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d00a      	beq.n	8010c0c <pvPortMalloc+0x6c>
	__asm volatile
 8010bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfa:	f383 8811 	msr	BASEPRI, r3
 8010bfe:	f3bf 8f6f 	isb	sy
 8010c02:	f3bf 8f4f 	dsb	sy
 8010c06:	617b      	str	r3, [r7, #20]
}
 8010c08:	bf00      	nop
 8010c0a:	e7fe      	b.n	8010c0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d06e      	beq.n	8010cf0 <pvPortMalloc+0x150>
 8010c12:	4b45      	ldr	r3, [pc, #276]	; (8010d28 <pvPortMalloc+0x188>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d869      	bhi.n	8010cf0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010c1c:	4b43      	ldr	r3, [pc, #268]	; (8010d2c <pvPortMalloc+0x18c>)
 8010c1e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010c20:	4b42      	ldr	r3, [pc, #264]	; (8010d2c <pvPortMalloc+0x18c>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010c26:	e004      	b.n	8010c32 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d903      	bls.n	8010c44 <pvPortMalloc+0xa4>
 8010c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d1f1      	bne.n	8010c28 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010c44:	4b36      	ldr	r3, [pc, #216]	; (8010d20 <pvPortMalloc+0x180>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d050      	beq.n	8010cf0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010c4e:	6a3b      	ldr	r3, [r7, #32]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	2208      	movs	r2, #8
 8010c54:	4413      	add	r3, r2
 8010c56:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	6a3b      	ldr	r3, [r7, #32]
 8010c5e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c62:	685a      	ldr	r2, [r3, #4]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	1ad2      	subs	r2, r2, r3
 8010c68:	2308      	movs	r3, #8
 8010c6a:	005b      	lsls	r3, r3, #1
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d91f      	bls.n	8010cb0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	4413      	add	r3, r2
 8010c76:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c78:	69bb      	ldr	r3, [r7, #24]
 8010c7a:	f003 0307 	and.w	r3, r3, #7
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d00a      	beq.n	8010c98 <pvPortMalloc+0xf8>
	__asm volatile
 8010c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c86:	f383 8811 	msr	BASEPRI, r3
 8010c8a:	f3bf 8f6f 	isb	sy
 8010c8e:	f3bf 8f4f 	dsb	sy
 8010c92:	613b      	str	r3, [r7, #16]
}
 8010c94:	bf00      	nop
 8010c96:	e7fe      	b.n	8010c96 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9a:	685a      	ldr	r2, [r3, #4]
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	1ad2      	subs	r2, r2, r3
 8010ca0:	69bb      	ldr	r3, [r7, #24]
 8010ca2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca6:	687a      	ldr	r2, [r7, #4]
 8010ca8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010caa:	69b8      	ldr	r0, [r7, #24]
 8010cac:	f000 f908 	bl	8010ec0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010cb0:	4b1d      	ldr	r3, [pc, #116]	; (8010d28 <pvPortMalloc+0x188>)
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	1ad3      	subs	r3, r2, r3
 8010cba:	4a1b      	ldr	r2, [pc, #108]	; (8010d28 <pvPortMalloc+0x188>)
 8010cbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010cbe:	4b1a      	ldr	r3, [pc, #104]	; (8010d28 <pvPortMalloc+0x188>)
 8010cc0:	681a      	ldr	r2, [r3, #0]
 8010cc2:	4b1b      	ldr	r3, [pc, #108]	; (8010d30 <pvPortMalloc+0x190>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d203      	bcs.n	8010cd2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010cca:	4b17      	ldr	r3, [pc, #92]	; (8010d28 <pvPortMalloc+0x188>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	4a18      	ldr	r2, [pc, #96]	; (8010d30 <pvPortMalloc+0x190>)
 8010cd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd4:	685a      	ldr	r2, [r3, #4]
 8010cd6:	4b13      	ldr	r3, [pc, #76]	; (8010d24 <pvPortMalloc+0x184>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	431a      	orrs	r2, r3
 8010cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010ce6:	4b13      	ldr	r3, [pc, #76]	; (8010d34 <pvPortMalloc+0x194>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	3301      	adds	r3, #1
 8010cec:	4a11      	ldr	r2, [pc, #68]	; (8010d34 <pvPortMalloc+0x194>)
 8010cee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010cf0:	f001 fe9a 	bl	8012a28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010cf4:	69fb      	ldr	r3, [r7, #28]
 8010cf6:	f003 0307 	and.w	r3, r3, #7
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d00a      	beq.n	8010d14 <pvPortMalloc+0x174>
	__asm volatile
 8010cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d02:	f383 8811 	msr	BASEPRI, r3
 8010d06:	f3bf 8f6f 	isb	sy
 8010d0a:	f3bf 8f4f 	dsb	sy
 8010d0e:	60fb      	str	r3, [r7, #12]
}
 8010d10:	bf00      	nop
 8010d12:	e7fe      	b.n	8010d12 <pvPortMalloc+0x172>
	return pvReturn;
 8010d14:	69fb      	ldr	r3, [r7, #28]
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3728      	adds	r7, #40	; 0x28
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	2400c24c 	.word	0x2400c24c
 8010d24:	2400c260 	.word	0x2400c260
 8010d28:	2400c250 	.word	0x2400c250
 8010d2c:	2400c244 	.word	0x2400c244
 8010d30:	2400c254 	.word	0x2400c254
 8010d34:	2400c258 	.word	0x2400c258

08010d38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b086      	sub	sp, #24
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d04d      	beq.n	8010de6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010d4a:	2308      	movs	r3, #8
 8010d4c:	425b      	negs	r3, r3
 8010d4e:	697a      	ldr	r2, [r7, #20]
 8010d50:	4413      	add	r3, r2
 8010d52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	685a      	ldr	r2, [r3, #4]
 8010d5c:	4b24      	ldr	r3, [pc, #144]	; (8010df0 <vPortFree+0xb8>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	4013      	ands	r3, r2
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d10a      	bne.n	8010d7c <vPortFree+0x44>
	__asm volatile
 8010d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6a:	f383 8811 	msr	BASEPRI, r3
 8010d6e:	f3bf 8f6f 	isb	sy
 8010d72:	f3bf 8f4f 	dsb	sy
 8010d76:	60fb      	str	r3, [r7, #12]
}
 8010d78:	bf00      	nop
 8010d7a:	e7fe      	b.n	8010d7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d00a      	beq.n	8010d9a <vPortFree+0x62>
	__asm volatile
 8010d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d88:	f383 8811 	msr	BASEPRI, r3
 8010d8c:	f3bf 8f6f 	isb	sy
 8010d90:	f3bf 8f4f 	dsb	sy
 8010d94:	60bb      	str	r3, [r7, #8]
}
 8010d96:	bf00      	nop
 8010d98:	e7fe      	b.n	8010d98 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	685a      	ldr	r2, [r3, #4]
 8010d9e:	4b14      	ldr	r3, [pc, #80]	; (8010df0 <vPortFree+0xb8>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	4013      	ands	r3, r2
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d01e      	beq.n	8010de6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d11a      	bne.n	8010de6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	685a      	ldr	r2, [r3, #4]
 8010db4:	4b0e      	ldr	r3, [pc, #56]	; (8010df0 <vPortFree+0xb8>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	43db      	mvns	r3, r3
 8010dba:	401a      	ands	r2, r3
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010dc0:	f001 fe24 	bl	8012a0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	685a      	ldr	r2, [r3, #4]
 8010dc8:	4b0a      	ldr	r3, [pc, #40]	; (8010df4 <vPortFree+0xbc>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	4413      	add	r3, r2
 8010dce:	4a09      	ldr	r2, [pc, #36]	; (8010df4 <vPortFree+0xbc>)
 8010dd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010dd2:	6938      	ldr	r0, [r7, #16]
 8010dd4:	f000 f874 	bl	8010ec0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010dd8:	4b07      	ldr	r3, [pc, #28]	; (8010df8 <vPortFree+0xc0>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	3301      	adds	r3, #1
 8010dde:	4a06      	ldr	r2, [pc, #24]	; (8010df8 <vPortFree+0xc0>)
 8010de0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010de2:	f001 fe21 	bl	8012a28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010de6:	bf00      	nop
 8010de8:	3718      	adds	r7, #24
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	2400c260 	.word	0x2400c260
 8010df4:	2400c250 	.word	0x2400c250
 8010df8:	2400c25c 	.word	0x2400c25c

08010dfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b085      	sub	sp, #20
 8010e00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010e08:	4b27      	ldr	r3, [pc, #156]	; (8010ea8 <prvHeapInit+0xac>)
 8010e0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f003 0307 	and.w	r3, r3, #7
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d00c      	beq.n	8010e30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	3307      	adds	r3, #7
 8010e1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f023 0307 	bic.w	r3, r3, #7
 8010e22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010e24:	68ba      	ldr	r2, [r7, #8]
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	1ad3      	subs	r3, r2, r3
 8010e2a:	4a1f      	ldr	r2, [pc, #124]	; (8010ea8 <prvHeapInit+0xac>)
 8010e2c:	4413      	add	r3, r2
 8010e2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010e34:	4a1d      	ldr	r2, [pc, #116]	; (8010eac <prvHeapInit+0xb0>)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010e3a:	4b1c      	ldr	r3, [pc, #112]	; (8010eac <prvHeapInit+0xb0>)
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	68ba      	ldr	r2, [r7, #8]
 8010e44:	4413      	add	r3, r2
 8010e46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010e48:	2208      	movs	r2, #8
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	1a9b      	subs	r3, r3, r2
 8010e4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	f023 0307 	bic.w	r3, r3, #7
 8010e56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	4a15      	ldr	r2, [pc, #84]	; (8010eb0 <prvHeapInit+0xb4>)
 8010e5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010e5e:	4b14      	ldr	r3, [pc, #80]	; (8010eb0 <prvHeapInit+0xb4>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	2200      	movs	r2, #0
 8010e64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010e66:	4b12      	ldr	r3, [pc, #72]	; (8010eb0 <prvHeapInit+0xb4>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	68fa      	ldr	r2, [r7, #12]
 8010e76:	1ad2      	subs	r2, r2, r3
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010e7c:	4b0c      	ldr	r3, [pc, #48]	; (8010eb0 <prvHeapInit+0xb4>)
 8010e7e:	681a      	ldr	r2, [r3, #0]
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	4a0a      	ldr	r2, [pc, #40]	; (8010eb4 <prvHeapInit+0xb8>)
 8010e8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	4a09      	ldr	r2, [pc, #36]	; (8010eb8 <prvHeapInit+0xbc>)
 8010e92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010e94:	4b09      	ldr	r3, [pc, #36]	; (8010ebc <prvHeapInit+0xc0>)
 8010e96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010e9a:	601a      	str	r2, [r3, #0]
}
 8010e9c:	bf00      	nop
 8010e9e:	3714      	adds	r7, #20
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea6:	4770      	bx	lr
 8010ea8:	24004244 	.word	0x24004244
 8010eac:	2400c244 	.word	0x2400c244
 8010eb0:	2400c24c 	.word	0x2400c24c
 8010eb4:	2400c254 	.word	0x2400c254
 8010eb8:	2400c250 	.word	0x2400c250
 8010ebc:	2400c260 	.word	0x2400c260

08010ec0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b085      	sub	sp, #20
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010ec8:	4b28      	ldr	r3, [pc, #160]	; (8010f6c <prvInsertBlockIntoFreeList+0xac>)
 8010eca:	60fb      	str	r3, [r7, #12]
 8010ecc:	e002      	b.n	8010ed4 <prvInsertBlockIntoFreeList+0x14>
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	60fb      	str	r3, [r7, #12]
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	687a      	ldr	r2, [r7, #4]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d8f7      	bhi.n	8010ece <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	68ba      	ldr	r2, [r7, #8]
 8010ee8:	4413      	add	r3, r2
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d108      	bne.n	8010f02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	685a      	ldr	r2, [r3, #4]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	685b      	ldr	r3, [r3, #4]
 8010ef8:	441a      	add	r2, r3
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	68ba      	ldr	r2, [r7, #8]
 8010f0c:	441a      	add	r2, r3
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d118      	bne.n	8010f48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	681a      	ldr	r2, [r3, #0]
 8010f1a:	4b15      	ldr	r3, [pc, #84]	; (8010f70 <prvInsertBlockIntoFreeList+0xb0>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d00d      	beq.n	8010f3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	685a      	ldr	r2, [r3, #4]
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	441a      	add	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	681a      	ldr	r2, [r3, #0]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	601a      	str	r2, [r3, #0]
 8010f3c:	e008      	b.n	8010f50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010f3e:	4b0c      	ldr	r3, [pc, #48]	; (8010f70 <prvInsertBlockIntoFreeList+0xb0>)
 8010f40:	681a      	ldr	r2, [r3, #0]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	601a      	str	r2, [r3, #0]
 8010f46:	e003      	b.n	8010f50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	681a      	ldr	r2, [r3, #0]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010f50:	68fa      	ldr	r2, [r7, #12]
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d002      	beq.n	8010f5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	687a      	ldr	r2, [r7, #4]
 8010f5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f5e:	bf00      	nop
 8010f60:	3714      	adds	r7, #20
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr
 8010f6a:	bf00      	nop
 8010f6c:	2400c244 	.word	0x2400c244
 8010f70:	2400c24c 	.word	0x2400c24c

08010f74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010f74:	b480      	push	{r7}
 8010f76:	b083      	sub	sp, #12
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f103 0208 	add.w	r2, r3, #8
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f04f 32ff 	mov.w	r2, #4294967295
 8010f8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f103 0208 	add.w	r2, r3, #8
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f103 0208 	add.w	r2, r3, #8
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010fa8:	bf00      	nop
 8010faa:	370c      	adds	r7, #12
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b083      	sub	sp, #12
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010fc2:	bf00      	nop
 8010fc4:	370c      	adds	r7, #12
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fcc:	4770      	bx	lr

08010fce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010fce:	b480      	push	{r7}
 8010fd0:	b085      	sub	sp, #20
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
 8010fd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	68fa      	ldr	r2, [r7, #12]
 8010fe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	689a      	ldr	r2, [r3, #8]
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	689b      	ldr	r3, [r3, #8]
 8010ff0:	683a      	ldr	r2, [r7, #0]
 8010ff2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	683a      	ldr	r2, [r7, #0]
 8010ff8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	687a      	ldr	r2, [r7, #4]
 8010ffe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	1c5a      	adds	r2, r3, #1
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	601a      	str	r2, [r3, #0]
}
 801100a:	bf00      	nop
 801100c:	3714      	adds	r7, #20
 801100e:	46bd      	mov	sp, r7
 8011010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011014:	4770      	bx	lr

08011016 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011016:	b480      	push	{r7}
 8011018:	b085      	sub	sp, #20
 801101a:	af00      	add	r7, sp, #0
 801101c:	6078      	str	r0, [r7, #4]
 801101e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801102c:	d103      	bne.n	8011036 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	691b      	ldr	r3, [r3, #16]
 8011032:	60fb      	str	r3, [r7, #12]
 8011034:	e00c      	b.n	8011050 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	3308      	adds	r3, #8
 801103a:	60fb      	str	r3, [r7, #12]
 801103c:	e002      	b.n	8011044 <vListInsert+0x2e>
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	60fb      	str	r3, [r7, #12]
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	68ba      	ldr	r2, [r7, #8]
 801104c:	429a      	cmp	r2, r3
 801104e:	d2f6      	bcs.n	801103e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	685a      	ldr	r2, [r3, #4]
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	683a      	ldr	r2, [r7, #0]
 801105e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	68fa      	ldr	r2, [r7, #12]
 8011064:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	683a      	ldr	r2, [r7, #0]
 801106a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	687a      	ldr	r2, [r7, #4]
 8011070:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	1c5a      	adds	r2, r3, #1
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	601a      	str	r2, [r3, #0]
}
 801107c:	bf00      	nop
 801107e:	3714      	adds	r7, #20
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr

08011088 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011088:	b480      	push	{r7}
 801108a:	b085      	sub	sp, #20
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	691b      	ldr	r3, [r3, #16]
 8011094:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	685b      	ldr	r3, [r3, #4]
 801109a:	687a      	ldr	r2, [r7, #4]
 801109c:	6892      	ldr	r2, [r2, #8]
 801109e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	689b      	ldr	r3, [r3, #8]
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	6852      	ldr	r2, [r2, #4]
 80110a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	687a      	ldr	r2, [r7, #4]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d103      	bne.n	80110bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	689a      	ldr	r2, [r3, #8]
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2200      	movs	r2, #0
 80110c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	1e5a      	subs	r2, r3, #1
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	681b      	ldr	r3, [r3, #0]
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3714      	adds	r7, #20
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	3b04      	subs	r3, #4
 80110ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80110f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	3b04      	subs	r3, #4
 80110fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	f023 0201 	bic.w	r2, r3, #1
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	3b04      	subs	r3, #4
 801110a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801110c:	4a0c      	ldr	r2, [pc, #48]	; (8011140 <pxPortInitialiseStack+0x64>)
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	3b14      	subs	r3, #20
 8011116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011118:	687a      	ldr	r2, [r7, #4]
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	3b04      	subs	r3, #4
 8011122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f06f 0202 	mvn.w	r2, #2
 801112a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	3b20      	subs	r3, #32
 8011130:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011132:	68fb      	ldr	r3, [r7, #12]
}
 8011134:	4618      	mov	r0, r3
 8011136:	3714      	adds	r7, #20
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr
 8011140:	08011145 	.word	0x08011145

08011144 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011144:	b480      	push	{r7}
 8011146:	b085      	sub	sp, #20
 8011148:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801114a:	2300      	movs	r3, #0
 801114c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801114e:	4b12      	ldr	r3, [pc, #72]	; (8011198 <prvTaskExitError+0x54>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011156:	d00a      	beq.n	801116e <prvTaskExitError+0x2a>
	__asm volatile
 8011158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801115c:	f383 8811 	msr	BASEPRI, r3
 8011160:	f3bf 8f6f 	isb	sy
 8011164:	f3bf 8f4f 	dsb	sy
 8011168:	60fb      	str	r3, [r7, #12]
}
 801116a:	bf00      	nop
 801116c:	e7fe      	b.n	801116c <prvTaskExitError+0x28>
	__asm volatile
 801116e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011172:	f383 8811 	msr	BASEPRI, r3
 8011176:	f3bf 8f6f 	isb	sy
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	60bb      	str	r3, [r7, #8]
}
 8011180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011182:	bf00      	nop
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d0fc      	beq.n	8011184 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801118a:	bf00      	nop
 801118c:	bf00      	nop
 801118e:	3714      	adds	r7, #20
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr
 8011198:	2400004c 	.word	0x2400004c
 801119c:	00000000 	.word	0x00000000

080111a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80111a0:	4b07      	ldr	r3, [pc, #28]	; (80111c0 <pxCurrentTCBConst2>)
 80111a2:	6819      	ldr	r1, [r3, #0]
 80111a4:	6808      	ldr	r0, [r1, #0]
 80111a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111aa:	f380 8809 	msr	PSP, r0
 80111ae:	f3bf 8f6f 	isb	sy
 80111b2:	f04f 0000 	mov.w	r0, #0
 80111b6:	f380 8811 	msr	BASEPRI, r0
 80111ba:	4770      	bx	lr
 80111bc:	f3af 8000 	nop.w

080111c0 <pxCurrentTCBConst2>:
 80111c0:	2400c26c 	.word	0x2400c26c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80111c4:	bf00      	nop
 80111c6:	bf00      	nop

080111c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80111c8:	4808      	ldr	r0, [pc, #32]	; (80111ec <prvPortStartFirstTask+0x24>)
 80111ca:	6800      	ldr	r0, [r0, #0]
 80111cc:	6800      	ldr	r0, [r0, #0]
 80111ce:	f380 8808 	msr	MSP, r0
 80111d2:	f04f 0000 	mov.w	r0, #0
 80111d6:	f380 8814 	msr	CONTROL, r0
 80111da:	b662      	cpsie	i
 80111dc:	b661      	cpsie	f
 80111de:	f3bf 8f4f 	dsb	sy
 80111e2:	f3bf 8f6f 	isb	sy
 80111e6:	df00      	svc	0
 80111e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80111ea:	bf00      	nop
 80111ec:	e000ed08 	.word	0xe000ed08

080111f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b086      	sub	sp, #24
 80111f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80111f6:	4b46      	ldr	r3, [pc, #280]	; (8011310 <xPortStartScheduler+0x120>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	4a46      	ldr	r2, [pc, #280]	; (8011314 <xPortStartScheduler+0x124>)
 80111fc:	4293      	cmp	r3, r2
 80111fe:	d10a      	bne.n	8011216 <xPortStartScheduler+0x26>
	__asm volatile
 8011200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011204:	f383 8811 	msr	BASEPRI, r3
 8011208:	f3bf 8f6f 	isb	sy
 801120c:	f3bf 8f4f 	dsb	sy
 8011210:	613b      	str	r3, [r7, #16]
}
 8011212:	bf00      	nop
 8011214:	e7fe      	b.n	8011214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011216:	4b3e      	ldr	r3, [pc, #248]	; (8011310 <xPortStartScheduler+0x120>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	4a3f      	ldr	r2, [pc, #252]	; (8011318 <xPortStartScheduler+0x128>)
 801121c:	4293      	cmp	r3, r2
 801121e:	d10a      	bne.n	8011236 <xPortStartScheduler+0x46>
	__asm volatile
 8011220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011224:	f383 8811 	msr	BASEPRI, r3
 8011228:	f3bf 8f6f 	isb	sy
 801122c:	f3bf 8f4f 	dsb	sy
 8011230:	60fb      	str	r3, [r7, #12]
}
 8011232:	bf00      	nop
 8011234:	e7fe      	b.n	8011234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011236:	4b39      	ldr	r3, [pc, #228]	; (801131c <xPortStartScheduler+0x12c>)
 8011238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	b2db      	uxtb	r3, r3
 8011240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	22ff      	movs	r2, #255	; 0xff
 8011246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	b2db      	uxtb	r3, r3
 801124e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011250:	78fb      	ldrb	r3, [r7, #3]
 8011252:	b2db      	uxtb	r3, r3
 8011254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011258:	b2da      	uxtb	r2, r3
 801125a:	4b31      	ldr	r3, [pc, #196]	; (8011320 <xPortStartScheduler+0x130>)
 801125c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801125e:	4b31      	ldr	r3, [pc, #196]	; (8011324 <xPortStartScheduler+0x134>)
 8011260:	2207      	movs	r2, #7
 8011262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011264:	e009      	b.n	801127a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011266:	4b2f      	ldr	r3, [pc, #188]	; (8011324 <xPortStartScheduler+0x134>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	3b01      	subs	r3, #1
 801126c:	4a2d      	ldr	r2, [pc, #180]	; (8011324 <xPortStartScheduler+0x134>)
 801126e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011270:	78fb      	ldrb	r3, [r7, #3]
 8011272:	b2db      	uxtb	r3, r3
 8011274:	005b      	lsls	r3, r3, #1
 8011276:	b2db      	uxtb	r3, r3
 8011278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801127a:	78fb      	ldrb	r3, [r7, #3]
 801127c:	b2db      	uxtb	r3, r3
 801127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011282:	2b80      	cmp	r3, #128	; 0x80
 8011284:	d0ef      	beq.n	8011266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011286:	4b27      	ldr	r3, [pc, #156]	; (8011324 <xPortStartScheduler+0x134>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f1c3 0307 	rsb	r3, r3, #7
 801128e:	2b04      	cmp	r3, #4
 8011290:	d00a      	beq.n	80112a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8011292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011296:	f383 8811 	msr	BASEPRI, r3
 801129a:	f3bf 8f6f 	isb	sy
 801129e:	f3bf 8f4f 	dsb	sy
 80112a2:	60bb      	str	r3, [r7, #8]
}
 80112a4:	bf00      	nop
 80112a6:	e7fe      	b.n	80112a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80112a8:	4b1e      	ldr	r3, [pc, #120]	; (8011324 <xPortStartScheduler+0x134>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	021b      	lsls	r3, r3, #8
 80112ae:	4a1d      	ldr	r2, [pc, #116]	; (8011324 <xPortStartScheduler+0x134>)
 80112b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80112b2:	4b1c      	ldr	r3, [pc, #112]	; (8011324 <xPortStartScheduler+0x134>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80112ba:	4a1a      	ldr	r2, [pc, #104]	; (8011324 <xPortStartScheduler+0x134>)
 80112bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	b2da      	uxtb	r2, r3
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80112c6:	4b18      	ldr	r3, [pc, #96]	; (8011328 <xPortStartScheduler+0x138>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	4a17      	ldr	r2, [pc, #92]	; (8011328 <xPortStartScheduler+0x138>)
 80112cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80112d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80112d2:	4b15      	ldr	r3, [pc, #84]	; (8011328 <xPortStartScheduler+0x138>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	4a14      	ldr	r2, [pc, #80]	; (8011328 <xPortStartScheduler+0x138>)
 80112d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80112dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80112de:	f000 f8dd 	bl	801149c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80112e2:	4b12      	ldr	r3, [pc, #72]	; (801132c <xPortStartScheduler+0x13c>)
 80112e4:	2200      	movs	r2, #0
 80112e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80112e8:	f000 f8fc 	bl	80114e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80112ec:	4b10      	ldr	r3, [pc, #64]	; (8011330 <xPortStartScheduler+0x140>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	4a0f      	ldr	r2, [pc, #60]	; (8011330 <xPortStartScheduler+0x140>)
 80112f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80112f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80112f8:	f7ff ff66 	bl	80111c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80112fc:	f001 fcfc 	bl	8012cf8 <vTaskSwitchContext>
	prvTaskExitError();
 8011300:	f7ff ff20 	bl	8011144 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011304:	2300      	movs	r3, #0
}
 8011306:	4618      	mov	r0, r3
 8011308:	3718      	adds	r7, #24
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	e000ed00 	.word	0xe000ed00
 8011314:	410fc271 	.word	0x410fc271
 8011318:	410fc270 	.word	0x410fc270
 801131c:	e000e400 	.word	0xe000e400
 8011320:	2400c264 	.word	0x2400c264
 8011324:	2400c268 	.word	0x2400c268
 8011328:	e000ed20 	.word	0xe000ed20
 801132c:	2400004c 	.word	0x2400004c
 8011330:	e000ef34 	.word	0xe000ef34

08011334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011334:	b480      	push	{r7}
 8011336:	b083      	sub	sp, #12
 8011338:	af00      	add	r7, sp, #0
	__asm volatile
 801133a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801133e:	f383 8811 	msr	BASEPRI, r3
 8011342:	f3bf 8f6f 	isb	sy
 8011346:	f3bf 8f4f 	dsb	sy
 801134a:	607b      	str	r3, [r7, #4]
}
 801134c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801134e:	4b0f      	ldr	r3, [pc, #60]	; (801138c <vPortEnterCritical+0x58>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	3301      	adds	r3, #1
 8011354:	4a0d      	ldr	r2, [pc, #52]	; (801138c <vPortEnterCritical+0x58>)
 8011356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011358:	4b0c      	ldr	r3, [pc, #48]	; (801138c <vPortEnterCritical+0x58>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	2b01      	cmp	r3, #1
 801135e:	d10f      	bne.n	8011380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011360:	4b0b      	ldr	r3, [pc, #44]	; (8011390 <vPortEnterCritical+0x5c>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	b2db      	uxtb	r3, r3
 8011366:	2b00      	cmp	r3, #0
 8011368:	d00a      	beq.n	8011380 <vPortEnterCritical+0x4c>
	__asm volatile
 801136a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801136e:	f383 8811 	msr	BASEPRI, r3
 8011372:	f3bf 8f6f 	isb	sy
 8011376:	f3bf 8f4f 	dsb	sy
 801137a:	603b      	str	r3, [r7, #0]
}
 801137c:	bf00      	nop
 801137e:	e7fe      	b.n	801137e <vPortEnterCritical+0x4a>
	}
}
 8011380:	bf00      	nop
 8011382:	370c      	adds	r7, #12
 8011384:	46bd      	mov	sp, r7
 8011386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138a:	4770      	bx	lr
 801138c:	2400004c 	.word	0x2400004c
 8011390:	e000ed04 	.word	0xe000ed04

08011394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011394:	b480      	push	{r7}
 8011396:	b083      	sub	sp, #12
 8011398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801139a:	4b12      	ldr	r3, [pc, #72]	; (80113e4 <vPortExitCritical+0x50>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d10a      	bne.n	80113b8 <vPortExitCritical+0x24>
	__asm volatile
 80113a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a6:	f383 8811 	msr	BASEPRI, r3
 80113aa:	f3bf 8f6f 	isb	sy
 80113ae:	f3bf 8f4f 	dsb	sy
 80113b2:	607b      	str	r3, [r7, #4]
}
 80113b4:	bf00      	nop
 80113b6:	e7fe      	b.n	80113b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80113b8:	4b0a      	ldr	r3, [pc, #40]	; (80113e4 <vPortExitCritical+0x50>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	3b01      	subs	r3, #1
 80113be:	4a09      	ldr	r2, [pc, #36]	; (80113e4 <vPortExitCritical+0x50>)
 80113c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80113c2:	4b08      	ldr	r3, [pc, #32]	; (80113e4 <vPortExitCritical+0x50>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d105      	bne.n	80113d6 <vPortExitCritical+0x42>
 80113ca:	2300      	movs	r3, #0
 80113cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80113d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80113d6:	bf00      	nop
 80113d8:	370c      	adds	r7, #12
 80113da:	46bd      	mov	sp, r7
 80113dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e0:	4770      	bx	lr
 80113e2:	bf00      	nop
 80113e4:	2400004c 	.word	0x2400004c
	...

080113f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80113f0:	f3ef 8009 	mrs	r0, PSP
 80113f4:	f3bf 8f6f 	isb	sy
 80113f8:	4b15      	ldr	r3, [pc, #84]	; (8011450 <pxCurrentTCBConst>)
 80113fa:	681a      	ldr	r2, [r3, #0]
 80113fc:	f01e 0f10 	tst.w	lr, #16
 8011400:	bf08      	it	eq
 8011402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140a:	6010      	str	r0, [r2, #0]
 801140c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011414:	f380 8811 	msr	BASEPRI, r0
 8011418:	f3bf 8f4f 	dsb	sy
 801141c:	f3bf 8f6f 	isb	sy
 8011420:	f001 fc6a 	bl	8012cf8 <vTaskSwitchContext>
 8011424:	f04f 0000 	mov.w	r0, #0
 8011428:	f380 8811 	msr	BASEPRI, r0
 801142c:	bc09      	pop	{r0, r3}
 801142e:	6819      	ldr	r1, [r3, #0]
 8011430:	6808      	ldr	r0, [r1, #0]
 8011432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011436:	f01e 0f10 	tst.w	lr, #16
 801143a:	bf08      	it	eq
 801143c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011440:	f380 8809 	msr	PSP, r0
 8011444:	f3bf 8f6f 	isb	sy
 8011448:	4770      	bx	lr
 801144a:	bf00      	nop
 801144c:	f3af 8000 	nop.w

08011450 <pxCurrentTCBConst>:
 8011450:	2400c26c 	.word	0x2400c26c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011454:	bf00      	nop
 8011456:	bf00      	nop

08011458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
	__asm volatile
 801145e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011462:	f383 8811 	msr	BASEPRI, r3
 8011466:	f3bf 8f6f 	isb	sy
 801146a:	f3bf 8f4f 	dsb	sy
 801146e:	607b      	str	r3, [r7, #4]
}
 8011470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011472:	f001 fb87 	bl	8012b84 <xTaskIncrementTick>
 8011476:	4603      	mov	r3, r0
 8011478:	2b00      	cmp	r3, #0
 801147a:	d003      	beq.n	8011484 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801147c:	4b06      	ldr	r3, [pc, #24]	; (8011498 <xPortSysTickHandler+0x40>)
 801147e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011482:	601a      	str	r2, [r3, #0]
 8011484:	2300      	movs	r3, #0
 8011486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	f383 8811 	msr	BASEPRI, r3
}
 801148e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011490:	bf00      	nop
 8011492:	3708      	adds	r7, #8
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}
 8011498:	e000ed04 	.word	0xe000ed04

0801149c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801149c:	b480      	push	{r7}
 801149e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80114a0:	4b0b      	ldr	r3, [pc, #44]	; (80114d0 <vPortSetupTimerInterrupt+0x34>)
 80114a2:	2200      	movs	r2, #0
 80114a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80114a6:	4b0b      	ldr	r3, [pc, #44]	; (80114d4 <vPortSetupTimerInterrupt+0x38>)
 80114a8:	2200      	movs	r2, #0
 80114aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80114ac:	4b0a      	ldr	r3, [pc, #40]	; (80114d8 <vPortSetupTimerInterrupt+0x3c>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	4a0a      	ldr	r2, [pc, #40]	; (80114dc <vPortSetupTimerInterrupt+0x40>)
 80114b2:	fba2 2303 	umull	r2, r3, r2, r3
 80114b6:	099b      	lsrs	r3, r3, #6
 80114b8:	4a09      	ldr	r2, [pc, #36]	; (80114e0 <vPortSetupTimerInterrupt+0x44>)
 80114ba:	3b01      	subs	r3, #1
 80114bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80114be:	4b04      	ldr	r3, [pc, #16]	; (80114d0 <vPortSetupTimerInterrupt+0x34>)
 80114c0:	2207      	movs	r2, #7
 80114c2:	601a      	str	r2, [r3, #0]
}
 80114c4:	bf00      	nop
 80114c6:	46bd      	mov	sp, r7
 80114c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114cc:	4770      	bx	lr
 80114ce:	bf00      	nop
 80114d0:	e000e010 	.word	0xe000e010
 80114d4:	e000e018 	.word	0xe000e018
 80114d8:	2400003c 	.word	0x2400003c
 80114dc:	10624dd3 	.word	0x10624dd3
 80114e0:	e000e014 	.word	0xe000e014

080114e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80114e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80114f4 <vPortEnableVFP+0x10>
 80114e8:	6801      	ldr	r1, [r0, #0]
 80114ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80114ee:	6001      	str	r1, [r0, #0]
 80114f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80114f2:	bf00      	nop
 80114f4:	e000ed88 	.word	0xe000ed88

080114f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80114f8:	b480      	push	{r7}
 80114fa:	b085      	sub	sp, #20
 80114fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80114fe:	f3ef 8305 	mrs	r3, IPSR
 8011502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2b0f      	cmp	r3, #15
 8011508:	d914      	bls.n	8011534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801150a:	4a17      	ldr	r2, [pc, #92]	; (8011568 <vPortValidateInterruptPriority+0x70>)
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	4413      	add	r3, r2
 8011510:	781b      	ldrb	r3, [r3, #0]
 8011512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011514:	4b15      	ldr	r3, [pc, #84]	; (801156c <vPortValidateInterruptPriority+0x74>)
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	7afa      	ldrb	r2, [r7, #11]
 801151a:	429a      	cmp	r2, r3
 801151c:	d20a      	bcs.n	8011534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801151e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011522:	f383 8811 	msr	BASEPRI, r3
 8011526:	f3bf 8f6f 	isb	sy
 801152a:	f3bf 8f4f 	dsb	sy
 801152e:	607b      	str	r3, [r7, #4]
}
 8011530:	bf00      	nop
 8011532:	e7fe      	b.n	8011532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011534:	4b0e      	ldr	r3, [pc, #56]	; (8011570 <vPortValidateInterruptPriority+0x78>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801153c:	4b0d      	ldr	r3, [pc, #52]	; (8011574 <vPortValidateInterruptPriority+0x7c>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	429a      	cmp	r2, r3
 8011542:	d90a      	bls.n	801155a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011548:	f383 8811 	msr	BASEPRI, r3
 801154c:	f3bf 8f6f 	isb	sy
 8011550:	f3bf 8f4f 	dsb	sy
 8011554:	603b      	str	r3, [r7, #0]
}
 8011556:	bf00      	nop
 8011558:	e7fe      	b.n	8011558 <vPortValidateInterruptPriority+0x60>
	}
 801155a:	bf00      	nop
 801155c:	3714      	adds	r7, #20
 801155e:	46bd      	mov	sp, r7
 8011560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011564:	4770      	bx	lr
 8011566:	bf00      	nop
 8011568:	e000e3f0 	.word	0xe000e3f0
 801156c:	2400c264 	.word	0x2400c264
 8011570:	e000ed0c 	.word	0xe000ed0c
 8011574:	2400c268 	.word	0x2400c268

08011578 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b084      	sub	sp, #16
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
 8011580:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d10a      	bne.n	80115a2 <xQueueGenericReset+0x2a>
	__asm volatile
 801158c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011590:	f383 8811 	msr	BASEPRI, r3
 8011594:	f3bf 8f6f 	isb	sy
 8011598:	f3bf 8f4f 	dsb	sy
 801159c:	60bb      	str	r3, [r7, #8]
}
 801159e:	bf00      	nop
 80115a0:	e7fe      	b.n	80115a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80115a2:	f7ff fec7 	bl	8011334 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	681a      	ldr	r2, [r3, #0]
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115ae:	68f9      	ldr	r1, [r7, #12]
 80115b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80115b2:	fb01 f303 	mul.w	r3, r1, r3
 80115b6:	441a      	add	r2, r3
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2200      	movs	r2, #0
 80115c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	681a      	ldr	r2, [r3, #0]
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115d2:	3b01      	subs	r3, #1
 80115d4:	68f9      	ldr	r1, [r7, #12]
 80115d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80115d8:	fb01 f303 	mul.w	r3, r1, r3
 80115dc:	441a      	add	r2, r3
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	22ff      	movs	r2, #255	; 0xff
 80115e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	22ff      	movs	r2, #255	; 0xff
 80115ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d114      	bne.n	8011622 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	691b      	ldr	r3, [r3, #16]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d01a      	beq.n	8011636 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	3310      	adds	r3, #16
 8011604:	4618      	mov	r0, r3
 8011606:	f001 fc25 	bl	8012e54 <xTaskRemoveFromEventList>
 801160a:	4603      	mov	r3, r0
 801160c:	2b00      	cmp	r3, #0
 801160e:	d012      	beq.n	8011636 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011610:	4b0c      	ldr	r3, [pc, #48]	; (8011644 <xQueueGenericReset+0xcc>)
 8011612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011616:	601a      	str	r2, [r3, #0]
 8011618:	f3bf 8f4f 	dsb	sy
 801161c:	f3bf 8f6f 	isb	sy
 8011620:	e009      	b.n	8011636 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	3310      	adds	r3, #16
 8011626:	4618      	mov	r0, r3
 8011628:	f7ff fca4 	bl	8010f74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	3324      	adds	r3, #36	; 0x24
 8011630:	4618      	mov	r0, r3
 8011632:	f7ff fc9f 	bl	8010f74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011636:	f7ff fead 	bl	8011394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801163a:	2301      	movs	r3, #1
}
 801163c:	4618      	mov	r0, r3
 801163e:	3710      	adds	r7, #16
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	e000ed04 	.word	0xe000ed04

08011648 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011648:	b580      	push	{r7, lr}
 801164a:	b08e      	sub	sp, #56	; 0x38
 801164c:	af02      	add	r7, sp, #8
 801164e:	60f8      	str	r0, [r7, #12]
 8011650:	60b9      	str	r1, [r7, #8]
 8011652:	607a      	str	r2, [r7, #4]
 8011654:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d10a      	bne.n	8011672 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801165c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011660:	f383 8811 	msr	BASEPRI, r3
 8011664:	f3bf 8f6f 	isb	sy
 8011668:	f3bf 8f4f 	dsb	sy
 801166c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801166e:	bf00      	nop
 8011670:	e7fe      	b.n	8011670 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d10a      	bne.n	801168e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801167c:	f383 8811 	msr	BASEPRI, r3
 8011680:	f3bf 8f6f 	isb	sy
 8011684:	f3bf 8f4f 	dsb	sy
 8011688:	627b      	str	r3, [r7, #36]	; 0x24
}
 801168a:	bf00      	nop
 801168c:	e7fe      	b.n	801168c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d002      	beq.n	801169a <xQueueGenericCreateStatic+0x52>
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d001      	beq.n	801169e <xQueueGenericCreateStatic+0x56>
 801169a:	2301      	movs	r3, #1
 801169c:	e000      	b.n	80116a0 <xQueueGenericCreateStatic+0x58>
 801169e:	2300      	movs	r3, #0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d10a      	bne.n	80116ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80116a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a8:	f383 8811 	msr	BASEPRI, r3
 80116ac:	f3bf 8f6f 	isb	sy
 80116b0:	f3bf 8f4f 	dsb	sy
 80116b4:	623b      	str	r3, [r7, #32]
}
 80116b6:	bf00      	nop
 80116b8:	e7fe      	b.n	80116b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d102      	bne.n	80116c6 <xQueueGenericCreateStatic+0x7e>
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d101      	bne.n	80116ca <xQueueGenericCreateStatic+0x82>
 80116c6:	2301      	movs	r3, #1
 80116c8:	e000      	b.n	80116cc <xQueueGenericCreateStatic+0x84>
 80116ca:	2300      	movs	r3, #0
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d10a      	bne.n	80116e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80116d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116d4:	f383 8811 	msr	BASEPRI, r3
 80116d8:	f3bf 8f6f 	isb	sy
 80116dc:	f3bf 8f4f 	dsb	sy
 80116e0:	61fb      	str	r3, [r7, #28]
}
 80116e2:	bf00      	nop
 80116e4:	e7fe      	b.n	80116e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80116e6:	2350      	movs	r3, #80	; 0x50
 80116e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	2b50      	cmp	r3, #80	; 0x50
 80116ee:	d00a      	beq.n	8011706 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80116f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116f4:	f383 8811 	msr	BASEPRI, r3
 80116f8:	f3bf 8f6f 	isb	sy
 80116fc:	f3bf 8f4f 	dsb	sy
 8011700:	61bb      	str	r3, [r7, #24]
}
 8011702:	bf00      	nop
 8011704:	e7fe      	b.n	8011704 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011706:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801170e:	2b00      	cmp	r3, #0
 8011710:	d00d      	beq.n	801172e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011714:	2201      	movs	r2, #1
 8011716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801171a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011720:	9300      	str	r3, [sp, #0]
 8011722:	4613      	mov	r3, r2
 8011724:	687a      	ldr	r2, [r7, #4]
 8011726:	68b9      	ldr	r1, [r7, #8]
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	f000 f83f 	bl	80117ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011730:	4618      	mov	r0, r3
 8011732:	3730      	adds	r7, #48	; 0x30
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}

08011738 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011738:	b580      	push	{r7, lr}
 801173a:	b08a      	sub	sp, #40	; 0x28
 801173c:	af02      	add	r7, sp, #8
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	4613      	mov	r3, r2
 8011744:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d10a      	bne.n	8011762 <xQueueGenericCreate+0x2a>
	__asm volatile
 801174c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011750:	f383 8811 	msr	BASEPRI, r3
 8011754:	f3bf 8f6f 	isb	sy
 8011758:	f3bf 8f4f 	dsb	sy
 801175c:	613b      	str	r3, [r7, #16]
}
 801175e:	bf00      	nop
 8011760:	e7fe      	b.n	8011760 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	68ba      	ldr	r2, [r7, #8]
 8011766:	fb02 f303 	mul.w	r3, r2, r3
 801176a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801176c:	69fb      	ldr	r3, [r7, #28]
 801176e:	3350      	adds	r3, #80	; 0x50
 8011770:	4618      	mov	r0, r3
 8011772:	f7ff fa15 	bl	8010ba0 <pvPortMalloc>
 8011776:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011778:	69bb      	ldr	r3, [r7, #24]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d011      	beq.n	80117a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801177e:	69bb      	ldr	r3, [r7, #24]
 8011780:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	3350      	adds	r3, #80	; 0x50
 8011786:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011788:	69bb      	ldr	r3, [r7, #24]
 801178a:	2200      	movs	r2, #0
 801178c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011790:	79fa      	ldrb	r2, [r7, #7]
 8011792:	69bb      	ldr	r3, [r7, #24]
 8011794:	9300      	str	r3, [sp, #0]
 8011796:	4613      	mov	r3, r2
 8011798:	697a      	ldr	r2, [r7, #20]
 801179a:	68b9      	ldr	r1, [r7, #8]
 801179c:	68f8      	ldr	r0, [r7, #12]
 801179e:	f000 f805 	bl	80117ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80117a2:	69bb      	ldr	r3, [r7, #24]
	}
 80117a4:	4618      	mov	r0, r3
 80117a6:	3720      	adds	r7, #32
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}

080117ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b084      	sub	sp, #16
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	60b9      	str	r1, [r7, #8]
 80117b6:	607a      	str	r2, [r7, #4]
 80117b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d103      	bne.n	80117c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80117c0:	69bb      	ldr	r3, [r7, #24]
 80117c2:	69ba      	ldr	r2, [r7, #24]
 80117c4:	601a      	str	r2, [r3, #0]
 80117c6:	e002      	b.n	80117ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80117c8:	69bb      	ldr	r3, [r7, #24]
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80117ce:	69bb      	ldr	r3, [r7, #24]
 80117d0:	68fa      	ldr	r2, [r7, #12]
 80117d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80117d4:	69bb      	ldr	r3, [r7, #24]
 80117d6:	68ba      	ldr	r2, [r7, #8]
 80117d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80117da:	2101      	movs	r1, #1
 80117dc:	69b8      	ldr	r0, [r7, #24]
 80117de:	f7ff fecb 	bl	8011578 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80117e2:	69bb      	ldr	r3, [r7, #24]
 80117e4:	78fa      	ldrb	r2, [r7, #3]
 80117e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80117ea:	bf00      	nop
 80117ec:	3710      	adds	r7, #16
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}

080117f2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80117f2:	b580      	push	{r7, lr}
 80117f4:	b08a      	sub	sp, #40	; 0x28
 80117f6:	af02      	add	r7, sp, #8
 80117f8:	60f8      	str	r0, [r7, #12]
 80117fa:	60b9      	str	r1, [r7, #8]
 80117fc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d10a      	bne.n	801181a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8011804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011808:	f383 8811 	msr	BASEPRI, r3
 801180c:	f3bf 8f6f 	isb	sy
 8011810:	f3bf 8f4f 	dsb	sy
 8011814:	61bb      	str	r3, [r7, #24]
}
 8011816:	bf00      	nop
 8011818:	e7fe      	b.n	8011818 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801181a:	68ba      	ldr	r2, [r7, #8]
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	429a      	cmp	r2, r3
 8011820:	d90a      	bls.n	8011838 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8011822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011826:	f383 8811 	msr	BASEPRI, r3
 801182a:	f3bf 8f6f 	isb	sy
 801182e:	f3bf 8f4f 	dsb	sy
 8011832:	617b      	str	r3, [r7, #20]
}
 8011834:	bf00      	nop
 8011836:	e7fe      	b.n	8011836 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011838:	2302      	movs	r3, #2
 801183a:	9300      	str	r3, [sp, #0]
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2200      	movs	r2, #0
 8011840:	2100      	movs	r1, #0
 8011842:	68f8      	ldr	r0, [r7, #12]
 8011844:	f7ff ff00 	bl	8011648 <xQueueGenericCreateStatic>
 8011848:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d002      	beq.n	8011856 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	68ba      	ldr	r2, [r7, #8]
 8011854:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011856:	69fb      	ldr	r3, [r7, #28]
	}
 8011858:	4618      	mov	r0, r3
 801185a:	3720      	adds	r7, #32
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011860:	b580      	push	{r7, lr}
 8011862:	b086      	sub	sp, #24
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d10a      	bne.n	8011886 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8011870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011874:	f383 8811 	msr	BASEPRI, r3
 8011878:	f3bf 8f6f 	isb	sy
 801187c:	f3bf 8f4f 	dsb	sy
 8011880:	613b      	str	r3, [r7, #16]
}
 8011882:	bf00      	nop
 8011884:	e7fe      	b.n	8011884 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011886:	683a      	ldr	r2, [r7, #0]
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	429a      	cmp	r2, r3
 801188c:	d90a      	bls.n	80118a4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801188e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011892:	f383 8811 	msr	BASEPRI, r3
 8011896:	f3bf 8f6f 	isb	sy
 801189a:	f3bf 8f4f 	dsb	sy
 801189e:	60fb      	str	r3, [r7, #12]
}
 80118a0:	bf00      	nop
 80118a2:	e7fe      	b.n	80118a2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80118a4:	2202      	movs	r2, #2
 80118a6:	2100      	movs	r1, #0
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f7ff ff45 	bl	8011738 <xQueueGenericCreate>
 80118ae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d002      	beq.n	80118bc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	683a      	ldr	r2, [r7, #0]
 80118ba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80118bc:	697b      	ldr	r3, [r7, #20]
	}
 80118be:	4618      	mov	r0, r3
 80118c0:	3718      	adds	r7, #24
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}
	...

080118c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b08e      	sub	sp, #56	; 0x38
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	60f8      	str	r0, [r7, #12]
 80118d0:	60b9      	str	r1, [r7, #8]
 80118d2:	607a      	str	r2, [r7, #4]
 80118d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80118d6:	2300      	movs	r3, #0
 80118d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80118de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d10a      	bne.n	80118fa <xQueueGenericSend+0x32>
	__asm volatile
 80118e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e8:	f383 8811 	msr	BASEPRI, r3
 80118ec:	f3bf 8f6f 	isb	sy
 80118f0:	f3bf 8f4f 	dsb	sy
 80118f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80118f6:	bf00      	nop
 80118f8:	e7fe      	b.n	80118f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d103      	bne.n	8011908 <xQueueGenericSend+0x40>
 8011900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011904:	2b00      	cmp	r3, #0
 8011906:	d101      	bne.n	801190c <xQueueGenericSend+0x44>
 8011908:	2301      	movs	r3, #1
 801190a:	e000      	b.n	801190e <xQueueGenericSend+0x46>
 801190c:	2300      	movs	r3, #0
 801190e:	2b00      	cmp	r3, #0
 8011910:	d10a      	bne.n	8011928 <xQueueGenericSend+0x60>
	__asm volatile
 8011912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011916:	f383 8811 	msr	BASEPRI, r3
 801191a:	f3bf 8f6f 	isb	sy
 801191e:	f3bf 8f4f 	dsb	sy
 8011922:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011924:	bf00      	nop
 8011926:	e7fe      	b.n	8011926 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	2b02      	cmp	r3, #2
 801192c:	d103      	bne.n	8011936 <xQueueGenericSend+0x6e>
 801192e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011932:	2b01      	cmp	r3, #1
 8011934:	d101      	bne.n	801193a <xQueueGenericSend+0x72>
 8011936:	2301      	movs	r3, #1
 8011938:	e000      	b.n	801193c <xQueueGenericSend+0x74>
 801193a:	2300      	movs	r3, #0
 801193c:	2b00      	cmp	r3, #0
 801193e:	d10a      	bne.n	8011956 <xQueueGenericSend+0x8e>
	__asm volatile
 8011940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011944:	f383 8811 	msr	BASEPRI, r3
 8011948:	f3bf 8f6f 	isb	sy
 801194c:	f3bf 8f4f 	dsb	sy
 8011950:	623b      	str	r3, [r7, #32]
}
 8011952:	bf00      	nop
 8011954:	e7fe      	b.n	8011954 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011956:	f001 fc3b 	bl	80131d0 <xTaskGetSchedulerState>
 801195a:	4603      	mov	r3, r0
 801195c:	2b00      	cmp	r3, #0
 801195e:	d102      	bne.n	8011966 <xQueueGenericSend+0x9e>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d101      	bne.n	801196a <xQueueGenericSend+0xa2>
 8011966:	2301      	movs	r3, #1
 8011968:	e000      	b.n	801196c <xQueueGenericSend+0xa4>
 801196a:	2300      	movs	r3, #0
 801196c:	2b00      	cmp	r3, #0
 801196e:	d10a      	bne.n	8011986 <xQueueGenericSend+0xbe>
	__asm volatile
 8011970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011974:	f383 8811 	msr	BASEPRI, r3
 8011978:	f3bf 8f6f 	isb	sy
 801197c:	f3bf 8f4f 	dsb	sy
 8011980:	61fb      	str	r3, [r7, #28]
}
 8011982:	bf00      	nop
 8011984:	e7fe      	b.n	8011984 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011986:	f7ff fcd5 	bl	8011334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801198a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801198c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011992:	429a      	cmp	r2, r3
 8011994:	d302      	bcc.n	801199c <xQueueGenericSend+0xd4>
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	2b02      	cmp	r3, #2
 801199a:	d129      	bne.n	80119f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801199c:	683a      	ldr	r2, [r7, #0]
 801199e:	68b9      	ldr	r1, [r7, #8]
 80119a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119a2:	f000 fc5e 	bl	8012262 <prvCopyDataToQueue>
 80119a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80119a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d010      	beq.n	80119d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80119b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b2:	3324      	adds	r3, #36	; 0x24
 80119b4:	4618      	mov	r0, r3
 80119b6:	f001 fa4d 	bl	8012e54 <xTaskRemoveFromEventList>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d013      	beq.n	80119e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80119c0:	4b3f      	ldr	r3, [pc, #252]	; (8011ac0 <xQueueGenericSend+0x1f8>)
 80119c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119c6:	601a      	str	r2, [r3, #0]
 80119c8:	f3bf 8f4f 	dsb	sy
 80119cc:	f3bf 8f6f 	isb	sy
 80119d0:	e00a      	b.n	80119e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80119d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d007      	beq.n	80119e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80119d8:	4b39      	ldr	r3, [pc, #228]	; (8011ac0 <xQueueGenericSend+0x1f8>)
 80119da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119de:	601a      	str	r2, [r3, #0]
 80119e0:	f3bf 8f4f 	dsb	sy
 80119e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80119e8:	f7ff fcd4 	bl	8011394 <vPortExitCritical>
				return pdPASS;
 80119ec:	2301      	movs	r3, #1
 80119ee:	e063      	b.n	8011ab8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d103      	bne.n	80119fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80119f6:	f7ff fccd 	bl	8011394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80119fa:	2300      	movs	r3, #0
 80119fc:	e05c      	b.n	8011ab8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80119fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d106      	bne.n	8011a12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a04:	f107 0314 	add.w	r3, r7, #20
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f001 fa87 	bl	8012f1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a0e:	2301      	movs	r3, #1
 8011a10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a12:	f7ff fcbf 	bl	8011394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a16:	f000 fff9 	bl	8012a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a1a:	f7ff fc8b 	bl	8011334 <vPortEnterCritical>
 8011a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a24:	b25b      	sxtb	r3, r3
 8011a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a2a:	d103      	bne.n	8011a34 <xQueueGenericSend+0x16c>
 8011a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a2e:	2200      	movs	r2, #0
 8011a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a3a:	b25b      	sxtb	r3, r3
 8011a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a40:	d103      	bne.n	8011a4a <xQueueGenericSend+0x182>
 8011a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a44:	2200      	movs	r2, #0
 8011a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a4a:	f7ff fca3 	bl	8011394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011a4e:	1d3a      	adds	r2, r7, #4
 8011a50:	f107 0314 	add.w	r3, r7, #20
 8011a54:	4611      	mov	r1, r2
 8011a56:	4618      	mov	r0, r3
 8011a58:	f001 fa76 	bl	8012f48 <xTaskCheckForTimeOut>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d124      	bne.n	8011aac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011a62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a64:	f000 fcf5 	bl	8012452 <prvIsQueueFull>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d018      	beq.n	8011aa0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a70:	3310      	adds	r3, #16
 8011a72:	687a      	ldr	r2, [r7, #4]
 8011a74:	4611      	mov	r1, r2
 8011a76:	4618      	mov	r0, r3
 8011a78:	f001 f99c 	bl	8012db4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a7e:	f000 fc80 	bl	8012382 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011a82:	f000 ffd1 	bl	8012a28 <xTaskResumeAll>
 8011a86:	4603      	mov	r3, r0
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	f47f af7c 	bne.w	8011986 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011a8e:	4b0c      	ldr	r3, [pc, #48]	; (8011ac0 <xQueueGenericSend+0x1f8>)
 8011a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a94:	601a      	str	r2, [r3, #0]
 8011a96:	f3bf 8f4f 	dsb	sy
 8011a9a:	f3bf 8f6f 	isb	sy
 8011a9e:	e772      	b.n	8011986 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011aa2:	f000 fc6e 	bl	8012382 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011aa6:	f000 ffbf 	bl	8012a28 <xTaskResumeAll>
 8011aaa:	e76c      	b.n	8011986 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011aae:	f000 fc68 	bl	8012382 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ab2:	f000 ffb9 	bl	8012a28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011ab6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	3738      	adds	r7, #56	; 0x38
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}
 8011ac0:	e000ed04 	.word	0xe000ed04

08011ac4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b090      	sub	sp, #64	; 0x40
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	60f8      	str	r0, [r7, #12]
 8011acc:	60b9      	str	r1, [r7, #8]
 8011ace:	607a      	str	r2, [r7, #4]
 8011ad0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d10a      	bne.n	8011af2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae0:	f383 8811 	msr	BASEPRI, r3
 8011ae4:	f3bf 8f6f 	isb	sy
 8011ae8:	f3bf 8f4f 	dsb	sy
 8011aec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011aee:	bf00      	nop
 8011af0:	e7fe      	b.n	8011af0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d103      	bne.n	8011b00 <xQueueGenericSendFromISR+0x3c>
 8011af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d101      	bne.n	8011b04 <xQueueGenericSendFromISR+0x40>
 8011b00:	2301      	movs	r3, #1
 8011b02:	e000      	b.n	8011b06 <xQueueGenericSendFromISR+0x42>
 8011b04:	2300      	movs	r3, #0
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d10a      	bne.n	8011b20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b0e:	f383 8811 	msr	BASEPRI, r3
 8011b12:	f3bf 8f6f 	isb	sy
 8011b16:	f3bf 8f4f 	dsb	sy
 8011b1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011b1c:	bf00      	nop
 8011b1e:	e7fe      	b.n	8011b1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	2b02      	cmp	r3, #2
 8011b24:	d103      	bne.n	8011b2e <xQueueGenericSendFromISR+0x6a>
 8011b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b2a:	2b01      	cmp	r3, #1
 8011b2c:	d101      	bne.n	8011b32 <xQueueGenericSendFromISR+0x6e>
 8011b2e:	2301      	movs	r3, #1
 8011b30:	e000      	b.n	8011b34 <xQueueGenericSendFromISR+0x70>
 8011b32:	2300      	movs	r3, #0
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d10a      	bne.n	8011b4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b3c:	f383 8811 	msr	BASEPRI, r3
 8011b40:	f3bf 8f6f 	isb	sy
 8011b44:	f3bf 8f4f 	dsb	sy
 8011b48:	623b      	str	r3, [r7, #32]
}
 8011b4a:	bf00      	nop
 8011b4c:	e7fe      	b.n	8011b4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011b4e:	f7ff fcd3 	bl	80114f8 <vPortValidateInterruptPriority>
	__asm volatile
 8011b52:	f3ef 8211 	mrs	r2, BASEPRI
 8011b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b5a:	f383 8811 	msr	BASEPRI, r3
 8011b5e:	f3bf 8f6f 	isb	sy
 8011b62:	f3bf 8f4f 	dsb	sy
 8011b66:	61fa      	str	r2, [r7, #28]
 8011b68:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8011b6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011b6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d302      	bcc.n	8011b80 <xQueueGenericSendFromISR+0xbc>
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	2b02      	cmp	r3, #2
 8011b7e:	d12f      	bne.n	8011be0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011b90:	683a      	ldr	r2, [r7, #0]
 8011b92:	68b9      	ldr	r1, [r7, #8]
 8011b94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b96:	f000 fb64 	bl	8012262 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011b9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba2:	d112      	bne.n	8011bca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d016      	beq.n	8011bda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bae:	3324      	adds	r3, #36	; 0x24
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f001 f94f 	bl	8012e54 <xTaskRemoveFromEventList>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d00e      	beq.n	8011bda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d00b      	beq.n	8011bda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2201      	movs	r2, #1
 8011bc6:	601a      	str	r2, [r3, #0]
 8011bc8:	e007      	b.n	8011bda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011bca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011bce:	3301      	adds	r3, #1
 8011bd0:	b2db      	uxtb	r3, r3
 8011bd2:	b25a      	sxtb	r2, r3
 8011bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011bda:	2301      	movs	r3, #1
 8011bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011bde:	e001      	b.n	8011be4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011be0:	2300      	movs	r3, #0
 8011be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011be6:	617b      	str	r3, [r7, #20]
	__asm volatile
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	f383 8811 	msr	BASEPRI, r3
}
 8011bee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3740      	adds	r7, #64	; 0x40
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}

08011bfa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011bfa:	b580      	push	{r7, lr}
 8011bfc:	b08e      	sub	sp, #56	; 0x38
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
 8011c02:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d10a      	bne.n	8011c24 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8011c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c12:	f383 8811 	msr	BASEPRI, r3
 8011c16:	f3bf 8f6f 	isb	sy
 8011c1a:	f3bf 8f4f 	dsb	sy
 8011c1e:	623b      	str	r3, [r7, #32]
}
 8011c20:	bf00      	nop
 8011c22:	e7fe      	b.n	8011c22 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d00a      	beq.n	8011c42 <xQueueGiveFromISR+0x48>
	__asm volatile
 8011c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c30:	f383 8811 	msr	BASEPRI, r3
 8011c34:	f3bf 8f6f 	isb	sy
 8011c38:	f3bf 8f4f 	dsb	sy
 8011c3c:	61fb      	str	r3, [r7, #28]
}
 8011c3e:	bf00      	nop
 8011c40:	e7fe      	b.n	8011c40 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d103      	bne.n	8011c52 <xQueueGiveFromISR+0x58>
 8011c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c4c:	689b      	ldr	r3, [r3, #8]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d101      	bne.n	8011c56 <xQueueGiveFromISR+0x5c>
 8011c52:	2301      	movs	r3, #1
 8011c54:	e000      	b.n	8011c58 <xQueueGiveFromISR+0x5e>
 8011c56:	2300      	movs	r3, #0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d10a      	bne.n	8011c72 <xQueueGiveFromISR+0x78>
	__asm volatile
 8011c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c60:	f383 8811 	msr	BASEPRI, r3
 8011c64:	f3bf 8f6f 	isb	sy
 8011c68:	f3bf 8f4f 	dsb	sy
 8011c6c:	61bb      	str	r3, [r7, #24]
}
 8011c6e:	bf00      	nop
 8011c70:	e7fe      	b.n	8011c70 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011c72:	f7ff fc41 	bl	80114f8 <vPortValidateInterruptPriority>
	__asm volatile
 8011c76:	f3ef 8211 	mrs	r2, BASEPRI
 8011c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c7e:	f383 8811 	msr	BASEPRI, r3
 8011c82:	f3bf 8f6f 	isb	sy
 8011c86:	f3bf 8f4f 	dsb	sy
 8011c8a:	617a      	str	r2, [r7, #20]
 8011c8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011c8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011c90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d22b      	bcs.n	8011cfa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cae:	1c5a      	adds	r2, r3, #1
 8011cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011cb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cbc:	d112      	bne.n	8011ce4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d016      	beq.n	8011cf4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc8:	3324      	adds	r3, #36	; 0x24
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f001 f8c2 	bl	8012e54 <xTaskRemoveFromEventList>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d00e      	beq.n	8011cf4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d00b      	beq.n	8011cf4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	2201      	movs	r2, #1
 8011ce0:	601a      	str	r2, [r3, #0]
 8011ce2:	e007      	b.n	8011cf4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ce8:	3301      	adds	r3, #1
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	b25a      	sxtb	r2, r3
 8011cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8011cf8:	e001      	b.n	8011cfe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8011cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	f383 8811 	msr	BASEPRI, r3
}
 8011d08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3738      	adds	r7, #56	; 0x38
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}

08011d14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b08c      	sub	sp, #48	; 0x30
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	60f8      	str	r0, [r7, #12]
 8011d1c:	60b9      	str	r1, [r7, #8]
 8011d1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011d20:	2300      	movs	r3, #0
 8011d22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d10a      	bne.n	8011d44 <xQueueReceive+0x30>
	__asm volatile
 8011d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d32:	f383 8811 	msr	BASEPRI, r3
 8011d36:	f3bf 8f6f 	isb	sy
 8011d3a:	f3bf 8f4f 	dsb	sy
 8011d3e:	623b      	str	r3, [r7, #32]
}
 8011d40:	bf00      	nop
 8011d42:	e7fe      	b.n	8011d42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d103      	bne.n	8011d52 <xQueueReceive+0x3e>
 8011d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d101      	bne.n	8011d56 <xQueueReceive+0x42>
 8011d52:	2301      	movs	r3, #1
 8011d54:	e000      	b.n	8011d58 <xQueueReceive+0x44>
 8011d56:	2300      	movs	r3, #0
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d10a      	bne.n	8011d72 <xQueueReceive+0x5e>
	__asm volatile
 8011d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d60:	f383 8811 	msr	BASEPRI, r3
 8011d64:	f3bf 8f6f 	isb	sy
 8011d68:	f3bf 8f4f 	dsb	sy
 8011d6c:	61fb      	str	r3, [r7, #28]
}
 8011d6e:	bf00      	nop
 8011d70:	e7fe      	b.n	8011d70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d72:	f001 fa2d 	bl	80131d0 <xTaskGetSchedulerState>
 8011d76:	4603      	mov	r3, r0
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d102      	bne.n	8011d82 <xQueueReceive+0x6e>
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d101      	bne.n	8011d86 <xQueueReceive+0x72>
 8011d82:	2301      	movs	r3, #1
 8011d84:	e000      	b.n	8011d88 <xQueueReceive+0x74>
 8011d86:	2300      	movs	r3, #0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d10a      	bne.n	8011da2 <xQueueReceive+0x8e>
	__asm volatile
 8011d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d90:	f383 8811 	msr	BASEPRI, r3
 8011d94:	f3bf 8f6f 	isb	sy
 8011d98:	f3bf 8f4f 	dsb	sy
 8011d9c:	61bb      	str	r3, [r7, #24]
}
 8011d9e:	bf00      	nop
 8011da0:	e7fe      	b.n	8011da0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011da2:	f7ff fac7 	bl	8011334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011daa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d01f      	beq.n	8011df2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011db2:	68b9      	ldr	r1, [r7, #8]
 8011db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011db6:	f000 fabe 	bl	8012336 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dbc:	1e5a      	subs	r2, r3, #1
 8011dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc4:	691b      	ldr	r3, [r3, #16]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d00f      	beq.n	8011dea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dcc:	3310      	adds	r3, #16
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f001 f840 	bl	8012e54 <xTaskRemoveFromEventList>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d007      	beq.n	8011dea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011dda:	4b3d      	ldr	r3, [pc, #244]	; (8011ed0 <xQueueReceive+0x1bc>)
 8011ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011de0:	601a      	str	r2, [r3, #0]
 8011de2:	f3bf 8f4f 	dsb	sy
 8011de6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011dea:	f7ff fad3 	bl	8011394 <vPortExitCritical>
				return pdPASS;
 8011dee:	2301      	movs	r3, #1
 8011df0:	e069      	b.n	8011ec6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d103      	bne.n	8011e00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011df8:	f7ff facc 	bl	8011394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	e062      	b.n	8011ec6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d106      	bne.n	8011e14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e06:	f107 0310 	add.w	r3, r7, #16
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f001 f886 	bl	8012f1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e10:	2301      	movs	r3, #1
 8011e12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e14:	f7ff fabe 	bl	8011394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e18:	f000 fdf8 	bl	8012a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e1c:	f7ff fa8a 	bl	8011334 <vPortEnterCritical>
 8011e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e26:	b25b      	sxtb	r3, r3
 8011e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e2c:	d103      	bne.n	8011e36 <xQueueReceive+0x122>
 8011e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e30:	2200      	movs	r2, #0
 8011e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e3c:	b25b      	sxtb	r3, r3
 8011e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e42:	d103      	bne.n	8011e4c <xQueueReceive+0x138>
 8011e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e46:	2200      	movs	r2, #0
 8011e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e4c:	f7ff faa2 	bl	8011394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e50:	1d3a      	adds	r2, r7, #4
 8011e52:	f107 0310 	add.w	r3, r7, #16
 8011e56:	4611      	mov	r1, r2
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f001 f875 	bl	8012f48 <xTaskCheckForTimeOut>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d123      	bne.n	8011eac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e66:	f000 fade 	bl	8012426 <prvIsQueueEmpty>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d017      	beq.n	8011ea0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e72:	3324      	adds	r3, #36	; 0x24
 8011e74:	687a      	ldr	r2, [r7, #4]
 8011e76:	4611      	mov	r1, r2
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f000 ff9b 	bl	8012db4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e80:	f000 fa7f 	bl	8012382 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011e84:	f000 fdd0 	bl	8012a28 <xTaskResumeAll>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d189      	bne.n	8011da2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011e8e:	4b10      	ldr	r3, [pc, #64]	; (8011ed0 <xQueueReceive+0x1bc>)
 8011e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e94:	601a      	str	r2, [r3, #0]
 8011e96:	f3bf 8f4f 	dsb	sy
 8011e9a:	f3bf 8f6f 	isb	sy
 8011e9e:	e780      	b.n	8011da2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ea2:	f000 fa6e 	bl	8012382 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ea6:	f000 fdbf 	bl	8012a28 <xTaskResumeAll>
 8011eaa:	e77a      	b.n	8011da2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011eae:	f000 fa68 	bl	8012382 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011eb2:	f000 fdb9 	bl	8012a28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011eb8:	f000 fab5 	bl	8012426 <prvIsQueueEmpty>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	f43f af6f 	beq.w	8011da2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011ec4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3730      	adds	r7, #48	; 0x30
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}
 8011ece:	bf00      	nop
 8011ed0:	e000ed04 	.word	0xe000ed04

08011ed4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b08e      	sub	sp, #56	; 0x38
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d10a      	bne.n	8011f06 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef4:	f383 8811 	msr	BASEPRI, r3
 8011ef8:	f3bf 8f6f 	isb	sy
 8011efc:	f3bf 8f4f 	dsb	sy
 8011f00:	623b      	str	r3, [r7, #32]
}
 8011f02:	bf00      	nop
 8011f04:	e7fe      	b.n	8011f04 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d00a      	beq.n	8011f24 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f12:	f383 8811 	msr	BASEPRI, r3
 8011f16:	f3bf 8f6f 	isb	sy
 8011f1a:	f3bf 8f4f 	dsb	sy
 8011f1e:	61fb      	str	r3, [r7, #28]
}
 8011f20:	bf00      	nop
 8011f22:	e7fe      	b.n	8011f22 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011f24:	f001 f954 	bl	80131d0 <xTaskGetSchedulerState>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d102      	bne.n	8011f34 <xQueueSemaphoreTake+0x60>
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d101      	bne.n	8011f38 <xQueueSemaphoreTake+0x64>
 8011f34:	2301      	movs	r3, #1
 8011f36:	e000      	b.n	8011f3a <xQueueSemaphoreTake+0x66>
 8011f38:	2300      	movs	r3, #0
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d10a      	bne.n	8011f54 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f42:	f383 8811 	msr	BASEPRI, r3
 8011f46:	f3bf 8f6f 	isb	sy
 8011f4a:	f3bf 8f4f 	dsb	sy
 8011f4e:	61bb      	str	r3, [r7, #24]
}
 8011f50:	bf00      	nop
 8011f52:	e7fe      	b.n	8011f52 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011f54:	f7ff f9ee 	bl	8011334 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f5c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d024      	beq.n	8011fae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f66:	1e5a      	subs	r2, r3, #1
 8011f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f6a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d104      	bne.n	8011f7e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011f74:	f001 faa2 	bl	80134bc <pvTaskIncrementMutexHeldCount>
 8011f78:	4602      	mov	r2, r0
 8011f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f80:	691b      	ldr	r3, [r3, #16]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d00f      	beq.n	8011fa6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f88:	3310      	adds	r3, #16
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f000 ff62 	bl	8012e54 <xTaskRemoveFromEventList>
 8011f90:	4603      	mov	r3, r0
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d007      	beq.n	8011fa6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011f96:	4b54      	ldr	r3, [pc, #336]	; (80120e8 <xQueueSemaphoreTake+0x214>)
 8011f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f9c:	601a      	str	r2, [r3, #0]
 8011f9e:	f3bf 8f4f 	dsb	sy
 8011fa2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011fa6:	f7ff f9f5 	bl	8011394 <vPortExitCritical>
				return pdPASS;
 8011faa:	2301      	movs	r3, #1
 8011fac:	e097      	b.n	80120de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d111      	bne.n	8011fd8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d00a      	beq.n	8011fd0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8011fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fbe:	f383 8811 	msr	BASEPRI, r3
 8011fc2:	f3bf 8f6f 	isb	sy
 8011fc6:	f3bf 8f4f 	dsb	sy
 8011fca:	617b      	str	r3, [r7, #20]
}
 8011fcc:	bf00      	nop
 8011fce:	e7fe      	b.n	8011fce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011fd0:	f7ff f9e0 	bl	8011394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	e082      	b.n	80120de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d106      	bne.n	8011fec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011fde:	f107 030c 	add.w	r3, r7, #12
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f000 ff9a 	bl	8012f1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011fe8:	2301      	movs	r3, #1
 8011fea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011fec:	f7ff f9d2 	bl	8011394 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011ff0:	f000 fd0c 	bl	8012a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011ff4:	f7ff f99e 	bl	8011334 <vPortEnterCritical>
 8011ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ffe:	b25b      	sxtb	r3, r3
 8012000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012004:	d103      	bne.n	801200e <xQueueSemaphoreTake+0x13a>
 8012006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012008:	2200      	movs	r2, #0
 801200a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012014:	b25b      	sxtb	r3, r3
 8012016:	f1b3 3fff 	cmp.w	r3, #4294967295
 801201a:	d103      	bne.n	8012024 <xQueueSemaphoreTake+0x150>
 801201c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801201e:	2200      	movs	r2, #0
 8012020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012024:	f7ff f9b6 	bl	8011394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012028:	463a      	mov	r2, r7
 801202a:	f107 030c 	add.w	r3, r7, #12
 801202e:	4611      	mov	r1, r2
 8012030:	4618      	mov	r0, r3
 8012032:	f000 ff89 	bl	8012f48 <xTaskCheckForTimeOut>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d132      	bne.n	80120a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801203c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801203e:	f000 f9f2 	bl	8012426 <prvIsQueueEmpty>
 8012042:	4603      	mov	r3, r0
 8012044:	2b00      	cmp	r3, #0
 8012046:	d026      	beq.n	8012096 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d109      	bne.n	8012064 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012050:	f7ff f970 	bl	8011334 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012056:	689b      	ldr	r3, [r3, #8]
 8012058:	4618      	mov	r0, r3
 801205a:	f001 f8d7 	bl	801320c <xTaskPriorityInherit>
 801205e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012060:	f7ff f998 	bl	8011394 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012066:	3324      	adds	r3, #36	; 0x24
 8012068:	683a      	ldr	r2, [r7, #0]
 801206a:	4611      	mov	r1, r2
 801206c:	4618      	mov	r0, r3
 801206e:	f000 fea1 	bl	8012db4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012074:	f000 f985 	bl	8012382 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012078:	f000 fcd6 	bl	8012a28 <xTaskResumeAll>
 801207c:	4603      	mov	r3, r0
 801207e:	2b00      	cmp	r3, #0
 8012080:	f47f af68 	bne.w	8011f54 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012084:	4b18      	ldr	r3, [pc, #96]	; (80120e8 <xQueueSemaphoreTake+0x214>)
 8012086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801208a:	601a      	str	r2, [r3, #0]
 801208c:	f3bf 8f4f 	dsb	sy
 8012090:	f3bf 8f6f 	isb	sy
 8012094:	e75e      	b.n	8011f54 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012098:	f000 f973 	bl	8012382 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801209c:	f000 fcc4 	bl	8012a28 <xTaskResumeAll>
 80120a0:	e758      	b.n	8011f54 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80120a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80120a4:	f000 f96d 	bl	8012382 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80120a8:	f000 fcbe 	bl	8012a28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80120ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80120ae:	f000 f9ba 	bl	8012426 <prvIsQueueEmpty>
 80120b2:	4603      	mov	r3, r0
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	f43f af4d 	beq.w	8011f54 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80120ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d00d      	beq.n	80120dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80120c0:	f7ff f938 	bl	8011334 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80120c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80120c6:	f000 f8b4 	bl	8012232 <prvGetDisinheritPriorityAfterTimeout>
 80120ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80120cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ce:	689b      	ldr	r3, [r3, #8]
 80120d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80120d2:	4618      	mov	r0, r3
 80120d4:	f001 f970 	bl	80133b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80120d8:	f7ff f95c 	bl	8011394 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80120dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3738      	adds	r7, #56	; 0x38
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	e000ed04 	.word	0xe000ed04

080120ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b08e      	sub	sp, #56	; 0x38
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	60f8      	str	r0, [r7, #12]
 80120f4:	60b9      	str	r1, [r7, #8]
 80120f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80120fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d10a      	bne.n	8012118 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012106:	f383 8811 	msr	BASEPRI, r3
 801210a:	f3bf 8f6f 	isb	sy
 801210e:	f3bf 8f4f 	dsb	sy
 8012112:	623b      	str	r3, [r7, #32]
}
 8012114:	bf00      	nop
 8012116:	e7fe      	b.n	8012116 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d103      	bne.n	8012126 <xQueueReceiveFromISR+0x3a>
 801211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012122:	2b00      	cmp	r3, #0
 8012124:	d101      	bne.n	801212a <xQueueReceiveFromISR+0x3e>
 8012126:	2301      	movs	r3, #1
 8012128:	e000      	b.n	801212c <xQueueReceiveFromISR+0x40>
 801212a:	2300      	movs	r3, #0
 801212c:	2b00      	cmp	r3, #0
 801212e:	d10a      	bne.n	8012146 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012134:	f383 8811 	msr	BASEPRI, r3
 8012138:	f3bf 8f6f 	isb	sy
 801213c:	f3bf 8f4f 	dsb	sy
 8012140:	61fb      	str	r3, [r7, #28]
}
 8012142:	bf00      	nop
 8012144:	e7fe      	b.n	8012144 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012146:	f7ff f9d7 	bl	80114f8 <vPortValidateInterruptPriority>
	__asm volatile
 801214a:	f3ef 8211 	mrs	r2, BASEPRI
 801214e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012152:	f383 8811 	msr	BASEPRI, r3
 8012156:	f3bf 8f6f 	isb	sy
 801215a:	f3bf 8f4f 	dsb	sy
 801215e:	61ba      	str	r2, [r7, #24]
 8012160:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012162:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012164:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801216a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801216e:	2b00      	cmp	r3, #0
 8012170:	d02f      	beq.n	80121d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801217c:	68b9      	ldr	r1, [r7, #8]
 801217e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012180:	f000 f8d9 	bl	8012336 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012186:	1e5a      	subs	r2, r3, #1
 8012188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801218a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801218c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012194:	d112      	bne.n	80121bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012198:	691b      	ldr	r3, [r3, #16]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d016      	beq.n	80121cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801219e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a0:	3310      	adds	r3, #16
 80121a2:	4618      	mov	r0, r3
 80121a4:	f000 fe56 	bl	8012e54 <xTaskRemoveFromEventList>
 80121a8:	4603      	mov	r3, r0
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d00e      	beq.n	80121cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d00b      	beq.n	80121cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2201      	movs	r2, #1
 80121b8:	601a      	str	r2, [r3, #0]
 80121ba:	e007      	b.n	80121cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80121bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121c0:	3301      	adds	r3, #1
 80121c2:	b2db      	uxtb	r3, r3
 80121c4:	b25a      	sxtb	r2, r3
 80121c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80121cc:	2301      	movs	r3, #1
 80121ce:	637b      	str	r3, [r7, #52]	; 0x34
 80121d0:	e001      	b.n	80121d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80121d2:	2300      	movs	r3, #0
 80121d4:	637b      	str	r3, [r7, #52]	; 0x34
 80121d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	f383 8811 	msr	BASEPRI, r3
}
 80121e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80121e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3738      	adds	r7, #56	; 0x38
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}

080121ec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b084      	sub	sp, #16
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d10a      	bne.n	8012214 <vQueueDelete+0x28>
	__asm volatile
 80121fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012202:	f383 8811 	msr	BASEPRI, r3
 8012206:	f3bf 8f6f 	isb	sy
 801220a:	f3bf 8f4f 	dsb	sy
 801220e:	60bb      	str	r3, [r7, #8]
}
 8012210:	bf00      	nop
 8012212:	e7fe      	b.n	8012212 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012214:	68f8      	ldr	r0, [r7, #12]
 8012216:	f000 f95f 	bl	80124d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012220:	2b00      	cmp	r3, #0
 8012222:	d102      	bne.n	801222a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	f7fe fd87 	bl	8010d38 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801222a:	bf00      	nop
 801222c:	3710      	adds	r7, #16
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}

08012232 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012232:	b480      	push	{r7}
 8012234:	b085      	sub	sp, #20
 8012236:	af00      	add	r7, sp, #0
 8012238:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801223e:	2b00      	cmp	r3, #0
 8012240:	d006      	beq.n	8012250 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801224c:	60fb      	str	r3, [r7, #12]
 801224e:	e001      	b.n	8012254 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012250:	2300      	movs	r3, #0
 8012252:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012254:	68fb      	ldr	r3, [r7, #12]
	}
 8012256:	4618      	mov	r0, r3
 8012258:	3714      	adds	r7, #20
 801225a:	46bd      	mov	sp, r7
 801225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012260:	4770      	bx	lr

08012262 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012262:	b580      	push	{r7, lr}
 8012264:	b086      	sub	sp, #24
 8012266:	af00      	add	r7, sp, #0
 8012268:	60f8      	str	r0, [r7, #12]
 801226a:	60b9      	str	r1, [r7, #8]
 801226c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801226e:	2300      	movs	r3, #0
 8012270:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012276:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801227c:	2b00      	cmp	r3, #0
 801227e:	d10d      	bne.n	801229c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d14d      	bne.n	8012324 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	689b      	ldr	r3, [r3, #8]
 801228c:	4618      	mov	r0, r3
 801228e:	f001 f825 	bl	80132dc <xTaskPriorityDisinherit>
 8012292:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	2200      	movs	r2, #0
 8012298:	609a      	str	r2, [r3, #8]
 801229a:	e043      	b.n	8012324 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d119      	bne.n	80122d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	6858      	ldr	r0, [r3, #4]
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122aa:	461a      	mov	r2, r3
 80122ac:	68b9      	ldr	r1, [r7, #8]
 80122ae:	f013 fce1 	bl	8025c74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	685a      	ldr	r2, [r3, #4]
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122ba:	441a      	add	r2, r3
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	685a      	ldr	r2, [r3, #4]
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	689b      	ldr	r3, [r3, #8]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d32b      	bcc.n	8012324 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	605a      	str	r2, [r3, #4]
 80122d4:	e026      	b.n	8012324 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	68d8      	ldr	r0, [r3, #12]
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122de:	461a      	mov	r2, r3
 80122e0:	68b9      	ldr	r1, [r7, #8]
 80122e2:	f013 fcc7 	bl	8025c74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	68da      	ldr	r2, [r3, #12]
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122ee:	425b      	negs	r3, r3
 80122f0:	441a      	add	r2, r3
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	68da      	ldr	r2, [r3, #12]
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	429a      	cmp	r2, r3
 8012300:	d207      	bcs.n	8012312 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	689a      	ldr	r2, [r3, #8]
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801230a:	425b      	negs	r3, r3
 801230c:	441a      	add	r2, r3
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2b02      	cmp	r3, #2
 8012316:	d105      	bne.n	8012324 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d002      	beq.n	8012324 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	3b01      	subs	r3, #1
 8012322:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	1c5a      	adds	r2, r3, #1
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801232c:	697b      	ldr	r3, [r7, #20]
}
 801232e:	4618      	mov	r0, r3
 8012330:	3718      	adds	r7, #24
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}

08012336 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012336:	b580      	push	{r7, lr}
 8012338:	b082      	sub	sp, #8
 801233a:	af00      	add	r7, sp, #0
 801233c:	6078      	str	r0, [r7, #4]
 801233e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012344:	2b00      	cmp	r3, #0
 8012346:	d018      	beq.n	801237a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	68da      	ldr	r2, [r3, #12]
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012350:	441a      	add	r2, r3
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	68da      	ldr	r2, [r3, #12]
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	689b      	ldr	r3, [r3, #8]
 801235e:	429a      	cmp	r2, r3
 8012360:	d303      	bcc.n	801236a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681a      	ldr	r2, [r3, #0]
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	68d9      	ldr	r1, [r3, #12]
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012372:	461a      	mov	r2, r3
 8012374:	6838      	ldr	r0, [r7, #0]
 8012376:	f013 fc7d 	bl	8025c74 <memcpy>
	}
}
 801237a:	bf00      	nop
 801237c:	3708      	adds	r7, #8
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}

08012382 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012382:	b580      	push	{r7, lr}
 8012384:	b084      	sub	sp, #16
 8012386:	af00      	add	r7, sp, #0
 8012388:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801238a:	f7fe ffd3 	bl	8011334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012394:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012396:	e011      	b.n	80123bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801239c:	2b00      	cmp	r3, #0
 801239e:	d012      	beq.n	80123c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	3324      	adds	r3, #36	; 0x24
 80123a4:	4618      	mov	r0, r3
 80123a6:	f000 fd55 	bl	8012e54 <xTaskRemoveFromEventList>
 80123aa:	4603      	mov	r3, r0
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d001      	beq.n	80123b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80123b0:	f000 fe2c 	bl	801300c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80123b4:	7bfb      	ldrb	r3, [r7, #15]
 80123b6:	3b01      	subs	r3, #1
 80123b8:	b2db      	uxtb	r3, r3
 80123ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80123bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	dce9      	bgt.n	8012398 <prvUnlockQueue+0x16>
 80123c4:	e000      	b.n	80123c8 <prvUnlockQueue+0x46>
					break;
 80123c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	22ff      	movs	r2, #255	; 0xff
 80123cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80123d0:	f7fe ffe0 	bl	8011394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80123d4:	f7fe ffae 	bl	8011334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80123e0:	e011      	b.n	8012406 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	691b      	ldr	r3, [r3, #16]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d012      	beq.n	8012410 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	3310      	adds	r3, #16
 80123ee:	4618      	mov	r0, r3
 80123f0:	f000 fd30 	bl	8012e54 <xTaskRemoveFromEventList>
 80123f4:	4603      	mov	r3, r0
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d001      	beq.n	80123fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80123fa:	f000 fe07 	bl	801300c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80123fe:	7bbb      	ldrb	r3, [r7, #14]
 8012400:	3b01      	subs	r3, #1
 8012402:	b2db      	uxtb	r3, r3
 8012404:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801240a:	2b00      	cmp	r3, #0
 801240c:	dce9      	bgt.n	80123e2 <prvUnlockQueue+0x60>
 801240e:	e000      	b.n	8012412 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012410:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	22ff      	movs	r2, #255	; 0xff
 8012416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801241a:	f7fe ffbb 	bl	8011394 <vPortExitCritical>
}
 801241e:	bf00      	nop
 8012420:	3710      	adds	r7, #16
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}

08012426 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012426:	b580      	push	{r7, lr}
 8012428:	b084      	sub	sp, #16
 801242a:	af00      	add	r7, sp, #0
 801242c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801242e:	f7fe ff81 	bl	8011334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012436:	2b00      	cmp	r3, #0
 8012438:	d102      	bne.n	8012440 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801243a:	2301      	movs	r3, #1
 801243c:	60fb      	str	r3, [r7, #12]
 801243e:	e001      	b.n	8012444 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012440:	2300      	movs	r3, #0
 8012442:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012444:	f7fe ffa6 	bl	8011394 <vPortExitCritical>

	return xReturn;
 8012448:	68fb      	ldr	r3, [r7, #12]
}
 801244a:	4618      	mov	r0, r3
 801244c:	3710      	adds	r7, #16
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}

08012452 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012452:	b580      	push	{r7, lr}
 8012454:	b084      	sub	sp, #16
 8012456:	af00      	add	r7, sp, #0
 8012458:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801245a:	f7fe ff6b 	bl	8011334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012466:	429a      	cmp	r2, r3
 8012468:	d102      	bne.n	8012470 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801246a:	2301      	movs	r3, #1
 801246c:	60fb      	str	r3, [r7, #12]
 801246e:	e001      	b.n	8012474 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012470:	2300      	movs	r3, #0
 8012472:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012474:	f7fe ff8e 	bl	8011394 <vPortExitCritical>

	return xReturn;
 8012478:	68fb      	ldr	r3, [r7, #12]
}
 801247a:	4618      	mov	r0, r3
 801247c:	3710      	adds	r7, #16
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}
	...

08012484 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012484:	b480      	push	{r7}
 8012486:	b085      	sub	sp, #20
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801248e:	2300      	movs	r3, #0
 8012490:	60fb      	str	r3, [r7, #12]
 8012492:	e014      	b.n	80124be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012494:	4a0f      	ldr	r2, [pc, #60]	; (80124d4 <vQueueAddToRegistry+0x50>)
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d10b      	bne.n	80124b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80124a0:	490c      	ldr	r1, [pc, #48]	; (80124d4 <vQueueAddToRegistry+0x50>)
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	683a      	ldr	r2, [r7, #0]
 80124a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80124aa:	4a0a      	ldr	r2, [pc, #40]	; (80124d4 <vQueueAddToRegistry+0x50>)
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	00db      	lsls	r3, r3, #3
 80124b0:	4413      	add	r3, r2
 80124b2:	687a      	ldr	r2, [r7, #4]
 80124b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80124b6:	e006      	b.n	80124c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	3301      	adds	r3, #1
 80124bc:	60fb      	str	r3, [r7, #12]
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	2b07      	cmp	r3, #7
 80124c2:	d9e7      	bls.n	8012494 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80124c4:	bf00      	nop
 80124c6:	bf00      	nop
 80124c8:	3714      	adds	r7, #20
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr
 80124d2:	bf00      	nop
 80124d4:	2400ce2c 	.word	0x2400ce2c

080124d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80124d8:	b480      	push	{r7}
 80124da:	b085      	sub	sp, #20
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80124e0:	2300      	movs	r3, #0
 80124e2:	60fb      	str	r3, [r7, #12]
 80124e4:	e016      	b.n	8012514 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80124e6:	4a10      	ldr	r2, [pc, #64]	; (8012528 <vQueueUnregisterQueue+0x50>)
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	00db      	lsls	r3, r3, #3
 80124ec:	4413      	add	r3, r2
 80124ee:	685b      	ldr	r3, [r3, #4]
 80124f0:	687a      	ldr	r2, [r7, #4]
 80124f2:	429a      	cmp	r2, r3
 80124f4:	d10b      	bne.n	801250e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80124f6:	4a0c      	ldr	r2, [pc, #48]	; (8012528 <vQueueUnregisterQueue+0x50>)
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	2100      	movs	r1, #0
 80124fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012500:	4a09      	ldr	r2, [pc, #36]	; (8012528 <vQueueUnregisterQueue+0x50>)
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	00db      	lsls	r3, r3, #3
 8012506:	4413      	add	r3, r2
 8012508:	2200      	movs	r2, #0
 801250a:	605a      	str	r2, [r3, #4]
				break;
 801250c:	e006      	b.n	801251c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	3301      	adds	r3, #1
 8012512:	60fb      	str	r3, [r7, #12]
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2b07      	cmp	r3, #7
 8012518:	d9e5      	bls.n	80124e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801251a:	bf00      	nop
 801251c:	bf00      	nop
 801251e:	3714      	adds	r7, #20
 8012520:	46bd      	mov	sp, r7
 8012522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012526:	4770      	bx	lr
 8012528:	2400ce2c 	.word	0x2400ce2c

0801252c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801252c:	b580      	push	{r7, lr}
 801252e:	b086      	sub	sp, #24
 8012530:	af00      	add	r7, sp, #0
 8012532:	60f8      	str	r0, [r7, #12]
 8012534:	60b9      	str	r1, [r7, #8]
 8012536:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801253c:	f7fe fefa 	bl	8011334 <vPortEnterCritical>
 8012540:	697b      	ldr	r3, [r7, #20]
 8012542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012546:	b25b      	sxtb	r3, r3
 8012548:	f1b3 3fff 	cmp.w	r3, #4294967295
 801254c:	d103      	bne.n	8012556 <vQueueWaitForMessageRestricted+0x2a>
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	2200      	movs	r2, #0
 8012552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801255c:	b25b      	sxtb	r3, r3
 801255e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012562:	d103      	bne.n	801256c <vQueueWaitForMessageRestricted+0x40>
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	2200      	movs	r2, #0
 8012568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801256c:	f7fe ff12 	bl	8011394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012574:	2b00      	cmp	r3, #0
 8012576:	d106      	bne.n	8012586 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	3324      	adds	r3, #36	; 0x24
 801257c:	687a      	ldr	r2, [r7, #4]
 801257e:	68b9      	ldr	r1, [r7, #8]
 8012580:	4618      	mov	r0, r3
 8012582:	f000 fc3b 	bl	8012dfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012586:	6978      	ldr	r0, [r7, #20]
 8012588:	f7ff fefb 	bl	8012382 <prvUnlockQueue>
	}
 801258c:	bf00      	nop
 801258e:	3718      	adds	r7, #24
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012594:	b580      	push	{r7, lr}
 8012596:	b08e      	sub	sp, #56	; 0x38
 8012598:	af04      	add	r7, sp, #16
 801259a:	60f8      	str	r0, [r7, #12]
 801259c:	60b9      	str	r1, [r7, #8]
 801259e:	607a      	str	r2, [r7, #4]
 80125a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80125a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d10a      	bne.n	80125be <xTaskCreateStatic+0x2a>
	__asm volatile
 80125a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ac:	f383 8811 	msr	BASEPRI, r3
 80125b0:	f3bf 8f6f 	isb	sy
 80125b4:	f3bf 8f4f 	dsb	sy
 80125b8:	623b      	str	r3, [r7, #32]
}
 80125ba:	bf00      	nop
 80125bc:	e7fe      	b.n	80125bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80125be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d10a      	bne.n	80125da <xTaskCreateStatic+0x46>
	__asm volatile
 80125c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c8:	f383 8811 	msr	BASEPRI, r3
 80125cc:	f3bf 8f6f 	isb	sy
 80125d0:	f3bf 8f4f 	dsb	sy
 80125d4:	61fb      	str	r3, [r7, #28]
}
 80125d6:	bf00      	nop
 80125d8:	e7fe      	b.n	80125d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80125da:	235c      	movs	r3, #92	; 0x5c
 80125dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	2b5c      	cmp	r3, #92	; 0x5c
 80125e2:	d00a      	beq.n	80125fa <xTaskCreateStatic+0x66>
	__asm volatile
 80125e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e8:	f383 8811 	msr	BASEPRI, r3
 80125ec:	f3bf 8f6f 	isb	sy
 80125f0:	f3bf 8f4f 	dsb	sy
 80125f4:	61bb      	str	r3, [r7, #24]
}
 80125f6:	bf00      	nop
 80125f8:	e7fe      	b.n	80125f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80125fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80125fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d01e      	beq.n	8012640 <xTaskCreateStatic+0xac>
 8012602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012604:	2b00      	cmp	r3, #0
 8012606:	d01b      	beq.n	8012640 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801260a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012610:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012614:	2202      	movs	r2, #2
 8012616:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801261a:	2300      	movs	r3, #0
 801261c:	9303      	str	r3, [sp, #12]
 801261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012620:	9302      	str	r3, [sp, #8]
 8012622:	f107 0314 	add.w	r3, r7, #20
 8012626:	9301      	str	r3, [sp, #4]
 8012628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262a:	9300      	str	r3, [sp, #0]
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	68b9      	ldr	r1, [r7, #8]
 8012632:	68f8      	ldr	r0, [r7, #12]
 8012634:	f000 f850 	bl	80126d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801263a:	f000 f8dd 	bl	80127f8 <prvAddNewTaskToReadyList>
 801263e:	e001      	b.n	8012644 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012640:	2300      	movs	r3, #0
 8012642:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012644:	697b      	ldr	r3, [r7, #20]
	}
 8012646:	4618      	mov	r0, r3
 8012648:	3728      	adds	r7, #40	; 0x28
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}

0801264e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801264e:	b580      	push	{r7, lr}
 8012650:	b08c      	sub	sp, #48	; 0x30
 8012652:	af04      	add	r7, sp, #16
 8012654:	60f8      	str	r0, [r7, #12]
 8012656:	60b9      	str	r1, [r7, #8]
 8012658:	603b      	str	r3, [r7, #0]
 801265a:	4613      	mov	r3, r2
 801265c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801265e:	88fb      	ldrh	r3, [r7, #6]
 8012660:	009b      	lsls	r3, r3, #2
 8012662:	4618      	mov	r0, r3
 8012664:	f7fe fa9c 	bl	8010ba0 <pvPortMalloc>
 8012668:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d00e      	beq.n	801268e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012670:	205c      	movs	r0, #92	; 0x5c
 8012672:	f7fe fa95 	bl	8010ba0 <pvPortMalloc>
 8012676:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012678:	69fb      	ldr	r3, [r7, #28]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d003      	beq.n	8012686 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801267e:	69fb      	ldr	r3, [r7, #28]
 8012680:	697a      	ldr	r2, [r7, #20]
 8012682:	631a      	str	r2, [r3, #48]	; 0x30
 8012684:	e005      	b.n	8012692 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012686:	6978      	ldr	r0, [r7, #20]
 8012688:	f7fe fb56 	bl	8010d38 <vPortFree>
 801268c:	e001      	b.n	8012692 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801268e:	2300      	movs	r3, #0
 8012690:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012692:	69fb      	ldr	r3, [r7, #28]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d017      	beq.n	80126c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012698:	69fb      	ldr	r3, [r7, #28]
 801269a:	2200      	movs	r2, #0
 801269c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80126a0:	88fa      	ldrh	r2, [r7, #6]
 80126a2:	2300      	movs	r3, #0
 80126a4:	9303      	str	r3, [sp, #12]
 80126a6:	69fb      	ldr	r3, [r7, #28]
 80126a8:	9302      	str	r3, [sp, #8]
 80126aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ac:	9301      	str	r3, [sp, #4]
 80126ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b0:	9300      	str	r3, [sp, #0]
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	68b9      	ldr	r1, [r7, #8]
 80126b6:	68f8      	ldr	r0, [r7, #12]
 80126b8:	f000 f80e 	bl	80126d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80126bc:	69f8      	ldr	r0, [r7, #28]
 80126be:	f000 f89b 	bl	80127f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80126c2:	2301      	movs	r3, #1
 80126c4:	61bb      	str	r3, [r7, #24]
 80126c6:	e002      	b.n	80126ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80126c8:	f04f 33ff 	mov.w	r3, #4294967295
 80126cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80126ce:	69bb      	ldr	r3, [r7, #24]
	}
 80126d0:	4618      	mov	r0, r3
 80126d2:	3720      	adds	r7, #32
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}

080126d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b088      	sub	sp, #32
 80126dc:	af00      	add	r7, sp, #0
 80126de:	60f8      	str	r0, [r7, #12]
 80126e0:	60b9      	str	r1, [r7, #8]
 80126e2:	607a      	str	r2, [r7, #4]
 80126e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80126e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	009b      	lsls	r3, r3, #2
 80126ee:	461a      	mov	r2, r3
 80126f0:	21a5      	movs	r1, #165	; 0xa5
 80126f2:	f013 facd 	bl	8025c90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80126f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80126fa:	6879      	ldr	r1, [r7, #4]
 80126fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012700:	440b      	add	r3, r1
 8012702:	009b      	lsls	r3, r3, #2
 8012704:	4413      	add	r3, r2
 8012706:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012708:	69bb      	ldr	r3, [r7, #24]
 801270a:	f023 0307 	bic.w	r3, r3, #7
 801270e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012710:	69bb      	ldr	r3, [r7, #24]
 8012712:	f003 0307 	and.w	r3, r3, #7
 8012716:	2b00      	cmp	r3, #0
 8012718:	d00a      	beq.n	8012730 <prvInitialiseNewTask+0x58>
	__asm volatile
 801271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801271e:	f383 8811 	msr	BASEPRI, r3
 8012722:	f3bf 8f6f 	isb	sy
 8012726:	f3bf 8f4f 	dsb	sy
 801272a:	617b      	str	r3, [r7, #20]
}
 801272c:	bf00      	nop
 801272e:	e7fe      	b.n	801272e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d01f      	beq.n	8012776 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012736:	2300      	movs	r3, #0
 8012738:	61fb      	str	r3, [r7, #28]
 801273a:	e012      	b.n	8012762 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801273c:	68ba      	ldr	r2, [r7, #8]
 801273e:	69fb      	ldr	r3, [r7, #28]
 8012740:	4413      	add	r3, r2
 8012742:	7819      	ldrb	r1, [r3, #0]
 8012744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012746:	69fb      	ldr	r3, [r7, #28]
 8012748:	4413      	add	r3, r2
 801274a:	3334      	adds	r3, #52	; 0x34
 801274c:	460a      	mov	r2, r1
 801274e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012750:	68ba      	ldr	r2, [r7, #8]
 8012752:	69fb      	ldr	r3, [r7, #28]
 8012754:	4413      	add	r3, r2
 8012756:	781b      	ldrb	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d006      	beq.n	801276a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	3301      	adds	r3, #1
 8012760:	61fb      	str	r3, [r7, #28]
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	2b0f      	cmp	r3, #15
 8012766:	d9e9      	bls.n	801273c <prvInitialiseNewTask+0x64>
 8012768:	e000      	b.n	801276c <prvInitialiseNewTask+0x94>
			{
				break;
 801276a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801276c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801276e:	2200      	movs	r2, #0
 8012770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012774:	e003      	b.n	801277e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012778:	2200      	movs	r2, #0
 801277a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012780:	2b37      	cmp	r3, #55	; 0x37
 8012782:	d901      	bls.n	8012788 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012784:	2337      	movs	r3, #55	; 0x37
 8012786:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801278a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801278c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012792:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012796:	2200      	movs	r2, #0
 8012798:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279c:	3304      	adds	r3, #4
 801279e:	4618      	mov	r0, r3
 80127a0:	f7fe fc08 	bl	8010fb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80127a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a6:	3318      	adds	r3, #24
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7fe fc03 	bl	8010fb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80127ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80127ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80127be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80127c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c6:	2200      	movs	r2, #0
 80127c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80127ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127cc:	2200      	movs	r2, #0
 80127ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80127d2:	683a      	ldr	r2, [r7, #0]
 80127d4:	68f9      	ldr	r1, [r7, #12]
 80127d6:	69b8      	ldr	r0, [r7, #24]
 80127d8:	f7fe fc80 	bl	80110dc <pxPortInitialiseStack>
 80127dc:	4602      	mov	r2, r0
 80127de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80127e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d002      	beq.n	80127ee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80127e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80127ee:	bf00      	nop
 80127f0:	3720      	adds	r7, #32
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
	...

080127f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012800:	f7fe fd98 	bl	8011334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012804:	4b2d      	ldr	r3, [pc, #180]	; (80128bc <prvAddNewTaskToReadyList+0xc4>)
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	3301      	adds	r3, #1
 801280a:	4a2c      	ldr	r2, [pc, #176]	; (80128bc <prvAddNewTaskToReadyList+0xc4>)
 801280c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801280e:	4b2c      	ldr	r3, [pc, #176]	; (80128c0 <prvAddNewTaskToReadyList+0xc8>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d109      	bne.n	801282a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012816:	4a2a      	ldr	r2, [pc, #168]	; (80128c0 <prvAddNewTaskToReadyList+0xc8>)
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801281c:	4b27      	ldr	r3, [pc, #156]	; (80128bc <prvAddNewTaskToReadyList+0xc4>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	2b01      	cmp	r3, #1
 8012822:	d110      	bne.n	8012846 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012824:	f000 fc16 	bl	8013054 <prvInitialiseTaskLists>
 8012828:	e00d      	b.n	8012846 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801282a:	4b26      	ldr	r3, [pc, #152]	; (80128c4 <prvAddNewTaskToReadyList+0xcc>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d109      	bne.n	8012846 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012832:	4b23      	ldr	r3, [pc, #140]	; (80128c0 <prvAddNewTaskToReadyList+0xc8>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801283c:	429a      	cmp	r2, r3
 801283e:	d802      	bhi.n	8012846 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012840:	4a1f      	ldr	r2, [pc, #124]	; (80128c0 <prvAddNewTaskToReadyList+0xc8>)
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012846:	4b20      	ldr	r3, [pc, #128]	; (80128c8 <prvAddNewTaskToReadyList+0xd0>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	3301      	adds	r3, #1
 801284c:	4a1e      	ldr	r2, [pc, #120]	; (80128c8 <prvAddNewTaskToReadyList+0xd0>)
 801284e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012850:	4b1d      	ldr	r3, [pc, #116]	; (80128c8 <prvAddNewTaskToReadyList+0xd0>)
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801285c:	4b1b      	ldr	r3, [pc, #108]	; (80128cc <prvAddNewTaskToReadyList+0xd4>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	429a      	cmp	r2, r3
 8012862:	d903      	bls.n	801286c <prvAddNewTaskToReadyList+0x74>
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012868:	4a18      	ldr	r2, [pc, #96]	; (80128cc <prvAddNewTaskToReadyList+0xd4>)
 801286a:	6013      	str	r3, [r2, #0]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012870:	4613      	mov	r3, r2
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	4413      	add	r3, r2
 8012876:	009b      	lsls	r3, r3, #2
 8012878:	4a15      	ldr	r2, [pc, #84]	; (80128d0 <prvAddNewTaskToReadyList+0xd8>)
 801287a:	441a      	add	r2, r3
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	3304      	adds	r3, #4
 8012880:	4619      	mov	r1, r3
 8012882:	4610      	mov	r0, r2
 8012884:	f7fe fba3 	bl	8010fce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012888:	f7fe fd84 	bl	8011394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801288c:	4b0d      	ldr	r3, [pc, #52]	; (80128c4 <prvAddNewTaskToReadyList+0xcc>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d00e      	beq.n	80128b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012894:	4b0a      	ldr	r3, [pc, #40]	; (80128c0 <prvAddNewTaskToReadyList+0xc8>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801289e:	429a      	cmp	r2, r3
 80128a0:	d207      	bcs.n	80128b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80128a2:	4b0c      	ldr	r3, [pc, #48]	; (80128d4 <prvAddNewTaskToReadyList+0xdc>)
 80128a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128a8:	601a      	str	r2, [r3, #0]
 80128aa:	f3bf 8f4f 	dsb	sy
 80128ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80128b2:	bf00      	nop
 80128b4:	3708      	adds	r7, #8
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}
 80128ba:	bf00      	nop
 80128bc:	2400c740 	.word	0x2400c740
 80128c0:	2400c26c 	.word	0x2400c26c
 80128c4:	2400c74c 	.word	0x2400c74c
 80128c8:	2400c75c 	.word	0x2400c75c
 80128cc:	2400c748 	.word	0x2400c748
 80128d0:	2400c270 	.word	0x2400c270
 80128d4:	e000ed04 	.word	0xe000ed04

080128d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b084      	sub	sp, #16
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80128e0:	2300      	movs	r3, #0
 80128e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d017      	beq.n	801291a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80128ea:	4b13      	ldr	r3, [pc, #76]	; (8012938 <vTaskDelay+0x60>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d00a      	beq.n	8012908 <vTaskDelay+0x30>
	__asm volatile
 80128f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f6:	f383 8811 	msr	BASEPRI, r3
 80128fa:	f3bf 8f6f 	isb	sy
 80128fe:	f3bf 8f4f 	dsb	sy
 8012902:	60bb      	str	r3, [r7, #8]
}
 8012904:	bf00      	nop
 8012906:	e7fe      	b.n	8012906 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012908:	f000 f880 	bl	8012a0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801290c:	2100      	movs	r1, #0
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	f000 fde8 	bl	80134e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012914:	f000 f888 	bl	8012a28 <xTaskResumeAll>
 8012918:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d107      	bne.n	8012930 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012920:	4b06      	ldr	r3, [pc, #24]	; (801293c <vTaskDelay+0x64>)
 8012922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012926:	601a      	str	r2, [r3, #0]
 8012928:	f3bf 8f4f 	dsb	sy
 801292c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012930:	bf00      	nop
 8012932:	3710      	adds	r7, #16
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}
 8012938:	2400c768 	.word	0x2400c768
 801293c:	e000ed04 	.word	0xe000ed04

08012940 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b08a      	sub	sp, #40	; 0x28
 8012944:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012946:	2300      	movs	r3, #0
 8012948:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801294a:	2300      	movs	r3, #0
 801294c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801294e:	463a      	mov	r2, r7
 8012950:	1d39      	adds	r1, r7, #4
 8012952:	f107 0308 	add.w	r3, r7, #8
 8012956:	4618      	mov	r0, r3
 8012958:	f7fe f8ee 	bl	8010b38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801295c:	6839      	ldr	r1, [r7, #0]
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	68ba      	ldr	r2, [r7, #8]
 8012962:	9202      	str	r2, [sp, #8]
 8012964:	9301      	str	r3, [sp, #4]
 8012966:	2300      	movs	r3, #0
 8012968:	9300      	str	r3, [sp, #0]
 801296a:	2300      	movs	r3, #0
 801296c:	460a      	mov	r2, r1
 801296e:	4921      	ldr	r1, [pc, #132]	; (80129f4 <vTaskStartScheduler+0xb4>)
 8012970:	4821      	ldr	r0, [pc, #132]	; (80129f8 <vTaskStartScheduler+0xb8>)
 8012972:	f7ff fe0f 	bl	8012594 <xTaskCreateStatic>
 8012976:	4603      	mov	r3, r0
 8012978:	4a20      	ldr	r2, [pc, #128]	; (80129fc <vTaskStartScheduler+0xbc>)
 801297a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801297c:	4b1f      	ldr	r3, [pc, #124]	; (80129fc <vTaskStartScheduler+0xbc>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d002      	beq.n	801298a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012984:	2301      	movs	r3, #1
 8012986:	617b      	str	r3, [r7, #20]
 8012988:	e001      	b.n	801298e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801298a:	2300      	movs	r3, #0
 801298c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	2b01      	cmp	r3, #1
 8012992:	d102      	bne.n	801299a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012994:	f000 fdfa 	bl	801358c <xTimerCreateTimerTask>
 8012998:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	2b01      	cmp	r3, #1
 801299e:	d116      	bne.n	80129ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80129a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a4:	f383 8811 	msr	BASEPRI, r3
 80129a8:	f3bf 8f6f 	isb	sy
 80129ac:	f3bf 8f4f 	dsb	sy
 80129b0:	613b      	str	r3, [r7, #16]
}
 80129b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80129b4:	4b12      	ldr	r3, [pc, #72]	; (8012a00 <vTaskStartScheduler+0xc0>)
 80129b6:	f04f 32ff 	mov.w	r2, #4294967295
 80129ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80129bc:	4b11      	ldr	r3, [pc, #68]	; (8012a04 <vTaskStartScheduler+0xc4>)
 80129be:	2201      	movs	r2, #1
 80129c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80129c2:	4b11      	ldr	r3, [pc, #68]	; (8012a08 <vTaskStartScheduler+0xc8>)
 80129c4:	2200      	movs	r2, #0
 80129c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80129c8:	f7fe fc12 	bl	80111f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80129cc:	e00e      	b.n	80129ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80129ce:	697b      	ldr	r3, [r7, #20]
 80129d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129d4:	d10a      	bne.n	80129ec <vTaskStartScheduler+0xac>
	__asm volatile
 80129d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129da:	f383 8811 	msr	BASEPRI, r3
 80129de:	f3bf 8f6f 	isb	sy
 80129e2:	f3bf 8f4f 	dsb	sy
 80129e6:	60fb      	str	r3, [r7, #12]
}
 80129e8:	bf00      	nop
 80129ea:	e7fe      	b.n	80129ea <vTaskStartScheduler+0xaa>
}
 80129ec:	bf00      	nop
 80129ee:	3718      	adds	r7, #24
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	08027c18 	.word	0x08027c18
 80129f8:	08013025 	.word	0x08013025
 80129fc:	2400c764 	.word	0x2400c764
 8012a00:	2400c760 	.word	0x2400c760
 8012a04:	2400c74c 	.word	0x2400c74c
 8012a08:	2400c744 	.word	0x2400c744

08012a0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012a10:	4b04      	ldr	r3, [pc, #16]	; (8012a24 <vTaskSuspendAll+0x18>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	3301      	adds	r3, #1
 8012a16:	4a03      	ldr	r2, [pc, #12]	; (8012a24 <vTaskSuspendAll+0x18>)
 8012a18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012a1a:	bf00      	nop
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a22:	4770      	bx	lr
 8012a24:	2400c768 	.word	0x2400c768

08012a28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012a32:	2300      	movs	r3, #0
 8012a34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012a36:	4b42      	ldr	r3, [pc, #264]	; (8012b40 <xTaskResumeAll+0x118>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d10a      	bne.n	8012a54 <xTaskResumeAll+0x2c>
	__asm volatile
 8012a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a42:	f383 8811 	msr	BASEPRI, r3
 8012a46:	f3bf 8f6f 	isb	sy
 8012a4a:	f3bf 8f4f 	dsb	sy
 8012a4e:	603b      	str	r3, [r7, #0]
}
 8012a50:	bf00      	nop
 8012a52:	e7fe      	b.n	8012a52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012a54:	f7fe fc6e 	bl	8011334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012a58:	4b39      	ldr	r3, [pc, #228]	; (8012b40 <xTaskResumeAll+0x118>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	3b01      	subs	r3, #1
 8012a5e:	4a38      	ldr	r2, [pc, #224]	; (8012b40 <xTaskResumeAll+0x118>)
 8012a60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a62:	4b37      	ldr	r3, [pc, #220]	; (8012b40 <xTaskResumeAll+0x118>)
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d162      	bne.n	8012b30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012a6a:	4b36      	ldr	r3, [pc, #216]	; (8012b44 <xTaskResumeAll+0x11c>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d05e      	beq.n	8012b30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012a72:	e02f      	b.n	8012ad4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a74:	4b34      	ldr	r3, [pc, #208]	; (8012b48 <xTaskResumeAll+0x120>)
 8012a76:	68db      	ldr	r3, [r3, #12]
 8012a78:	68db      	ldr	r3, [r3, #12]
 8012a7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	3318      	adds	r3, #24
 8012a80:	4618      	mov	r0, r3
 8012a82:	f7fe fb01 	bl	8011088 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	3304      	adds	r3, #4
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f7fe fafc 	bl	8011088 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a94:	4b2d      	ldr	r3, [pc, #180]	; (8012b4c <xTaskResumeAll+0x124>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d903      	bls.n	8012aa4 <xTaskResumeAll+0x7c>
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aa0:	4a2a      	ldr	r2, [pc, #168]	; (8012b4c <xTaskResumeAll+0x124>)
 8012aa2:	6013      	str	r3, [r2, #0]
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aa8:	4613      	mov	r3, r2
 8012aaa:	009b      	lsls	r3, r3, #2
 8012aac:	4413      	add	r3, r2
 8012aae:	009b      	lsls	r3, r3, #2
 8012ab0:	4a27      	ldr	r2, [pc, #156]	; (8012b50 <xTaskResumeAll+0x128>)
 8012ab2:	441a      	add	r2, r3
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	3304      	adds	r3, #4
 8012ab8:	4619      	mov	r1, r3
 8012aba:	4610      	mov	r0, r2
 8012abc:	f7fe fa87 	bl	8010fce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ac4:	4b23      	ldr	r3, [pc, #140]	; (8012b54 <xTaskResumeAll+0x12c>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d302      	bcc.n	8012ad4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012ace:	4b22      	ldr	r3, [pc, #136]	; (8012b58 <xTaskResumeAll+0x130>)
 8012ad0:	2201      	movs	r2, #1
 8012ad2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012ad4:	4b1c      	ldr	r3, [pc, #112]	; (8012b48 <xTaskResumeAll+0x120>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d1cb      	bne.n	8012a74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d001      	beq.n	8012ae6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012ae2:	f000 fb55 	bl	8013190 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012ae6:	4b1d      	ldr	r3, [pc, #116]	; (8012b5c <xTaskResumeAll+0x134>)
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d010      	beq.n	8012b14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012af2:	f000 f847 	bl	8012b84 <xTaskIncrementTick>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d002      	beq.n	8012b02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012afc:	4b16      	ldr	r3, [pc, #88]	; (8012b58 <xTaskResumeAll+0x130>)
 8012afe:	2201      	movs	r2, #1
 8012b00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	3b01      	subs	r3, #1
 8012b06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d1f1      	bne.n	8012af2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012b0e:	4b13      	ldr	r3, [pc, #76]	; (8012b5c <xTaskResumeAll+0x134>)
 8012b10:	2200      	movs	r2, #0
 8012b12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012b14:	4b10      	ldr	r3, [pc, #64]	; (8012b58 <xTaskResumeAll+0x130>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d009      	beq.n	8012b30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012b20:	4b0f      	ldr	r3, [pc, #60]	; (8012b60 <xTaskResumeAll+0x138>)
 8012b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b26:	601a      	str	r2, [r3, #0]
 8012b28:	f3bf 8f4f 	dsb	sy
 8012b2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012b30:	f7fe fc30 	bl	8011394 <vPortExitCritical>

	return xAlreadyYielded;
 8012b34:	68bb      	ldr	r3, [r7, #8]
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3710      	adds	r7, #16
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
 8012b3e:	bf00      	nop
 8012b40:	2400c768 	.word	0x2400c768
 8012b44:	2400c740 	.word	0x2400c740
 8012b48:	2400c700 	.word	0x2400c700
 8012b4c:	2400c748 	.word	0x2400c748
 8012b50:	2400c270 	.word	0x2400c270
 8012b54:	2400c26c 	.word	0x2400c26c
 8012b58:	2400c754 	.word	0x2400c754
 8012b5c:	2400c750 	.word	0x2400c750
 8012b60:	e000ed04 	.word	0xe000ed04

08012b64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012b64:	b480      	push	{r7}
 8012b66:	b083      	sub	sp, #12
 8012b68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012b6a:	4b05      	ldr	r3, [pc, #20]	; (8012b80 <xTaskGetTickCount+0x1c>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012b70:	687b      	ldr	r3, [r7, #4]
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	370c      	adds	r7, #12
 8012b76:	46bd      	mov	sp, r7
 8012b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7c:	4770      	bx	lr
 8012b7e:	bf00      	nop
 8012b80:	2400c744 	.word	0x2400c744

08012b84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b086      	sub	sp, #24
 8012b88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b8e:	4b4f      	ldr	r3, [pc, #316]	; (8012ccc <xTaskIncrementTick+0x148>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	f040 808f 	bne.w	8012cb6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012b98:	4b4d      	ldr	r3, [pc, #308]	; (8012cd0 <xTaskIncrementTick+0x14c>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	3301      	adds	r3, #1
 8012b9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012ba0:	4a4b      	ldr	r2, [pc, #300]	; (8012cd0 <xTaskIncrementTick+0x14c>)
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d120      	bne.n	8012bee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012bac:	4b49      	ldr	r3, [pc, #292]	; (8012cd4 <xTaskIncrementTick+0x150>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d00a      	beq.n	8012bcc <xTaskIncrementTick+0x48>
	__asm volatile
 8012bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bba:	f383 8811 	msr	BASEPRI, r3
 8012bbe:	f3bf 8f6f 	isb	sy
 8012bc2:	f3bf 8f4f 	dsb	sy
 8012bc6:	603b      	str	r3, [r7, #0]
}
 8012bc8:	bf00      	nop
 8012bca:	e7fe      	b.n	8012bca <xTaskIncrementTick+0x46>
 8012bcc:	4b41      	ldr	r3, [pc, #260]	; (8012cd4 <xTaskIncrementTick+0x150>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	60fb      	str	r3, [r7, #12]
 8012bd2:	4b41      	ldr	r3, [pc, #260]	; (8012cd8 <xTaskIncrementTick+0x154>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	4a3f      	ldr	r2, [pc, #252]	; (8012cd4 <xTaskIncrementTick+0x150>)
 8012bd8:	6013      	str	r3, [r2, #0]
 8012bda:	4a3f      	ldr	r2, [pc, #252]	; (8012cd8 <xTaskIncrementTick+0x154>)
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	6013      	str	r3, [r2, #0]
 8012be0:	4b3e      	ldr	r3, [pc, #248]	; (8012cdc <xTaskIncrementTick+0x158>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	3301      	adds	r3, #1
 8012be6:	4a3d      	ldr	r2, [pc, #244]	; (8012cdc <xTaskIncrementTick+0x158>)
 8012be8:	6013      	str	r3, [r2, #0]
 8012bea:	f000 fad1 	bl	8013190 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012bee:	4b3c      	ldr	r3, [pc, #240]	; (8012ce0 <xTaskIncrementTick+0x15c>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	693a      	ldr	r2, [r7, #16]
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d349      	bcc.n	8012c8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012bf8:	4b36      	ldr	r3, [pc, #216]	; (8012cd4 <xTaskIncrementTick+0x150>)
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d104      	bne.n	8012c0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c02:	4b37      	ldr	r3, [pc, #220]	; (8012ce0 <xTaskIncrementTick+0x15c>)
 8012c04:	f04f 32ff 	mov.w	r2, #4294967295
 8012c08:	601a      	str	r2, [r3, #0]
					break;
 8012c0a:	e03f      	b.n	8012c8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c0c:	4b31      	ldr	r3, [pc, #196]	; (8012cd4 <xTaskIncrementTick+0x150>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	685b      	ldr	r3, [r3, #4]
 8012c1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012c1c:	693a      	ldr	r2, [r7, #16]
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	429a      	cmp	r2, r3
 8012c22:	d203      	bcs.n	8012c2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012c24:	4a2e      	ldr	r2, [pc, #184]	; (8012ce0 <xTaskIncrementTick+0x15c>)
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012c2a:	e02f      	b.n	8012c8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	3304      	adds	r3, #4
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7fe fa29 	bl	8011088 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d004      	beq.n	8012c48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	3318      	adds	r3, #24
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7fe fa20 	bl	8011088 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c4c:	4b25      	ldr	r3, [pc, #148]	; (8012ce4 <xTaskIncrementTick+0x160>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d903      	bls.n	8012c5c <xTaskIncrementTick+0xd8>
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c58:	4a22      	ldr	r2, [pc, #136]	; (8012ce4 <xTaskIncrementTick+0x160>)
 8012c5a:	6013      	str	r3, [r2, #0]
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c60:	4613      	mov	r3, r2
 8012c62:	009b      	lsls	r3, r3, #2
 8012c64:	4413      	add	r3, r2
 8012c66:	009b      	lsls	r3, r3, #2
 8012c68:	4a1f      	ldr	r2, [pc, #124]	; (8012ce8 <xTaskIncrementTick+0x164>)
 8012c6a:	441a      	add	r2, r3
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	3304      	adds	r3, #4
 8012c70:	4619      	mov	r1, r3
 8012c72:	4610      	mov	r0, r2
 8012c74:	f7fe f9ab 	bl	8010fce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012c78:	68bb      	ldr	r3, [r7, #8]
 8012c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c7c:	4b1b      	ldr	r3, [pc, #108]	; (8012cec <xTaskIncrementTick+0x168>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d3b8      	bcc.n	8012bf8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012c86:	2301      	movs	r3, #1
 8012c88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c8a:	e7b5      	b.n	8012bf8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012c8c:	4b17      	ldr	r3, [pc, #92]	; (8012cec <xTaskIncrementTick+0x168>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c92:	4915      	ldr	r1, [pc, #84]	; (8012ce8 <xTaskIncrementTick+0x164>)
 8012c94:	4613      	mov	r3, r2
 8012c96:	009b      	lsls	r3, r3, #2
 8012c98:	4413      	add	r3, r2
 8012c9a:	009b      	lsls	r3, r3, #2
 8012c9c:	440b      	add	r3, r1
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	2b01      	cmp	r3, #1
 8012ca2:	d901      	bls.n	8012ca8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012ca4:	2301      	movs	r3, #1
 8012ca6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012ca8:	4b11      	ldr	r3, [pc, #68]	; (8012cf0 <xTaskIncrementTick+0x16c>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d007      	beq.n	8012cc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	617b      	str	r3, [r7, #20]
 8012cb4:	e004      	b.n	8012cc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012cb6:	4b0f      	ldr	r3, [pc, #60]	; (8012cf4 <xTaskIncrementTick+0x170>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	3301      	adds	r3, #1
 8012cbc:	4a0d      	ldr	r2, [pc, #52]	; (8012cf4 <xTaskIncrementTick+0x170>)
 8012cbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012cc0:	697b      	ldr	r3, [r7, #20]
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3718      	adds	r7, #24
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	2400c768 	.word	0x2400c768
 8012cd0:	2400c744 	.word	0x2400c744
 8012cd4:	2400c6f8 	.word	0x2400c6f8
 8012cd8:	2400c6fc 	.word	0x2400c6fc
 8012cdc:	2400c758 	.word	0x2400c758
 8012ce0:	2400c760 	.word	0x2400c760
 8012ce4:	2400c748 	.word	0x2400c748
 8012ce8:	2400c270 	.word	0x2400c270
 8012cec:	2400c26c 	.word	0x2400c26c
 8012cf0:	2400c754 	.word	0x2400c754
 8012cf4:	2400c750 	.word	0x2400c750

08012cf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b085      	sub	sp, #20
 8012cfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012cfe:	4b28      	ldr	r3, [pc, #160]	; (8012da0 <vTaskSwitchContext+0xa8>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d003      	beq.n	8012d0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012d06:	4b27      	ldr	r3, [pc, #156]	; (8012da4 <vTaskSwitchContext+0xac>)
 8012d08:	2201      	movs	r2, #1
 8012d0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012d0c:	e041      	b.n	8012d92 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8012d0e:	4b25      	ldr	r3, [pc, #148]	; (8012da4 <vTaskSwitchContext+0xac>)
 8012d10:	2200      	movs	r2, #0
 8012d12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d14:	4b24      	ldr	r3, [pc, #144]	; (8012da8 <vTaskSwitchContext+0xb0>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	60fb      	str	r3, [r7, #12]
 8012d1a:	e010      	b.n	8012d3e <vTaskSwitchContext+0x46>
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d10a      	bne.n	8012d38 <vTaskSwitchContext+0x40>
	__asm volatile
 8012d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d26:	f383 8811 	msr	BASEPRI, r3
 8012d2a:	f3bf 8f6f 	isb	sy
 8012d2e:	f3bf 8f4f 	dsb	sy
 8012d32:	607b      	str	r3, [r7, #4]
}
 8012d34:	bf00      	nop
 8012d36:	e7fe      	b.n	8012d36 <vTaskSwitchContext+0x3e>
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	3b01      	subs	r3, #1
 8012d3c:	60fb      	str	r3, [r7, #12]
 8012d3e:	491b      	ldr	r1, [pc, #108]	; (8012dac <vTaskSwitchContext+0xb4>)
 8012d40:	68fa      	ldr	r2, [r7, #12]
 8012d42:	4613      	mov	r3, r2
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	4413      	add	r3, r2
 8012d48:	009b      	lsls	r3, r3, #2
 8012d4a:	440b      	add	r3, r1
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d0e4      	beq.n	8012d1c <vTaskSwitchContext+0x24>
 8012d52:	68fa      	ldr	r2, [r7, #12]
 8012d54:	4613      	mov	r3, r2
 8012d56:	009b      	lsls	r3, r3, #2
 8012d58:	4413      	add	r3, r2
 8012d5a:	009b      	lsls	r3, r3, #2
 8012d5c:	4a13      	ldr	r2, [pc, #76]	; (8012dac <vTaskSwitchContext+0xb4>)
 8012d5e:	4413      	add	r3, r2
 8012d60:	60bb      	str	r3, [r7, #8]
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	685a      	ldr	r2, [r3, #4]
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	605a      	str	r2, [r3, #4]
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	685a      	ldr	r2, [r3, #4]
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	3308      	adds	r3, #8
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d104      	bne.n	8012d82 <vTaskSwitchContext+0x8a>
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	685a      	ldr	r2, [r3, #4]
 8012d7e:	68bb      	ldr	r3, [r7, #8]
 8012d80:	605a      	str	r2, [r3, #4]
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	685b      	ldr	r3, [r3, #4]
 8012d86:	68db      	ldr	r3, [r3, #12]
 8012d88:	4a09      	ldr	r2, [pc, #36]	; (8012db0 <vTaskSwitchContext+0xb8>)
 8012d8a:	6013      	str	r3, [r2, #0]
 8012d8c:	4a06      	ldr	r2, [pc, #24]	; (8012da8 <vTaskSwitchContext+0xb0>)
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	6013      	str	r3, [r2, #0]
}
 8012d92:	bf00      	nop
 8012d94:	3714      	adds	r7, #20
 8012d96:	46bd      	mov	sp, r7
 8012d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9c:	4770      	bx	lr
 8012d9e:	bf00      	nop
 8012da0:	2400c768 	.word	0x2400c768
 8012da4:	2400c754 	.word	0x2400c754
 8012da8:	2400c748 	.word	0x2400c748
 8012dac:	2400c270 	.word	0x2400c270
 8012db0:	2400c26c 	.word	0x2400c26c

08012db4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b084      	sub	sp, #16
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d10a      	bne.n	8012dda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc8:	f383 8811 	msr	BASEPRI, r3
 8012dcc:	f3bf 8f6f 	isb	sy
 8012dd0:	f3bf 8f4f 	dsb	sy
 8012dd4:	60fb      	str	r3, [r7, #12]
}
 8012dd6:	bf00      	nop
 8012dd8:	e7fe      	b.n	8012dd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012dda:	4b07      	ldr	r3, [pc, #28]	; (8012df8 <vTaskPlaceOnEventList+0x44>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	3318      	adds	r3, #24
 8012de0:	4619      	mov	r1, r3
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f7fe f917 	bl	8011016 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012de8:	2101      	movs	r1, #1
 8012dea:	6838      	ldr	r0, [r7, #0]
 8012dec:	f000 fb7a 	bl	80134e4 <prvAddCurrentTaskToDelayedList>
}
 8012df0:	bf00      	nop
 8012df2:	3710      	adds	r7, #16
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	2400c26c 	.word	0x2400c26c

08012dfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b086      	sub	sp, #24
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	60f8      	str	r0, [r7, #12]
 8012e04:	60b9      	str	r1, [r7, #8]
 8012e06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d10a      	bne.n	8012e24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e12:	f383 8811 	msr	BASEPRI, r3
 8012e16:	f3bf 8f6f 	isb	sy
 8012e1a:	f3bf 8f4f 	dsb	sy
 8012e1e:	617b      	str	r3, [r7, #20]
}
 8012e20:	bf00      	nop
 8012e22:	e7fe      	b.n	8012e22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012e24:	4b0a      	ldr	r3, [pc, #40]	; (8012e50 <vTaskPlaceOnEventListRestricted+0x54>)
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	3318      	adds	r3, #24
 8012e2a:	4619      	mov	r1, r3
 8012e2c:	68f8      	ldr	r0, [r7, #12]
 8012e2e:	f7fe f8ce 	bl	8010fce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d002      	beq.n	8012e3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012e38:	f04f 33ff 	mov.w	r3, #4294967295
 8012e3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012e3e:	6879      	ldr	r1, [r7, #4]
 8012e40:	68b8      	ldr	r0, [r7, #8]
 8012e42:	f000 fb4f 	bl	80134e4 <prvAddCurrentTaskToDelayedList>
	}
 8012e46:	bf00      	nop
 8012e48:	3718      	adds	r7, #24
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}
 8012e4e:	bf00      	nop
 8012e50:	2400c26c 	.word	0x2400c26c

08012e54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b086      	sub	sp, #24
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	68db      	ldr	r3, [r3, #12]
 8012e60:	68db      	ldr	r3, [r3, #12]
 8012e62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d10a      	bne.n	8012e80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e6e:	f383 8811 	msr	BASEPRI, r3
 8012e72:	f3bf 8f6f 	isb	sy
 8012e76:	f3bf 8f4f 	dsb	sy
 8012e7a:	60fb      	str	r3, [r7, #12]
}
 8012e7c:	bf00      	nop
 8012e7e:	e7fe      	b.n	8012e7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	3318      	adds	r3, #24
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7fe f8ff 	bl	8011088 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e8a:	4b1e      	ldr	r3, [pc, #120]	; (8012f04 <xTaskRemoveFromEventList+0xb0>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d11d      	bne.n	8012ece <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012e92:	693b      	ldr	r3, [r7, #16]
 8012e94:	3304      	adds	r3, #4
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7fe f8f6 	bl	8011088 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ea0:	4b19      	ldr	r3, [pc, #100]	; (8012f08 <xTaskRemoveFromEventList+0xb4>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	429a      	cmp	r2, r3
 8012ea6:	d903      	bls.n	8012eb0 <xTaskRemoveFromEventList+0x5c>
 8012ea8:	693b      	ldr	r3, [r7, #16]
 8012eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eac:	4a16      	ldr	r2, [pc, #88]	; (8012f08 <xTaskRemoveFromEventList+0xb4>)
 8012eae:	6013      	str	r3, [r2, #0]
 8012eb0:	693b      	ldr	r3, [r7, #16]
 8012eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eb4:	4613      	mov	r3, r2
 8012eb6:	009b      	lsls	r3, r3, #2
 8012eb8:	4413      	add	r3, r2
 8012eba:	009b      	lsls	r3, r3, #2
 8012ebc:	4a13      	ldr	r2, [pc, #76]	; (8012f0c <xTaskRemoveFromEventList+0xb8>)
 8012ebe:	441a      	add	r2, r3
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	3304      	adds	r3, #4
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	4610      	mov	r0, r2
 8012ec8:	f7fe f881 	bl	8010fce <vListInsertEnd>
 8012ecc:	e005      	b.n	8012eda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	3318      	adds	r3, #24
 8012ed2:	4619      	mov	r1, r3
 8012ed4:	480e      	ldr	r0, [pc, #56]	; (8012f10 <xTaskRemoveFromEventList+0xbc>)
 8012ed6:	f7fe f87a 	bl	8010fce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ede:	4b0d      	ldr	r3, [pc, #52]	; (8012f14 <xTaskRemoveFromEventList+0xc0>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d905      	bls.n	8012ef4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012ee8:	2301      	movs	r3, #1
 8012eea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012eec:	4b0a      	ldr	r3, [pc, #40]	; (8012f18 <xTaskRemoveFromEventList+0xc4>)
 8012eee:	2201      	movs	r2, #1
 8012ef0:	601a      	str	r2, [r3, #0]
 8012ef2:	e001      	b.n	8012ef8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012ef8:	697b      	ldr	r3, [r7, #20]
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3718      	adds	r7, #24
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}
 8012f02:	bf00      	nop
 8012f04:	2400c768 	.word	0x2400c768
 8012f08:	2400c748 	.word	0x2400c748
 8012f0c:	2400c270 	.word	0x2400c270
 8012f10:	2400c700 	.word	0x2400c700
 8012f14:	2400c26c 	.word	0x2400c26c
 8012f18:	2400c754 	.word	0x2400c754

08012f1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b083      	sub	sp, #12
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012f24:	4b06      	ldr	r3, [pc, #24]	; (8012f40 <vTaskInternalSetTimeOutState+0x24>)
 8012f26:	681a      	ldr	r2, [r3, #0]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012f2c:	4b05      	ldr	r3, [pc, #20]	; (8012f44 <vTaskInternalSetTimeOutState+0x28>)
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	605a      	str	r2, [r3, #4]
}
 8012f34:	bf00      	nop
 8012f36:	370c      	adds	r7, #12
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3e:	4770      	bx	lr
 8012f40:	2400c758 	.word	0x2400c758
 8012f44:	2400c744 	.word	0x2400c744

08012f48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b088      	sub	sp, #32
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d10a      	bne.n	8012f6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f5c:	f383 8811 	msr	BASEPRI, r3
 8012f60:	f3bf 8f6f 	isb	sy
 8012f64:	f3bf 8f4f 	dsb	sy
 8012f68:	613b      	str	r3, [r7, #16]
}
 8012f6a:	bf00      	nop
 8012f6c:	e7fe      	b.n	8012f6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d10a      	bne.n	8012f8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f78:	f383 8811 	msr	BASEPRI, r3
 8012f7c:	f3bf 8f6f 	isb	sy
 8012f80:	f3bf 8f4f 	dsb	sy
 8012f84:	60fb      	str	r3, [r7, #12]
}
 8012f86:	bf00      	nop
 8012f88:	e7fe      	b.n	8012f88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012f8a:	f7fe f9d3 	bl	8011334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012f8e:	4b1d      	ldr	r3, [pc, #116]	; (8013004 <xTaskCheckForTimeOut+0xbc>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	685b      	ldr	r3, [r3, #4]
 8012f98:	69ba      	ldr	r2, [r7, #24]
 8012f9a:	1ad3      	subs	r3, r2, r3
 8012f9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fa6:	d102      	bne.n	8012fae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	61fb      	str	r3, [r7, #28]
 8012fac:	e023      	b.n	8012ff6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681a      	ldr	r2, [r3, #0]
 8012fb2:	4b15      	ldr	r3, [pc, #84]	; (8013008 <xTaskCheckForTimeOut+0xc0>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d007      	beq.n	8012fca <xTaskCheckForTimeOut+0x82>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	685b      	ldr	r3, [r3, #4]
 8012fbe:	69ba      	ldr	r2, [r7, #24]
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d302      	bcc.n	8012fca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	61fb      	str	r3, [r7, #28]
 8012fc8:	e015      	b.n	8012ff6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	697a      	ldr	r2, [r7, #20]
 8012fd0:	429a      	cmp	r2, r3
 8012fd2:	d20b      	bcs.n	8012fec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	681a      	ldr	r2, [r3, #0]
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	1ad2      	subs	r2, r2, r3
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f7ff ff9b 	bl	8012f1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	61fb      	str	r3, [r7, #28]
 8012fea:	e004      	b.n	8012ff6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012ff6:	f7fe f9cd 	bl	8011394 <vPortExitCritical>

	return xReturn;
 8012ffa:	69fb      	ldr	r3, [r7, #28]
}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	3720      	adds	r7, #32
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}
 8013004:	2400c744 	.word	0x2400c744
 8013008:	2400c758 	.word	0x2400c758

0801300c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801300c:	b480      	push	{r7}
 801300e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013010:	4b03      	ldr	r3, [pc, #12]	; (8013020 <vTaskMissedYield+0x14>)
 8013012:	2201      	movs	r2, #1
 8013014:	601a      	str	r2, [r3, #0]
}
 8013016:	bf00      	nop
 8013018:	46bd      	mov	sp, r7
 801301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301e:	4770      	bx	lr
 8013020:	2400c754 	.word	0x2400c754

08013024 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801302c:	f000 f852 	bl	80130d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013030:	4b06      	ldr	r3, [pc, #24]	; (801304c <prvIdleTask+0x28>)
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	2b01      	cmp	r3, #1
 8013036:	d9f9      	bls.n	801302c <prvIdleTask+0x8>
			{
				taskYIELD();
 8013038:	4b05      	ldr	r3, [pc, #20]	; (8013050 <prvIdleTask+0x2c>)
 801303a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801303e:	601a      	str	r2, [r3, #0]
 8013040:	f3bf 8f4f 	dsb	sy
 8013044:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013048:	e7f0      	b.n	801302c <prvIdleTask+0x8>
 801304a:	bf00      	nop
 801304c:	2400c270 	.word	0x2400c270
 8013050:	e000ed04 	.word	0xe000ed04

08013054 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801305a:	2300      	movs	r3, #0
 801305c:	607b      	str	r3, [r7, #4]
 801305e:	e00c      	b.n	801307a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013060:	687a      	ldr	r2, [r7, #4]
 8013062:	4613      	mov	r3, r2
 8013064:	009b      	lsls	r3, r3, #2
 8013066:	4413      	add	r3, r2
 8013068:	009b      	lsls	r3, r3, #2
 801306a:	4a12      	ldr	r2, [pc, #72]	; (80130b4 <prvInitialiseTaskLists+0x60>)
 801306c:	4413      	add	r3, r2
 801306e:	4618      	mov	r0, r3
 8013070:	f7fd ff80 	bl	8010f74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	3301      	adds	r3, #1
 8013078:	607b      	str	r3, [r7, #4]
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2b37      	cmp	r3, #55	; 0x37
 801307e:	d9ef      	bls.n	8013060 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013080:	480d      	ldr	r0, [pc, #52]	; (80130b8 <prvInitialiseTaskLists+0x64>)
 8013082:	f7fd ff77 	bl	8010f74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013086:	480d      	ldr	r0, [pc, #52]	; (80130bc <prvInitialiseTaskLists+0x68>)
 8013088:	f7fd ff74 	bl	8010f74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801308c:	480c      	ldr	r0, [pc, #48]	; (80130c0 <prvInitialiseTaskLists+0x6c>)
 801308e:	f7fd ff71 	bl	8010f74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013092:	480c      	ldr	r0, [pc, #48]	; (80130c4 <prvInitialiseTaskLists+0x70>)
 8013094:	f7fd ff6e 	bl	8010f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013098:	480b      	ldr	r0, [pc, #44]	; (80130c8 <prvInitialiseTaskLists+0x74>)
 801309a:	f7fd ff6b 	bl	8010f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801309e:	4b0b      	ldr	r3, [pc, #44]	; (80130cc <prvInitialiseTaskLists+0x78>)
 80130a0:	4a05      	ldr	r2, [pc, #20]	; (80130b8 <prvInitialiseTaskLists+0x64>)
 80130a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80130a4:	4b0a      	ldr	r3, [pc, #40]	; (80130d0 <prvInitialiseTaskLists+0x7c>)
 80130a6:	4a05      	ldr	r2, [pc, #20]	; (80130bc <prvInitialiseTaskLists+0x68>)
 80130a8:	601a      	str	r2, [r3, #0]
}
 80130aa:	bf00      	nop
 80130ac:	3708      	adds	r7, #8
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}
 80130b2:	bf00      	nop
 80130b4:	2400c270 	.word	0x2400c270
 80130b8:	2400c6d0 	.word	0x2400c6d0
 80130bc:	2400c6e4 	.word	0x2400c6e4
 80130c0:	2400c700 	.word	0x2400c700
 80130c4:	2400c714 	.word	0x2400c714
 80130c8:	2400c72c 	.word	0x2400c72c
 80130cc:	2400c6f8 	.word	0x2400c6f8
 80130d0:	2400c6fc 	.word	0x2400c6fc

080130d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b082      	sub	sp, #8
 80130d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80130da:	e019      	b.n	8013110 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80130dc:	f7fe f92a 	bl	8011334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80130e0:	4b10      	ldr	r3, [pc, #64]	; (8013124 <prvCheckTasksWaitingTermination+0x50>)
 80130e2:	68db      	ldr	r3, [r3, #12]
 80130e4:	68db      	ldr	r3, [r3, #12]
 80130e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	3304      	adds	r3, #4
 80130ec:	4618      	mov	r0, r3
 80130ee:	f7fd ffcb 	bl	8011088 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80130f2:	4b0d      	ldr	r3, [pc, #52]	; (8013128 <prvCheckTasksWaitingTermination+0x54>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	3b01      	subs	r3, #1
 80130f8:	4a0b      	ldr	r2, [pc, #44]	; (8013128 <prvCheckTasksWaitingTermination+0x54>)
 80130fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80130fc:	4b0b      	ldr	r3, [pc, #44]	; (801312c <prvCheckTasksWaitingTermination+0x58>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	3b01      	subs	r3, #1
 8013102:	4a0a      	ldr	r2, [pc, #40]	; (801312c <prvCheckTasksWaitingTermination+0x58>)
 8013104:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013106:	f7fe f945 	bl	8011394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f000 f810 	bl	8013130 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013110:	4b06      	ldr	r3, [pc, #24]	; (801312c <prvCheckTasksWaitingTermination+0x58>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d1e1      	bne.n	80130dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013118:	bf00      	nop
 801311a:	bf00      	nop
 801311c:	3708      	adds	r7, #8
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	bf00      	nop
 8013124:	2400c714 	.word	0x2400c714
 8013128:	2400c740 	.word	0x2400c740
 801312c:	2400c728 	.word	0x2400c728

08013130 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013130:	b580      	push	{r7, lr}
 8013132:	b084      	sub	sp, #16
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801313e:	2b00      	cmp	r3, #0
 8013140:	d108      	bne.n	8013154 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013146:	4618      	mov	r0, r3
 8013148:	f7fd fdf6 	bl	8010d38 <vPortFree>
				vPortFree( pxTCB );
 801314c:	6878      	ldr	r0, [r7, #4]
 801314e:	f7fd fdf3 	bl	8010d38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013152:	e018      	b.n	8013186 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801315a:	2b01      	cmp	r3, #1
 801315c:	d103      	bne.n	8013166 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f7fd fdea 	bl	8010d38 <vPortFree>
	}
 8013164:	e00f      	b.n	8013186 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801316c:	2b02      	cmp	r3, #2
 801316e:	d00a      	beq.n	8013186 <prvDeleteTCB+0x56>
	__asm volatile
 8013170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013174:	f383 8811 	msr	BASEPRI, r3
 8013178:	f3bf 8f6f 	isb	sy
 801317c:	f3bf 8f4f 	dsb	sy
 8013180:	60fb      	str	r3, [r7, #12]
}
 8013182:	bf00      	nop
 8013184:	e7fe      	b.n	8013184 <prvDeleteTCB+0x54>
	}
 8013186:	bf00      	nop
 8013188:	3710      	adds	r7, #16
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}
	...

08013190 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013190:	b480      	push	{r7}
 8013192:	b083      	sub	sp, #12
 8013194:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013196:	4b0c      	ldr	r3, [pc, #48]	; (80131c8 <prvResetNextTaskUnblockTime+0x38>)
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d104      	bne.n	80131aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80131a0:	4b0a      	ldr	r3, [pc, #40]	; (80131cc <prvResetNextTaskUnblockTime+0x3c>)
 80131a2:	f04f 32ff 	mov.w	r2, #4294967295
 80131a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80131a8:	e008      	b.n	80131bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131aa:	4b07      	ldr	r3, [pc, #28]	; (80131c8 <prvResetNextTaskUnblockTime+0x38>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	68db      	ldr	r3, [r3, #12]
 80131b0:	68db      	ldr	r3, [r3, #12]
 80131b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	685b      	ldr	r3, [r3, #4]
 80131b8:	4a04      	ldr	r2, [pc, #16]	; (80131cc <prvResetNextTaskUnblockTime+0x3c>)
 80131ba:	6013      	str	r3, [r2, #0]
}
 80131bc:	bf00      	nop
 80131be:	370c      	adds	r7, #12
 80131c0:	46bd      	mov	sp, r7
 80131c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c6:	4770      	bx	lr
 80131c8:	2400c6f8 	.word	0x2400c6f8
 80131cc:	2400c760 	.word	0x2400c760

080131d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80131d0:	b480      	push	{r7}
 80131d2:	b083      	sub	sp, #12
 80131d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80131d6:	4b0b      	ldr	r3, [pc, #44]	; (8013204 <xTaskGetSchedulerState+0x34>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d102      	bne.n	80131e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80131de:	2301      	movs	r3, #1
 80131e0:	607b      	str	r3, [r7, #4]
 80131e2:	e008      	b.n	80131f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131e4:	4b08      	ldr	r3, [pc, #32]	; (8013208 <xTaskGetSchedulerState+0x38>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d102      	bne.n	80131f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80131ec:	2302      	movs	r3, #2
 80131ee:	607b      	str	r3, [r7, #4]
 80131f0:	e001      	b.n	80131f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80131f2:	2300      	movs	r3, #0
 80131f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80131f6:	687b      	ldr	r3, [r7, #4]
	}
 80131f8:	4618      	mov	r0, r3
 80131fa:	370c      	adds	r7, #12
 80131fc:	46bd      	mov	sp, r7
 80131fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013202:	4770      	bx	lr
 8013204:	2400c74c 	.word	0x2400c74c
 8013208:	2400c768 	.word	0x2400c768

0801320c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801320c:	b580      	push	{r7, lr}
 801320e:	b084      	sub	sp, #16
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013218:	2300      	movs	r3, #0
 801321a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d051      	beq.n	80132c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013226:	4b2a      	ldr	r3, [pc, #168]	; (80132d0 <xTaskPriorityInherit+0xc4>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801322c:	429a      	cmp	r2, r3
 801322e:	d241      	bcs.n	80132b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	699b      	ldr	r3, [r3, #24]
 8013234:	2b00      	cmp	r3, #0
 8013236:	db06      	blt.n	8013246 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013238:	4b25      	ldr	r3, [pc, #148]	; (80132d0 <xTaskPriorityInherit+0xc4>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801323e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	6959      	ldr	r1, [r3, #20]
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801324e:	4613      	mov	r3, r2
 8013250:	009b      	lsls	r3, r3, #2
 8013252:	4413      	add	r3, r2
 8013254:	009b      	lsls	r3, r3, #2
 8013256:	4a1f      	ldr	r2, [pc, #124]	; (80132d4 <xTaskPriorityInherit+0xc8>)
 8013258:	4413      	add	r3, r2
 801325a:	4299      	cmp	r1, r3
 801325c:	d122      	bne.n	80132a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	3304      	adds	r3, #4
 8013262:	4618      	mov	r0, r3
 8013264:	f7fd ff10 	bl	8011088 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013268:	4b19      	ldr	r3, [pc, #100]	; (80132d0 <xTaskPriorityInherit+0xc4>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013276:	4b18      	ldr	r3, [pc, #96]	; (80132d8 <xTaskPriorityInherit+0xcc>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	429a      	cmp	r2, r3
 801327c:	d903      	bls.n	8013286 <xTaskPriorityInherit+0x7a>
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013282:	4a15      	ldr	r2, [pc, #84]	; (80132d8 <xTaskPriorityInherit+0xcc>)
 8013284:	6013      	str	r3, [r2, #0]
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801328a:	4613      	mov	r3, r2
 801328c:	009b      	lsls	r3, r3, #2
 801328e:	4413      	add	r3, r2
 8013290:	009b      	lsls	r3, r3, #2
 8013292:	4a10      	ldr	r2, [pc, #64]	; (80132d4 <xTaskPriorityInherit+0xc8>)
 8013294:	441a      	add	r2, r3
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	3304      	adds	r3, #4
 801329a:	4619      	mov	r1, r3
 801329c:	4610      	mov	r0, r2
 801329e:	f7fd fe96 	bl	8010fce <vListInsertEnd>
 80132a2:	e004      	b.n	80132ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80132a4:	4b0a      	ldr	r3, [pc, #40]	; (80132d0 <xTaskPriorityInherit+0xc4>)
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80132ae:	2301      	movs	r3, #1
 80132b0:	60fb      	str	r3, [r7, #12]
 80132b2:	e008      	b.n	80132c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80132b8:	4b05      	ldr	r3, [pc, #20]	; (80132d0 <xTaskPriorityInherit+0xc4>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132be:	429a      	cmp	r2, r3
 80132c0:	d201      	bcs.n	80132c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80132c2:	2301      	movs	r3, #1
 80132c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80132c6:	68fb      	ldr	r3, [r7, #12]
	}
 80132c8:	4618      	mov	r0, r3
 80132ca:	3710      	adds	r7, #16
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}
 80132d0:	2400c26c 	.word	0x2400c26c
 80132d4:	2400c270 	.word	0x2400c270
 80132d8:	2400c748 	.word	0x2400c748

080132dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b086      	sub	sp, #24
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80132e8:	2300      	movs	r3, #0
 80132ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d056      	beq.n	80133a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80132f2:	4b2e      	ldr	r3, [pc, #184]	; (80133ac <xTaskPriorityDisinherit+0xd0>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	693a      	ldr	r2, [r7, #16]
 80132f8:	429a      	cmp	r2, r3
 80132fa:	d00a      	beq.n	8013312 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80132fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013300:	f383 8811 	msr	BASEPRI, r3
 8013304:	f3bf 8f6f 	isb	sy
 8013308:	f3bf 8f4f 	dsb	sy
 801330c:	60fb      	str	r3, [r7, #12]
}
 801330e:	bf00      	nop
 8013310:	e7fe      	b.n	8013310 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013316:	2b00      	cmp	r3, #0
 8013318:	d10a      	bne.n	8013330 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801331e:	f383 8811 	msr	BASEPRI, r3
 8013322:	f3bf 8f6f 	isb	sy
 8013326:	f3bf 8f4f 	dsb	sy
 801332a:	60bb      	str	r3, [r7, #8]
}
 801332c:	bf00      	nop
 801332e:	e7fe      	b.n	801332e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013334:	1e5a      	subs	r2, r3, #1
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801333e:	693b      	ldr	r3, [r7, #16]
 8013340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013342:	429a      	cmp	r2, r3
 8013344:	d02c      	beq.n	80133a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801334a:	2b00      	cmp	r3, #0
 801334c:	d128      	bne.n	80133a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	3304      	adds	r3, #4
 8013352:	4618      	mov	r0, r3
 8013354:	f7fd fe98 	bl	8011088 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013364:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013370:	4b0f      	ldr	r3, [pc, #60]	; (80133b0 <xTaskPriorityDisinherit+0xd4>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	429a      	cmp	r2, r3
 8013376:	d903      	bls.n	8013380 <xTaskPriorityDisinherit+0xa4>
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801337c:	4a0c      	ldr	r2, [pc, #48]	; (80133b0 <xTaskPriorityDisinherit+0xd4>)
 801337e:	6013      	str	r3, [r2, #0]
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013384:	4613      	mov	r3, r2
 8013386:	009b      	lsls	r3, r3, #2
 8013388:	4413      	add	r3, r2
 801338a:	009b      	lsls	r3, r3, #2
 801338c:	4a09      	ldr	r2, [pc, #36]	; (80133b4 <xTaskPriorityDisinherit+0xd8>)
 801338e:	441a      	add	r2, r3
 8013390:	693b      	ldr	r3, [r7, #16]
 8013392:	3304      	adds	r3, #4
 8013394:	4619      	mov	r1, r3
 8013396:	4610      	mov	r0, r2
 8013398:	f7fd fe19 	bl	8010fce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801339c:	2301      	movs	r3, #1
 801339e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80133a0:	697b      	ldr	r3, [r7, #20]
	}
 80133a2:	4618      	mov	r0, r3
 80133a4:	3718      	adds	r7, #24
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
 80133aa:	bf00      	nop
 80133ac:	2400c26c 	.word	0x2400c26c
 80133b0:	2400c748 	.word	0x2400c748
 80133b4:	2400c270 	.word	0x2400c270

080133b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b088      	sub	sp, #32
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80133c6:	2301      	movs	r3, #1
 80133c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d06a      	beq.n	80134a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d10a      	bne.n	80133ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80133d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133dc:	f383 8811 	msr	BASEPRI, r3
 80133e0:	f3bf 8f6f 	isb	sy
 80133e4:	f3bf 8f4f 	dsb	sy
 80133e8:	60fb      	str	r3, [r7, #12]
}
 80133ea:	bf00      	nop
 80133ec:	e7fe      	b.n	80133ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80133ee:	69bb      	ldr	r3, [r7, #24]
 80133f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133f2:	683a      	ldr	r2, [r7, #0]
 80133f4:	429a      	cmp	r2, r3
 80133f6:	d902      	bls.n	80133fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	61fb      	str	r3, [r7, #28]
 80133fc:	e002      	b.n	8013404 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013402:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013404:	69bb      	ldr	r3, [r7, #24]
 8013406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013408:	69fa      	ldr	r2, [r7, #28]
 801340a:	429a      	cmp	r2, r3
 801340c:	d04b      	beq.n	80134a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801340e:	69bb      	ldr	r3, [r7, #24]
 8013410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013412:	697a      	ldr	r2, [r7, #20]
 8013414:	429a      	cmp	r2, r3
 8013416:	d146      	bne.n	80134a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013418:	4b25      	ldr	r3, [pc, #148]	; (80134b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	69ba      	ldr	r2, [r7, #24]
 801341e:	429a      	cmp	r2, r3
 8013420:	d10a      	bne.n	8013438 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8013422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013426:	f383 8811 	msr	BASEPRI, r3
 801342a:	f3bf 8f6f 	isb	sy
 801342e:	f3bf 8f4f 	dsb	sy
 8013432:	60bb      	str	r3, [r7, #8]
}
 8013434:	bf00      	nop
 8013436:	e7fe      	b.n	8013436 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013438:	69bb      	ldr	r3, [r7, #24]
 801343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801343c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801343e:	69bb      	ldr	r3, [r7, #24]
 8013440:	69fa      	ldr	r2, [r7, #28]
 8013442:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013444:	69bb      	ldr	r3, [r7, #24]
 8013446:	699b      	ldr	r3, [r3, #24]
 8013448:	2b00      	cmp	r3, #0
 801344a:	db04      	blt.n	8013456 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801344c:	69fb      	ldr	r3, [r7, #28]
 801344e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013452:	69bb      	ldr	r3, [r7, #24]
 8013454:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013456:	69bb      	ldr	r3, [r7, #24]
 8013458:	6959      	ldr	r1, [r3, #20]
 801345a:	693a      	ldr	r2, [r7, #16]
 801345c:	4613      	mov	r3, r2
 801345e:	009b      	lsls	r3, r3, #2
 8013460:	4413      	add	r3, r2
 8013462:	009b      	lsls	r3, r3, #2
 8013464:	4a13      	ldr	r2, [pc, #76]	; (80134b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013466:	4413      	add	r3, r2
 8013468:	4299      	cmp	r1, r3
 801346a:	d11c      	bne.n	80134a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801346c:	69bb      	ldr	r3, [r7, #24]
 801346e:	3304      	adds	r3, #4
 8013470:	4618      	mov	r0, r3
 8013472:	f7fd fe09 	bl	8011088 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013476:	69bb      	ldr	r3, [r7, #24]
 8013478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801347a:	4b0f      	ldr	r3, [pc, #60]	; (80134b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	429a      	cmp	r2, r3
 8013480:	d903      	bls.n	801348a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8013482:	69bb      	ldr	r3, [r7, #24]
 8013484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013486:	4a0c      	ldr	r2, [pc, #48]	; (80134b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013488:	6013      	str	r3, [r2, #0]
 801348a:	69bb      	ldr	r3, [r7, #24]
 801348c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801348e:	4613      	mov	r3, r2
 8013490:	009b      	lsls	r3, r3, #2
 8013492:	4413      	add	r3, r2
 8013494:	009b      	lsls	r3, r3, #2
 8013496:	4a07      	ldr	r2, [pc, #28]	; (80134b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013498:	441a      	add	r2, r3
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	3304      	adds	r3, #4
 801349e:	4619      	mov	r1, r3
 80134a0:	4610      	mov	r0, r2
 80134a2:	f7fd fd94 	bl	8010fce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80134a6:	bf00      	nop
 80134a8:	3720      	adds	r7, #32
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
 80134ae:	bf00      	nop
 80134b0:	2400c26c 	.word	0x2400c26c
 80134b4:	2400c270 	.word	0x2400c270
 80134b8:	2400c748 	.word	0x2400c748

080134bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80134bc:	b480      	push	{r7}
 80134be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80134c0:	4b07      	ldr	r3, [pc, #28]	; (80134e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d004      	beq.n	80134d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80134c8:	4b05      	ldr	r3, [pc, #20]	; (80134e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80134ce:	3201      	adds	r2, #1
 80134d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80134d2:	4b03      	ldr	r3, [pc, #12]	; (80134e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80134d4:	681b      	ldr	r3, [r3, #0]
	}
 80134d6:	4618      	mov	r0, r3
 80134d8:	46bd      	mov	sp, r7
 80134da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134de:	4770      	bx	lr
 80134e0:	2400c26c 	.word	0x2400c26c

080134e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b084      	sub	sp, #16
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80134ee:	4b21      	ldr	r3, [pc, #132]	; (8013574 <prvAddCurrentTaskToDelayedList+0x90>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134f4:	4b20      	ldr	r3, [pc, #128]	; (8013578 <prvAddCurrentTaskToDelayedList+0x94>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	3304      	adds	r3, #4
 80134fa:	4618      	mov	r0, r3
 80134fc:	f7fd fdc4 	bl	8011088 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013506:	d10a      	bne.n	801351e <prvAddCurrentTaskToDelayedList+0x3a>
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d007      	beq.n	801351e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801350e:	4b1a      	ldr	r3, [pc, #104]	; (8013578 <prvAddCurrentTaskToDelayedList+0x94>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	3304      	adds	r3, #4
 8013514:	4619      	mov	r1, r3
 8013516:	4819      	ldr	r0, [pc, #100]	; (801357c <prvAddCurrentTaskToDelayedList+0x98>)
 8013518:	f7fd fd59 	bl	8010fce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801351c:	e026      	b.n	801356c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801351e:	68fa      	ldr	r2, [r7, #12]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	4413      	add	r3, r2
 8013524:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013526:	4b14      	ldr	r3, [pc, #80]	; (8013578 <prvAddCurrentTaskToDelayedList+0x94>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	68ba      	ldr	r2, [r7, #8]
 801352c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801352e:	68ba      	ldr	r2, [r7, #8]
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	429a      	cmp	r2, r3
 8013534:	d209      	bcs.n	801354a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013536:	4b12      	ldr	r3, [pc, #72]	; (8013580 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	4b0f      	ldr	r3, [pc, #60]	; (8013578 <prvAddCurrentTaskToDelayedList+0x94>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	3304      	adds	r3, #4
 8013540:	4619      	mov	r1, r3
 8013542:	4610      	mov	r0, r2
 8013544:	f7fd fd67 	bl	8011016 <vListInsert>
}
 8013548:	e010      	b.n	801356c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801354a:	4b0e      	ldr	r3, [pc, #56]	; (8013584 <prvAddCurrentTaskToDelayedList+0xa0>)
 801354c:	681a      	ldr	r2, [r3, #0]
 801354e:	4b0a      	ldr	r3, [pc, #40]	; (8013578 <prvAddCurrentTaskToDelayedList+0x94>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	3304      	adds	r3, #4
 8013554:	4619      	mov	r1, r3
 8013556:	4610      	mov	r0, r2
 8013558:	f7fd fd5d 	bl	8011016 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801355c:	4b0a      	ldr	r3, [pc, #40]	; (8013588 <prvAddCurrentTaskToDelayedList+0xa4>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	68ba      	ldr	r2, [r7, #8]
 8013562:	429a      	cmp	r2, r3
 8013564:	d202      	bcs.n	801356c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013566:	4a08      	ldr	r2, [pc, #32]	; (8013588 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	6013      	str	r3, [r2, #0]
}
 801356c:	bf00      	nop
 801356e:	3710      	adds	r7, #16
 8013570:	46bd      	mov	sp, r7
 8013572:	bd80      	pop	{r7, pc}
 8013574:	2400c744 	.word	0x2400c744
 8013578:	2400c26c 	.word	0x2400c26c
 801357c:	2400c72c 	.word	0x2400c72c
 8013580:	2400c6fc 	.word	0x2400c6fc
 8013584:	2400c6f8 	.word	0x2400c6f8
 8013588:	2400c760 	.word	0x2400c760

0801358c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b08a      	sub	sp, #40	; 0x28
 8013590:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013592:	2300      	movs	r3, #0
 8013594:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013596:	f000 fb07 	bl	8013ba8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801359a:	4b1c      	ldr	r3, [pc, #112]	; (801360c <xTimerCreateTimerTask+0x80>)
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d021      	beq.n	80135e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80135a2:	2300      	movs	r3, #0
 80135a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80135a6:	2300      	movs	r3, #0
 80135a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80135aa:	1d3a      	adds	r2, r7, #4
 80135ac:	f107 0108 	add.w	r1, r7, #8
 80135b0:	f107 030c 	add.w	r3, r7, #12
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7fd fad9 	bl	8010b6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80135ba:	6879      	ldr	r1, [r7, #4]
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	68fa      	ldr	r2, [r7, #12]
 80135c0:	9202      	str	r2, [sp, #8]
 80135c2:	9301      	str	r3, [sp, #4]
 80135c4:	2302      	movs	r3, #2
 80135c6:	9300      	str	r3, [sp, #0]
 80135c8:	2300      	movs	r3, #0
 80135ca:	460a      	mov	r2, r1
 80135cc:	4910      	ldr	r1, [pc, #64]	; (8013610 <xTimerCreateTimerTask+0x84>)
 80135ce:	4811      	ldr	r0, [pc, #68]	; (8013614 <xTimerCreateTimerTask+0x88>)
 80135d0:	f7fe ffe0 	bl	8012594 <xTaskCreateStatic>
 80135d4:	4603      	mov	r3, r0
 80135d6:	4a10      	ldr	r2, [pc, #64]	; (8013618 <xTimerCreateTimerTask+0x8c>)
 80135d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80135da:	4b0f      	ldr	r3, [pc, #60]	; (8013618 <xTimerCreateTimerTask+0x8c>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d001      	beq.n	80135e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80135e2:	2301      	movs	r3, #1
 80135e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d10a      	bne.n	8013602 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80135ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135f0:	f383 8811 	msr	BASEPRI, r3
 80135f4:	f3bf 8f6f 	isb	sy
 80135f8:	f3bf 8f4f 	dsb	sy
 80135fc:	613b      	str	r3, [r7, #16]
}
 80135fe:	bf00      	nop
 8013600:	e7fe      	b.n	8013600 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013602:	697b      	ldr	r3, [r7, #20]
}
 8013604:	4618      	mov	r0, r3
 8013606:	3718      	adds	r7, #24
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}
 801360c:	2400c79c 	.word	0x2400c79c
 8013610:	08027c20 	.word	0x08027c20
 8013614:	08013751 	.word	0x08013751
 8013618:	2400c7a0 	.word	0x2400c7a0

0801361c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b08a      	sub	sp, #40	; 0x28
 8013620:	af00      	add	r7, sp, #0
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	607a      	str	r2, [r7, #4]
 8013628:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801362a:	2300      	movs	r3, #0
 801362c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d10a      	bne.n	801364a <xTimerGenericCommand+0x2e>
	__asm volatile
 8013634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013638:	f383 8811 	msr	BASEPRI, r3
 801363c:	f3bf 8f6f 	isb	sy
 8013640:	f3bf 8f4f 	dsb	sy
 8013644:	623b      	str	r3, [r7, #32]
}
 8013646:	bf00      	nop
 8013648:	e7fe      	b.n	8013648 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801364a:	4b1a      	ldr	r3, [pc, #104]	; (80136b4 <xTimerGenericCommand+0x98>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d02a      	beq.n	80136a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	2b05      	cmp	r3, #5
 8013662:	dc18      	bgt.n	8013696 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013664:	f7ff fdb4 	bl	80131d0 <xTaskGetSchedulerState>
 8013668:	4603      	mov	r3, r0
 801366a:	2b02      	cmp	r3, #2
 801366c:	d109      	bne.n	8013682 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801366e:	4b11      	ldr	r3, [pc, #68]	; (80136b4 <xTimerGenericCommand+0x98>)
 8013670:	6818      	ldr	r0, [r3, #0]
 8013672:	f107 0110 	add.w	r1, r7, #16
 8013676:	2300      	movs	r3, #0
 8013678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801367a:	f7fe f925 	bl	80118c8 <xQueueGenericSend>
 801367e:	6278      	str	r0, [r7, #36]	; 0x24
 8013680:	e012      	b.n	80136a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013682:	4b0c      	ldr	r3, [pc, #48]	; (80136b4 <xTimerGenericCommand+0x98>)
 8013684:	6818      	ldr	r0, [r3, #0]
 8013686:	f107 0110 	add.w	r1, r7, #16
 801368a:	2300      	movs	r3, #0
 801368c:	2200      	movs	r2, #0
 801368e:	f7fe f91b 	bl	80118c8 <xQueueGenericSend>
 8013692:	6278      	str	r0, [r7, #36]	; 0x24
 8013694:	e008      	b.n	80136a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013696:	4b07      	ldr	r3, [pc, #28]	; (80136b4 <xTimerGenericCommand+0x98>)
 8013698:	6818      	ldr	r0, [r3, #0]
 801369a:	f107 0110 	add.w	r1, r7, #16
 801369e:	2300      	movs	r3, #0
 80136a0:	683a      	ldr	r2, [r7, #0]
 80136a2:	f7fe fa0f 	bl	8011ac4 <xQueueGenericSendFromISR>
 80136a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80136a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3728      	adds	r7, #40	; 0x28
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
 80136b2:	bf00      	nop
 80136b4:	2400c79c 	.word	0x2400c79c

080136b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b088      	sub	sp, #32
 80136bc:	af02      	add	r7, sp, #8
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136c2:	4b22      	ldr	r3, [pc, #136]	; (801374c <prvProcessExpiredTimer+0x94>)
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	68db      	ldr	r3, [r3, #12]
 80136ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80136cc:	697b      	ldr	r3, [r7, #20]
 80136ce:	3304      	adds	r3, #4
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7fd fcd9 	bl	8011088 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136dc:	f003 0304 	and.w	r3, r3, #4
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d022      	beq.n	801372a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	699a      	ldr	r2, [r3, #24]
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	18d1      	adds	r1, r2, r3
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	683a      	ldr	r2, [r7, #0]
 80136f0:	6978      	ldr	r0, [r7, #20]
 80136f2:	f000 f8d1 	bl	8013898 <prvInsertTimerInActiveList>
 80136f6:	4603      	mov	r3, r0
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d01f      	beq.n	801373c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80136fc:	2300      	movs	r3, #0
 80136fe:	9300      	str	r3, [sp, #0]
 8013700:	2300      	movs	r3, #0
 8013702:	687a      	ldr	r2, [r7, #4]
 8013704:	2100      	movs	r1, #0
 8013706:	6978      	ldr	r0, [r7, #20]
 8013708:	f7ff ff88 	bl	801361c <xTimerGenericCommand>
 801370c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d113      	bne.n	801373c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013718:	f383 8811 	msr	BASEPRI, r3
 801371c:	f3bf 8f6f 	isb	sy
 8013720:	f3bf 8f4f 	dsb	sy
 8013724:	60fb      	str	r3, [r7, #12]
}
 8013726:	bf00      	nop
 8013728:	e7fe      	b.n	8013728 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013730:	f023 0301 	bic.w	r3, r3, #1
 8013734:	b2da      	uxtb	r2, r3
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	6a1b      	ldr	r3, [r3, #32]
 8013740:	6978      	ldr	r0, [r7, #20]
 8013742:	4798      	blx	r3
}
 8013744:	bf00      	nop
 8013746:	3718      	adds	r7, #24
 8013748:	46bd      	mov	sp, r7
 801374a:	bd80      	pop	{r7, pc}
 801374c:	2400c794 	.word	0x2400c794

08013750 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b084      	sub	sp, #16
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013758:	f107 0308 	add.w	r3, r7, #8
 801375c:	4618      	mov	r0, r3
 801375e:	f000 f857 	bl	8013810 <prvGetNextExpireTime>
 8013762:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	4619      	mov	r1, r3
 8013768:	68f8      	ldr	r0, [r7, #12]
 801376a:	f000 f803 	bl	8013774 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801376e:	f000 f8d5 	bl	801391c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013772:	e7f1      	b.n	8013758 <prvTimerTask+0x8>

08013774 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b084      	sub	sp, #16
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
 801377c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801377e:	f7ff f945 	bl	8012a0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013782:	f107 0308 	add.w	r3, r7, #8
 8013786:	4618      	mov	r0, r3
 8013788:	f000 f866 	bl	8013858 <prvSampleTimeNow>
 801378c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d130      	bne.n	80137f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d10a      	bne.n	80137b0 <prvProcessTimerOrBlockTask+0x3c>
 801379a:	687a      	ldr	r2, [r7, #4]
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d806      	bhi.n	80137b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80137a2:	f7ff f941 	bl	8012a28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80137a6:	68f9      	ldr	r1, [r7, #12]
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f7ff ff85 	bl	80136b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80137ae:	e024      	b.n	80137fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d008      	beq.n	80137c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80137b6:	4b13      	ldr	r3, [pc, #76]	; (8013804 <prvProcessTimerOrBlockTask+0x90>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d101      	bne.n	80137c4 <prvProcessTimerOrBlockTask+0x50>
 80137c0:	2301      	movs	r3, #1
 80137c2:	e000      	b.n	80137c6 <prvProcessTimerOrBlockTask+0x52>
 80137c4:	2300      	movs	r3, #0
 80137c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80137c8:	4b0f      	ldr	r3, [pc, #60]	; (8013808 <prvProcessTimerOrBlockTask+0x94>)
 80137ca:	6818      	ldr	r0, [r3, #0]
 80137cc:	687a      	ldr	r2, [r7, #4]
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	1ad3      	subs	r3, r2, r3
 80137d2:	683a      	ldr	r2, [r7, #0]
 80137d4:	4619      	mov	r1, r3
 80137d6:	f7fe fea9 	bl	801252c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80137da:	f7ff f925 	bl	8012a28 <xTaskResumeAll>
 80137de:	4603      	mov	r3, r0
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d10a      	bne.n	80137fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80137e4:	4b09      	ldr	r3, [pc, #36]	; (801380c <prvProcessTimerOrBlockTask+0x98>)
 80137e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137ea:	601a      	str	r2, [r3, #0]
 80137ec:	f3bf 8f4f 	dsb	sy
 80137f0:	f3bf 8f6f 	isb	sy
}
 80137f4:	e001      	b.n	80137fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80137f6:	f7ff f917 	bl	8012a28 <xTaskResumeAll>
}
 80137fa:	bf00      	nop
 80137fc:	3710      	adds	r7, #16
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}
 8013802:	bf00      	nop
 8013804:	2400c798 	.word	0x2400c798
 8013808:	2400c79c 	.word	0x2400c79c
 801380c:	e000ed04 	.word	0xe000ed04

08013810 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013810:	b480      	push	{r7}
 8013812:	b085      	sub	sp, #20
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013818:	4b0e      	ldr	r3, [pc, #56]	; (8013854 <prvGetNextExpireTime+0x44>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d101      	bne.n	8013826 <prvGetNextExpireTime+0x16>
 8013822:	2201      	movs	r2, #1
 8013824:	e000      	b.n	8013828 <prvGetNextExpireTime+0x18>
 8013826:	2200      	movs	r2, #0
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d105      	bne.n	8013840 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013834:	4b07      	ldr	r3, [pc, #28]	; (8013854 <prvGetNextExpireTime+0x44>)
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	68db      	ldr	r3, [r3, #12]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	60fb      	str	r3, [r7, #12]
 801383e:	e001      	b.n	8013844 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013840:	2300      	movs	r3, #0
 8013842:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013844:	68fb      	ldr	r3, [r7, #12]
}
 8013846:	4618      	mov	r0, r3
 8013848:	3714      	adds	r7, #20
 801384a:	46bd      	mov	sp, r7
 801384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013850:	4770      	bx	lr
 8013852:	bf00      	nop
 8013854:	2400c794 	.word	0x2400c794

08013858 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b084      	sub	sp, #16
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013860:	f7ff f980 	bl	8012b64 <xTaskGetTickCount>
 8013864:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013866:	4b0b      	ldr	r3, [pc, #44]	; (8013894 <prvSampleTimeNow+0x3c>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	68fa      	ldr	r2, [r7, #12]
 801386c:	429a      	cmp	r2, r3
 801386e:	d205      	bcs.n	801387c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013870:	f000 f936 	bl	8013ae0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2201      	movs	r2, #1
 8013878:	601a      	str	r2, [r3, #0]
 801387a:	e002      	b.n	8013882 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2200      	movs	r2, #0
 8013880:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013882:	4a04      	ldr	r2, [pc, #16]	; (8013894 <prvSampleTimeNow+0x3c>)
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013888:	68fb      	ldr	r3, [r7, #12]
}
 801388a:	4618      	mov	r0, r3
 801388c:	3710      	adds	r7, #16
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}
 8013892:	bf00      	nop
 8013894:	2400c7a4 	.word	0x2400c7a4

08013898 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b086      	sub	sp, #24
 801389c:	af00      	add	r7, sp, #0
 801389e:	60f8      	str	r0, [r7, #12]
 80138a0:	60b9      	str	r1, [r7, #8]
 80138a2:	607a      	str	r2, [r7, #4]
 80138a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80138a6:	2300      	movs	r3, #0
 80138a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	68ba      	ldr	r2, [r7, #8]
 80138ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	68fa      	ldr	r2, [r7, #12]
 80138b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80138b6:	68ba      	ldr	r2, [r7, #8]
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d812      	bhi.n	80138e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138be:	687a      	ldr	r2, [r7, #4]
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	1ad2      	subs	r2, r2, r3
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	699b      	ldr	r3, [r3, #24]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d302      	bcc.n	80138d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80138cc:	2301      	movs	r3, #1
 80138ce:	617b      	str	r3, [r7, #20]
 80138d0:	e01b      	b.n	801390a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80138d2:	4b10      	ldr	r3, [pc, #64]	; (8013914 <prvInsertTimerInActiveList+0x7c>)
 80138d4:	681a      	ldr	r2, [r3, #0]
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	3304      	adds	r3, #4
 80138da:	4619      	mov	r1, r3
 80138dc:	4610      	mov	r0, r2
 80138de:	f7fd fb9a 	bl	8011016 <vListInsert>
 80138e2:	e012      	b.n	801390a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80138e4:	687a      	ldr	r2, [r7, #4]
 80138e6:	683b      	ldr	r3, [r7, #0]
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d206      	bcs.n	80138fa <prvInsertTimerInActiveList+0x62>
 80138ec:	68ba      	ldr	r2, [r7, #8]
 80138ee:	683b      	ldr	r3, [r7, #0]
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d302      	bcc.n	80138fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80138f4:	2301      	movs	r3, #1
 80138f6:	617b      	str	r3, [r7, #20]
 80138f8:	e007      	b.n	801390a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80138fa:	4b07      	ldr	r3, [pc, #28]	; (8013918 <prvInsertTimerInActiveList+0x80>)
 80138fc:	681a      	ldr	r2, [r3, #0]
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	3304      	adds	r3, #4
 8013902:	4619      	mov	r1, r3
 8013904:	4610      	mov	r0, r2
 8013906:	f7fd fb86 	bl	8011016 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801390a:	697b      	ldr	r3, [r7, #20]
}
 801390c:	4618      	mov	r0, r3
 801390e:	3718      	adds	r7, #24
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}
 8013914:	2400c798 	.word	0x2400c798
 8013918:	2400c794 	.word	0x2400c794

0801391c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b08e      	sub	sp, #56	; 0x38
 8013920:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013922:	e0ca      	b.n	8013aba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2b00      	cmp	r3, #0
 8013928:	da18      	bge.n	801395c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801392a:	1d3b      	adds	r3, r7, #4
 801392c:	3304      	adds	r3, #4
 801392e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013932:	2b00      	cmp	r3, #0
 8013934:	d10a      	bne.n	801394c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801393a:	f383 8811 	msr	BASEPRI, r3
 801393e:	f3bf 8f6f 	isb	sy
 8013942:	f3bf 8f4f 	dsb	sy
 8013946:	61fb      	str	r3, [r7, #28]
}
 8013948:	bf00      	nop
 801394a:	e7fe      	b.n	801394a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013952:	6850      	ldr	r0, [r2, #4]
 8013954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013956:	6892      	ldr	r2, [r2, #8]
 8013958:	4611      	mov	r1, r2
 801395a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	2b00      	cmp	r3, #0
 8013960:	f2c0 80aa 	blt.w	8013ab8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801396a:	695b      	ldr	r3, [r3, #20]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d004      	beq.n	801397a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013972:	3304      	adds	r3, #4
 8013974:	4618      	mov	r0, r3
 8013976:	f7fd fb87 	bl	8011088 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801397a:	463b      	mov	r3, r7
 801397c:	4618      	mov	r0, r3
 801397e:	f7ff ff6b 	bl	8013858 <prvSampleTimeNow>
 8013982:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2b09      	cmp	r3, #9
 8013988:	f200 8097 	bhi.w	8013aba <prvProcessReceivedCommands+0x19e>
 801398c:	a201      	add	r2, pc, #4	; (adr r2, 8013994 <prvProcessReceivedCommands+0x78>)
 801398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013992:	bf00      	nop
 8013994:	080139bd 	.word	0x080139bd
 8013998:	080139bd 	.word	0x080139bd
 801399c:	080139bd 	.word	0x080139bd
 80139a0:	08013a31 	.word	0x08013a31
 80139a4:	08013a45 	.word	0x08013a45
 80139a8:	08013a8f 	.word	0x08013a8f
 80139ac:	080139bd 	.word	0x080139bd
 80139b0:	080139bd 	.word	0x080139bd
 80139b4:	08013a31 	.word	0x08013a31
 80139b8:	08013a45 	.word	0x08013a45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80139bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139c2:	f043 0301 	orr.w	r3, r3, #1
 80139c6:	b2da      	uxtb	r2, r3
 80139c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80139ce:	68ba      	ldr	r2, [r7, #8]
 80139d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d2:	699b      	ldr	r3, [r3, #24]
 80139d4:	18d1      	adds	r1, r2, r3
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139dc:	f7ff ff5c 	bl	8013898 <prvInsertTimerInActiveList>
 80139e0:	4603      	mov	r3, r0
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d069      	beq.n	8013aba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80139e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e8:	6a1b      	ldr	r3, [r3, #32]
 80139ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80139ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139f4:	f003 0304 	and.w	r3, r3, #4
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d05e      	beq.n	8013aba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80139fc:	68ba      	ldr	r2, [r7, #8]
 80139fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a00:	699b      	ldr	r3, [r3, #24]
 8013a02:	441a      	add	r2, r3
 8013a04:	2300      	movs	r3, #0
 8013a06:	9300      	str	r3, [sp, #0]
 8013a08:	2300      	movs	r3, #0
 8013a0a:	2100      	movs	r1, #0
 8013a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a0e:	f7ff fe05 	bl	801361c <xTimerGenericCommand>
 8013a12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013a14:	6a3b      	ldr	r3, [r7, #32]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d14f      	bne.n	8013aba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a1e:	f383 8811 	msr	BASEPRI, r3
 8013a22:	f3bf 8f6f 	isb	sy
 8013a26:	f3bf 8f4f 	dsb	sy
 8013a2a:	61bb      	str	r3, [r7, #24]
}
 8013a2c:	bf00      	nop
 8013a2e:	e7fe      	b.n	8013a2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a36:	f023 0301 	bic.w	r3, r3, #1
 8013a3a:	b2da      	uxtb	r2, r3
 8013a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013a42:	e03a      	b.n	8013aba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a4a:	f043 0301 	orr.w	r3, r3, #1
 8013a4e:	b2da      	uxtb	r2, r3
 8013a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013a56:	68ba      	ldr	r2, [r7, #8]
 8013a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5e:	699b      	ldr	r3, [r3, #24]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d10a      	bne.n	8013a7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a68:	f383 8811 	msr	BASEPRI, r3
 8013a6c:	f3bf 8f6f 	isb	sy
 8013a70:	f3bf 8f4f 	dsb	sy
 8013a74:	617b      	str	r3, [r7, #20]
}
 8013a76:	bf00      	nop
 8013a78:	e7fe      	b.n	8013a78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7c:	699a      	ldr	r2, [r3, #24]
 8013a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a80:	18d1      	adds	r1, r2, r3
 8013a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a88:	f7ff ff06 	bl	8013898 <prvInsertTimerInActiveList>
					break;
 8013a8c:	e015      	b.n	8013aba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a94:	f003 0302 	and.w	r3, r3, #2
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d103      	bne.n	8013aa4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a9e:	f7fd f94b 	bl	8010d38 <vPortFree>
 8013aa2:	e00a      	b.n	8013aba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013aaa:	f023 0301 	bic.w	r3, r3, #1
 8013aae:	b2da      	uxtb	r2, r3
 8013ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013ab6:	e000      	b.n	8013aba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013ab8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013aba:	4b08      	ldr	r3, [pc, #32]	; (8013adc <prvProcessReceivedCommands+0x1c0>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	1d39      	adds	r1, r7, #4
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7fe f926 	bl	8011d14 <xQueueReceive>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	f47f af2a 	bne.w	8013924 <prvProcessReceivedCommands+0x8>
	}
}
 8013ad0:	bf00      	nop
 8013ad2:	bf00      	nop
 8013ad4:	3730      	adds	r7, #48	; 0x30
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
 8013ada:	bf00      	nop
 8013adc:	2400c79c 	.word	0x2400c79c

08013ae0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b088      	sub	sp, #32
 8013ae4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013ae6:	e048      	b.n	8013b7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013ae8:	4b2d      	ldr	r3, [pc, #180]	; (8013ba0 <prvSwitchTimerLists+0xc0>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	68db      	ldr	r3, [r3, #12]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013af2:	4b2b      	ldr	r3, [pc, #172]	; (8013ba0 <prvSwitchTimerLists+0xc0>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	68db      	ldr	r3, [r3, #12]
 8013af8:	68db      	ldr	r3, [r3, #12]
 8013afa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	3304      	adds	r3, #4
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7fd fac1 	bl	8011088 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	6a1b      	ldr	r3, [r3, #32]
 8013b0a:	68f8      	ldr	r0, [r7, #12]
 8013b0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b14:	f003 0304 	and.w	r3, r3, #4
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d02e      	beq.n	8013b7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	699b      	ldr	r3, [r3, #24]
 8013b20:	693a      	ldr	r2, [r7, #16]
 8013b22:	4413      	add	r3, r2
 8013b24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013b26:	68ba      	ldr	r2, [r7, #8]
 8013b28:	693b      	ldr	r3, [r7, #16]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d90e      	bls.n	8013b4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	68ba      	ldr	r2, [r7, #8]
 8013b32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	68fa      	ldr	r2, [r7, #12]
 8013b38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013b3a:	4b19      	ldr	r3, [pc, #100]	; (8013ba0 <prvSwitchTimerLists+0xc0>)
 8013b3c:	681a      	ldr	r2, [r3, #0]
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	3304      	adds	r3, #4
 8013b42:	4619      	mov	r1, r3
 8013b44:	4610      	mov	r0, r2
 8013b46:	f7fd fa66 	bl	8011016 <vListInsert>
 8013b4a:	e016      	b.n	8013b7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	9300      	str	r3, [sp, #0]
 8013b50:	2300      	movs	r3, #0
 8013b52:	693a      	ldr	r2, [r7, #16]
 8013b54:	2100      	movs	r1, #0
 8013b56:	68f8      	ldr	r0, [r7, #12]
 8013b58:	f7ff fd60 	bl	801361c <xTimerGenericCommand>
 8013b5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d10a      	bne.n	8013b7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b68:	f383 8811 	msr	BASEPRI, r3
 8013b6c:	f3bf 8f6f 	isb	sy
 8013b70:	f3bf 8f4f 	dsb	sy
 8013b74:	603b      	str	r3, [r7, #0]
}
 8013b76:	bf00      	nop
 8013b78:	e7fe      	b.n	8013b78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013b7a:	4b09      	ldr	r3, [pc, #36]	; (8013ba0 <prvSwitchTimerLists+0xc0>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d1b1      	bne.n	8013ae8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013b84:	4b06      	ldr	r3, [pc, #24]	; (8013ba0 <prvSwitchTimerLists+0xc0>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013b8a:	4b06      	ldr	r3, [pc, #24]	; (8013ba4 <prvSwitchTimerLists+0xc4>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	4a04      	ldr	r2, [pc, #16]	; (8013ba0 <prvSwitchTimerLists+0xc0>)
 8013b90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013b92:	4a04      	ldr	r2, [pc, #16]	; (8013ba4 <prvSwitchTimerLists+0xc4>)
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	6013      	str	r3, [r2, #0]
}
 8013b98:	bf00      	nop
 8013b9a:	3718      	adds	r7, #24
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	2400c794 	.word	0x2400c794
 8013ba4:	2400c798 	.word	0x2400c798

08013ba8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b082      	sub	sp, #8
 8013bac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013bae:	f7fd fbc1 	bl	8011334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013bb2:	4b15      	ldr	r3, [pc, #84]	; (8013c08 <prvCheckForValidListAndQueue+0x60>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d120      	bne.n	8013bfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013bba:	4814      	ldr	r0, [pc, #80]	; (8013c0c <prvCheckForValidListAndQueue+0x64>)
 8013bbc:	f7fd f9da 	bl	8010f74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013bc0:	4813      	ldr	r0, [pc, #76]	; (8013c10 <prvCheckForValidListAndQueue+0x68>)
 8013bc2:	f7fd f9d7 	bl	8010f74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013bc6:	4b13      	ldr	r3, [pc, #76]	; (8013c14 <prvCheckForValidListAndQueue+0x6c>)
 8013bc8:	4a10      	ldr	r2, [pc, #64]	; (8013c0c <prvCheckForValidListAndQueue+0x64>)
 8013bca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013bcc:	4b12      	ldr	r3, [pc, #72]	; (8013c18 <prvCheckForValidListAndQueue+0x70>)
 8013bce:	4a10      	ldr	r2, [pc, #64]	; (8013c10 <prvCheckForValidListAndQueue+0x68>)
 8013bd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	9300      	str	r3, [sp, #0]
 8013bd6:	4b11      	ldr	r3, [pc, #68]	; (8013c1c <prvCheckForValidListAndQueue+0x74>)
 8013bd8:	4a11      	ldr	r2, [pc, #68]	; (8013c20 <prvCheckForValidListAndQueue+0x78>)
 8013bda:	2110      	movs	r1, #16
 8013bdc:	200a      	movs	r0, #10
 8013bde:	f7fd fd33 	bl	8011648 <xQueueGenericCreateStatic>
 8013be2:	4603      	mov	r3, r0
 8013be4:	4a08      	ldr	r2, [pc, #32]	; (8013c08 <prvCheckForValidListAndQueue+0x60>)
 8013be6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013be8:	4b07      	ldr	r3, [pc, #28]	; (8013c08 <prvCheckForValidListAndQueue+0x60>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d005      	beq.n	8013bfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013bf0:	4b05      	ldr	r3, [pc, #20]	; (8013c08 <prvCheckForValidListAndQueue+0x60>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	490b      	ldr	r1, [pc, #44]	; (8013c24 <prvCheckForValidListAndQueue+0x7c>)
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7fe fc44 	bl	8012484 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013bfc:	f7fd fbca 	bl	8011394 <vPortExitCritical>
}
 8013c00:	bf00      	nop
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}
 8013c06:	bf00      	nop
 8013c08:	2400c79c 	.word	0x2400c79c
 8013c0c:	2400c76c 	.word	0x2400c76c
 8013c10:	2400c780 	.word	0x2400c780
 8013c14:	2400c794 	.word	0x2400c794
 8013c18:	2400c798 	.word	0x2400c798
 8013c1c:	2400c848 	.word	0x2400c848
 8013c20:	2400c7a8 	.word	0x2400c7a8
 8013c24:	08027c28 	.word	0x08027c28

08013c28 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013c28:	8880      	ldrh	r0, [r0, #4]
 8013c2a:	4770      	bx	lr

08013c2c <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	8083      	strh	r3, [r0, #4]
 8013c30:	4770      	bx	lr
	...

08013c34 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c36:	6803      	ldr	r3, [r0, #0]
 8013c38:	460e      	mov	r6, r1
 8013c3a:	2100      	movs	r1, #0
 8013c3c:	4605      	mov	r5, r0
 8013c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c40:	4798      	blx	r3
 8013c42:	4604      	mov	r4, r0
 8013c44:	682b      	ldr	r3, [r5, #0]
 8013c46:	4628      	mov	r0, r5
 8013c48:	1b34      	subs	r4, r6, r4
 8013c4a:	6a1b      	ldr	r3, [r3, #32]
 8013c4c:	b2a4      	uxth	r4, r4
 8013c4e:	4798      	blx	r3
 8013c50:	88ab      	ldrh	r3, [r5, #4]
 8013c52:	fbb4 f4f0 	udiv	r4, r4, r0
 8013c56:	42a3      	cmp	r3, r4
 8013c58:	d805      	bhi.n	8013c66 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8013c5a:	4b0e      	ldr	r3, [pc, #56]	; (8013c94 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8013c5c:	211e      	movs	r1, #30
 8013c5e:	4a0e      	ldr	r2, [pc, #56]	; (8013c98 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8013c60:	480e      	ldr	r0, [pc, #56]	; (8013c9c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8013c62:	f011 ff89 	bl	8025b78 <__assert_func>
 8013c66:	682b      	ldr	r3, [r5, #0]
 8013c68:	2100      	movs	r1, #0
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c6e:	4798      	blx	r3
 8013c70:	682b      	ldr	r3, [r5, #0]
 8013c72:	4607      	mov	r7, r0
 8013c74:	4628      	mov	r0, r5
 8013c76:	6a1b      	ldr	r3, [r3, #32]
 8013c78:	4798      	blx	r3
 8013c7a:	1bf3      	subs	r3, r6, r7
 8013c7c:	b29b      	uxth	r3, r3
 8013c7e:	fbb3 f2f0 	udiv	r2, r3, r0
 8013c82:	fb02 3010 	mls	r0, r2, r0, r3
 8013c86:	b118      	cbz	r0, 8013c90 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8013c88:	4b05      	ldr	r3, [pc, #20]	; (8013ca0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8013c8a:	211f      	movs	r1, #31
 8013c8c:	4a02      	ldr	r2, [pc, #8]	; (8013c98 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8013c8e:	e7e7      	b.n	8013c60 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8013c90:	4620      	mov	r0, r4
 8013c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c94:	080287a8 	.word	0x080287a8
 8013c98:	08028916 	.word	0x08028916
 8013c9c:	080287bd 	.word	0x080287bd
 8013ca0:	080287eb 	.word	0x080287eb

08013ca4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013ca4:	b538      	push	{r3, r4, r5, lr}
 8013ca6:	6803      	ldr	r3, [r0, #0]
 8013ca8:	460d      	mov	r5, r1
 8013caa:	4604      	mov	r4, r0
 8013cac:	6a1b      	ldr	r3, [r3, #32]
 8013cae:	4798      	blx	r3
 8013cb0:	4285      	cmp	r5, r0
 8013cb2:	d905      	bls.n	8013cc0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8013cb4:	4b0c      	ldr	r3, [pc, #48]	; (8013ce8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8013cb6:	2130      	movs	r1, #48	; 0x30
 8013cb8:	4a0c      	ldr	r2, [pc, #48]	; (8013cec <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8013cba:	480d      	ldr	r0, [pc, #52]	; (8013cf0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8013cbc:	f011 ff5c 	bl	8025b78 <__assert_func>
 8013cc0:	6823      	ldr	r3, [r4, #0]
 8013cc2:	4620      	mov	r0, r4
 8013cc4:	88a5      	ldrh	r5, [r4, #4]
 8013cc6:	69db      	ldr	r3, [r3, #28]
 8013cc8:	4798      	blx	r3
 8013cca:	4285      	cmp	r5, r0
 8013ccc:	d303      	bcc.n	8013cd6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8013cce:	4b09      	ldr	r3, [pc, #36]	; (8013cf4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8013cd0:	2131      	movs	r1, #49	; 0x31
 8013cd2:	4a06      	ldr	r2, [pc, #24]	; (8013cec <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8013cd4:	e7f1      	b.n	8013cba <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8013cd6:	6823      	ldr	r3, [r4, #0]
 8013cd8:	4620      	mov	r0, r4
 8013cda:	88a1      	ldrh	r1, [r4, #4]
 8013cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cde:	4798      	blx	r3
 8013ce0:	88a3      	ldrh	r3, [r4, #4]
 8013ce2:	3301      	adds	r3, #1
 8013ce4:	80a3      	strh	r3, [r4, #4]
 8013ce6:	bd38      	pop	{r3, r4, r5, pc}
 8013ce8:	08028865 	.word	0x08028865
 8013cec:	08028959 	.word	0x08028959
 8013cf0:	080287bd 	.word	0x080287bd
 8013cf4:	0802887c 	.word	0x0802887c

08013cf8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013cf8:	b570      	push	{r4, r5, r6, lr}
 8013cfa:	6803      	ldr	r3, [r0, #0]
 8013cfc:	4616      	mov	r6, r2
 8013cfe:	4604      	mov	r4, r0
 8013d00:	460d      	mov	r5, r1
 8013d02:	6a1b      	ldr	r3, [r3, #32]
 8013d04:	4798      	blx	r3
 8013d06:	4286      	cmp	r6, r0
 8013d08:	d905      	bls.n	8013d16 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8013d0a:	4b06      	ldr	r3, [pc, #24]	; (8013d24 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8013d0c:	213a      	movs	r1, #58	; 0x3a
 8013d0e:	4a06      	ldr	r2, [pc, #24]	; (8013d28 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8013d10:	4806      	ldr	r0, [pc, #24]	; (8013d2c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8013d12:	f011 ff31 	bl	8025b78 <__assert_func>
 8013d16:	6823      	ldr	r3, [r4, #0]
 8013d18:	4629      	mov	r1, r5
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d22:	4718      	bx	r3
 8013d24:	08028865 	.word	0x08028865
 8013d28:	080288cc 	.word	0x080288cc
 8013d2c:	080287bd 	.word	0x080287bd

08013d30 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013d30:	4770      	bx	lr
	...

08013d34 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013d34:	4a02      	ldr	r2, [pc, #8]	; (8013d40 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8013d36:	6002      	str	r2, [r0, #0]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	8082      	strh	r2, [r0, #4]
 8013d3c:	4770      	bx	lr
 8013d3e:	bf00      	nop
 8013d40:	080288a0 	.word	0x080288a0

08013d44 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8013d44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013d46:	2000      	movs	r0, #0
 8013d48:	b12b      	cbz	r3, 8013d56 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013d4a:	b920      	cbnz	r0, 8013d56 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013d4c:	1a5a      	subs	r2, r3, r1
 8013d4e:	699b      	ldr	r3, [r3, #24]
 8013d50:	4250      	negs	r0, r2
 8013d52:	4150      	adcs	r0, r2
 8013d54:	e7f8      	b.n	8013d48 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8013d56:	4770      	bx	lr

08013d58 <_ZN8touchgfx9Container9removeAllEv>:
 8013d58:	2200      	movs	r2, #0
 8013d5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013d5c:	b123      	cbz	r3, 8013d68 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8013d5e:	6999      	ldr	r1, [r3, #24]
 8013d60:	6281      	str	r1, [r0, #40]	; 0x28
 8013d62:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8013d66:	e7f8      	b.n	8013d5a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8013d68:	4770      	bx	lr

08013d6a <_ZN8touchgfx9Container6unlinkEv>:
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	6283      	str	r3, [r0, #40]	; 0x28
 8013d6e:	4770      	bx	lr

08013d70 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013d70:	2200      	movs	r2, #0
 8013d72:	8002      	strh	r2, [r0, #0]
 8013d74:	8042      	strh	r2, [r0, #2]
 8013d76:	8082      	strh	r2, [r0, #4]
 8013d78:	80c2      	strh	r2, [r0, #6]
 8013d7a:	4770      	bx	lr

08013d7c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8013d7c:	b570      	push	{r4, r5, r6, lr}
 8013d7e:	460d      	mov	r5, r1
 8013d80:	4616      	mov	r6, r2
 8013d82:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013d84:	b13c      	cbz	r4, 8013d96 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013d86:	6823      	ldr	r3, [r4, #0]
 8013d88:	4620      	mov	r0, r4
 8013d8a:	4632      	mov	r2, r6
 8013d8c:	4629      	mov	r1, r5
 8013d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d90:	4798      	blx	r3
 8013d92:	69a4      	ldr	r4, [r4, #24]
 8013d94:	e7f6      	b.n	8013d84 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013d96:	bd70      	pop	{r4, r5, r6, pc}

08013d98 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013d98:	b538      	push	{r3, r4, r5, lr}
 8013d9a:	460d      	mov	r5, r1
 8013d9c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013d9e:	b134      	cbz	r4, 8013dae <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013da0:	682b      	ldr	r3, [r5, #0]
 8013da2:	4621      	mov	r1, r4
 8013da4:	4628      	mov	r0, r5
 8013da6:	689b      	ldr	r3, [r3, #8]
 8013da8:	4798      	blx	r3
 8013daa:	69a4      	ldr	r4, [r4, #24]
 8013dac:	e7f7      	b.n	8013d9e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8013dae:	bd38      	pop	{r3, r4, r5, pc}

08013db0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013db0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013db2:	b19b      	cbz	r3, 8013ddc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013db4:	428b      	cmp	r3, r1
 8013db6:	d109      	bne.n	8013dcc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013db8:	699a      	ldr	r2, [r3, #24]
 8013dba:	2100      	movs	r1, #0
 8013dbc:	6159      	str	r1, [r3, #20]
 8013dbe:	6282      	str	r2, [r0, #40]	; 0x28
 8013dc0:	b902      	cbnz	r2, 8013dc4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8013dc2:	4770      	bx	lr
 8013dc4:	6199      	str	r1, [r3, #24]
 8013dc6:	4770      	bx	lr
 8013dc8:	4613      	mov	r3, r2
 8013dca:	b13a      	cbz	r2, 8013ddc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013dcc:	699a      	ldr	r2, [r3, #24]
 8013dce:	428a      	cmp	r2, r1
 8013dd0:	d1fa      	bne.n	8013dc8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8013dd2:	698a      	ldr	r2, [r1, #24]
 8013dd4:	619a      	str	r2, [r3, #24]
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8013ddc:	4770      	bx	lr

08013dde <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8013dde:	b410      	push	{r4}
 8013de0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013de2:	4604      	mov	r4, r0
 8013de4:	b92b      	cbnz	r3, 8013df2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8013de6:	6803      	ldr	r3, [r0, #0]
 8013de8:	4611      	mov	r1, r2
 8013dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013df0:	4718      	bx	r3
 8013df2:	b941      	cbnz	r1, 8013e06 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8013df4:	6193      	str	r3, [r2, #24]
 8013df6:	6282      	str	r2, [r0, #40]	; 0x28
 8013df8:	6154      	str	r4, [r2, #20]
 8013dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dfe:	4770      	bx	lr
 8013e00:	4603      	mov	r3, r0
 8013e02:	2800      	cmp	r0, #0
 8013e04:	d0f9      	beq.n	8013dfa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8013e06:	4299      	cmp	r1, r3
 8013e08:	6998      	ldr	r0, [r3, #24]
 8013e0a:	d1f9      	bne.n	8013e00 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8013e0c:	6190      	str	r0, [r2, #24]
 8013e0e:	618a      	str	r2, [r1, #24]
 8013e10:	e7f2      	b.n	8013df8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08013e14 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8013e14:	4288      	cmp	r0, r1
 8013e16:	b508      	push	{r3, lr}
 8013e18:	d105      	bne.n	8013e26 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8013e1a:	4b11      	ldr	r3, [pc, #68]	; (8013e60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8013e1c:	2123      	movs	r1, #35	; 0x23
 8013e1e:	4a11      	ldr	r2, [pc, #68]	; (8013e64 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013e20:	4811      	ldr	r0, [pc, #68]	; (8013e68 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8013e22:	f011 fea9 	bl	8025b78 <__assert_func>
 8013e26:	694b      	ldr	r3, [r1, #20]
 8013e28:	b11b      	cbz	r3, 8013e32 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8013e2a:	4b10      	ldr	r3, [pc, #64]	; (8013e6c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8013e2c:	2124      	movs	r1, #36	; 0x24
 8013e2e:	4a0d      	ldr	r2, [pc, #52]	; (8013e64 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013e30:	e7f6      	b.n	8013e20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8013e32:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8013e36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013e38:	b913      	cbnz	r3, 8013e40 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8013e3a:	6281      	str	r1, [r0, #40]	; 0x28
 8013e3c:	bd08      	pop	{r3, pc}
 8013e3e:	4613      	mov	r3, r2
 8013e40:	699a      	ldr	r2, [r3, #24]
 8013e42:	b12a      	cbz	r2, 8013e50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8013e44:	428b      	cmp	r3, r1
 8013e46:	d1fa      	bne.n	8013e3e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8013e48:	4b09      	ldr	r3, [pc, #36]	; (8013e70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8013e4a:	2135      	movs	r1, #53	; 0x35
 8013e4c:	4a05      	ldr	r2, [pc, #20]	; (8013e64 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013e4e:	e7e7      	b.n	8013e20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8013e50:	428b      	cmp	r3, r1
 8013e52:	d103      	bne.n	8013e5c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8013e54:	4b06      	ldr	r3, [pc, #24]	; (8013e70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8013e56:	2138      	movs	r1, #56	; 0x38
 8013e58:	4a02      	ldr	r2, [pc, #8]	; (8013e64 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013e5a:	e7e1      	b.n	8013e20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8013e5c:	6199      	str	r1, [r3, #24]
 8013e5e:	e7ed      	b.n	8013e3c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8013e60:	08028997 	.word	0x08028997
 8013e64:	08028aec 	.word	0x08028aec
 8013e68:	080289c3 	.word	0x080289c3
 8013e6c:	080289f6 	.word	0x080289f6
 8013e70:	08028a2c 	.word	0x08028a2c

08013e74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8013e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e78:	461f      	mov	r7, r3
 8013e7a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8013e7e:	460d      	mov	r5, r1
 8013e80:	4616      	mov	r6, r2
 8013e82:	b103      	cbz	r3, 8013e86 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013e84:	6038      	str	r0, [r7, #0]
 8013e86:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013e88:	b314      	cbz	r4, 8013ed0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8013e8a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013e8e:	b1eb      	cbz	r3, 8013ecc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e90:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013e94:	428d      	cmp	r5, r1
 8013e96:	db19      	blt.n	8013ecc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013e98:	b289      	uxth	r1, r1
 8013e9a:	8923      	ldrh	r3, [r4, #8]
 8013e9c:	440b      	add	r3, r1
 8013e9e:	b21b      	sxth	r3, r3
 8013ea0:	429d      	cmp	r5, r3
 8013ea2:	da13      	bge.n	8013ecc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013ea4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013ea8:	4296      	cmp	r6, r2
 8013eaa:	db0f      	blt.n	8013ecc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013eac:	b292      	uxth	r2, r2
 8013eae:	8963      	ldrh	r3, [r4, #10]
 8013eb0:	4413      	add	r3, r2
 8013eb2:	b21b      	sxth	r3, r3
 8013eb4:	429e      	cmp	r6, r3
 8013eb6:	da09      	bge.n	8013ecc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013eb8:	6823      	ldr	r3, [r4, #0]
 8013eba:	1ab2      	subs	r2, r6, r2
 8013ebc:	1a69      	subs	r1, r5, r1
 8013ebe:	4620      	mov	r0, r4
 8013ec0:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8013ec4:	b212      	sxth	r2, r2
 8013ec6:	463b      	mov	r3, r7
 8013ec8:	b209      	sxth	r1, r1
 8013eca:	47c0      	blx	r8
 8013ecc:	69a4      	ldr	r4, [r4, #24]
 8013ece:	e7db      	b.n	8013e88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8013ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013ed4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8013ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ed8:	4c6d      	ldr	r4, [pc, #436]	; (8014090 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8013eda:	b0a1      	sub	sp, #132	; 0x84
 8013edc:	4606      	mov	r6, r0
 8013ede:	6824      	ldr	r4, [r4, #0]
 8013ee0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8013ee2:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8013ee6:	2400      	movs	r4, #0
 8013ee8:	9303      	str	r3, [sp, #12]
 8013eea:	802c      	strh	r4, [r5, #0]
 8013eec:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8013eee:	802c      	strh	r4, [r5, #0]
 8013ef0:	601c      	str	r4, [r3, #0]
 8013ef2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013ef6:	f7ff ffbd 	bl	8013e74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013efa:	f1b9 0f03 	cmp.w	r9, #3
 8013efe:	f340 80c1 	ble.w	8014084 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8013f02:	4631      	mov	r1, r6
 8013f04:	a80c      	add	r0, sp, #48	; 0x30
 8013f06:	f005 fec3 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f0a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8013f0e:	9306      	str	r3, [sp, #24]
 8013f10:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8013f14:	9307      	str	r3, [sp, #28]
 8013f16:	9b03      	ldr	r3, [sp, #12]
 8013f18:	f8d3 a000 	ldr.w	sl, [r3]
 8013f1c:	f1ba 0f00 	cmp.w	sl, #0
 8013f20:	f000 80b3 	beq.w	801408a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8013f24:	4651      	mov	r1, sl
 8013f26:	a810      	add	r0, sp, #64	; 0x40
 8013f28:	f005 feb2 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f2c:	2002      	movs	r0, #2
 8013f2e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8013f32:	9b01      	ldr	r3, [sp, #4]
 8013f34:	9a06      	ldr	r2, [sp, #24]
 8013f36:	fb91 f1f0 	sdiv	r1, r1, r0
 8013f3a:	189d      	adds	r5, r3, r2
 8013f3c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8013f40:	9a07      	ldr	r2, [sp, #28]
 8013f42:	4419      	add	r1, r3
 8013f44:	9b02      	ldr	r3, [sp, #8]
 8013f46:	4413      	add	r3, r2
 8013f48:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8013f4c:	1a6d      	subs	r5, r5, r1
 8013f4e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8013f52:	fb92 f2f0 	sdiv	r2, r2, r0
 8013f56:	440a      	add	r2, r1
 8013f58:	1a9b      	subs	r3, r3, r2
 8013f5a:	435b      	muls	r3, r3
 8013f5c:	fb05 3505 	mla	r5, r5, r5, r3
 8013f60:	4f4c      	ldr	r7, [pc, #304]	; (8014094 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8013f62:	ac10      	add	r4, sp, #64	; 0x40
 8013f64:	f1b9 0f0c 	cmp.w	r9, #12
 8013f68:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f6c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f70:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f74:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8013f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013f7c:	f04f 0303 	mov.w	r3, #3
 8013f80:	bfd8      	it	le
 8013f82:	f109 32ff 	addle.w	r2, r9, #4294967295
 8013f86:	f04f 0400 	mov.w	r4, #0
 8013f8a:	f8cd 9000 	str.w	r9, [sp]
 8013f8e:	bfcc      	ite	gt
 8013f90:	4698      	movgt	r8, r3
 8013f92:	fb92 f8f3 	sdivle	r8, r2, r3
 8013f96:	1c63      	adds	r3, r4, #1
 8013f98:	aa10      	add	r2, sp, #64	; 0x40
 8013f9a:	f004 0401 	and.w	r4, r4, #1
 8013f9e:	f04f 0b00 	mov.w	fp, #0
 8013fa2:	9308      	str	r3, [sp, #32]
 8013fa4:	9b00      	ldr	r3, [sp, #0]
 8013fa6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8013faa:	fb93 f3f8 	sdiv	r3, r3, r8
 8013fae:	3404      	adds	r4, #4
 8013fb0:	b29b      	uxth	r3, r3
 8013fb2:	9304      	str	r3, [sp, #16]
 8013fb4:	9a04      	ldr	r2, [sp, #16]
 8013fb6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013fba:	fb13 f302 	smulbb	r3, r3, r2
 8013fbe:	9a01      	ldr	r2, [sp, #4]
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	1899      	adds	r1, r3, r2
 8013fc4:	9305      	str	r3, [sp, #20]
 8013fc6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013fca:	b209      	sxth	r1, r1
 8013fcc:	4299      	cmp	r1, r3
 8013fce:	db4d      	blt.n	801406c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013fd0:	8932      	ldrh	r2, [r6, #8]
 8013fd2:	4413      	add	r3, r2
 8013fd4:	b21b      	sxth	r3, r3
 8013fd6:	4299      	cmp	r1, r3
 8013fd8:	da48      	bge.n	801406c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013fda:	9b04      	ldr	r3, [sp, #16]
 8013fdc:	6827      	ldr	r7, [r4, #0]
 8013fde:	fb17 f703 	smulbb	r7, r7, r3
 8013fe2:	9b02      	ldr	r3, [sp, #8]
 8013fe4:	b2bf      	uxth	r7, r7
 8013fe6:	18fa      	adds	r2, r7, r3
 8013fe8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8013fec:	b212      	sxth	r2, r2
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	db3c      	blt.n	801406c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013ff2:	8970      	ldrh	r0, [r6, #10]
 8013ff4:	4403      	add	r3, r0
 8013ff6:	b21b      	sxth	r3, r3
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	da37      	bge.n	801406c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	4630      	mov	r0, r6
 8014000:	930b      	str	r3, [sp, #44]	; 0x2c
 8014002:	ab0b      	add	r3, sp, #44	; 0x2c
 8014004:	f7ff ff36 	bl	8013e74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014008:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801400a:	b37a      	cbz	r2, 801406c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801400c:	4552      	cmp	r2, sl
 801400e:	d02d      	beq.n	801406c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014010:	4611      	mov	r1, r2
 8014012:	a80e      	add	r0, sp, #56	; 0x38
 8014014:	9209      	str	r2, [sp, #36]	; 0x24
 8014016:	f005 fe3b 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801401a:	f04f 0e02 	mov.w	lr, #2
 801401e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8014022:	9a06      	ldr	r2, [sp, #24]
 8014024:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8014028:	9b01      	ldr	r3, [sp, #4]
 801402a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801402e:	4413      	add	r3, r2
 8014030:	9a07      	ldr	r2, [sp, #28]
 8014032:	fb91 f1fe 	sdiv	r1, r1, lr
 8014036:	fb9c fcfe 	sdiv	ip, ip, lr
 801403a:	4401      	add	r1, r0
 801403c:	1a58      	subs	r0, r3, r1
 801403e:	9b02      	ldr	r3, [sp, #8]
 8014040:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8014044:	4413      	add	r3, r2
 8014046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014048:	448c      	add	ip, r1
 801404a:	eba3 030c 	sub.w	r3, r3, ip
 801404e:	435b      	muls	r3, r3
 8014050:	fb00 3300 	mla	r3, r0, r0, r3
 8014054:	42ab      	cmp	r3, r5
 8014056:	d208      	bcs.n	801406a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8014058:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801405a:	461d      	mov	r5, r3
 801405c:	9803      	ldr	r0, [sp, #12]
 801405e:	6001      	str	r1, [r0, #0]
 8014060:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8014062:	9805      	ldr	r0, [sp, #20]
 8014064:	8008      	strh	r0, [r1, #0]
 8014066:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014068:	800f      	strh	r7, [r1, #0]
 801406a:	4692      	mov	sl, r2
 801406c:	f10b 0b01 	add.w	fp, fp, #1
 8014070:	3408      	adds	r4, #8
 8014072:	f1bb 0f04 	cmp.w	fp, #4
 8014076:	d19d      	bne.n	8013fb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8014078:	9b00      	ldr	r3, [sp, #0]
 801407a:	9c08      	ldr	r4, [sp, #32]
 801407c:	444b      	add	r3, r9
 801407e:	4544      	cmp	r4, r8
 8014080:	9300      	str	r3, [sp, #0]
 8014082:	d188      	bne.n	8013f96 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8014084:	b021      	add	sp, #132	; 0x84
 8014086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801408a:	f04f 35ff 	mov.w	r5, #4294967295
 801408e:	e767      	b.n	8013f60 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8014090:	2400c8a4 	.word	0x2400c8a4
 8014094:	08027c30 	.word	0x08027c30

08014098 <_ZN8touchgfx4RectaNERKS0_>:
 8014098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801409c:	f9b1 7000 	ldrsh.w	r7, [r1]
 80140a0:	888c      	ldrh	r4, [r1, #4]
 80140a2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80140a6:	443c      	add	r4, r7
 80140a8:	b2a4      	uxth	r4, r4
 80140aa:	fa0f f884 	sxth.w	r8, r4
 80140ae:	45c1      	cmp	r9, r8
 80140b0:	da2f      	bge.n	8014112 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80140b2:	8882      	ldrh	r2, [r0, #4]
 80140b4:	444a      	add	r2, r9
 80140b6:	b292      	uxth	r2, r2
 80140b8:	fa0f fe82 	sxth.w	lr, r2
 80140bc:	4577      	cmp	r7, lr
 80140be:	da28      	bge.n	8014112 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80140c0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80140c4:	88cb      	ldrh	r3, [r1, #6]
 80140c6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80140ca:	442b      	add	r3, r5
 80140cc:	b21b      	sxth	r3, r3
 80140ce:	429e      	cmp	r6, r3
 80140d0:	da1f      	bge.n	8014112 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80140d2:	88c3      	ldrh	r3, [r0, #6]
 80140d4:	4433      	add	r3, r6
 80140d6:	b29b      	uxth	r3, r3
 80140d8:	fa0f fc83 	sxth.w	ip, r3
 80140dc:	4565      	cmp	r5, ip
 80140de:	da18      	bge.n	8014112 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80140e0:	454f      	cmp	r7, r9
 80140e2:	bfb8      	it	lt
 80140e4:	464f      	movlt	r7, r9
 80140e6:	42b5      	cmp	r5, r6
 80140e8:	bfb8      	it	lt
 80140ea:	4635      	movlt	r5, r6
 80140ec:	45f0      	cmp	r8, lr
 80140ee:	bfd8      	it	le
 80140f0:	4622      	movle	r2, r4
 80140f2:	1bd2      	subs	r2, r2, r7
 80140f4:	8082      	strh	r2, [r0, #4]
 80140f6:	884a      	ldrh	r2, [r1, #2]
 80140f8:	88c9      	ldrh	r1, [r1, #6]
 80140fa:	8007      	strh	r7, [r0, #0]
 80140fc:	440a      	add	r2, r1
 80140fe:	8045      	strh	r5, [r0, #2]
 8014100:	b292      	uxth	r2, r2
 8014102:	b211      	sxth	r1, r2
 8014104:	458c      	cmp	ip, r1
 8014106:	bfa8      	it	ge
 8014108:	4613      	movge	r3, r2
 801410a:	1b5b      	subs	r3, r3, r5
 801410c:	80c3      	strh	r3, [r0, #6]
 801410e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014112:	2300      	movs	r3, #0
 8014114:	8003      	strh	r3, [r0, #0]
 8014116:	8043      	strh	r3, [r0, #2]
 8014118:	8083      	strh	r3, [r0, #4]
 801411a:	80c3      	strh	r3, [r0, #6]
 801411c:	e7f7      	b.n	801410e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801411e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801411e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014122:	2b00      	cmp	r3, #0
 8014124:	dd06      	ble.n	8014134 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8014126:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801412a:	2800      	cmp	r0, #0
 801412c:	bfcc      	ite	gt
 801412e:	2000      	movgt	r0, #0
 8014130:	2001      	movle	r0, #1
 8014132:	4770      	bx	lr
 8014134:	2001      	movs	r0, #1
 8014136:	4770      	bx	lr

08014138 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8014138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801413c:	2300      	movs	r3, #0
 801413e:	4604      	mov	r4, r0
 8014140:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8014142:	8003      	strh	r3, [r0, #0]
 8014144:	8043      	strh	r3, [r0, #2]
 8014146:	8083      	strh	r3, [r0, #4]
 8014148:	80c3      	strh	r3, [r0, #6]
 801414a:	2d00      	cmp	r5, #0
 801414c:	d040      	beq.n	80141d0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801414e:	1d28      	adds	r0, r5, #4
 8014150:	f7ff ffe5 	bl	801411e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014154:	b988      	cbnz	r0, 801417a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014156:	4620      	mov	r0, r4
 8014158:	f7ff ffe1 	bl	801411e <_ZNK8touchgfx4Rect7isEmptyEv>
 801415c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014160:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014164:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8014168:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801416c:	b138      	cbz	r0, 801417e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801416e:	8022      	strh	r2, [r4, #0]
 8014170:	8063      	strh	r3, [r4, #2]
 8014172:	f8a4 e004 	strh.w	lr, [r4, #4]
 8014176:	f8a4 c006 	strh.w	ip, [r4, #6]
 801417a:	69ad      	ldr	r5, [r5, #24]
 801417c:	e7e5      	b.n	801414a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801417e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014182:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014186:	4290      	cmp	r0, r2
 8014188:	4607      	mov	r7, r0
 801418a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801418e:	460e      	mov	r6, r1
 8014190:	bfa8      	it	ge
 8014192:	4617      	movge	r7, r2
 8014194:	4299      	cmp	r1, r3
 8014196:	4472      	add	r2, lr
 8014198:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801419c:	bfa8      	it	ge
 801419e:	461e      	movge	r6, r3
 80141a0:	4440      	add	r0, r8
 80141a2:	4471      	add	r1, lr
 80141a4:	4463      	add	r3, ip
 80141a6:	b200      	sxth	r0, r0
 80141a8:	8027      	strh	r7, [r4, #0]
 80141aa:	b212      	sxth	r2, r2
 80141ac:	8066      	strh	r6, [r4, #2]
 80141ae:	b209      	sxth	r1, r1
 80141b0:	b21b      	sxth	r3, r3
 80141b2:	4290      	cmp	r0, r2
 80141b4:	bfac      	ite	ge
 80141b6:	ebc7 0200 	rsbge	r2, r7, r0
 80141ba:	ebc7 0202 	rsblt	r2, r7, r2
 80141be:	4299      	cmp	r1, r3
 80141c0:	bfac      	ite	ge
 80141c2:	ebc6 0301 	rsbge	r3, r6, r1
 80141c6:	ebc6 0303 	rsblt	r3, r6, r3
 80141ca:	80a2      	strh	r2, [r4, #4]
 80141cc:	80e3      	strh	r3, [r4, #6]
 80141ce:	e7d4      	b.n	801417a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80141d0:	4620      	mov	r0, r4
 80141d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080141d6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80141d6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80141da:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80141de:	b383      	cbz	r3, 8014242 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80141e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80141e2:	b374      	cbz	r4, 8014242 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80141e4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80141e8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80141ec:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80141f0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80141f4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80141f8:	b303      	cbz	r3, 801423c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80141fa:	4668      	mov	r0, sp
 80141fc:	1d21      	adds	r1, r4, #4
 80141fe:	f8ad 5000 	strh.w	r5, [sp]
 8014202:	f8ad 6002 	strh.w	r6, [sp, #2]
 8014206:	f8ad 7004 	strh.w	r7, [sp, #4]
 801420a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801420e:	f7ff ff43 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 8014212:	4668      	mov	r0, sp
 8014214:	f7ff ff83 	bl	801411e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014218:	b980      	cbnz	r0, 801423c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801421a:	f8bd 3000 	ldrh.w	r3, [sp]
 801421e:	4669      	mov	r1, sp
 8014220:	88a2      	ldrh	r2, [r4, #4]
 8014222:	4620      	mov	r0, r4
 8014224:	1a9b      	subs	r3, r3, r2
 8014226:	88e2      	ldrh	r2, [r4, #6]
 8014228:	f8ad 3000 	strh.w	r3, [sp]
 801422c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014230:	1a9b      	subs	r3, r3, r2
 8014232:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014236:	6823      	ldr	r3, [r4, #0]
 8014238:	689b      	ldr	r3, [r3, #8]
 801423a:	4798      	blx	r3
 801423c:	69a4      	ldr	r4, [r4, #24]
 801423e:	2c00      	cmp	r4, #0
 8014240:	d1d8      	bne.n	80141f4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8014242:	b002      	add	sp, #8
 8014244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014248 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8014248:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801424a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801424e:	460d      	mov	r5, r1
 8014250:	4616      	mov	r6, r2
 8014252:	b323      	cbz	r3, 801429e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014254:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014256:	b314      	cbz	r4, 801429e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014258:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801425c:	b1eb      	cbz	r3, 801429a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801425e:	6828      	ldr	r0, [r5, #0]
 8014260:	466b      	mov	r3, sp
 8014262:	6869      	ldr	r1, [r5, #4]
 8014264:	c303      	stmia	r3!, {r0, r1}
 8014266:	4668      	mov	r0, sp
 8014268:	1d21      	adds	r1, r4, #4
 801426a:	f7ff ff15 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 801426e:	4668      	mov	r0, sp
 8014270:	f7ff ff55 	bl	801411e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014274:	b988      	cbnz	r0, 801429a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014276:	f8bd 3000 	ldrh.w	r3, [sp]
 801427a:	4669      	mov	r1, sp
 801427c:	88a2      	ldrh	r2, [r4, #4]
 801427e:	4620      	mov	r0, r4
 8014280:	1a9b      	subs	r3, r3, r2
 8014282:	88e2      	ldrh	r2, [r4, #6]
 8014284:	f8ad 3000 	strh.w	r3, [sp]
 8014288:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801428c:	1a9b      	subs	r3, r3, r2
 801428e:	4632      	mov	r2, r6
 8014290:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014294:	6823      	ldr	r3, [r4, #0]
 8014296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014298:	4798      	blx	r3
 801429a:	69a4      	ldr	r4, [r4, #24]
 801429c:	e7db      	b.n	8014256 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801429e:	b002      	add	sp, #8
 80142a0:	bd70      	pop	{r4, r5, r6, pc}

080142a2 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80142a2:	4770      	bx	lr

080142a4 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80142a4:	4770      	bx	lr

080142a6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80142a6:	6803      	ldr	r3, [r0, #0]
 80142a8:	b513      	push	{r0, r1, r4, lr}
 80142aa:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80142ae:	2300      	movs	r3, #0
 80142b0:	e9cd 3300 	strd	r3, r3, [sp]
 80142b4:	466b      	mov	r3, sp
 80142b6:	47a0      	blx	r4
 80142b8:	b002      	add	sp, #8
 80142ba:	bd10      	pop	{r4, pc}

080142bc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80142bc:	2301      	movs	r3, #1
 80142be:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80142c2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80142c6:	4770      	bx	lr

080142c8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80142c8:	2301      	movs	r3, #1
 80142ca:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80142ce:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80142d2:	4770      	bx	lr

080142d4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80142d4:	6843      	ldr	r3, [r0, #4]
 80142d6:	2201      	movs	r2, #1
 80142d8:	725a      	strb	r2, [r3, #9]
 80142da:	6840      	ldr	r0, [r0, #4]
 80142dc:	6803      	ldr	r3, [r0, #0]
 80142de:	691b      	ldr	r3, [r3, #16]
 80142e0:	4718      	bx	r3

080142e2 <_ZN8touchgfx3HAL8flushDMAEv>:
 80142e2:	6840      	ldr	r0, [r0, #4]
 80142e4:	6803      	ldr	r3, [r0, #0]
 80142e6:	689b      	ldr	r3, [r3, #8]
 80142e8:	4718      	bx	r3

080142ea <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80142ea:	b530      	push	{r4, r5, lr}
 80142ec:	b08b      	sub	sp, #44	; 0x2c
 80142ee:	6804      	ldr	r4, [r0, #0]
 80142f0:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80142f4:	9509      	str	r5, [sp, #36]	; 0x24
 80142f6:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80142fa:	9508      	str	r5, [sp, #32]
 80142fc:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8014300:	9507      	str	r5, [sp, #28]
 8014302:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8014306:	9506      	str	r5, [sp, #24]
 8014308:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801430c:	9505      	str	r5, [sp, #20]
 801430e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8014312:	9504      	str	r5, [sp, #16]
 8014314:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8014318:	9503      	str	r5, [sp, #12]
 801431a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801431e:	9502      	str	r5, [sp, #8]
 8014320:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8014324:	e9cd 3500 	strd	r3, r5, [sp]
 8014328:	4613      	mov	r3, r2
 801432a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801432c:	2200      	movs	r2, #0
 801432e:	47a0      	blx	r4
 8014330:	b00b      	add	sp, #44	; 0x2c
 8014332:	bd30      	pop	{r4, r5, pc}

08014334 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014334:	4b04      	ldr	r3, [pc, #16]	; (8014348 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	b123      	cbz	r3, 8014344 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801433a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801433e:	f080 0001 	eor.w	r0, r0, #1
 8014342:	4770      	bx	lr
 8014344:	2001      	movs	r0, #1
 8014346:	4770      	bx	lr
 8014348:	2400c8a2 	.word	0x2400c8a2

0801434c <_ZN8touchgfx3HAL8endFrameEv>:
 801434c:	b510      	push	{r4, lr}
 801434e:	4604      	mov	r4, r0
 8014350:	6840      	ldr	r0, [r0, #4]
 8014352:	6803      	ldr	r3, [r0, #0]
 8014354:	689b      	ldr	r3, [r3, #8]
 8014356:	4798      	blx	r3
 8014358:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801435c:	b113      	cbz	r3, 8014364 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801435e:	2301      	movs	r3, #1
 8014360:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014364:	bd10      	pop	{r4, pc}

08014366 <_ZN8touchgfx3HAL10initializeEv>:
 8014366:	b510      	push	{r4, lr}
 8014368:	4604      	mov	r4, r0
 801436a:	f7ec fc1d 	bl	8000ba8 <_ZN8touchgfx10OSWrappers10initializeEv>
 801436e:	6860      	ldr	r0, [r4, #4]
 8014370:	6803      	ldr	r3, [r0, #0]
 8014372:	68db      	ldr	r3, [r3, #12]
 8014374:	4798      	blx	r3
 8014376:	68e0      	ldr	r0, [r4, #12]
 8014378:	6803      	ldr	r3, [r0, #0]
 801437a:	689b      	ldr	r3, [r3, #8]
 801437c:	4798      	blx	r3
 801437e:	6823      	ldr	r3, [r4, #0]
 8014380:	4620      	mov	r0, r4
 8014382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014388:	4718      	bx	r3

0801438a <_ZN8touchgfx3HAL9taskEntryEv>:
 801438a:	b508      	push	{r3, lr}
 801438c:	6803      	ldr	r3, [r0, #0]
 801438e:	4604      	mov	r4, r0
 8014390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014392:	4798      	blx	r3
 8014394:	6823      	ldr	r3, [r4, #0]
 8014396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014398:	4620      	mov	r0, r4
 801439a:	4798      	blx	r3
 801439c:	f7ec fc7a 	bl	8000c94 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80143a0:	6823      	ldr	r3, [r4, #0]
 80143a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143a4:	e7f8      	b.n	8014398 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080143a8 <_ZN8touchgfx3HAL4tickEv>:
 80143a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80143aa:	6803      	ldr	r3, [r0, #0]
 80143ac:	4604      	mov	r4, r0
 80143ae:	4d5c      	ldr	r5, [pc, #368]	; (8014520 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80143b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80143b4:	4798      	blx	r3
 80143b6:	2800      	cmp	r0, #0
 80143b8:	f000 8097 	beq.w	80144ea <_ZN8touchgfx3HAL4tickEv+0x142>
 80143bc:	2001      	movs	r0, #1
 80143be:	2600      	movs	r6, #0
 80143c0:	f7ec f8b6 	bl	8000530 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80143c4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80143c8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80143cc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80143d0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80143d4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80143d8:	b133      	cbz	r3, 80143e8 <_ZN8touchgfx3HAL4tickEv+0x40>
 80143da:	6823      	ldr	r3, [r4, #0]
 80143dc:	4620      	mov	r0, r4
 80143de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80143e2:	4798      	blx	r3
 80143e4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80143e8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80143ec:	2601      	movs	r6, #1
 80143ee:	6862      	ldr	r2, [r4, #4]
 80143f0:	f083 0301 	eor.w	r3, r3, #1
 80143f4:	702e      	strb	r6, [r5, #0]
 80143f6:	7253      	strb	r3, [r2, #9]
 80143f8:	f004 fc30 	bl	8018c5c <_ZN8touchgfx11Application11getInstanceEv>
 80143fc:	6803      	ldr	r3, [r0, #0]
 80143fe:	4631      	mov	r1, r6
 8014400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014402:	4798      	blx	r3
 8014404:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014408:	b90b      	cbnz	r3, 801440e <_ZN8touchgfx3HAL4tickEv+0x66>
 801440a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801440e:	f004 fc25 	bl	8018c5c <_ZN8touchgfx11Application11getInstanceEv>
 8014412:	6803      	ldr	r3, [r0, #0]
 8014414:	695b      	ldr	r3, [r3, #20]
 8014416:	4798      	blx	r3
 8014418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801441a:	6803      	ldr	r3, [r0, #0]
 801441c:	691b      	ldr	r3, [r3, #16]
 801441e:	4798      	blx	r3
 8014420:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8014424:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8014428:	3b01      	subs	r3, #1
 801442a:	b2db      	uxtb	r3, r3
 801442c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8014430:	b10a      	cbz	r2, 8014436 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8014432:	2b00      	cmp	r3, #0
 8014434:	d1eb      	bne.n	801440e <_ZN8touchgfx3HAL4tickEv+0x66>
 8014436:	4a3b      	ldr	r2, [pc, #236]	; (8014524 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8014438:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801443c:	7813      	ldrb	r3, [r2, #0]
 801443e:	3301      	adds	r3, #1
 8014440:	b25b      	sxtb	r3, r3
 8014442:	4299      	cmp	r1, r3
 8014444:	7013      	strb	r3, [r2, #0]
 8014446:	dc10      	bgt.n	801446a <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014448:	2300      	movs	r3, #0
 801444a:	68e0      	ldr	r0, [r4, #12]
 801444c:	a902      	add	r1, sp, #8
 801444e:	7013      	strb	r3, [r2, #0]
 8014450:	aa03      	add	r2, sp, #12
 8014452:	6803      	ldr	r3, [r0, #0]
 8014454:	68db      	ldr	r3, [r3, #12]
 8014456:	4798      	blx	r3
 8014458:	6823      	ldr	r3, [r4, #0]
 801445a:	2800      	cmp	r0, #0
 801445c:	d051      	beq.n	8014502 <_ZN8touchgfx3HAL4tickEv+0x15a>
 801445e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014462:	4620      	mov	r0, r4
 8014464:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014468:	4798      	blx	r3
 801446a:	2300      	movs	r3, #0
 801446c:	6960      	ldr	r0, [r4, #20]
 801446e:	f88d 3007 	strb.w	r3, [sp, #7]
 8014472:	b158      	cbz	r0, 801448c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014474:	6803      	ldr	r3, [r0, #0]
 8014476:	f10d 0107 	add.w	r1, sp, #7
 801447a:	68db      	ldr	r3, [r3, #12]
 801447c:	4798      	blx	r3
 801447e:	b128      	cbz	r0, 801448c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8014480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014482:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014486:	6803      	ldr	r3, [r0, #0]
 8014488:	68db      	ldr	r3, [r3, #12]
 801448a:	4798      	blx	r3
 801448c:	f104 001c 	add.w	r0, r4, #28
 8014490:	f00f fe72 	bl	8024178 <_ZN8touchgfx8Gestures4tickEv>
 8014494:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8014498:	b30b      	cbz	r3, 80144de <_ZN8touchgfx3HAL4tickEv+0x136>
 801449a:	6920      	ldr	r0, [r4, #16]
 801449c:	6803      	ldr	r3, [r0, #0]
 801449e:	691b      	ldr	r3, [r3, #16]
 80144a0:	4798      	blx	r3
 80144a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80144a4:	4606      	mov	r6, r0
 80144a6:	b903      	cbnz	r3, 80144aa <_ZN8touchgfx3HAL4tickEv+0x102>
 80144a8:	6720      	str	r0, [r4, #112]	; 0x70
 80144aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80144ac:	4a1e      	ldr	r2, [pc, #120]	; (8014528 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80144ae:	1af3      	subs	r3, r6, r3
 80144b0:	4293      	cmp	r3, r2
 80144b2:	d914      	bls.n	80144de <_ZN8touchgfx3HAL4tickEv+0x136>
 80144b4:	6920      	ldr	r0, [r4, #16]
 80144b6:	6803      	ldr	r3, [r0, #0]
 80144b8:	699b      	ldr	r3, [r3, #24]
 80144ba:	4798      	blx	r3
 80144bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80144be:	2264      	movs	r2, #100	; 0x64
 80144c0:	1af3      	subs	r3, r6, r3
 80144c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80144c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80144ca:	2800      	cmp	r0, #0
 80144cc:	dc1e      	bgt.n	801450c <_ZN8touchgfx3HAL4tickEv+0x164>
 80144ce:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80144d2:	6920      	ldr	r0, [r4, #16]
 80144d4:	2100      	movs	r1, #0
 80144d6:	6803      	ldr	r3, [r0, #0]
 80144d8:	69db      	ldr	r3, [r3, #28]
 80144da:	4798      	blx	r3
 80144dc:	6726      	str	r6, [r4, #112]	; 0x70
 80144de:	f004 fbbd 	bl	8018c5c <_ZN8touchgfx11Application11getInstanceEv>
 80144e2:	6803      	ldr	r3, [r0, #0]
 80144e4:	2100      	movs	r1, #0
 80144e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144e8:	4798      	blx	r3
 80144ea:	6823      	ldr	r3, [r4, #0]
 80144ec:	4620      	mov	r0, r4
 80144ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80144f2:	4798      	blx	r3
 80144f4:	2001      	movs	r0, #1
 80144f6:	f7ec f85b 	bl	80005b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80144fa:	2300      	movs	r3, #0
 80144fc:	702b      	strb	r3, [r5, #0]
 80144fe:	b004      	add	sp, #16
 8014500:	bd70      	pop	{r4, r5, r6, pc}
 8014502:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014506:	4620      	mov	r0, r4
 8014508:	4798      	blx	r3
 801450a:	e7ae      	b.n	801446a <_ZN8touchgfx3HAL4tickEv+0xc2>
 801450c:	2863      	cmp	r0, #99	; 0x63
 801450e:	bfcb      	itete	gt
 8014510:	2300      	movgt	r3, #0
 8014512:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8014516:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801451a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801451e:	e7d8      	b.n	80144d2 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8014520:	2400c8a8 	.word	0x2400c8a8
 8014524:	2400c8a9 	.word	0x2400c8a9
 8014528:	05f5e100 	.word	0x05f5e100

0801452c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801452c:	f7ec bb7e 	b.w	8000c2c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014530 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014530:	6581      	str	r1, [r0, #88]	; 0x58
 8014532:	301c      	adds	r0, #28
 8014534:	f00f be1e 	b.w	8024174 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08014538 <_ZN8touchgfx3HAL5touchEll>:
 8014538:	b530      	push	{r4, r5, lr}
 801453a:	b087      	sub	sp, #28
 801453c:	4604      	mov	r4, r0
 801453e:	a804      	add	r0, sp, #16
 8014540:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014544:	f004 f9b2 	bl	80188ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8014548:	9b04      	ldr	r3, [sp, #16]
 801454a:	a906      	add	r1, sp, #24
 801454c:	a803      	add	r0, sp, #12
 801454e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014552:	9b05      	ldr	r3, [sp, #20]
 8014554:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8014558:	f004 f9fa 	bl	8018950 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801455c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8014560:	f104 001c 	add.w	r0, r4, #28
 8014564:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8014568:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801456c:	b189      	cbz	r1, 8014592 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801456e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8014572:	9300      	str	r3, [sp, #0]
 8014574:	4613      	mov	r3, r2
 8014576:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801457a:	462a      	mov	r2, r5
 801457c:	f00f fe0a 	bl	8024194 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014580:	b128      	cbz	r0, 801458e <_ZN8touchgfx3HAL5touchEll+0x56>
 8014582:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8014586:	65e3      	str	r3, [r4, #92]	; 0x5c
 8014588:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801458c:	6623      	str	r3, [r4, #96]	; 0x60
 801458e:	b007      	add	sp, #28
 8014590:	bd30      	pop	{r4, r5, pc}
 8014592:	f00f fe43 	bl	802421c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014596:	2301      	movs	r3, #1
 8014598:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801459c:	e7f1      	b.n	8014582 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801459e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801459e:	b510      	push	{r4, lr}
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d046      	beq.n	8014632 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80145a4:	ea81 0002 	eor.w	r0, r1, r2
 80145a8:	07c4      	lsls	r4, r0, #31
 80145aa:	d508      	bpl.n	80145be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80145ac:	440b      	add	r3, r1
 80145ae:	3a01      	subs	r2, #1
 80145b0:	428b      	cmp	r3, r1
 80145b2:	d93e      	bls.n	8014632 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80145b4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80145b8:	f801 0b01 	strb.w	r0, [r1], #1
 80145bc:	e7f8      	b.n	80145b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80145be:	07d0      	lsls	r0, r2, #31
 80145c0:	bf42      	ittt	mi
 80145c2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80145c6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80145ca:	f801 0b01 	strbmi.w	r0, [r1], #1
 80145ce:	2b01      	cmp	r3, #1
 80145d0:	d911      	bls.n	80145f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80145d2:	ea81 0402 	eor.w	r4, r1, r2
 80145d6:	4610      	mov	r0, r2
 80145d8:	07a4      	lsls	r4, r4, #30
 80145da:	d022      	beq.n	8014622 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80145dc:	f023 0401 	bic.w	r4, r3, #1
 80145e0:	440c      	add	r4, r1
 80145e2:	428c      	cmp	r4, r1
 80145e4:	4602      	mov	r2, r0
 80145e6:	d904      	bls.n	80145f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80145e8:	8812      	ldrh	r2, [r2, #0]
 80145ea:	3002      	adds	r0, #2
 80145ec:	f821 2b02 	strh.w	r2, [r1], #2
 80145f0:	e7f7      	b.n	80145e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80145f2:	f003 0301 	and.w	r3, r3, #1
 80145f6:	f023 0003 	bic.w	r0, r3, #3
 80145fa:	4408      	add	r0, r1
 80145fc:	4288      	cmp	r0, r1
 80145fe:	4614      	mov	r4, r2
 8014600:	d904      	bls.n	801460c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8014602:	6824      	ldr	r4, [r4, #0]
 8014604:	3204      	adds	r2, #4
 8014606:	f841 4b04 	str.w	r4, [r1], #4
 801460a:	e7f7      	b.n	80145fc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801460c:	f003 0303 	and.w	r3, r3, #3
 8014610:	3a01      	subs	r2, #1
 8014612:	440b      	add	r3, r1
 8014614:	428b      	cmp	r3, r1
 8014616:	d90c      	bls.n	8014632 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8014618:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801461c:	f801 0b01 	strb.w	r0, [r1], #1
 8014620:	e7f8      	b.n	8014614 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8014622:	0790      	lsls	r0, r2, #30
 8014624:	d0e7      	beq.n	80145f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014626:	f832 0b02 	ldrh.w	r0, [r2], #2
 801462a:	3b02      	subs	r3, #2
 801462c:	f821 0b02 	strh.w	r0, [r1], #2
 8014630:	e7e1      	b.n	80145f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8014632:	2001      	movs	r0, #1
 8014634:	bd10      	pop	{r4, pc}

08014636 <_ZN8touchgfx3HAL7noTouchEv>:
 8014636:	b510      	push	{r4, lr}
 8014638:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801463c:	4604      	mov	r4, r0
 801463e:	b153      	cbz	r3, 8014656 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014640:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8014644:	2101      	movs	r1, #1
 8014646:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801464a:	301c      	adds	r0, #28
 801464c:	f00f fde6 	bl	802421c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014650:	2300      	movs	r3, #0
 8014652:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8014656:	bd10      	pop	{r4, pc}

08014658 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801465c:	4604      	mov	r4, r0
 801465e:	6980      	ldr	r0, [r0, #24]
 8014660:	b085      	sub	sp, #20
 8014662:	460f      	mov	r7, r1
 8014664:	4690      	mov	r8, r2
 8014666:	4699      	mov	r9, r3
 8014668:	b930      	cbnz	r0, 8014678 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801466a:	4b1c      	ldr	r3, [pc, #112]	; (80146dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 801466c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8014670:	4a1b      	ldr	r2, [pc, #108]	; (80146e0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8014672:	481c      	ldr	r0, [pc, #112]	; (80146e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8014674:	f011 fa80 	bl	8025b78 <__assert_func>
 8014678:	ad04      	add	r5, sp, #16
 801467a:	2600      	movs	r6, #0
 801467c:	f845 6d04 	str.w	r6, [r5, #-4]!
 8014680:	6806      	ldr	r6, [r0, #0]
 8014682:	9501      	str	r5, [sp, #4]
 8014684:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8014688:	9500      	str	r5, [sp, #0]
 801468a:	6835      	ldr	r5, [r6, #0]
 801468c:	47a8      	blx	r5
 801468e:	4d16      	ldr	r5, [pc, #88]	; (80146e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8014690:	4606      	mov	r6, r0
 8014692:	f8a5 9000 	strh.w	r9, [r5]
 8014696:	f7ef fb55 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 801469a:	6803      	ldr	r3, [r0, #0]
 801469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801469e:	4798      	blx	r3
 80146a0:	2801      	cmp	r0, #1
 80146a2:	d012      	beq.n	80146ca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 80146a4:	d306      	bcc.n	80146b4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 80146a6:	280d      	cmp	r0, #13
 80146a8:	d80b      	bhi.n	80146c2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80146aa:	4b10      	ldr	r3, [pc, #64]	; (80146ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80146ac:	f240 1167 	movw	r1, #359	; 0x167
 80146b0:	4a0b      	ldr	r2, [pc, #44]	; (80146e0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 80146b2:	e7de      	b.n	8014672 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80146b4:	882b      	ldrh	r3, [r5, #0]
 80146b6:	fb08 7203 	mla	r2, r8, r3, r7
 80146ba:	9b03      	ldr	r3, [sp, #12]
 80146bc:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80146c0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80146c2:	4630      	mov	r0, r6
 80146c4:	b005      	add	sp, #20
 80146c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146ca:	882a      	ldrh	r2, [r5, #0]
 80146cc:	9b03      	ldr	r3, [sp, #12]
 80146ce:	fb08 7202 	mla	r2, r8, r2, r7
 80146d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80146d6:	1a9a      	subs	r2, r3, r2
 80146d8:	63e2      	str	r2, [r4, #60]	; 0x3c
 80146da:	e7f2      	b.n	80146c2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80146dc:	08028c94 	.word	0x08028c94
 80146e0:	08029023 	.word	0x08029023
 80146e4:	08028cd9 	.word	0x08028cd9
 80146e8:	2400c89e 	.word	0x2400c89e
 80146ec:	08028cff 	.word	0x08028cff

080146f0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80146f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146f2:	b08b      	sub	sp, #44	; 0x2c
 80146f4:	4617      	mov	r7, r2
 80146f6:	4604      	mov	r4, r0
 80146f8:	460e      	mov	r6, r1
 80146fa:	461d      	mov	r5, r3
 80146fc:	f7ef fb22 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 8014700:	6803      	ldr	r3, [r0, #0]
 8014702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014704:	4798      	blx	r3
 8014706:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801470a:	9007      	str	r0, [sp, #28]
 801470c:	4631      	mov	r1, r6
 801470e:	6822      	ldr	r2, [r4, #0]
 8014710:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8014714:	4b0c      	ldr	r3, [pc, #48]	; (8014748 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8014716:	4620      	mov	r0, r4
 8014718:	881b      	ldrh	r3, [r3, #0]
 801471a:	9306      	str	r3, [sp, #24]
 801471c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014720:	9305      	str	r3, [sp, #20]
 8014722:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014726:	9304      	str	r3, [sp, #16]
 8014728:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801472c:	9303      	str	r3, [sp, #12]
 801472e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014732:	9302      	str	r3, [sp, #8]
 8014734:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014738:	e9cd 5300 	strd	r5, r3, [sp]
 801473c:	463b      	mov	r3, r7
 801473e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8014740:	2200      	movs	r2, #0
 8014742:	47a8      	blx	r5
 8014744:	b00b      	add	sp, #44	; 0x2c
 8014746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014748:	2400c89e 	.word	0x2400c89e

0801474c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801474c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014750:	4698      	mov	r8, r3
 8014752:	6803      	ldr	r3, [r0, #0]
 8014754:	b08b      	sub	sp, #44	; 0x2c
 8014756:	4617      	mov	r7, r2
 8014758:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801475a:	460e      	mov	r6, r1
 801475c:	4b13      	ldr	r3, [pc, #76]	; (80147ac <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801475e:	4604      	mov	r4, r0
 8014760:	f8b3 9000 	ldrh.w	r9, [r3]
 8014764:	f7ef faee 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 8014768:	6803      	ldr	r3, [r0, #0]
 801476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801476c:	4798      	blx	r3
 801476e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014772:	2200      	movs	r2, #0
 8014774:	4631      	mov	r1, r6
 8014776:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801477a:	2302      	movs	r3, #2
 801477c:	4620      	mov	r0, r4
 801477e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8014782:	2301      	movs	r3, #1
 8014784:	9305      	str	r3, [sp, #20]
 8014786:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801478a:	9304      	str	r3, [sp, #16]
 801478c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014790:	9303      	str	r3, [sp, #12]
 8014792:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014796:	9302      	str	r3, [sp, #8]
 8014798:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801479c:	e9cd 8300 	strd	r8, r3, [sp]
 80147a0:	463b      	mov	r3, r7
 80147a2:	47a8      	blx	r5
 80147a4:	b00b      	add	sp, #44	; 0x2c
 80147a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147aa:	bf00      	nop
 80147ac:	2400c89e 	.word	0x2400c89e

080147b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80147b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147b4:	4698      	mov	r8, r3
 80147b6:	6803      	ldr	r3, [r0, #0]
 80147b8:	b087      	sub	sp, #28
 80147ba:	460e      	mov	r6, r1
 80147bc:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80147be:	4617      	mov	r7, r2
 80147c0:	4b0f      	ldr	r3, [pc, #60]	; (8014800 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80147c2:	4604      	mov	r4, r0
 80147c4:	f8b3 9000 	ldrh.w	r9, [r3]
 80147c8:	f7ef fabc 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 80147cc:	6803      	ldr	r3, [r0, #0]
 80147ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147d0:	4798      	blx	r3
 80147d2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80147d6:	463a      	mov	r2, r7
 80147d8:	4631      	mov	r1, r6
 80147da:	f8cd 900c 	str.w	r9, [sp, #12]
 80147de:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80147e2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80147e6:	4620      	mov	r0, r4
 80147e8:	9302      	str	r3, [sp, #8]
 80147ea:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80147ee:	9301      	str	r3, [sp, #4]
 80147f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80147f4:	9300      	str	r3, [sp, #0]
 80147f6:	4643      	mov	r3, r8
 80147f8:	47a8      	blx	r5
 80147fa:	b007      	add	sp, #28
 80147fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014800:	2400c89e 	.word	0x2400c89e

08014804 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014808:	4604      	mov	r4, r0
 801480a:	b08f      	sub	sp, #60	; 0x3c
 801480c:	4610      	mov	r0, r2
 801480e:	460d      	mov	r5, r1
 8014810:	4691      	mov	r9, r2
 8014812:	461e      	mov	r6, r3
 8014814:	f007 fa16 	bl	801bc44 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014818:	2800      	cmp	r0, #0
 801481a:	f000 809c 	beq.w	8014956 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 801481e:	6823      	ldr	r3, [r4, #0]
 8014820:	4620      	mov	r0, r4
 8014822:	f8df b194 	ldr.w	fp, [pc, #404]	; 80149b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8014826:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801482c:	4798      	blx	r3
 801482e:	6823      	ldr	r3, [r4, #0]
 8014830:	4620      	mov	r0, r4
 8014832:	f8df a188 	ldr.w	sl, [pc, #392]	; 80149bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8014836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014838:	4798      	blx	r3
 801483a:	f8bb 3000 	ldrh.w	r3, [fp]
 801483e:	4f5b      	ldr	r7, [pc, #364]	; (80149ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8014840:	9301      	str	r3, [sp, #4]
 8014842:	f8ba 3000 	ldrh.w	r3, [sl]
 8014846:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801484a:	4640      	mov	r0, r8
 801484c:	9302      	str	r3, [sp, #8]
 801484e:	883b      	ldrh	r3, [r7, #0]
 8014850:	9303      	str	r3, [sp, #12]
 8014852:	4b57      	ldr	r3, [pc, #348]	; (80149b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014854:	881a      	ldrh	r2, [r3, #0]
 8014856:	9305      	str	r3, [sp, #20]
 8014858:	9204      	str	r2, [sp, #16]
 801485a:	f007 faad 	bl	801bdb8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801485e:	8038      	strh	r0, [r7, #0]
 8014860:	4640      	mov	r0, r8
 8014862:	f007 fae3 	bl	801be2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014866:	9b05      	ldr	r3, [sp, #20]
 8014868:	8018      	strh	r0, [r3, #0]
 801486a:	4b52      	ldr	r3, [pc, #328]	; (80149b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801486c:	781b      	ldrb	r3, [r3, #0]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d174      	bne.n	801495c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8014872:	883b      	ldrh	r3, [r7, #0]
 8014874:	f8aa 0000 	strh.w	r0, [sl]
 8014878:	f8ab 3000 	strh.w	r3, [fp]
 801487c:	4648      	mov	r0, r9
 801487e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8014882:	f007 f9df 	bl	801bc44 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014886:	2200      	movs	r2, #0
 8014888:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801488c:	4611      	mov	r1, r2
 801488e:	4628      	mov	r0, r5
 8014890:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8014894:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8014898:	f7ef f95d 	bl	8003b56 <_ZN8touchgfx8Drawable5setXYEss>
 801489c:	2301      	movs	r3, #1
 801489e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80148a2:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80148a6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	dd5c      	ble.n	8014968 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 80148ae:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	dd58      	ble.n	8014968 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 80148b6:	462a      	mov	r2, r5
 80148b8:	ab0a      	add	r3, sp, #40	; 0x28
 80148ba:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80148be:	6851      	ldr	r1, [r2, #4]
 80148c0:	c303      	stmia	r3!, {r0, r1}
 80148c2:	4631      	mov	r1, r6
 80148c4:	a80a      	add	r0, sp, #40	; 0x28
 80148c6:	f7ff fbe7 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 80148ca:	4b38      	ldr	r3, [pc, #224]	; (80149ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 80148cc:	2100      	movs	r1, #0
 80148ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80148d2:	4b37      	ldr	r3, [pc, #220]	; (80149b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80148d4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80148d8:	aa0a      	add	r2, sp, #40	; 0x28
 80148da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80148de:	910c      	str	r1, [sp, #48]	; 0x30
 80148e0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80148e4:	ab08      	add	r3, sp, #32
 80148e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80148ee:	4618      	mov	r0, r3
 80148f0:	a90c      	add	r1, sp, #48	; 0x30
 80148f2:	f7ff fbd1 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 80148f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d13c      	bne.n	8014976 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 80148fc:	2000      	movs	r0, #0
 80148fe:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8014902:	2600      	movs	r6, #0
 8014904:	696b      	ldr	r3, [r5, #20]
 8014906:	a908      	add	r1, sp, #32
 8014908:	682a      	ldr	r2, [r5, #0]
 801490a:	4628      	mov	r0, r5
 801490c:	9305      	str	r3, [sp, #20]
 801490e:	616e      	str	r6, [r5, #20]
 8014910:	6892      	ldr	r2, [r2, #8]
 8014912:	4790      	blx	r2
 8014914:	9b05      	ldr	r3, [sp, #20]
 8014916:	4652      	mov	r2, sl
 8014918:	4649      	mov	r1, r9
 801491a:	616b      	str	r3, [r5, #20]
 801491c:	4628      	mov	r0, r5
 801491e:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8014922:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8014926:	f7ef f916 	bl	8003b56 <_ZN8touchgfx8Drawable5setXYEss>
 801492a:	9a01      	ldr	r2, [sp, #4]
 801492c:	4b22      	ldr	r3, [pc, #136]	; (80149b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801492e:	4620      	mov	r0, r4
 8014930:	801a      	strh	r2, [r3, #0]
 8014932:	9a02      	ldr	r2, [sp, #8]
 8014934:	4b21      	ldr	r3, [pc, #132]	; (80149bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8014936:	801a      	strh	r2, [r3, #0]
 8014938:	9a03      	ldr	r2, [sp, #12]
 801493a:	4b1c      	ldr	r3, [pc, #112]	; (80149ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 801493c:	801a      	strh	r2, [r3, #0]
 801493e:	4b1c      	ldr	r3, [pc, #112]	; (80149b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8014940:	9a04      	ldr	r2, [sp, #16]
 8014942:	801a      	strh	r2, [r3, #0]
 8014944:	6823      	ldr	r3, [r4, #0]
 8014946:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801494c:	4798      	blx	r3
 801494e:	6823      	ldr	r3, [r4, #0]
 8014950:	4620      	mov	r0, r4
 8014952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014954:	4798      	blx	r3
 8014956:	b00f      	add	sp, #60	; 0x3c
 8014958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801495c:	883b      	ldrh	r3, [r7, #0]
 801495e:	f8ab 0000 	strh.w	r0, [fp]
 8014962:	f8aa 3000 	strh.w	r3, [sl]
 8014966:	e789      	b.n	801487c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8014968:	462a      	mov	r2, r5
 801496a:	ab0a      	add	r3, sp, #40	; 0x28
 801496c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8014970:	6851      	ldr	r1, [r2, #4]
 8014972:	c303      	stmia	r3!, {r0, r1}
 8014974:	e7a9      	b.n	80148ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8014976:	a807      	add	r0, sp, #28
 8014978:	f007 fb76 	bl	801c068 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801497c:	4606      	mov	r6, r0
 801497e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8014980:	6803      	ldr	r3, [r0, #0]
 8014982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014984:	4798      	blx	r3
 8014986:	4286      	cmp	r6, r0
 8014988:	d1b8      	bne.n	80148fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 801498a:	f7ef f9db 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 801498e:	6803      	ldr	r3, [r0, #0]
 8014990:	4606      	mov	r6, r0
 8014992:	a807      	add	r0, sp, #28
 8014994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014996:	9305      	str	r3, [sp, #20]
 8014998:	f007 fb66 	bl	801c068 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801499c:	9b05      	ldr	r3, [sp, #20]
 801499e:	4601      	mov	r1, r0
 80149a0:	4630      	mov	r0, r6
 80149a2:	4798      	blx	r3
 80149a4:	f080 0001 	eor.w	r0, r0, #1
 80149a8:	b2c0      	uxtb	r0, r0
 80149aa:	e7a8      	b.n	80148fe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80149ac:	2400c898 	.word	0x2400c898
 80149b0:	2400c89a 	.word	0x2400c89a
 80149b4:	2400c89c 	.word	0x2400c89c
 80149b8:	2400c89e 	.word	0x2400c89e
 80149bc:	2400c8a0 	.word	0x2400c8a0

080149c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80149c0:	4b07      	ldr	r3, [pc, #28]	; (80149e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80149c2:	b510      	push	{r4, lr}
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	4604      	mov	r4, r0
 80149c8:	b13b      	cbz	r3, 80149da <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80149ca:	6803      	ldr	r3, [r0, #0]
 80149cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149ce:	4798      	blx	r3
 80149d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80149d2:	4283      	cmp	r3, r0
 80149d4:	d101      	bne.n	80149da <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80149d6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80149d8:	bd10      	pop	{r4, pc}
 80149da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80149dc:	e7fc      	b.n	80149d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80149de:	bf00      	nop
 80149e0:	2400c8a2 	.word	0x2400c8a2

080149e4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80149e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149e8:	b088      	sub	sp, #32
 80149ea:	4692      	mov	sl, r2
 80149ec:	461d      	mov	r5, r3
 80149ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149f2:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 80149f6:	2400      	movs	r4, #0
 80149f8:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 80149fc:	4606      	mov	r6, r0
 80149fe:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8014a02:	fb09 a505 	mla	r5, r9, r5, sl
 8014a06:	9403      	str	r4, [sp, #12]
 8014a08:	f8ad 8014 	strh.w	r8, [sp, #20]
 8014a0c:	f8ad 7016 	strh.w	r7, [sp, #22]
 8014a10:	f88d 401c 	strb.w	r4, [sp, #28]
 8014a14:	e9cd 3100 	strd	r3, r1, [sp]
 8014a18:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014a1c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014a20:	f7ff ffce 	bl	80149c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014a24:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014a28:	f8ad 901a 	strh.w	r9, [sp, #26]
 8014a2c:	f88d 401e 	strb.w	r4, [sp, #30]
 8014a30:	9504      	str	r5, [sp, #16]
 8014a32:	f88d 401d 	strb.w	r4, [sp, #29]
 8014a36:	f88d 401f 	strb.w	r4, [sp, #31]
 8014a3a:	f1b8 0f00 	cmp.w	r8, #0
 8014a3e:	d000      	beq.n	8014a42 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8014a40:	b937      	cbnz	r7, 8014a50 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8014a42:	4b0d      	ldr	r3, [pc, #52]	; (8014a78 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8014a44:	f240 210b 	movw	r1, #523	; 0x20b
 8014a48:	4a0c      	ldr	r2, [pc, #48]	; (8014a7c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8014a4a:	480d      	ldr	r0, [pc, #52]	; (8014a80 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8014a4c:	f011 f894 	bl	8025b78 <__assert_func>
 8014a50:	6833      	ldr	r3, [r6, #0]
 8014a52:	4630      	mov	r0, r6
 8014a54:	9c00      	ldr	r4, [sp, #0]
 8014a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a58:	4798      	blx	r3
 8014a5a:	4220      	tst	r0, r4
 8014a5c:	d104      	bne.n	8014a68 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8014a5e:	4b09      	ldr	r3, [pc, #36]	; (8014a84 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8014a60:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8014a64:	4a05      	ldr	r2, [pc, #20]	; (8014a7c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8014a66:	e7f0      	b.n	8014a4a <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8014a68:	6870      	ldr	r0, [r6, #4]
 8014a6a:	4669      	mov	r1, sp
 8014a6c:	6803      	ldr	r3, [r0, #0]
 8014a6e:	685b      	ldr	r3, [r3, #4]
 8014a70:	4798      	blx	r3
 8014a72:	b008      	add	sp, #32
 8014a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a78:	08028b27 	.word	0x08028b27
 8014a7c:	08028e58 	.word	0x08028e58
 8014a80:	08028cd9 	.word	0x08028cd9
 8014a84:	08028b5f 	.word	0x08028b5f

08014a88 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8014a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a8c:	b089      	sub	sp, #36	; 0x24
 8014a8e:	4693      	mov	fp, r2
 8014a90:	461d      	mov	r5, r3
 8014a92:	2400      	movs	r4, #0
 8014a94:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8014a98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014a9c:	468a      	mov	sl, r1
 8014a9e:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8014aa2:	fb09 b505 	mla	r5, r9, r5, fp
 8014aa6:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8014aaa:	4606      	mov	r6, r0
 8014aac:	9403      	str	r4, [sp, #12]
 8014aae:	e9cd 3400 	strd	r3, r4, [sp]
 8014ab2:	f7ff ff85 	bl	80149c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014ab6:	f8ad 8014 	strh.w	r8, [sp, #20]
 8014aba:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014abe:	f8ad 7016 	strh.w	r7, [sp, #22]
 8014ac2:	f8ad 4018 	strh.w	r4, [sp, #24]
 8014ac6:	9504      	str	r5, [sp, #16]
 8014ac8:	f8ad 901a 	strh.w	r9, [sp, #26]
 8014acc:	f8cd a00c 	str.w	sl, [sp, #12]
 8014ad0:	f8ad 401c 	strh.w	r4, [sp, #28]
 8014ad4:	f88d 401e 	strb.w	r4, [sp, #30]
 8014ad8:	f88d 401f 	strb.w	r4, [sp, #31]
 8014adc:	f1b8 0f00 	cmp.w	r8, #0
 8014ae0:	d000      	beq.n	8014ae4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8014ae2:	b937      	cbnz	r7, 8014af2 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8014ae4:	4b0d      	ldr	r3, [pc, #52]	; (8014b1c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8014ae6:	f240 2121 	movw	r1, #545	; 0x221
 8014aea:	4a0d      	ldr	r2, [pc, #52]	; (8014b20 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8014aec:	480d      	ldr	r0, [pc, #52]	; (8014b24 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8014aee:	f011 f843 	bl	8025b78 <__assert_func>
 8014af2:	6833      	ldr	r3, [r6, #0]
 8014af4:	4630      	mov	r0, r6
 8014af6:	9c00      	ldr	r4, [sp, #0]
 8014af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014afa:	4798      	blx	r3
 8014afc:	4220      	tst	r0, r4
 8014afe:	d104      	bne.n	8014b0a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8014b00:	4b09      	ldr	r3, [pc, #36]	; (8014b28 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8014b02:	f240 2122 	movw	r1, #546	; 0x222
 8014b06:	4a06      	ldr	r2, [pc, #24]	; (8014b20 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8014b08:	e7f0      	b.n	8014aec <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8014b0a:	6870      	ldr	r0, [r6, #4]
 8014b0c:	4669      	mov	r1, sp
 8014b0e:	6803      	ldr	r3, [r0, #0]
 8014b10:	685b      	ldr	r3, [r3, #4]
 8014b12:	4798      	blx	r3
 8014b14:	b009      	add	sp, #36	; 0x24
 8014b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b1a:	bf00      	nop
 8014b1c:	08028ba4 	.word	0x08028ba4
 8014b20:	08028ece 	.word	0x08028ece
 8014b24:	08028cd9 	.word	0x08028cd9
 8014b28:	08028bdc 	.word	0x08028bdc

08014b2c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8014b2c:	b508      	push	{r3, lr}
 8014b2e:	290d      	cmp	r1, #13
 8014b30:	d817      	bhi.n	8014b62 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8014b32:	e8df f001 	tbb	[pc, r1]
 8014b36:	090b      	.short	0x090b
 8014b38:	0d0d0d07 	.word	0x0d0d0d07
 8014b3c:	1414140d 	.word	0x1414140d
 8014b40:	0d0d1414 	.word	0x0d0d1414
 8014b44:	2020      	movs	r0, #32
 8014b46:	bd08      	pop	{r3, pc}
 8014b48:	2018      	movs	r0, #24
 8014b4a:	e7fc      	b.n	8014b46 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014b4c:	2010      	movs	r0, #16
 8014b4e:	e7fa      	b.n	8014b46 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014b50:	4b05      	ldr	r3, [pc, #20]	; (8014b68 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8014b52:	f240 2182 	movw	r1, #642	; 0x282
 8014b56:	4a05      	ldr	r2, [pc, #20]	; (8014b6c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8014b58:	4805      	ldr	r0, [pc, #20]	; (8014b70 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8014b5a:	f011 f80d 	bl	8025b78 <__assert_func>
 8014b5e:	2008      	movs	r0, #8
 8014b60:	e7f1      	b.n	8014b46 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014b62:	2000      	movs	r0, #0
 8014b64:	e7ef      	b.n	8014b46 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014b66:	bf00      	nop
 8014b68:	08028d55 	.word	0x08028d55
 8014b6c:	080291f9 	.word	0x080291f9
 8014b70:	08028cd9 	.word	0x08028cd9

08014b74 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8014b74:	b570      	push	{r4, r5, r6, lr}
 8014b76:	460d      	mov	r5, r1
 8014b78:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8014b7c:	4616      	mov	r6, r2
 8014b7e:	461c      	mov	r4, r3
 8014b80:	f7ff ffd4 	bl	8014b2c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8014b84:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014b88:	10c0      	asrs	r0, r0, #3
 8014b8a:	fb06 5101 	mla	r1, r6, r1, r5
 8014b8e:	fb00 4001 	mla	r0, r0, r1, r4
 8014b92:	bd70      	pop	{r4, r5, r6, pc}

08014b94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8014b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b98:	b08a      	sub	sp, #40	; 0x28
 8014b9a:	f04f 0c00 	mov.w	ip, #0
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	469a      	mov	sl, r3
 8014ba2:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8014ba6:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8014baa:	2d0b      	cmp	r5, #11
 8014bac:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8014bb0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8014bb4:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8014bb8:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8014bbc:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8014bc0:	f8cd c014 	str.w	ip, [sp, #20]
 8014bc4:	d12d      	bne.n	8014c22 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8014bc6:	2080      	movs	r0, #128	; 0x80
 8014bc8:	9204      	str	r2, [sp, #16]
 8014bca:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8014bce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014bd2:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014bd6:	f8ad 701c 	strh.w	r7, [sp, #28]
 8014bda:	f8ad 601e 	strh.w	r6, [sp, #30]
 8014bde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014be2:	4620      	mov	r0, r4
 8014be4:	f7ff feec 	bl	80149c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014be8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8014bec:	4603      	mov	r3, r0
 8014bee:	4651      	mov	r1, sl
 8014bf0:	4620      	mov	r0, r4
 8014bf2:	e9cd 9800 	strd	r9, r8, [sp]
 8014bf6:	f7ff ffbd 	bl	8014b74 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014bfa:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8014bfe:	9006      	str	r0, [sp, #24]
 8014c00:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8014c04:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8014c08:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8014c0c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8014c10:	b107      	cbz	r7, 8014c14 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8014c12:	b9d6      	cbnz	r6, 8014c4a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8014c14:	4b17      	ldr	r3, [pc, #92]	; (8014c74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 8014c16:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8014c1a:	4a17      	ldr	r2, [pc, #92]	; (8014c78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8014c1c:	4817      	ldr	r0, [pc, #92]	; (8014c7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8014c1e:	f010 ffab 	bl	8025b78 <__assert_func>
 8014c22:	2d02      	cmp	r5, #2
 8014c24:	d108      	bne.n	8014c38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 8014c26:	2bff      	cmp	r3, #255	; 0xff
 8014c28:	d104      	bne.n	8014c34 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 8014c2a:	2800      	cmp	r0, #0
 8014c2c:	bf14      	ite	ne
 8014c2e:	2040      	movne	r0, #64	; 0x40
 8014c30:	2020      	moveq	r0, #32
 8014c32:	e7c9      	b.n	8014bc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8014c34:	2040      	movs	r0, #64	; 0x40
 8014c36:	e7c7      	b.n	8014bc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8014c38:	2bff      	cmp	r3, #255	; 0xff
 8014c3a:	d104      	bne.n	8014c46 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 8014c3c:	2800      	cmp	r0, #0
 8014c3e:	bf14      	ite	ne
 8014c40:	2004      	movne	r0, #4
 8014c42:	2001      	moveq	r0, #1
 8014c44:	e7c0      	b.n	8014bc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8014c46:	2004      	movs	r0, #4
 8014c48:	e7be      	b.n	8014bc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8014c4a:	6823      	ldr	r3, [r4, #0]
 8014c4c:	4620      	mov	r0, r4
 8014c4e:	9d02      	ldr	r5, [sp, #8]
 8014c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c52:	4798      	blx	r3
 8014c54:	4228      	tst	r0, r5
 8014c56:	d104      	bne.n	8014c62 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8014c58:	4b09      	ldr	r3, [pc, #36]	; (8014c80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8014c5a:	f240 11d5 	movw	r1, #469	; 0x1d5
 8014c5e:	4a06      	ldr	r2, [pc, #24]	; (8014c78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8014c60:	e7dc      	b.n	8014c1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8014c62:	6860      	ldr	r0, [r4, #4]
 8014c64:	a902      	add	r1, sp, #8
 8014c66:	6803      	ldr	r3, [r0, #0]
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	4798      	blx	r3
 8014c6c:	b00a      	add	sp, #40	; 0x28
 8014c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c72:	bf00      	nop
 8014c74:	08028b27 	.word	0x08028b27
 8014c78:	08029087 	.word	0x08029087
 8014c7c:	08028cd9 	.word	0x08028cd9
 8014c80:	08028b5f 	.word	0x08028b5f

08014c84 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8014c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c88:	b08b      	sub	sp, #44	; 0x2c
 8014c8a:	469b      	mov	fp, r3
 8014c8c:	4604      	mov	r4, r0
 8014c8e:	4692      	mov	sl, r2
 8014c90:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8014c94:	2600      	movs	r6, #0
 8014c96:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8014c9a:	4689      	mov	r9, r1
 8014c9c:	2fff      	cmp	r7, #255	; 0xff
 8014c9e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8014ca2:	9605      	str	r6, [sp, #20]
 8014ca4:	bf14      	ite	ne
 8014ca6:	2308      	movne	r3, #8
 8014ca8:	2302      	moveq	r3, #2
 8014caa:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8014cae:	f7ff fe87 	bl	80149c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014cb2:	465a      	mov	r2, fp
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	4651      	mov	r1, sl
 8014cb8:	4620      	mov	r0, r4
 8014cba:	e9cd 8500 	strd	r8, r5, [sp]
 8014cbe:	f7ff ff59 	bl	8014b74 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014cc2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014cc6:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8014cca:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014cce:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8014cd2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8014cd6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014cda:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8014cde:	9d02      	ldr	r5, [sp, #8]
 8014ce0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8014ce4:	6823      	ldr	r3, [r4, #0]
 8014ce6:	9006      	str	r0, [sp, #24]
 8014ce8:	4620      	mov	r0, r4
 8014cea:	f8ad 6020 	strh.w	r6, [sp, #32]
 8014cee:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8014cf2:	f8cd 9014 	str.w	r9, [sp, #20]
 8014cf6:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8014cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cfc:	4798      	blx	r3
 8014cfe:	4228      	tst	r0, r5
 8014d00:	d106      	bne.n	8014d10 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8014d02:	4b07      	ldr	r3, [pc, #28]	; (8014d20 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8014d04:	f240 2137 	movw	r1, #567	; 0x237
 8014d08:	4a06      	ldr	r2, [pc, #24]	; (8014d24 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8014d0a:	4807      	ldr	r0, [pc, #28]	; (8014d28 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8014d0c:	f010 ff34 	bl	8025b78 <__assert_func>
 8014d10:	6860      	ldr	r0, [r4, #4]
 8014d12:	a902      	add	r1, sp, #8
 8014d14:	6803      	ldr	r3, [r0, #0]
 8014d16:	685b      	ldr	r3, [r3, #4]
 8014d18:	4798      	blx	r3
 8014d1a:	b00b      	add	sp, #44	; 0x2c
 8014d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d20:	08028b5f 	.word	0x08028b5f
 8014d24:	0802915e 	.word	0x0802915e
 8014d28:	08028cd9 	.word	0x08028cd9

08014d2c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014d2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014d30:	461f      	mov	r7, r3
 8014d32:	4b0b      	ldr	r3, [pc, #44]	; (8014d60 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014d34:	460d      	mov	r5, r1
 8014d36:	4616      	mov	r6, r2
 8014d38:	f8b3 8000 	ldrh.w	r8, [r3]
 8014d3c:	4604      	mov	r4, r0
 8014d3e:	f7ef f801 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 8014d42:	6803      	ldr	r3, [r0, #0]
 8014d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d46:	4798      	blx	r3
 8014d48:	463b      	mov	r3, r7
 8014d4a:	4632      	mov	r2, r6
 8014d4c:	4629      	mov	r1, r5
 8014d4e:	e9cd 8000 	strd	r8, r0, [sp]
 8014d52:	4620      	mov	r0, r4
 8014d54:	f7ff ff0e 	bl	8014b74 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014d58:	b002      	add	sp, #8
 8014d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d5e:	bf00      	nop
 8014d60:	2400c89e 	.word	0x2400c89e

08014d64 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8014d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d68:	4698      	mov	r8, r3
 8014d6a:	b088      	sub	sp, #32
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	4617      	mov	r7, r2
 8014d70:	4604      	mov	r4, r0
 8014d72:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8014d76:	9303      	str	r3, [sp, #12]
 8014d78:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014d7c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8014d80:	f8ad 6014 	strh.w	r6, [sp, #20]
 8014d84:	f8ad 5016 	strh.w	r5, [sp, #22]
 8014d88:	e9cd 3100 	strd	r3, r1, [sp]
 8014d8c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014d90:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014d94:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8014d98:	f88d 301c 	strb.w	r3, [sp, #28]
 8014d9c:	f7ff fe10 	bl	80149c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014da0:	4642      	mov	r2, r8
 8014da2:	4603      	mov	r3, r0
 8014da4:	4639      	mov	r1, r7
 8014da6:	4620      	mov	r0, r4
 8014da8:	f7ff ffc0 	bl	8014d2c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014dac:	4b18      	ldr	r3, [pc, #96]	; (8014e10 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8014dae:	9004      	str	r0, [sp, #16]
 8014db0:	881b      	ldrh	r3, [r3, #0]
 8014db2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014db6:	f7ee ffc5 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 8014dba:	6803      	ldr	r3, [r0, #0]
 8014dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dbe:	4798      	blx	r3
 8014dc0:	f88d 001e 	strb.w	r0, [sp, #30]
 8014dc4:	f88d 001d 	strb.w	r0, [sp, #29]
 8014dc8:	b106      	cbz	r6, 8014dcc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8014dca:	b935      	cbnz	r5, 8014dda <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8014dcc:	4b11      	ldr	r3, [pc, #68]	; (8014e14 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8014dce:	f240 11f1 	movw	r1, #497	; 0x1f1
 8014dd2:	4a11      	ldr	r2, [pc, #68]	; (8014e18 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8014dd4:	4811      	ldr	r0, [pc, #68]	; (8014e1c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8014dd6:	f010 fecf 	bl	8025b78 <__assert_func>
 8014dda:	6823      	ldr	r3, [r4, #0]
 8014ddc:	4620      	mov	r0, r4
 8014dde:	9d00      	ldr	r5, [sp, #0]
 8014de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014de2:	4798      	blx	r3
 8014de4:	4228      	tst	r0, r5
 8014de6:	d104      	bne.n	8014df2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 8014de8:	4b0d      	ldr	r3, [pc, #52]	; (8014e20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 8014dea:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8014dee:	4a0a      	ldr	r2, [pc, #40]	; (8014e18 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8014df0:	e7f0      	b.n	8014dd4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8014df2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014df4:	4669      	mov	r1, sp
 8014df6:	6860      	ldr	r0, [r4, #4]
 8014df8:	9303      	str	r3, [sp, #12]
 8014dfa:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014dfe:	f88d 301f 	strb.w	r3, [sp, #31]
 8014e02:	6803      	ldr	r3, [r0, #0]
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	4798      	blx	r3
 8014e08:	b008      	add	sp, #32
 8014e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e0e:	bf00      	nop
 8014e10:	2400c89e 	.word	0x2400c89e
 8014e14:	08028b27 	.word	0x08028b27
 8014e18:	08028f33 	.word	0x08028f33
 8014e1c:	08028cd9 	.word	0x08028cd9
 8014e20:	08028b5f 	.word	0x08028b5f

08014e24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8014e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e26:	b08b      	sub	sp, #44	; 0x2c
 8014e28:	4604      	mov	r4, r0
 8014e2a:	466b      	mov	r3, sp
 8014e2c:	e883 0006 	stmia.w	r3, {r1, r2}
 8014e30:	4b20      	ldr	r3, [pc, #128]	; (8014eb4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	b933      	cbnz	r3, 8014e44 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8014e36:	4b20      	ldr	r3, [pc, #128]	; (8014eb8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8014e38:	f44f 7112 	mov.w	r1, #584	; 0x248
 8014e3c:	4a1f      	ldr	r2, [pc, #124]	; (8014ebc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8014e3e:	4820      	ldr	r0, [pc, #128]	; (8014ec0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8014e40:	f010 fe9a 	bl	8025b78 <__assert_func>
 8014e44:	2301      	movs	r3, #1
 8014e46:	2500      	movs	r5, #0
 8014e48:	f8bd 6000 	ldrh.w	r6, [sp]
 8014e4c:	9302      	str	r3, [sp, #8]
 8014e4e:	6803      	ldr	r3, [r0, #0]
 8014e50:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8014e54:	9505      	str	r5, [sp, #20]
 8014e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e58:	4798      	blx	r3
 8014e5a:	463a      	mov	r2, r7
 8014e5c:	4631      	mov	r1, r6
 8014e5e:	4603      	mov	r3, r0
 8014e60:	4620      	mov	r0, r4
 8014e62:	f7ff ff63 	bl	8014d2c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014e66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014e68:	9003      	str	r0, [sp, #12]
 8014e6a:	9306      	str	r3, [sp, #24]
 8014e6c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014e70:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014e74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014e78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014e7c:	4b11      	ldr	r3, [pc, #68]	; (8014ec4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8014e7e:	881b      	ldrh	r3, [r3, #0]
 8014e80:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014e84:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014e88:	f7ee ff5c 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 8014e8c:	6803      	ldr	r3, [r0, #0]
 8014e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e90:	4798      	blx	r3
 8014e92:	23ff      	movs	r3, #255	; 0xff
 8014e94:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8014e98:	a902      	add	r1, sp, #8
 8014e9a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8014e9e:	6860      	ldr	r0, [r4, #4]
 8014ea0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014ea4:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 8014ea8:	6803      	ldr	r3, [r0, #0]
 8014eaa:	685b      	ldr	r3, [r3, #4]
 8014eac:	4798      	blx	r3
 8014eae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014eb0:	b00b      	add	sp, #44	; 0x2c
 8014eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014eb4:	2400c8a3 	.word	0x2400c8a3
 8014eb8:	08028c26 	.word	0x08028c26
 8014ebc:	08028fdd 	.word	0x08028fdd
 8014ec0:	08028cd9 	.word	0x08028cd9
 8014ec4:	2400c89e 	.word	0x2400c89e

08014ec8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8014ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ecc:	b08a      	sub	sp, #40	; 0x28
 8014ece:	2600      	movs	r6, #0
 8014ed0:	4604      	mov	r4, r0
 8014ed2:	466d      	mov	r5, sp
 8014ed4:	9605      	str	r6, [sp, #20]
 8014ed6:	e885 0006 	stmia.w	r5, {r1, r2}
 8014eda:	461d      	mov	r5, r3
 8014edc:	2301      	movs	r3, #1
 8014ede:	f8bd 7000 	ldrh.w	r7, [sp]
 8014ee2:	9302      	str	r3, [sp, #8]
 8014ee4:	6803      	ldr	r3, [r0, #0]
 8014ee6:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8014eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014eec:	4798      	blx	r3
 8014eee:	4642      	mov	r2, r8
 8014ef0:	4639      	mov	r1, r7
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	4620      	mov	r0, r4
 8014ef6:	f7ff ff19 	bl	8014d2c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014efa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014efe:	9003      	str	r0, [sp, #12]
 8014f00:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014f04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014f08:	9506      	str	r5, [sp, #24]
 8014f0a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014f0e:	4b0f      	ldr	r3, [pc, #60]	; (8014f4c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 8014f10:	881b      	ldrh	r3, [r3, #0]
 8014f12:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014f16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014f18:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8014f1c:	f7ee ff12 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 8014f20:	6803      	ldr	r3, [r0, #0]
 8014f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f24:	4798      	blx	r3
 8014f26:	23ff      	movs	r3, #255	; 0xff
 8014f28:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8014f2c:	a902      	add	r1, sp, #8
 8014f2e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8014f32:	6860      	ldr	r0, [r4, #4]
 8014f34:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014f38:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8014f3c:	6803      	ldr	r3, [r0, #0]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	4798      	blx	r3
 8014f42:	4628      	mov	r0, r5
 8014f44:	b00a      	add	sp, #40	; 0x28
 8014f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f4a:	bf00      	nop
 8014f4c:	2400c89e 	.word	0x2400c89e

08014f50 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014f50:	b570      	push	{r4, r5, r6, lr}
 8014f52:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8014f56:	4604      	mov	r4, r0
 8014f58:	b19b      	cbz	r3, 8014f82 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8014f5a:	2002      	movs	r0, #2
 8014f5c:	f7eb fb68 	bl	8000630 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014f60:	2300      	movs	r3, #0
 8014f62:	4620      	mov	r0, r4
 8014f64:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014f68:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8014f6c:	6823      	ldr	r3, [r4, #0]
 8014f6e:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8014f72:	f7ff fd25 	bl	80149c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014f76:	4601      	mov	r1, r0
 8014f78:	4620      	mov	r0, r4
 8014f7a:	462b      	mov	r3, r5
 8014f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f80:	4718      	bx	r3
 8014f82:	bd70      	pop	{r4, r5, r6, pc}

08014f84 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8014f84:	b538      	push	{r3, r4, r5, lr}
 8014f86:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8014f8a:	4604      	mov	r4, r0
 8014f8c:	460d      	mov	r5, r1
 8014f8e:	428a      	cmp	r2, r1
 8014f90:	d008      	beq.n	8014fa4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8014f92:	2a01      	cmp	r2, #1
 8014f94:	6803      	ldr	r3, [r0, #0]
 8014f96:	d106      	bne.n	8014fa6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8014f98:	b929      	cbnz	r1, 8014fa6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8014f9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8014f9e:	4798      	blx	r3
 8014fa0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8014fa4:	bd38      	pop	{r3, r4, r5, pc}
 8014fa6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8014faa:	4620      	mov	r0, r4
 8014fac:	e7f7      	b.n	8014f9e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08014fb0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8014fb0:	4b0d      	ldr	r3, [pc, #52]	; (8014fe8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8014fb2:	b510      	push	{r4, lr}
 8014fb4:	781b      	ldrb	r3, [r3, #0]
 8014fb6:	4604      	mov	r4, r0
 8014fb8:	b95b      	cbnz	r3, 8014fd2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014fba:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8014fbe:	2b02      	cmp	r3, #2
 8014fc0:	d007      	beq.n	8014fd2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014fc2:	6840      	ldr	r0, [r0, #4]
 8014fc4:	f000 f936 	bl	8015234 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8014fc8:	b118      	cbz	r0, 8014fd2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8014fca:	6862      	ldr	r2, [r4, #4]
 8014fcc:	7a53      	ldrb	r3, [r2, #9]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d0fc      	beq.n	8014fcc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8014fd2:	f7eb fe1d 	bl	8000c10 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014fd6:	4620      	mov	r0, r4
 8014fd8:	2100      	movs	r1, #0
 8014fda:	f7ff ffd3 	bl	8014f84 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8014fde:	4620      	mov	r0, r4
 8014fe0:	f7ff fcee 	bl	80149c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014fe4:	bd10      	pop	{r4, pc}
 8014fe6:	bf00      	nop
 8014fe8:	2400c8a2 	.word	0x2400c8a2

08014fec <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8014fec:	4770      	bx	lr

08014fee <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8014fee:	2000      	movs	r0, #0
 8014ff0:	4770      	bx	lr

08014ff2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8014ff2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014ff6:	1a13      	subs	r3, r2, r0
 8014ff8:	4258      	negs	r0, r3
 8014ffa:	4158      	adcs	r0, r3
 8014ffc:	4770      	bx	lr

08014ffe <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8014ffe:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015002:	1a9b      	subs	r3, r3, r2
 8015004:	2b00      	cmp	r3, #0
 8015006:	bfdc      	itt	le
 8015008:	6882      	ldrle	r2, [r0, #8]
 801500a:	189b      	addle	r3, r3, r2
 801500c:	2b01      	cmp	r3, #1
 801500e:	bfcc      	ite	gt
 8015010:	2000      	movgt	r0, #0
 8015012:	2001      	movle	r0, #1
 8015014:	4770      	bx	lr

08015016 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015016:	6902      	ldr	r2, [r0, #16]
 8015018:	6840      	ldr	r0, [r0, #4]
 801501a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801501e:	4770      	bx	lr

08015020 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015020:	6803      	ldr	r3, [r0, #0]
 8015022:	691b      	ldr	r3, [r3, #16]
 8015024:	4718      	bx	r3

08015026 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015026:	4770      	bx	lr

08015028 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015028:	4770      	bx	lr
	...

0801502c <_ZN8touchgfx13DMA_Interface7executeEv>:
 801502c:	2301      	movs	r3, #1
 801502e:	b570      	push	{r4, r5, r6, lr}
 8015030:	7203      	strb	r3, [r0, #8]
 8015032:	4604      	mov	r4, r0
 8015034:	6840      	ldr	r0, [r0, #4]
 8015036:	6803      	ldr	r3, [r0, #0]
 8015038:	699b      	ldr	r3, [r3, #24]
 801503a:	4798      	blx	r3
 801503c:	6803      	ldr	r3, [r0, #0]
 801503e:	4605      	mov	r5, r0
 8015040:	2b40      	cmp	r3, #64	; 0x40
 8015042:	d039      	beq.n	80150b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015044:	d815      	bhi.n	8015072 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8015046:	2b04      	cmp	r3, #4
 8015048:	d022      	beq.n	8015090 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801504a:	d808      	bhi.n	801505e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801504c:	2b01      	cmp	r3, #1
 801504e:	d033      	beq.n	80150b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015050:	2b02      	cmp	r3, #2
 8015052:	d108      	bne.n	8015066 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8015054:	6823      	ldr	r3, [r4, #0]
 8015056:	4620      	mov	r0, r4
 8015058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801505a:	4798      	blx	r3
 801505c:	e025      	b.n	80150aa <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 801505e:	2b08      	cmp	r3, #8
 8015060:	d01e      	beq.n	80150a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8015062:	2b20      	cmp	r3, #32
 8015064:	d028      	beq.n	80150b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015066:	4b17      	ldr	r3, [pc, #92]	; (80150c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8015068:	218b      	movs	r1, #139	; 0x8b
 801506a:	4a17      	ldr	r2, [pc, #92]	; (80150c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 801506c:	4817      	ldr	r0, [pc, #92]	; (80150cc <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 801506e:	f010 fd83 	bl	8025b78 <__assert_func>
 8015072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015076:	d01f      	beq.n	80150b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8015078:	d804      	bhi.n	8015084 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 801507a:	2b80      	cmp	r3, #128	; 0x80
 801507c:	d01c      	beq.n	80150b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801507e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015082:	e7ef      	b.n	8015064 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8015084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015088:	d016      	beq.n	80150b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801508a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801508e:	e7e0      	b.n	8015052 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8015090:	6823      	ldr	r3, [r4, #0]
 8015092:	7f01      	ldrb	r1, [r0, #28]
 8015094:	4620      	mov	r0, r4
 8015096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015098:	4798      	blx	r3
 801509a:	6823      	ldr	r3, [r4, #0]
 801509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801509e:	e006      	b.n	80150ae <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80150a0:	6823      	ldr	r3, [r4, #0]
 80150a2:	7f01      	ldrb	r1, [r0, #28]
 80150a4:	4620      	mov	r0, r4
 80150a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150a8:	4798      	blx	r3
 80150aa:	6823      	ldr	r3, [r4, #0]
 80150ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150ae:	4629      	mov	r1, r5
 80150b0:	4620      	mov	r0, r4
 80150b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150b6:	4718      	bx	r3
 80150b8:	6823      	ldr	r3, [r4, #0]
 80150ba:	4620      	mov	r0, r4
 80150bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150be:	4798      	blx	r3
 80150c0:	e7eb      	b.n	801509a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80150c2:	bf00      	nop
 80150c4:	08029242 	.word	0x08029242
 80150c8:	08029354 	.word	0x08029354
 80150cc:	08029267 	.word	0x08029267

080150d0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80150d0:	b570      	push	{r4, r5, r6, lr}
 80150d2:	4604      	mov	r4, r0
 80150d4:	460e      	mov	r6, r1
 80150d6:	6860      	ldr	r0, [r4, #4]
 80150d8:	6803      	ldr	r3, [r0, #0]
 80150da:	685b      	ldr	r3, [r3, #4]
 80150dc:	4798      	blx	r3
 80150de:	2800      	cmp	r0, #0
 80150e0:	d1f9      	bne.n	80150d6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80150e2:	4d0d      	ldr	r5, [pc, #52]	; (8015118 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80150e4:	6828      	ldr	r0, [r5, #0]
 80150e6:	6803      	ldr	r3, [r0, #0]
 80150e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80150ea:	4798      	blx	r3
 80150ec:	f7eb fdaa 	bl	8000c44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80150f0:	6828      	ldr	r0, [r5, #0]
 80150f2:	2101      	movs	r1, #1
 80150f4:	f7ff ff46 	bl	8014f84 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80150f8:	6860      	ldr	r0, [r4, #4]
 80150fa:	4631      	mov	r1, r6
 80150fc:	6803      	ldr	r3, [r0, #0]
 80150fe:	689b      	ldr	r3, [r3, #8]
 8015100:	4798      	blx	r3
 8015102:	6823      	ldr	r3, [r4, #0]
 8015104:	4620      	mov	r0, r4
 8015106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015108:	4798      	blx	r3
 801510a:	6828      	ldr	r0, [r5, #0]
 801510c:	6803      	ldr	r3, [r0, #0]
 801510e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015114:	4718      	bx	r3
 8015116:	bf00      	nop
 8015118:	2400c8a4 	.word	0x2400c8a4

0801511c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801511c:	b508      	push	{r3, lr}
 801511e:	f7eb fd77 	bl	8000c10 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015126:	f7eb bd81 	b.w	8000c2c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801512a <_ZN8touchgfx13DMA_Interface5startEv>:
 801512a:	b510      	push	{r4, lr}
 801512c:	4604      	mov	r4, r0
 801512e:	6840      	ldr	r0, [r0, #4]
 8015130:	6803      	ldr	r3, [r0, #0]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	4798      	blx	r3
 8015136:	b948      	cbnz	r0, 801514c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015138:	7a63      	ldrb	r3, [r4, #9]
 801513a:	b13b      	cbz	r3, 801514c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801513c:	7a23      	ldrb	r3, [r4, #8]
 801513e:	b92b      	cbnz	r3, 801514c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015140:	6823      	ldr	r3, [r4, #0]
 8015142:	4620      	mov	r0, r4
 8015144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801514a:	4718      	bx	r3
 801514c:	bd10      	pop	{r4, pc}
	...

08015150 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015150:	b570      	push	{r4, r5, r6, lr}
 8015152:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015156:	4606      	mov	r6, r0
 8015158:	1a9b      	subs	r3, r3, r2
 801515a:	2b00      	cmp	r3, #0
 801515c:	bfdc      	itt	le
 801515e:	6880      	ldrle	r0, [r0, #8]
 8015160:	181b      	addle	r3, r3, r0
 8015162:	2b01      	cmp	r3, #1
 8015164:	dd13      	ble.n	801518e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 8015166:	6874      	ldr	r4, [r6, #4]
 8015168:	460d      	mov	r5, r1
 801516a:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 801516e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015172:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8015176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801517a:	68f3      	ldr	r3, [r6, #12]
 801517c:	68b2      	ldr	r2, [r6, #8]
 801517e:	f3bf 8f5b 	dmb	ish
 8015182:	3301      	adds	r3, #1
 8015184:	429a      	cmp	r2, r3
 8015186:	bfd8      	it	le
 8015188:	1a9b      	suble	r3, r3, r2
 801518a:	60f3      	str	r3, [r6, #12]
 801518c:	bd70      	pop	{r4, r5, r6, pc}
 801518e:	4b03      	ldr	r3, [pc, #12]	; (801519c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 8015190:	2139      	movs	r1, #57	; 0x39
 8015192:	4a03      	ldr	r2, [pc, #12]	; (80151a0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 8015194:	4803      	ldr	r0, [pc, #12]	; (80151a4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8015196:	f010 fcef 	bl	8025b78 <__assert_func>
 801519a:	bf00      	nop
 801519c:	0802928d 	.word	0x0802928d
 80151a0:	08029384 	.word	0x08029384
 80151a4:	08029267 	.word	0x08029267

080151a8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80151a8:	b510      	push	{r4, lr}
 80151aa:	6803      	ldr	r3, [r0, #0]
 80151ac:	4604      	mov	r4, r0
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	4798      	blx	r3
 80151b2:	b128      	cbz	r0, 80151c0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80151b4:	4b07      	ldr	r3, [pc, #28]	; (80151d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80151b6:	213f      	movs	r1, #63	; 0x3f
 80151b8:	4a07      	ldr	r2, [pc, #28]	; (80151d8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80151ba:	4808      	ldr	r0, [pc, #32]	; (80151dc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80151bc:	f010 fcdc 	bl	8025b78 <__assert_func>
 80151c0:	6923      	ldr	r3, [r4, #16]
 80151c2:	68a2      	ldr	r2, [r4, #8]
 80151c4:	f3bf 8f5b 	dmb	ish
 80151c8:	3301      	adds	r3, #1
 80151ca:	429a      	cmp	r2, r3
 80151cc:	bfd8      	it	le
 80151ce:	1a9b      	suble	r3, r3, r2
 80151d0:	6123      	str	r3, [r4, #16]
 80151d2:	bd10      	pop	{r4, pc}
 80151d4:	080292b0 	.word	0x080292b0
 80151d8:	080293d2 	.word	0x080293d2
 80151dc:	08029267 	.word	0x08029267

080151e0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80151e0:	b570      	push	{r4, r5, r6, lr}
 80151e2:	4604      	mov	r4, r0
 80151e4:	6840      	ldr	r0, [r0, #4]
 80151e6:	6803      	ldr	r3, [r0, #0]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	4798      	blx	r3
 80151ec:	4605      	mov	r5, r0
 80151ee:	b930      	cbnz	r0, 80151fe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80151f0:	7a23      	ldrb	r3, [r4, #8]
 80151f2:	b123      	cbz	r3, 80151fe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80151f4:	6860      	ldr	r0, [r4, #4]
 80151f6:	6803      	ldr	r3, [r0, #0]
 80151f8:	695b      	ldr	r3, [r3, #20]
 80151fa:	4798      	blx	r3
 80151fc:	7225      	strb	r5, [r4, #8]
 80151fe:	6860      	ldr	r0, [r4, #4]
 8015200:	6803      	ldr	r3, [r0, #0]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	4798      	blx	r3
 8015206:	b928      	cbnz	r0, 8015214 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015208:	6823      	ldr	r3, [r4, #0]
 801520a:	4620      	mov	r0, r4
 801520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801520e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015212:	4718      	bx	r3
 8015214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015218:	f7eb bd20 	b.w	8000c5c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801521c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801521c:	b510      	push	{r4, lr}
 801521e:	6082      	str	r2, [r0, #8]
 8015220:	2200      	movs	r2, #0
 8015222:	4c03      	ldr	r4, [pc, #12]	; (8015230 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015224:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015228:	e9c0 4100 	strd	r4, r1, [r0]
 801522c:	bd10      	pop	{r4, pc}
 801522e:	bf00      	nop
 8015230:	08029338 	.word	0x08029338

08015234 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015234:	6840      	ldr	r0, [r0, #4]
 8015236:	6803      	ldr	r3, [r0, #0]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	4718      	bx	r3

0801523c <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 801523c:	2001      	movs	r0, #1
 801523e:	4770      	bx	lr

08015240 <_ZN8touchgfx21AbstractPainterRGB88810renderNextERhS1_S1_S1_>:
 8015240:	2000      	movs	r0, #0
 8015242:	4770      	bx	lr

08015244 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8015244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015248:	460d      	mov	r5, r1
 801524a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801524e:	b085      	sub	sp, #20
 8015250:	4690      	mov	r8, r2
 8015252:	4411      	add	r1, r2
 8015254:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015258:	4699      	mov	r9, r3
 801525a:	6803      	ldr	r3, [r0, #0]
 801525c:	60c1      	str	r1, [r0, #12]
 801525e:	4604      	mov	r4, r0
 8015260:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015262:	440a      	add	r2, r1
 8015264:	6102      	str	r2, [r0, #16]
 8015266:	68db      	ldr	r3, [r3, #12]
 8015268:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 801526c:	4798      	blx	r3
 801526e:	2800      	cmp	r0, #0
 8015270:	d03a      	beq.n	80152e8 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 8015272:	44c8      	add	r8, r9
 8015274:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015278:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801527c:	4445      	add	r5, r8
 801527e:	442e      	add	r6, r5
 8015280:	6823      	ldr	r3, [r4, #0]
 8015282:	f10d 020f 	add.w	r2, sp, #15
 8015286:	a903      	add	r1, sp, #12
 8015288:	4620      	mov	r0, r4
 801528a:	9200      	str	r2, [sp, #0]
 801528c:	f10d 020d 	add.w	r2, sp, #13
 8015290:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8015294:	f10d 030e 	add.w	r3, sp, #14
 8015298:	47c0      	blx	r8
 801529a:	b1f0      	cbz	r0, 80152da <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 801529c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80152a0:	7a20      	ldrb	r0, [r4, #8]
 80152a2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80152a6:	4358      	muls	r0, r3
 80152a8:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80152ac:	1c43      	adds	r3, r0, #1
 80152ae:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80152b2:	7838      	ldrb	r0, [r7, #0]
 80152b4:	121b      	asrs	r3, r3, #8
 80152b6:	fb10 f003 	smulbb	r0, r0, r3
 80152ba:	b283      	uxth	r3, r0
 80152bc:	1c58      	adds	r0, r3, #1
 80152be:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80152c2:	6823      	ldr	r3, [r4, #0]
 80152c4:	1200      	asrs	r0, r0, #8
 80152c6:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80152ca:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80152ce:	28ff      	cmp	r0, #255	; 0xff
 80152d0:	d10d      	bne.n	80152ee <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 80152d2:	9100      	str	r1, [sp, #0]
 80152d4:	4629      	mov	r1, r5
 80152d6:	4620      	mov	r0, r4
 80152d8:	47c0      	blx	r8
 80152da:	68e3      	ldr	r3, [r4, #12]
 80152dc:	3503      	adds	r5, #3
 80152de:	3701      	adds	r7, #1
 80152e0:	3301      	adds	r3, #1
 80152e2:	42ae      	cmp	r6, r5
 80152e4:	60e3      	str	r3, [r4, #12]
 80152e6:	d8cb      	bhi.n	8015280 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 80152e8:	b005      	add	sp, #20
 80152ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152ee:	fa1f fc80 	uxth.w	ip, r0
 80152f2:	43c0      	mvns	r0, r0
 80152f4:	f895 e002 	ldrb.w	lr, [r5, #2]
 80152f8:	fb12 f20c 	smulbb	r2, r2, ip
 80152fc:	b2c0      	uxtb	r0, r0
 80152fe:	fb13 f30c 	smulbb	r3, r3, ip
 8015302:	fb0e 2200 	mla	r2, lr, r0, r2
 8015306:	f895 e001 	ldrb.w	lr, [r5, #1]
 801530a:	fb11 f10c 	smulbb	r1, r1, ip
 801530e:	fb0e 3300 	mla	r3, lr, r0, r3
 8015312:	f895 e000 	ldrb.w	lr, [r5]
 8015316:	b292      	uxth	r2, r2
 8015318:	b29b      	uxth	r3, r3
 801531a:	fb0e 1000 	mla	r0, lr, r0, r1
 801531e:	1c59      	adds	r1, r3, #1
 8015320:	b280      	uxth	r0, r0
 8015322:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8015326:	1c51      	adds	r1, r2, #1
 8015328:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801532c:	1c41      	adds	r1, r0, #1
 801532e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015332:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8015336:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801533a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801533e:	9000      	str	r0, [sp, #0]
 8015340:	e7c8      	b.n	80152d4 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

08015342 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8015342:	f89d 0000 	ldrb.w	r0, [sp]
 8015346:	704b      	strb	r3, [r1, #1]
 8015348:	7008      	strb	r0, [r1, #0]
 801534a:	708a      	strb	r2, [r1, #2]
 801534c:	4770      	bx	lr

0801534e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 801534e:	4413      	add	r3, r2
 8015350:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015356:	4419      	add	r1, r3
 8015358:	7a03      	ldrb	r3, [r0, #8]
 801535a:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 801535e:	2bff      	cmp	r3, #255	; 0xff
 8015360:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015364:	440e      	add	r6, r1
 8015366:	d13d      	bne.n	80153e4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 8015368:	f814 3b01 	ldrb.w	r3, [r4], #1
 801536c:	3103      	adds	r1, #3
 801536e:	7d87      	ldrb	r7, [r0, #22]
 8015370:	2bff      	cmp	r3, #255	; 0xff
 8015372:	d10a      	bne.n	801538a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 8015374:	f801 7c03 	strb.w	r7, [r1, #-3]
 8015378:	7d43      	ldrb	r3, [r0, #21]
 801537a:	f801 3c02 	strb.w	r3, [r1, #-2]
 801537e:	7d03      	ldrb	r3, [r0, #20]
 8015380:	f801 3c01 	strb.w	r3, [r1, #-1]
 8015384:	428e      	cmp	r6, r1
 8015386:	d8ef      	bhi.n	8015368 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 8015388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801538a:	b29a      	uxth	r2, r3
 801538c:	43db      	mvns	r3, r3
 801538e:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8015392:	fb17 f702 	smulbb	r7, r7, r2
 8015396:	b2db      	uxtb	r3, r3
 8015398:	fb05 7503 	mla	r5, r5, r3, r7
 801539c:	b2ad      	uxth	r5, r5
 801539e:	1c6f      	adds	r7, r5, #1
 80153a0:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80153a4:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 80153a8:	fb17 f703 	smulbb	r7, r7, r3
 80153ac:	122d      	asrs	r5, r5, #8
 80153ae:	f801 5c03 	strb.w	r5, [r1, #-3]
 80153b2:	7d45      	ldrb	r5, [r0, #21]
 80153b4:	fb05 7502 	mla	r5, r5, r2, r7
 80153b8:	b2ad      	uxth	r5, r5
 80153ba:	1c6f      	adds	r7, r5, #1
 80153bc:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80153c0:	122d      	asrs	r5, r5, #8
 80153c2:	f801 5c02 	strb.w	r5, [r1, #-2]
 80153c6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80153ca:	7d07      	ldrb	r7, [r0, #20]
 80153cc:	fb15 f303 	smulbb	r3, r5, r3
 80153d0:	fb07 3202 	mla	r2, r7, r2, r3
 80153d4:	b292      	uxth	r2, r2
 80153d6:	1c53      	adds	r3, r2, #1
 80153d8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80153dc:	1212      	asrs	r2, r2, #8
 80153de:	f801 2c01 	strb.w	r2, [r1, #-1]
 80153e2:	e7cf      	b.n	8015384 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 80153e4:	3103      	adds	r1, #3
 80153e6:	f814 2b01 	ldrb.w	r2, [r4], #1
 80153ea:	428e      	cmp	r6, r1
 80153ec:	7a03      	ldrb	r3, [r0, #8]
 80153ee:	f101 0103 	add.w	r1, r1, #3
 80153f2:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 80153f6:	fb02 f303 	mul.w	r3, r2, r3
 80153fa:	f103 0201 	add.w	r2, r3, #1
 80153fe:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8015402:	ea4f 2222 	mov.w	r2, r2, asr #8
 8015406:	b295      	uxth	r5, r2
 8015408:	ea6f 0202 	mvn.w	r2, r2
 801540c:	b2d3      	uxtb	r3, r2
 801540e:	7d82      	ldrb	r2, [r0, #22]
 8015410:	fb1c fc03 	smulbb	ip, ip, r3
 8015414:	fb02 c205 	mla	r2, r2, r5, ip
 8015418:	b292      	uxth	r2, r2
 801541a:	f102 0c01 	add.w	ip, r2, #1
 801541e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015422:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8015426:	fb1c fc03 	smulbb	ip, ip, r3
 801542a:	ea4f 2222 	mov.w	r2, r2, asr #8
 801542e:	f801 2c06 	strb.w	r2, [r1, #-6]
 8015432:	7d42      	ldrb	r2, [r0, #21]
 8015434:	fb02 c205 	mla	r2, r2, r5, ip
 8015438:	b292      	uxth	r2, r2
 801543a:	f102 0c01 	add.w	ip, r2, #1
 801543e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015442:	ea4f 2222 	mov.w	r2, r2, asr #8
 8015446:	f801 2c05 	strb.w	r2, [r1, #-5]
 801544a:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801544e:	f890 c014 	ldrb.w	ip, [r0, #20]
 8015452:	fb12 f303 	smulbb	r3, r2, r3
 8015456:	fb0c 3305 	mla	r3, ip, r5, r3
 801545a:	b29b      	uxth	r3, r3
 801545c:	f103 0201 	add.w	r2, r3, #1
 8015460:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015464:	ea4f 2323 	mov.w	r3, r3, asr #8
 8015468:	f801 3c04 	strb.w	r3, [r1, #-4]
 801546c:	d8bb      	bhi.n	80153e6 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 801546e:	e78b      	b.n	8015388 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

08015470 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8015470:	b510      	push	{r4, lr}
 8015472:	7d04      	ldrb	r4, [r0, #20]
 8015474:	700c      	strb	r4, [r1, #0]
 8015476:	7d41      	ldrb	r1, [r0, #21]
 8015478:	7011      	strb	r1, [r2, #0]
 801547a:	7d82      	ldrb	r2, [r0, #22]
 801547c:	2001      	movs	r0, #1
 801547e:	701a      	strb	r2, [r3, #0]
 8015480:	22ff      	movs	r2, #255	; 0xff
 8015482:	9b02      	ldr	r3, [sp, #8]
 8015484:	701a      	strb	r2, [r3, #0]
 8015486:	bd10      	pop	{r4, pc}

08015488 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8015488:	6281      	str	r1, [r0, #40]	; 0x28
 801548a:	4770      	bx	lr

0801548c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801548c:	b510      	push	{r4, lr}
 801548e:	2200      	movs	r2, #0
 8015490:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8015494:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8015498:	8002      	strh	r2, [r0, #0]
 801549a:	8042      	strh	r2, [r0, #2]
 801549c:	8084      	strh	r4, [r0, #4]
 801549e:	80c1      	strh	r1, [r0, #6]
 80154a0:	bd10      	pop	{r4, pc}

080154a2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80154a2:	2200      	movs	r2, #0
 80154a4:	8002      	strh	r2, [r0, #0]
 80154a6:	8042      	strh	r2, [r0, #2]
 80154a8:	8082      	strh	r2, [r0, #4]
 80154aa:	80c2      	strh	r2, [r0, #6]
 80154ac:	4770      	bx	lr
	...

080154b0 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80154b0:	b508      	push	{r3, lr}
 80154b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80154b4:	b928      	cbnz	r0, 80154c2 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80154b6:	4b03      	ldr	r3, [pc, #12]	; (80154c4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80154b8:	2126      	movs	r1, #38	; 0x26
 80154ba:	4a03      	ldr	r2, [pc, #12]	; (80154c8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 80154bc:	4803      	ldr	r0, [pc, #12]	; (80154cc <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80154be:	f010 fb5b 	bl	8025b78 <__assert_func>
 80154c2:	bd08      	pop	{r3, pc}
 80154c4:	08029444 	.word	0x08029444
 80154c8:	08029524 	.word	0x08029524
 80154cc:	0802946b 	.word	0x0802946b

080154d0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80154d0:	b510      	push	{r4, lr}
 80154d2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80154d6:	888a      	ldrh	r2, [r1, #4]
 80154d8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80154dc:	4422      	add	r2, r4
 80154de:	b212      	sxth	r2, r2
 80154e0:	4293      	cmp	r3, r2
 80154e2:	da15      	bge.n	8015510 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80154e4:	8882      	ldrh	r2, [r0, #4]
 80154e6:	4413      	add	r3, r2
 80154e8:	b21b      	sxth	r3, r3
 80154ea:	429c      	cmp	r4, r3
 80154ec:	da10      	bge.n	8015510 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80154ee:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80154f2:	88c9      	ldrh	r1, [r1, #6]
 80154f4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80154f8:	4419      	add	r1, r3
 80154fa:	b209      	sxth	r1, r1
 80154fc:	428a      	cmp	r2, r1
 80154fe:	da07      	bge.n	8015510 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8015500:	88c0      	ldrh	r0, [r0, #6]
 8015502:	4410      	add	r0, r2
 8015504:	b200      	sxth	r0, r0
 8015506:	4283      	cmp	r3, r0
 8015508:	bfac      	ite	ge
 801550a:	2000      	movge	r0, #0
 801550c:	2001      	movlt	r0, #1
 801550e:	bd10      	pop	{r4, pc}
 8015510:	2000      	movs	r0, #0
 8015512:	e7fc      	b.n	801550e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08015514 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8015514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015518:	b08b      	sub	sp, #44	; 0x2c
 801551a:	4604      	mov	r4, r0
 801551c:	6808      	ldr	r0, [r1, #0]
 801551e:	f04f 0a00 	mov.w	sl, #0
 8015522:	6849      	ldr	r1, [r1, #4]
 8015524:	ab04      	add	r3, sp, #16
 8015526:	f647 7bff 	movw	fp, #32767	; 0x7fff
 801552a:	c303      	stmia	r3!, {r0, r1}
 801552c:	4b35      	ldr	r3, [pc, #212]	; (8015604 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 801552e:	4621      	mov	r1, r4
 8015530:	a806      	add	r0, sp, #24
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	2b01      	cmp	r3, #1
 8015536:	6823      	ldr	r3, [r4, #0]
 8015538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801553a:	bf1f      	itttt	ne
 801553c:	f10d 090e 	addne.w	r9, sp, #14
 8015540:	ae05      	addne	r6, sp, #20
 8015542:	f10d 0516 	addne.w	r5, sp, #22
 8015546:	f10d 0812 	addne.w	r8, sp, #18
 801554a:	bf01      	itttt	eq
 801554c:	f10d 0916 	addeq.w	r9, sp, #22
 8015550:	f10d 060e 	addeq.w	r6, sp, #14
 8015554:	ad05      	addeq	r5, sp, #20
 8015556:	f10d 0810 	addeq.w	r8, sp, #16
 801555a:	4798      	blx	r3
 801555c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8015560:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8015564:	2b00      	cmp	r3, #0
 8015566:	d042      	beq.n	80155ee <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 8015568:	4293      	cmp	r3, r2
 801556a:	bfa8      	it	ge
 801556c:	4613      	movge	r3, r2
 801556e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015572:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8015576:	2f00      	cmp	r7, #0
 8015578:	dd21      	ble.n	80155be <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 801557a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801557e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8015582:	f9b6 2000 	ldrsh.w	r2, [r6]
 8015586:	f9b9 3000 	ldrsh.w	r3, [r9]
 801558a:	f8ad 0020 	strh.w	r0, [sp, #32]
 801558e:	a808      	add	r0, sp, #32
 8015590:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8015594:	a906      	add	r1, sp, #24
 8015596:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801559a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801559e:	f7ff ff97 	bl	80154d0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80155a2:	9001      	str	r0, [sp, #4]
 80155a4:	b1d0      	cbz	r0, 80155dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 80155a6:	6822      	ldr	r2, [r4, #0]
 80155a8:	a908      	add	r1, sp, #32
 80155aa:	4620      	mov	r0, r4
 80155ac:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80155ae:	4790      	blx	r2
 80155b0:	b9a0      	cbnz	r0, 80155dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 80155b2:	107f      	asrs	r7, r7, #1
 80155b4:	9b01      	ldr	r3, [sp, #4]
 80155b6:	f8ad 700e 	strh.w	r7, [sp, #14]
 80155ba:	469a      	mov	sl, r3
 80155bc:	e7d9      	b.n	8015572 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80155be:	d10d      	bne.n	80155dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 80155c0:	2301      	movs	r3, #1
 80155c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80155c6:	f8b8 2000 	ldrh.w	r2, [r8]
 80155ca:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 80155ce:	440a      	add	r2, r1
 80155d0:	f8a8 2000 	strh.w	r2, [r8]
 80155d4:	882b      	ldrh	r3, [r5, #0]
 80155d6:	1a5b      	subs	r3, r3, r1
 80155d8:	802b      	strh	r3, [r5, #0]
 80155da:	e7bf      	b.n	801555c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80155dc:	f1ba 0f00 	cmp.w	sl, #0
 80155e0:	d0f1      	beq.n	80155c6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 80155e2:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80155e6:	455b      	cmp	r3, fp
 80155e8:	bf08      	it	eq
 80155ea:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 80155ec:	e7eb      	b.n	80155c6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 80155ee:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80155f2:	429a      	cmp	r2, r3
 80155f4:	bf04      	itt	eq
 80155f6:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 80155fa:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 80155fc:	b00b      	add	sp, #44	; 0x2c
 80155fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015602:	bf00      	nop
 8015604:	2400c89c 	.word	0x2400c89c

08015608 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8015608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801560a:	b085      	sub	sp, #20
 801560c:	6803      	ldr	r3, [r0, #0]
 801560e:	4604      	mov	r4, r0
 8015610:	4601      	mov	r1, r0
 8015612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015614:	4668      	mov	r0, sp
 8015616:	4798      	blx	r3
 8015618:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 801561c:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8015620:	2300      	movs	r3, #0
 8015622:	a902      	add	r1, sp, #8
 8015624:	4668      	mov	r0, sp
 8015626:	9302      	str	r3, [sp, #8]
 8015628:	f8ad 600c 	strh.w	r6, [sp, #12]
 801562c:	f8ad 500e 	strh.w	r5, [sp, #14]
 8015630:	f7ff ff4e 	bl	80154d0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015634:	b340      	cbz	r0, 8015688 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 8015636:	f9bd 2000 	ldrsh.w	r2, [sp]
 801563a:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 801563e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8015642:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8015646:	443a      	add	r2, r7
 8015648:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 801564c:	f8ad 0000 	strh.w	r0, [sp]
 8015650:	b292      	uxth	r2, r2
 8015652:	f8ad 1002 	strh.w	r1, [sp, #2]
 8015656:	b217      	sxth	r7, r2
 8015658:	42be      	cmp	r6, r7
 801565a:	bfd8      	it	le
 801565c:	b2b2      	uxthle	r2, r6
 801565e:	1a12      	subs	r2, r2, r0
 8015660:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015664:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015668:	4413      	add	r3, r2
 801566a:	b29b      	uxth	r3, r3
 801566c:	b21a      	sxth	r2, r3
 801566e:	4295      	cmp	r5, r2
 8015670:	bfd8      	it	le
 8015672:	b2ab      	uxthle	r3, r5
 8015674:	1a5b      	subs	r3, r3, r1
 8015676:	f8ad 3006 	strh.w	r3, [sp, #6]
 801567a:	6823      	ldr	r3, [r4, #0]
 801567c:	4669      	mov	r1, sp
 801567e:	4620      	mov	r0, r4
 8015680:	691b      	ldr	r3, [r3, #16]
 8015682:	4798      	blx	r3
 8015684:	b005      	add	sp, #20
 8015686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015688:	e9cd 0000 	strd	r0, r0, [sp]
 801568c:	e7f5      	b.n	801567a <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

08015690 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8015690:	2200      	movs	r2, #0
 8015692:	2101      	movs	r1, #1
 8015694:	8082      	strh	r2, [r0, #4]
 8015696:	80c2      	strh	r2, [r0, #6]
 8015698:	8102      	strh	r2, [r0, #8]
 801569a:	8142      	strh	r2, [r0, #10]
 801569c:	8182      	strh	r2, [r0, #12]
 801569e:	81c2      	strh	r2, [r0, #14]
 80156a0:	8202      	strh	r2, [r0, #16]
 80156a2:	8242      	strh	r2, [r0, #18]
 80156a4:	61c2      	str	r2, [r0, #28]
 80156a6:	8402      	strh	r2, [r0, #32]
 80156a8:	8442      	strh	r2, [r0, #34]	; 0x22
 80156aa:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80156ae:	6282      	str	r2, [r0, #40]	; 0x28
 80156b0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80156b4:	4905      	ldr	r1, [pc, #20]	; (80156cc <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 80156b6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80156ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80156be:	6001      	str	r1, [r0, #0]
 80156c0:	8582      	strh	r2, [r0, #44]	; 0x2c
 80156c2:	22ff      	movs	r2, #255	; 0xff
 80156c4:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80156c8:	4770      	bx	lr
 80156ca:	bf00      	nop
 80156cc:	080294b0 	.word	0x080294b0

080156d0 <_ZN8touchgfx17AbstractDataGraph8setScaleEi>:
 80156d0:	62c1      	str	r1, [r0, #44]	; 0x2c
 80156d2:	4770      	bx	lr

080156d4 <_ZNK8touchgfx17AbstractDataGraph19getXAxisScaleScaledEv>:
 80156d4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80156d6:	4770      	bx	lr

080156d8 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 80156d8:	2300      	movs	r3, #0
 80156da:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 80156de:	4770      	bx	lr

080156e0 <_ZNK8touchgfx17AbstractDataGraph18indexToGlobalIndexEs>:
 80156e0:	4608      	mov	r0, r1
 80156e2:	4770      	bx	lr

080156e4 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 80156e4:	b530      	push	{r4, r5, lr}
 80156e6:	460d      	mov	r5, r1
 80156e8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80156ea:	8949      	ldrh	r1, [r1, #10]
 80156ec:	b085      	sub	sp, #20
 80156ee:	4604      	mov	r4, r0
 80156f0:	1ac9      	subs	r1, r1, r3
 80156f2:	6803      	ldr	r3, [r0, #0]
 80156f4:	f10d 0206 	add.w	r2, sp, #6
 80156f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80156fc:	b209      	sxth	r1, r1
 80156fe:	4798      	blx	r3
 8015700:	b1a0      	cbz	r0, 801572c <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8015702:	792b      	ldrb	r3, [r5, #4]
 8015704:	b993      	cbnz	r3, 801572c <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8015706:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 801570a:	b178      	cbz	r0, 801572c <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801570c:	6803      	ldr	r3, [r0, #0]
 801570e:	68db      	ldr	r3, [r3, #12]
 8015710:	4798      	blx	r3
 8015712:	b158      	cbz	r0, 801572c <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8015714:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8015718:	aa02      	add	r2, sp, #8
 801571a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 801571e:	4621      	mov	r1, r4
 8015720:	f8ad 3008 	strh.w	r3, [sp, #8]
 8015724:	9503      	str	r5, [sp, #12]
 8015726:	6803      	ldr	r3, [r0, #0]
 8015728:	689b      	ldr	r3, [r3, #8]
 801572a:	4798      	blx	r3
 801572c:	b005      	add	sp, #20
 801572e:	bd30      	pop	{r4, r5, pc}

08015730 <_ZNK8touchgfx17AbstractDataGraph20getXAxisOffsetScaledEv>:
 8015730:	2000      	movs	r0, #0
 8015732:	4770      	bx	lr

08015734 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEii>:
 8015734:	b410      	push	{r4}
 8015736:	6804      	ldr	r4, [r0, #0]
 8015738:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801573a:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
 801573e:	435a      	muls	r2, r3
 8015740:	4359      	muls	r1, r3
 8015742:	4623      	mov	r3, r4
 8015744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015748:	4718      	bx	r3

0801574a <_ZNK8touchgfx22AbstractDataGraphWithY17getGraphRangeXMinEv>:
 801574a:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 801574e:	4770      	bx	lr

08015750 <_ZNK8touchgfx22AbstractDataGraphWithY17getGraphRangeXMaxEv>:
 8015750:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8015754:	4770      	bx	lr

08015756 <_ZNK8touchgfx22AbstractDataGraphWithY24getGraphRangeYMinAsFloatEv>:
 8015756:	edd0 7a50 	vldr	s15, [r0, #320]	; 0x140
 801575a:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 801575e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015762:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8015766:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801576a:	4770      	bx	lr

0801576c <_ZNK8touchgfx22AbstractDataGraphWithY24getGraphRangeYMaxAsFloatEv>:
 801576c:	edd0 7a51 	vldr	s15, [r0, #324]	; 0x144
 8015770:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8015774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015778:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801577c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8015780:	4770      	bx	lr

08015782 <_ZN8touchgfx22AbstractDataGraphWithY13setXAxisScaleEi>:
 8015782:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015784:	6803      	ldr	r3, [r0, #0]
 8015786:	4351      	muls	r1, r2
 8015788:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801578c:	4718      	bx	r3

0801578e <_ZNK8touchgfx22AbstractDataGraphWithY20getXAxisScaleAsFloatEv>:
 801578e:	b510      	push	{r4, lr}
 8015790:	6803      	ldr	r3, [r0, #0]
 8015792:	4604      	mov	r4, r0
 8015794:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8015798:	4798      	blx	r3
 801579a:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 801579e:	ee07 0a90 	vmov	s15, r0
 80157a2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80157a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157aa:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80157ae:	bd10      	pop	{r4, pc}

080157b0 <_ZN8touchgfx22AbstractDataGraphWithY14setXAxisOffsetEi>:
 80157b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80157b2:	6803      	ldr	r3, [r0, #0]
 80157b4:	4351      	muls	r1, r2
 80157b6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80157ba:	4718      	bx	r3

080157bc <_ZNK8touchgfx22AbstractDataGraphWithY21getXAxisOffsetAsFloatEv>:
 80157bc:	b510      	push	{r4, lr}
 80157be:	6803      	ldr	r3, [r0, #0]
 80157c0:	4604      	mov	r4, r0
 80157c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80157c6:	4798      	blx	r3
 80157c8:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80157cc:	ee07 0a90 	vmov	s15, r0
 80157d0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80157d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157d8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80157dc:	bd10      	pop	{r4, pc}

080157de <_ZN8touchgfx22AbstractDataGraphWithY14beforeAddValueEv>:
 80157de:	4770      	bx	lr

080157e0 <_ZNK8touchgfx22AbstractDataGraphWithY9realIndexEs>:
 80157e0:	4608      	mov	r0, r1
 80157e2:	4770      	bx	lr

080157e4 <_ZNK8touchgfx22AbstractDataGraphWithY23indexToDataPointXScaledEs>:
 80157e4:	b538      	push	{r3, r4, r5, lr}
 80157e6:	6803      	ldr	r3, [r0, #0]
 80157e8:	4604      	mov	r4, r0
 80157ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80157ee:	4798      	blx	r3
 80157f0:	6823      	ldr	r3, [r4, #0]
 80157f2:	4605      	mov	r5, r0
 80157f4:	4620      	mov	r0, r4
 80157f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80157fa:	4798      	blx	r3
 80157fc:	6823      	ldr	r3, [r4, #0]
 80157fe:	4345      	muls	r5, r0
 8015800:	4620      	mov	r0, r4
 8015802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8015806:	4798      	blx	r3
 8015808:	4428      	add	r0, r5
 801580a:	bd38      	pop	{r3, r4, r5, pc}

0801580c <_ZNK8touchgfx22AbstractDataGraphWithY23indexToDataPointYScaledEs>:
 801580c:	b510      	push	{r4, lr}
 801580e:	6803      	ldr	r3, [r0, #0]
 8015810:	f8d0 4128 	ldr.w	r4, [r0, #296]	; 0x128
 8015814:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8015818:	4798      	blx	r3
 801581a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801581e:	bd10      	pop	{r4, pc}

08015820 <_ZN8touchgfx22AbstractDataGraphWithY19setXAxisScaleScaledEi>:
 8015820:	f8c0 1134 	str.w	r1, [r0, #308]	; 0x134
 8015824:	4770      	bx	lr

08015826 <_ZNK8touchgfx22AbstractDataGraphWithY19getXAxisScaleScaledEv>:
 8015826:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 801582a:	4770      	bx	lr

0801582c <_ZNK8touchgfx22AbstractDataGraphWithY23getGraphRangeYMinScaledEv>:
 801582c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8015830:	4770      	bx	lr

08015832 <_ZNK8touchgfx22AbstractDataGraphWithY23getGraphRangeYMaxScaledEv>:
 8015832:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 8015836:	4770      	bx	lr

08015838 <_ZN8touchgfx22AbstractDataGraphWithY20setXAxisOffsetScaledEi>:
 8015838:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801583c:	4770      	bx	lr

0801583e <_ZNK8touchgfx22AbstractDataGraphWithY20getXAxisOffsetScaledEv>:
 801583e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8015842:	4770      	bx	lr

08015844 <_ZNK8touchgfx22AbstractDataGraphWithY16indexToScreenXQ5Es>:
 8015844:	6803      	ldr	r3, [r0, #0]
 8015846:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801584a:	4718      	bx	r3

0801584c <_ZNK8touchgfx22AbstractDataGraphWithY16indexToScreenYQ5Es>:
 801584c:	b570      	push	{r4, r5, r6, lr}
 801584e:	6803      	ldr	r3, [r0, #0]
 8015850:	4604      	mov	r4, r0
 8015852:	f8d0 6128 	ldr.w	r6, [r0, #296]	; 0x128
 8015856:	f8d3 50d4 	ldr.w	r5, [r3, #212]	; 0xd4
 801585a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801585e:	4798      	blx	r3
 8015860:	462b      	mov	r3, r5
 8015862:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 8015866:	4620      	mov	r0, r4
 8015868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801586c:	4718      	bx	r3
	...

08015870 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii>:
 8015870:	4291      	cmp	r1, r2
 8015872:	b510      	push	{r4, lr}
 8015874:	4604      	mov	r4, r0
 8015876:	d106      	bne.n	8015886 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x16>
 8015878:	4b12      	ldr	r3, [pc, #72]	; (80158c4 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x54>)
 801587a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 801587e:	4a12      	ldr	r2, [pc, #72]	; (80158c8 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x58>)
 8015880:	4812      	ldr	r0, [pc, #72]	; (80158cc <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x5c>)
 8015882:	f010 f979 	bl	8025b78 <__assert_func>
 8015886:	bfc2      	ittt	gt
 8015888:	460b      	movgt	r3, r1
 801588a:	4611      	movgt	r1, r2
 801588c:	461a      	movgt	r2, r3
 801588e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 8015892:	428b      	cmp	r3, r1
 8015894:	d103      	bne.n	801589e <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x2e>
 8015896:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
 801589a:	4293      	cmp	r3, r2
 801589c:	d011      	beq.n	80158c2 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x52>
 801589e:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 80158a2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80158a6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
 80158aa:	f004 f959 	bl	8019b60 <_ZNK8touchgfx8Drawable10invalidateEv>
 80158ae:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80158b2:	f004 f955 	bl	8019b60 <_ZNK8touchgfx8Drawable10invalidateEv>
 80158b6:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 80158ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158be:	f004 b94f 	b.w	8019b60 <_ZNK8touchgfx8Drawable10invalidateEv>
 80158c2:	bd10      	pop	{r4, pc}
 80158c4:	08029572 	.word	0x08029572
 80158c8:	080297e4 	.word	0x080297e4
 80158cc:	0802957d 	.word	0x0802957d

080158d0 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii>:
 80158d0:	4291      	cmp	r1, r2
 80158d2:	b510      	push	{r4, lr}
 80158d4:	4604      	mov	r4, r0
 80158d6:	d106      	bne.n	80158e6 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x16>
 80158d8:	4b12      	ldr	r3, [pc, #72]	; (8015924 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x54>)
 80158da:	f240 21c1 	movw	r1, #705	; 0x2c1
 80158de:	4a12      	ldr	r2, [pc, #72]	; (8015928 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x58>)
 80158e0:	4812      	ldr	r0, [pc, #72]	; (801592c <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x5c>)
 80158e2:	f010 f949 	bl	8025b78 <__assert_func>
 80158e6:	bfc2      	ittt	gt
 80158e8:	460b      	movgt	r3, r1
 80158ea:	4611      	movgt	r1, r2
 80158ec:	461a      	movgt	r2, r3
 80158ee:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 80158f2:	428b      	cmp	r3, r1
 80158f4:	d103      	bne.n	80158fe <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x2e>
 80158f6:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
 80158fa:	4293      	cmp	r3, r2
 80158fc:	d011      	beq.n	8015922 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x52>
 80158fe:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 8015902:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8015906:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
 801590a:	f004 f929 	bl	8019b60 <_ZNK8touchgfx8Drawable10invalidateEv>
 801590e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8015912:	f004 f925 	bl	8019b60 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015916:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801591a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801591e:	f004 b91f 	b.w	8019b60 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015922:	bd10      	pop	{r4, pc}
 8015924:	08029572 	.word	0x08029572
 8015928:	0802982c 	.word	0x0802982c
 801592c:	0802957d 	.word	0x0802957d

08015930 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8015930:	b530      	push	{r4, r5, lr}
 8015932:	790b      	ldrb	r3, [r1, #4]
 8015934:	b085      	sub	sp, #20
 8015936:	4604      	mov	r4, r0
 8015938:	460d      	mov	r5, r1
 801593a:	2b02      	cmp	r3, #2
 801593c:	d020      	beq.n	8015980 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801593e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8015940:	f10d 0206 	add.w	r2, sp, #6
 8015944:	88c9      	ldrh	r1, [r1, #6]
 8015946:	1ac9      	subs	r1, r1, r3
 8015948:	6803      	ldr	r3, [r0, #0]
 801594a:	b209      	sxth	r1, r1
 801594c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015950:	4798      	blx	r3
 8015952:	b1a8      	cbz	r0, 8015980 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015954:	792b      	ldrb	r3, [r5, #4]
 8015956:	2b01      	cmp	r3, #1
 8015958:	d812      	bhi.n	8015980 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801595a:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 801595e:	b178      	cbz	r0, 8015980 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015960:	6803      	ldr	r3, [r0, #0]
 8015962:	68db      	ldr	r3, [r3, #12]
 8015964:	4798      	blx	r3
 8015966:	b158      	cbz	r0, 8015980 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8015968:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801596c:	aa02      	add	r2, sp, #8
 801596e:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 8015972:	4621      	mov	r1, r4
 8015974:	f8ad 3008 	strh.w	r3, [sp, #8]
 8015978:	9503      	str	r5, [sp, #12]
 801597a:	6803      	ldr	r3, [r0, #0]
 801597c:	689b      	ldr	r3, [r3, #8]
 801597e:	4798      	blx	r3
 8015980:	b005      	add	sp, #20
 8015982:	bd30      	pop	{r4, r5, pc}

08015984 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8015984:	6800      	ldr	r0, [r0, #0]
 8015986:	2800      	cmp	r0, #0
 8015988:	bfbd      	ittte	lt
 801598a:	380f      	sublt	r0, #15
 801598c:	2320      	movlt	r3, #32
 801598e:	fb90 f0f3 	sdivlt	r0, r0, r3
 8015992:	3010      	addge	r0, #16
 8015994:	bfa8      	it	ge
 8015996:	1140      	asrge	r0, r0, #5
 8015998:	4770      	bx	lr

0801599a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
 801599a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801599c:	ab01      	add	r3, sp, #4
 801599e:	4615      	mov	r5, r2
 80159a0:	f004 fa84 	bl	8019eac <_ZN8touchgfx6muldivElllRl>
 80159a4:	2800      	cmp	r0, #0
 80159a6:	462a      	mov	r2, r5
 80159a8:	9901      	ldr	r1, [sp, #4]
 80159aa:	ea4f 1440 	mov.w	r4, r0, lsl #5
 80159ae:	f04f 0020 	mov.w	r0, #32
 80159b2:	db04      	blt.n	80159be <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
 80159b4:	f004 fa99 	bl	8019eea <_ZN8touchgfx6muldivElll>
 80159b8:	4420      	add	r0, r4
 80159ba:	b003      	add	sp, #12
 80159bc:	bd30      	pop	{r4, r5, pc}
 80159be:	f004 fa94 	bl	8019eea <_ZN8touchgfx6muldivElll>
 80159c2:	1a20      	subs	r0, r4, r0
 80159c4:	e7f9      	b.n	80159ba <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

080159c6 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>:
 80159c6:	ee07 0a90 	vmov	s15, r0
 80159ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80159ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 80159d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80159d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159da:	db08      	blt.n	80159ee <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi+0x28>
 80159dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80159e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80159e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80159e8:	ee17 0a90 	vmov	r0, s15
 80159ec:	4770      	bx	lr
 80159ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80159f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80159f6:	ee17 3a90 	vmov	r3, s15
 80159fa:	1e58      	subs	r0, r3, #1
 80159fc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015a00:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8015a04:	ee30 0a07 	vadd.f32	s0, s0, s14
 8015a08:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8015a0c:	ee10 3a10 	vmov	r3, s0
 8015a10:	4403      	add	r3, r0
 8015a12:	4618      	mov	r0, r3
 8015a14:	4770      	bx	lr

08015a16 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEff>:
 8015a16:	b570      	push	{r4, r5, r6, lr}
 8015a18:	ed2d 8b02 	vpush	{d8}
 8015a1c:	eeb0 8a60 	vmov.f32	s16, s1
 8015a20:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8015a22:	4604      	mov	r4, r0
 8015a24:	4628      	mov	r0, r5
 8015a26:	f7ff ffce 	bl	80159c6 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 8015a2a:	eeb0 0a48 	vmov.f32	s0, s16
 8015a2e:	4606      	mov	r6, r0
 8015a30:	4628      	mov	r0, r5
 8015a32:	f7ff ffc8 	bl	80159c6 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 8015a36:	6823      	ldr	r3, [r4, #0]
 8015a38:	4602      	mov	r2, r0
 8015a3a:	4631      	mov	r1, r6
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8015a42:	ecbd 8b02 	vpop	{d8}
 8015a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a4a:	4718      	bx	r3

08015a4c <_ZN8touchgfx22AbstractDataGraphWithY13setXAxisScaleEf>:
 8015a4c:	b510      	push	{r4, lr}
 8015a4e:	4604      	mov	r4, r0
 8015a50:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8015a52:	f7ff ffb8 	bl	80159c6 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 8015a56:	4601      	mov	r1, r0
 8015a58:	6823      	ldr	r3, [r4, #0]
 8015a5a:	4620      	mov	r0, r4
 8015a5c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8015a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a64:	4718      	bx	r3

08015a66 <_ZN8touchgfx22AbstractDataGraphWithY14setXAxisOffsetEf>:
 8015a66:	b510      	push	{r4, lr}
 8015a68:	4604      	mov	r4, r0
 8015a6a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8015a6c:	f7ff ffab 	bl	80159c6 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 8015a70:	4601      	mov	r1, r0
 8015a72:	6823      	ldr	r3, [r4, #0]
 8015a74:	4620      	mov	r0, r4
 8015a76:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8015a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a7e:	4718      	bx	r3

08015a80 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>:
 8015a80:	2800      	cmp	r0, #0
 8015a82:	db07      	blt.n	8015a94 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii+0x14>
 8015a84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8015a88:	fb90 f0f1 	sdiv	r0, r0, r1
 8015a8c:	2102      	movs	r1, #2
 8015a8e:	fb90 f0f1 	sdiv	r0, r0, r1
 8015a92:	4770      	bx	lr
 8015a94:	f06f 0301 	mvn.w	r3, #1
 8015a98:	fb03 1000 	mla	r0, r3, r0, r1
 8015a9c:	3801      	subs	r0, #1
 8015a9e:	fb90 f0f1 	sdiv	r0, r0, r1
 8015aa2:	2102      	movs	r1, #2
 8015aa4:	fb90 f0f1 	sdiv	r0, r0, r1
 8015aa8:	4240      	negs	r0, r0
 8015aaa:	4770      	bx	lr

08015aac <_ZNK8touchgfx22AbstractDataGraphWithY22getGraphRangeYMinAsIntEv>:
 8015aac:	b508      	push	{r3, lr}
 8015aae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8015ab0:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8015ab4:	f7ff ffe4 	bl	8015a80 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 8015ab8:	bd08      	pop	{r3, pc}

08015aba <_ZNK8touchgfx22AbstractDataGraphWithY22getGraphRangeYMaxAsIntEv>:
 8015aba:	b508      	push	{r3, lr}
 8015abc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8015abe:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 8015ac2:	f7ff ffdd 	bl	8015a80 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 8015ac6:	bd08      	pop	{r3, pc}

08015ac8 <_ZNK8touchgfx22AbstractDataGraphWithY18getXAxisScaleAsIntEv>:
 8015ac8:	b510      	push	{r4, lr}
 8015aca:	6803      	ldr	r3, [r0, #0]
 8015acc:	4604      	mov	r4, r0
 8015ace:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8015ad2:	4798      	blx	r3
 8015ad4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015ad6:	f7ff ffd3 	bl	8015a80 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 8015ada:	bd10      	pop	{r4, pc}

08015adc <_ZNK8touchgfx22AbstractDataGraphWithY19getXAxisOffsetAsIntEv>:
 8015adc:	b510      	push	{r4, lr}
 8015ade:	6803      	ldr	r3, [r0, #0]
 8015ae0:	4604      	mov	r4, r0
 8015ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8015ae6:	4798      	blx	r3
 8015ae8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015aea:	f7ff ffc9 	bl	8015a80 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 8015aee:	bd10      	pop	{r4, pc}

08015af0 <_ZNK8touchgfx17AbstractDataGraph8getAlphaEv>:
 8015af0:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 8015af4:	4770      	bx	lr

08015af6 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8015af6:	f8a0 3114 	strh.w	r3, [r0, #276]	; 0x114
 8015afa:	f9bd 3000 	ldrsh.w	r3, [sp]
 8015afe:	f8a0 1110 	strh.w	r1, [r0, #272]	; 0x110
 8015b02:	f8a0 2112 	strh.w	r2, [r0, #274]	; 0x112
 8015b06:	f8a0 3116 	strh.w	r3, [r0, #278]	; 0x116
 8015b0a:	4770      	bx	lr

08015b0c <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>:
 8015b0c:	f9b0 0110 	ldrsh.w	r0, [r0, #272]	; 0x110
 8015b10:	4770      	bx	lr

08015b12 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>:
 8015b12:	f8b0 3112 	ldrh.w	r3, [r0, #274]	; 0x112
 8015b16:	f8b0 2114 	ldrh.w	r2, [r0, #276]	; 0x114
 8015b1a:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8015b1c:	4413      	add	r3, r2
 8015b1e:	1ac0      	subs	r0, r0, r3
 8015b20:	b200      	sxth	r0, r0
 8015b22:	4770      	bx	lr

08015b24 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_>:
 8015b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b28:	4690      	mov	r8, r2
 8015b2a:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 8015b2e:	4604      	mov	r4, r0
 8015b30:	461e      	mov	r6, r3
 8015b32:	9d06      	ldr	r5, [sp, #24]
 8015b34:	b92a      	cbnz	r2, 8015b42 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8015b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015b3a:	802b      	strh	r3, [r5, #0]
 8015b3c:	8033      	strh	r3, [r6, #0]
 8015b3e:	2000      	movs	r0, #0
 8015b40:	e009      	b.n	8015b56 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>
 8015b42:	f7ff ffe6 	bl	8015b12 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 8015b46:	2801      	cmp	r0, #1
 8015b48:	d107      	bne.n	8015b5a <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x36>
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	8033      	strh	r3, [r6, #0]
 8015b4e:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 8015b52:	3b01      	subs	r3, #1
 8015b54:	802b      	strh	r3, [r5, #0]
 8015b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b5a:	f9b4 c112 	ldrsh.w	ip, [r4, #274]	; 0x112
 8015b5e:	1e42      	subs	r2, r0, #1
 8015b60:	f8d4 713c 	ldr.w	r7, [r4, #316]	; 0x13c
 8015b64:	eba1 0c0c 	sub.w	ip, r1, ip
 8015b68:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8015b6c:	ea4f 104c 	mov.w	r0, ip, lsl #5
 8015b70:	1af9      	subs	r1, r7, r3
 8015b72:	f004 f9ba 	bl	8019eea <_ZN8touchgfx6muldivElll>
 8015b76:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8015b7a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8015b7e:	eb00 1743 	add.w	r7, r0, r3, lsl #5
 8015b82:	4620      	mov	r0, r4
 8015b84:	1ac9      	subs	r1, r1, r3
 8015b86:	f7ff ffc4 	bl	8015b12 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 8015b8a:	f9b4 3112 	ldrsh.w	r3, [r4, #274]	; 0x112
 8015b8e:	1e42      	subs	r2, r0, #1
 8015b90:	eba8 0803 	sub.w	r8, r8, r3
 8015b94:	ea4f 1048 	mov.w	r0, r8, lsl #5
 8015b98:	f004 f9a7 	bl	8019eea <_ZN8touchgfx6muldivElll>
 8015b9c:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 8015ba0:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8015ba4:	4287      	cmp	r7, r0
 8015ba6:	bfc2      	ittt	gt
 8015ba8:	463b      	movgt	r3, r7
 8015baa:	4607      	movgt	r7, r0
 8015bac:	4618      	movgt	r0, r3
 8015bae:	2800      	cmp	r0, #0
 8015bb0:	bfb5      	itete	lt
 8015bb2:	2320      	movlt	r3, #32
 8015bb4:	301f      	addge	r0, #31
 8015bb6:	fb90 f0f3 	sdivlt	r0, r0, r3
 8015bba:	1140      	asrge	r0, r0, #5
 8015bbc:	2800      	cmp	r0, #0
 8015bbe:	da03      	bge.n	8015bc8 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0xa4>
 8015bc0:	2000      	movs	r0, #0
 8015bc2:	8028      	strh	r0, [r5, #0]
 8015bc4:	8030      	strh	r0, [r6, #0]
 8015bc6:	e7c6      	b.n	8015b56 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>
 8015bc8:	2320      	movs	r3, #32
 8015bca:	fb97 f7f3 	sdiv	r7, r7, r3
 8015bce:	f9b4 311a 	ldrsh.w	r3, [r4, #282]	; 0x11a
 8015bd2:	3b01      	subs	r3, #1
 8015bd4:	429f      	cmp	r7, r3
 8015bd6:	dd03      	ble.n	8015be0 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0xbc>
 8015bd8:	b218      	sxth	r0, r3
 8015bda:	8028      	strh	r0, [r5, #0]
 8015bdc:	8030      	strh	r0, [r6, #0]
 8015bde:	e7ae      	b.n	8015b3e <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8015be0:	4283      	cmp	r3, r0
 8015be2:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8015be6:	bfb8      	it	lt
 8015be8:	b218      	sxthlt	r0, r3
 8015bea:	8037      	strh	r7, [r6, #0]
 8015bec:	bfa8      	it	ge
 8015bee:	b200      	sxthge	r0, r0
 8015bf0:	8028      	strh	r0, [r5, #0]
 8015bf2:	2001      	movs	r0, #1
 8015bf4:	e7af      	b.n	8015b56 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>

08015bf6 <_ZNK8touchgfx22AbstractDataGraphWithY16valueToScreenXQ5Ei>:
 8015bf6:	b570      	push	{r4, r5, r6, lr}
 8015bf8:	4604      	mov	r4, r0
 8015bfa:	f8d0 5138 	ldr.w	r5, [r0, #312]	; 0x138
 8015bfe:	1b4e      	subs	r6, r1, r5
 8015c00:	f7ff ff87 	bl	8015b12 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 8015c04:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 8015c08:	1e41      	subs	r1, r0, #1
 8015c0a:	4630      	mov	r0, r6
 8015c0c:	1b52      	subs	r2, r2, r5
 8015c0e:	f7ff fec4 	bl	801599a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 8015c12:	f9b4 3112 	ldrsh.w	r3, [r4, #274]	; 0x112
 8015c16:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8015c1a:	bd70      	pop	{r4, r5, r6, pc}

08015c1c <_ZNK8touchgfx17AbstractDataGraph33getGraphAreaWidthIncludingPaddingEv>:
 8015c1c:	f9b0 003c 	ldrsh.w	r0, [r0, #60]	; 0x3c
 8015c20:	4770      	bx	lr

08015c22 <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>:
 8015c22:	f8b0 3110 	ldrh.w	r3, [r0, #272]	; 0x110
 8015c26:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
 8015c2a:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8015c2c:	4413      	add	r3, r2
 8015c2e:	1ac0      	subs	r0, r0, r3
 8015c30:	b200      	sxth	r0, r0
 8015c32:	4770      	bx	lr

08015c34 <_ZNK8touchgfx22AbstractDataGraphWithY16valueToScreenYQ5Ei>:
 8015c34:	b570      	push	{r4, r5, r6, lr}
 8015c36:	4605      	mov	r5, r0
 8015c38:	460e      	mov	r6, r1
 8015c3a:	f7ff fff2 	bl	8015c22 <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 8015c3e:	1e41      	subs	r1, r0, #1
 8015c40:	f9b5 4110 	ldrsh.w	r4, [r5, #272]	; 0x110
 8015c44:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 8015c48:	4404      	add	r4, r0
 8015c4a:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 8015c4e:	1af0      	subs	r0, r6, r3
 8015c50:	3c01      	subs	r4, #1
 8015c52:	1ad2      	subs	r2, r2, r3
 8015c54:	f7ff fea1 	bl	801599a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 8015c58:	0164      	lsls	r4, r4, #5
 8015c5a:	1a20      	subs	r0, r4, r0
 8015c5c:	bd70      	pop	{r4, r5, r6, pc}

08015c5e <_ZNK8touchgfx17AbstractDataGraph17getGapBeforeIndexEv>:
 8015c5e:	f9b0 011c 	ldrsh.w	r0, [r0, #284]	; 0x11c
 8015c62:	4770      	bx	lr

08015c64 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8015c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c66:	4604      	mov	r4, r0
 8015c68:	3034      	adds	r0, #52	; 0x34
 8015c6a:	460d      	mov	r5, r1
 8015c6c:	f7fe f8d2 	bl	8013e14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015c70:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 8015c74:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 8015c78:	4628      	mov	r0, r5
 8015c7a:	9200      	str	r2, [sp, #0]
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	4611      	mov	r1, r2
 8015c80:	f7ed ff1d 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
 8015c84:	b003      	add	sp, #12
 8015c86:	bd30      	pop	{r4, r5, pc}

08015c88 <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>:
 8015c88:	f9b0 011a 	ldrsh.w	r0, [r0, #282]	; 0x11a
 8015c8c:	4770      	bx	lr

08015c8e <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>:
 8015c8e:	b507      	push	{r0, r1, r2, lr}
 8015c90:	6803      	ldr	r3, [r0, #0]
 8015c92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015c96:	4798      	blx	r3
 8015c98:	ab02      	add	r3, sp, #8
 8015c9a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f7ff fe70 	bl	8015984 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015ca4:	b200      	sxth	r0, r0
 8015ca6:	b003      	add	sp, #12
 8015ca8:	f85d fb04 	ldr.w	pc, [sp], #4

08015cac <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8015cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cae:	f9b0 311a 	ldrsh.w	r3, [r0, #282]	; 0x11a
 8015cb2:	b085      	sub	sp, #20
 8015cb4:	4605      	mov	r5, r0
 8015cb6:	460f      	mov	r7, r1
 8015cb8:	4616      	mov	r6, r2
 8015cba:	b333      	cbz	r3, 8015d0a <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x5e>
 8015cbc:	6803      	ldr	r3, [r0, #0]
 8015cbe:	f10d 020e 	add.w	r2, sp, #14
 8015cc2:	9200      	str	r2, [sp, #0]
 8015cc4:	460a      	mov	r2, r1
 8015cc6:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 8015cca:	ab03      	add	r3, sp, #12
 8015ccc:	47a0      	blx	r4
 8015cce:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8015cd2:	4628      	mov	r0, r5
 8015cd4:	f7ff ffdb 	bl	8015c8e <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 8015cd8:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8015cdc:	4604      	mov	r4, r0
 8015cde:	4628      	mov	r0, r5
 8015ce0:	f7ff ffd5 	bl	8015c8e <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 8015ce4:	1bc0      	subs	r0, r0, r7
 8015ce6:	1be4      	subs	r4, r4, r7
 8015ce8:	2800      	cmp	r0, #0
 8015cea:	bfb8      	it	lt
 8015cec:	4240      	neglt	r0, r0
 8015cee:	2c00      	cmp	r4, #0
 8015cf0:	bfb8      	it	lt
 8015cf2:	4264      	neglt	r4, r4
 8015cf4:	42a0      	cmp	r0, r4
 8015cf6:	f04f 0001 	mov.w	r0, #1
 8015cfa:	bfac      	ite	ge
 8015cfc:	f9bd 300c 	ldrshge.w	r3, [sp, #12]
 8015d00:	f9bd 300e 	ldrshlt.w	r3, [sp, #14]
 8015d04:	8033      	strh	r3, [r6, #0]
 8015d06:	b005      	add	sp, #20
 8015d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	e7fb      	b.n	8015d06 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x5a>

08015d0e <_ZNK8touchgfx17AbstractDataGraph14indexToScreenYEs>:
 8015d0e:	b507      	push	{r0, r1, r2, lr}
 8015d10:	6803      	ldr	r3, [r0, #0]
 8015d12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8015d16:	4798      	blx	r3
 8015d18:	ab02      	add	r3, sp, #8
 8015d1a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f7ff fe30 	bl	8015984 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015d24:	b200      	sxth	r0, r0
 8015d26:	b003      	add	sp, #12
 8015d28:	f85d fb04 	ldr.w	pc, [sp], #4

08015d2c <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8015d2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d30:	4605      	mov	r5, r0
 8015d32:	f9b0 011a 	ldrsh.w	r0, [r0, #282]	; 0x11a
 8015d36:	4689      	mov	r9, r1
 8015d38:	4692      	mov	sl, r2
 8015d3a:	469b      	mov	fp, r3
 8015d3c:	b338      	cbz	r0, 8015d8e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x62>
 8015d3e:	2700      	movs	r7, #0
 8015d40:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8015d44:	b23e      	sxth	r6, r7
 8015d46:	f9b5 311a 	ldrsh.w	r3, [r5, #282]	; 0x11a
 8015d4a:	42b3      	cmp	r3, r6
 8015d4c:	dd1e      	ble.n	8015d8c <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x60>
 8015d4e:	4631      	mov	r1, r6
 8015d50:	4628      	mov	r0, r5
 8015d52:	f7ff ff9c 	bl	8015c8e <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 8015d56:	eba0 0409 	sub.w	r4, r0, r9
 8015d5a:	4631      	mov	r1, r6
 8015d5c:	4628      	mov	r0, r5
 8015d5e:	2c00      	cmp	r4, #0
 8015d60:	f107 0701 	add.w	r7, r7, #1
 8015d64:	bfb8      	it	lt
 8015d66:	4264      	neglt	r4, r4
 8015d68:	f7ff ffd1 	bl	8015d0e <_ZNK8touchgfx17AbstractDataGraph14indexToScreenYEs>
 8015d6c:	eba0 000a 	sub.w	r0, r0, sl
 8015d70:	b224      	sxth	r4, r4
 8015d72:	2800      	cmp	r0, #0
 8015d74:	bfb8      	it	lt
 8015d76:	4240      	neglt	r0, r0
 8015d78:	fb10 f000 	smulbb	r0, r0, r0
 8015d7c:	fb04 0004 	mla	r0, r4, r4, r0
 8015d80:	4540      	cmp	r0, r8
 8015d82:	bfbc      	itt	lt
 8015d84:	f8ab 6000 	strhlt.w	r6, [fp]
 8015d88:	4680      	movlt	r8, r0
 8015d8a:	e7db      	b.n	8015d44 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8015d8c:	2001      	movs	r0, #1
 8015d8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d92 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8015d92:	b538      	push	{r3, r4, r5, lr}
 8015d94:	f9b0 311a 	ldrsh.w	r3, [r0, #282]	; 0x11a
 8015d98:	460d      	mov	r5, r1
 8015d9a:	428b      	cmp	r3, r1
 8015d9c:	dd08      	ble.n	8015db0 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8015d9e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8015da0:	b134      	cbz	r4, 8015db0 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8015da2:	6823      	ldr	r3, [r4, #0]
 8015da4:	4620      	mov	r0, r4
 8015da6:	4629      	mov	r1, r5
 8015da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015daa:	4798      	blx	r3
 8015dac:	69a4      	ldr	r4, [r4, #24]
 8015dae:	e7f7      	b.n	8015da0 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8015db0:	bd38      	pop	{r3, r4, r5, pc}

08015db2 <_ZN8touchgfx17AbstractDataGraph19invalidateGraphAreaEv>:
 8015db2:	3034      	adds	r0, #52	; 0x34
 8015db4:	f003 bed4 	b.w	8019b60 <_ZNK8touchgfx8Drawable10invalidateEv>

08015db8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8015db8:	b570      	push	{r4, r5, r6, lr}
 8015dba:	4606      	mov	r6, r0
 8015dbc:	460d      	mov	r5, r1
 8015dbe:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
 8015dc2:	b134      	cbz	r4, 8015dd2 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 8015dc4:	6823      	ldr	r3, [r4, #0]
 8015dc6:	4620      	mov	r0, r4
 8015dc8:	4629      	mov	r1, r5
 8015dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015dcc:	4798      	blx	r3
 8015dce:	69a4      	ldr	r4, [r4, #24]
 8015dd0:	e7f7      	b.n	8015dc2 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 8015dd2:	f8d6 410c 	ldr.w	r4, [r6, #268]	; 0x10c
 8015dd6:	b134      	cbz	r4, 8015de6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8015dd8:	6823      	ldr	r3, [r4, #0]
 8015dda:	4620      	mov	r0, r4
 8015ddc:	4629      	mov	r1, r5
 8015dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015de0:	4798      	blx	r3
 8015de2:	69a4      	ldr	r4, [r4, #24]
 8015de4:	e7f7      	b.n	8015dd6 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8015de6:	bd70      	pop	{r4, r5, r6, pc}

08015de8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 8015de8:	b570      	push	{r4, r5, r6, lr}
 8015dea:	6803      	ldr	r3, [r0, #0]
 8015dec:	4605      	mov	r5, r0
 8015dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015df2:	4798      	blx	r3
 8015df4:	682b      	ldr	r3, [r5, #0]
 8015df6:	4604      	mov	r4, r0
 8015df8:	4628      	mov	r0, r5
 8015dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015dfe:	4798      	blx	r3
 8015e00:	4284      	cmp	r4, r0
 8015e02:	4606      	mov	r6, r0
 8015e04:	bfc2      	ittt	gt
 8015e06:	b223      	sxthgt	r3, r4
 8015e08:	4604      	movgt	r4, r0
 8015e0a:	461e      	movgt	r6, r3
 8015e0c:	42a6      	cmp	r6, r4
 8015e0e:	db05      	blt.n	8015e1c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x34>
 8015e10:	b221      	sxth	r1, r4
 8015e12:	4628      	mov	r0, r5
 8015e14:	f7ff ffd0 	bl	8015db8 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8015e18:	3401      	adds	r4, #1
 8015e1a:	e7f7      	b.n	8015e0c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x24>
 8015e1c:	bd70      	pop	{r4, r5, r6, pc}

08015e1e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 8015e1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e20:	4604      	mov	r4, r0
 8015e22:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8015e24:	b15d      	cbz	r5, 8015e3e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 8015e26:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 8015e2a:	4628      	mov	r0, r5
 8015e2c:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 8015e30:	9200      	str	r2, [sp, #0]
 8015e32:	2200      	movs	r2, #0
 8015e34:	4611      	mov	r1, r2
 8015e36:	f7ed fe42 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
 8015e3a:	69ad      	ldr	r5, [r5, #24]
 8015e3c:	e7f2      	b.n	8015e24 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8015e3e:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 8015e42:	b15d      	cbz	r5, 8015e5c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8015e44:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	; 0xc2
 8015e48:	4628      	mov	r0, r5
 8015e4a:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	; 0xc0
 8015e4e:	9200      	str	r2, [sp, #0]
 8015e50:	2200      	movs	r2, #0
 8015e52:	4611      	mov	r1, r2
 8015e54:	f7ed fe33 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
 8015e58:	69ad      	ldr	r5, [r5, #24]
 8015e5a:	e7f2      	b.n	8015e42 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 8015e5c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8015e60:	b15d      	cbz	r5, 8015e7a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8015e62:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	; 0x6a
 8015e66:	4628      	mov	r0, r5
 8015e68:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8015e6c:	9200      	str	r2, [sp, #0]
 8015e6e:	2200      	movs	r2, #0
 8015e70:	4611      	mov	r1, r2
 8015e72:	f7ed fe24 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
 8015e76:	69ad      	ldr	r5, [r5, #24]
 8015e78:	e7f2      	b.n	8015e60 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8015e7a:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8015e7e:	b15d      	cbz	r5, 8015e98 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8015e80:	f9b4 2096 	ldrsh.w	r2, [r4, #150]	; 0x96
 8015e84:	4628      	mov	r0, r5
 8015e86:	f9b4 3094 	ldrsh.w	r3, [r4, #148]	; 0x94
 8015e8a:	9200      	str	r2, [sp, #0]
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	4611      	mov	r1, r2
 8015e90:	f7ed fe15 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
 8015e94:	69ad      	ldr	r5, [r5, #24]
 8015e96:	e7f2      	b.n	8015e7e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8015e98:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 8015e9c:	b15d      	cbz	r5, 8015eb6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8015e9e:	f9b4 20ee 	ldrsh.w	r2, [r4, #238]	; 0xee
 8015ea2:	4628      	mov	r0, r5
 8015ea4:	f9b4 30ec 	ldrsh.w	r3, [r4, #236]	; 0xec
 8015ea8:	9200      	str	r2, [sp, #0]
 8015eaa:	2200      	movs	r2, #0
 8015eac:	4611      	mov	r1, r2
 8015eae:	f7ed fe06 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
 8015eb2:	69ad      	ldr	r5, [r5, #24]
 8015eb4:	e7f2      	b.n	8015e9c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8015eb6:	6823      	ldr	r3, [r4, #0]
 8015eb8:	4620      	mov	r0, r4
 8015eba:	695b      	ldr	r3, [r3, #20]
 8015ebc:	b003      	add	sp, #12
 8015ebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ec2:	4718      	bx	r3

08015ec4 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8015ec4:	b430      	push	{r4, r5}
 8015ec6:	b28a      	uxth	r2, r1
 8015ec8:	f8b0 4094 	ldrh.w	r4, [r0, #148]	; 0x94
 8015ecc:	f8a0 10c0 	strh.w	r1, [r0, #192]	; 0xc0
 8015ed0:	1b15      	subs	r5, r2, r4
 8015ed2:	f8a0 10ec 	strh.w	r1, [r0, #236]	; 0xec
 8015ed6:	8101      	strh	r1, [r0, #8]
 8015ed8:	f8a0 5090 	strh.w	r5, [r0, #144]	; 0x90
 8015edc:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8015ee0:	442c      	add	r4, r5
 8015ee2:	1b12      	subs	r2, r2, r4
 8015ee4:	bc30      	pop	{r4, r5}
 8015ee6:	8782      	strh	r2, [r0, #60]	; 0x3c
 8015ee8:	f7ff bf99 	b.w	8015e1e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08015eec <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8015eec:	b430      	push	{r4, r5}
 8015eee:	b28a      	uxth	r2, r1
 8015ef0:	f8b0 40ee 	ldrh.w	r4, [r0, #238]	; 0xee
 8015ef4:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
 8015ef8:	1b15      	subs	r5, r2, r4
 8015efa:	f8a0 1096 	strh.w	r1, [r0, #150]	; 0x96
 8015efe:	8141      	strh	r1, [r0, #10]
 8015f00:	f8a0 50ea 	strh.w	r5, [r0, #234]	; 0xea
 8015f04:	f8b0 50c2 	ldrh.w	r5, [r0, #194]	; 0xc2
 8015f08:	442c      	add	r4, r5
 8015f0a:	1b12      	subs	r2, r2, r4
 8015f0c:	bc30      	pop	{r4, r5}
 8015f0e:	87c2      	strh	r2, [r0, #62]	; 0x3e
 8015f10:	f7ff bf85 	b.w	8015e1e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08015f14 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8015f14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015f18:	fa1f fa83 	uxth.w	sl, r3
 8015f1c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 8015f20:	4615      	mov	r5, r2
 8015f22:	4699      	mov	r9, r3
 8015f24:	fa1f f887 	uxth.w	r8, r7
 8015f28:	8903      	ldrh	r3, [r0, #8]
 8015f2a:	4452      	add	r2, sl
 8015f2c:	4604      	mov	r4, r0
 8015f2e:	8940      	ldrh	r0, [r0, #10]
 8015f30:	460e      	mov	r6, r1
 8015f32:	1a9b      	subs	r3, r3, r2
 8015f34:	eb08 0201 	add.w	r2, r8, r1
 8015f38:	1a80      	subs	r0, r0, r2
 8015f3a:	b21b      	sxth	r3, r3
 8015f3c:	460a      	mov	r2, r1
 8015f3e:	4629      	mov	r1, r5
 8015f40:	b200      	sxth	r0, r0
 8015f42:	9000      	str	r0, [sp, #0]
 8015f44:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8015f48:	f7ed fdb9 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015f52:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8015f56:	4611      	mov	r1, r2
 8015f58:	9600      	str	r6, [sp, #0]
 8015f5a:	f7ed fdb0 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
 8015f5e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015f62:	2200      	movs	r2, #0
 8015f64:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8015f68:	9300      	str	r3, [sp, #0]
 8015f6a:	462b      	mov	r3, r5
 8015f6c:	4611      	mov	r1, r2
 8015f6e:	f7ed fda6 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
 8015f72:	8921      	ldrh	r1, [r4, #8]
 8015f74:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015f78:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8015f7c:	eba1 010a 	sub.w	r1, r1, sl
 8015f80:	2200      	movs	r2, #0
 8015f82:	9300      	str	r3, [sp, #0]
 8015f84:	464b      	mov	r3, r9
 8015f86:	b209      	sxth	r1, r1
 8015f88:	f7ed fd99 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
 8015f8c:	8962      	ldrh	r2, [r4, #10]
 8015f8e:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 8015f92:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015f96:	eba2 0208 	sub.w	r2, r2, r8
 8015f9a:	9700      	str	r7, [sp, #0]
 8015f9c:	2100      	movs	r1, #0
 8015f9e:	b212      	sxth	r2, r2
 8015fa0:	f7ed fd8d 	bl	8003abe <_ZN8touchgfx8Drawable11setPositionEssss>
 8015fa4:	4620      	mov	r0, r4
 8015fa6:	b002      	add	sp, #8
 8015fa8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fac:	f7ff bf37 	b.w	8015e1e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08015fb0 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8015fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fb4:	b085      	sub	sp, #20
 8015fb6:	4604      	mov	r4, r0
 8015fb8:	2500      	movs	r5, #0
 8015fba:	2701      	movs	r7, #1
 8015fbc:	9103      	str	r1, [sp, #12]
 8015fbe:	f7ef fb03 	bl	80055c8 <_ZN8touchgfx8DrawableC1Ev>
 8015fc2:	4b32      	ldr	r3, [pc, #200]	; (801608c <_ZN8touchgfx17AbstractDataGraphC1Es+0xdc>)
 8015fc4:	f104 0a60 	add.w	sl, r4, #96	; 0x60
 8015fc8:	4e31      	ldr	r6, [pc, #196]	; (8016090 <_ZN8touchgfx17AbstractDataGraphC1Es+0xe0>)
 8015fca:	f104 098c 	add.w	r9, r4, #140	; 0x8c
 8015fce:	6023      	str	r3, [r4, #0]
 8015fd0:	23ff      	movs	r3, #255	; 0xff
 8015fd2:	62a5      	str	r5, [r4, #40]	; 0x28
 8015fd4:	f104 0bb8 	add.w	fp, r4, #184	; 0xb8
 8015fd8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8015fdc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8015fe0:	62e7      	str	r7, [r4, #44]	; 0x2c
 8015fe2:	f104 08e4 	add.w	r8, r4, #228	; 0xe4
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	9302      	str	r3, [sp, #8]
 8015fea:	f7ef faed 	bl	80055c8 <_ZN8touchgfx8DrawableC1Ev>
 8015fee:	6366      	str	r6, [r4, #52]	; 0x34
 8015ff0:	65e5      	str	r5, [r4, #92]	; 0x5c
 8015ff2:	4650      	mov	r0, sl
 8015ff4:	f7ef fae8 	bl	80055c8 <_ZN8touchgfx8DrawableC1Ev>
 8015ff8:	6626      	str	r6, [r4, #96]	; 0x60
 8015ffa:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8015ffe:	4648      	mov	r0, r9
 8016000:	f7ef fae2 	bl	80055c8 <_ZN8touchgfx8DrawableC1Ev>
 8016004:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8016008:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
 801600c:	4658      	mov	r0, fp
 801600e:	f7ef fadb 	bl	80055c8 <_ZN8touchgfx8DrawableC1Ev>
 8016012:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 8016016:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 801601a:	4640      	mov	r0, r8
 801601c:	f7ef fad4 	bl	80055c8 <_ZN8touchgfx8DrawableC1Ev>
 8016020:	9b02      	ldr	r3, [sp, #8]
 8016022:	9903      	ldr	r1, [sp, #12]
 8016024:	4620      	mov	r0, r4
 8016026:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
 801602a:	f8a4 1118 	strh.w	r1, [r4, #280]	; 0x118
 801602e:	4619      	mov	r1, r3
 8016030:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
 8016034:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8016038:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 801603c:	f8a4 511a 	strh.w	r5, [r4, #282]	; 0x11a
 8016040:	f8a4 511c 	strh.w	r5, [r4, #284]	; 0x11c
 8016044:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 8016048:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 801604c:	f7fd fee2 	bl	8013e14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016050:	4659      	mov	r1, fp
 8016052:	4620      	mov	r0, r4
 8016054:	f7fd fede 	bl	8013e14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016058:	4651      	mov	r1, sl
 801605a:	4620      	mov	r0, r4
 801605c:	f7fd feda 	bl	8013e14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016060:	4649      	mov	r1, r9
 8016062:	4620      	mov	r0, r4
 8016064:	f7fd fed6 	bl	8013e14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016068:	4641      	mov	r1, r8
 801606a:	4620      	mov	r0, r4
 801606c:	f7fd fed2 	bl	8013e14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016070:	4620      	mov	r0, r4
 8016072:	9500      	str	r5, [sp, #0]
 8016074:	462b      	mov	r3, r5
 8016076:	462a      	mov	r2, r5
 8016078:	4629      	mov	r1, r5
 801607a:	f7ff ff4b 	bl	8015f14 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 801607e:	4620      	mov	r0, r4
 8016080:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 8016084:	b005      	add	sp, #20
 8016086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801608a:	bf00      	nop
 801608c:	080295d0 	.word	0x080295d0
 8016090:	08028a68 	.word	0x08028a68

08016094 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>:
 8016094:	460b      	mov	r3, r1
 8016096:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8016098:	4291      	cmp	r1, r2
 801609a:	4618      	mov	r0, r3
 801609c:	d001      	beq.n	80160a2 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii+0xe>
 801609e:	f003 bf24 	b.w	8019eea <_ZN8touchgfx6muldivElll>
 80160a2:	4770      	bx	lr

080160a4 <_ZN8touchgfx22AbstractDataGraphWithY8setScaleEi>:
 80160a4:	b538      	push	{r3, r4, r5, lr}
 80160a6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80160a8:	4604      	mov	r4, r0
 80160aa:	62c1      	str	r1, [r0, #44]	; 0x2c
 80160ac:	462a      	mov	r2, r5
 80160ae:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
 80160b2:	f7ff ffef 	bl	8016094 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>
 80160b6:	462a      	mov	r2, r5
 80160b8:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 80160bc:	4620      	mov	r0, r4
 80160be:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 80160c2:	f7ff ffe7 	bl	8016094 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>
 80160c6:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
 80160ca:	bd38      	pop	{r3, r4, r5, pc}

080160cc <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi>:
 80160cc:	b570      	push	{r4, r5, r6, lr}
 80160ce:	4604      	mov	r4, r0
 80160d0:	460d      	mov	r5, r1
 80160d2:	4616      	mov	r6, r2
 80160d4:	f7ff ff6c 	bl	8015fb0 <_ZN8touchgfx17AbstractDataGraphC1Es>
 80160d8:	2100      	movs	r1, #0
 80160da:	4b11      	ldr	r3, [pc, #68]	; (8016120 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x54>)
 80160dc:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 80160e0:	6023      	str	r3, [r4, #0]
 80160e2:	428d      	cmp	r5, r1
 80160e4:	f04f 0301 	mov.w	r3, #1
 80160e8:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 80160ec:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
 80160f0:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 80160f4:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 80160f8:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
 80160fc:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 8016100:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
 8016104:	dc06      	bgt.n	8016114 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x48>
 8016106:	4b07      	ldr	r3, [pc, #28]	; (8016124 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x58>)
 8016108:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 801610c:	4a06      	ldr	r2, [pc, #24]	; (8016128 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x5c>)
 801610e:	4807      	ldr	r0, [pc, #28]	; (801612c <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x60>)
 8016110:	f00f fd32 	bl	8025b78 <__assert_func>
 8016114:	4620      	mov	r0, r4
 8016116:	1e6a      	subs	r2, r5, #1
 8016118:	f7ff fbaa 	bl	8015870 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii>
 801611c:	4620      	mov	r0, r4
 801611e:	bd70      	pop	{r4, r5, r6, pc}
 8016120:	080296c4 	.word	0x080296c4
 8016124:	080295bb 	.word	0x080295bb
 8016128:	0802987a 	.word	0x0802987a
 801612c:	0802957d 	.word	0x0802957d

08016130 <_ZN8touchgfx22AbstractDataGraphWithY18addDataPointScaledEi>:
 8016130:	b570      	push	{r4, r5, r6, lr}
 8016132:	6803      	ldr	r3, [r0, #0]
 8016134:	4604      	mov	r4, r0
 8016136:	460d      	mov	r5, r1
 8016138:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801613c:	4798      	blx	r3
 801613e:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8016142:	4629      	mov	r1, r5
 8016144:	4620      	mov	r0, r4
 8016146:	3301      	adds	r3, #1
 8016148:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 801614c:	6823      	ldr	r3, [r4, #0]
 801614e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016152:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8016156:	4718      	bx	r3

08016158 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>:
 8016158:	b510      	push	{r4, lr}
 801615a:	4604      	mov	r4, r0
 801615c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801615e:	f7ff fc32 	bl	80159c6 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 8016162:	4601      	mov	r1, r0
 8016164:	4620      	mov	r0, r4
 8016166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801616a:	f7ff bfe1 	b.w	8016130 <_ZN8touchgfx22AbstractDataGraphWithY18addDataPointScaledEi>

0801616e <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>:
 801616e:	6803      	ldr	r3, [r0, #0]
 8016170:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8016174:	4718      	bx	r3

08016176 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>:
 8016176:	6803      	ldr	r3, [r0, #0]
 8016178:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801617c:	4718      	bx	r3

0801617e <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801617e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016180:	4604      	mov	r4, r0
 8016182:	4608      	mov	r0, r1
 8016184:	460d      	mov	r5, r1
 8016186:	f7fd ffca 	bl	801411e <_ZNK8touchgfx4Rect7isEmptyEv>
 801618a:	b978      	cbnz	r0, 80161ac <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801618c:	4620      	mov	r0, r4
 801618e:	f7fd ffc6 	bl	801411e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016192:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016196:	b150      	cbz	r0, 80161ae <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016198:	8026      	strh	r6, [r4, #0]
 801619a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801619e:	8063      	strh	r3, [r4, #2]
 80161a0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80161a4:	80a3      	strh	r3, [r4, #4]
 80161a6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80161aa:	80e3      	strh	r3, [r4, #6]
 80161ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161ae:	f9b4 1000 	ldrsh.w	r1, [r4]
 80161b2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80161b6:	42b1      	cmp	r1, r6
 80161b8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80161bc:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80161c0:	460f      	mov	r7, r1
 80161c2:	88ed      	ldrh	r5, [r5, #6]
 80161c4:	bfa8      	it	ge
 80161c6:	4637      	movge	r7, r6
 80161c8:	4293      	cmp	r3, r2
 80161ca:	4618      	mov	r0, r3
 80161cc:	4466      	add	r6, ip
 80161ce:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80161d2:	bfa8      	it	ge
 80161d4:	4610      	movge	r0, r2
 80161d6:	442a      	add	r2, r5
 80161d8:	88e5      	ldrh	r5, [r4, #6]
 80161da:	4461      	add	r1, ip
 80161dc:	b236      	sxth	r6, r6
 80161de:	8027      	strh	r7, [r4, #0]
 80161e0:	442b      	add	r3, r5
 80161e2:	b209      	sxth	r1, r1
 80161e4:	b212      	sxth	r2, r2
 80161e6:	8060      	strh	r0, [r4, #2]
 80161e8:	b21b      	sxth	r3, r3
 80161ea:	428e      	cmp	r6, r1
 80161ec:	bfac      	ite	ge
 80161ee:	ebc7 0106 	rsbge	r1, r7, r6
 80161f2:	ebc7 0101 	rsblt	r1, r7, r1
 80161f6:	429a      	cmp	r2, r3
 80161f8:	bfac      	ite	ge
 80161fa:	ebc0 0202 	rsbge	r2, r0, r2
 80161fe:	ebc0 0203 	rsblt	r2, r0, r3
 8016202:	80a1      	strh	r1, [r4, #4]
 8016204:	80e2      	strh	r2, [r4, #6]
 8016206:	e7d1      	b.n	80161ac <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08016208 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8016208:	6800      	ldr	r0, [r0, #0]
 801620a:	2800      	cmp	r0, #0
 801620c:	bfb9      	ittee	lt
 801620e:	2320      	movlt	r3, #32
 8016210:	fb90 f0f3 	sdivlt	r0, r0, r3
 8016214:	301f      	addge	r0, #31
 8016216:	1140      	asrge	r0, r0, #5
 8016218:	4770      	bx	lr

0801621a <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>:
 801621a:	b507      	push	{r0, r1, r2, lr}
 801621c:	ab02      	add	r3, sp, #8
 801621e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8016222:	4618      	mov	r0, r3
 8016224:	f7ff fbae 	bl	8015984 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016228:	0140      	lsls	r0, r0, #5
 801622a:	b003      	add	sp, #12
 801622c:	f85d fb04 	ldr.w	pc, [sp], #4

08016230 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8016230:	b510      	push	{r4, lr}
 8016232:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8016236:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 801623a:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 801623e:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8016242:	139b      	asrs	r3, r3, #14
 8016244:	13a4      	asrs	r4, r4, #14
 8016246:	429c      	cmp	r4, r3
 8016248:	bfb8      	it	lt
 801624a:	461c      	movlt	r4, r3
 801624c:	2c01      	cmp	r4, #1
 801624e:	dd07      	ble.n	8016260 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8016250:	fb91 f1f4 	sdiv	r1, r1, r4
 8016254:	fb90 f0f4 	sdiv	r0, r0, r4
 8016258:	f7ff ffea 	bl	8016230 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801625c:	4360      	muls	r0, r4
 801625e:	bd10      	pop	{r4, pc}
 8016260:	4340      	muls	r0, r0
 8016262:	fb01 0101 	mla	r1, r1, r1, r0
 8016266:	2000      	movs	r0, #0
 8016268:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801626c:	bfb4      	ite	lt
 801626e:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 8016272:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8016276:	18c2      	adds	r2, r0, r3
 8016278:	428a      	cmp	r2, r1
 801627a:	bf9c      	itt	ls
 801627c:	1898      	addls	r0, r3, r2
 801627e:	1a89      	subls	r1, r1, r2
 8016280:	089b      	lsrs	r3, r3, #2
 8016282:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8016286:	d1f6      	bne.n	8016276 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 8016288:	e7e9      	b.n	801625e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>
	...

0801628c <_ZN8touchgfx20AbstractGraphElementC1Ev>:
 801628c:	b510      	push	{r4, lr}
 801628e:	4604      	mov	r4, r0
 8016290:	f7ff f9fe 	bl	8015690 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016294:	4b02      	ldr	r3, [pc, #8]	; (80162a0 <_ZN8touchgfx20AbstractGraphElementC1Ev+0x14>)
 8016296:	4620      	mov	r0, r4
 8016298:	6023      	str	r3, [r4, #0]
 801629a:	2301      	movs	r3, #1
 801629c:	6323      	str	r3, [r4, #48]	; 0x30
 801629e:	bd10      	pop	{r4, pc}
 80162a0:	080284d4 	.word	0x080284d4

080162a4 <_ZN8touchgfx20AbstractGraphElement8setScaleEi>:
 80162a4:	6301      	str	r1, [r0, #48]	; 0x30
 80162a6:	4770      	bx	lr

080162a8 <_ZNK8touchgfx20AbstractGraphElement24xScreenRangeToIndexRangeEssRsS1_>:
 80162a8:	b410      	push	{r4}
 80162aa:	6940      	ldr	r0, [r0, #20]
 80162ac:	6940      	ldr	r0, [r0, #20]
 80162ae:	6804      	ldr	r4, [r0, #0]
 80162b0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80162b4:	46a4      	mov	ip, r4
 80162b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162ba:	4760      	bx	ip

080162bc <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 80162bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162be:	9906      	ldr	r1, [sp, #24]
 80162c0:	4606      	mov	r6, r0
 80162c2:	461c      	mov	r4, r3
 80162c4:	2020      	movs	r0, #32
 80162c6:	4291      	cmp	r1, r2
 80162c8:	bfbc      	itt	lt
 80162ca:	9206      	strlt	r2, [sp, #24]
 80162cc:	460a      	movlt	r2, r1
 80162ce:	9907      	ldr	r1, [sp, #28]
 80162d0:	428b      	cmp	r3, r1
 80162d2:	bfc4      	itt	gt
 80162d4:	460c      	movgt	r4, r1
 80162d6:	9307      	strgt	r3, [sp, #28]
 80162d8:	fb92 f5f0 	sdiv	r5, r2, r0
 80162dc:	fb94 f4f0 	sdiv	r4, r4, r0
 80162e0:	a806      	add	r0, sp, #24
 80162e2:	f7ff ff91 	bl	8016208 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80162e6:	4607      	mov	r7, r0
 80162e8:	a807      	add	r0, sp, #28
 80162ea:	f7ff ff8d 	bl	8016208 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80162ee:	1b7a      	subs	r2, r7, r5
 80162f0:	1b00      	subs	r0, r0, r4
 80162f2:	8035      	strh	r5, [r6, #0]
 80162f4:	8074      	strh	r4, [r6, #2]
 80162f6:	80f0      	strh	r0, [r6, #6]
 80162f8:	4630      	mov	r0, r6
 80162fa:	80b2      	strh	r2, [r6, #4]
 80162fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080162fe <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 80162fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016300:	9c08      	ldr	r4, [sp, #32]
 8016302:	2602      	movs	r6, #2
 8016304:	4605      	mov	r5, r0
 8016306:	3401      	adds	r4, #1
 8016308:	fb94 f4f6 	sdiv	r4, r4, r6
 801630c:	18a6      	adds	r6, r4, r2
 801630e:	191f      	adds	r7, r3, r4
 8016310:	1b12      	subs	r2, r2, r4
 8016312:	1b1b      	subs	r3, r3, r4
 8016314:	e9cd 6700 	strd	r6, r7, [sp]
 8016318:	f7ff ffd0 	bl	80162bc <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 801631c:	4628      	mov	r0, r5
 801631e:	b003      	add	sp, #12
 8016320:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016322 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8016322:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016326:	6943      	ldr	r3, [r0, #20]
 8016328:	b089      	sub	sp, #36	; 0x24
 801632a:	f890 9034 	ldrb.w	r9, [r0, #52]	; 0x34
 801632e:	460d      	mov	r5, r1
 8016330:	695c      	ldr	r4, [r3, #20]
 8016332:	4680      	mov	r8, r0
 8016334:	ea4f 1949 	mov.w	r9, r9, lsl #5
 8016338:	af02      	add	r7, sp, #8
 801633a:	4620      	mov	r0, r4
 801633c:	f7ff ff1b 	bl	8016176 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 8016340:	4606      	mov	r6, r0
 8016342:	4629      	mov	r1, r5
 8016344:	4620      	mov	r0, r4
 8016346:	f7ff ff12 	bl	801616e <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 801634a:	4632      	mov	r2, r6
 801634c:	4603      	mov	r3, r0
 801634e:	f8cd 9000 	str.w	r9, [sp]
 8016352:	4641      	mov	r1, r8
 8016354:	4638      	mov	r0, r7
 8016356:	f7ff ffd2 	bl	80162fe <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801635a:	2d00      	cmp	r5, #0
 801635c:	ae06      	add	r6, sp, #24
 801635e:	dd18      	ble.n	8016392 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x70>
 8016360:	f105 3aff 	add.w	sl, r5, #4294967295
 8016364:	4620      	mov	r0, r4
 8016366:	fa0f fa8a 	sxth.w	sl, sl
 801636a:	4651      	mov	r1, sl
 801636c:	f7ff ff03 	bl	8016176 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 8016370:	4683      	mov	fp, r0
 8016372:	4651      	mov	r1, sl
 8016374:	4620      	mov	r0, r4
 8016376:	f7ff fefa 	bl	801616e <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 801637a:	4641      	mov	r1, r8
 801637c:	4603      	mov	r3, r0
 801637e:	f8cd 9000 	str.w	r9, [sp]
 8016382:	4630      	mov	r0, r6
 8016384:	465a      	mov	r2, fp
 8016386:	f7ff ffba 	bl	80162fe <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801638a:	4631      	mov	r1, r6
 801638c:	4638      	mov	r0, r7
 801638e:	f7ff fef6 	bl	801617e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016392:	4620      	mov	r0, r4
 8016394:	f7ff fc78 	bl	8015c88 <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>
 8016398:	3801      	subs	r0, #1
 801639a:	4285      	cmp	r5, r0
 801639c:	da16      	bge.n	80163cc <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xaa>
 801639e:	3501      	adds	r5, #1
 80163a0:	4620      	mov	r0, r4
 80163a2:	b22d      	sxth	r5, r5
 80163a4:	4629      	mov	r1, r5
 80163a6:	f7ff fee6 	bl	8016176 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 80163aa:	4682      	mov	sl, r0
 80163ac:	4629      	mov	r1, r5
 80163ae:	4620      	mov	r0, r4
 80163b0:	f7ff fedd 	bl	801616e <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 80163b4:	4641      	mov	r1, r8
 80163b6:	4603      	mov	r3, r0
 80163b8:	f8cd 9000 	str.w	r9, [sp]
 80163bc:	4630      	mov	r0, r6
 80163be:	4652      	mov	r2, sl
 80163c0:	f7ff ff9d 	bl	80162fe <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 80163c4:	4631      	mov	r1, r6
 80163c6:	4638      	mov	r0, r7
 80163c8:	f7ff fed9 	bl	801617e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80163cc:	4620      	mov	r0, r4
 80163ce:	f7ff fb9d 	bl	8015b0c <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 80163d2:	4681      	mov	r9, r0
 80163d4:	4620      	mov	r0, r4
 80163d6:	f7ff fc21 	bl	8015c1c <_ZNK8touchgfx17AbstractDataGraph33getGraphAreaWidthIncludingPaddingEv>
 80163da:	4605      	mov	r5, r0
 80163dc:	4620      	mov	r0, r4
 80163de:	f7ff fc20 	bl	8015c22 <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 80163e2:	f8ad 0016 	strh.w	r0, [sp, #22]
 80163e6:	2300      	movs	r3, #0
 80163e8:	f8ad 9012 	strh.w	r9, [sp, #18]
 80163ec:	f8ad 5014 	strh.w	r5, [sp, #20]
 80163f0:	f8ad 3010 	strh.w	r3, [sp, #16]
 80163f4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80163f8:	e886 0003 	stmia.w	r6, {r0, r1}
 80163fc:	a904      	add	r1, sp, #16
 80163fe:	4630      	mov	r0, r6
 8016400:	f7fd fe4a 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 8016404:	f8d8 3000 	ldr.w	r3, [r8]
 8016408:	e896 0003 	ldmia.w	r6, {r0, r1}
 801640c:	691b      	ldr	r3, [r3, #16]
 801640e:	e887 0003 	stmia.w	r7, {r0, r1}
 8016412:	4639      	mov	r1, r7
 8016414:	4640      	mov	r0, r8
 8016416:	4798      	blx	r3
 8016418:	b009      	add	sp, #36	; 0x24
 801641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016420 <_ZN8touchgfx16GraphElementLineC1Ev>:
 8016420:	b510      	push	{r4, lr}
 8016422:	4604      	mov	r4, r0
 8016424:	f7ff ff32 	bl	801628c <_ZN8touchgfx20AbstractGraphElementC1Ev>
 8016428:	4b03      	ldr	r3, [pc, #12]	; (8016438 <_ZN8touchgfx16GraphElementLineC1Ev+0x18>)
 801642a:	4620      	mov	r0, r4
 801642c:	6023      	str	r3, [r4, #0]
 801642e:	2302      	movs	r3, #2
 8016430:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8016434:	bd10      	pop	{r4, pc}
 8016436:	bf00      	nop
 8016438:	080298cc 	.word	0x080298cc

0801643c <_ZN8touchgfx16GraphElementLine12setLineWidthEh>:
 801643c:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 8016440:	4770      	bx	lr

08016442 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8016442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016446:	b087      	sub	sp, #28
 8016448:	461d      	mov	r5, r3
 801644a:	4690      	mov	r8, r2
 801644c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8016450:	9102      	str	r1, [sp, #8]
 8016452:	429d      	cmp	r5, r3
 8016454:	9304      	str	r3, [sp, #16]
 8016456:	d059      	beq.n	801650c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xca>
 8016458:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 801645c:	4629      	mov	r1, r5
 801645e:	4610      	mov	r0, r2
 8016460:	462c      	mov	r4, r5
 8016462:	015b      	lsls	r3, r3, #5
 8016464:	9303      	str	r3, [sp, #12]
 8016466:	f7ff fe86 	bl	8016176 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 801646a:	f7ff fed6 	bl	801621a <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>
 801646e:	4629      	mov	r1, r5
 8016470:	4606      	mov	r6, r0
 8016472:	4640      	mov	r0, r8
 8016474:	f7ff fe7b 	bl	801616e <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 8016478:	f7ff fecf 	bl	801621a <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>
 801647c:	4631      	mov	r1, r6
 801647e:	4602      	mov	r2, r0
 8016480:	4607      	mov	r7, r0
 8016482:	9802      	ldr	r0, [sp, #8]
 8016484:	f00e f947 	bl	8024716 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016488:	2301      	movs	r3, #1
 801648a:	9300      	str	r3, [sp, #0]
 801648c:	4640      	mov	r0, r8
 801648e:	9b00      	ldr	r3, [sp, #0]
 8016490:	441c      	add	r4, r3
 8016492:	b224      	sxth	r4, r4
 8016494:	4621      	mov	r1, r4
 8016496:	f7ff fe6e 	bl	8016176 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 801649a:	f7ff febe 	bl	801621a <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>
 801649e:	4621      	mov	r1, r4
 80164a0:	9001      	str	r0, [sp, #4]
 80164a2:	4640      	mov	r0, r8
 80164a4:	f7ff fe63 	bl	801616e <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 80164a8:	f7ff feb7 	bl	801621a <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>
 80164ac:	9b01      	ldr	r3, [sp, #4]
 80164ae:	eba0 0a07 	sub.w	sl, r0, r7
 80164b2:	4681      	mov	r9, r0
 80164b4:	eba3 0b06 	sub.w	fp, r3, r6
 80164b8:	4651      	mov	r1, sl
 80164ba:	4658      	mov	r0, fp
 80164bc:	f7ff feb8 	bl	8016230 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80164c0:	b310      	cbz	r0, 8016508 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xc6>
 80164c2:	4602      	mov	r2, r0
 80164c4:	4651      	mov	r1, sl
 80164c6:	9005      	str	r0, [sp, #20]
 80164c8:	9803      	ldr	r0, [sp, #12]
 80164ca:	f003 fd0e 	bl	8019eea <_ZN8touchgfx6muldivElll>
 80164ce:	2302      	movs	r3, #2
 80164d0:	4659      	mov	r1, fp
 80164d2:	fb90 faf3 	sdiv	sl, r0, r3
 80164d6:	9b05      	ldr	r3, [sp, #20]
 80164d8:	9803      	ldr	r0, [sp, #12]
 80164da:	461a      	mov	r2, r3
 80164dc:	f003 fd05 	bl	8019eea <_ZN8touchgfx6muldivElll>
 80164e0:	2302      	movs	r3, #2
 80164e2:	eba6 010a 	sub.w	r1, r6, sl
 80164e6:	fb90 fbf3 	sdiv	fp, r0, r3
 80164ea:	9802      	ldr	r0, [sp, #8]
 80164ec:	eb0b 0207 	add.w	r2, fp, r7
 80164f0:	f00e f8a0 	bl	8024634 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80164f4:	9b01      	ldr	r3, [sp, #4]
 80164f6:	eb09 020b 	add.w	r2, r9, fp
 80164fa:	9802      	ldr	r0, [sp, #8]
 80164fc:	eba3 010a 	sub.w	r1, r3, sl
 8016500:	464f      	mov	r7, r9
 8016502:	f00e f897 	bl	8024634 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016506:	9e01      	ldr	r6, [sp, #4]
 8016508:	42a5      	cmp	r5, r4
 801650a:	db02      	blt.n	8016512 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xd0>
 801650c:	b007      	add	sp, #28
 801650e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016512:	9b00      	ldr	r3, [sp, #0]
 8016514:	9a04      	ldr	r2, [sp, #16]
 8016516:	42a2      	cmp	r2, r4
 8016518:	bf08      	it	eq
 801651a:	f04f 33ff 	moveq.w	r3, #4294967295
 801651e:	e7b4      	b.n	801648a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x48>

08016520 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8016520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016524:	6943      	ldr	r3, [r0, #20]
 8016526:	b0b5      	sub	sp, #212	; 0xd4
 8016528:	4606      	mov	r6, r0
 801652a:	460f      	mov	r7, r1
 801652c:	695d      	ldr	r5, [r3, #20]
 801652e:	4628      	mov	r0, r5
 8016530:	f7ff fbaa 	bl	8015c88 <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>
 8016534:	2801      	cmp	r0, #1
 8016536:	dc04      	bgt.n	8016542 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x22>
 8016538:	2501      	movs	r5, #1
 801653a:	4628      	mov	r0, r5
 801653c:	b035      	add	sp, #212	; 0xd4
 801653e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016542:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8016546:	ac34      	add	r4, sp, #208	; 0xd0
 8016548:	011b      	lsls	r3, r3, #4
 801654a:	f844 3dbc 	str.w	r3, [r4, #-188]!
 801654e:	4620      	mov	r0, r4
 8016550:	f7ff fe5a 	bl	8016208 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8016554:	8839      	ldrh	r1, [r7, #0]
 8016556:	88ba      	ldrh	r2, [r7, #4]
 8016558:	b280      	uxth	r0, r0
 801655a:	f10d 030a 	add.w	r3, sp, #10
 801655e:	440a      	add	r2, r1
 8016560:	1a09      	subs	r1, r1, r0
 8016562:	9300      	str	r3, [sp, #0]
 8016564:	ab02      	add	r3, sp, #8
 8016566:	4402      	add	r2, r0
 8016568:	b209      	sxth	r1, r1
 801656a:	4630      	mov	r0, r6
 801656c:	b212      	sxth	r2, r2
 801656e:	f7ff fe9b 	bl	80162a8 <_ZNK8touchgfx20AbstractGraphElement24xScreenRangeToIndexRangeEssRsS1_>
 8016572:	2800      	cmp	r0, #0
 8016574:	d0e0      	beq.n	8016538 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x18>
 8016576:	4628      	mov	r0, r5
 8016578:	f7ff fac8 	bl	8015b0c <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 801657c:	4681      	mov	r9, r0
 801657e:	4628      	mov	r0, r5
 8016580:	f7ff fb4c 	bl	8015c1c <_ZNK8touchgfx17AbstractDataGraph33getGraphAreaWidthIncludingPaddingEv>
 8016584:	4680      	mov	r8, r0
 8016586:	4628      	mov	r0, r5
 8016588:	f7ff fb4b 	bl	8015c22 <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 801658c:	2300      	movs	r3, #0
 801658e:	4639      	mov	r1, r7
 8016590:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016594:	a803      	add	r0, sp, #12
 8016596:	f8ad 300c 	strh.w	r3, [sp, #12]
 801659a:	f8ad 900e 	strh.w	r9, [sp, #14]
 801659e:	f8ad 8010 	strh.w	r8, [sp, #16]
 80165a2:	f7fd fd79 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 80165a6:	aa03      	add	r2, sp, #12
 80165a8:	4631      	mov	r1, r6
 80165aa:	4620      	mov	r0, r4
 80165ac:	f00d fee8 	bl	8024380 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80165b0:	4628      	mov	r0, r5
 80165b2:	f7ff fb54 	bl	8015c5e <_ZNK8touchgfx17AbstractDataGraph17getGapBeforeIndexEv>
 80165b6:	1e07      	subs	r7, r0, #0
 80165b8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80165bc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80165c0:	dd03      	ble.n	80165ca <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xaa>
 80165c2:	42bb      	cmp	r3, r7
 80165c4:	da01      	bge.n	80165ca <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xaa>
 80165c6:	42ba      	cmp	r2, r7
 80165c8:	da11      	bge.n	80165ee <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xce>
 80165ca:	9200      	str	r2, [sp, #0]
 80165cc:	462a      	mov	r2, r5
 80165ce:	4621      	mov	r1, r4
 80165d0:	4630      	mov	r0, r6
 80165d2:	f7ff ff36 	bl	8016442 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 80165d6:	4628      	mov	r0, r5
 80165d8:	f7ff fa8a 	bl	8015af0 <_ZNK8touchgfx17AbstractDataGraph8getAlphaEv>
 80165dc:	4601      	mov	r1, r0
 80165de:	4620      	mov	r0, r4
 80165e0:	f00e f99d 	bl	802491e <_ZN8touchgfx6Canvas6renderEh>
 80165e4:	4605      	mov	r5, r0
 80165e6:	4620      	mov	r0, r4
 80165e8:	f00e f9d8 	bl	802499c <_ZN8touchgfx6CanvasD1Ev>
 80165ec:	e7a5      	b.n	801653a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 80165ee:	1e7a      	subs	r2, r7, #1
 80165f0:	4621      	mov	r1, r4
 80165f2:	4630      	mov	r0, r6
 80165f4:	b212      	sxth	r2, r2
 80165f6:	9200      	str	r2, [sp, #0]
 80165f8:	462a      	mov	r2, r5
 80165fa:	f7ff ff22 	bl	8016442 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 80165fe:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016602:	9300      	str	r3, [sp, #0]
 8016604:	463b      	mov	r3, r7
 8016606:	e7e1      	b.n	80165cc <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>

08016608 <_ZNK8touchgfx21DataGraphWrapAndClear18indexToGlobalIndexEs>:
 8016608:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 801660c:	f9b0 011a 	ldrsh.w	r0, [r0, #282]	; 0x11a
 8016610:	4419      	add	r1, r3
 8016612:	1a08      	subs	r0, r1, r0
 8016614:	4770      	bx	lr

08016616 <_ZN8touchgfx21DataGraphWrapAndClear8addValueEi>:
 8016616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016618:	f9b0 511a 	ldrsh.w	r5, [r0, #282]	; 0x11a
 801661c:	460f      	mov	r7, r1
 801661e:	f8d0 6128 	ldr.w	r6, [r0, #296]	; 0x128
 8016622:	4604      	mov	r4, r0
 8016624:	1c6b      	adds	r3, r5, #1
 8016626:	4629      	mov	r1, r5
 8016628:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 801662c:	6803      	ldr	r3, [r0, #0]
 801662e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8016632:	4798      	blx	r3
 8016634:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 8016638:	b915      	cbnz	r5, 8016640 <_ZN8touchgfx21DataGraphWrapAndClear8addValueEi+0x2a>
 801663a:	4620      	mov	r0, r4
 801663c:	f7ff fbd4 	bl	8015de8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8016640:	4620      	mov	r0, r4
 8016642:	4629      	mov	r1, r5
 8016644:	f7ff fba5 	bl	8015d92 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8016648:	4628      	mov	r0, r5
 801664a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801664c <_ZN8touchgfx21DataGraphWrapAndClear14beforeAddValueEv>:
 801664c:	b510      	push	{r4, lr}
 801664e:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 8016652:	4604      	mov	r4, r0
 8016654:	f9b0 3118 	ldrsh.w	r3, [r0, #280]	; 0x118
 8016658:	429a      	cmp	r2, r3
 801665a:	db0b      	blt.n	8016674 <_ZN8touchgfx21DataGraphWrapAndClear14beforeAddValueEv+0x28>
 801665c:	f7ff fbc4 	bl	8015de8 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8016660:	6823      	ldr	r3, [r4, #0]
 8016662:	4620      	mov	r0, r4
 8016664:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016668:	4798      	blx	r3
 801666a:	4620      	mov	r0, r4
 801666c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016670:	f7ff bb9f 	b.w	8015db2 <_ZN8touchgfx17AbstractDataGraph19invalidateGraphAreaEv>
 8016674:	bd10      	pop	{r4, pc}
	...

08016678 <_ZN8touchgfx21DataGraphWrapAndClearC1EsPi>:
 8016678:	b510      	push	{r4, lr}
 801667a:	4604      	mov	r4, r0
 801667c:	f7ff fd26 	bl	80160cc <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi>
 8016680:	4b01      	ldr	r3, [pc, #4]	; (8016688 <_ZN8touchgfx21DataGraphWrapAndClearC1EsPi+0x10>)
 8016682:	4620      	mov	r0, r4
 8016684:	6023      	str	r3, [r4, #0]
 8016686:	bd10      	pop	{r4, pc}
 8016688:	0802994c 	.word	0x0802994c

0801668c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801668c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8016690:	4770      	bx	lr

08016692 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8016692:	b510      	push	{r4, lr}
 8016694:	4604      	mov	r4, r0
 8016696:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016698:	b150      	cbz	r0, 80166b0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801669a:	6803      	ldr	r3, [r0, #0]
 801669c:	68db      	ldr	r3, [r3, #12]
 801669e:	4798      	blx	r3
 80166a0:	b130      	cbz	r0, 80166b0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80166a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80166a4:	4621      	mov	r1, r4
 80166a6:	6803      	ldr	r3, [r0, #0]
 80166a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166ac:	689b      	ldr	r3, [r3, #8]
 80166ae:	4718      	bx	r3
 80166b0:	bd10      	pop	{r4, pc}

080166b2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80166b2:	790b      	ldrb	r3, [r1, #4]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	bf0c      	ite	eq
 80166b8:	2301      	moveq	r3, #1
 80166ba:	2300      	movne	r3, #0
 80166bc:	b570      	push	{r4, r5, r6, lr}
 80166be:	4604      	mov	r4, r0
 80166c0:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80166c4:	460e      	mov	r6, r1
 80166c6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80166ca:	d109      	bne.n	80166e0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80166cc:	b14d      	cbz	r5, 80166e2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80166ce:	7933      	ldrb	r3, [r6, #4]
 80166d0:	2b01      	cmp	r3, #1
 80166d2:	d10c      	bne.n	80166ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80166d4:	6823      	ldr	r3, [r4, #0]
 80166d6:	4620      	mov	r0, r4
 80166d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80166da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166de:	4718      	bx	r3
 80166e0:	b12d      	cbz	r5, 80166ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80166e2:	6823      	ldr	r3, [r4, #0]
 80166e4:	4620      	mov	r0, r4
 80166e6:	695b      	ldr	r3, [r3, #20]
 80166e8:	4798      	blx	r3
 80166ea:	2d00      	cmp	r5, #0
 80166ec:	d1ef      	bne.n	80166ce <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80166ee:	bd70      	pop	{r4, r5, r6, pc}

080166f0 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 80166f0:	6803      	ldr	r3, [r0, #0]
 80166f2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80166f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80166f8:	4718      	bx	r3

080166fa <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 80166fa:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80166fe:	2bff      	cmp	r3, #255	; 0xff
 8016700:	b510      	push	{r4, lr}
 8016702:	d104      	bne.n	801670e <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 8016704:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 8016706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801670a:	429a      	cmp	r2, r3
 801670c:	d105      	bne.n	801671a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801670e:	2300      	movs	r3, #0
 8016710:	8003      	strh	r3, [r0, #0]
 8016712:	8043      	strh	r3, [r0, #2]
 8016714:	8083      	strh	r3, [r0, #4]
 8016716:	80c3      	strh	r3, [r0, #6]
 8016718:	bd10      	pop	{r4, pc}
 801671a:	2300      	movs	r3, #0
 801671c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016720:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8016724:	8003      	strh	r3, [r0, #0]
 8016726:	8043      	strh	r3, [r0, #2]
 8016728:	8084      	strh	r4, [r0, #4]
 801672a:	80c2      	strh	r2, [r0, #6]
 801672c:	e7f4      	b.n	8016718 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801672e <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801672e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016732:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8016736:	b087      	sub	sp, #28
 8016738:	4604      	mov	r4, r0
 801673a:	4689      	mov	r9, r1
 801673c:	b363      	cbz	r3, 8016798 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801673e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8016740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016744:	429a      	cmp	r2, r3
 8016746:	d027      	beq.n	8016798 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8016748:	ad06      	add	r5, sp, #24
 801674a:	2700      	movs	r7, #0
 801674c:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 8016750:	4628      	mov	r0, r5
 8016752:	f005 fb31 	bl	801bdb8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016756:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801675a:	a904      	add	r1, sp, #16
 801675c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016760:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016764:	4620      	mov	r0, r4
 8016766:	6823      	ldr	r3, [r4, #0]
 8016768:	9704      	str	r7, [sp, #16]
 801676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801676c:	4798      	blx	r3
 801676e:	f7ed fae9 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 8016772:	6803      	ldr	r3, [r0, #0]
 8016774:	4606      	mov	r6, r0
 8016776:	4628      	mov	r0, r5
 8016778:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801677c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801677e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016782:	f005 fbe7 	bl	801bf54 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016786:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801678a:	4601      	mov	r1, r0
 801678c:	9701      	str	r7, [sp, #4]
 801678e:	aa04      	add	r2, sp, #16
 8016790:	9300      	str	r3, [sp, #0]
 8016792:	4630      	mov	r0, r6
 8016794:	464b      	mov	r3, r9
 8016796:	47c0      	blx	r8
 8016798:	b007      	add	sp, #28
 801679a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801679e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801679e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80167a0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80167a4:	460d      	mov	r5, r1
 80167a6:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80167aa:	2100      	movs	r1, #0
 80167ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 80167b0:	4604      	mov	r4, r0
 80167b2:	6803      	ldr	r3, [r0, #0]
 80167b4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80167b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167ba:	9100      	str	r1, [sp, #0]
 80167bc:	4669      	mov	r1, sp
 80167be:	4798      	blx	r3
 80167c0:	4621      	mov	r1, r4
 80167c2:	a802      	add	r0, sp, #8
 80167c4:	f003 fa64 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80167c8:	f7ed fabc 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 80167cc:	6803      	ldr	r3, [r0, #0]
 80167ce:	aa02      	add	r2, sp, #8
 80167d0:	4669      	mov	r1, sp
 80167d2:	695e      	ldr	r6, [r3, #20]
 80167d4:	462b      	mov	r3, r5
 80167d6:	47b0      	blx	r6
 80167d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80167dc:	2800      	cmp	r0, #0
 80167de:	bf08      	it	eq
 80167e0:	461d      	moveq	r5, r3
 80167e2:	84e5      	strh	r5, [r4, #38]	; 0x26
 80167e4:	b004      	add	sp, #16
 80167e6:	bd70      	pop	{r4, r5, r6, pc}

080167e8 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 80167e8:	2200      	movs	r2, #0
 80167ea:	8082      	strh	r2, [r0, #4]
 80167ec:	80c2      	strh	r2, [r0, #6]
 80167ee:	8102      	strh	r2, [r0, #8]
 80167f0:	8142      	strh	r2, [r0, #10]
 80167f2:	8182      	strh	r2, [r0, #12]
 80167f4:	81c2      	strh	r2, [r0, #14]
 80167f6:	8202      	strh	r2, [r0, #16]
 80167f8:	8242      	strh	r2, [r0, #18]
 80167fa:	61c2      	str	r2, [r0, #28]
 80167fc:	8402      	strh	r2, [r0, #32]
 80167fe:	8442      	strh	r2, [r0, #34]	; 0x22
 8016800:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016804:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016808:	2201      	movs	r2, #1
 801680a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801680e:	4a04      	ldr	r2, [pc, #16]	; (8016820 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 8016810:	6002      	str	r2, [r0, #0]
 8016812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016816:	84c2      	strh	r2, [r0, #38]	; 0x26
 8016818:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801681c:	4770      	bx	lr
 801681e:	bf00      	nop
 8016820:	08029ae0 	.word	0x08029ae0

08016824 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8016824:	2200      	movs	r2, #0
 8016826:	8002      	strh	r2, [r0, #0]
 8016828:	8042      	strh	r2, [r0, #2]
 801682a:	8082      	strh	r2, [r0, #4]
 801682c:	80c2      	strh	r2, [r0, #6]
 801682e:	4770      	bx	lr

08016830 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8016830:	b570      	push	{r4, r5, r6, lr}
 8016832:	6803      	ldr	r3, [r0, #0]
 8016834:	4604      	mov	r4, r0
 8016836:	4615      	mov	r5, r2
 8016838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801683a:	4798      	blx	r3
 801683c:	6823      	ldr	r3, [r4, #0]
 801683e:	4629      	mov	r1, r5
 8016840:	4620      	mov	r0, r4
 8016842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016848:	4718      	bx	r3
	...

0801684c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801684c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801684e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016852:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016854:	4299      	cmp	r1, r3
 8016856:	d029      	beq.n	80168ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8016858:	4b15      	ldr	r3, [pc, #84]	; (80168b0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	b92b      	cbnz	r3, 801686a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801685e:	4b15      	ldr	r3, [pc, #84]	; (80168b4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8016860:	21ae      	movs	r1, #174	; 0xae
 8016862:	4a15      	ldr	r2, [pc, #84]	; (80168b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016864:	4815      	ldr	r0, [pc, #84]	; (80168bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8016866:	f00f f987 	bl	8025b78 <__assert_func>
 801686a:	4a15      	ldr	r2, [pc, #84]	; (80168c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 801686c:	8812      	ldrh	r2, [r2, #0]
 801686e:	428a      	cmp	r2, r1
 8016870:	d803      	bhi.n	801687a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8016872:	4b14      	ldr	r3, [pc, #80]	; (80168c4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8016874:	21af      	movs	r1, #175	; 0xaf
 8016876:	4a10      	ldr	r2, [pc, #64]	; (80168b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016878:	e7f4      	b.n	8016864 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801687a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801687e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016882:	4b11      	ldr	r3, [pc, #68]	; (80168c8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8016884:	7854      	ldrb	r4, [r2, #1]
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801688c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8016890:	682b      	ldr	r3, [r5, #0]
 8016892:	69de      	ldr	r6, [r3, #28]
 8016894:	4b0d      	ldr	r3, [pc, #52]	; (80168cc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8016896:	6818      	ldr	r0, [r3, #0]
 8016898:	f7f1 f91a 	bl	8007ad0 <_ZNK8touchgfx5Texts7getTextEt>
 801689c:	2300      	movs	r3, #0
 801689e:	4602      	mov	r2, r0
 80168a0:	4621      	mov	r1, r4
 80168a2:	9300      	str	r3, [sp, #0]
 80168a4:	4628      	mov	r0, r5
 80168a6:	47b0      	blx	r6
 80168a8:	b002      	add	sp, #8
 80168aa:	bd70      	pop	{r4, r5, r6, pc}
 80168ac:	2000      	movs	r0, #0
 80168ae:	e7fb      	b.n	80168a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 80168b0:	2400c914 	.word	0x2400c914
 80168b4:	08029b44 	.word	0x08029b44
 80168b8:	08029c7c 	.word	0x08029c7c
 80168bc:	08029b86 	.word	0x08029b86
 80168c0:	2400c918 	.word	0x2400c918
 80168c4:	08029baf 	.word	0x08029baf
 80168c8:	2400c91c 	.word	0x2400c91c
 80168cc:	2400c920 	.word	0x2400c920

080168d0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80168d0:	b570      	push	{r4, r5, r6, lr}
 80168d2:	6803      	ldr	r3, [r0, #0]
 80168d4:	4604      	mov	r4, r0
 80168d6:	b28d      	uxth	r5, r1
 80168d8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80168da:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80168dc:	4b10      	ldr	r3, [pc, #64]	; (8016920 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	b92b      	cbnz	r3, 80168ee <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 80168e2:	4b10      	ldr	r3, [pc, #64]	; (8016924 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80168e4:	21ae      	movs	r1, #174	; 0xae
 80168e6:	4a10      	ldr	r2, [pc, #64]	; (8016928 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80168e8:	4810      	ldr	r0, [pc, #64]	; (801692c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80168ea:	f00f f945 	bl	8025b78 <__assert_func>
 80168ee:	4910      	ldr	r1, [pc, #64]	; (8016930 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80168f0:	8809      	ldrh	r1, [r1, #0]
 80168f2:	4291      	cmp	r1, r2
 80168f4:	d803      	bhi.n	80168fe <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80168f6:	4b0f      	ldr	r3, [pc, #60]	; (8016934 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80168f8:	21af      	movs	r1, #175	; 0xaf
 80168fa:	4a0b      	ldr	r2, [pc, #44]	; (8016928 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80168fc:	e7f4      	b.n	80168e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 80168fe:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8016902:	4b0d      	ldr	r3, [pc, #52]	; (8016938 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801690a:	6803      	ldr	r3, [r0, #0]
 801690c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801690e:	4798      	blx	r3
 8016910:	1a29      	subs	r1, r5, r0
 8016912:	4633      	mov	r3, r6
 8016914:	4620      	mov	r0, r4
 8016916:	b209      	sxth	r1, r1
 8016918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801691c:	4718      	bx	r3
 801691e:	bf00      	nop
 8016920:	2400c914 	.word	0x2400c914
 8016924:	08029b44 	.word	0x08029b44
 8016928:	08029c7c 	.word	0x08029c7c
 801692c:	08029b86 	.word	0x08029b86
 8016930:	2400c918 	.word	0x2400c918
 8016934:	08029baf 	.word	0x08029baf
 8016938:	2400c91c 	.word	0x2400c91c

0801693c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016944:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8016946:	b08c      	sub	sp, #48	; 0x30
 8016948:	4604      	mov	r4, r0
 801694a:	4293      	cmp	r3, r2
 801694c:	4688      	mov	r8, r1
 801694e:	d05f      	beq.n	8016a10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8016950:	4e31      	ldr	r6, [pc, #196]	; (8016a18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8016952:	6832      	ldr	r2, [r6, #0]
 8016954:	b92a      	cbnz	r2, 8016962 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8016956:	4b31      	ldr	r3, [pc, #196]	; (8016a1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8016958:	21ae      	movs	r1, #174	; 0xae
 801695a:	4a31      	ldr	r2, [pc, #196]	; (8016a20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801695c:	4831      	ldr	r0, [pc, #196]	; (8016a24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 801695e:	f00f f90b 	bl	8025b78 <__assert_func>
 8016962:	4d31      	ldr	r5, [pc, #196]	; (8016a28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8016964:	8829      	ldrh	r1, [r5, #0]
 8016966:	4299      	cmp	r1, r3
 8016968:	d803      	bhi.n	8016972 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801696a:	4b30      	ldr	r3, [pc, #192]	; (8016a2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 801696c:	21af      	movs	r1, #175	; 0xaf
 801696e:	4a2c      	ldr	r2, [pc, #176]	; (8016a20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8016970:	e7f4      	b.n	801695c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8016972:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8016976:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801697a:	4b2d      	ldr	r3, [pc, #180]	; (8016a30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016982:	2a00      	cmp	r2, #0
 8016984:	d044      	beq.n	8016a10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8016986:	784b      	ldrb	r3, [r1, #1]
 8016988:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801698c:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8016990:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016994:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8016998:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801699c:	4b25      	ldr	r3, [pc, #148]	; (8016a34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801699e:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 80169a8:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 80169ac:	9207      	str	r2, [sp, #28]
 80169ae:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80169b0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80169b4:	f88d a020 	strb.w	sl, [sp, #32]
 80169b8:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 80169bc:	9009      	str	r0, [sp, #36]	; 0x24
 80169be:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80169c2:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 80169c6:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 80169ca:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 80169ce:	b10a      	cbz	r2, 80169d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 80169d0:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 80169d2:	b907      	cbnz	r7, 80169d6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 80169d4:	689f      	ldr	r7, [r3, #8]
 80169d6:	f10d 0914 	add.w	r9, sp, #20
 80169da:	4621      	mov	r1, r4
 80169dc:	4648      	mov	r0, r9
 80169de:	f003 f957 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80169e2:	6833      	ldr	r3, [r6, #0]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d0b6      	beq.n	8016956 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 80169e8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80169ea:	882b      	ldrh	r3, [r5, #0]
 80169ec:	428b      	cmp	r3, r1
 80169ee:	d9bc      	bls.n	801696a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80169f0:	4b11      	ldr	r3, [pc, #68]	; (8016a38 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 80169f2:	6818      	ldr	r0, [r3, #0]
 80169f4:	f7f1 f86c 	bl	8007ad0 <_ZNK8touchgfx5Texts7getTextEt>
 80169f8:	2300      	movs	r3, #0
 80169fa:	9001      	str	r0, [sp, #4]
 80169fc:	4638      	mov	r0, r7
 80169fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016a02:	ab07      	add	r3, sp, #28
 8016a04:	9300      	str	r3, [sp, #0]
 8016a06:	4643      	mov	r3, r8
 8016a08:	e899 0006 	ldmia.w	r9, {r1, r2}
 8016a0c:	f7f0 fff1 	bl	80079f2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016a10:	b00c      	add	sp, #48	; 0x30
 8016a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a16:	bf00      	nop
 8016a18:	2400c914 	.word	0x2400c914
 8016a1c:	08029b44 	.word	0x08029b44
 8016a20:	08029c7c 	.word	0x08029c7c
 8016a24:	08029b86 	.word	0x08029b86
 8016a28:	2400c918 	.word	0x2400c918
 8016a2c:	08029baf 	.word	0x08029baf
 8016a30:	2400c91c 	.word	0x2400c91c
 8016a34:	2400c8a4 	.word	0x2400c8a4
 8016a38:	2400c920 	.word	0x2400c920

08016a3c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8016a3c:	b40e      	push	{r1, r2, r3}
 8016a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a46:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8016a48:	b09c      	sub	sp, #112	; 0x70
 8016a4a:	4604      	mov	r4, r0
 8016a4c:	4293      	cmp	r3, r2
 8016a4e:	d06b      	beq.n	8016b28 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8016a50:	aa26      	add	r2, sp, #152	; 0x98
 8016a52:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8016b3c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8016a56:	9202      	str	r2, [sp, #8]
 8016a58:	f8da 2000 	ldr.w	r2, [sl]
 8016a5c:	b92a      	cbnz	r2, 8016a6a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8016a5e:	4b33      	ldr	r3, [pc, #204]	; (8016b2c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8016a60:	21ae      	movs	r1, #174	; 0xae
 8016a62:	4a33      	ldr	r2, [pc, #204]	; (8016b30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8016a64:	4833      	ldr	r0, [pc, #204]	; (8016b34 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 8016a66:	f00f f887 	bl	8025b78 <__assert_func>
 8016a6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8016b40 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 8016a6e:	f8b8 1000 	ldrh.w	r1, [r8]
 8016a72:	4299      	cmp	r1, r3
 8016a74:	d803      	bhi.n	8016a7e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8016a76:	4b30      	ldr	r3, [pc, #192]	; (8016b38 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 8016a78:	21af      	movs	r1, #175	; 0xaf
 8016a7a:	4a2d      	ldr	r2, [pc, #180]	; (8016b30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8016a7c:	e7f2      	b.n	8016a64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8016a7e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8016b44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 8016a82:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016a86:	f8d9 3000 	ldr.w	r3, [r9]
 8016a8a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8016a8e:	682b      	ldr	r3, [r5, #0]
 8016a90:	4628      	mov	r0, r5
 8016a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a94:	4798      	blx	r3
 8016a96:	4606      	mov	r6, r0
 8016a98:	b207      	sxth	r7, r0
 8016a9a:	a803      	add	r0, sp, #12
 8016a9c:	f003 fd8b 	bl	801a5b6 <_ZN8touchgfx12TextProviderC1Ev>
 8016aa0:	682b      	ldr	r3, [r5, #0]
 8016aa2:	4628      	mov	r0, r5
 8016aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016aa6:	4798      	blx	r3
 8016aa8:	682b      	ldr	r3, [r5, #0]
 8016aaa:	4683      	mov	fp, r0
 8016aac:	4628      	mov	r0, r5
 8016aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016ab0:	4798      	blx	r3
 8016ab2:	465b      	mov	r3, fp
 8016ab4:	9000      	str	r0, [sp, #0]
 8016ab6:	a803      	add	r0, sp, #12
 8016ab8:	9925      	ldr	r1, [sp, #148]	; 0x94
 8016aba:	9a02      	ldr	r2, [sp, #8]
 8016abc:	f003 fdce 	bl	801a65c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016ac0:	f8da 3000 	ldr.w	r3, [sl]
 8016ac4:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d0c8      	beq.n	8016a5e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8016acc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8016ace:	f8b8 0000 	ldrh.w	r0, [r8]
 8016ad2:	4290      	cmp	r0, r2
 8016ad4:	d9cf      	bls.n	8016a76 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8016ad6:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8016ada:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8016ade:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8016ae2:	786a      	ldrb	r2, [r5, #1]
 8016ae4:	8925      	ldrh	r5, [r4, #8]
 8016ae6:	f8d9 3000 	ldr.w	r3, [r9]
 8016aea:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8016aee:	eba5 050c 	sub.w	r5, r5, ip
 8016af2:	b22d      	sxth	r5, r5
 8016af4:	9500      	str	r5, [sp, #0]
 8016af6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8016afa:	a803      	add	r0, sp, #12
 8016afc:	f001 fc71 	bl	80183e2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8016b00:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8016b04:	b203      	sxth	r3, r0
 8016b06:	18b9      	adds	r1, r7, r2
 8016b08:	2900      	cmp	r1, #0
 8016b0a:	dd0b      	ble.n	8016b24 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8016b0c:	3b01      	subs	r3, #1
 8016b0e:	fb13 f302 	smulbb	r3, r3, r2
 8016b12:	fb16 3300 	smlabb	r3, r6, r0, r3
 8016b16:	b21f      	sxth	r7, r3
 8016b18:	4638      	mov	r0, r7
 8016b1a:	b01c      	add	sp, #112	; 0x70
 8016b1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b20:	b003      	add	sp, #12
 8016b22:	4770      	bx	lr
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	dcf7      	bgt.n	8016b18 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8016b28:	2700      	movs	r7, #0
 8016b2a:	e7f5      	b.n	8016b18 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8016b2c:	08029b44 	.word	0x08029b44
 8016b30:	08029c7c 	.word	0x08029c7c
 8016b34:	08029b86 	.word	0x08029b86
 8016b38:	08029baf 	.word	0x08029baf
 8016b3c:	2400c914 	.word	0x2400c914
 8016b40:	2400c918 	.word	0x2400c918
 8016b44:	2400c91c 	.word	0x2400c91c

08016b48 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8016b48:	b570      	push	{r4, r5, r6, lr}
 8016b4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b4e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016b50:	4604      	mov	r4, r0
 8016b52:	4299      	cmp	r1, r3
 8016b54:	d01e      	beq.n	8016b94 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8016b56:	6803      	ldr	r3, [r0, #0]
 8016b58:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8016b5a:	4b0f      	ldr	r3, [pc, #60]	; (8016b98 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	b92b      	cbnz	r3, 8016b6c <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8016b60:	4b0e      	ldr	r3, [pc, #56]	; (8016b9c <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8016b62:	21ae      	movs	r1, #174	; 0xae
 8016b64:	4a0e      	ldr	r2, [pc, #56]	; (8016ba0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8016b66:	480f      	ldr	r0, [pc, #60]	; (8016ba4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8016b68:	f00f f806 	bl	8025b78 <__assert_func>
 8016b6c:	4b0e      	ldr	r3, [pc, #56]	; (8016ba8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8016b6e:	881b      	ldrh	r3, [r3, #0]
 8016b70:	428b      	cmp	r3, r1
 8016b72:	d803      	bhi.n	8016b7c <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8016b74:	4b0d      	ldr	r3, [pc, #52]	; (8016bac <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8016b76:	21af      	movs	r1, #175	; 0xaf
 8016b78:	4a09      	ldr	r2, [pc, #36]	; (8016ba0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8016b7a:	e7f4      	b.n	8016b66 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8016b7c:	4b0c      	ldr	r3, [pc, #48]	; (8016bb0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8016b7e:	6818      	ldr	r0, [r3, #0]
 8016b80:	f7f0 ffa6 	bl	8007ad0 <_ZNK8touchgfx5Texts7getTextEt>
 8016b84:	2300      	movs	r3, #0
 8016b86:	4601      	mov	r1, r0
 8016b88:	46ac      	mov	ip, r5
 8016b8a:	4620      	mov	r0, r4
 8016b8c:	461a      	mov	r2, r3
 8016b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016b92:	4760      	bx	ip
 8016b94:	2000      	movs	r0, #0
 8016b96:	bd70      	pop	{r4, r5, r6, pc}
 8016b98:	2400c914 	.word	0x2400c914
 8016b9c:	08029b44 	.word	0x08029b44
 8016ba0:	08029c7c 	.word	0x08029c7c
 8016ba4:	08029b86 	.word	0x08029b86
 8016ba8:	2400c918 	.word	0x2400c918
 8016bac:	08029baf 	.word	0x08029baf
 8016bb0:	2400c920 	.word	0x2400c920

08016bb4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016bb4:	b538      	push	{r3, r4, r5, lr}
 8016bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016bba:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016bbc:	4604      	mov	r4, r0
 8016bbe:	429a      	cmp	r2, r3
 8016bc0:	d014      	beq.n	8016bec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8016bc2:	6803      	ldr	r3, [r0, #0]
 8016bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016bc6:	4798      	blx	r3
 8016bc8:	6823      	ldr	r3, [r4, #0]
 8016bca:	4605      	mov	r5, r0
 8016bcc:	4620      	mov	r0, r4
 8016bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016bd0:	4798      	blx	r3
 8016bd2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016bd6:	b22d      	sxth	r5, r5
 8016bd8:	4601      	mov	r1, r0
 8016bda:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8016bde:	bf06      	itte	eq
 8016be0:	4602      	moveq	r2, r0
 8016be2:	4629      	moveq	r1, r5
 8016be4:	462a      	movne	r2, r5
 8016be6:	4620      	mov	r0, r4
 8016be8:	f7ed f811 	bl	8003c0e <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016bec:	bd38      	pop	{r3, r4, r5, pc}

08016bee <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8016bee:	888a      	ldrh	r2, [r1, #4]
 8016bf0:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016bf2:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8016bf6:	b922      	cbnz	r2, 8016c02 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8016bf8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016bfc:	b90b      	cbnz	r3, 8016c02 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8016bfe:	f7ff bfd9 	b.w	8016bb4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8016c02:	4770      	bx	lr

08016c04 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016c04:	2300      	movs	r3, #0
 8016c06:	8083      	strh	r3, [r0, #4]
 8016c08:	80c3      	strh	r3, [r0, #6]
 8016c0a:	8003      	strh	r3, [r0, #0]
 8016c0c:	8043      	strh	r3, [r0, #2]
 8016c0e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8016c12:	2bff      	cmp	r3, #255	; 0xff
 8016c14:	bf01      	itttt	eq
 8016c16:	890b      	ldrheq	r3, [r1, #8]
 8016c18:	8083      	strheq	r3, [r0, #4]
 8016c1a:	894b      	ldrheq	r3, [r1, #10]
 8016c1c:	80c3      	strheq	r3, [r0, #6]
 8016c1e:	4770      	bx	lr

08016c20 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8016c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c22:	4604      	mov	r4, r0
 8016c24:	466b      	mov	r3, sp
 8016c26:	6808      	ldr	r0, [r1, #0]
 8016c28:	6849      	ldr	r1, [r1, #4]
 8016c2a:	c303      	stmia	r3!, {r0, r1}
 8016c2c:	6823      	ldr	r3, [r4, #0]
 8016c2e:	4669      	mov	r1, sp
 8016c30:	4620      	mov	r0, r4
 8016c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c34:	4798      	blx	r3
 8016c36:	4b08      	ldr	r3, [pc, #32]	; (8016c58 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016c3e:	b10a      	cbz	r2, 8016c44 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8016c40:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016c42:	b900      	cbnz	r0, 8016c46 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016c44:	6898      	ldr	r0, [r3, #8]
 8016c46:	6803      	ldr	r3, [r0, #0]
 8016c48:	4669      	mov	r1, sp
 8016c4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8016c4c:	699d      	ldr	r5, [r3, #24]
 8016c4e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8016c52:	47a8      	blx	r5
 8016c54:	b003      	add	sp, #12
 8016c56:	bd30      	pop	{r4, r5, pc}
 8016c58:	2400c8a4 	.word	0x2400c8a4

08016c5c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8016c5c:	b570      	push	{r4, r5, r6, lr}
 8016c5e:	880b      	ldrh	r3, [r1, #0]
 8016c60:	4605      	mov	r5, r0
 8016c62:	4604      	mov	r4, r0
 8016c64:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8016c66:	8813      	ldrh	r3, [r2, #0]
 8016c68:	f825 3f30 	strh.w	r3, [r5, #48]!
 8016c6c:	4628      	mov	r0, r5
 8016c6e:	f005 f8a3 	bl	801bdb8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016c72:	4606      	mov	r6, r0
 8016c74:	4628      	mov	r0, r5
 8016c76:	f005 f8d9 	bl	801be2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016c7a:	6823      	ldr	r3, [r4, #0]
 8016c7c:	4605      	mov	r5, r0
 8016c7e:	b231      	sxth	r1, r6
 8016c80:	4620      	mov	r0, r4
 8016c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c84:	4798      	blx	r3
 8016c86:	6823      	ldr	r3, [r4, #0]
 8016c88:	b229      	sxth	r1, r5
 8016c8a:	4620      	mov	r0, r4
 8016c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c92:	4718      	bx	r3

08016c94 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8016c94:	b510      	push	{r4, lr}
 8016c96:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8016c9a:	4604      	mov	r4, r0
 8016c9c:	2bff      	cmp	r3, #255	; 0xff
 8016c9e:	d006      	beq.n	8016cae <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	8003      	strh	r3, [r0, #0]
 8016ca4:	8043      	strh	r3, [r0, #2]
 8016ca6:	8083      	strh	r3, [r0, #4]
 8016ca8:	80c3      	strh	r3, [r0, #6]
 8016caa:	4620      	mov	r0, r4
 8016cac:	bd10      	pop	{r4, pc}
 8016cae:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8016cb2:	b11b      	cbz	r3, 8016cbc <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8016cb4:	3130      	adds	r1, #48	; 0x30
 8016cb6:	f005 f8f3 	bl	801bea0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016cba:	e7f6      	b.n	8016caa <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8016cbc:	312e      	adds	r1, #46	; 0x2e
 8016cbe:	e7fa      	b.n	8016cb6 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08016cc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8016cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cc4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8016cc8:	b08a      	sub	sp, #40	; 0x28
 8016cca:	4604      	mov	r4, r0
 8016ccc:	4688      	mov	r8, r1
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d044      	beq.n	8016d5c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8016cd2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8016cd4:	a805      	add	r0, sp, #20
 8016cd6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016cda:	f005 f86d 	bl	801bdb8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016cde:	4605      	mov	r5, r0
 8016ce0:	b206      	sxth	r6, r0
 8016ce2:	a805      	add	r0, sp, #20
 8016ce4:	f005 f8a2 	bl	801be2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016ce8:	f9b8 2000 	ldrsh.w	r2, [r8]
 8016cec:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	fa0f fc80 	sxth.w	ip, r0
 8016cf6:	4417      	add	r7, r2
 8016cf8:	9306      	str	r3, [sp, #24]
 8016cfa:	b2bf      	uxth	r7, r7
 8016cfc:	fa0f fe87 	sxth.w	lr, r7
 8016d00:	459e      	cmp	lr, r3
 8016d02:	dd2d      	ble.n	8016d60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8016d04:	4296      	cmp	r6, r2
 8016d06:	dd2b      	ble.n	8016d60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8016d08:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8016d0c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8016d10:	4419      	add	r1, r3
 8016d12:	b289      	uxth	r1, r1
 8016d14:	fa0f f881 	sxth.w	r8, r1
 8016d18:	f1b8 0f00 	cmp.w	r8, #0
 8016d1c:	dd20      	ble.n	8016d60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8016d1e:	459c      	cmp	ip, r3
 8016d20:	dd1e      	ble.n	8016d60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8016d22:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8016d26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016d2a:	4576      	cmp	r6, lr
 8016d2c:	bfa8      	it	ge
 8016d2e:	463d      	movge	r5, r7
 8016d30:	45c4      	cmp	ip, r8
 8016d32:	bfa8      	it	ge
 8016d34:	4608      	movge	r0, r1
 8016d36:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016d3a:	1aad      	subs	r5, r5, r2
 8016d3c:	1ac0      	subs	r0, r0, r3
 8016d3e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016d42:	f8ad 501c 	strh.w	r5, [sp, #28]
 8016d46:	f8ad 001e 	strh.w	r0, [sp, #30]
 8016d4a:	4b1f      	ldr	r3, [pc, #124]	; (8016dc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	b953      	cbnz	r3, 8016d66 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8016d50:	4b1e      	ldr	r3, [pc, #120]	; (8016dcc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8016d52:	2187      	movs	r1, #135	; 0x87
 8016d54:	4a1e      	ldr	r2, [pc, #120]	; (8016dd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8016d56:	481f      	ldr	r0, [pc, #124]	; (8016dd4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8016d58:	f00e ff0e 	bl	8025b78 <__assert_func>
 8016d5c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8016d5e:	e7b9      	b.n	8016cd4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8016d60:	2300      	movs	r3, #0
 8016d62:	9307      	str	r3, [sp, #28]
 8016d64:	e7f1      	b.n	8016d4a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8016d66:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	d026      	beq.n	8016dc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8016d72:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	dd22      	ble.n	8016dc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8016d7a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	dd1e      	ble.n	8016dc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8016d82:	2300      	movs	r3, #0
 8016d84:	a908      	add	r1, sp, #32
 8016d86:	4620      	mov	r0, r4
 8016d88:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8016d8c:	6823      	ldr	r3, [r4, #0]
 8016d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d90:	4798      	blx	r3
 8016d92:	4b11      	ldr	r3, [pc, #68]	; (8016dd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016d9a:	b10a      	cbz	r2, 8016da0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8016d9c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016d9e:	b900      	cbnz	r0, 8016da2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8016da0:	6898      	ldr	r0, [r3, #8]
 8016da2:	2501      	movs	r5, #1
 8016da4:	6801      	ldr	r1, [r0, #0]
 8016da6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016daa:	9502      	str	r5, [sp, #8]
 8016dac:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8016db0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8016db4:	9401      	str	r4, [sp, #4]
 8016db6:	ac06      	add	r4, sp, #24
 8016db8:	9400      	str	r4, [sp, #0]
 8016dba:	688c      	ldr	r4, [r1, #8]
 8016dbc:	a905      	add	r1, sp, #20
 8016dbe:	47a0      	blx	r4
 8016dc0:	b00a      	add	sp, #40	; 0x28
 8016dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dc6:	bf00      	nop
 8016dc8:	2400c94c 	.word	0x2400c94c
 8016dcc:	08029d10 	.word	0x08029d10
 8016dd0:	08029de4 	.word	0x08029de4
 8016dd4:	08029d4c 	.word	0x08029d4c
 8016dd8:	2400c8a4 	.word	0x2400c8a4

08016ddc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8016ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016de2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016de4:	4606      	mov	r6, r0
 8016de6:	4299      	cmp	r1, r3
 8016de8:	d02a      	beq.n	8016e40 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8016dea:	4b16      	ldr	r3, [pc, #88]	; (8016e44 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	b92b      	cbnz	r3, 8016dfc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8016df0:	4b15      	ldr	r3, [pc, #84]	; (8016e48 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8016df2:	21ae      	movs	r1, #174	; 0xae
 8016df4:	4a15      	ldr	r2, [pc, #84]	; (8016e4c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8016df6:	4816      	ldr	r0, [pc, #88]	; (8016e50 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8016df8:	f00e febe 	bl	8025b78 <__assert_func>
 8016dfc:	4a15      	ldr	r2, [pc, #84]	; (8016e54 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8016dfe:	8812      	ldrh	r2, [r2, #0]
 8016e00:	428a      	cmp	r2, r1
 8016e02:	d803      	bhi.n	8016e0c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8016e04:	4b14      	ldr	r3, [pc, #80]	; (8016e58 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8016e06:	21af      	movs	r1, #175	; 0xaf
 8016e08:	4a10      	ldr	r2, [pc, #64]	; (8016e4c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8016e0a:	e7f4      	b.n	8016df6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8016e0c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016e10:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016e14:	4b11      	ldr	r3, [pc, #68]	; (8016e5c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8016e16:	7854      	ldrb	r4, [r2, #1]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8016e1e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8016e22:	682b      	ldr	r3, [r5, #0]
 8016e24:	69df      	ldr	r7, [r3, #28]
 8016e26:	4b0e      	ldr	r3, [pc, #56]	; (8016e60 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8016e28:	6818      	ldr	r0, [r3, #0]
 8016e2a:	f7f0 fe51 	bl	8007ad0 <_ZNK8touchgfx5Texts7getTextEt>
 8016e2e:	2300      	movs	r3, #0
 8016e30:	4602      	mov	r2, r0
 8016e32:	4621      	mov	r1, r4
 8016e34:	9300      	str	r3, [sp, #0]
 8016e36:	4628      	mov	r0, r5
 8016e38:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8016e3a:	47b8      	blx	r7
 8016e3c:	b003      	add	sp, #12
 8016e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e40:	2000      	movs	r0, #0
 8016e42:	e7fb      	b.n	8016e3c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8016e44:	2400c914 	.word	0x2400c914
 8016e48:	08029b44 	.word	0x08029b44
 8016e4c:	08029e90 	.word	0x08029e90
 8016e50:	08029b86 	.word	0x08029b86
 8016e54:	2400c918 	.word	0x2400c918
 8016e58:	08029baf 	.word	0x08029baf
 8016e5c:	2400c91c 	.word	0x2400c91c
 8016e60:	2400c920 	.word	0x2400c920

08016e64 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8016e64:	b570      	push	{r4, r5, r6, lr}
 8016e66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e6a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016e6c:	4604      	mov	r4, r0
 8016e6e:	4299      	cmp	r1, r3
 8016e70:	d01e      	beq.n	8016eb0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8016e72:	6803      	ldr	r3, [r0, #0]
 8016e74:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8016e76:	4b0f      	ldr	r3, [pc, #60]	; (8016eb4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	b92b      	cbnz	r3, 8016e88 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8016e7c:	4b0e      	ldr	r3, [pc, #56]	; (8016eb8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8016e7e:	21ae      	movs	r1, #174	; 0xae
 8016e80:	4a0e      	ldr	r2, [pc, #56]	; (8016ebc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8016e82:	480f      	ldr	r0, [pc, #60]	; (8016ec0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8016e84:	f00e fe78 	bl	8025b78 <__assert_func>
 8016e88:	4b0e      	ldr	r3, [pc, #56]	; (8016ec4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8016e8a:	881b      	ldrh	r3, [r3, #0]
 8016e8c:	428b      	cmp	r3, r1
 8016e8e:	d803      	bhi.n	8016e98 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8016e90:	4b0d      	ldr	r3, [pc, #52]	; (8016ec8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8016e92:	21af      	movs	r1, #175	; 0xaf
 8016e94:	4a09      	ldr	r2, [pc, #36]	; (8016ebc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8016e96:	e7f4      	b.n	8016e82 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8016e98:	4b0c      	ldr	r3, [pc, #48]	; (8016ecc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8016e9a:	6818      	ldr	r0, [r3, #0]
 8016e9c:	f7f0 fe18 	bl	8007ad0 <_ZNK8touchgfx5Texts7getTextEt>
 8016ea0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016ea2:	4601      	mov	r1, r0
 8016ea4:	46ac      	mov	ip, r5
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016eae:	4760      	bx	ip
 8016eb0:	2000      	movs	r0, #0
 8016eb2:	bd70      	pop	{r4, r5, r6, pc}
 8016eb4:	2400c914 	.word	0x2400c914
 8016eb8:	08029b44 	.word	0x08029b44
 8016ebc:	08029e90 	.word	0x08029e90
 8016ec0:	08029b86 	.word	0x08029b86
 8016ec4:	2400c918 	.word	0x2400c918
 8016ec8:	08029baf 	.word	0x08029baf
 8016ecc:	2400c920 	.word	0x2400c920

08016ed0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8016ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016ed8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8016eda:	b08c      	sub	sp, #48	; 0x30
 8016edc:	4604      	mov	r4, r0
 8016ede:	4293      	cmp	r3, r2
 8016ee0:	460e      	mov	r6, r1
 8016ee2:	d05d      	beq.n	8016fa0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8016ee4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8016fc4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8016ee8:	f8d8 2000 	ldr.w	r2, [r8]
 8016eec:	b92a      	cbnz	r2, 8016efa <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8016eee:	4b2e      	ldr	r3, [pc, #184]	; (8016fa8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8016ef0:	21ae      	movs	r1, #174	; 0xae
 8016ef2:	4a2e      	ldr	r2, [pc, #184]	; (8016fac <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8016ef4:	482e      	ldr	r0, [pc, #184]	; (8016fb0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8016ef6:	f00e fe3f 	bl	8025b78 <__assert_func>
 8016efa:	4f2e      	ldr	r7, [pc, #184]	; (8016fb4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8016efc:	8839      	ldrh	r1, [r7, #0]
 8016efe:	4299      	cmp	r1, r3
 8016f00:	d803      	bhi.n	8016f0a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8016f02:	4b2d      	ldr	r3, [pc, #180]	; (8016fb8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8016f04:	21af      	movs	r1, #175	; 0xaf
 8016f06:	4a29      	ldr	r2, [pc, #164]	; (8016fac <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8016f08:	e7f4      	b.n	8016ef4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8016f0a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8016f0e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016f12:	4b2a      	ldr	r3, [pc, #168]	; (8016fbc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016f1a:	2a00      	cmp	r2, #0
 8016f1c:	d040      	beq.n	8016fa0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8016f1e:	784b      	ldrb	r3, [r1, #1]
 8016f20:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8016f24:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8016f28:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8016f2c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8016f30:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016f34:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8016f38:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8016f3c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8016f40:	ad05      	add	r5, sp, #20
 8016f42:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016f44:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8016f48:	9207      	str	r2, [sp, #28]
 8016f4a:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8016f4e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8016f52:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8016f56:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8016f5a:	f88d a020 	strb.w	sl, [sp, #32]
 8016f5e:	9009      	str	r0, [sp, #36]	; 0x24
 8016f60:	f7ec fef0 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 8016f64:	4621      	mov	r1, r4
 8016f66:	4681      	mov	r9, r0
 8016f68:	4628      	mov	r0, r5
 8016f6a:	f002 fe91 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d0bb      	beq.n	8016eee <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8016f76:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8016f78:	883b      	ldrh	r3, [r7, #0]
 8016f7a:	428b      	cmp	r3, r1
 8016f7c:	d9c1      	bls.n	8016f02 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8016f7e:	4b10      	ldr	r3, [pc, #64]	; (8016fc0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8016f80:	6818      	ldr	r0, [r3, #0]
 8016f82:	f7f0 fda5 	bl	8007ad0 <_ZNK8touchgfx5Texts7getTextEt>
 8016f86:	2300      	movs	r3, #0
 8016f88:	9303      	str	r3, [sp, #12]
 8016f8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016f8c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8016f90:	ab07      	add	r3, sp, #28
 8016f92:	4648      	mov	r0, r9
 8016f94:	9300      	str	r3, [sp, #0]
 8016f96:	4633      	mov	r3, r6
 8016f98:	e895 0006 	ldmia.w	r5, {r1, r2}
 8016f9c:	f7f0 fd29 	bl	80079f2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016fa0:	b00c      	add	sp, #48	; 0x30
 8016fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fa6:	bf00      	nop
 8016fa8:	08029b44 	.word	0x08029b44
 8016fac:	08029e90 	.word	0x08029e90
 8016fb0:	08029b86 	.word	0x08029b86
 8016fb4:	2400c918 	.word	0x2400c918
 8016fb8:	08029baf 	.word	0x08029baf
 8016fbc:	2400c91c 	.word	0x2400c91c
 8016fc0:	2400c920 	.word	0x2400c920
 8016fc4:	2400c914 	.word	0x2400c914

08016fc8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8016fc8:	b570      	push	{r4, r5, r6, lr}
 8016fca:	880b      	ldrh	r3, [r1, #0]
 8016fcc:	460d      	mov	r5, r1
 8016fce:	4604      	mov	r4, r0
 8016fd0:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016fd2:	4608      	mov	r0, r1
 8016fd4:	f004 fef0 	bl	801bdb8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016fd8:	4606      	mov	r6, r0
 8016fda:	4628      	mov	r0, r5
 8016fdc:	f004 ff26 	bl	801be2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016fe0:	6823      	ldr	r3, [r4, #0]
 8016fe2:	4605      	mov	r5, r0
 8016fe4:	b231      	sxth	r1, r6
 8016fe6:	4620      	mov	r0, r4
 8016fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016fea:	4798      	blx	r3
 8016fec:	6823      	ldr	r3, [r4, #0]
 8016fee:	b229      	sxth	r1, r5
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ff8:	4718      	bx	r3

08016ffa <_ZNK8touchgfx5Image12getSolidRectEv>:
 8016ffa:	b510      	push	{r4, lr}
 8016ffc:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017000:	4604      	mov	r4, r0
 8017002:	2bff      	cmp	r3, #255	; 0xff
 8017004:	d006      	beq.n	8017014 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017006:	2300      	movs	r3, #0
 8017008:	8003      	strh	r3, [r0, #0]
 801700a:	8043      	strh	r3, [r0, #2]
 801700c:	8083      	strh	r3, [r0, #4]
 801700e:	80c3      	strh	r3, [r0, #6]
 8017010:	4620      	mov	r0, r4
 8017012:	bd10      	pop	{r4, pc}
 8017014:	3126      	adds	r1, #38	; 0x26
 8017016:	f004 ff43 	bl	801bea0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801701a:	e7f9      	b.n	8017010 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801701c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017020:	4604      	mov	r4, r0
 8017022:	b088      	sub	sp, #32
 8017024:	2500      	movs	r5, #0
 8017026:	460f      	mov	r7, r1
 8017028:	f854 3b26 	ldr.w	r3, [r4], #38
 801702c:	a904      	add	r1, sp, #16
 801702e:	4606      	mov	r6, r0
 8017030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017032:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017036:	4798      	blx	r3
 8017038:	4620      	mov	r0, r4
 801703a:	f004 febd 	bl	801bdb8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801703e:	4680      	mov	r8, r0
 8017040:	4620      	mov	r0, r4
 8017042:	f004 fef3 	bl	801be2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017046:	9506      	str	r5, [sp, #24]
 8017048:	ad06      	add	r5, sp, #24
 801704a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801704e:	4639      	mov	r1, r7
 8017050:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017054:	4628      	mov	r0, r5
 8017056:	f7fd f81f 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 801705a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801705e:	2b00      	cmp	r3, #0
 8017060:	dd19      	ble.n	8017096 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8017062:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017066:	2b00      	cmp	r3, #0
 8017068:	dd15      	ble.n	8017096 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801706a:	4b0c      	ldr	r3, [pc, #48]	; (801709c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017072:	b10a      	cbz	r2, 8017078 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8017074:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017076:	b900      	cbnz	r0, 801707a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8017078:	6898      	ldr	r0, [r3, #8]
 801707a:	2701      	movs	r7, #1
 801707c:	6801      	ldr	r1, [r0, #0]
 801707e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8017082:	9702      	str	r7, [sp, #8]
 8017084:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8017088:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801708c:	e9cd 5600 	strd	r5, r6, [sp]
 8017090:	688d      	ldr	r5, [r1, #8]
 8017092:	4621      	mov	r1, r4
 8017094:	47a8      	blx	r5
 8017096:	b008      	add	sp, #32
 8017098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801709c:	2400c8a4 	.word	0x2400c8a4

080170a0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 80170a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170a4:	4604      	mov	r4, r0
 80170a6:	b08c      	sub	sp, #48	; 0x30
 80170a8:	4688      	mov	r8, r1
 80170aa:	f7ff fe09 	bl	8016cc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 80170ae:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80170b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80170b4:	4293      	cmp	r3, r2
 80170b6:	f000 809a 	beq.w	80171ee <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 80170ba:	4e55      	ldr	r6, [pc, #340]	; (8017210 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 80170bc:	6832      	ldr	r2, [r6, #0]
 80170be:	b92a      	cbnz	r2, 80170cc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 80170c0:	4b54      	ldr	r3, [pc, #336]	; (8017214 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 80170c2:	21ae      	movs	r1, #174	; 0xae
 80170c4:	4a54      	ldr	r2, [pc, #336]	; (8017218 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 80170c6:	4855      	ldr	r0, [pc, #340]	; (801721c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 80170c8:	f00e fd56 	bl	8025b78 <__assert_func>
 80170cc:	4d54      	ldr	r5, [pc, #336]	; (8017220 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 80170ce:	8829      	ldrh	r1, [r5, #0]
 80170d0:	4299      	cmp	r1, r3
 80170d2:	d803      	bhi.n	80170dc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 80170d4:	4b53      	ldr	r3, [pc, #332]	; (8017224 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 80170d6:	21af      	movs	r1, #175	; 0xaf
 80170d8:	4a4f      	ldr	r2, [pc, #316]	; (8017218 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 80170da:	e7f4      	b.n	80170c6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 80170dc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80170e0:	f04f 0c02 	mov.w	ip, #2
 80170e4:	4b50      	ldr	r3, [pc, #320]	; (8017228 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 80170e6:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80170f0:	f1be 0f01 	cmp.w	lr, #1
 80170f4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80170f8:	f04f 0300 	mov.w	r3, #0
 80170fc:	b208      	sxth	r0, r1
 80170fe:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8017102:	9303      	str	r3, [sp, #12]
 8017104:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017108:	d074      	beq.n	80171f4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801710a:	f1be 0f03 	cmp.w	lr, #3
 801710e:	d071      	beq.n	80171f4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 8017110:	1a52      	subs	r2, r2, r1
 8017112:	f8ad 3010 	strh.w	r3, [sp, #16]
 8017116:	f8ad 0012 	strh.w	r0, [sp, #18]
 801711a:	fb92 f2fc 	sdiv	r2, r2, ip
 801711e:	f8ad 200e 	strh.w	r2, [sp, #14]
 8017122:	f10d 090c 	add.w	r9, sp, #12
 8017126:	f10d 0a14 	add.w	sl, sp, #20
 801712a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801712e:	e88a 0003 	stmia.w	sl, {r0, r1}
 8017132:	4641      	mov	r1, r8
 8017134:	4650      	mov	r0, sl
 8017136:	f7fc ffaf 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 801713a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801713e:	2b00      	cmp	r3, #0
 8017140:	dd55      	ble.n	80171ee <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 8017142:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017146:	2b00      	cmp	r3, #0
 8017148:	dd51      	ble.n	80171ee <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801714a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801714e:	4649      	mov	r1, r9
 8017150:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017154:	4620      	mov	r0, r4
 8017156:	1a9b      	subs	r3, r3, r2
 8017158:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801715c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017160:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017164:	1a9b      	subs	r3, r3, r2
 8017166:	f8ad 3016 	strh.w	r3, [sp, #22]
 801716a:	6823      	ldr	r3, [r4, #0]
 801716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801716e:	4798      	blx	r3
 8017170:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017174:	2b00      	cmp	r3, #0
 8017176:	d047      	beq.n	8017208 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 8017178:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801717c:	6833      	ldr	r3, [r6, #0]
 801717e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8017182:	2b00      	cmp	r3, #0
 8017184:	d09c      	beq.n	80170c0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 8017186:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8017188:	882d      	ldrh	r5, [r5, #0]
 801718a:	428d      	cmp	r5, r1
 801718c:	d9a2      	bls.n	80170d4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 801718e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8017192:	6812      	ldr	r2, [r2, #0]
 8017194:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 8017198:	785b      	ldrb	r3, [r3, #1]
 801719a:	9209      	str	r2, [sp, #36]	; 0x24
 801719c:	f3c3 0501 	ubfx	r5, r3, #0, #2
 80171a0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80171a4:	9707      	str	r7, [sp, #28]
 80171a6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80171aa:	2300      	movs	r3, #0
 80171ac:	f88d 5020 	strb.w	r5, [sp, #32]
 80171b0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80171b4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80171b8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80171bc:	4b1b      	ldr	r3, [pc, #108]	; (801722c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 80171be:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80171c8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80171cc:	b10a      	cbz	r2, 80171d2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 80171ce:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80171d0:	b904      	cbnz	r4, 80171d4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 80171d2:	689c      	ldr	r4, [r3, #8]
 80171d4:	4b16      	ldr	r3, [pc, #88]	; (8017230 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 80171d6:	6818      	ldr	r0, [r3, #0]
 80171d8:	f7f0 fc7a 	bl	8007ad0 <_ZNK8touchgfx5Texts7getTextEt>
 80171dc:	ab07      	add	r3, sp, #28
 80171de:	9001      	str	r0, [sp, #4]
 80171e0:	4620      	mov	r0, r4
 80171e2:	9300      	str	r3, [sp, #0]
 80171e4:	4653      	mov	r3, sl
 80171e6:	e899 0006 	ldmia.w	r9, {r1, r2}
 80171ea:	f7f0 fc02 	bl	80079f2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80171ee:	b00c      	add	sp, #48	; 0x30
 80171f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171f4:	1a5b      	subs	r3, r3, r1
 80171f6:	f8ad 0010 	strh.w	r0, [sp, #16]
 80171fa:	f8ad 2012 	strh.w	r2, [sp, #18]
 80171fe:	fb93 f3fc 	sdiv	r3, r3, ip
 8017202:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017206:	e78c      	b.n	8017122 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 8017208:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801720c:	e7b6      	b.n	801717c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 801720e:	bf00      	nop
 8017210:	2400c914 	.word	0x2400c914
 8017214:	08029b44 	.word	0x08029b44
 8017218:	08029f98 	.word	0x08029f98
 801721c:	08029b86 	.word	0x08029b86
 8017220:	2400c918 	.word	0x2400c918
 8017224:	08029baf 	.word	0x08029baf
 8017228:	2400c91c 	.word	0x2400c91c
 801722c:	2400c8a4 	.word	0x2400c8a4
 8017230:	2400c920 	.word	0x2400c920

08017234 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8017234:	2101      	movs	r1, #1
 8017236:	2200      	movs	r2, #0
 8017238:	b510      	push	{r4, lr}
 801723a:	4c13      	ldr	r4, [pc, #76]	; (8017288 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 801723c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017240:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8017244:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017248:	6004      	str	r4, [r0, #0]
 801724a:	4c10      	ldr	r4, [pc, #64]	; (801728c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 801724c:	8082      	strh	r2, [r0, #4]
 801724e:	80c2      	strh	r2, [r0, #6]
 8017250:	8102      	strh	r2, [r0, #8]
 8017252:	8142      	strh	r2, [r0, #10]
 8017254:	8182      	strh	r2, [r0, #12]
 8017256:	81c2      	strh	r2, [r0, #14]
 8017258:	8202      	strh	r2, [r0, #16]
 801725a:	8242      	strh	r2, [r0, #18]
 801725c:	61c2      	str	r2, [r0, #28]
 801725e:	8402      	strh	r2, [r0, #32]
 8017260:	8442      	strh	r2, [r0, #34]	; 0x22
 8017262:	6282      	str	r2, [r0, #40]	; 0x28
 8017264:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8017268:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801726a:	8601      	strh	r1, [r0, #48]	; 0x30
 801726c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8017270:	6344      	str	r4, [r0, #52]	; 0x34
 8017272:	8701      	strh	r1, [r0, #56]	; 0x38
 8017274:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8017278:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 801727c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017280:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8017284:	bd10      	pop	{r4, pc}
 8017286:	bf00      	nop
 8017288:	08029f30 	.word	0x08029f30
 801728c:	08028160 	.word	0x08028160

08017290 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017290:	4b02      	ldr	r3, [pc, #8]	; (801729c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8017292:	6018      	str	r0, [r3, #0]
 8017294:	4b02      	ldr	r3, [pc, #8]	; (80172a0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8017296:	6019      	str	r1, [r3, #0]
 8017298:	4770      	bx	lr
 801729a:	bf00      	nop
 801729c:	2400c8ac 	.word	0x2400c8ac
 80172a0:	2400c8c0 	.word	0x2400c8c0

080172a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80172a4:	b538      	push	{r3, r4, r5, lr}
 80172a6:	4c2b      	ldr	r4, [pc, #172]	; (8017354 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80172a8:	4b2b      	ldr	r3, [pc, #172]	; (8017358 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80172aa:	6821      	ldr	r1, [r4, #0]
 80172ac:	681a      	ldr	r2, [r3, #0]
 80172ae:	4281      	cmp	r1, r0
 80172b0:	4d2a      	ldr	r5, [pc, #168]	; (801735c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80172b2:	492b      	ldr	r1, [pc, #172]	; (8017360 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80172b4:	d108      	bne.n	80172c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80172b6:	682b      	ldr	r3, [r5, #0]
 80172b8:	4293      	cmp	r3, r2
 80172ba:	d105      	bne.n	80172c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80172bc:	6808      	ldr	r0, [r1, #0]
 80172be:	280f      	cmp	r0, #15
 80172c0:	bf94      	ite	ls
 80172c2:	2000      	movls	r0, #0
 80172c4:	2001      	movhi	r0, #1
 80172c6:	bd38      	pop	{r3, r4, r5, pc}
 80172c8:	4b26      	ldr	r3, [pc, #152]	; (8017364 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80172ca:	6020      	str	r0, [r4, #0]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	602a      	str	r2, [r5, #0]
 80172d0:	4298      	cmp	r0, r3
 80172d2:	d905      	bls.n	80172e0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80172d4:	4b24      	ldr	r3, [pc, #144]	; (8017368 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80172d6:	2137      	movs	r1, #55	; 0x37
 80172d8:	4a24      	ldr	r2, [pc, #144]	; (801736c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80172da:	4825      	ldr	r0, [pc, #148]	; (8017370 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 80172dc:	f00e fc4c 	bl	8025b78 <__assert_func>
 80172e0:	f010 0403 	ands.w	r4, r0, #3
 80172e4:	bf1f      	itttt	ne
 80172e6:	f1c4 0504 	rsbne	r5, r4, #4
 80172ea:	3b04      	subne	r3, #4
 80172ec:	1952      	addne	r2, r2, r5
 80172ee:	191b      	addne	r3, r3, r4
 80172f0:	4d20      	ldr	r5, [pc, #128]	; (8017374 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 80172f2:	4402      	add	r2, r0
 80172f4:	1a1b      	subs	r3, r3, r0
 80172f6:	3001      	adds	r0, #1
 80172f8:	602a      	str	r2, [r5, #0]
 80172fa:	f020 0401 	bic.w	r4, r0, #1
 80172fe:	42a3      	cmp	r3, r4
 8017300:	d203      	bcs.n	801730a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8017302:	4b19      	ldr	r3, [pc, #100]	; (8017368 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017304:	214a      	movs	r1, #74	; 0x4a
 8017306:	4a19      	ldr	r2, [pc, #100]	; (801736c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017308:	e7e7      	b.n	80172da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801730a:	f010 0002 	ands.w	r0, r0, #2
 801730e:	bf1f      	itttt	ne
 8017310:	f1c0 0504 	rsbne	r5, r0, #4
 8017314:	1952      	addne	r2, r2, r5
 8017316:	1f05      	subne	r5, r0, #4
 8017318:	195b      	addne	r3, r3, r5
 801731a:	4422      	add	r2, r4
 801731c:	4d16      	ldr	r5, [pc, #88]	; (8017378 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801731e:	1b1b      	subs	r3, r3, r4
 8017320:	602a      	str	r2, [r5, #0]
 8017322:	429c      	cmp	r4, r3
 8017324:	d903      	bls.n	801732e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8017326:	4b10      	ldr	r3, [pc, #64]	; (8017368 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017328:	215d      	movs	r1, #93	; 0x5d
 801732a:	4a10      	ldr	r2, [pc, #64]	; (801736c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801732c:	e7d5      	b.n	80172da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801732e:	b120      	cbz	r0, 801733a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017330:	f1c0 0504 	rsb	r5, r0, #4
 8017334:	3804      	subs	r0, #4
 8017336:	442a      	add	r2, r5
 8017338:	4403      	add	r3, r0
 801733a:	1b1b      	subs	r3, r3, r4
 801733c:	4422      	add	r2, r4
 801733e:	480f      	ldr	r0, [pc, #60]	; (801737c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017340:	2b0f      	cmp	r3, #15
 8017342:	600b      	str	r3, [r1, #0]
 8017344:	6002      	str	r2, [r0, #0]
 8017346:	d803      	bhi.n	8017350 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017348:	4b0d      	ldr	r3, [pc, #52]	; (8017380 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801734a:	2170      	movs	r1, #112	; 0x70
 801734c:	4a07      	ldr	r2, [pc, #28]	; (801736c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801734e:	e7c4      	b.n	80172da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017350:	2001      	movs	r0, #1
 8017352:	e7b8      	b.n	80172c6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8017354:	2400c8b4 	.word	0x2400c8b4
 8017358:	2400c8ac 	.word	0x2400c8ac
 801735c:	2400c8bc 	.word	0x2400c8bc
 8017360:	2400c8c4 	.word	0x2400c8c4
 8017364:	2400c8c0 	.word	0x2400c8c0
 8017368:	08029fc6 	.word	0x08029fc6
 801736c:	0802a08e 	.word	0x0802a08e
 8017370:	08029fff 	.word	0x08029fff
 8017374:	2400c8c8 	.word	0x2400c8c8
 8017378:	2400c8b8 	.word	0x2400c8b8
 801737c:	2400c8b0 	.word	0x2400c8b0
 8017380:	0802a049 	.word	0x0802a049

08017384 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8017384:	4b04      	ldr	r3, [pc, #16]	; (8017398 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8017386:	6818      	ldr	r0, [r3, #0]
 8017388:	b120      	cbz	r0, 8017394 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801738a:	4b04      	ldr	r3, [pc, #16]	; (801739c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801738c:	6818      	ldr	r0, [r3, #0]
 801738e:	3000      	adds	r0, #0
 8017390:	bf18      	it	ne
 8017392:	2001      	movne	r0, #1
 8017394:	4770      	bx	lr
 8017396:	bf00      	nop
 8017398:	2400c8ac 	.word	0x2400c8ac
 801739c:	2400c8c0 	.word	0x2400c8c0

080173a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80173a0:	4b01      	ldr	r3, [pc, #4]	; (80173a8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80173a2:	6818      	ldr	r0, [r3, #0]
 80173a4:	4770      	bx	lr
 80173a6:	bf00      	nop
 80173a8:	2400c8b4 	.word	0x2400c8b4

080173ac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80173ac:	4b01      	ldr	r3, [pc, #4]	; (80173b4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80173ae:	6818      	ldr	r0, [r3, #0]
 80173b0:	4770      	bx	lr
 80173b2:	bf00      	nop
 80173b4:	2400c8bc 	.word	0x2400c8bc

080173b8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80173b8:	4b01      	ldr	r3, [pc, #4]	; (80173c0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80173ba:	6818      	ldr	r0, [r3, #0]
 80173bc:	4770      	bx	lr
 80173be:	bf00      	nop
 80173c0:	2400c8c8 	.word	0x2400c8c8

080173c4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80173c4:	4b01      	ldr	r3, [pc, #4]	; (80173cc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80173c6:	6818      	ldr	r0, [r3, #0]
 80173c8:	4770      	bx	lr
 80173ca:	bf00      	nop
 80173cc:	2400c8b8 	.word	0x2400c8b8

080173d0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80173d0:	4b01      	ldr	r3, [pc, #4]	; (80173d8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80173d2:	6818      	ldr	r0, [r3, #0]
 80173d4:	4770      	bx	lr
 80173d6:	bf00      	nop
 80173d8:	2400c8b0 	.word	0x2400c8b0

080173dc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80173dc:	4b01      	ldr	r3, [pc, #4]	; (80173e4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80173de:	6818      	ldr	r0, [r3, #0]
 80173e0:	4770      	bx	lr
 80173e2:	bf00      	nop
 80173e4:	2400c8c4 	.word	0x2400c8c4

080173e8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80173e8:	b510      	push	{r4, lr}
 80173ea:	6803      	ldr	r3, [r0, #0]
 80173ec:	460c      	mov	r4, r1
 80173ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173f0:	4798      	blx	r3
 80173f2:	1b03      	subs	r3, r0, r4
 80173f4:	4258      	negs	r0, r3
 80173f6:	4158      	adcs	r0, r3
 80173f8:	bd10      	pop	{r4, pc}
	...

080173fc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80173fc:	4b01      	ldr	r3, [pc, #4]	; (8017404 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80173fe:	6019      	str	r1, [r3, #0]
 8017400:	4770      	bx	lr
 8017402:	bf00      	nop
 8017404:	2400c8cc 	.word	0x2400c8cc

08017408 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801740c:	4696      	mov	lr, r2
 801740e:	b097      	sub	sp, #92	; 0x5c
 8017410:	4605      	mov	r5, r0
 8017412:	4614      	mov	r4, r2
 8017414:	460e      	mov	r6, r1
 8017416:	461f      	mov	r7, r3
 8017418:	f10d 0c1c 	add.w	ip, sp, #28
 801741c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8017420:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8017424:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017428:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801742c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017430:	f8de 3000 	ldr.w	r3, [lr]
 8017434:	f104 0e14 	add.w	lr, r4, #20
 8017438:	f8cc 3000 	str.w	r3, [ip]
 801743c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017440:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017444:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017448:	f8de 3000 	ldr.w	r3, [lr]
 801744c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8017450:	f8cc 3000 	str.w	r3, [ip]
 8017454:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017458:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801745c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017460:	f8de 3000 	ldr.w	r3, [lr]
 8017464:	4631      	mov	r1, r6
 8017466:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017468:	4628      	mov	r0, r5
 801746a:	f8cc 3000 	str.w	r3, [ip]
 801746e:	682b      	ldr	r3, [r5, #0]
 8017470:	9201      	str	r2, [sp, #4]
 8017472:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017474:	f8cd 8008 	str.w	r8, [sp, #8]
 8017478:	9200      	str	r2, [sp, #0]
 801747a:	aa07      	add	r2, sp, #28
 801747c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8017480:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 8017484:	463b      	mov	r3, r7
 8017486:	47d8      	blx	fp
 8017488:	46a6      	mov	lr, r4
 801748a:	f10d 0c1c 	add.w	ip, sp, #28
 801748e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017492:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017496:	f8de 3000 	ldr.w	r3, [lr]
 801749a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801749e:	343c      	adds	r4, #60	; 0x3c
 80174a0:	f8cc 3000 	str.w	r3, [ip]
 80174a4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80174a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80174ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174b0:	f8de 3000 	ldr.w	r3, [lr]
 80174b4:	f8cc 3000 	str.w	r3, [ip]
 80174b8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80174bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174c2:	6823      	ldr	r3, [r4, #0]
 80174c4:	4631      	mov	r1, r6
 80174c6:	4628      	mov	r0, r5
 80174c8:	f8cc 3000 	str.w	r3, [ip]
 80174cc:	682b      	ldr	r3, [r5, #0]
 80174ce:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80174d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80174d4:	f8cd 8008 	str.w	r8, [sp, #8]
 80174d8:	9201      	str	r2, [sp, #4]
 80174da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80174dc:	9200      	str	r2, [sp, #0]
 80174de:	aa07      	add	r2, sp, #28
 80174e0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80174e2:	463b      	mov	r3, r7
 80174e4:	47a0      	blx	r4
 80174e6:	b017      	add	sp, #92	; 0x5c
 80174e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080174ec <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80174ec:	2000      	movs	r0, #0
 80174ee:	4770      	bx	lr

080174f0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80174f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174f4:	b08d      	sub	sp, #52	; 0x34
 80174f6:	4688      	mov	r8, r1
 80174f8:	f8d3 c000 	ldr.w	ip, [r3]
 80174fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80174fe:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8017502:	680f      	ldr	r7, [r1, #0]
 8017504:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8017508:	eba7 070c 	sub.w	r7, r7, ip
 801750c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8017510:	edd3 6a07 	vldr	s13, [r3, #28]
 8017514:	42bc      	cmp	r4, r7
 8017516:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017518:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801751c:	bfa8      	it	ge
 801751e:	463c      	movge	r4, r7
 8017520:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017524:	f9ba 1000 	ldrsh.w	r1, [sl]
 8017528:	ee07 4a90 	vmov	s15, r4
 801752c:	eb09 0e0c 	add.w	lr, r9, ip
 8017530:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8017534:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017538:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801753c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8017540:	4571      	cmp	r1, lr
 8017542:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017546:	ee65 4a24 	vmul.f32	s9, s10, s9
 801754a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801754e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017552:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017556:	ee32 1a05 	vadd.f32	s2, s4, s10
 801755a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801755e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017562:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017566:	ee22 2a07 	vmul.f32	s4, s4, s14
 801756a:	f340 808c 	ble.w	8017686 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801756e:	eba1 060e 	sub.w	r6, r1, lr
 8017572:	fb96 f5f4 	sdiv	r5, r6, r4
 8017576:	ee07 5a10 	vmov	s14, r5
 801757a:	2d00      	cmp	r5, #0
 801757c:	fb04 6615 	mls	r6, r4, r5, r6
 8017580:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017584:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017588:	eee7 0a24 	vfma.f32	s1, s14, s9
 801758c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017590:	dd12      	ble.n	80175b8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8017592:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017596:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801759a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801759e:	eef5 6a40 	vcmp.f32	s13, #0.0
 80175a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175a6:	bf14      	ite	ne
 80175a8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80175ac:	eeb0 7a67 	vmoveq.f32	s14, s15
 80175b0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80175b4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80175b8:	fb05 f204 	mul.w	r2, r5, r4
 80175bc:	1abf      	subs	r7, r7, r2
 80175be:	4494      	add	ip, r2
 80175c0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80175c4:	4411      	add	r1, r2
 80175c6:	eb09 020c 	add.w	r2, r9, ip
 80175ca:	b209      	sxth	r1, r1
 80175cc:	443a      	add	r2, r7
 80175ce:	428a      	cmp	r2, r1
 80175d0:	bfc4      	itt	gt
 80175d2:	eba1 0209 	subgt.w	r2, r1, r9
 80175d6:	eba2 070c 	subgt.w	r7, r2, ip
 80175da:	2f00      	cmp	r7, #0
 80175dc:	dd50      	ble.n	8017680 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80175de:	fb97 f1f4 	sdiv	r1, r7, r4
 80175e2:	fb04 7211 	mls	r2, r4, r1, r7
 80175e6:	b90a      	cbnz	r2, 80175ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80175e8:	3901      	subs	r1, #1
 80175ea:	4622      	mov	r2, r4
 80175ec:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80175f0:	6840      	ldr	r0, [r0, #4]
 80175f2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80175f6:	44b6      	add	lr, r6
 80175f8:	f8d0 a000 	ldr.w	sl, [r0]
 80175fc:	2900      	cmp	r1, #0
 80175fe:	bfcc      	ite	gt
 8017600:	46a1      	movgt	r9, r4
 8017602:	4691      	movle	r9, r2
 8017604:	900b      	str	r0, [sp, #44]	; 0x2c
 8017606:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017608:	fb04 e505 	mla	r5, r4, r5, lr
 801760c:	eef0 6a42 	vmov.f32	s13, s4
 8017610:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017614:	9008      	str	r0, [sp, #32]
 8017616:	eeb0 7a61 	vmov.f32	s14, s3
 801761a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801761c:	695b      	ldr	r3, [r3, #20]
 801761e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017622:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8017626:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801762a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801762c:	445b      	add	r3, fp
 801762e:	9307      	str	r3, [sp, #28]
 8017630:	ee16 3a90 	vmov	r3, s13
 8017634:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8017638:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801763c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017640:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017644:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017648:	ee17 7a90 	vmov	r7, s15
 801764c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017650:	fb97 f7f4 	sdiv	r7, r7, r4
 8017654:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017658:	ee17 ca90 	vmov	ip, s15
 801765c:	fb9c fcf4 	sdiv	ip, ip, r4
 8017660:	fb0c 3306 	mla	r3, ip, r6, r3
 8017664:	9302      	str	r3, [sp, #8]
 8017666:	ee17 3a10 	vmov	r3, s14
 801766a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801766e:	fb07 3706 	mla	r7, r7, r6, r3
 8017672:	eba9 0306 	sub.w	r3, r9, r6
 8017676:	e9cd 4700 	strd	r4, r7, [sp]
 801767a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801767e:	47a0      	blx	r4
 8017680:	b00d      	add	sp, #52	; 0x34
 8017682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017686:	2500      	movs	r5, #0
 8017688:	462e      	mov	r6, r5
 801768a:	e799      	b.n	80175c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801768c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017690:	b0db      	sub	sp, #364	; 0x16c
 8017692:	461d      	mov	r5, r3
 8017694:	4614      	mov	r4, r2
 8017696:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801769a:	910f      	str	r1, [sp, #60]	; 0x3c
 801769c:	4629      	mov	r1, r5
 801769e:	930a      	str	r3, [sp, #40]	; 0x28
 80176a0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80176a4:	9009      	str	r0, [sp, #36]	; 0x24
 80176a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80176a8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80176ac:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80176b0:	9310      	str	r3, [sp, #64]	; 0x40
 80176b2:	6803      	ldr	r3, [r0, #0]
 80176b4:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80176b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80176ba:	47b8      	blx	r7
 80176bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176be:	6058      	str	r0, [r3, #4]
 80176c0:	2800      	cmp	r0, #0
 80176c2:	f000 83a1 	beq.w	8017e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80176c6:	682b      	ldr	r3, [r5, #0]
 80176c8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80176cc:	ed94 7a02 	vldr	s14, [r4, #8]
 80176d0:	9314      	str	r3, [sp, #80]	; 0x50
 80176d2:	686b      	ldr	r3, [r5, #4]
 80176d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80176d8:	9315      	str	r3, [sp, #84]	; 0x54
 80176da:	4bc1      	ldr	r3, [pc, #772]	; (80179e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80176dc:	7819      	ldrb	r1, [r3, #0]
 80176de:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80176e2:	2900      	cmp	r1, #0
 80176e4:	bf16      	itet	ne
 80176e6:	4619      	movne	r1, r3
 80176e8:	4611      	moveq	r1, r2
 80176ea:	4613      	movne	r3, r2
 80176ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176f0:	9116      	str	r1, [sp, #88]	; 0x58
 80176f2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80176f6:	f240 8387 	bls.w	8017e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80176fa:	ed94 7a07 	vldr	s14, [r4, #28]
 80176fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017706:	f240 837f 	bls.w	8017e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801770a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801770e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017716:	f240 8377 	bls.w	8017e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801771a:	6822      	ldr	r2, [r4, #0]
 801771c:	4bb1      	ldr	r3, [pc, #708]	; (80179e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801771e:	429a      	cmp	r2, r3
 8017720:	f2c0 8372 	blt.w	8017e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017724:	49b0      	ldr	r1, [pc, #704]	; (80179e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8017726:	6963      	ldr	r3, [r4, #20]
 8017728:	428a      	cmp	r2, r1
 801772a:	f300 836d 	bgt.w	8017e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801772e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017732:	48ae      	ldr	r0, [pc, #696]	; (80179ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8017734:	33ff      	adds	r3, #255	; 0xff
 8017736:	4283      	cmp	r3, r0
 8017738:	f200 8366 	bhi.w	8017e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801773c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801773e:	4dac      	ldr	r5, [pc, #688]	; (80179f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8017740:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017744:	33ff      	adds	r3, #255	; 0xff
 8017746:	42ab      	cmp	r3, r5
 8017748:	f200 835e 	bhi.w	8017e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801774c:	6862      	ldr	r2, [r4, #4]
 801774e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8017752:	33ff      	adds	r3, #255	; 0xff
 8017754:	4283      	cmp	r3, r0
 8017756:	f200 8357 	bhi.w	8017e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801775a:	69a1      	ldr	r1, [r4, #24]
 801775c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8017760:	33ff      	adds	r3, #255	; 0xff
 8017762:	4283      	cmp	r3, r0
 8017764:	f200 8350 	bhi.w	8017e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017768:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801776a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801776e:	30ff      	adds	r0, #255	; 0xff
 8017770:	42a8      	cmp	r0, r5
 8017772:	f200 8349 	bhi.w	8017e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017776:	428a      	cmp	r2, r1
 8017778:	f280 8110 	bge.w	801799c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801777c:	429a      	cmp	r2, r3
 801777e:	f300 8119 	bgt.w	80179b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8017782:	4299      	cmp	r1, r3
 8017784:	f280 811d 	bge.w	80179c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8017788:	2502      	movs	r5, #2
 801778a:	2701      	movs	r7, #1
 801778c:	46a9      	mov	r9, r5
 801778e:	46b8      	mov	r8, r7
 8017790:	f04f 0a00 	mov.w	sl, #0
 8017794:	4621      	mov	r1, r4
 8017796:	a849      	add	r0, sp, #292	; 0x124
 8017798:	f003 fcdc 	bl	801b154 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801779c:	4622      	mov	r2, r4
 801779e:	4653      	mov	r3, sl
 80177a0:	a949      	add	r1, sp, #292	; 0x124
 80177a2:	f8cd 9000 	str.w	r9, [sp]
 80177a6:	a819      	add	r0, sp, #100	; 0x64
 80177a8:	f003 fe04 	bl	801b3b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80177ac:	4622      	mov	r2, r4
 80177ae:	4653      	mov	r3, sl
 80177b0:	a949      	add	r1, sp, #292	; 0x124
 80177b2:	f8cd 8000 	str.w	r8, [sp]
 80177b6:	a829      	add	r0, sp, #164	; 0xa4
 80177b8:	f003 fdfc 	bl	801b3b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80177bc:	4643      	mov	r3, r8
 80177be:	4622      	mov	r2, r4
 80177c0:	a949      	add	r1, sp, #292	; 0x124
 80177c2:	f8cd 9000 	str.w	r9, [sp]
 80177c6:	a839      	add	r0, sp, #228	; 0xe4
 80177c8:	f003 fdf4 	bl	801b3b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80177cc:	42af      	cmp	r7, r5
 80177ce:	af12      	add	r7, sp, #72	; 0x48
 80177d0:	bfb7      	itett	lt
 80177d2:	2300      	movlt	r3, #0
 80177d4:	2301      	movge	r3, #1
 80177d6:	ad29      	addlt	r5, sp, #164	; 0xa4
 80177d8:	ac19      	addlt	r4, sp, #100	; 0x64
 80177da:	bfb1      	iteee	lt
 80177dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80177de:	ad19      	addge	r5, sp, #100	; 0x64
 80177e0:	930e      	strge	r3, [sp, #56]	; 0x38
 80177e2:	ac29      	addge	r4, sp, #164	; 0xa4
 80177e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80177ea:	e887 0003 	stmia.w	r7, {r0, r1}
 80177ee:	b928      	cbnz	r0, 80177fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80177f0:	4b80      	ldr	r3, [pc, #512]	; (80179f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80177f2:	6818      	ldr	r0, [r3, #0]
 80177f4:	6803      	ldr	r3, [r0, #0]
 80177f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80177f8:	4798      	blx	r3
 80177fa:	6038      	str	r0, [r7, #0]
 80177fc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80177fe:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017802:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017806:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8017808:	930c      	str	r3, [sp, #48]	; 0x30
 801780a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801780c:	6963      	ldr	r3, [r4, #20]
 801780e:	440b      	add	r3, r1
 8017810:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017814:	4408      	add	r0, r1
 8017816:	b200      	sxth	r0, r0
 8017818:	4283      	cmp	r3, r0
 801781a:	900d      	str	r0, [sp, #52]	; 0x34
 801781c:	f280 80dd 	bge.w	80179da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8017820:	428b      	cmp	r3, r1
 8017822:	da08      	bge.n	8017836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017824:	2a00      	cmp	r2, #0
 8017826:	dd06      	ble.n	8017836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017828:	1acb      	subs	r3, r1, r3
 801782a:	429a      	cmp	r2, r3
 801782c:	f2c0 80e4 	blt.w	80179f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8017830:	2b00      	cmp	r3, #0
 8017832:	f300 80e2 	bgt.w	80179fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8017836:	6967      	ldr	r7, [r4, #20]
 8017838:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801783c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801783e:	443b      	add	r3, r7
 8017840:	461f      	mov	r7, r3
 8017842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017844:	1bdf      	subs	r7, r3, r7
 8017846:	4297      	cmp	r7, r2
 8017848:	bfa8      	it	ge
 801784a:	4617      	movge	r7, r2
 801784c:	2f00      	cmp	r7, #0
 801784e:	f340 8166 	ble.w	8017b1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8017852:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017854:	6829      	ldr	r1, [r5, #0]
 8017856:	f9b3 2000 	ldrsh.w	r2, [r3]
 801785a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801785e:	4411      	add	r1, r2
 8017860:	6820      	ldr	r0, [r4, #0]
 8017862:	4299      	cmp	r1, r3
 8017864:	dd1a      	ble.n	801789c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017866:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801786a:	4402      	add	r2, r0
 801786c:	440b      	add	r3, r1
 801786e:	b21b      	sxth	r3, r3
 8017870:	429a      	cmp	r2, r3
 8017872:	dc13      	bgt.n	801789c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8017874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017876:	a912      	add	r1, sp, #72	; 0x48
 8017878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801787a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	9206      	str	r2, [sp, #24]
 8017880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017882:	9500      	str	r5, [sp, #0]
 8017884:	9205      	str	r2, [sp, #20]
 8017886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017888:	e9cd b203 	strd	fp, r2, [sp, #12]
 801788c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801788e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017892:	aa49      	add	r2, sp, #292	; 0x124
 8017894:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8017898:	4623      	mov	r3, r4
 801789a:	47c8      	blx	r9
 801789c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80178a0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80178a4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80178a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80178ac:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80178b0:	68a1      	ldr	r1, [r4, #8]
 80178b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80178b6:	ed94 6a08 	vldr	s12, [r4, #32]
 80178ba:	edd4 6a07 	vldr	s13, [r4, #28]
 80178be:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80178c2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80178c6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80178ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80178ce:	edc4 6a07 	vstr	s13, [r4, #28]
 80178d2:	441a      	add	r2, r3
 80178d4:	6963      	ldr	r3, [r4, #20]
 80178d6:	3301      	adds	r3, #1
 80178d8:	6022      	str	r2, [r4, #0]
 80178da:	6163      	str	r3, [r4, #20]
 80178dc:	69a3      	ldr	r3, [r4, #24]
 80178de:	3b01      	subs	r3, #1
 80178e0:	61a3      	str	r3, [r4, #24]
 80178e2:	6923      	ldr	r3, [r4, #16]
 80178e4:	440b      	add	r3, r1
 80178e6:	68e1      	ldr	r1, [r4, #12]
 80178e8:	428b      	cmp	r3, r1
 80178ea:	6123      	str	r3, [r4, #16]
 80178ec:	db15      	blt.n	801791a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80178ee:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80178f2:	3201      	adds	r2, #1
 80178f4:	1a5b      	subs	r3, r3, r1
 80178f6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80178fa:	6022      	str	r2, [r4, #0]
 80178fc:	6123      	str	r3, [r4, #16]
 80178fe:	edc4 6a07 	vstr	s13, [r4, #28]
 8017902:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017906:	ee36 7a87 	vadd.f32	s14, s13, s14
 801790a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801790e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017916:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801791a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801791e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017922:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017926:	ee37 7a27 	vadd.f32	s14, s14, s15
 801792a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801792e:	68a9      	ldr	r1, [r5, #8]
 8017930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017934:	ed95 6a08 	vldr	s12, [r5, #32]
 8017938:	edd5 6a07 	vldr	s13, [r5, #28]
 801793c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017940:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017944:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017948:	e9d5 2300 	ldrd	r2, r3, [r5]
 801794c:	edc5 6a07 	vstr	s13, [r5, #28]
 8017950:	441a      	add	r2, r3
 8017952:	696b      	ldr	r3, [r5, #20]
 8017954:	3301      	adds	r3, #1
 8017956:	602a      	str	r2, [r5, #0]
 8017958:	616b      	str	r3, [r5, #20]
 801795a:	69ab      	ldr	r3, [r5, #24]
 801795c:	3b01      	subs	r3, #1
 801795e:	61ab      	str	r3, [r5, #24]
 8017960:	692b      	ldr	r3, [r5, #16]
 8017962:	440b      	add	r3, r1
 8017964:	68e9      	ldr	r1, [r5, #12]
 8017966:	428b      	cmp	r3, r1
 8017968:	612b      	str	r3, [r5, #16]
 801796a:	db15      	blt.n	8017998 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801796c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017970:	3201      	adds	r2, #1
 8017972:	1a5b      	subs	r3, r3, r1
 8017974:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017978:	602a      	str	r2, [r5, #0]
 801797a:	612b      	str	r3, [r5, #16]
 801797c:	edc5 6a07 	vstr	s13, [r5, #28]
 8017980:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017984:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017988:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801798c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017994:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017998:	3f01      	subs	r7, #1
 801799a:	e757      	b.n	801784c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801799c:	4299      	cmp	r1, r3
 801799e:	dc13      	bgt.n	80179c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80179a0:	429a      	cmp	r2, r3
 80179a2:	da14      	bge.n	80179ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80179a4:	2502      	movs	r5, #2
 80179a6:	2703      	movs	r7, #3
 80179a8:	f04f 0800 	mov.w	r8, #0
 80179ac:	46a9      	mov	r9, r5
 80179ae:	f04f 0a01 	mov.w	sl, #1
 80179b2:	e6ef      	b.n	8017794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80179b4:	2501      	movs	r5, #1
 80179b6:	2700      	movs	r7, #0
 80179b8:	46a9      	mov	r9, r5
 80179ba:	46b8      	mov	r8, r7
 80179bc:	f04f 0a02 	mov.w	sl, #2
 80179c0:	e6e8      	b.n	8017794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80179c2:	2501      	movs	r5, #1
 80179c4:	2702      	movs	r7, #2
 80179c6:	e6e1      	b.n	801778c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80179c8:	2500      	movs	r5, #0
 80179ca:	2701      	movs	r7, #1
 80179cc:	e7f4      	b.n	80179b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80179ce:	2702      	movs	r7, #2
 80179d0:	2503      	movs	r5, #3
 80179d2:	f04f 0900 	mov.w	r9, #0
 80179d6:	46b8      	mov	r8, r7
 80179d8:	e7e9      	b.n	80179ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80179da:	4613      	mov	r3, r2
 80179dc:	e728      	b.n	8017830 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80179de:	bf00      	nop
 80179e0:	2400c89c 	.word	0x2400c89c
 80179e4:	fffd8f01 	.word	0xfffd8f01
 80179e8:	00027100 	.word	0x00027100
 80179ec:	0004e1ff 	.word	0x0004e1ff
 80179f0:	0004e1fe 	.word	0x0004e1fe
 80179f4:	2400c8a4 	.word	0x2400c8a4
 80179f8:	4613      	mov	r3, r2
 80179fa:	992b      	ldr	r1, [sp, #172]	; 0xac
 80179fc:	469e      	mov	lr, r3
 80179fe:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8017a00:	469c      	mov	ip, r3
 8017a02:	9111      	str	r1, [sp, #68]	; 0x44
 8017a04:	f04f 0900 	mov.w	r9, #0
 8017a08:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8017a0c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8017a10:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8017a14:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8017a18:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8017a1c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8017a20:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8017a24:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8017a28:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8017a2c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8017a30:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8017a34:	f1bc 0f00 	cmp.w	ip, #0
 8017a38:	d147      	bne.n	8017aca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8017a3a:	eb03 0c07 	add.w	ip, r3, r7
 8017a3e:	1ad7      	subs	r7, r2, r3
 8017a40:	f1b9 0f00 	cmp.w	r9, #0
 8017a44:	d009      	beq.n	8017a5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8017a46:	9029      	str	r0, [sp, #164]	; 0xa4
 8017a48:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8017a4c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8017a50:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8017a54:	912d      	str	r1, [sp, #180]	; 0xb4
 8017a56:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8017a5a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017a5c:	f04f 0800 	mov.w	r8, #0
 8017a60:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017a64:	9111      	str	r1, [sp, #68]	; 0x44
 8017a66:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017a6a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017a6e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017a72:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017a76:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017a7a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017a7e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017a82:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017a86:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017a8a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017a8e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017a92:	f1be 0f00 	cmp.w	lr, #0
 8017a96:	d031      	beq.n	8017afc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8017a98:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017a9a:	4450      	add	r0, sl
 8017a9c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017aa0:	4431      	add	r1, r6
 8017aa2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017aa6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017aaa:	4549      	cmp	r1, r9
 8017aac:	db08      	blt.n	8017ac0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8017aae:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017ab2:	3001      	adds	r0, #1
 8017ab4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017ab8:	eba1 0109 	sub.w	r1, r1, r9
 8017abc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017ac0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017ac4:	f04f 0801 	mov.w	r8, #1
 8017ac8:	e7e3      	b.n	8017a92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8017aca:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017acc:	4450      	add	r0, sl
 8017ace:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017ad2:	4431      	add	r1, r6
 8017ad4:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017ad8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017adc:	4541      	cmp	r1, r8
 8017ade:	db08      	blt.n	8017af2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8017ae0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017ae4:	3001      	adds	r0, #1
 8017ae6:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017aea:	eba1 0108 	sub.w	r1, r1, r8
 8017aee:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017af2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017af6:	f04f 0901 	mov.w	r9, #1
 8017afa:	e79b      	b.n	8017a34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8017afc:	449c      	add	ip, r3
 8017afe:	1aff      	subs	r7, r7, r3
 8017b00:	f1b8 0f00 	cmp.w	r8, #0
 8017b04:	d009      	beq.n	8017b1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8017b06:	9019      	str	r0, [sp, #100]	; 0x64
 8017b08:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017b0c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017b10:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017b14:	911d      	str	r1, [sp, #116]	; 0x74
 8017b16:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017b1a:	1ad2      	subs	r2, r2, r3
 8017b1c:	e68b      	b.n	8017836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b20:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	f000 80d1 	beq.w	8017cca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017b28:	ad19      	add	r5, sp, #100	; 0x64
 8017b2a:	ac39      	add	r4, sp, #228	; 0xe4
 8017b2c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017b2e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017b32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017b36:	930c      	str	r3, [sp, #48]	; 0x30
 8017b38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017b3a:	6963      	ldr	r3, [r4, #20]
 8017b3c:	440b      	add	r3, r1
 8017b3e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017b42:	4408      	add	r0, r1
 8017b44:	b200      	sxth	r0, r0
 8017b46:	4283      	cmp	r3, r0
 8017b48:	900d      	str	r0, [sp, #52]	; 0x34
 8017b4a:	f280 80c1 	bge.w	8017cd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8017b4e:	428b      	cmp	r3, r1
 8017b50:	da08      	bge.n	8017b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017b52:	2a00      	cmp	r2, #0
 8017b54:	dd06      	ble.n	8017b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017b56:	1acb      	subs	r3, r1, r3
 8017b58:	429a      	cmp	r2, r3
 8017b5a:	f2c0 80bb 	blt.w	8017cd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	f300 80b9 	bgt.w	8017cd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8017b64:	6967      	ldr	r7, [r4, #20]
 8017b66:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b6c:	443b      	add	r3, r7
 8017b6e:	461f      	mov	r7, r3
 8017b70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b72:	1bdf      	subs	r7, r3, r7
 8017b74:	4297      	cmp	r7, r2
 8017b76:	bfa8      	it	ge
 8017b78:	4617      	movge	r7, r2
 8017b7a:	2f00      	cmp	r7, #0
 8017b7c:	f340 813c 	ble.w	8017df8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8017b80:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017b82:	6829      	ldr	r1, [r5, #0]
 8017b84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017b88:	f9bb 3000 	ldrsh.w	r3, [fp]
 8017b8c:	4411      	add	r1, r2
 8017b8e:	6820      	ldr	r0, [r4, #0]
 8017b90:	4299      	cmp	r1, r3
 8017b92:	dd1a      	ble.n	8017bca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017b94:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8017b98:	4402      	add	r2, r0
 8017b9a:	440b      	add	r3, r1
 8017b9c:	b21b      	sxth	r3, r3
 8017b9e:	429a      	cmp	r2, r3
 8017ba0:	dc13      	bgt.n	8017bca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8017ba2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017ba4:	a912      	add	r1, sp, #72	; 0x48
 8017ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	9206      	str	r2, [sp, #24]
 8017bae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017bb0:	9500      	str	r5, [sp, #0]
 8017bb2:	9205      	str	r2, [sp, #20]
 8017bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017bb6:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017bba:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017bbc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017bc0:	aa49      	add	r2, sp, #292	; 0x124
 8017bc2:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8017bc6:	4623      	mov	r3, r4
 8017bc8:	47c8      	blx	r9
 8017bca:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017bce:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017bd2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017bda:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017bde:	68a1      	ldr	r1, [r4, #8]
 8017be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017be4:	ed94 6a08 	vldr	s12, [r4, #32]
 8017be8:	edd4 6a07 	vldr	s13, [r4, #28]
 8017bec:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017bf0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017bf4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017bf8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017bfc:	edc4 6a07 	vstr	s13, [r4, #28]
 8017c00:	441a      	add	r2, r3
 8017c02:	6963      	ldr	r3, [r4, #20]
 8017c04:	3301      	adds	r3, #1
 8017c06:	6022      	str	r2, [r4, #0]
 8017c08:	6163      	str	r3, [r4, #20]
 8017c0a:	69a3      	ldr	r3, [r4, #24]
 8017c0c:	3b01      	subs	r3, #1
 8017c0e:	61a3      	str	r3, [r4, #24]
 8017c10:	6923      	ldr	r3, [r4, #16]
 8017c12:	440b      	add	r3, r1
 8017c14:	68e1      	ldr	r1, [r4, #12]
 8017c16:	428b      	cmp	r3, r1
 8017c18:	6123      	str	r3, [r4, #16]
 8017c1a:	db15      	blt.n	8017c48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8017c1c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017c20:	3201      	adds	r2, #1
 8017c22:	1a5b      	subs	r3, r3, r1
 8017c24:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017c28:	6022      	str	r2, [r4, #0]
 8017c2a:	6123      	str	r3, [r4, #16]
 8017c2c:	edc4 6a07 	vstr	s13, [r4, #28]
 8017c30:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017c34:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017c38:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017c3c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017c44:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017c48:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017c4c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017c50:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017c58:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017c5c:	68a9      	ldr	r1, [r5, #8]
 8017c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017c62:	ed95 6a08 	vldr	s12, [r5, #32]
 8017c66:	edd5 6a07 	vldr	s13, [r5, #28]
 8017c6a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017c6e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017c72:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017c76:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017c7a:	edc5 6a07 	vstr	s13, [r5, #28]
 8017c7e:	441a      	add	r2, r3
 8017c80:	696b      	ldr	r3, [r5, #20]
 8017c82:	3301      	adds	r3, #1
 8017c84:	602a      	str	r2, [r5, #0]
 8017c86:	616b      	str	r3, [r5, #20]
 8017c88:	69ab      	ldr	r3, [r5, #24]
 8017c8a:	3b01      	subs	r3, #1
 8017c8c:	61ab      	str	r3, [r5, #24]
 8017c8e:	692b      	ldr	r3, [r5, #16]
 8017c90:	440b      	add	r3, r1
 8017c92:	68e9      	ldr	r1, [r5, #12]
 8017c94:	428b      	cmp	r3, r1
 8017c96:	612b      	str	r3, [r5, #16]
 8017c98:	db15      	blt.n	8017cc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8017c9a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017c9e:	3201      	adds	r2, #1
 8017ca0:	1a5b      	subs	r3, r3, r1
 8017ca2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017ca6:	602a      	str	r2, [r5, #0]
 8017ca8:	612b      	str	r3, [r5, #16]
 8017caa:	edc5 6a07 	vstr	s13, [r5, #28]
 8017cae:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017cb2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017cb6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017cba:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017cc2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017cc6:	3f01      	subs	r7, #1
 8017cc8:	e757      	b.n	8017b7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8017cca:	ad39      	add	r5, sp, #228	; 0xe4
 8017ccc:	ac19      	add	r4, sp, #100	; 0x64
 8017cce:	e72d      	b.n	8017b2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8017cd0:	4613      	mov	r3, r2
 8017cd2:	e744      	b.n	8017b5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8017cd4:	4613      	mov	r3, r2
 8017cd6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8017cd8:	469e      	mov	lr, r3
 8017cda:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8017cde:	461f      	mov	r7, r3
 8017ce0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8017ce4:	f04f 0900 	mov.w	r9, #0
 8017ce8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8017cec:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8017cf0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8017cf4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8017cf8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8017cfc:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8017cfe:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8017d02:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8017d06:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8017d0a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8017d0e:	960e      	str	r6, [sp, #56]	; 0x38
 8017d10:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8017d14:	2f00      	cmp	r7, #0
 8017d16:	d146      	bne.n	8017da6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017d18:	449c      	add	ip, r3
 8017d1a:	1ad7      	subs	r7, r2, r3
 8017d1c:	f1b9 0f00 	cmp.w	r9, #0
 8017d20:	d009      	beq.n	8017d36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8017d22:	9039      	str	r0, [sp, #228]	; 0xe4
 8017d24:	913d      	str	r1, [sp, #244]	; 0xf4
 8017d26:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8017d2a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8017d2e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8017d32:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8017d36:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017d38:	f04f 0800 	mov.w	r8, #0
 8017d3c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017d40:	910e      	str	r1, [sp, #56]	; 0x38
 8017d42:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017d46:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017d4a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017d4e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017d52:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017d56:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017d5a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017d5e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017d62:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017d66:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017d6a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017d6e:	f1be 0f00 	cmp.w	lr, #0
 8017d72:	d030      	beq.n	8017dd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017d74:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017d76:	4450      	add	r0, sl
 8017d78:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017d7c:	4431      	add	r1, r6
 8017d7e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017d82:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017d86:	4549      	cmp	r1, r9
 8017d88:	db08      	blt.n	8017d9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8017d8a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017d8e:	3001      	adds	r0, #1
 8017d90:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017d94:	eba1 0109 	sub.w	r1, r1, r9
 8017d98:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017d9c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017da0:	f04f 0801 	mov.w	r8, #1
 8017da4:	e7e3      	b.n	8017d6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8017da6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017da8:	4450      	add	r0, sl
 8017daa:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017dae:	4431      	add	r1, r6
 8017db0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017db4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017db8:	4541      	cmp	r1, r8
 8017dba:	db08      	blt.n	8017dce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8017dbc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017dc0:	3001      	adds	r0, #1
 8017dc2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017dc6:	eba1 0108 	sub.w	r1, r1, r8
 8017dca:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017dce:	3f01      	subs	r7, #1
 8017dd0:	f04f 0901 	mov.w	r9, #1
 8017dd4:	e79e      	b.n	8017d14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017dd6:	449c      	add	ip, r3
 8017dd8:	1aff      	subs	r7, r7, r3
 8017dda:	f1b8 0f00 	cmp.w	r8, #0
 8017dde:	d009      	beq.n	8017df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017de0:	9019      	str	r0, [sp, #100]	; 0x64
 8017de2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017de6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017dea:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017dee:	911d      	str	r1, [sp, #116]	; 0x74
 8017df0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017df4:	1ad2      	subs	r2, r2, r3
 8017df6:	e6b5      	b.n	8017b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017df8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	b923      	cbnz	r3, 8017e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017dfe:	4b04      	ldr	r3, [pc, #16]	; (8017e10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017e00:	6818      	ldr	r0, [r3, #0]
 8017e02:	6803      	ldr	r3, [r0, #0]
 8017e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e06:	4798      	blx	r3
 8017e08:	b05b      	add	sp, #364	; 0x16c
 8017e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e0e:	bf00      	nop
 8017e10:	2400c8a4 	.word	0x2400c8a4

08017e14 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8017e14:	b570      	push	{r4, r5, r6, lr}
 8017e16:	4604      	mov	r4, r0
 8017e18:	2500      	movs	r5, #0
 8017e1a:	9804      	ldr	r0, [sp, #16]
 8017e1c:	7223      	strb	r3, [r4, #8]
 8017e1e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017e22:	8025      	strh	r5, [r4, #0]
 8017e24:	6061      	str	r1, [r4, #4]
 8017e26:	7263      	strb	r3, [r4, #9]
 8017e28:	60e0      	str	r0, [r4, #12]
 8017e2a:	8222      	strh	r2, [r4, #16]
 8017e2c:	8265      	strh	r5, [r4, #18]
 8017e2e:	82a5      	strh	r5, [r4, #20]
 8017e30:	82e5      	strh	r5, [r4, #22]
 8017e32:	8325      	strh	r5, [r4, #24]
 8017e34:	8365      	strh	r5, [r4, #26]
 8017e36:	83a5      	strh	r5, [r4, #28]
 8017e38:	77a5      	strb	r5, [r4, #30]
 8017e3a:	6803      	ldr	r3, [r0, #0]
 8017e3c:	695b      	ldr	r3, [r3, #20]
 8017e3e:	4798      	blx	r3
 8017e40:	4606      	mov	r6, r0
 8017e42:	b1f8      	cbz	r0, 8017e84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017e44:	68e0      	ldr	r0, [r4, #12]
 8017e46:	4631      	mov	r1, r6
 8017e48:	6803      	ldr	r3, [r0, #0]
 8017e4a:	68db      	ldr	r3, [r3, #12]
 8017e4c:	4798      	blx	r3
 8017e4e:	7b43      	ldrb	r3, [r0, #13]
 8017e50:	7a82      	ldrb	r2, [r0, #10]
 8017e52:	4605      	mov	r5, r0
 8017e54:	005b      	lsls	r3, r3, #1
 8017e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017e5a:	4313      	orrs	r3, r2
 8017e5c:	83a3      	strh	r3, [r4, #28]
 8017e5e:	7a63      	ldrb	r3, [r4, #9]
 8017e60:	2b04      	cmp	r3, #4
 8017e62:	d10f      	bne.n	8017e84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8017e64:	68e0      	ldr	r0, [r4, #12]
 8017e66:	462a      	mov	r2, r5
 8017e68:	4631      	mov	r1, r6
 8017e6a:	6803      	ldr	r3, [r0, #0]
 8017e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e6e:	4798      	blx	r3
 8017e70:	7b6b      	ldrb	r3, [r5, #13]
 8017e72:	005b      	lsls	r3, r3, #1
 8017e74:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017e78:	7aab      	ldrb	r3, [r5, #10]
 8017e7a:	4313      	orrs	r3, r2
 8017e7c:	4418      	add	r0, r3
 8017e7e:	8ba3      	ldrh	r3, [r4, #28]
 8017e80:	4418      	add	r0, r3
 8017e82:	83a0      	strh	r0, [r4, #28]
 8017e84:	4620      	mov	r0, r4
 8017e86:	bd70      	pop	{r4, r5, r6, pc}

08017e88 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e8c:	2400      	movs	r4, #0
 8017e8e:	b085      	sub	sp, #20
 8017e90:	4681      	mov	r9, r0
 8017e92:	4688      	mov	r8, r1
 8017e94:	4692      	mov	sl, r2
 8017e96:	469b      	mov	fp, r3
 8017e98:	4627      	mov	r7, r4
 8017e9a:	4625      	mov	r5, r4
 8017e9c:	4626      	mov	r6, r4
 8017e9e:	4554      	cmp	r4, sl
 8017ea0:	da2a      	bge.n	8017ef8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	9303      	str	r3, [sp, #12]
 8017ea6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017eaa:	429d      	cmp	r5, r3
 8017eac:	d004      	beq.n	8017eb8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8017eae:	f242 030b 	movw	r3, #8203	; 0x200b
 8017eb2:	429d      	cmp	r5, r3
 8017eb4:	bf18      	it	ne
 8017eb6:	462f      	movne	r7, r5
 8017eb8:	ab03      	add	r3, sp, #12
 8017eba:	4642      	mov	r2, r8
 8017ebc:	4659      	mov	r1, fp
 8017ebe:	4648      	mov	r0, r9
 8017ec0:	f002 fecc 	bl	801ac5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017ec4:	4605      	mov	r5, r0
 8017ec6:	b1b8      	cbz	r0, 8017ef8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017ec8:	280a      	cmp	r0, #10
 8017eca:	d015      	beq.n	8017ef8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017ecc:	9a03      	ldr	r2, [sp, #12]
 8017ece:	b18a      	cbz	r2, 8017ef4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8017ed0:	7b50      	ldrb	r0, [r2, #13]
 8017ed2:	4639      	mov	r1, r7
 8017ed4:	7a93      	ldrb	r3, [r2, #10]
 8017ed6:	0040      	lsls	r0, r0, #1
 8017ed8:	8895      	ldrh	r5, [r2, #4]
 8017eda:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017ede:	4303      	orrs	r3, r0
 8017ee0:	4640      	mov	r0, r8
 8017ee2:	9301      	str	r3, [sp, #4]
 8017ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8017ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017eea:	4798      	blx	r3
 8017eec:	9b01      	ldr	r3, [sp, #4]
 8017eee:	4418      	add	r0, r3
 8017ef0:	4406      	add	r6, r0
 8017ef2:	b2b6      	uxth	r6, r6
 8017ef4:	3401      	adds	r4, #1
 8017ef6:	e7d2      	b.n	8017e9e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8017ef8:	4630      	mov	r0, r6
 8017efa:	b005      	add	sp, #20
 8017efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f00 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017f00:	2a02      	cmp	r2, #2
 8017f02:	b530      	push	{r4, r5, lr}
 8017f04:	d011      	beq.n	8017f2a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017f06:	2a03      	cmp	r2, #3
 8017f08:	d01c      	beq.n	8017f44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8017f0a:	2a01      	cmp	r2, #1
 8017f0c:	d10c      	bne.n	8017f28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017f0e:	888b      	ldrh	r3, [r1, #4]
 8017f10:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017f14:	8801      	ldrh	r1, [r0, #0]
 8017f16:	1a9b      	subs	r3, r3, r2
 8017f18:	8844      	ldrh	r4, [r0, #2]
 8017f1a:	1a5b      	subs	r3, r3, r1
 8017f1c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017f20:	8004      	strh	r4, [r0, #0]
 8017f22:	8043      	strh	r3, [r0, #2]
 8017f24:	8081      	strh	r1, [r0, #4]
 8017f26:	80c2      	strh	r2, [r0, #6]
 8017f28:	bd30      	pop	{r4, r5, pc}
 8017f2a:	88cb      	ldrh	r3, [r1, #6]
 8017f2c:	88c2      	ldrh	r2, [r0, #6]
 8017f2e:	1a9b      	subs	r3, r3, r2
 8017f30:	8842      	ldrh	r2, [r0, #2]
 8017f32:	1a9b      	subs	r3, r3, r2
 8017f34:	888a      	ldrh	r2, [r1, #4]
 8017f36:	8881      	ldrh	r1, [r0, #4]
 8017f38:	8043      	strh	r3, [r0, #2]
 8017f3a:	1a52      	subs	r2, r2, r1
 8017f3c:	8801      	ldrh	r1, [r0, #0]
 8017f3e:	1a52      	subs	r2, r2, r1
 8017f40:	8002      	strh	r2, [r0, #0]
 8017f42:	e7f1      	b.n	8017f28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017f44:	88cb      	ldrh	r3, [r1, #6]
 8017f46:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017f4a:	8841      	ldrh	r1, [r0, #2]
 8017f4c:	1a9b      	subs	r3, r3, r2
 8017f4e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017f52:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017f56:	1a5b      	subs	r3, r3, r1
 8017f58:	8045      	strh	r5, [r0, #2]
 8017f5a:	8082      	strh	r2, [r0, #4]
 8017f5c:	8003      	strh	r3, [r0, #0]
 8017f5e:	80c4      	strh	r4, [r0, #6]
 8017f60:	e7e2      	b.n	8017f28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08017f62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8017f62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f66:	b09f      	sub	sp, #124	; 0x7c
 8017f68:	9116      	str	r1, [sp, #88]	; 0x58
 8017f6a:	9317      	str	r3, [sp, #92]	; 0x5c
 8017f6c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8017f6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017f70:	8809      	ldrh	r1, [r1, #0]
 8017f72:	889b      	ldrh	r3, [r3, #4]
 8017f74:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8017f78:	440b      	add	r3, r1
 8017f7a:	9212      	str	r2, [sp, #72]	; 0x48
 8017f7c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8017f80:	b21b      	sxth	r3, r3
 8017f82:	9011      	str	r0, [sp, #68]	; 0x44
 8017f84:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8017f88:	9310      	str	r3, [sp, #64]	; 0x40
 8017f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8017f8e:	7a59      	ldrb	r1, [r3, #9]
 8017f90:	7a1b      	ldrb	r3, [r3, #8]
 8017f92:	9114      	str	r1, [sp, #80]	; 0x50
 8017f94:	9315      	str	r3, [sp, #84]	; 0x54
 8017f96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017f98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017f9c:	2a00      	cmp	r2, #0
 8017f9e:	d067      	beq.n	8018070 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8017fa0:	f898 3010 	ldrb.w	r3, [r8, #16]
 8017fa4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017fa6:	2b04      	cmp	r3, #4
 8017fa8:	bf14      	ite	ne
 8017faa:	2301      	movne	r3, #1
 8017fac:	2302      	moveq	r3, #2
 8017fae:	4413      	add	r3, r2
 8017fb0:	f04f 0900 	mov.w	r9, #0
 8017fb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8017fb6:	464c      	mov	r4, r9
 8017fb8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017fbc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8017fc0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8017fc4:	4293      	cmp	r3, r2
 8017fc6:	f280 808c 	bge.w	80180e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8017fca:	2300      	movs	r3, #0
 8017fcc:	931c      	str	r3, [sp, #112]	; 0x70
 8017fce:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017fd2:	429c      	cmp	r4, r3
 8017fd4:	d006      	beq.n	8017fe4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8017fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017fd8:	f242 020b 	movw	r2, #8203	; 0x200b
 8017fdc:	4294      	cmp	r4, r2
 8017fde:	bf18      	it	ne
 8017fe0:	4623      	movne	r3, r4
 8017fe2:	930d      	str	r3, [sp, #52]	; 0x34
 8017fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fe6:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8017fe8:	f8d8 2000 	ldr.w	r2, [r8]
 8017fec:	428b      	cmp	r3, r1
 8017fee:	db41      	blt.n	8018074 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8017ff0:	6813      	ldr	r3, [r2, #0]
 8017ff2:	4610      	mov	r0, r2
 8017ff4:	695b      	ldr	r3, [r3, #20]
 8017ff6:	4798      	blx	r3
 8017ff8:	4604      	mov	r4, r0
 8017ffa:	f8d8 0000 	ldr.w	r0, [r8]
 8017ffe:	aa1d      	add	r2, sp, #116	; 0x74
 8018000:	4621      	mov	r1, r4
 8018002:	6803      	ldr	r3, [r0, #0]
 8018004:	689e      	ldr	r6, [r3, #8]
 8018006:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801800a:	47b0      	blx	r6
 801800c:	901c      	str	r0, [sp, #112]	; 0x70
 801800e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8018012:	429c      	cmp	r4, r3
 8018014:	f000 80ea 	beq.w	80181ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018018:	f242 030b 	movw	r3, #8203	; 0x200b
 801801c:	429c      	cmp	r4, r3
 801801e:	f000 80e5 	beq.w	80181ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018022:	2c00      	cmp	r4, #0
 8018024:	f000 80f7 	beq.w	8018216 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018028:	2c0a      	cmp	r4, #10
 801802a:	d060      	beq.n	80180ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801802c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801802e:	b36a      	cbz	r2, 801808c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 8018030:	8894      	ldrh	r4, [r2, #4]
 8018032:	f1bb 0f00 	cmp.w	fp, #0
 8018036:	d03b      	beq.n	80180b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 8018038:	f892 900d 	ldrb.w	r9, [r2, #13]
 801803c:	f1bb 0f01 	cmp.w	fp, #1
 8018040:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8018044:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8018048:	f892 900a 	ldrb.w	r9, [r2, #10]
 801804c:	ea49 0903 	orr.w	r9, r9, r3
 8018050:	d134      	bne.n	80180bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 8018052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018054:	eba5 0509 	sub.w	r5, r5, r9
 8018058:	2b00      	cmp	r3, #0
 801805a:	d14f      	bne.n	80180fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801805c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801805e:	eb09 0305 	add.w	r3, r9, r5
 8018062:	4413      	add	r3, r2
 8018064:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018066:	f9b2 2000 	ldrsh.w	r2, [r2]
 801806a:	4293      	cmp	r3, r2
 801806c:	da51      	bge.n	8018112 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801806e:	e038      	b.n	80180e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8018070:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018072:	e79d      	b.n	8017fb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 8018074:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8018078:	4659      	mov	r1, fp
 801807a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801807c:	9301      	str	r3, [sp, #4]
 801807e:	ab1d      	add	r3, sp, #116	; 0x74
 8018080:	9300      	str	r3, [sp, #0]
 8018082:	ab1c      	add	r3, sp, #112	; 0x70
 8018084:	f002 fe42 	bl	801ad0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8018088:	4604      	mov	r4, r0
 801808a:	e7c0      	b.n	801800e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801808c:	f8d8 0000 	ldr.w	r0, [r8]
 8018090:	6803      	ldr	r3, [r0, #0]
 8018092:	691b      	ldr	r3, [r3, #16]
 8018094:	4798      	blx	r3
 8018096:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801809a:	4298      	cmp	r0, r3
 801809c:	f000 80a6 	beq.w	80181ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80180a0:	f242 030b 	movw	r3, #8203	; 0x200b
 80180a4:	4298      	cmp	r0, r3
 80180a6:	f000 80a1 	beq.w	80181ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80180aa:	f1bb 0f00 	cmp.w	fp, #0
 80180ae:	d100      	bne.n	80180b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 80180b0:	444d      	add	r5, r9
 80180b2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80180b4:	2a00      	cmp	r2, #0
 80180b6:	d1bf      	bne.n	8018038 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 80180b8:	4691      	mov	r9, r2
 80180ba:	e097      	b.n	80181ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 80180bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80180be:	2b00      	cmp	r3, #0
 80180c0:	f000 80ab 	beq.w	801821a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80180c4:	f1bb 0f00 	cmp.w	fp, #0
 80180c8:	d118      	bne.n	80180fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80180ca:	f8d8 0000 	ldr.w	r0, [r8]
 80180ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80180d0:	6803      	ldr	r3, [r0, #0]
 80180d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180d4:	4798      	blx	r3
 80180d6:	4405      	add	r5, r0
 80180d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80180da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80180dc:	1aeb      	subs	r3, r5, r3
 80180de:	4293      	cmp	r3, r2
 80180e0:	dd17      	ble.n	8018112 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 80180e2:	2c00      	cmp	r4, #0
 80180e4:	f000 8097 	beq.w	8018216 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 80180e8:	2c0a      	cmp	r4, #10
 80180ea:	f040 8085 	bne.w	80181f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80180ee:	240a      	movs	r4, #10
 80180f0:	fab4 f084 	clz	r0, r4
 80180f4:	0940      	lsrs	r0, r0, #5
 80180f6:	b01f      	add	sp, #124	; 0x7c
 80180f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180fc:	f8d8 0000 	ldr.w	r0, [r8]
 8018100:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018102:	6803      	ldr	r3, [r0, #0]
 8018104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018106:	4798      	blx	r3
 8018108:	f1bb 0f01 	cmp.w	fp, #1
 801810c:	eba5 0500 	sub.w	r5, r5, r0
 8018110:	d0a4      	beq.n	801805c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 8018112:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018114:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018116:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801811a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801811e:	7b43      	ldrb	r3, [r0, #13]
 8018120:	4429      	add	r1, r5
 8018122:	015b      	lsls	r3, r3, #5
 8018124:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018128:	7983      	ldrb	r3, [r0, #6]
 801812a:	4313      	orrs	r3, r2
 801812c:	440b      	add	r3, r1
 801812e:	42b3      	cmp	r3, r6
 8018130:	db5c      	blt.n	80181ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018132:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018134:	4299      	cmp	r1, r3
 8018136:	da59      	bge.n	80181ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8018138:	f8d8 0000 	ldr.w	r0, [r8]
 801813c:	42ae      	cmp	r6, r5
 801813e:	6803      	ldr	r3, [r0, #0]
 8018140:	bfcc      	ite	gt
 8018142:	1b76      	subgt	r6, r6, r5
 8018144:	2600      	movle	r6, #0
 8018146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018148:	bfc8      	it	gt
 801814a:	b2b6      	uxthgt	r6, r6
 801814c:	4798      	blx	r3
 801814e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018150:	7b5a      	ldrb	r2, [r3, #13]
 8018152:	00d1      	lsls	r1, r2, #3
 8018154:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8018158:	7a19      	ldrb	r1, [r3, #8]
 801815a:	4339      	orrs	r1, r7
 801815c:	0657      	lsls	r7, r2, #25
 801815e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8018160:	bf48      	it	mi
 8018162:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8018166:	4407      	add	r7, r0
 8018168:	bf48      	it	mi
 801816a:	b209      	sxthmi	r1, r1
 801816c:	1a7f      	subs	r7, r7, r1
 801816e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018170:	b2bf      	uxth	r7, r7
 8018172:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8018176:	fa0f fa87 	sxth.w	sl, r7
 801817a:	4551      	cmp	r1, sl
 801817c:	dd3a      	ble.n	80181f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801817e:	0112      	lsls	r2, r2, #4
 8018180:	79d8      	ldrb	r0, [r3, #7]
 8018182:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018186:	4302      	orrs	r2, r0
 8018188:	4492      	add	sl, r2
 801818a:	4551      	cmp	r1, sl
 801818c:	dc2e      	bgt.n	80181ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801818e:	1bcf      	subs	r7, r1, r7
 8018190:	468a      	mov	sl, r1
 8018192:	b2bf      	uxth	r7, r7
 8018194:	9319      	str	r3, [sp, #100]	; 0x64
 8018196:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018198:	f8d8 0000 	ldr.w	r0, [r8]
 801819c:	681a      	ldr	r2, [r3, #0]
 801819e:	6801      	ldr	r1, [r0, #0]
 80181a0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80181a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80181a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80181a6:	9218      	str	r2, [sp, #96]	; 0x60
 80181a8:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80181aa:	4788      	blx	r1
 80181ac:	f898 1006 	ldrb.w	r1, [r8, #6]
 80181b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80181b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80181b4:	f898 100e 	ldrb.w	r1, [r8, #14]
 80181b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80181ba:	910a      	str	r1, [sp, #40]	; 0x28
 80181bc:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80181c0:	9109      	str	r1, [sp, #36]	; 0x24
 80181c2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80181c6:	9305      	str	r3, [sp, #20]
 80181c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80181ca:	9206      	str	r2, [sp, #24]
 80181cc:	e9cd a601 	strd	sl, r6, [sp, #4]
 80181d0:	442e      	add	r6, r5
 80181d2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80181d6:	b236      	sxth	r6, r6
 80181d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80181da:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80181de:	9600      	str	r6, [sp, #0]
 80181e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80181e2:	681a      	ldr	r2, [r3, #0]
 80181e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80181e6:	685b      	ldr	r3, [r3, #4]
 80181e8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80181ea:	47b0      	blx	r6
 80181ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80181ee:	3301      	adds	r3, #1
 80181f0:	930e      	str	r3, [sp, #56]	; 0x38
 80181f2:	e6e5      	b.n	8017fc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 80181f4:	2700      	movs	r7, #0
 80181f6:	e7cd      	b.n	8018194 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 80181f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80181fa:	3501      	adds	r5, #1
 80181fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80181fe:	429d      	cmp	r5, r3
 8018200:	f6bf af76 	bge.w	80180f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8018204:	4659      	mov	r1, fp
 8018206:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018208:	f7ef fb42 	bl	8007890 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801820c:	4604      	mov	r4, r0
 801820e:	b110      	cbz	r0, 8018216 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 8018210:	280a      	cmp	r0, #10
 8018212:	d1f2      	bne.n	80181fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8018214:	e76b      	b.n	80180ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8018216:	2400      	movs	r4, #0
 8018218:	e76a      	b.n	80180f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801821a:	f1bb 0f00 	cmp.w	fp, #0
 801821e:	f43f af5b 	beq.w	80180d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018222:	e776      	b.n	8018112 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

08018224 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018224:	b530      	push	{r4, r5, lr}
 8018226:	8a44      	ldrh	r4, [r0, #18]
 8018228:	8ac5      	ldrh	r5, [r0, #22]
 801822a:	82c3      	strh	r3, [r0, #22]
 801822c:	442c      	add	r4, r5
 801822e:	1ae4      	subs	r4, r4, r3
 8018230:	8b03      	ldrh	r3, [r0, #24]
 8018232:	8244      	strh	r4, [r0, #18]
 8018234:	8a84      	ldrh	r4, [r0, #20]
 8018236:	4422      	add	r2, r4
 8018238:	440c      	add	r4, r1
 801823a:	1a59      	subs	r1, r3, r1
 801823c:	8342      	strh	r2, [r0, #26]
 801823e:	8284      	strh	r4, [r0, #20]
 8018240:	8301      	strh	r1, [r0, #24]
 8018242:	bd30      	pop	{r4, r5, pc}

08018244 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8018244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018248:	7a43      	ldrb	r3, [r0, #9]
 801824a:	b087      	sub	sp, #28
 801824c:	4604      	mov	r4, r0
 801824e:	460f      	mov	r7, r1
 8018250:	1eda      	subs	r2, r3, #3
 8018252:	b2d2      	uxtb	r2, r2
 8018254:	2900      	cmp	r1, #0
 8018256:	d036      	beq.n	80182c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8018258:	2a01      	cmp	r2, #1
 801825a:	d932      	bls.n	80182c2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801825c:	1e58      	subs	r0, r3, #1
 801825e:	f1d0 0b00 	rsbs	fp, r0, #0
 8018262:	eb4b 0b00 	adc.w	fp, fp, r0
 8018266:	1e99      	subs	r1, r3, #2
 8018268:	424b      	negs	r3, r1
 801826a:	414b      	adcs	r3, r1
 801826c:	9303      	str	r3, [sp, #12]
 801826e:	2300      	movs	r3, #0
 8018270:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8018274:	2500      	movs	r5, #0
 8018276:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801827a:	46a9      	mov	r9, r5
 801827c:	8265      	strh	r5, [r4, #18]
 801827e:	82a5      	strh	r5, [r4, #20]
 8018280:	2300      	movs	r3, #0
 8018282:	9305      	str	r3, [sp, #20]
 8018284:	8823      	ldrh	r3, [r4, #0]
 8018286:	2b20      	cmp	r3, #32
 8018288:	d02b      	beq.n	80182e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801828a:	eba3 020a 	sub.w	r2, r3, sl
 801828e:	4256      	negs	r6, r2
 8018290:	4156      	adcs	r6, r2
 8018292:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8018296:	4293      	cmp	r3, r2
 8018298:	d004      	beq.n	80182a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801829a:	4553      	cmp	r3, sl
 801829c:	bf16      	itet	ne
 801829e:	4699      	movne	r9, r3
 80182a0:	2601      	moveq	r6, #1
 80182a2:	2600      	movne	r6, #0
 80182a4:	ab05      	add	r3, sp, #20
 80182a6:	68e2      	ldr	r2, [r4, #12]
 80182a8:	7a21      	ldrb	r1, [r4, #8]
 80182aa:	6860      	ldr	r0, [r4, #4]
 80182ac:	f002 fcd6 	bl	801ac5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80182b0:	8020      	strh	r0, [r4, #0]
 80182b2:	b9c8      	cbnz	r0, 80182e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80182b4:	8b22      	ldrh	r2, [r4, #24]
 80182b6:	2300      	movs	r3, #0
 80182b8:	4611      	mov	r1, r2
 80182ba:	4620      	mov	r0, r4
 80182bc:	f7ff ffb2 	bl	8018224 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80182c0:	e066      	b.n	8018390 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80182c2:	468b      	mov	fp, r1
 80182c4:	e7cf      	b.n	8018266 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80182c6:	3b01      	subs	r3, #1
 80182c8:	2a01      	cmp	r2, #1
 80182ca:	9103      	str	r1, [sp, #12]
 80182cc:	468b      	mov	fp, r1
 80182ce:	bf8c      	ite	hi
 80182d0:	2200      	movhi	r2, #0
 80182d2:	2201      	movls	r2, #1
 80182d4:	2b01      	cmp	r3, #1
 80182d6:	9202      	str	r2, [sp, #8]
 80182d8:	bf8c      	ite	hi
 80182da:	2300      	movhi	r3, #0
 80182dc:	2301      	movls	r3, #1
 80182de:	9301      	str	r3, [sp, #4]
 80182e0:	e7c8      	b.n	8018274 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80182e2:	4699      	mov	r9, r3
 80182e4:	2601      	movs	r6, #1
 80182e6:	e7dd      	b.n	80182a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80182e8:	8ae3      	ldrh	r3, [r4, #22]
 80182ea:	280a      	cmp	r0, #10
 80182ec:	f103 0301 	add.w	r3, r3, #1
 80182f0:	82e3      	strh	r3, [r4, #22]
 80182f2:	d0df      	beq.n	80182b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80182f4:	9a05      	ldr	r2, [sp, #20]
 80182f6:	bb42      	cbnz	r2, 801834a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80182f8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80182fc:	4298      	cmp	r0, r3
 80182fe:	d001      	beq.n	8018304 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018300:	4550      	cmp	r0, sl
 8018302:	d1bd      	bne.n	8018280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018304:	8823      	ldrh	r3, [r4, #0]
 8018306:	8b21      	ldrh	r1, [r4, #24]
 8018308:	2b20      	cmp	r3, #32
 801830a:	d001      	beq.n	8018310 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801830c:	4553      	cmp	r3, sl
 801830e:	d131      	bne.n	8018374 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8018310:	2e00      	cmp	r6, #0
 8018312:	bf0a      	itet	eq
 8018314:	460d      	moveq	r5, r1
 8018316:	4630      	movne	r0, r6
 8018318:	2001      	moveq	r0, #1
 801831a:	440a      	add	r2, r1
 801831c:	8aa3      	ldrh	r3, [r4, #20]
 801831e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018322:	b292      	uxth	r2, r2
 8018324:	8322      	strh	r2, [r4, #24]
 8018326:	4413      	add	r3, r2
 8018328:	2f00      	cmp	r7, #0
 801832a:	d03a      	beq.n	80183a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801832c:	f1bb 0f00 	cmp.w	fp, #0
 8018330:	d102      	bne.n	8018338 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 8018332:	9903      	ldr	r1, [sp, #12]
 8018334:	b301      	cbz	r1, 8018378 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018336:	b1f8      	cbz	r0, 8018378 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8018338:	8ba1      	ldrh	r1, [r4, #28]
 801833a:	4419      	add	r1, r3
 801833c:	458c      	cmp	ip, r1
 801833e:	da2a      	bge.n	8018396 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018340:	8a61      	ldrh	r1, [r4, #18]
 8018342:	b341      	cbz	r1, 8018396 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8018344:	4563      	cmp	r3, ip
 8018346:	dd9b      	ble.n	8018280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018348:	e01c      	b.n	8018384 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801834a:	8893      	ldrh	r3, [r2, #4]
 801834c:	4649      	mov	r1, r9
 801834e:	8023      	strh	r3, [r4, #0]
 8018350:	f892 800d 	ldrb.w	r8, [r2, #13]
 8018354:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018358:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801835c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8018360:	ea48 0800 	orr.w	r8, r8, r0
 8018364:	68e0      	ldr	r0, [r4, #12]
 8018366:	6803      	ldr	r3, [r0, #0]
 8018368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801836a:	4798      	blx	r3
 801836c:	eb08 0200 	add.w	r2, r8, r0
 8018370:	b292      	uxth	r2, r2
 8018372:	e7c7      	b.n	8018304 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8018374:	2000      	movs	r0, #0
 8018376:	e7d0      	b.n	801831a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018378:	4563      	cmp	r3, ip
 801837a:	dd81      	ble.n	8018280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801837c:	8a63      	ldrh	r3, [r4, #18]
 801837e:	2b00      	cmp	r3, #0
 8018380:	f43f af7e 	beq.w	8018280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8018384:	2301      	movs	r3, #1
 8018386:	8ba2      	ldrh	r2, [r4, #28]
 8018388:	77a3      	strb	r3, [r4, #30]
 801838a:	8b63      	ldrh	r3, [r4, #26]
 801838c:	4413      	add	r3, r2
 801838e:	8363      	strh	r3, [r4, #26]
 8018390:	b007      	add	sp, #28
 8018392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018396:	2300      	movs	r3, #0
 8018398:	4611      	mov	r1, r2
 801839a:	4620      	mov	r0, r4
 801839c:	f7ff ff42 	bl	8018224 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80183a0:	e76e      	b.n	8018280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80183a2:	4563      	cmp	r3, ip
 80183a4:	dd14      	ble.n	80183d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 80183a6:	9b02      	ldr	r3, [sp, #8]
 80183a8:	b113      	cbz	r3, 80183b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 80183aa:	2301      	movs	r3, #1
 80183ac:	460a      	mov	r2, r1
 80183ae:	e783      	b.n	80182b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 80183b0:	9b01      	ldr	r3, [sp, #4]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	f43f af64 	beq.w	8018280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80183b8:	2800      	cmp	r0, #0
 80183ba:	f47f af61 	bne.w	8018280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80183be:	b116      	cbz	r6, 80183c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80183c0:	2301      	movs	r3, #1
 80183c2:	462a      	mov	r2, r5
 80183c4:	e779      	b.n	80182ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80183c6:	8a63      	ldrh	r3, [r4, #18]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	f43f af59 	beq.w	8018280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80183ce:	e7df      	b.n	8018390 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80183d0:	2800      	cmp	r0, #0
 80183d2:	f47f af55 	bne.w	8018280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80183d6:	2e00      	cmp	r6, #0
 80183d8:	f43f af52 	beq.w	8018280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80183dc:	2301      	movs	r3, #1
 80183de:	462a      	mov	r2, r5
 80183e0:	e7db      	b.n	801839a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080183e2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80183e2:	b530      	push	{r4, r5, lr}
 80183e4:	4605      	mov	r5, r0
 80183e6:	b08b      	sub	sp, #44	; 0x2c
 80183e8:	b191      	cbz	r1, 8018410 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80183ea:	2401      	movs	r4, #1
 80183ec:	e9cd 3100 	strd	r3, r1, [sp]
 80183f0:	4613      	mov	r3, r2
 80183f2:	4601      	mov	r1, r0
 80183f4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80183f8:	a802      	add	r0, sp, #8
 80183fa:	f7ff fd0b 	bl	8017e14 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80183fe:	2100      	movs	r1, #0
 8018400:	a802      	add	r0, sp, #8
 8018402:	f7ff ff1f 	bl	8018244 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018406:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801840a:	b163      	cbz	r3, 8018426 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801840c:	3401      	adds	r4, #1
 801840e:	e7f6      	b.n	80183fe <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8018410:	2401      	movs	r4, #1
 8018412:	f002 fd1d 	bl	801ae50 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018416:	280a      	cmp	r0, #10
 8018418:	4628      	mov	r0, r5
 801841a:	bf08      	it	eq
 801841c:	3401      	addeq	r4, #1
 801841e:	f002 fd17 	bl	801ae50 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018422:	2800      	cmp	r0, #0
 8018424:	d1f7      	bne.n	8018416 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8018426:	b2a0      	uxth	r0, r4
 8018428:	b00b      	add	sp, #44	; 0x2c
 801842a:	bd30      	pop	{r4, r5, pc}

0801842c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801842c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018430:	b0e5      	sub	sp, #404	; 0x194
 8018432:	4689      	mov	r9, r1
 8018434:	461c      	mov	r4, r3
 8018436:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801843a:	900a      	str	r0, [sp, #40]	; 0x28
 801843c:	f1ba 0f00 	cmp.w	sl, #0
 8018440:	f000 80b4 	beq.w	80185ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	2b00      	cmp	r3, #0
 8018448:	f000 80b0 	beq.w	80185ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801844c:	7ba3      	ldrb	r3, [r4, #14]
 801844e:	2b00      	cmp	r3, #0
 8018450:	f000 80ac 	beq.w	80185ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8018454:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8018458:	6810      	ldr	r0, [r2, #0]
 801845a:	6851      	ldr	r1, [r2, #4]
 801845c:	2500      	movs	r5, #0
 801845e:	4643      	mov	r3, r8
 8018460:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8018464:	950f      	str	r5, [sp, #60]	; 0x3c
 8018466:	af19      	add	r7, sp, #100	; 0x64
 8018468:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801846c:	79a2      	ldrb	r2, [r4, #6]
 801846e:	c303      	stmia	r3!, {r0, r1}
 8018470:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8018474:	a90f      	add	r1, sp, #60	; 0x3c
 8018476:	4640      	mov	r0, r8
 8018478:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801847c:	f7ff fd40 	bl	8017f00 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018480:	a90f      	add	r1, sp, #60	; 0x3c
 8018482:	79a2      	ldrb	r2, [r4, #6]
 8018484:	4608      	mov	r0, r1
 8018486:	f7ff fd3b 	bl	8017f00 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801848a:	4638      	mov	r0, r7
 801848c:	f002 f893 	bl	801a5b6 <_ZN8touchgfx12TextProviderC1Ev>
 8018490:	6820      	ldr	r0, [r4, #0]
 8018492:	6803      	ldr	r3, [r0, #0]
 8018494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018496:	4798      	blx	r3
 8018498:	4606      	mov	r6, r0
 801849a:	6820      	ldr	r0, [r4, #0]
 801849c:	6803      	ldr	r3, [r0, #0]
 801849e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80184a0:	4798      	blx	r3
 80184a2:	4633      	mov	r3, r6
 80184a4:	9000      	str	r0, [sp, #0]
 80184a6:	4651      	mov	r1, sl
 80184a8:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80184aa:	4638      	mov	r0, r7
 80184ac:	f002 f8d6 	bl	801a65c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80184b0:	7923      	ldrb	r3, [r4, #4]
 80184b2:	6820      	ldr	r0, [r4, #0]
 80184b4:	9308      	str	r3, [sp, #32]
 80184b6:	6803      	ldr	r3, [r0, #0]
 80184b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80184ba:	4798      	blx	r3
 80184bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184c0:	181e      	adds	r6, r3, r0
 80184c2:	42ae      	cmp	r6, r5
 80184c4:	dd06      	ble.n	80184d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 80184c6:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 80184ca:	4282      	cmp	r2, r0
 80184cc:	bfa4      	itt	ge
 80184ce:	189d      	addge	r5, r3, r2
 80184d0:	fb95 f5f6 	sdivge	r5, r5, r6
 80184d4:	a832      	add	r0, sp, #200	; 0xc8
 80184d6:	f002 f86e 	bl	801a5b6 <_ZN8touchgfx12TextProviderC1Ev>
 80184da:	7c23      	ldrb	r3, [r4, #16]
 80184dc:	b17b      	cbz	r3, 80184fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 80184de:	6820      	ldr	r0, [r4, #0]
 80184e0:	6803      	ldr	r3, [r0, #0]
 80184e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184e4:	4798      	blx	r3
 80184e6:	4683      	mov	fp, r0
 80184e8:	6820      	ldr	r0, [r4, #0]
 80184ea:	6803      	ldr	r3, [r0, #0]
 80184ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80184ee:	4798      	blx	r3
 80184f0:	465b      	mov	r3, fp
 80184f2:	9000      	str	r0, [sp, #0]
 80184f4:	4651      	mov	r1, sl
 80184f6:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80184f8:	a832      	add	r0, sp, #200	; 0xc8
 80184fa:	f002 f8af 	bl	801a65c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80184fe:	7be1      	ldrb	r1, [r4, #15]
 8018500:	a811      	add	r0, sp, #68	; 0x44
 8018502:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8018506:	7963      	ldrb	r3, [r4, #5]
 8018508:	1a52      	subs	r2, r2, r1
 801850a:	7c21      	ldrb	r1, [r4, #16]
 801850c:	9101      	str	r1, [sp, #4]
 801850e:	b292      	uxth	r2, r2
 8018510:	6821      	ldr	r1, [r4, #0]
 8018512:	9100      	str	r1, [sp, #0]
 8018514:	a932      	add	r1, sp, #200	; 0xc8
 8018516:	f7ff fc7d 	bl	8017e14 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801851a:	7c23      	ldrb	r3, [r4, #16]
 801851c:	b9bb      	cbnz	r3, 801854e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801851e:	fa1f fa86 	uxth.w	sl, r6
 8018522:	2d00      	cmp	r5, #0
 8018524:	dd45      	ble.n	80185b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8018526:	4638      	mov	r0, r7
 8018528:	f002 fc92 	bl	801ae50 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801852c:	2800      	cmp	r0, #0
 801852e:	d03d      	beq.n	80185ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8018530:	280a      	cmp	r0, #10
 8018532:	d1f6      	bne.n	8018522 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8018534:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018538:	3d01      	subs	r5, #1
 801853a:	4453      	add	r3, sl
 801853c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018540:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8018544:	eba3 030a 	sub.w	r3, r3, sl
 8018548:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801854c:	e7e9      	b.n	8018522 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801854e:	0073      	lsls	r3, r6, #1
 8018550:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8018554:	fa1f fa86 	uxth.w	sl, r6
 8018558:	9309      	str	r3, [sp, #36]	; 0x24
 801855a:	2d00      	cmp	r5, #0
 801855c:	dd29      	ble.n	80185b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801855e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8018562:	a811      	add	r0, sp, #68	; 0x44
 8018564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018566:	428b      	cmp	r3, r1
 8018568:	bfd4      	ite	le
 801856a:	2100      	movle	r1, #0
 801856c:	2101      	movgt	r1, #1
 801856e:	f7ff fe69 	bl	8018244 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018572:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8018576:	3b01      	subs	r3, #1
 8018578:	b29b      	uxth	r3, r3
 801857a:	455b      	cmp	r3, fp
 801857c:	930b      	str	r3, [sp, #44]	; 0x2c
 801857e:	d005      	beq.n	801858c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8018580:	7961      	ldrb	r1, [r4, #5]
 8018582:	4638      	mov	r0, r7
 8018584:	f7ef f984 	bl	8007890 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801858a:	e7f4      	b.n	8018576 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801858c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018590:	3d01      	subs	r5, #1
 8018592:	4453      	add	r3, sl
 8018594:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018598:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801859c:	eba3 030a 	sub.w	r3, r3, sl
 80185a0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80185a4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d1d6      	bne.n	801855a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 80185ac:	b065      	add	sp, #404	; 0x194
 80185ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185b2:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 80185b6:	ad4b      	add	r5, sp, #300	; 0x12c
 80185b8:	f04f 0b00 	mov.w	fp, #0
 80185bc:	7c23      	ldrb	r3, [r4, #16]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d067      	beq.n	8018692 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 80185c2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80185c6:	a811      	add	r0, sp, #68	; 0x44
 80185c8:	458a      	cmp	sl, r1
 80185ca:	bfd4      	ite	le
 80185cc:	2100      	movle	r1, #0
 80185ce:	2101      	movgt	r1, #1
 80185d0:	f7ff fe38 	bl	8018244 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80185d4:	9b08      	ldr	r3, [sp, #32]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d056      	beq.n	8018688 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80185da:	7c23      	ldrb	r3, [r4, #16]
 80185dc:	2264      	movs	r2, #100	; 0x64
 80185de:	4639      	mov	r1, r7
 80185e0:	4628      	mov	r0, r5
 80185e2:	9309      	str	r3, [sp, #36]	; 0x24
 80185e4:	f00d fb46 	bl	8025c74 <memcpy>
 80185e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d059      	beq.n	80186a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 80185ee:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80185f2:	7922      	ldrb	r2, [r4, #4]
 80185f4:	2a01      	cmp	r2, #1
 80185f6:	d13d      	bne.n	8018674 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 80185f8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80185fc:	1ac0      	subs	r0, r0, r3
 80185fe:	2302      	movs	r3, #2
 8018600:	fb90 f0f3 	sdiv	r0, r0, r3
 8018604:	b200      	sxth	r0, r0
 8018606:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801860a:	4418      	add	r0, r3
 801860c:	7c23      	ldrb	r3, [r4, #16]
 801860e:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 8018612:	2b00      	cmp	r3, #0
 8018614:	d03a      	beq.n	801868c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8018616:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801861a:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801861e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8018622:	9500      	str	r5, [sp, #0]
 8018624:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018626:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801862a:	e9cd b703 	strd	fp, r7, [sp, #12]
 801862e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8018632:	464a      	mov	r2, r9
 8018634:	2100      	movs	r1, #0
 8018636:	f7ff fc94 	bl	8017f62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801863a:	2800      	cmp	r0, #0
 801863c:	d1b6      	bne.n	80185ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801863e:	b2b2      	uxth	r2, r6
 8018640:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018644:	4611      	mov	r1, r2
 8018646:	4413      	add	r3, r2
 8018648:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801864c:	b21b      	sxth	r3, r3
 801864e:	1a52      	subs	r2, r2, r1
 8018650:	7c21      	ldrb	r1, [r4, #16]
 8018652:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018656:	b212      	sxth	r2, r2
 8018658:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801865c:	b109      	cbz	r1, 8018662 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801865e:	42b2      	cmp	r2, r6
 8018660:	dba4      	blt.n	80185ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8018662:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8018666:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801866a:	440a      	add	r2, r1
 801866c:	b212      	sxth	r2, r2
 801866e:	4293      	cmp	r3, r2
 8018670:	dda4      	ble.n	80185bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 8018672:	e79b      	b.n	80185ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8018674:	2a02      	cmp	r2, #2
 8018676:	d105      	bne.n	8018684 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 8018678:	7be2      	ldrb	r2, [r4, #15]
 801867a:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801867e:	1a80      	subs	r0, r0, r2
 8018680:	1ac0      	subs	r0, r0, r3
 8018682:	e7bf      	b.n	8018604 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 8018684:	2000      	movs	r0, #0
 8018686:	e7be      	b.n	8018606 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 8018688:	7be0      	ldrb	r0, [r4, #15]
 801868a:	e7bc      	b.n	8018606 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801868c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018690:	e7c3      	b.n	801861a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8018692:	9b08      	ldr	r3, [sp, #32]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d0f7      	beq.n	8018688 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8018698:	2264      	movs	r2, #100	; 0x64
 801869a:	4639      	mov	r1, r7
 801869c:	4628      	mov	r0, r5
 801869e:	f00d fae9 	bl	8025c74 <memcpy>
 80186a2:	2300      	movs	r3, #0
 80186a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80186a8:	6821      	ldr	r1, [r4, #0]
 80186aa:	4628      	mov	r0, r5
 80186ac:	f7ff fbec 	bl	8017e88 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80186b0:	b203      	sxth	r3, r0
 80186b2:	e79e      	b.n	80185f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

080186b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80186b4:	2b02      	cmp	r3, #2
 80186b6:	b510      	push	{r4, lr}
 80186b8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80186bc:	d00b      	beq.n	80186d6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80186be:	2b03      	cmp	r3, #3
 80186c0:	d00e      	beq.n	80186e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 80186c2:	2b01      	cmp	r3, #1
 80186c4:	d001      	beq.n	80186ca <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 80186c6:	1860      	adds	r0, r4, r1
 80186c8:	bd10      	pop	{r4, pc}
 80186ca:	8880      	ldrh	r0, [r0, #4]
 80186cc:	4420      	add	r0, r4
 80186ce:	b200      	sxth	r0, r0
 80186d0:	1a80      	subs	r0, r0, r2
 80186d2:	3801      	subs	r0, #1
 80186d4:	e7f8      	b.n	80186c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80186d6:	8880      	ldrh	r0, [r0, #4]
 80186d8:	4420      	add	r0, r4
 80186da:	b200      	sxth	r0, r0
 80186dc:	1a40      	subs	r0, r0, r1
 80186de:	e7f8      	b.n	80186d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80186e0:	18a0      	adds	r0, r4, r2
 80186e2:	e7f1      	b.n	80186c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

080186e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80186e4:	2b02      	cmp	r3, #2
 80186e6:	b510      	push	{r4, lr}
 80186e8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80186ec:	d006      	beq.n	80186fc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80186ee:	2b03      	cmp	r3, #3
 80186f0:	d00a      	beq.n	8018708 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80186f2:	2b01      	cmp	r3, #1
 80186f4:	bf14      	ite	ne
 80186f6:	18a0      	addne	r0, r4, r2
 80186f8:	1860      	addeq	r0, r4, r1
 80186fa:	bd10      	pop	{r4, pc}
 80186fc:	88c0      	ldrh	r0, [r0, #6]
 80186fe:	4420      	add	r0, r4
 8018700:	b200      	sxth	r0, r0
 8018702:	1a80      	subs	r0, r0, r2
 8018704:	3801      	subs	r0, #1
 8018706:	e7f8      	b.n	80186fa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8018708:	88c0      	ldrh	r0, [r0, #6]
 801870a:	4420      	add	r0, r4
 801870c:	b200      	sxth	r0, r0
 801870e:	1a40      	subs	r0, r0, r1
 8018710:	e7f8      	b.n	8018704 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08018714 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018714:	4b01      	ldr	r3, [pc, #4]	; (801871c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018716:	2200      	movs	r2, #0
 8018718:	601a      	str	r2, [r3, #0]
 801871a:	4770      	bx	lr
 801871c:	2400c8cc 	.word	0x2400c8cc

08018720 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8018720:	4603      	mov	r3, r0
 8018722:	b1c8      	cbz	r0, 8018758 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8018724:	0c02      	lsrs	r2, r0, #16
 8018726:	0412      	lsls	r2, r2, #16
 8018728:	b9a2      	cbnz	r2, 8018754 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801872a:	0403      	lsls	r3, r0, #16
 801872c:	2010      	movs	r0, #16
 801872e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018732:	bf04      	itt	eq
 8018734:	021b      	lsleq	r3, r3, #8
 8018736:	3008      	addeq	r0, #8
 8018738:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801873c:	bf04      	itt	eq
 801873e:	011b      	lsleq	r3, r3, #4
 8018740:	3004      	addeq	r0, #4
 8018742:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018746:	bf04      	itt	eq
 8018748:	009b      	lsleq	r3, r3, #2
 801874a:	3002      	addeq	r0, #2
 801874c:	2b00      	cmp	r3, #0
 801874e:	db04      	blt.n	801875a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8018750:	3001      	adds	r0, #1
 8018752:	4770      	bx	lr
 8018754:	2000      	movs	r0, #0
 8018756:	e7ea      	b.n	801872e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8018758:	2020      	movs	r0, #32
 801875a:	4770      	bx	lr

0801875c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018760:	b087      	sub	sp, #28
 8018762:	4681      	mov	r9, r0
 8018764:	4698      	mov	r8, r3
 8018766:	4610      	mov	r0, r2
 8018768:	460d      	mov	r5, r1
 801876a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801876e:	b981      	cbnz	r1, 8018792 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8018770:	b14b      	cbz	r3, 8018786 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8018772:	460b      	mov	r3, r1
 8018774:	464a      	mov	r2, r9
 8018776:	4641      	mov	r1, r8
 8018778:	e9cd 4700 	strd	r4, r7, [sp]
 801877c:	f7ff ffee 	bl	801875c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018780:	b007      	add	sp, #28
 8018782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018786:	f04f 33ff 	mov.w	r3, #4294967295
 801878a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801878e:	603b      	str	r3, [r7, #0]
 8018790:	e7f6      	b.n	8018780 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8018792:	fa32 fa01 	lsrs.w	sl, r2, r1
 8018796:	d107      	bne.n	80187a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8018798:	fb09 f602 	mul.w	r6, r9, r2
 801879c:	fbb6 f0f4 	udiv	r0, r6, r4
 80187a0:	fb04 6610 	mls	r6, r4, r0, r6
 80187a4:	603e      	str	r6, [r7, #0]
 80187a6:	e7eb      	b.n	8018780 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80187a8:	2601      	movs	r6, #1
 80187aa:	fa09 fb01 	lsl.w	fp, r9, r1
 80187ae:	408e      	lsls	r6, r1
 80187b0:	fbbb f3f4 	udiv	r3, fp, r4
 80187b4:	3e01      	subs	r6, #1
 80187b6:	9302      	str	r3, [sp, #8]
 80187b8:	fb0a f303 	mul.w	r3, sl, r3
 80187bc:	4016      	ands	r6, r2
 80187be:	9303      	str	r3, [sp, #12]
 80187c0:	4630      	mov	r0, r6
 80187c2:	f7ff ffad 	bl	8018720 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80187c6:	464a      	mov	r2, r9
 80187c8:	460b      	mov	r3, r1
 80187ca:	4601      	mov	r1, r0
 80187cc:	4630      	mov	r0, r6
 80187ce:	e9cd 4700 	strd	r4, r7, [sp]
 80187d2:	f7ff ffc3 	bl	801875c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80187d6:	9b02      	ldr	r3, [sp, #8]
 80187d8:	4606      	mov	r6, r0
 80187da:	eb05 0108 	add.w	r1, r5, r8
 80187de:	fb04 bb13 	mls	fp, r4, r3, fp
 80187e2:	4658      	mov	r0, fp
 80187e4:	f7ff ff9c 	bl	8018720 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80187e8:	ab05      	add	r3, sp, #20
 80187ea:	465a      	mov	r2, fp
 80187ec:	e9cd 4300 	strd	r4, r3, [sp]
 80187f0:	4603      	mov	r3, r0
 80187f2:	4650      	mov	r0, sl
 80187f4:	f7ff ffb2 	bl	801875c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80187f8:	6839      	ldr	r1, [r7, #0]
 80187fa:	9a05      	ldr	r2, [sp, #20]
 80187fc:	9b03      	ldr	r3, [sp, #12]
 80187fe:	4411      	add	r1, r2
 8018800:	fbb1 f2f4 	udiv	r2, r1, r4
 8018804:	18d3      	adds	r3, r2, r3
 8018806:	fb04 1412 	mls	r4, r4, r2, r1
 801880a:	441e      	add	r6, r3
 801880c:	603c      	str	r4, [r7, #0]
 801880e:	4430      	add	r0, r6
 8018810:	e7b6      	b.n	8018780 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08018812 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8018812:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018816:	b085      	sub	sp, #20
 8018818:	f1b0 0900 	subs.w	r9, r0, #0
 801881c:	461d      	mov	r5, r3
 801881e:	4617      	mov	r7, r2
 8018820:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018822:	bfbb      	ittet	lt
 8018824:	f1c9 0900 	rsblt	r9, r9, #0
 8018828:	f04f 36ff 	movlt.w	r6, #4294967295
 801882c:	2601      	movge	r6, #1
 801882e:	6823      	ldrlt	r3, [r4, #0]
 8018830:	bfbc      	itt	lt
 8018832:	425b      	neglt	r3, r3
 8018834:	6023      	strlt	r3, [r4, #0]
 8018836:	2a00      	cmp	r2, #0
 8018838:	da04      	bge.n	8018844 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801883a:	6823      	ldr	r3, [r4, #0]
 801883c:	4257      	negs	r7, r2
 801883e:	4276      	negs	r6, r6
 8018840:	425b      	negs	r3, r3
 8018842:	6023      	str	r3, [r4, #0]
 8018844:	2d00      	cmp	r5, #0
 8018846:	4638      	mov	r0, r7
 8018848:	bfba      	itte	lt
 801884a:	426d      	neglt	r5, r5
 801884c:	f04f 38ff 	movlt.w	r8, #4294967295
 8018850:	f04f 0801 	movge.w	r8, #1
 8018854:	f7ff ff64 	bl	8018720 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018858:	ab03      	add	r3, sp, #12
 801885a:	463a      	mov	r2, r7
 801885c:	e9cd 5300 	strd	r5, r3, [sp]
 8018860:	4603      	mov	r3, r0
 8018862:	4648      	mov	r0, r9
 8018864:	f7ff ff7a 	bl	801875c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018868:	6823      	ldr	r3, [r4, #0]
 801886a:	9a03      	ldr	r2, [sp, #12]
 801886c:	4546      	cmp	r6, r8
 801886e:	441a      	add	r2, r3
 8018870:	fb92 f3f5 	sdiv	r3, r2, r5
 8018874:	4418      	add	r0, r3
 8018876:	fb05 2313 	mls	r3, r5, r3, r2
 801887a:	bf18      	it	ne
 801887c:	4240      	negne	r0, r0
 801887e:	1c72      	adds	r2, r6, #1
 8018880:	6023      	str	r3, [r4, #0]
 8018882:	d105      	bne.n	8018890 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8018884:	2b00      	cmp	r3, #0
 8018886:	f1c3 0200 	rsb	r2, r3, #0
 801888a:	db0b      	blt.n	80188a4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801888c:	6022      	str	r2, [r4, #0]
 801888e:	e006      	b.n	801889e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018890:	2e01      	cmp	r6, #1
 8018892:	d104      	bne.n	801889e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018894:	2b00      	cmp	r3, #0
 8018896:	da02      	bge.n	801889e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018898:	442b      	add	r3, r5
 801889a:	3801      	subs	r0, #1
 801889c:	6023      	str	r3, [r4, #0]
 801889e:	b005      	add	sp, #20
 80188a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188a4:	3801      	subs	r0, #1
 80188a6:	1b52      	subs	r2, r2, r5
 80188a8:	e7f0      	b.n	801888c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080188ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80188ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80188b0:	4c1c      	ldr	r4, [pc, #112]	; (8018924 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80188b2:	4605      	mov	r5, r0
 80188b4:	6807      	ldr	r7, [r0, #0]
 80188b6:	69a3      	ldr	r3, [r4, #24]
 80188b8:	b92b      	cbnz	r3, 80188c6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80188ba:	6840      	ldr	r0, [r0, #4]
 80188bc:	e9c5 7000 	strd	r7, r0, [r5]
 80188c0:	b004      	add	sp, #16
 80188c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188c6:	f04f 0802 	mov.w	r8, #2
 80188ca:	68a2      	ldr	r2, [r4, #8]
 80188cc:	ae04      	add	r6, sp, #16
 80188ce:	6820      	ldr	r0, [r4, #0]
 80188d0:	fb93 f1f8 	sdiv	r1, r3, r8
 80188d4:	440a      	add	r2, r1
 80188d6:	69e1      	ldr	r1, [r4, #28]
 80188d8:	f846 2d04 	str.w	r2, [r6, #-4]!
 80188dc:	463a      	mov	r2, r7
 80188de:	9600      	str	r6, [sp, #0]
 80188e0:	f7ff ff97 	bl	8018812 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80188e4:	69a3      	ldr	r3, [r4, #24]
 80188e6:	4607      	mov	r7, r0
 80188e8:	686a      	ldr	r2, [r5, #4]
 80188ea:	6a21      	ldr	r1, [r4, #32]
 80188ec:	9600      	str	r6, [sp, #0]
 80188ee:	6860      	ldr	r0, [r4, #4]
 80188f0:	f7ff ff8f 	bl	8018812 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80188f4:	69a3      	ldr	r3, [r4, #24]
 80188f6:	6962      	ldr	r2, [r4, #20]
 80188f8:	4407      	add	r7, r0
 80188fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80188fc:	9600      	str	r6, [sp, #0]
 80188fe:	68e0      	ldr	r0, [r4, #12]
 8018900:	fb93 f8f8 	sdiv	r8, r3, r8
 8018904:	4442      	add	r2, r8
 8018906:	9203      	str	r2, [sp, #12]
 8018908:	682a      	ldr	r2, [r5, #0]
 801890a:	f7ff ff82 	bl	8018812 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801890e:	4680      	mov	r8, r0
 8018910:	9600      	str	r6, [sp, #0]
 8018912:	69a3      	ldr	r3, [r4, #24]
 8018914:	686a      	ldr	r2, [r5, #4]
 8018916:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018918:	6920      	ldr	r0, [r4, #16]
 801891a:	f7ff ff7a 	bl	8018812 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801891e:	4440      	add	r0, r8
 8018920:	e7cc      	b.n	80188bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8018922:	bf00      	nop
 8018924:	2400c8d0 	.word	0x2400c8d0

08018928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018928:	4b07      	ldr	r3, [pc, #28]	; (8018948 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801892a:	781b      	ldrb	r3, [r3, #0]
 801892c:	2b01      	cmp	r3, #1
 801892e:	d109      	bne.n	8018944 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8018930:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018934:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018938:	8003      	strh	r3, [r0, #0]
 801893a:	4b04      	ldr	r3, [pc, #16]	; (801894c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801893c:	881b      	ldrh	r3, [r3, #0]
 801893e:	3b01      	subs	r3, #1
 8018940:	1a9b      	subs	r3, r3, r2
 8018942:	800b      	strh	r3, [r1, #0]
 8018944:	4770      	bx	lr
 8018946:	bf00      	nop
 8018948:	2400c89c 	.word	0x2400c89c
 801894c:	2400c8a0 	.word	0x2400c8a0

08018950 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018950:	4b07      	ldr	r3, [pc, #28]	; (8018970 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018952:	b510      	push	{r4, lr}
 8018954:	781b      	ldrb	r3, [r3, #0]
 8018956:	2b01      	cmp	r3, #1
 8018958:	d108      	bne.n	801896c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801895a:	4b06      	ldr	r3, [pc, #24]	; (8018974 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801895c:	880c      	ldrh	r4, [r1, #0]
 801895e:	881b      	ldrh	r3, [r3, #0]
 8018960:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018964:	3b01      	subs	r3, #1
 8018966:	1b1b      	subs	r3, r3, r4
 8018968:	8003      	strh	r3, [r0, #0]
 801896a:	800a      	strh	r2, [r1, #0]
 801896c:	bd10      	pop	{r4, pc}
 801896e:	bf00      	nop
 8018970:	2400c89c 	.word	0x2400c89c
 8018974:	2400c8a0 	.word	0x2400c8a0

08018978 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018978:	4b0a      	ldr	r3, [pc, #40]	; (80189a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801897a:	b510      	push	{r4, lr}
 801897c:	781b      	ldrb	r3, [r3, #0]
 801897e:	2b01      	cmp	r3, #1
 8018980:	d10e      	bne.n	80189a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018982:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018986:	8843      	ldrh	r3, [r0, #2]
 8018988:	f9b0 4000 	ldrsh.w	r4, [r0]
 801898c:	18ca      	adds	r2, r1, r3
 801898e:	4b06      	ldr	r3, [pc, #24]	; (80189a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018990:	8044      	strh	r4, [r0, #2]
 8018992:	881b      	ldrh	r3, [r3, #0]
 8018994:	1a9b      	subs	r3, r3, r2
 8018996:	8003      	strh	r3, [r0, #0]
 8018998:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801899c:	8081      	strh	r1, [r0, #4]
 801899e:	80c3      	strh	r3, [r0, #6]
 80189a0:	bd10      	pop	{r4, pc}
 80189a2:	bf00      	nop
 80189a4:	2400c89c 	.word	0x2400c89c
 80189a8:	2400c8a0 	.word	0x2400c8a0

080189ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80189ac:	4b08      	ldr	r3, [pc, #32]	; (80189d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80189ae:	781b      	ldrb	r3, [r3, #0]
 80189b0:	2b01      	cmp	r3, #1
 80189b2:	d10c      	bne.n	80189ce <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80189b4:	8803      	ldrh	r3, [r0, #0]
 80189b6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80189ba:	8842      	ldrh	r2, [r0, #2]
 80189bc:	8002      	strh	r2, [r0, #0]
 80189be:	185a      	adds	r2, r3, r1
 80189c0:	4b04      	ldr	r3, [pc, #16]	; (80189d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80189c2:	881b      	ldrh	r3, [r3, #0]
 80189c4:	1a9b      	subs	r3, r3, r2
 80189c6:	8043      	strh	r3, [r0, #2]
 80189c8:	88c3      	ldrh	r3, [r0, #6]
 80189ca:	80c1      	strh	r1, [r0, #6]
 80189cc:	8083      	strh	r3, [r0, #4]
 80189ce:	4770      	bx	lr
 80189d0:	2400c89c 	.word	0x2400c89c
 80189d4:	2400c8a0 	.word	0x2400c8a0

080189d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80189d8:	4b07      	ldr	r3, [pc, #28]	; (80189f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80189da:	b510      	push	{r4, lr}
 80189dc:	781b      	ldrb	r3, [r3, #0]
 80189de:	2b01      	cmp	r3, #1
 80189e0:	d108      	bne.n	80189f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80189e2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80189e6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80189ea:	8003      	strh	r3, [r0, #0]
 80189ec:	8893      	ldrh	r3, [r2, #4]
 80189ee:	3b01      	subs	r3, #1
 80189f0:	1b1b      	subs	r3, r3, r4
 80189f2:	800b      	strh	r3, [r1, #0]
 80189f4:	bd10      	pop	{r4, pc}
 80189f6:	bf00      	nop
 80189f8:	2400c89c 	.word	0x2400c89c

080189fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80189fc:	4b0a      	ldr	r3, [pc, #40]	; (8018a28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80189fe:	460a      	mov	r2, r1
 8018a00:	b510      	push	{r4, lr}
 8018a02:	781b      	ldrb	r3, [r3, #0]
 8018a04:	2b01      	cmp	r3, #1
 8018a06:	d10d      	bne.n	8018a24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018a08:	8881      	ldrh	r1, [r0, #4]
 8018a0a:	8803      	ldrh	r3, [r0, #0]
 8018a0c:	440b      	add	r3, r1
 8018a0e:	4601      	mov	r1, r0
 8018a10:	3b01      	subs	r3, #1
 8018a12:	f821 3b02 	strh.w	r3, [r1], #2
 8018a16:	f7ff ffdf 	bl	80189d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018a1a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018a1e:	88c2      	ldrh	r2, [r0, #6]
 8018a20:	80c3      	strh	r3, [r0, #6]
 8018a22:	8082      	strh	r2, [r0, #4]
 8018a24:	bd10      	pop	{r4, pc}
 8018a26:	bf00      	nop
 8018a28:	2400c89c 	.word	0x2400c89c

08018a2c <_ZN8touchgfx11Application13requestRedrawEv>:
 8018a2c:	4b06      	ldr	r3, [pc, #24]	; (8018a48 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8018a2e:	2100      	movs	r1, #0
 8018a30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a34:	4b05      	ldr	r3, [pc, #20]	; (8018a4c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8018a36:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8018a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a3e:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8018a42:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8018a46:	4770      	bx	lr
 8018a48:	2400c898 	.word	0x2400c898
 8018a4c:	2400c89a 	.word	0x2400c89a

08018a50 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018a50:	4b03      	ldr	r3, [pc, #12]	; (8018a60 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018a52:	6818      	ldr	r0, [r3, #0]
 8018a54:	b110      	cbz	r0, 8018a5c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018a56:	6803      	ldr	r3, [r0, #0]
 8018a58:	699b      	ldr	r3, [r3, #24]
 8018a5a:	4718      	bx	r3
 8018a5c:	4770      	bx	lr
 8018a5e:	bf00      	nop
 8018a60:	2400c900 	.word	0x2400c900

08018a64 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018a64:	4770      	bx	lr
	...

08018a68 <_ZN8touchgfx11Application4drawEv>:
 8018a68:	4b09      	ldr	r3, [pc, #36]	; (8018a90 <_ZN8touchgfx11Application4drawEv+0x28>)
 8018a6a:	b507      	push	{r0, r1, r2, lr}
 8018a6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a70:	2100      	movs	r1, #0
 8018a72:	4b08      	ldr	r3, [pc, #32]	; (8018a94 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018a74:	9100      	str	r1, [sp, #0]
 8018a76:	4669      	mov	r1, sp
 8018a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018a7c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018a80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018a84:	6803      	ldr	r3, [r0, #0]
 8018a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a88:	4798      	blx	r3
 8018a8a:	b003      	add	sp, #12
 8018a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018a90:	2400c898 	.word	0x2400c898
 8018a94:	2400c89a 	.word	0x2400c89a

08018a98 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018a98:	4b03      	ldr	r3, [pc, #12]	; (8018aa8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018a9a:	6818      	ldr	r0, [r3, #0]
 8018a9c:	b110      	cbz	r0, 8018aa4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018a9e:	6803      	ldr	r3, [r0, #0]
 8018aa0:	69db      	ldr	r3, [r3, #28]
 8018aa2:	4718      	bx	r3
 8018aa4:	4770      	bx	lr
 8018aa6:	bf00      	nop
 8018aa8:	2400c900 	.word	0x2400c900

08018aac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018aac:	4b03      	ldr	r3, [pc, #12]	; (8018abc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018aae:	6818      	ldr	r0, [r3, #0]
 8018ab0:	b110      	cbz	r0, 8018ab8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018ab2:	6803      	ldr	r3, [r0, #0]
 8018ab4:	6a1b      	ldr	r3, [r3, #32]
 8018ab6:	4718      	bx	r3
 8018ab8:	4770      	bx	lr
 8018aba:	bf00      	nop
 8018abc:	2400c900 	.word	0x2400c900

08018ac0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018ac0:	4b03      	ldr	r3, [pc, #12]	; (8018ad0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018ac2:	6818      	ldr	r0, [r3, #0]
 8018ac4:	b110      	cbz	r0, 8018acc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018ac6:	6803      	ldr	r3, [r0, #0]
 8018ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018aca:	4718      	bx	r3
 8018acc:	4770      	bx	lr
 8018ace:	bf00      	nop
 8018ad0:	2400c900 	.word	0x2400c900

08018ad4 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018ad4:	b570      	push	{r4, r5, r6, lr}
 8018ad6:	4d38      	ldr	r5, [pc, #224]	; (8018bb8 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 8018ad8:	4604      	mov	r4, r0
 8018ada:	6828      	ldr	r0, [r5, #0]
 8018adc:	b140      	cbz	r0, 8018af0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018ade:	7a03      	ldrb	r3, [r0, #8]
 8018ae0:	b933      	cbnz	r3, 8018af0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018ae2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8018ae6:	6803      	ldr	r3, [r0, #0]
 8018ae8:	689b      	ldr	r3, [r3, #8]
 8018aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018aee:	4718      	bx	r3
 8018af0:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 8018af4:	b97b      	cbnz	r3, 8018b16 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018af6:	b170      	cbz	r0, 8018b16 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018af8:	7a03      	ldrb	r3, [r0, #8]
 8018afa:	b163      	cbz	r3, 8018b16 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018afc:	4b2f      	ldr	r3, [pc, #188]	; (8018bbc <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 8018afe:	6818      	ldr	r0, [r3, #0]
 8018b00:	b110      	cbz	r0, 8018b08 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8018b02:	6803      	ldr	r3, [r0, #0]
 8018b04:	691b      	ldr	r3, [r3, #16]
 8018b06:	4798      	blx	r3
 8018b08:	6828      	ldr	r0, [r5, #0]
 8018b0a:	6803      	ldr	r3, [r0, #0]
 8018b0c:	68db      	ldr	r3, [r3, #12]
 8018b0e:	4798      	blx	r3
 8018b10:	2301      	movs	r3, #1
 8018b12:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 8018b16:	2500      	movs	r5, #0
 8018b18:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8018b1c:	42a8      	cmp	r0, r5
 8018b1e:	dd0c      	ble.n	8018b3a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8018b20:	1963      	adds	r3, r4, r5
 8018b22:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018b26:	b132      	cbz	r2, 8018b36 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8018b28:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8018b2c:	4413      	add	r3, r2
 8018b2e:	6858      	ldr	r0, [r3, #4]
 8018b30:	6803      	ldr	r3, [r0, #0]
 8018b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b34:	4798      	blx	r3
 8018b36:	3501      	adds	r5, #1
 8018b38:	e7ee      	b.n	8018b18 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018b3a:	2300      	movs	r3, #0
 8018b3c:	461a      	mov	r2, r3
 8018b3e:	4298      	cmp	r0, r3
 8018b40:	d10f      	bne.n	8018b62 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 8018b42:	1d25      	adds	r5, r4, #4
 8018b44:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8018b48:	4291      	cmp	r1, r2
 8018b4a:	dd2d      	ble.n	8018ba8 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 8018b4c:	1e48      	subs	r0, r1, #1
 8018b4e:	b280      	uxth	r0, r0
 8018b50:	4288      	cmp	r0, r1
 8018b52:	d31a      	bcc.n	8018b8a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8018b54:	4b1a      	ldr	r3, [pc, #104]	; (8018bc0 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 8018b56:	f240 11a9 	movw	r1, #425	; 0x1a9
 8018b5a:	4a1a      	ldr	r2, [pc, #104]	; (8018bc4 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8018b5c:	481a      	ldr	r0, [pc, #104]	; (8018bc8 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018b5e:	f00d f80b 	bl	8025b78 <__assert_func>
 8018b62:	18e1      	adds	r1, r4, r3
 8018b64:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8018b68:	b16d      	cbz	r5, 8018b86 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 8018b6a:	429a      	cmp	r2, r3
 8018b6c:	d00a      	beq.n	8018b84 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 8018b6e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8018b72:	4431      	add	r1, r6
 8018b74:	684e      	ldr	r6, [r1, #4]
 8018b76:	b291      	uxth	r1, r2
 8018b78:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8018b7c:	604e      	str	r6, [r1, #4]
 8018b7e:	18a1      	adds	r1, r4, r2
 8018b80:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8018b84:	3201      	adds	r2, #1
 8018b86:	3301      	adds	r3, #1
 8018b88:	e7d9      	b.n	8018b3e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8018b8a:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 8018b8e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8018b92:	3304      	adds	r3, #4
 8018b94:	428b      	cmp	r3, r1
 8018b96:	d004      	beq.n	8018ba2 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 8018b98:	f853 6f04 	ldr.w	r6, [r3, #4]!
 8018b9c:	f843 6c04 	str.w	r6, [r3, #-4]
 8018ba0:	e7f8      	b.n	8018b94 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 8018ba2:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 8018ba6:	e7cd      	b.n	8018b44 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 8018ba8:	4b04      	ldr	r3, [pc, #16]	; (8018bbc <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 8018baa:	6818      	ldr	r0, [r3, #0]
 8018bac:	b110      	cbz	r0, 8018bb4 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8018bae:	6803      	ldr	r3, [r0, #0]
 8018bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bb2:	e79a      	b.n	8018aea <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8018bb4:	bd70      	pop	{r4, r5, r6, pc}
 8018bb6:	bf00      	nop
 8018bb8:	2400c904 	.word	0x2400c904
 8018bbc:	2400c900 	.word	0x2400c900
 8018bc0:	0802a160 	.word	0x0802a160
 8018bc4:	0802a34c 	.word	0x0802a34c
 8018bc8:	0802a16e 	.word	0x0802a16e

08018bcc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018bcc:	b570      	push	{r4, r5, r6, lr}
 8018bce:	4606      	mov	r6, r0
 8018bd0:	460c      	mov	r4, r1
 8018bd2:	b929      	cbnz	r1, 8018be0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018bd4:	4b0c      	ldr	r3, [pc, #48]	; (8018c08 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018bd6:	2167      	movs	r1, #103	; 0x67
 8018bd8:	4a0c      	ldr	r2, [pc, #48]	; (8018c0c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8018bda:	480d      	ldr	r0, [pc, #52]	; (8018c10 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018bdc:	f00c ffcc 	bl	8025b78 <__assert_func>
 8018be0:	2300      	movs	r3, #0
 8018be2:	4d0c      	ldr	r5, [pc, #48]	; (8018c14 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018be4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018be8:	6828      	ldr	r0, [r5, #0]
 8018bea:	b110      	cbz	r0, 8018bf2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018bec:	6803      	ldr	r3, [r0, #0]
 8018bee:	695b      	ldr	r3, [r3, #20]
 8018bf0:	4798      	blx	r3
 8018bf2:	602c      	str	r4, [r5, #0]
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	6823      	ldr	r3, [r4, #0]
 8018bf8:	68db      	ldr	r3, [r3, #12]
 8018bfa:	4798      	blx	r3
 8018bfc:	6833      	ldr	r3, [r6, #0]
 8018bfe:	4630      	mov	r0, r6
 8018c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c06:	4718      	bx	r3
 8018c08:	0802a12c 	.word	0x0802a12c
 8018c0c:	0802a20c 	.word	0x0802a20c
 8018c10:	0802a136 	.word	0x0802a136
 8018c14:	2400c900 	.word	0x2400c900

08018c18 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018c18:	b570      	push	{r4, r5, r6, lr}
 8018c1a:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018c1e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018c22:	42ac      	cmp	r4, r5
 8018c24:	db18      	blt.n	8018c58 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018c26:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8018c2a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018c2e:	429a      	cmp	r2, r3
 8018c30:	db12      	blt.n	8018c58 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018c32:	8886      	ldrh	r6, [r0, #4]
 8018c34:	4435      	add	r5, r6
 8018c36:	888e      	ldrh	r6, [r1, #4]
 8018c38:	4434      	add	r4, r6
 8018c3a:	b22d      	sxth	r5, r5
 8018c3c:	b224      	sxth	r4, r4
 8018c3e:	42a5      	cmp	r5, r4
 8018c40:	db0a      	blt.n	8018c58 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018c42:	88c0      	ldrh	r0, [r0, #6]
 8018c44:	4418      	add	r0, r3
 8018c46:	88cb      	ldrh	r3, [r1, #6]
 8018c48:	441a      	add	r2, r3
 8018c4a:	b200      	sxth	r0, r0
 8018c4c:	b212      	sxth	r2, r2
 8018c4e:	4290      	cmp	r0, r2
 8018c50:	bfb4      	ite	lt
 8018c52:	2000      	movlt	r0, #0
 8018c54:	2001      	movge	r0, #1
 8018c56:	bd70      	pop	{r4, r5, r6, pc}
 8018c58:	2000      	movs	r0, #0
 8018c5a:	e7fc      	b.n	8018c56 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018c5c <_ZN8touchgfx11Application11getInstanceEv>:
 8018c5c:	4b01      	ldr	r3, [pc, #4]	; (8018c64 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018c5e:	6818      	ldr	r0, [r3, #0]
 8018c60:	4770      	bx	lr
 8018c62:	bf00      	nop
 8018c64:	2400c910 	.word	0x2400c910

08018c68 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018c68:	2300      	movs	r3, #0
 8018c6a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018c6e:	30a8      	adds	r0, #168	; 0xa8
 8018c70:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018c74:	f802 3b01 	strb.w	r3, [r2], #1
 8018c78:	4282      	cmp	r2, r0
 8018c7a:	d1fb      	bne.n	8018c74 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018c7c:	4770      	bx	lr

08018c7e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018c7e:	4603      	mov	r3, r0
 8018c80:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018c84:	2200      	movs	r2, #0
 8018c86:	801a      	strh	r2, [r3, #0]
 8018c88:	3308      	adds	r3, #8
 8018c8a:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018c8e:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018c92:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018c96:	428b      	cmp	r3, r1
 8018c98:	d1f5      	bne.n	8018c86 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018c9a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018c9e:	4770      	bx	lr

08018ca0 <_ZN8touchgfx11ApplicationC1Ev>:
 8018ca0:	b570      	push	{r4, r5, r6, lr}
 8018ca2:	4b1a      	ldr	r3, [pc, #104]	; (8018d0c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8018ca4:	2500      	movs	r5, #0
 8018ca6:	4604      	mov	r4, r0
 8018ca8:	30a8      	adds	r0, #168	; 0xa8
 8018caa:	f840 3ca8 	str.w	r3, [r0, #-168]
 8018cae:	f820 5c24 	strh.w	r5, [r0, #-36]
 8018cb2:	f7ff ffe4 	bl	8018c7e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018cb6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018cba:	f7ff ffe0 	bl	8018c7e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018cbe:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8018cc2:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8018cc6:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8018cca:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8018cce:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8018cd2:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 8018cd6:	490e      	ldr	r1, [pc, #56]	; (8018d10 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018cd8:	480e      	ldr	r0, [pc, #56]	; (8018d14 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8018cda:	f00b f9f9 	bl	80240d0 <CRC_Lock>
 8018cde:	4e0e      	ldr	r6, [pc, #56]	; (8018d18 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8018ce0:	4b0e      	ldr	r3, [pc, #56]	; (8018d1c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8018ce2:	b158      	cbz	r0, 8018cfc <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 8018ce4:	801d      	strh	r5, [r3, #0]
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	4a0d      	ldr	r2, [pc, #52]	; (8018d20 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018cea:	4620      	mov	r0, r4
 8018cec:	6013      	str	r3, [r2, #0]
 8018cee:	4a0d      	ldr	r2, [pc, #52]	; (8018d24 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018cf0:	6033      	str	r3, [r6, #0]
 8018cf2:	6013      	str	r3, [r2, #0]
 8018cf4:	f7ff ffb8 	bl	8018c68 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018cf8:	4620      	mov	r0, r4
 8018cfa:	bd70      	pop	{r4, r5, r6, pc}
 8018cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018d00:	2002      	movs	r0, #2
 8018d02:	801a      	strh	r2, [r3, #0]
 8018d04:	6030      	str	r0, [r6, #0]
 8018d06:	f001 faa9 	bl	801a25c <_ZN8touchgfx6Screen4drawEv>
 8018d0a:	e7ec      	b.n	8018ce6 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 8018d0c:	0802a1d0 	.word	0x0802a1d0
 8018d10:	b5e8b5cd 	.word	0xb5e8b5cd
 8018d14:	f407a5c2 	.word	0xf407a5c2
 8018d18:	2400c900 	.word	0x2400c900
 8018d1c:	24000050 	.word	0x24000050
 8018d20:	2400c910 	.word	0x2400c910
 8018d24:	2400c904 	.word	0x2400c904

08018d28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018d28:	b510      	push	{r4, lr}
 8018d2a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8018d2e:	428b      	cmp	r3, r1
 8018d30:	d806      	bhi.n	8018d40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 8018d32:	4b0b      	ldr	r3, [pc, #44]	; (8018d60 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 8018d34:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8018d38:	4a0a      	ldr	r2, [pc, #40]	; (8018d64 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 8018d3a:	480b      	ldr	r0, [pc, #44]	; (8018d68 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 8018d3c:	f00c ff1c 	bl	8025b78 <__assert_func>
 8018d40:	3b01      	subs	r3, #1
 8018d42:	b29b      	uxth	r3, r3
 8018d44:	428b      	cmp	r3, r1
 8018d46:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8018d4a:	d908      	bls.n	8018d5e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 8018d4c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018d50:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018d54:	681a      	ldr	r2, [r3, #0]
 8018d56:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018d5a:	685a      	ldr	r2, [r3, #4]
 8018d5c:	6062      	str	r2, [r4, #4]
 8018d5e:	bd10      	pop	{r4, pc}
 8018d60:	0802a160 	.word	0x0802a160
 8018d64:	0802a250 	.word	0x0802a250
 8018d68:	0802a16e 	.word	0x0802a16e

08018d6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018d6e:	466b      	mov	r3, sp
 8018d70:	4604      	mov	r4, r0
 8018d72:	e883 0006 	stmia.w	r3, {r1, r2}
 8018d76:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8018d7a:	2a07      	cmp	r2, #7
 8018d7c:	d906      	bls.n	8018d8c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8018d7e:	4b09      	ldr	r3, [pc, #36]	; (8018da4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018d80:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8018d84:	4a08      	ldr	r2, [pc, #32]	; (8018da8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8018d86:	4809      	ldr	r0, [pc, #36]	; (8018dac <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8018d88:	f00c fef6 	bl	8025b78 <__assert_func>
 8018d8c:	1c51      	adds	r1, r2, #1
 8018d8e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018d92:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018d96:	cb03      	ldmia	r3!, {r0, r1}
 8018d98:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8018d9c:	6069      	str	r1, [r5, #4]
 8018d9e:	b003      	add	sp, #12
 8018da0:	bd30      	pop	{r4, r5, pc}
 8018da2:	bf00      	nop
 8018da4:	0802a197 	.word	0x0802a197
 8018da8:	0802a2e6 	.word	0x0802a2e6
 8018dac:	0802a16e 	.word	0x0802a16e

08018db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018db4:	b08d      	sub	sp, #52	; 0x34
 8018db6:	4683      	mov	fp, r0
 8018db8:	ac08      	add	r4, sp, #32
 8018dba:	4620      	mov	r0, r4
 8018dbc:	e884 0006 	stmia.w	r4, {r1, r2}
 8018dc0:	f7fb f9ad 	bl	801411e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018dc4:	2800      	cmp	r0, #0
 8018dc6:	d16a      	bne.n	8018e9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018dc8:	9402      	str	r4, [sp, #8]
 8018dca:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8018dce:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8018dd2:	2400      	movs	r4, #0
 8018dd4:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8018dd8:	9301      	str	r3, [sp, #4]
 8018dda:	36a0      	adds	r6, #160	; 0xa0
 8018ddc:	42a5      	cmp	r5, r4
 8018dde:	d00d      	beq.n	8018dfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 8018de0:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8018de4:	9802      	ldr	r0, [sp, #8]
 8018de6:	f7ff ff17 	bl	8018c18 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018dea:	b128      	cbz	r0, 8018df8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8018dec:	1e69      	subs	r1, r5, #1
 8018dee:	9801      	ldr	r0, [sp, #4]
 8018df0:	1b09      	subs	r1, r1, r4
 8018df2:	b289      	uxth	r1, r1
 8018df4:	f7ff ff98 	bl	8018d28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018df8:	3401      	adds	r4, #1
 8018dfa:	e7ef      	b.n	8018ddc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018dfc:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8018e00:	1e7b      	subs	r3, r7, #1
 8018e02:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8018e06:	9703      	str	r7, [sp, #12]
 8018e08:	9300      	str	r3, [sp, #0]
 8018e0a:	2400      	movs	r4, #0
 8018e0c:	4655      	mov	r5, sl
 8018e0e:	9704      	str	r7, [sp, #16]
 8018e10:	4626      	mov	r6, r4
 8018e12:	9b04      	ldr	r3, [sp, #16]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d078      	beq.n	8018f0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 8018e18:	9902      	ldr	r1, [sp, #8]
 8018e1a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018e1e:	f7fc fb57 	bl	80154d0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018e22:	b360      	cbz	r0, 8018e7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8018e24:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8018e28:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8018e2c:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8018e30:	45e6      	cmp	lr, ip
 8018e32:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8018e36:	db35      	blt.n	8018ea4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8018e38:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018e3c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8018e40:	4472      	add	r2, lr
 8018e42:	4463      	add	r3, ip
 8018e44:	b212      	sxth	r2, r2
 8018e46:	b21b      	sxth	r3, r3
 8018e48:	429a      	cmp	r2, r3
 8018e4a:	dc2b      	bgt.n	8018ea4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 8018e4c:	fa1f f288 	uxth.w	r2, r8
 8018e50:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018e54:	45c1      	cmp	r9, r8
 8018e56:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018e5a:	4413      	add	r3, r2
 8018e5c:	fa1f fc89 	uxth.w	ip, r9
 8018e60:	b29b      	uxth	r3, r3
 8018e62:	fa0f fe83 	sxth.w	lr, r3
 8018e66:	db0f      	blt.n	8018e88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 8018e68:	eba3 030c 	sub.w	r3, r3, ip
 8018e6c:	1ac9      	subs	r1, r1, r3
 8018e6e:	b209      	sxth	r1, r1
 8018e70:	2900      	cmp	r1, #0
 8018e72:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 8018e76:	dd12      	ble.n	8018e9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018e78:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8018e7c:	4604      	mov	r4, r0
 8018e7e:	9b04      	ldr	r3, [sp, #16]
 8018e80:	3d08      	subs	r5, #8
 8018e82:	3b01      	subs	r3, #1
 8018e84:	9304      	str	r3, [sp, #16]
 8018e86:	e7c4      	b.n	8018e12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8018e88:	4461      	add	r1, ip
 8018e8a:	b209      	sxth	r1, r1
 8018e8c:	4571      	cmp	r1, lr
 8018e8e:	dc3a      	bgt.n	8018f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018e90:	eba2 020c 	sub.w	r2, r2, ip
 8018e94:	b212      	sxth	r2, r2
 8018e96:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8018e9a:	2a00      	cmp	r2, #0
 8018e9c:	dcee      	bgt.n	8018e7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8018e9e:	b00d      	add	sp, #52	; 0x34
 8018ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ea4:	45c1      	cmp	r9, r8
 8018ea6:	db2e      	blt.n	8018f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018ea8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8018eac:	4499      	add	r9, r3
 8018eae:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8018eb2:	4498      	add	r8, r3
 8018eb4:	fa0f f989 	sxth.w	r9, r9
 8018eb8:	fa0f f888 	sxth.w	r8, r8
 8018ebc:	45c1      	cmp	r9, r8
 8018ebe:	dc22      	bgt.n	8018f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018ec0:	fa1f f28c 	uxth.w	r2, ip
 8018ec4:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8018ec8:	45e6      	cmp	lr, ip
 8018eca:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8018ece:	4413      	add	r3, r2
 8018ed0:	fa1f f88e 	uxth.w	r8, lr
 8018ed4:	b29b      	uxth	r3, r3
 8018ed6:	fa0f f983 	sxth.w	r9, r3
 8018eda:	db0a      	blt.n	8018ef2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 8018edc:	eba3 0308 	sub.w	r3, r3, r8
 8018ee0:	1ac9      	subs	r1, r1, r3
 8018ee2:	b209      	sxth	r1, r1
 8018ee4:	2900      	cmp	r1, #0
 8018ee6:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8018eea:	ddd8      	ble.n	8018e9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 8018eec:	f8ad 9020 	strh.w	r9, [sp, #32]
 8018ef0:	e7c4      	b.n	8018e7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 8018ef2:	4441      	add	r1, r8
 8018ef4:	b209      	sxth	r1, r1
 8018ef6:	4549      	cmp	r1, r9
 8018ef8:	dc05      	bgt.n	8018f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 8018efa:	eba2 0208 	sub.w	r2, r2, r8
 8018efe:	b212      	sxth	r2, r2
 8018f00:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8018f04:	e7c9      	b.n	8018e9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018f06:	4606      	mov	r6, r0
 8018f08:	e7b9      	b.n	8018e7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 8018f0a:	2c00      	cmp	r4, #0
 8018f0c:	f47f af7d 	bne.w	8018e0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 8018f10:	2e00      	cmp	r6, #0
 8018f12:	f000 81dc 	beq.w	80192ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8018f16:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8018f1a:	4655      	mov	r5, sl
 8018f1c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8018f20:	b2b9      	uxth	r1, r7
 8018f22:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8018f26:	b2b3      	uxth	r3, r6
 8018f28:	9104      	str	r1, [sp, #16]
 8018f2a:	9804      	ldr	r0, [sp, #16]
 8018f2c:	441a      	add	r2, r3
 8018f2e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8018f32:	b292      	uxth	r2, r2
 8018f34:	4401      	add	r1, r0
 8018f36:	fa0f f882 	sxth.w	r8, r2
 8018f3a:	b289      	uxth	r1, r1
 8018f3c:	9105      	str	r1, [sp, #20]
 8018f3e:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8018f42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018f46:	9b03      	ldr	r3, [sp, #12]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d054      	beq.n	8018ff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8018f4c:	9902      	ldr	r1, [sp, #8]
 8018f4e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8018f52:	f7fc fabd 	bl	80154d0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018f56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018f5a:	b1d8      	cbz	r0, 8018f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018f5c:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8018f60:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8018f64:	4576      	cmp	r6, lr
 8018f66:	dc26      	bgt.n	8018fb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018f68:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8018f6c:	44f4      	add	ip, lr
 8018f6e:	fa0f fc8c 	sxth.w	ip, ip
 8018f72:	45e0      	cmp	r8, ip
 8018f74:	db1f      	blt.n	8018fb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018f76:	428f      	cmp	r7, r1
 8018f78:	fa1f fc81 	uxth.w	ip, r1
 8018f7c:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8018f80:	dc0f      	bgt.n	8018fa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8018f82:	9805      	ldr	r0, [sp, #20]
 8018f84:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8018f88:	eba0 0c0c 	sub.w	ip, r0, ip
 8018f8c:	eba1 010c 	sub.w	r1, r1, ip
 8018f90:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8018f94:	4620      	mov	r0, r4
 8018f96:	9903      	ldr	r1, [sp, #12]
 8018f98:	3d08      	subs	r5, #8
 8018f9a:	4604      	mov	r4, r0
 8018f9c:	3901      	subs	r1, #1
 8018f9e:	9103      	str	r1, [sp, #12]
 8018fa0:	e7cf      	b.n	8018f42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 8018fa2:	4461      	add	r1, ip
 8018fa4:	b209      	sxth	r1, r1
 8018fa6:	4549      	cmp	r1, r9
 8018fa8:	dcf5      	bgt.n	8018f96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018faa:	9904      	ldr	r1, [sp, #16]
 8018fac:	eba1 0c0c 	sub.w	ip, r1, ip
 8018fb0:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8018fb4:	e7ee      	b.n	8018f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018fb6:	428f      	cmp	r7, r1
 8018fb8:	dced      	bgt.n	8018f96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018fba:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8018fbe:	4461      	add	r1, ip
 8018fc0:	b209      	sxth	r1, r1
 8018fc2:	4589      	cmp	r9, r1
 8018fc4:	dbe7      	blt.n	8018f96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018fc6:	4576      	cmp	r6, lr
 8018fc8:	fa1f fc8e 	uxth.w	ip, lr
 8018fcc:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8018fd0:	dc08      	bgt.n	8018fe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 8018fd2:	eba2 0c0c 	sub.w	ip, r2, ip
 8018fd6:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8018fda:	eba1 010c 	sub.w	r1, r1, ip
 8018fde:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8018fe2:	e7d7      	b.n	8018f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018fe4:	4461      	add	r1, ip
 8018fe6:	b209      	sxth	r1, r1
 8018fe8:	4588      	cmp	r8, r1
 8018fea:	dbd4      	blt.n	8018f96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018fec:	eba3 0c0c 	sub.w	ip, r3, ip
 8018ff0:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8018ff4:	e7ce      	b.n	8018f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018ff6:	2c00      	cmp	r4, #0
 8018ff8:	f000 8169 	beq.w	80192ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8018ffc:	9b00      	ldr	r3, [sp, #0]
 8018ffe:	3301      	adds	r3, #1
 8019000:	f000 8165 	beq.w	80192ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 8019004:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8019008:	9802      	ldr	r0, [sp, #8]
 801900a:	4621      	mov	r1, r4
 801900c:	f7ff fe04 	bl	8018c18 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019010:	b120      	cbz	r0, 801901c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 8019012:	f8bd 1000 	ldrh.w	r1, [sp]
 8019016:	9801      	ldr	r0, [sp, #4]
 8019018:	f7ff fe86 	bl	8018d28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801901c:	9902      	ldr	r1, [sp, #8]
 801901e:	4620      	mov	r0, r4
 8019020:	f7fc fa56 	bl	80154d0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019024:	2800      	cmp	r0, #0
 8019026:	f000 809b 	beq.w	8019160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801902a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801902e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8019032:	fa1f f288 	uxth.w	r2, r8
 8019036:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801903a:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801903e:	19d5      	adds	r5, r2, r7
 8019040:	b2a1      	uxth	r1, r4
 8019042:	45a0      	cmp	r8, r4
 8019044:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8019048:	fa1f f985 	uxth.w	r9, r5
 801904c:	440b      	add	r3, r1
 801904e:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8019052:	fa0f f589 	sxth.w	r5, r9
 8019056:	b29b      	uxth	r3, r3
 8019058:	9503      	str	r5, [sp, #12]
 801905a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801905e:	9507      	str	r5, [sp, #28]
 8019060:	f340 809d 	ble.w	801919e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8019064:	1a52      	subs	r2, r2, r1
 8019066:	4584      	cmp	ip, r0
 8019068:	fa0f fe83 	sxth.w	lr, r3
 801906c:	b292      	uxth	r2, r2
 801906e:	b215      	sxth	r5, r2
 8019070:	dd2f      	ble.n	80190d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8019072:	9e00      	ldr	r6, [sp, #0]
 8019074:	fa1f fc8c 	uxth.w	ip, ip
 8019078:	b280      	uxth	r0, r0
 801907a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801907e:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8019082:	9e03      	ldr	r6, [sp, #12]
 8019084:	ebac 0300 	sub.w	r3, ip, r0
 8019088:	448c      	add	ip, r1
 801908a:	eba6 060e 	sub.w	r6, r6, lr
 801908e:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8019092:	b29b      	uxth	r3, r3
 8019094:	4470      	add	r0, lr
 8019096:	fa0f fc8c 	sxth.w	ip, ip
 801909a:	b21c      	sxth	r4, r3
 801909c:	b200      	sxth	r0, r0
 801909e:	4366      	muls	r6, r4
 80190a0:	ebac 0000 	sub.w	r0, ip, r0
 80190a4:	4368      	muls	r0, r5
 80190a6:	4286      	cmp	r6, r0
 80190a8:	db09      	blt.n	80190be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 80190aa:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 80190ae:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80190b2:	4417      	add	r7, r2
 80190b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80190b8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80190bc:	e685      	b.n	8018dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80190be:	440b      	add	r3, r1
 80190c0:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 80190c4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80190c8:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 80190cc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80190d0:	e67b      	b.n	8018dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80190d2:	9e03      	ldr	r6, [sp, #12]
 80190d4:	45b6      	cmp	lr, r6
 80190d6:	da28      	bge.n	801912a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 80190d8:	9b00      	ldr	r3, [sp, #0]
 80190da:	eba6 060e 	sub.w	r6, r6, lr
 80190de:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 80190e2:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 80190e6:	eb04 030c 	add.w	r3, r4, ip
 80190ea:	fa1f f883 	uxth.w	r8, r3
 80190ee:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 80190f2:	4403      	add	r3, r0
 80190f4:	fa0f f988 	sxth.w	r9, r8
 80190f8:	eba0 000c 	sub.w	r0, r0, ip
 80190fc:	eba3 0308 	sub.w	r3, r3, r8
 8019100:	4368      	muls	r0, r5
 8019102:	b29b      	uxth	r3, r3
 8019104:	fa0f f883 	sxth.w	r8, r3
 8019108:	fb08 f606 	mul.w	r6, r8, r6
 801910c:	42b0      	cmp	r0, r6
 801910e:	dc06      	bgt.n	801911e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 8019110:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8019114:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8019118:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801911c:	e7c9      	b.n	80190b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801911e:	4423      	add	r3, r4
 8019120:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8019124:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019128:	e64f      	b.n	8018dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801912a:	eba3 0309 	sub.w	r3, r3, r9
 801912e:	9807      	ldr	r0, [sp, #28]
 8019130:	b29b      	uxth	r3, r3
 8019132:	2806      	cmp	r0, #6
 8019134:	fa0f fc83 	sxth.w	ip, r3
 8019138:	d818      	bhi.n	801916c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801913a:	4652      	mov	r2, sl
 801913c:	ab0a      	add	r3, sp, #40	; 0x28
 801913e:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8019142:	6851      	ldr	r1, [r2, #4]
 8019144:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8019148:	c303      	stmia	r3!, {r0, r1}
 801914a:	9b03      	ldr	r3, [sp, #12]
 801914c:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8019150:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8019154:	ab0a      	add	r3, sp, #40	; 0x28
 8019156:	9801      	ldr	r0, [sp, #4]
 8019158:	e893 0006 	ldmia.w	r3, {r1, r2}
 801915c:	f7ff fe06 	bl	8018d6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019160:	9b00      	ldr	r3, [sp, #0]
 8019162:	f1aa 0a08 	sub.w	sl, sl, #8
 8019166:	3b01      	subs	r3, #1
 8019168:	9300      	str	r3, [sp, #0]
 801916a:	e747      	b.n	8018ffc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801916c:	9800      	ldr	r0, [sp, #0]
 801916e:	45ac      	cmp	ip, r5
 8019170:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8019174:	db0c      	blt.n	8019190 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 8019176:	4417      	add	r7, r2
 8019178:	4458      	add	r0, fp
 801917a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801917e:	b2bf      	uxth	r7, r7
 8019180:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8019184:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8019188:	440f      	add	r7, r1
 801918a:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801918e:	e61c      	b.n	8018dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019190:	4458      	add	r0, fp
 8019192:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8019196:	443b      	add	r3, r7
 8019198:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801919c:	e615      	b.n	8018dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801919e:	fa1f f18c 	uxth.w	r1, ip
 80191a2:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 80191a6:	b282      	uxth	r2, r0
 80191a8:	4584      	cmp	ip, r0
 80191aa:	eb01 0e05 	add.w	lr, r1, r5
 80191ae:	9204      	str	r2, [sp, #16]
 80191b0:	fa1f fe8e 	uxth.w	lr, lr
 80191b4:	9e04      	ldr	r6, [sp, #16]
 80191b6:	fa0f f28e 	sxth.w	r2, lr
 80191ba:	9205      	str	r2, [sp, #20]
 80191bc:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 80191c0:	4432      	add	r2, r6
 80191c2:	b292      	uxth	r2, r2
 80191c4:	9206      	str	r2, [sp, #24]
 80191c6:	da26      	bge.n	8019216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 80191c8:	eba3 0309 	sub.w	r3, r3, r9
 80191cc:	eba2 020e 	sub.w	r2, r2, lr
 80191d0:	eba0 000c 	sub.w	r0, r0, ip
 80191d4:	eba4 0408 	sub.w	r4, r4, r8
 80191d8:	b29b      	uxth	r3, r3
 80191da:	b292      	uxth	r2, r2
 80191dc:	fa0f fa83 	sxth.w	sl, r3
 80191e0:	b211      	sxth	r1, r2
 80191e2:	fb0a f000 	mul.w	r0, sl, r0
 80191e6:	434c      	muls	r4, r1
 80191e8:	42a0      	cmp	r0, r4
 80191ea:	9800      	ldr	r0, [sp, #0]
 80191ec:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80191f0:	dc06      	bgt.n	8019200 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 80191f2:	4458      	add	r0, fp
 80191f4:	9a05      	ldr	r2, [sp, #20]
 80191f6:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 80191fa:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80191fe:	e7ca      	b.n	8019196 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8019200:	eb0b 0300 	add.w	r3, fp, r0
 8019204:	9903      	ldr	r1, [sp, #12]
 8019206:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801920a:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801920e:	442a      	add	r2, r5
 8019210:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8019214:	e5d9      	b.n	8018dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019216:	9e04      	ldr	r6, [sp, #16]
 8019218:	9a03      	ldr	r2, [sp, #12]
 801921a:	1b89      	subs	r1, r1, r6
 801921c:	b21e      	sxth	r6, r3
 801921e:	b289      	uxth	r1, r1
 8019220:	4296      	cmp	r6, r2
 8019222:	fa0f fc81 	sxth.w	ip, r1
 8019226:	dd25      	ble.n	8019274 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 8019228:	eba3 0309 	sub.w	r3, r3, r9
 801922c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8019230:	9e05      	ldr	r6, [sp, #20]
 8019232:	eba4 0408 	sub.w	r4, r4, r8
 8019236:	b29b      	uxth	r3, r3
 8019238:	eba6 0902 	sub.w	r9, r6, r2
 801923c:	fb0c f404 	mul.w	r4, ip, r4
 8019240:	b218      	sxth	r0, r3
 8019242:	9a00      	ldr	r2, [sp, #0]
 8019244:	fb00 f909 	mul.w	r9, r0, r9
 8019248:	00d2      	lsls	r2, r2, #3
 801924a:	454c      	cmp	r4, r9
 801924c:	db03      	blt.n	8019256 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801924e:	445a      	add	r2, fp
 8019250:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8019254:	e79f      	b.n	8019196 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 8019256:	eb0b 0302 	add.w	r3, fp, r2
 801925a:	9a03      	ldr	r2, [sp, #12]
 801925c:	4429      	add	r1, r5
 801925e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8019262:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8019266:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801926a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801926e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019272:	e5aa      	b.n	8018dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 8019274:	9b06      	ldr	r3, [sp, #24]
 8019276:	9c07      	ldr	r4, [sp, #28]
 8019278:	eba3 020e 	sub.w	r2, r3, lr
 801927c:	2c06      	cmp	r4, #6
 801927e:	b292      	uxth	r2, r2
 8019280:	b213      	sxth	r3, r2
 8019282:	d80d      	bhi.n	80192a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 8019284:	4651      	mov	r1, sl
 8019286:	aa0a      	add	r2, sp, #40	; 0x28
 8019288:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801928c:	6849      	ldr	r1, [r1, #4]
 801928e:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8019292:	9b05      	ldr	r3, [sp, #20]
 8019294:	c203      	stmia	r2!, {r0, r1}
 8019296:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801929a:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801929e:	e759      	b.n	8019154 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 80192a0:	9c00      	ldr	r4, [sp, #0]
 80192a2:	4563      	cmp	r3, ip
 80192a4:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80192a8:	db0d      	blt.n	80192c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 80192aa:	4429      	add	r1, r5
 80192ac:	9a04      	ldr	r2, [sp, #16]
 80192ae:	445c      	add	r4, fp
 80192b0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80192b4:	b289      	uxth	r1, r1
 80192b6:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 80192ba:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80192be:	4411      	add	r1, r2
 80192c0:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 80192c4:	e581      	b.n	8018dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80192c6:	445c      	add	r4, fp
 80192c8:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 80192cc:	e79f      	b.n	801920e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 80192ce:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80192d2:	2f07      	cmp	r7, #7
 80192d4:	d806      	bhi.n	80192e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 80192d6:	ab08      	add	r3, sp, #32
 80192d8:	9801      	ldr	r0, [sp, #4]
 80192da:	e893 0006 	ldmia.w	r3, {r1, r2}
 80192de:	f7ff fd45 	bl	8018d6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80192e2:	e5dc      	b.n	8018e9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 80192e4:	f107 39ff 	add.w	r9, r7, #4294967295
 80192e8:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80192ec:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 80192f0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80192f4:	f04f 35ff 	mov.w	r5, #4294967295
 80192f8:	2400      	movs	r4, #0
 80192fa:	9304      	str	r3, [sp, #16]
 80192fc:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8019300:	f109 32ff 	add.w	r2, r9, #4294967295
 8019304:	9300      	str	r3, [sp, #0]
 8019306:	4690      	mov	r8, r2
 8019308:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801930c:	9303      	str	r3, [sp, #12]
 801930e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019312:	f1b8 3fff 	cmp.w	r8, #4294967295
 8019316:	6818      	ldr	r0, [r3, #0]
 8019318:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801931c:	9206      	str	r2, [sp, #24]
 801931e:	bf16      	itet	ne
 8019320:	9904      	ldrne	r1, [sp, #16]
 8019322:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8019326:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801932a:	9305      	str	r3, [sp, #20]
 801932c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8019330:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8019334:	fb16 f601 	smulbb	r6, r6, r1
 8019338:	6859      	ldr	r1, [r3, #4]
 801933a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801933e:	4671      	mov	r1, lr
 8019340:	a80a      	add	r0, sp, #40	; 0x28
 8019342:	f7fc ff1c 	bl	801617e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019346:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801934a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801934e:	9b03      	ldr	r3, [sp, #12]
 8019350:	9a00      	ldr	r2, [sp, #0]
 8019352:	fb11 f100 	smulbb	r1, r1, r0
 8019356:	2008      	movs	r0, #8
 8019358:	fb02 6603 	mla	r6, r2, r3, r6
 801935c:	1b8e      	subs	r6, r1, r6
 801935e:	fb91 f1f0 	sdiv	r1, r1, r0
 8019362:	42b1      	cmp	r1, r6
 8019364:	dc21      	bgt.n	80193aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8019366:	4556      	cmp	r6, sl
 8019368:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801936c:	da03      	bge.n	8019376 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801936e:	b1e6      	cbz	r6, 80193aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 8019370:	46b2      	mov	sl, r6
 8019372:	4645      	mov	r5, r8
 8019374:	464c      	mov	r4, r9
 8019376:	f108 38ff 	add.w	r8, r8, #4294967295
 801937a:	f118 0f02 	cmn.w	r8, #2
 801937e:	d1c8      	bne.n	8019312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 8019380:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019384:	f1a7 0708 	sub.w	r7, r7, #8
 8019388:	4691      	mov	r9, r2
 801938a:	d1b7      	bne.n	80192fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801938c:	9b01      	ldr	r3, [sp, #4]
 801938e:	b2a6      	uxth	r6, r4
 8019390:	00e4      	lsls	r4, r4, #3
 8019392:	1918      	adds	r0, r3, r4
 8019394:	1c6b      	adds	r3, r5, #1
 8019396:	d10b      	bne.n	80193b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 8019398:	4601      	mov	r1, r0
 801939a:	9802      	ldr	r0, [sp, #8]
 801939c:	f7fc feef 	bl	801617e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80193a0:	4631      	mov	r1, r6
 80193a2:	9801      	ldr	r0, [sp, #4]
 80193a4:	f7ff fcc0 	bl	8018d28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80193a8:	e50f      	b.n	8018dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 80193aa:	4645      	mov	r5, r8
 80193ac:	464c      	mov	r4, r9
 80193ae:	e7ed      	b.n	801938c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 80193b0:	9b01      	ldr	r3, [sp, #4]
 80193b2:	00ed      	lsls	r5, r5, #3
 80193b4:	445c      	add	r4, fp
 80193b6:	1959      	adds	r1, r3, r5
 80193b8:	445d      	add	r5, fp
 80193ba:	f7fc fee0 	bl	801617e <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80193be:	9b02      	ldr	r3, [sp, #8]
 80193c0:	cb03      	ldmia	r3!, {r0, r1}
 80193c2:	9b02      	ldr	r3, [sp, #8]
 80193c4:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 80193c8:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 80193cc:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 80193d0:	6861      	ldr	r1, [r4, #4]
 80193d2:	c303      	stmia	r3!, {r0, r1}
 80193d4:	e7e4      	b.n	80193a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

080193d8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80193d8:	4b1d      	ldr	r3, [pc, #116]	; (8019450 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80193da:	b530      	push	{r4, r5, lr}
 80193dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80193e0:	b085      	sub	sp, #20
 80193e2:	4b1c      	ldr	r3, [pc, #112]	; (8019454 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80193e4:	460c      	mov	r4, r1
 80193e6:	2100      	movs	r1, #0
 80193e8:	4605      	mov	r5, r0
 80193ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193ee:	6820      	ldr	r0, [r4, #0]
 80193f0:	9100      	str	r1, [sp, #0]
 80193f2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80193f6:	ab02      	add	r3, sp, #8
 80193f8:	6861      	ldr	r1, [r4, #4]
 80193fa:	f8ad 2004 	strh.w	r2, [sp, #4]
 80193fe:	c303      	stmia	r3!, {r0, r1}
 8019400:	4669      	mov	r1, sp
 8019402:	a802      	add	r0, sp, #8
 8019404:	f7fa fe48 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 8019408:	ab02      	add	r3, sp, #8
 801940a:	cb03      	ldmia	r3!, {r0, r1}
 801940c:	4b12      	ldr	r3, [pc, #72]	; (8019458 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801940e:	6020      	str	r0, [r4, #0]
 8019410:	6818      	ldr	r0, [r3, #0]
 8019412:	6061      	str	r1, [r4, #4]
 8019414:	b138      	cbz	r0, 8019426 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8019416:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801941a:	b133      	cbz	r3, 801942a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801941c:	6821      	ldr	r1, [r4, #0]
 801941e:	4628      	mov	r0, r5
 8019420:	6862      	ldr	r2, [r4, #4]
 8019422:	f7ff fcc5 	bl	8018db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019426:	b005      	add	sp, #20
 8019428:	bd30      	pop	{r4, r5, pc}
 801942a:	6803      	ldr	r3, [r0, #0]
 801942c:	4621      	mov	r1, r4
 801942e:	689b      	ldr	r3, [r3, #8]
 8019430:	4798      	blx	r3
 8019432:	4b0a      	ldr	r3, [pc, #40]	; (801945c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8019434:	6818      	ldr	r0, [r3, #0]
 8019436:	b118      	cbz	r0, 8019440 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8019438:	6803      	ldr	r3, [r0, #0]
 801943a:	4621      	mov	r1, r4
 801943c:	689b      	ldr	r3, [r3, #8]
 801943e:	4798      	blx	r3
 8019440:	4b07      	ldr	r3, [pc, #28]	; (8019460 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8019442:	4621      	mov	r1, r4
 8019444:	6818      	ldr	r0, [r3, #0]
 8019446:	6803      	ldr	r3, [r0, #0]
 8019448:	69db      	ldr	r3, [r3, #28]
 801944a:	4798      	blx	r3
 801944c:	e7eb      	b.n	8019426 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801944e:	bf00      	nop
 8019450:	2400c898 	.word	0x2400c898
 8019454:	2400c89a 	.word	0x2400c89a
 8019458:	2400c900 	.word	0x2400c900
 801945c:	2400c8fc 	.word	0x2400c8fc
 8019460:	2400c8a4 	.word	0x2400c8a4

08019464 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8019464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019468:	4604      	mov	r4, r0
 801946a:	b09b      	sub	sp, #108	; 0x6c
 801946c:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 8019470:	b129      	cbz	r1, 801947e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8019472:	2300      	movs	r3, #0
 8019474:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019478:	b01b      	add	sp, #108	; 0x6c
 801947a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801947e:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8019482:	4630      	mov	r0, r6
 8019484:	f7fa fe4b 	bl	801411e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019488:	4605      	mov	r5, r0
 801948a:	b940      	cbnz	r0, 801949e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801948c:	4620      	mov	r0, r4
 801948e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019492:	f7ff fc8d 	bl	8018db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019496:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801949a:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801949e:	4ba6      	ldr	r3, [pc, #664]	; (8019738 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	b33b      	cbz	r3, 80194f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80194a4:	4da5      	ldr	r5, [pc, #660]	; (801973c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 80194a6:	4628      	mov	r0, r5
 80194a8:	f7fa fe39 	bl	801411e <_ZNK8touchgfx4Rect7isEmptyEv>
 80194ac:	4606      	mov	r6, r0
 80194ae:	bb08      	cbnz	r0, 80194f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 80194b0:	4628      	mov	r0, r5
 80194b2:	f7ff fa61 	bl	8018978 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80194b6:	6829      	ldr	r1, [r5, #0]
 80194b8:	686a      	ldr	r2, [r5, #4]
 80194ba:	4620      	mov	r0, r4
 80194bc:	f7ff fc78 	bl	8018db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80194c0:	802e      	strh	r6, [r5, #0]
 80194c2:	806e      	strh	r6, [r5, #2]
 80194c4:	80ae      	strh	r6, [r5, #4]
 80194c6:	80ee      	strh	r6, [r5, #6]
 80194c8:	4f9d      	ldr	r7, [pc, #628]	; (8019740 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 80194ca:	a809      	add	r0, sp, #36	; 0x24
 80194cc:	f7ff fbd7 	bl	8018c7e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80194d0:	883d      	ldrh	r5, [r7, #0]
 80194d2:	462e      	mov	r6, r5
 80194d4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80194d8:	42b3      	cmp	r3, r6
 80194da:	d910      	bls.n	80194fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 80194dc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80194e0:	3601      	adds	r6, #1
 80194e2:	a809      	add	r0, sp, #36	; 0x24
 80194e4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80194e8:	b2b6      	uxth	r6, r6
 80194ea:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80194ee:	f7ff fc3d 	bl	8018d6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80194f2:	e7ef      	b.n	80194d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80194f4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d1e5      	bne.n	80194c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 80194fc:	e7bc      	b.n	8019478 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80194fe:	462e      	mov	r6, r5
 8019500:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8019504:	42b3      	cmp	r3, r6
 8019506:	d90b      	bls.n	8019520 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 8019508:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801950c:	3601      	adds	r6, #1
 801950e:	4620      	mov	r0, r4
 8019510:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8019514:	b2b6      	uxth	r6, r6
 8019516:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801951a:	f7ff fc49 	bl	8018db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801951e:	e7ef      	b.n	8019500 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8019520:	4a88      	ldr	r2, [pc, #544]	; (8019744 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8019522:	6813      	ldr	r3, [r2, #0]
 8019524:	4690      	mov	r8, r2
 8019526:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801952a:	2b01      	cmp	r3, #1
 801952c:	f040 8094 	bne.w	8019658 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 8019530:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8019534:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8019538:	f04f 0900 	mov.w	r9, #0
 801953c:	33aa      	adds	r3, #170	; 0xaa
 801953e:	42a8      	cmp	r0, r5
 8019540:	f103 0308 	add.w	r3, r3, #8
 8019544:	dd0a      	ble.n	801955c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 8019546:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801954a:	3501      	adds	r5, #1
 801954c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8019550:	440a      	add	r2, r1
 8019552:	b212      	sxth	r2, r2
 8019554:	4591      	cmp	r9, r2
 8019556:	bfb8      	it	lt
 8019558:	4691      	movlt	r9, r2
 801955a:	e7f0      	b.n	801953e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801955c:	4b7a      	ldr	r3, [pc, #488]	; (8019748 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801955e:	4e7b      	ldr	r6, [pc, #492]	; (801974c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8019560:	881d      	ldrh	r5, [r3, #0]
 8019562:	2300      	movs	r3, #0
 8019564:	2d0f      	cmp	r5, #15
 8019566:	bf8c      	ite	hi
 8019568:	08ed      	lsrhi	r5, r5, #3
 801956a:	2501      	movls	r5, #1
 801956c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8019570:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019574:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8019578:	f8d8 0000 	ldr.w	r0, [r8]
 801957c:	440b      	add	r3, r1
 801957e:	6802      	ldr	r2, [r0, #0]
 8019580:	b21b      	sxth	r3, r3
 8019582:	4599      	cmp	r9, r3
 8019584:	dd4b      	ble.n	801961e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 8019586:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801958a:	4798      	blx	r3
 801958c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019590:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019594:	4413      	add	r3, r2
 8019596:	b21b      	sxth	r3, r3
 8019598:	195a      	adds	r2, r3, r5
 801959a:	4290      	cmp	r0, r2
 801959c:	da07      	bge.n	80195ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801959e:	4581      	cmp	r9, r0
 80195a0:	dd05      	ble.n	80195ae <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 80195a2:	4298      	cmp	r0, r3
 80195a4:	da33      	bge.n	801960e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	dd31      	ble.n	801960e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 80195aa:	4648      	mov	r0, r9
 80195ac:	e004      	b.n	80195b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 80195ae:	4298      	cmp	r0, r3
 80195b0:	dbfb      	blt.n	80195aa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 80195b2:	4548      	cmp	r0, r9
 80195b4:	bfa8      	it	ge
 80195b6:	4648      	movge	r0, r9
 80195b8:	f9b6 2000 	ldrsh.w	r2, [r6]
 80195bc:	2100      	movs	r1, #0
 80195be:	1ac0      	subs	r0, r0, r3
 80195c0:	f8b7 a000 	ldrh.w	sl, [r7]
 80195c4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80195c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80195cc:	f8ad 2018 	strh.w	r2, [sp, #24]
 80195d0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80195d4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80195d8:	4553      	cmp	r3, sl
 80195da:	d9c9      	bls.n	8019570 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 80195dc:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80195e0:	ab07      	add	r3, sp, #28
 80195e2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80195e6:	6851      	ldr	r1, [r2, #4]
 80195e8:	c303      	stmia	r3!, {r0, r1}
 80195ea:	a807      	add	r0, sp, #28
 80195ec:	a905      	add	r1, sp, #20
 80195ee:	f7fa fd53 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 80195f2:	a807      	add	r0, sp, #28
 80195f4:	f7fa fd93 	bl	801411e <_ZNK8touchgfx4Rect7isEmptyEv>
 80195f8:	b920      	cbnz	r0, 8019604 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 80195fa:	6823      	ldr	r3, [r4, #0]
 80195fc:	a907      	add	r1, sp, #28
 80195fe:	4620      	mov	r0, r4
 8019600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019602:	4798      	blx	r3
 8019604:	f10a 0a01 	add.w	sl, sl, #1
 8019608:	fa1f fa8a 	uxth.w	sl, sl
 801960c:	e7e2      	b.n	80195d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801960e:	f8d8 0000 	ldr.w	r0, [r8]
 8019612:	2101      	movs	r1, #1
 8019614:	6803      	ldr	r3, [r0, #0]
 8019616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801961a:	4798      	blx	r3
 801961c:	e7a8      	b.n	8019570 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801961e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8019620:	4798      	blx	r3
 8019622:	4b4b      	ldr	r3, [pc, #300]	; (8019750 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8019624:	781b      	ldrb	r3, [r3, #0]
 8019626:	2b00      	cmp	r3, #0
 8019628:	f43f af26 	beq.w	8019478 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801962c:	2300      	movs	r3, #0
 801962e:	883d      	ldrh	r5, [r7, #0]
 8019630:	34ea      	adds	r4, #234	; 0xea
 8019632:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8019636:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801963a:	42ab      	cmp	r3, r5
 801963c:	f67f af1c 	bls.w	8019478 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019640:	ab1a      	add	r3, sp, #104	; 0x68
 8019642:	4620      	mov	r0, r4
 8019644:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019648:	3501      	adds	r5, #1
 801964a:	3b44      	subs	r3, #68	; 0x44
 801964c:	b2ad      	uxth	r5, r5
 801964e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019652:	f7ff fb8b 	bl	8018d6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8019656:	e7ee      	b.n	8019636 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 8019658:	2b02      	cmp	r3, #2
 801965a:	f040 813d 	bne.w	80198d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801965e:	4b3d      	ldr	r3, [pc, #244]	; (8019754 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 8019660:	781b      	ldrb	r3, [r3, #0]
 8019662:	2b01      	cmp	r3, #1
 8019664:	d02c      	beq.n	80196c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 8019666:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801966a:	883a      	ldrh	r2, [r7, #0]
 801966c:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8019670:	3201      	adds	r2, #1
 8019672:	b292      	uxth	r2, r2
 8019674:	2900      	cmp	r1, #0
 8019676:	d0d4      	beq.n	8019622 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 8019678:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801967c:	4610      	mov	r0, r2
 801967e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8019682:	f04f 0a00 	mov.w	sl, #0
 8019686:	441d      	add	r5, r3
 8019688:	b22d      	sxth	r5, r5
 801968a:	b283      	uxth	r3, r0
 801968c:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8019690:	4299      	cmp	r1, r3
 8019692:	f240 80c3 	bls.w	801981c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 8019696:	4426      	add	r6, r4
 8019698:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801969c:	4684      	mov	ip, r0
 801969e:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 80196a2:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 80196a6:	4573      	cmp	r3, lr
 80196a8:	f340 80a5 	ble.w	80197f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 80196ac:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 80196b0:	4475      	add	r5, lr
 80196b2:	b22d      	sxth	r5, r5
 80196b4:	429d      	cmp	r5, r3
 80196b6:	bfa8      	it	ge
 80196b8:	461d      	movge	r5, r3
 80196ba:	3001      	adds	r0, #1
 80196bc:	46e2      	mov	sl, ip
 80196be:	e7e4      	b.n	801968a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 80196c0:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 80196c4:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 80196c8:	f1bb 0f00 	cmp.w	fp, #0
 80196cc:	d0a9      	beq.n	8019622 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80196ce:	883b      	ldrh	r3, [r7, #0]
 80196d0:	2600      	movs	r6, #0
 80196d2:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 80196d6:	3301      	adds	r3, #1
 80196d8:	b29b      	uxth	r3, r3
 80196da:	b299      	uxth	r1, r3
 80196dc:	00f5      	lsls	r5, r6, #3
 80196de:	458b      	cmp	fp, r1
 80196e0:	d93a      	bls.n	8019758 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80196e2:	4425      	add	r5, r4
 80196e4:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80196e8:	469c      	mov	ip, r3
 80196ea:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 80196ee:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 80196f2:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 80196f6:	4408      	add	r0, r1
 80196f8:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 80196fc:	4471      	add	r1, lr
 80196fe:	b200      	sxth	r0, r0
 8019700:	b209      	sxth	r1, r1
 8019702:	4288      	cmp	r0, r1
 8019704:	da06      	bge.n	8019714 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 8019706:	4586      	cmp	lr, r0
 8019708:	4672      	mov	r2, lr
 801970a:	bfb8      	it	lt
 801970c:	4602      	movlt	r2, r0
 801970e:	3301      	adds	r3, #1
 8019710:	4666      	mov	r6, ip
 8019712:	e7e2      	b.n	80196da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8019714:	d10b      	bne.n	801972e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 8019716:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801971a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801971e:	458c      	cmp	ip, r1
 8019720:	bfb4      	ite	lt
 8019722:	469c      	movlt	ip, r3
 8019724:	46b4      	movge	ip, r6
 8019726:	4572      	cmp	r2, lr
 8019728:	bfb8      	it	lt
 801972a:	4672      	movlt	r2, lr
 801972c:	e7ef      	b.n	801970e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801972e:	428a      	cmp	r2, r1
 8019730:	46b4      	mov	ip, r6
 8019732:	bfb8      	it	lt
 8019734:	460a      	movlt	r2, r1
 8019736:	e7ea      	b.n	801970e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 8019738:	2400c8fc 	.word	0x2400c8fc
 801973c:	2400c908 	.word	0x2400c908
 8019740:	24000050 	.word	0x24000050
 8019744:	2400c8a4 	.word	0x2400c8a4
 8019748:	2400c89a 	.word	0x2400c89a
 801974c:	2400c898 	.word	0x2400c898
 8019750:	2400c8a2 	.word	0x2400c8a2
 8019754:	2400c89c 	.word	0x2400c89c
 8019758:	1961      	adds	r1, r4, r5
 801975a:	ab07      	add	r3, sp, #28
 801975c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8019760:	6849      	ldr	r1, [r1, #4]
 8019762:	c303      	stmia	r3!, {r0, r1}
 8019764:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019768:	a807      	add	r0, sp, #28
 801976a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801976e:	2b13      	cmp	r3, #19
 8019770:	440b      	add	r3, r1
 8019772:	bfd8      	it	le
 8019774:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8019778:	1a9b      	subs	r3, r3, r2
 801977a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801977e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019782:	f7ff f913 	bl	80189ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019786:	a807      	add	r0, sp, #28
 8019788:	f7fa fcc9 	bl	801411e <_ZNK8touchgfx4Rect7isEmptyEv>
 801978c:	2800      	cmp	r0, #0
 801978e:	d199      	bne.n	80196c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 8019790:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8019794:	4425      	add	r5, r4
 8019796:	f8d8 0000 	ldr.w	r0, [r8]
 801979a:	f1bc 0f14 	cmp.w	ip, #20
 801979e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80197a2:	f8d0 e000 	ldr.w	lr, [r0]
 80197a6:	bfa8      	it	ge
 80197a8:	f04f 0c14 	movge.w	ip, #20
 80197ac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80197b0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80197b4:	fa1f fc8c 	uxth.w	ip, ip
 80197b8:	f8cd c000 	str.w	ip, [sp]
 80197bc:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 80197c0:	47d0      	blx	sl
 80197c2:	4682      	mov	sl, r0
 80197c4:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80197c8:	a807      	add	r0, sp, #28
 80197ca:	f7ff f8d5 	bl	8018978 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80197ce:	6823      	ldr	r3, [r4, #0]
 80197d0:	4620      	mov	r0, r4
 80197d2:	a907      	add	r1, sp, #28
 80197d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197d6:	4798      	blx	r3
 80197d8:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80197dc:	eba0 000a 	sub.w	r0, r0, sl
 80197e0:	b200      	sxth	r0, r0
 80197e2:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 80197e6:	2800      	cmp	r0, #0
 80197e8:	f47f af6c 	bne.w	80196c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80197ec:	b2b1      	uxth	r1, r6
 80197ee:	4648      	mov	r0, r9
 80197f0:	f7ff fa9a 	bl	8018d28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80197f4:	e766      	b.n	80196c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 80197f6:	d10c      	bne.n	8019812 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 80197f8:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 80197fc:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 8019800:	45b4      	cmp	ip, r6
 8019802:	bfb4      	ite	lt
 8019804:	4684      	movlt	ip, r0
 8019806:	46d4      	movge	ip, sl
 8019808:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801980c:	4433      	add	r3, r6
 801980e:	b21b      	sxth	r3, r3
 8019810:	e750      	b.n	80196b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 8019812:	4575      	cmp	r5, lr
 8019814:	46d4      	mov	ip, sl
 8019816:	bfa8      	it	ge
 8019818:	4675      	movge	r5, lr
 801981a:	e74e      	b.n	80196ba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801981c:	eb0b 0006 	add.w	r0, fp, r6
 8019820:	4426      	add	r6, r4
 8019822:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 8019826:	f1b9 0f13 	cmp.w	r9, #19
 801982a:	bfdc      	itt	le
 801982c:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 8019830:	444d      	addle	r5, r9
 8019832:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8019836:	bfd8      	it	le
 8019838:	b22d      	sxthle	r5, r5
 801983a:	f7fa fc70 	bl	801411e <_ZNK8touchgfx4Rect7isEmptyEv>
 801983e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8019842:	2800      	cmp	r0, #0
 8019844:	f47f af16 	bne.w	8019674 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 8019848:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801984c:	fa1f f989 	uxth.w	r9, r9
 8019850:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019854:	eba5 050c 	sub.w	r5, r5, ip
 8019858:	fa1f f28c 	uxth.w	r2, ip
 801985c:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 8019860:	eb02 0009 	add.w	r0, r2, r9
 8019864:	2d14      	cmp	r5, #20
 8019866:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801986a:	bfa8      	it	ge
 801986c:	2514      	movge	r5, #20
 801986e:	b200      	sxth	r0, r0
 8019870:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019874:	b289      	uxth	r1, r1
 8019876:	fa1f fe85 	uxth.w	lr, r5
 801987a:	eba0 000c 	sub.w	r0, r0, ip
 801987e:	f8ad c01e 	strh.w	ip, [sp, #30]
 8019882:	4586      	cmp	lr, r0
 8019884:	f8d8 0000 	ldr.w	r0, [r8]
 8019888:	f8ad 3020 	strh.w	r3, [sp, #32]
 801988c:	b29b      	uxth	r3, r3
 801988e:	bfb8      	it	lt
 8019890:	46f1      	movlt	r9, lr
 8019892:	6805      	ldr	r5, [r0, #0]
 8019894:	f8cd 9000 	str.w	r9, [sp]
 8019898:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801989c:	47a8      	blx	r5
 801989e:	6823      	ldr	r3, [r4, #0]
 80198a0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80198a4:	a907      	add	r1, sp, #28
 80198a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198a8:	4620      	mov	r0, r4
 80198aa:	4798      	blx	r3
 80198ac:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80198b0:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 80198b4:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 80198b8:	1a5b      	subs	r3, r3, r1
 80198ba:	440a      	add	r2, r1
 80198bc:	b21b      	sxth	r3, r3
 80198be:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 80198c2:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	f47f aecf 	bne.w	801966a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 80198cc:	fa1f f18a 	uxth.w	r1, sl
 80198d0:	4658      	mov	r0, fp
 80198d2:	f7ff fa29 	bl	8018d28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80198d6:	e6c8      	b.n	801966a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 80198d8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80198dc:	42ab      	cmp	r3, r5
 80198de:	f67f aea0 	bls.w	8019622 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 80198e2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80198e6:	ab07      	add	r3, sp, #28
 80198e8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80198ec:	6851      	ldr	r1, [r2, #4]
 80198ee:	c303      	stmia	r3!, {r0, r1}
 80198f0:	a807      	add	r0, sp, #28
 80198f2:	f7fa fc14 	bl	801411e <_ZNK8touchgfx4Rect7isEmptyEv>
 80198f6:	b920      	cbnz	r0, 8019902 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 80198f8:	6823      	ldr	r3, [r4, #0]
 80198fa:	a907      	add	r1, sp, #28
 80198fc:	4620      	mov	r0, r4
 80198fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019900:	4798      	blx	r3
 8019902:	3501      	adds	r5, #1
 8019904:	b2ad      	uxth	r5, r5
 8019906:	e7e7      	b.n	80198d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

08019908 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019908:	4b03      	ldr	r3, [pc, #12]	; (8019918 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801990a:	2200      	movs	r2, #0
 801990c:	801a      	strh	r2, [r3, #0]
 801990e:	805a      	strh	r2, [r3, #2]
 8019910:	809a      	strh	r2, [r3, #4]
 8019912:	80da      	strh	r2, [r3, #6]
 8019914:	4770      	bx	lr
 8019916:	bf00      	nop
 8019918:	2400c908 	.word	0x2400c908

0801991c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019920:	b09d      	sub	sp, #116	; 0x74
 8019922:	4606      	mov	r6, r0
 8019924:	4614      	mov	r4, r2
 8019926:	468a      	mov	sl, r1
 8019928:	a803      	add	r0, sp, #12
 801992a:	461d      	mov	r5, r3
 801992c:	f000 fe43 	bl	801a5b6 <_ZN8touchgfx12TextProviderC1Ev>
 8019930:	6833      	ldr	r3, [r6, #0]
 8019932:	4630      	mov	r0, r6
 8019934:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8019938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801993a:	4798      	blx	r3
 801993c:	6833      	ldr	r3, [r6, #0]
 801993e:	4607      	mov	r7, r0
 8019940:	4630      	mov	r0, r6
 8019942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019944:	4798      	blx	r3
 8019946:	462a      	mov	r2, r5
 8019948:	2500      	movs	r5, #0
 801994a:	4621      	mov	r1, r4
 801994c:	9000      	str	r0, [sp, #0]
 801994e:	463b      	mov	r3, r7
 8019950:	462c      	mov	r4, r5
 8019952:	46a9      	mov	r9, r5
 8019954:	46a8      	mov	r8, r5
 8019956:	a803      	add	r0, sp, #12
 8019958:	f000 fe80 	bl	801a65c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801995c:	2300      	movs	r3, #0
 801995e:	9302      	str	r3, [sp, #8]
 8019960:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019964:	429c      	cmp	r4, r3
 8019966:	d002      	beq.n	801996e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8019968:	455c      	cmp	r4, fp
 801996a:	bf18      	it	ne
 801996c:	4625      	movne	r5, r4
 801996e:	ab02      	add	r3, sp, #8
 8019970:	4632      	mov	r2, r6
 8019972:	4651      	mov	r1, sl
 8019974:	a803      	add	r0, sp, #12
 8019976:	f001 f971 	bl	801ac5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801997a:	4604      	mov	r4, r0
 801997c:	b108      	cbz	r0, 8019982 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801997e:	280a      	cmp	r0, #10
 8019980:	d10a      	bne.n	8019998 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8019982:	45c1      	cmp	r9, r8
 8019984:	bf38      	it	cc
 8019986:	46c1      	movcc	r9, r8
 8019988:	f04f 0800 	mov.w	r8, #0
 801998c:	2c00      	cmp	r4, #0
 801998e:	d1e5      	bne.n	801995c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019990:	4648      	mov	r0, r9
 8019992:	b01d      	add	sp, #116	; 0x74
 8019994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019998:	9a02      	ldr	r2, [sp, #8]
 801999a:	2a00      	cmp	r2, #0
 801999c:	d0de      	beq.n	801995c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801999e:	7b57      	ldrb	r7, [r2, #13]
 80199a0:	4629      	mov	r1, r5
 80199a2:	6833      	ldr	r3, [r6, #0]
 80199a4:	007f      	lsls	r7, r7, #1
 80199a6:	8894      	ldrh	r4, [r2, #4]
 80199a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199aa:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80199ae:	7a97      	ldrb	r7, [r2, #10]
 80199b0:	4307      	orrs	r7, r0
 80199b2:	4630      	mov	r0, r6
 80199b4:	4798      	blx	r3
 80199b6:	4438      	add	r0, r7
 80199b8:	4480      	add	r8, r0
 80199ba:	fa1f f888 	uxth.w	r8, r8
 80199be:	e7e5      	b.n	801998c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080199c0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80199c0:	b508      	push	{r3, lr}
 80199c2:	6803      	ldr	r3, [r0, #0]
 80199c4:	68db      	ldr	r3, [r3, #12]
 80199c6:	4798      	blx	r3
 80199c8:	b128      	cbz	r0, 80199d6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80199ca:	7b43      	ldrb	r3, [r0, #13]
 80199cc:	7a80      	ldrb	r0, [r0, #10]
 80199ce:	005b      	lsls	r3, r3, #1
 80199d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80199d4:	4318      	orrs	r0, r3
 80199d6:	bd08      	pop	{r3, pc}

080199d8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80199d8:	b40e      	push	{r1, r2, r3}
 80199da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199dc:	b09e      	sub	sp, #120	; 0x78
 80199de:	4605      	mov	r5, r0
 80199e0:	ab23      	add	r3, sp, #140	; 0x8c
 80199e2:	a805      	add	r0, sp, #20
 80199e4:	f853 4b04 	ldr.w	r4, [r3], #4
 80199e8:	9303      	str	r3, [sp, #12]
 80199ea:	f000 fde4 	bl	801a5b6 <_ZN8touchgfx12TextProviderC1Ev>
 80199ee:	682b      	ldr	r3, [r5, #0]
 80199f0:	4628      	mov	r0, r5
 80199f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199f4:	4798      	blx	r3
 80199f6:	682b      	ldr	r3, [r5, #0]
 80199f8:	4606      	mov	r6, r0
 80199fa:	4628      	mov	r0, r5
 80199fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80199fe:	4798      	blx	r3
 8019a00:	4633      	mov	r3, r6
 8019a02:	4621      	mov	r1, r4
 8019a04:	ae1e      	add	r6, sp, #120	; 0x78
 8019a06:	2400      	movs	r4, #0
 8019a08:	9000      	str	r0, [sp, #0]
 8019a0a:	9a03      	ldr	r2, [sp, #12]
 8019a0c:	a805      	add	r0, sp, #20
 8019a0e:	f000 fe25 	bl	801a65c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019a12:	f846 4d68 	str.w	r4, [r6, #-104]!
 8019a16:	462a      	mov	r2, r5
 8019a18:	4633      	mov	r3, r6
 8019a1a:	4621      	mov	r1, r4
 8019a1c:	a805      	add	r0, sp, #20
 8019a1e:	f001 f91d 	bl	801ac5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a22:	b300      	cbz	r0, 8019a66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8019a24:	280a      	cmp	r0, #10
 8019a26:	d01a      	beq.n	8019a5e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019a28:	9f04      	ldr	r7, [sp, #16]
 8019a2a:	b1c7      	cbz	r7, 8019a5e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019a2c:	7b78      	ldrb	r0, [r7, #13]
 8019a2e:	7a3b      	ldrb	r3, [r7, #8]
 8019a30:	00c1      	lsls	r1, r0, #3
 8019a32:	88aa      	ldrh	r2, [r5, #4]
 8019a34:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019a38:	4319      	orrs	r1, r3
 8019a3a:	0643      	lsls	r3, r0, #25
 8019a3c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019a40:	bf48      	it	mi
 8019a42:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8019a46:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019a4a:	bf48      	it	mi
 8019a4c:	b219      	sxthmi	r1, r3
 8019a4e:	79fb      	ldrb	r3, [r7, #7]
 8019a50:	4303      	orrs	r3, r0
 8019a52:	4413      	add	r3, r2
 8019a54:	1a5b      	subs	r3, r3, r1
 8019a56:	b29b      	uxth	r3, r3
 8019a58:	42a3      	cmp	r3, r4
 8019a5a:	bfc8      	it	gt
 8019a5c:	b21c      	sxthgt	r4, r3
 8019a5e:	4633      	mov	r3, r6
 8019a60:	462a      	mov	r2, r5
 8019a62:	2100      	movs	r1, #0
 8019a64:	e7da      	b.n	8019a1c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8019a66:	b2a0      	uxth	r0, r4
 8019a68:	b01e      	add	sp, #120	; 0x78
 8019a6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019a6e:	b003      	add	sp, #12
 8019a70:	4770      	bx	lr

08019a72 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019a72:	b40e      	push	{r1, r2, r3}
 8019a74:	b570      	push	{r4, r5, r6, lr}
 8019a76:	b09d      	sub	sp, #116	; 0x74
 8019a78:	4604      	mov	r4, r0
 8019a7a:	ab21      	add	r3, sp, #132	; 0x84
 8019a7c:	a803      	add	r0, sp, #12
 8019a7e:	f853 5b04 	ldr.w	r5, [r3], #4
 8019a82:	9302      	str	r3, [sp, #8]
 8019a84:	f000 fd97 	bl	801a5b6 <_ZN8touchgfx12TextProviderC1Ev>
 8019a88:	6823      	ldr	r3, [r4, #0]
 8019a8a:	4620      	mov	r0, r4
 8019a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a8e:	4798      	blx	r3
 8019a90:	6823      	ldr	r3, [r4, #0]
 8019a92:	4606      	mov	r6, r0
 8019a94:	4620      	mov	r0, r4
 8019a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019a98:	2401      	movs	r4, #1
 8019a9a:	4798      	blx	r3
 8019a9c:	4633      	mov	r3, r6
 8019a9e:	9000      	str	r0, [sp, #0]
 8019aa0:	4629      	mov	r1, r5
 8019aa2:	9a02      	ldr	r2, [sp, #8]
 8019aa4:	a803      	add	r0, sp, #12
 8019aa6:	f000 fdd9 	bl	801a65c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019aaa:	a803      	add	r0, sp, #12
 8019aac:	f001 f9d0 	bl	801ae50 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019ab0:	b2a3      	uxth	r3, r4
 8019ab2:	b138      	cbz	r0, 8019ac4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8019ab4:	280a      	cmp	r0, #10
 8019ab6:	a803      	add	r0, sp, #12
 8019ab8:	bf04      	itt	eq
 8019aba:	3301      	addeq	r3, #1
 8019abc:	b21c      	sxtheq	r4, r3
 8019abe:	f001 f9c7 	bl	801ae50 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019ac2:	e7f5      	b.n	8019ab0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	b01d      	add	sp, #116	; 0x74
 8019ac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019acc:	b003      	add	sp, #12
 8019ace:	4770      	bx	lr

08019ad0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019ad0:	b40e      	push	{r1, r2, r3}
 8019ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ad4:	b09e      	sub	sp, #120	; 0x78
 8019ad6:	4604      	mov	r4, r0
 8019ad8:	ab23      	add	r3, sp, #140	; 0x8c
 8019ada:	a805      	add	r0, sp, #20
 8019adc:	f853 5b04 	ldr.w	r5, [r3], #4
 8019ae0:	9303      	str	r3, [sp, #12]
 8019ae2:	f000 fd68 	bl	801a5b6 <_ZN8touchgfx12TextProviderC1Ev>
 8019ae6:	6823      	ldr	r3, [r4, #0]
 8019ae8:	4620      	mov	r0, r4
 8019aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019aec:	4798      	blx	r3
 8019aee:	6823      	ldr	r3, [r4, #0]
 8019af0:	4606      	mov	r6, r0
 8019af2:	4620      	mov	r0, r4
 8019af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019af6:	4798      	blx	r3
 8019af8:	4633      	mov	r3, r6
 8019afa:	4629      	mov	r1, r5
 8019afc:	9000      	str	r0, [sp, #0]
 8019afe:	9a03      	ldr	r2, [sp, #12]
 8019b00:	a805      	add	r0, sp, #20
 8019b02:	f000 fdab 	bl	801a65c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019b06:	ad1e      	add	r5, sp, #120	; 0x78
 8019b08:	2100      	movs	r1, #0
 8019b0a:	26ff      	movs	r6, #255	; 0xff
 8019b0c:	4622      	mov	r2, r4
 8019b0e:	a805      	add	r0, sp, #20
 8019b10:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019b14:	462b      	mov	r3, r5
 8019b16:	f001 f8a1 	bl	801ac5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b1a:	b1d8      	cbz	r0, 8019b54 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8019b1c:	280a      	cmp	r0, #10
 8019b1e:	d012      	beq.n	8019b46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8019b20:	9804      	ldr	r0, [sp, #16]
 8019b22:	b180      	cbz	r0, 8019b46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8019b24:	7b47      	ldrb	r7, [r0, #13]
 8019b26:	7922      	ldrb	r2, [r4, #4]
 8019b28:	00fb      	lsls	r3, r7, #3
 8019b2a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019b2e:	7a03      	ldrb	r3, [r0, #8]
 8019b30:	430b      	orrs	r3, r1
 8019b32:	0679      	lsls	r1, r7, #25
 8019b34:	bf44      	itt	mi
 8019b36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019b3a:	b21b      	sxthmi	r3, r3
 8019b3c:	1ad3      	subs	r3, r2, r3
 8019b3e:	b2db      	uxtb	r3, r3
 8019b40:	429e      	cmp	r6, r3
 8019b42:	bf28      	it	cs
 8019b44:	461e      	movcs	r6, r3
 8019b46:	462b      	mov	r3, r5
 8019b48:	4622      	mov	r2, r4
 8019b4a:	2100      	movs	r1, #0
 8019b4c:	a805      	add	r0, sp, #20
 8019b4e:	f001 f885 	bl	801ac5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b52:	e7e2      	b.n	8019b1a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8019b54:	4630      	mov	r0, r6
 8019b56:	b01e      	add	sp, #120	; 0x78
 8019b58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019b5c:	b003      	add	sp, #12
 8019b5e:	4770      	bx	lr

08019b60 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019b60:	b513      	push	{r0, r1, r4, lr}
 8019b62:	6803      	ldr	r3, [r0, #0]
 8019b64:	2400      	movs	r4, #0
 8019b66:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019b6a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019b6e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019b72:	4669      	mov	r1, sp
 8019b74:	691b      	ldr	r3, [r3, #16]
 8019b76:	9400      	str	r4, [sp, #0]
 8019b78:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019b7c:	4798      	blx	r3
 8019b7e:	b002      	add	sp, #8
 8019b80:	bd10      	pop	{r4, pc}

08019b82 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019b82:	b538      	push	{r3, r4, r5, lr}
 8019b84:	680b      	ldr	r3, [r1, #0]
 8019b86:	460c      	mov	r4, r1
 8019b88:	4605      	mov	r5, r0
 8019b8a:	68db      	ldr	r3, [r3, #12]
 8019b8c:	4798      	blx	r3
 8019b8e:	6823      	ldr	r3, [r4, #0]
 8019b90:	4620      	mov	r0, r4
 8019b92:	4629      	mov	r1, r5
 8019b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b96:	4798      	blx	r3
 8019b98:	4628      	mov	r0, r5
 8019b9a:	bd38      	pop	{r3, r4, r5, pc}

08019b9c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019b9c:	b410      	push	{r4}
 8019b9e:	880a      	ldrh	r2, [r1, #0]
 8019ba0:	8884      	ldrh	r4, [r0, #4]
 8019ba2:	4422      	add	r2, r4
 8019ba4:	800a      	strh	r2, [r1, #0]
 8019ba6:	884a      	ldrh	r2, [r1, #2]
 8019ba8:	88c4      	ldrh	r4, [r0, #6]
 8019baa:	4422      	add	r2, r4
 8019bac:	804a      	strh	r2, [r1, #2]
 8019bae:	6940      	ldr	r0, [r0, #20]
 8019bb0:	b120      	cbz	r0, 8019bbc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019bb2:	6803      	ldr	r3, [r0, #0]
 8019bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019bba:	4718      	bx	r3
 8019bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bc0:	4770      	bx	lr

08019bc2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019bc2:	b570      	push	{r4, r5, r6, lr}
 8019bc4:	8882      	ldrh	r2, [r0, #4]
 8019bc6:	460c      	mov	r4, r1
 8019bc8:	880b      	ldrh	r3, [r1, #0]
 8019bca:	4605      	mov	r5, r0
 8019bcc:	4413      	add	r3, r2
 8019bce:	800b      	strh	r3, [r1, #0]
 8019bd0:	884b      	ldrh	r3, [r1, #2]
 8019bd2:	88c2      	ldrh	r2, [r0, #6]
 8019bd4:	4413      	add	r3, r2
 8019bd6:	804b      	strh	r3, [r1, #2]
 8019bd8:	1d01      	adds	r1, r0, #4
 8019bda:	4620      	mov	r0, r4
 8019bdc:	f7fa fa5c 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 8019be0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	dd0b      	ble.n	8019c00 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019be8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	dd07      	ble.n	8019c00 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019bf0:	6968      	ldr	r0, [r5, #20]
 8019bf2:	b128      	cbz	r0, 8019c00 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019bf4:	6803      	ldr	r3, [r0, #0]
 8019bf6:	4621      	mov	r1, r4
 8019bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019bfe:	4718      	bx	r3
 8019c00:	bd70      	pop	{r4, r5, r6, pc}
	...

08019c04 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019c04:	b570      	push	{r4, r5, r6, lr}
 8019c06:	8882      	ldrh	r2, [r0, #4]
 8019c08:	460c      	mov	r4, r1
 8019c0a:	880b      	ldrh	r3, [r1, #0]
 8019c0c:	4605      	mov	r5, r0
 8019c0e:	4413      	add	r3, r2
 8019c10:	800b      	strh	r3, [r1, #0]
 8019c12:	884b      	ldrh	r3, [r1, #2]
 8019c14:	88c2      	ldrh	r2, [r0, #6]
 8019c16:	4413      	add	r3, r2
 8019c18:	804b      	strh	r3, [r1, #2]
 8019c1a:	1d01      	adds	r1, r0, #4
 8019c1c:	4620      	mov	r0, r4
 8019c1e:	f7fa fa3b 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 8019c22:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	dd15      	ble.n	8019c56 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8019c2a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	dd11      	ble.n	8019c56 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8019c32:	6968      	ldr	r0, [r5, #20]
 8019c34:	b128      	cbz	r0, 8019c42 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019c36:	6803      	ldr	r3, [r0, #0]
 8019c38:	691b      	ldr	r3, [r3, #16]
 8019c3a:	4621      	mov	r1, r4
 8019c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c40:	4718      	bx	r3
 8019c42:	4b05      	ldr	r3, [pc, #20]	; (8019c58 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	3304      	adds	r3, #4
 8019c48:	429d      	cmp	r5, r3
 8019c4a:	d104      	bne.n	8019c56 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 8019c4c:	f7ff f806 	bl	8018c5c <_ZN8touchgfx11Application11getInstanceEv>
 8019c50:	6803      	ldr	r3, [r0, #0]
 8019c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c54:	e7f1      	b.n	8019c3a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 8019c56:	bd70      	pop	{r4, r5, r6, pc}
 8019c58:	2400c900 	.word	0x2400c900

08019c5c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019c5c:	b570      	push	{r4, r5, r6, lr}
 8019c5e:	4604      	mov	r4, r0
 8019c60:	4616      	mov	r6, r2
 8019c62:	460d      	mov	r5, r1
 8019c64:	b901      	cbnz	r1, 8019c68 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019c66:	b192      	cbz	r2, 8019c8e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8019c68:	6823      	ldr	r3, [r4, #0]
 8019c6a:	4620      	mov	r0, r4
 8019c6c:	695b      	ldr	r3, [r3, #20]
 8019c6e:	4798      	blx	r3
 8019c70:	88e2      	ldrh	r2, [r4, #6]
 8019c72:	88a1      	ldrh	r1, [r4, #4]
 8019c74:	4620      	mov	r0, r4
 8019c76:	4432      	add	r2, r6
 8019c78:	4429      	add	r1, r5
 8019c7a:	b212      	sxth	r2, r2
 8019c7c:	b209      	sxth	r1, r1
 8019c7e:	f7e9 ff6a 	bl	8003b56 <_ZN8touchgfx8Drawable5setXYEss>
 8019c82:	6823      	ldr	r3, [r4, #0]
 8019c84:	4620      	mov	r0, r4
 8019c86:	695b      	ldr	r3, [r3, #20]
 8019c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c8c:	4718      	bx	r3
 8019c8e:	bd70      	pop	{r4, r5, r6, pc}

08019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019c90:	b510      	push	{r4, lr}
 8019c92:	2300      	movs	r3, #0
 8019c94:	4604      	mov	r4, r0
 8019c96:	4608      	mov	r0, r1
 8019c98:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019c9c:	8023      	strh	r3, [r4, #0]
 8019c9e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019ca2:	8063      	strh	r3, [r4, #2]
 8019ca4:	6803      	ldr	r3, [r0, #0]
 8019ca6:	80a1      	strh	r1, [r4, #4]
 8019ca8:	4621      	mov	r1, r4
 8019caa:	80e2      	strh	r2, [r4, #6]
 8019cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cae:	4798      	blx	r3
 8019cb0:	4620      	mov	r0, r4
 8019cb2:	bd10      	pop	{r4, pc}

08019cb4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019cb4:	b530      	push	{r4, r5, lr}
 8019cb6:	8083      	strh	r3, [r0, #4]
 8019cb8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8019cbc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019cc0:	7183      	strb	r3, [r0, #6]
 8019cc2:	79c3      	ldrb	r3, [r0, #7]
 8019cc4:	6101      	str	r1, [r0, #16]
 8019cc6:	f365 0306 	bfi	r3, r5, #0, #7
 8019cca:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019cce:	8282      	strh	r2, [r0, #20]
 8019cd0:	f365 13c7 	bfi	r3, r5, #7, #1
 8019cd4:	71c3      	strb	r3, [r0, #7]
 8019cd6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019cda:	7203      	strb	r3, [r0, #8]
 8019cdc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019ce0:	7243      	strb	r3, [r0, #9]
 8019ce2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019ce6:	8143      	strh	r3, [r0, #10]
 8019ce8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019cec:	8183      	strh	r3, [r0, #12]
 8019cee:	4b01      	ldr	r3, [pc, #4]	; (8019cf4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019cf0:	6003      	str	r3, [r0, #0]
 8019cf2:	bd30      	pop	{r4, r5, pc}
 8019cf4:	0802a44c 	.word	0x0802a44c

08019cf8 <_ZNK8touchgfx9ConstFont4findEt>:
 8019cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cfa:	6904      	ldr	r4, [r0, #16]
 8019cfc:	b3bc      	cbz	r4, 8019d6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019cfe:	88a3      	ldrh	r3, [r4, #4]
 8019d00:	8a82      	ldrh	r2, [r0, #20]
 8019d02:	1acb      	subs	r3, r1, r3
 8019d04:	f102 32ff 	add.w	r2, r2, #4294967295
 8019d08:	d431      	bmi.n	8019d6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d0a:	4293      	cmp	r3, r2
 8019d0c:	dd0c      	ble.n	8019d28 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019d0e:	230e      	movs	r3, #14
 8019d10:	fb03 4302 	mla	r3, r3, r2, r4
 8019d14:	889b      	ldrh	r3, [r3, #4]
 8019d16:	1a5b      	subs	r3, r3, r1
 8019d18:	1ad3      	subs	r3, r2, r3
 8019d1a:	429a      	cmp	r2, r3
 8019d1c:	db27      	blt.n	8019d6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	bfbc      	itt	lt
 8019d22:	2302      	movlt	r3, #2
 8019d24:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019d28:	2500      	movs	r5, #0
 8019d2a:	260e      	movs	r6, #14
 8019d2c:	4295      	cmp	r5, r2
 8019d2e:	dc1e      	bgt.n	8019d6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d30:	fb06 4003 	mla	r0, r6, r3, r4
 8019d34:	8887      	ldrh	r7, [r0, #4]
 8019d36:	42b9      	cmp	r1, r7
 8019d38:	d01a      	beq.n	8019d70 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8019d3a:	d20d      	bcs.n	8019d58 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8019d3c:	1e5a      	subs	r2, r3, #1
 8019d3e:	4295      	cmp	r5, r2
 8019d40:	dc15      	bgt.n	8019d6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d42:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019d46:	1a5b      	subs	r3, r3, r1
 8019d48:	1ad3      	subs	r3, r2, r3
 8019d4a:	429a      	cmp	r2, r3
 8019d4c:	db0f      	blt.n	8019d6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d4e:	429d      	cmp	r5, r3
 8019d50:	ddec      	ble.n	8019d2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019d52:	1953      	adds	r3, r2, r5
 8019d54:	105b      	asrs	r3, r3, #1
 8019d56:	e7e9      	b.n	8019d2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019d58:	1c5d      	adds	r5, r3, #1
 8019d5a:	42aa      	cmp	r2, r5
 8019d5c:	db07      	blt.n	8019d6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d5e:	8a43      	ldrh	r3, [r0, #18]
 8019d60:	1acb      	subs	r3, r1, r3
 8019d62:	442b      	add	r3, r5
 8019d64:	429d      	cmp	r5, r3
 8019d66:	dc02      	bgt.n	8019d6e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d68:	429a      	cmp	r2, r3
 8019d6a:	dadf      	bge.n	8019d2c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019d6c:	e7f1      	b.n	8019d52 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8019d6e:	2000      	movs	r0, #0
 8019d70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019d72 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d74:	4604      	mov	r4, r0
 8019d76:	4617      	mov	r7, r2
 8019d78:	461e      	mov	r6, r3
 8019d7a:	b911      	cbnz	r1, 8019d82 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019d7c:	2500      	movs	r5, #0
 8019d7e:	4628      	mov	r0, r5
 8019d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d82:	290a      	cmp	r1, #10
 8019d84:	d0fa      	beq.n	8019d7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019d86:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019d8a:	4291      	cmp	r1, r2
 8019d8c:	d0f6      	beq.n	8019d7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019d8e:	f242 020b 	movw	r2, #8203	; 0x200b
 8019d92:	4291      	cmp	r1, r2
 8019d94:	d0f2      	beq.n	8019d7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019d96:	f7ff ffaf 	bl	8019cf8 <_ZNK8touchgfx9ConstFont4findEt>
 8019d9a:	4605      	mov	r5, r0
 8019d9c:	b950      	cbnz	r0, 8019db4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019d9e:	6823      	ldr	r3, [r4, #0]
 8019da0:	4620      	mov	r0, r4
 8019da2:	691b      	ldr	r3, [r3, #16]
 8019da4:	4798      	blx	r3
 8019da6:	4601      	mov	r1, r0
 8019da8:	4620      	mov	r0, r4
 8019daa:	f7ff ffa5 	bl	8019cf8 <_ZNK8touchgfx9ConstFont4findEt>
 8019dae:	4605      	mov	r5, r0
 8019db0:	2800      	cmp	r0, #0
 8019db2:	d0e3      	beq.n	8019d7c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019db4:	6823      	ldr	r3, [r4, #0]
 8019db6:	4629      	mov	r1, r5
 8019db8:	4620      	mov	r0, r4
 8019dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019dbc:	4798      	blx	r3
 8019dbe:	6038      	str	r0, [r7, #0]
 8019dc0:	6823      	ldr	r3, [r4, #0]
 8019dc2:	4620      	mov	r0, r4
 8019dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019dc6:	4798      	blx	r3
 8019dc8:	7030      	strb	r0, [r6, #0]
 8019dca:	e7d8      	b.n	8019d7e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019dcc <_ZN8touchgfx6memsetEPvhm>:
 8019dcc:	4402      	add	r2, r0
 8019dce:	4290      	cmp	r0, r2
 8019dd0:	d002      	beq.n	8019dd8 <_ZN8touchgfx6memsetEPvhm+0xc>
 8019dd2:	f800 1b01 	strb.w	r1, [r0], #1
 8019dd6:	e7fa      	b.n	8019dce <_ZN8touchgfx6memsetEPvhm+0x2>
 8019dd8:	4770      	bx	lr

08019dda <_ZN8touchgfx4clzuEm>:
 8019dda:	4603      	mov	r3, r0
 8019ddc:	b1c8      	cbz	r0, 8019e12 <_ZN8touchgfx4clzuEm+0x38>
 8019dde:	0c02      	lsrs	r2, r0, #16
 8019de0:	0412      	lsls	r2, r2, #16
 8019de2:	b9a2      	cbnz	r2, 8019e0e <_ZN8touchgfx4clzuEm+0x34>
 8019de4:	0403      	lsls	r3, r0, #16
 8019de6:	2010      	movs	r0, #16
 8019de8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019dec:	bf04      	itt	eq
 8019dee:	021b      	lsleq	r3, r3, #8
 8019df0:	3008      	addeq	r0, #8
 8019df2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019df6:	bf04      	itt	eq
 8019df8:	011b      	lsleq	r3, r3, #4
 8019dfa:	3004      	addeq	r0, #4
 8019dfc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019e00:	bf04      	itt	eq
 8019e02:	009b      	lsleq	r3, r3, #2
 8019e04:	3002      	addeq	r0, #2
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	db04      	blt.n	8019e14 <_ZN8touchgfx4clzuEm+0x3a>
 8019e0a:	3001      	adds	r0, #1
 8019e0c:	4770      	bx	lr
 8019e0e:	2000      	movs	r0, #0
 8019e10:	e7ea      	b.n	8019de8 <_ZN8touchgfx4clzuEm+0xe>
 8019e12:	2020      	movs	r0, #32
 8019e14:	4770      	bx	lr

08019e16 <_ZN8touchgfx7muldivuEmmmRm>:
 8019e16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e1a:	4680      	mov	r8, r0
 8019e1c:	460f      	mov	r7, r1
 8019e1e:	4615      	mov	r5, r2
 8019e20:	461e      	mov	r6, r3
 8019e22:	f7ff ffda 	bl	8019dda <_ZN8touchgfx4clzuEm>
 8019e26:	b998      	cbnz	r0, 8019e50 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8019e28:	4608      	mov	r0, r1
 8019e2a:	f7ff ffd6 	bl	8019dda <_ZN8touchgfx4clzuEm>
 8019e2e:	2800      	cmp	r0, #0
 8019e30:	dd08      	ble.n	8019e44 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8019e32:	4633      	mov	r3, r6
 8019e34:	462a      	mov	r2, r5
 8019e36:	4641      	mov	r1, r8
 8019e38:	4638      	mov	r0, r7
 8019e3a:	f7ff ffec 	bl	8019e16 <_ZN8touchgfx7muldivuEmmmRm>
 8019e3e:	b003      	add	sp, #12
 8019e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e44:	f04f 33ff 	mov.w	r3, #4294967295
 8019e48:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8019e4c:	6033      	str	r3, [r6, #0]
 8019e4e:	e7f6      	b.n	8019e3e <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8019e50:	fa31 f900 	lsrs.w	r9, r1, r0
 8019e54:	fb01 f308 	mul.w	r3, r1, r8
 8019e58:	d105      	bne.n	8019e66 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8019e5a:	fbb3 f0f5 	udiv	r0, r3, r5
 8019e5e:	fb05 3510 	mls	r5, r5, r0, r3
 8019e62:	6035      	str	r5, [r6, #0]
 8019e64:	e7eb      	b.n	8019e3e <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8019e66:	2301      	movs	r3, #1
 8019e68:	fa08 fb00 	lsl.w	fp, r8, r0
 8019e6c:	462a      	mov	r2, r5
 8019e6e:	4641      	mov	r1, r8
 8019e70:	fa03 f000 	lsl.w	r0, r3, r0
 8019e74:	4633      	mov	r3, r6
 8019e76:	fbbb faf5 	udiv	sl, fp, r5
 8019e7a:	3801      	subs	r0, #1
 8019e7c:	fb09 f40a 	mul.w	r4, r9, sl
 8019e80:	4038      	ands	r0, r7
 8019e82:	f7ff ffc8 	bl	8019e16 <_ZN8touchgfx7muldivuEmmmRm>
 8019e86:	462a      	mov	r2, r5
 8019e88:	4607      	mov	r7, r0
 8019e8a:	ab01      	add	r3, sp, #4
 8019e8c:	fb05 b11a 	mls	r1, r5, sl, fp
 8019e90:	4648      	mov	r0, r9
 8019e92:	f7ff ffc0 	bl	8019e16 <_ZN8touchgfx7muldivuEmmmRm>
 8019e96:	9b01      	ldr	r3, [sp, #4]
 8019e98:	6832      	ldr	r2, [r6, #0]
 8019e9a:	441a      	add	r2, r3
 8019e9c:	fbb2 f3f5 	udiv	r3, r2, r5
 8019ea0:	441c      	add	r4, r3
 8019ea2:	fb05 2513 	mls	r5, r5, r3, r2
 8019ea6:	443c      	add	r4, r7
 8019ea8:	4420      	add	r0, r4
 8019eaa:	e7da      	b.n	8019e62 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08019eac <_ZN8touchgfx6muldivElllRl>:
 8019eac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019eae:	2800      	cmp	r0, #0
 8019eb0:	461e      	mov	r6, r3
 8019eb2:	bfba      	itte	lt
 8019eb4:	4240      	neglt	r0, r0
 8019eb6:	f04f 34ff 	movlt.w	r4, #4294967295
 8019eba:	2401      	movge	r4, #1
 8019ebc:	2900      	cmp	r1, #0
 8019ebe:	bfbc      	itt	lt
 8019ec0:	4249      	neglt	r1, r1
 8019ec2:	4264      	neglt	r4, r4
 8019ec4:	2a00      	cmp	r2, #0
 8019ec6:	bfb6      	itet	lt
 8019ec8:	4265      	neglt	r5, r4
 8019eca:	4625      	movge	r5, r4
 8019ecc:	4252      	neglt	r2, r2
 8019ece:	4288      	cmp	r0, r1
 8019ed0:	bfc2      	ittt	gt
 8019ed2:	4603      	movgt	r3, r0
 8019ed4:	4608      	movgt	r0, r1
 8019ed6:	4619      	movgt	r1, r3
 8019ed8:	ab01      	add	r3, sp, #4
 8019eda:	f7ff ff9c 	bl	8019e16 <_ZN8touchgfx7muldivuEmmmRm>
 8019ede:	9b01      	ldr	r3, [sp, #4]
 8019ee0:	4368      	muls	r0, r5
 8019ee2:	435c      	muls	r4, r3
 8019ee4:	6034      	str	r4, [r6, #0]
 8019ee6:	b002      	add	sp, #8
 8019ee8:	bd70      	pop	{r4, r5, r6, pc}

08019eea <_ZN8touchgfx6muldivElll>:
 8019eea:	b513      	push	{r0, r1, r4, lr}
 8019eec:	4614      	mov	r4, r2
 8019eee:	ab01      	add	r3, sp, #4
 8019ef0:	f7ff ffdc 	bl	8019eac <_ZN8touchgfx6muldivElllRl>
 8019ef4:	2800      	cmp	r0, #0
 8019ef6:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 8019efa:	9b01      	ldr	r3, [sp, #4]
 8019efc:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 8019f00:	db0a      	blt.n	8019f18 <_ZN8touchgfx6muldivElll+0x2e>
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	f102 0201 	add.w	r2, r2, #1
 8019f08:	bfb8      	it	lt
 8019f0a:	425b      	neglt	r3, r3
 8019f0c:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8019f10:	db00      	blt.n	8019f14 <_ZN8touchgfx6muldivElll+0x2a>
 8019f12:	3001      	adds	r0, #1
 8019f14:	b002      	add	sp, #8
 8019f16:	bd10      	pop	{r4, pc}
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	bfb8      	it	lt
 8019f1c:	425b      	neglt	r3, r3
 8019f1e:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 8019f22:	bfc8      	it	gt
 8019f24:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8019f28:	e7f4      	b.n	8019f14 <_ZN8touchgfx6muldivElll+0x2a>

08019f2a <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019f2a:	2000      	movs	r0, #0
 8019f2c:	4770      	bx	lr

08019f2e <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8019f2e:	2001      	movs	r0, #1
 8019f30:	4770      	bx	lr

08019f32 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8019f32:	2002      	movs	r0, #2
 8019f34:	4770      	bx	lr

08019f36 <_ZN8touchgfx12GestureEventD1Ev>:
 8019f36:	4770      	bx	lr

08019f38 <_ZN8touchgfx9DragEventD1Ev>:
 8019f38:	4770      	bx	lr

08019f3a <_ZN8touchgfx10ClickEventD1Ev>:
 8019f3a:	4770      	bx	lr

08019f3c <_ZN8touchgfx10ClickEventD0Ev>:
 8019f3c:	b510      	push	{r4, lr}
 8019f3e:	4604      	mov	r4, r0
 8019f40:	210c      	movs	r1, #12
 8019f42:	f00b fdea 	bl	8025b1a <_ZdlPvj>
 8019f46:	4620      	mov	r0, r4
 8019f48:	bd10      	pop	{r4, pc}

08019f4a <_ZN8touchgfx9DragEventD0Ev>:
 8019f4a:	b510      	push	{r4, lr}
 8019f4c:	4604      	mov	r4, r0
 8019f4e:	2110      	movs	r1, #16
 8019f50:	f00b fde3 	bl	8025b1a <_ZdlPvj>
 8019f54:	4620      	mov	r0, r4
 8019f56:	bd10      	pop	{r4, pc}

08019f58 <_ZN8touchgfx12GestureEventD0Ev>:
 8019f58:	b510      	push	{r4, lr}
 8019f5a:	4604      	mov	r4, r0
 8019f5c:	210c      	movs	r1, #12
 8019f5e:	f00b fddc 	bl	8025b1a <_ZdlPvj>
 8019f62:	4620      	mov	r0, r4
 8019f64:	bd10      	pop	{r4, pc}
	...

08019f68 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019f68:	b530      	push	{r4, r5, lr}
 8019f6a:	460d      	mov	r5, r1
 8019f6c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019f6e:	b087      	sub	sp, #28
 8019f70:	4604      	mov	r4, r0
 8019f72:	b301      	cbz	r1, 8019fb6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019f74:	a801      	add	r0, sp, #4
 8019f76:	f7ff fe8b 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019f7a:	892a      	ldrh	r2, [r5, #8]
 8019f7c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019f80:	7928      	ldrb	r0, [r5, #4]
 8019f82:	1ad2      	subs	r2, r2, r3
 8019f84:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019f86:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019f8a:	441a      	add	r2, r3
 8019f8c:	896b      	ldrh	r3, [r5, #10]
 8019f8e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019f92:	f88d 0010 	strb.w	r0, [sp, #16]
 8019f96:	1b5b      	subs	r3, r3, r5
 8019f98:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8019f9a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019f9c:	442b      	add	r3, r5
 8019f9e:	4d07      	ldr	r5, [pc, #28]	; (8019fbc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019fa0:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019fa4:	a903      	add	r1, sp, #12
 8019fa6:	9503      	str	r5, [sp, #12]
 8019fa8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019fac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019fb0:	6803      	ldr	r3, [r0, #0]
 8019fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019fb4:	4798      	blx	r3
 8019fb6:	b007      	add	sp, #28
 8019fb8:	bd30      	pop	{r4, r5, pc}
 8019fba:	bf00      	nop
 8019fbc:	0802a4cc 	.word	0x0802a4cc

08019fc0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fc4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8019fc6:	b08a      	sub	sp, #40	; 0x28
 8019fc8:	4604      	mov	r4, r0
 8019fca:	460d      	mov	r5, r1
 8019fcc:	b113      	cbz	r3, 8019fd4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8019fce:	790b      	ldrb	r3, [r1, #4]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d044      	beq.n	801a05e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019fd4:	f104 0804 	add.w	r8, r4, #4
 8019fd8:	a803      	add	r0, sp, #12
 8019fda:	4641      	mov	r1, r8
 8019fdc:	f7ff fe58 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019fe0:	792b      	ldrb	r3, [r5, #4]
 8019fe2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019fe6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8019fea:	b983      	cbnz	r3, 801a00e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8019fec:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8019ff0:	892a      	ldrh	r2, [r5, #8]
 8019ff2:	88e9      	ldrh	r1, [r5, #6]
 8019ff4:	4640      	mov	r0, r8
 8019ff6:	1b92      	subs	r2, r2, r6
 8019ff8:	9301      	str	r3, [sp, #4]
 8019ffa:	1bc9      	subs	r1, r1, r7
 8019ffc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801a000:	b212      	sxth	r2, r2
 801a002:	9300      	str	r3, [sp, #0]
 801a004:	b209      	sxth	r1, r1
 801a006:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a00a:	f7f9 ff63 	bl	8013ed4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801a00e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a010:	b329      	cbz	r1, 801a05e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a012:	a805      	add	r0, sp, #20
 801a014:	f7ff fe3c 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a018:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a01c:	792b      	ldrb	r3, [r5, #4]
 801a01e:	a907      	add	r1, sp, #28
 801a020:	1abf      	subs	r7, r7, r2
 801a022:	88ea      	ldrh	r2, [r5, #6]
 801a024:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a026:	4417      	add	r7, r2
 801a028:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801a02a:	f88d 3020 	strb.w	r3, [sp, #32]
 801a02e:	4417      	add	r7, r2
 801a030:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a034:	1ab6      	subs	r6, r6, r2
 801a036:	892a      	ldrh	r2, [r5, #8]
 801a038:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801a03c:	4416      	add	r6, r2
 801a03e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a040:	4416      	add	r6, r2
 801a042:	4a08      	ldr	r2, [pc, #32]	; (801a064 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801a044:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801a048:	2600      	movs	r6, #0
 801a04a:	9207      	str	r2, [sp, #28]
 801a04c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801a050:	6803      	ldr	r3, [r0, #0]
 801a052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a054:	4798      	blx	r3
 801a056:	792b      	ldrb	r3, [r5, #4]
 801a058:	b10b      	cbz	r3, 801a05e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a05a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a05e:	b00a      	add	sp, #40	; 0x28
 801a060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a064:	0802a4a4 	.word	0x0802a4a4

0801a068 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a06c:	460c      	mov	r4, r1
 801a06e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a070:	b088      	sub	sp, #32
 801a072:	4605      	mov	r5, r0
 801a074:	2900      	cmp	r1, #0
 801a076:	d06d      	beq.n	801a154 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801a078:	4668      	mov	r0, sp
 801a07a:	f7ff fe09 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a07e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801a080:	88e3      	ldrh	r3, [r4, #6]
 801a082:	f9bd 8000 	ldrsh.w	r8, [sp]
 801a086:	440b      	add	r3, r1
 801a088:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801a08c:	b21b      	sxth	r3, r3
 801a08e:	4543      	cmp	r3, r8
 801a090:	db31      	blt.n	801a0f6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a092:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801a096:	44c4      	add	ip, r8
 801a098:	fa0f fc8c 	sxth.w	ip, ip
 801a09c:	4563      	cmp	r3, ip
 801a09e:	da2a      	bge.n	801a0f6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a0a0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801a0a2:	8926      	ldrh	r6, [r4, #8]
 801a0a4:	4416      	add	r6, r2
 801a0a6:	b236      	sxth	r6, r6
 801a0a8:	42be      	cmp	r6, r7
 801a0aa:	db24      	blt.n	801a0f6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a0ac:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a0b0:	4438      	add	r0, r7
 801a0b2:	b200      	sxth	r0, r0
 801a0b4:	4286      	cmp	r6, r0
 801a0b6:	da1e      	bge.n	801a0f6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a0b8:	8963      	ldrh	r3, [r4, #10]
 801a0ba:	4419      	add	r1, r3
 801a0bc:	b209      	sxth	r1, r1
 801a0be:	4541      	cmp	r1, r8
 801a0c0:	db08      	blt.n	801a0d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a0c2:	4561      	cmp	r1, ip
 801a0c4:	da06      	bge.n	801a0d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a0c6:	89a3      	ldrh	r3, [r4, #12]
 801a0c8:	441a      	add	r2, r3
 801a0ca:	b212      	sxth	r2, r2
 801a0cc:	42ba      	cmp	r2, r7
 801a0ce:	db01      	blt.n	801a0d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a0d0:	4282      	cmp	r2, r0
 801a0d2:	db10      	blt.n	801a0f6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a0d4:	4b21      	ldr	r3, [pc, #132]	; (801a15c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801a0d6:	a904      	add	r1, sp, #16
 801a0d8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a0da:	9304      	str	r3, [sp, #16]
 801a0dc:	2302      	movs	r3, #2
 801a0de:	f88d 3014 	strb.w	r3, [sp, #20]
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a0e8:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a0ec:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a0f0:	6803      	ldr	r3, [r0, #0]
 801a0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0f4:	4798      	blx	r3
 801a0f6:	1d29      	adds	r1, r5, #4
 801a0f8:	a802      	add	r0, sp, #8
 801a0fa:	f7ff fdc9 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0fe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a102:	88e0      	ldrh	r0, [r4, #6]
 801a104:	eba3 0808 	sub.w	r8, r3, r8
 801a108:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a10c:	7921      	ldrb	r1, [r4, #4]
 801a10e:	fa1f f888 	uxth.w	r8, r8
 801a112:	1bdf      	subs	r7, r3, r7
 801a114:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a118:	b2bb      	uxth	r3, r7
 801a11a:	4440      	add	r0, r8
 801a11c:	8922      	ldrh	r2, [r4, #8]
 801a11e:	8967      	ldrh	r7, [r4, #10]
 801a120:	4460      	add	r0, ip
 801a122:	89a4      	ldrh	r4, [r4, #12]
 801a124:	441a      	add	r2, r3
 801a126:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a128:	44b8      	add	r8, r7
 801a12a:	4423      	add	r3, r4
 801a12c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a130:	4432      	add	r2, r6
 801a132:	44e0      	add	r8, ip
 801a134:	4433      	add	r3, r6
 801a136:	4c0a      	ldr	r4, [pc, #40]	; (801a160 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801a138:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a13a:	f88d 1014 	strb.w	r1, [sp, #20]
 801a13e:	a904      	add	r1, sp, #16
 801a140:	9404      	str	r4, [sp, #16]
 801a142:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a146:	f8ad 801a 	strh.w	r8, [sp, #26]
 801a14a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a14e:	6803      	ldr	r3, [r0, #0]
 801a150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a152:	4798      	blx	r3
 801a154:	b008      	add	sp, #32
 801a156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a15a:	bf00      	nop
 801a15c:	0802a4a4 	.word	0x0802a4a4
 801a160:	0802a4b8 	.word	0x0802a4b8

0801a164 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a166:	4604      	mov	r4, r0
 801a168:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a16c:	3201      	adds	r2, #1
 801a16e:	d112      	bne.n	801a196 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a170:	2500      	movs	r5, #0
 801a172:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a176:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a17a:	6803      	ldr	r3, [r0, #0]
 801a17c:	9500      	str	r5, [sp, #0]
 801a17e:	466d      	mov	r5, sp
 801a180:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a184:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a188:	4629      	mov	r1, r5
 801a18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a18c:	4798      	blx	r3
 801a18e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a192:	e884 0003 	stmia.w	r4, {r0, r1}
 801a196:	4620      	mov	r0, r4
 801a198:	b003      	add	sp, #12
 801a19a:	bd30      	pop	{r4, r5, pc}

0801a19c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a19c:	b513      	push	{r0, r1, r4, lr}
 801a19e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a1a2:	4604      	mov	r4, r0
 801a1a4:	3301      	adds	r3, #1
 801a1a6:	d109      	bne.n	801a1bc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a1a8:	4601      	mov	r1, r0
 801a1aa:	4668      	mov	r0, sp
 801a1ac:	f7ff fd70 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1b0:	f8bd 3000 	ldrh.w	r3, [sp]
 801a1b4:	8423      	strh	r3, [r4, #32]
 801a1b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a1ba:	8463      	strh	r3, [r4, #34]	; 0x22
 801a1bc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a1c0:	b002      	add	sp, #8
 801a1c2:	bd10      	pop	{r4, pc}

0801a1c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a1c4:	b513      	push	{r0, r1, r4, lr}
 801a1c6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a1ca:	4604      	mov	r4, r0
 801a1cc:	3301      	adds	r3, #1
 801a1ce:	d109      	bne.n	801a1e4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a1d0:	4601      	mov	r1, r0
 801a1d2:	4668      	mov	r0, sp
 801a1d4:	f7ff fd5c 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a1d8:	f8bd 3000 	ldrh.w	r3, [sp]
 801a1dc:	8423      	strh	r3, [r4, #32]
 801a1de:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a1e2:	8463      	strh	r3, [r4, #34]	; 0x22
 801a1e4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a1e8:	b002      	add	sp, #8
 801a1ea:	bd10      	pop	{r4, pc}

0801a1ec <_ZN8touchgfx6ScreenC1Ev>:
 801a1ec:	b570      	push	{r4, r5, r6, lr}
 801a1ee:	4b17      	ldr	r3, [pc, #92]	; (801a24c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a1f0:	4605      	mov	r5, r0
 801a1f2:	4a17      	ldr	r2, [pc, #92]	; (801a250 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a1f4:	2101      	movs	r1, #1
 801a1f6:	f845 3b04 	str.w	r3, [r5], #4
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	6042      	str	r2, [r0, #4]
 801a1fe:	4604      	mov	r4, r0
 801a200:	8103      	strh	r3, [r0, #8]
 801a202:	8143      	strh	r3, [r0, #10]
 801a204:	8183      	strh	r3, [r0, #12]
 801a206:	81c3      	strh	r3, [r0, #14]
 801a208:	8203      	strh	r3, [r0, #16]
 801a20a:	8243      	strh	r3, [r0, #18]
 801a20c:	8283      	strh	r3, [r0, #20]
 801a20e:	82c3      	strh	r3, [r0, #22]
 801a210:	6203      	str	r3, [r0, #32]
 801a212:	8483      	strh	r3, [r0, #36]	; 0x24
 801a214:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a216:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a21a:	6343      	str	r3, [r0, #52]	; 0x34
 801a21c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801a220:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a224:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a228:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801a22c:	4b09      	ldr	r3, [pc, #36]	; (801a254 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a22e:	4628      	mov	r0, r5
 801a230:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a234:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801a236:	4a08      	ldr	r2, [pc, #32]	; (801a258 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a238:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a23c:	4798      	blx	r3
 801a23e:	6863      	ldr	r3, [r4, #4]
 801a240:	4628      	mov	r0, r5
 801a242:	4631      	mov	r1, r6
 801a244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a246:	4798      	blx	r3
 801a248:	4620      	mov	r0, r4
 801a24a:	bd70      	pop	{r4, r5, r6, pc}
 801a24c:	0802a4e0 	.word	0x0802a4e0
 801a250:	08028a68 	.word	0x08028a68
 801a254:	2400c89a 	.word	0x2400c89a
 801a258:	2400c898 	.word	0x2400c898

0801a25c <_ZN8touchgfx6Screen4drawEv>:
 801a25c:	4b09      	ldr	r3, [pc, #36]	; (801a284 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a25e:	b507      	push	{r0, r1, r2, lr}
 801a260:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a264:	2100      	movs	r1, #0
 801a266:	4b08      	ldr	r3, [pc, #32]	; (801a288 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a268:	9100      	str	r1, [sp, #0]
 801a26a:	4669      	mov	r1, sp
 801a26c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a270:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a274:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a278:	6803      	ldr	r3, [r0, #0]
 801a27a:	689b      	ldr	r3, [r3, #8]
 801a27c:	4798      	blx	r3
 801a27e:	b003      	add	sp, #12
 801a280:	f85d fb04 	ldr.w	pc, [sp], #4
 801a284:	2400c898 	.word	0x2400c898
 801a288:	2400c89a 	.word	0x2400c89a

0801a28c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a290:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a294:	b089      	sub	sp, #36	; 0x24
 801a296:	4680      	mov	r8, r0
 801a298:	460c      	mov	r4, r1
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	4615      	mov	r5, r2
 801a29e:	dd0e      	ble.n	801a2be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a2a0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	dd0a      	ble.n	801a2be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a2a8:	4628      	mov	r0, r5
 801a2aa:	f7ff ff5b 	bl	801a164 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a2ae:	4621      	mov	r1, r4
 801a2b0:	f7fb f90e 	bl	80154d0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a2b4:	69eb      	ldr	r3, [r5, #28]
 801a2b6:	b928      	cbnz	r0, 801a2c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a2b8:	461d      	mov	r5, r3
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d1f4      	bne.n	801a2a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a2be:	b009      	add	sp, #36	; 0x24
 801a2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2c4:	ae04      	add	r6, sp, #16
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	f000 80b5 	beq.w	801a436 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a2cc:	682b      	ldr	r3, [r5, #0]
 801a2ce:	4629      	mov	r1, r5
 801a2d0:	a802      	add	r0, sp, #8
 801a2d2:	68db      	ldr	r3, [r3, #12]
 801a2d4:	4798      	blx	r3
 801a2d6:	4628      	mov	r0, r5
 801a2d8:	f7ff ff60 	bl	801a19c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a2dc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a2e0:	4407      	add	r7, r0
 801a2e2:	4628      	mov	r0, r5
 801a2e4:	f7ff ff6e 	bl	801a1c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a2e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a2ec:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a2f0:	b23f      	sxth	r7, r7
 801a2f2:	4418      	add	r0, r3
 801a2f4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a2f8:	4621      	mov	r1, r4
 801a2fa:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a2fe:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a302:	4630      	mov	r0, r6
 801a304:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a308:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a30c:	f7f9 fec4 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 801a310:	4628      	mov	r0, r5
 801a312:	f7ff ff27 	bl	801a164 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a316:	ab06      	add	r3, sp, #24
 801a318:	4602      	mov	r2, r0
 801a31a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a31e:	e883 0003 	stmia.w	r3, {r0, r1}
 801a322:	4611      	mov	r1, r2
 801a324:	4618      	mov	r0, r3
 801a326:	f7f9 feb7 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 801a32a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a32e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a332:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a336:	4299      	cmp	r1, r3
 801a338:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a33c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a340:	d10b      	bne.n	801a35a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a342:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a346:	4552      	cmp	r2, sl
 801a348:	d107      	bne.n	801a35a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a34a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a34e:	455a      	cmp	r2, fp
 801a350:	d103      	bne.n	801a35a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a352:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a356:	454a      	cmp	r2, r9
 801a358:	d06d      	beq.n	801a436 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a35a:	f1bb 0f00 	cmp.w	fp, #0
 801a35e:	dd65      	ble.n	801a42c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a360:	f1b9 0f00 	cmp.w	r9, #0
 801a364:	dd62      	ble.n	801a42c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a366:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a36a:	fa1f f08a 	uxth.w	r0, sl
 801a36e:	4552      	cmp	r2, sl
 801a370:	9000      	str	r0, [sp, #0]
 801a372:	da12      	bge.n	801a39a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a374:	9301      	str	r3, [sp, #4]
 801a376:	9b00      	ldr	r3, [sp, #0]
 801a378:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a37c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a380:	1a9a      	subs	r2, r3, r2
 801a382:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a386:	4631      	mov	r1, r6
 801a388:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a38c:	4640      	mov	r0, r8
 801a38e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a392:	69ea      	ldr	r2, [r5, #28]
 801a394:	f7ff ff7a 	bl	801a28c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a398:	9b01      	ldr	r3, [sp, #4]
 801a39a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a39e:	b29f      	uxth	r7, r3
 801a3a0:	429a      	cmp	r2, r3
 801a3a2:	da0d      	bge.n	801a3c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a3a4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a3a8:	1aba      	subs	r2, r7, r2
 801a3aa:	f8ad a012 	strh.w	sl, [sp, #18]
 801a3ae:	4631      	mov	r1, r6
 801a3b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a3b4:	4640      	mov	r0, r8
 801a3b6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a3ba:	69ea      	ldr	r2, [r5, #28]
 801a3bc:	f7ff ff66 	bl	801a28c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a3c0:	8822      	ldrh	r2, [r4, #0]
 801a3c2:	445f      	add	r7, fp
 801a3c4:	88a3      	ldrh	r3, [r4, #4]
 801a3c6:	b2bf      	uxth	r7, r7
 801a3c8:	4413      	add	r3, r2
 801a3ca:	b23a      	sxth	r2, r7
 801a3cc:	b29b      	uxth	r3, r3
 801a3ce:	b219      	sxth	r1, r3
 801a3d0:	4291      	cmp	r1, r2
 801a3d2:	dd0d      	ble.n	801a3f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a3d4:	1bdb      	subs	r3, r3, r7
 801a3d6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a3da:	f8ad a012 	strh.w	sl, [sp, #18]
 801a3de:	4631      	mov	r1, r6
 801a3e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a3e4:	4640      	mov	r0, r8
 801a3e6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a3ea:	69ea      	ldr	r2, [r5, #28]
 801a3ec:	f7ff ff4e 	bl	801a28c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a3f0:	88e2      	ldrh	r2, [r4, #6]
 801a3f2:	8863      	ldrh	r3, [r4, #2]
 801a3f4:	4413      	add	r3, r2
 801a3f6:	9a00      	ldr	r2, [sp, #0]
 801a3f8:	444a      	add	r2, r9
 801a3fa:	b29b      	uxth	r3, r3
 801a3fc:	fa1f f982 	uxth.w	r9, r2
 801a400:	b219      	sxth	r1, r3
 801a402:	fa0f f289 	sxth.w	r2, r9
 801a406:	428a      	cmp	r2, r1
 801a408:	da15      	bge.n	801a436 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a40a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a40e:	eba3 0309 	sub.w	r3, r3, r9
 801a412:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a416:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a41a:	4631      	mov	r1, r6
 801a41c:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a420:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a424:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a428:	69ea      	ldr	r2, [r5, #28]
 801a42a:	e001      	b.n	801a430 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801a42c:	69ea      	ldr	r2, [r5, #28]
 801a42e:	4621      	mov	r1, r4
 801a430:	4640      	mov	r0, r8
 801a432:	f7ff ff2b 	bl	801a28c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a436:	4628      	mov	r0, r5
 801a438:	f7ff fe94 	bl	801a164 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a43c:	6861      	ldr	r1, [r4, #4]
 801a43e:	4602      	mov	r2, r0
 801a440:	4633      	mov	r3, r6
 801a442:	6820      	ldr	r0, [r4, #0]
 801a444:	c303      	stmia	r3!, {r0, r1}
 801a446:	4611      	mov	r1, r2
 801a448:	4630      	mov	r0, r6
 801a44a:	f7f9 fe25 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 801a44e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a452:	2b00      	cmp	r3, #0
 801a454:	f77f af33 	ble.w	801a2be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a458:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	f77f af2e 	ble.w	801a2be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a462:	4628      	mov	r0, r5
 801a464:	f7ff fe9a 	bl	801a19c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a468:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a46c:	1a18      	subs	r0, r3, r0
 801a46e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a472:	4628      	mov	r0, r5
 801a474:	f7ff fea6 	bl	801a1c4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a478:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a47c:	4631      	mov	r1, r6
 801a47e:	1a18      	subs	r0, r3, r0
 801a480:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a484:	4628      	mov	r0, r5
 801a486:	682b      	ldr	r3, [r5, #0]
 801a488:	689b      	ldr	r3, [r3, #8]
 801a48a:	4798      	blx	r3
 801a48c:	e717      	b.n	801a2be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a48e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a48e:	b570      	push	{r4, r5, r6, lr}
 801a490:	1d06      	adds	r6, r0, #4
 801a492:	b086      	sub	sp, #24
 801a494:	460c      	mov	r4, r1
 801a496:	2300      	movs	r3, #0
 801a498:	4631      	mov	r1, r6
 801a49a:	4605      	mov	r5, r0
 801a49c:	a802      	add	r0, sp, #8
 801a49e:	9301      	str	r3, [sp, #4]
 801a4a0:	f7ff fbf6 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a4a4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a4a8:	8822      	ldrh	r2, [r4, #0]
 801a4aa:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801a4ae:	1ad2      	subs	r2, r2, r3
 801a4b0:	8863      	ldrh	r3, [r4, #2]
 801a4b2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a4b6:	1a5b      	subs	r3, r3, r1
 801a4b8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a4bc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a4c0:	aa01      	add	r2, sp, #4
 801a4c2:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a4c6:	4630      	mov	r0, r6
 801a4c8:	f8ad 1016 	strh.w	r1, [sp, #22]
 801a4cc:	a904      	add	r1, sp, #16
 801a4ce:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a4d2:	f7f9 feb9 	bl	8014248 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a4d6:	9a01      	ldr	r2, [sp, #4]
 801a4d8:	b11a      	cbz	r2, 801a4e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801a4da:	4621      	mov	r1, r4
 801a4dc:	4628      	mov	r0, r5
 801a4de:	f7ff fed5 	bl	801a28c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a4e2:	b006      	add	sp, #24
 801a4e4:	bd70      	pop	{r4, r5, r6, pc}

0801a4e6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a4e6:	4602      	mov	r2, r0
 801a4e8:	b530      	push	{r4, r5, lr}
 801a4ea:	4604      	mov	r4, r0
 801a4ec:	b085      	sub	sp, #20
 801a4ee:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a4f2:	460d      	mov	r5, r1
 801a4f4:	466b      	mov	r3, sp
 801a4f6:	6851      	ldr	r1, [r2, #4]
 801a4f8:	c303      	stmia	r3!, {r0, r1}
 801a4fa:	4629      	mov	r1, r5
 801a4fc:	4668      	mov	r0, sp
 801a4fe:	f7f9 fdcb 	bl	8014098 <_ZN8touchgfx4RectaNERKS0_>
 801a502:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a506:	b12b      	cbz	r3, 801a514 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801a508:	4669      	mov	r1, sp
 801a50a:	4620      	mov	r0, r4
 801a50c:	f7ff ffbf 	bl	801a48e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a510:	b005      	add	sp, #20
 801a512:	bd30      	pop	{r4, r5, pc}
 801a514:	3404      	adds	r4, #4
 801a516:	a802      	add	r0, sp, #8
 801a518:	4621      	mov	r1, r4
 801a51a:	f7ff fbb9 	bl	8019c90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a51e:	f8bd 3000 	ldrh.w	r3, [sp]
 801a522:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a526:	4669      	mov	r1, sp
 801a528:	4620      	mov	r0, r4
 801a52a:	1a9b      	subs	r3, r3, r2
 801a52c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a530:	f8ad 3000 	strh.w	r3, [sp]
 801a534:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a538:	1a9b      	subs	r3, r3, r2
 801a53a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a53e:	f7f9 fe4a 	bl	80141d6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a542:	e7e5      	b.n	801a510 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801a544 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a544:	460b      	mov	r3, r1
 801a546:	680a      	ldr	r2, [r1, #0]
 801a548:	1d01      	adds	r1, r0, #4
 801a54a:	6992      	ldr	r2, [r2, #24]
 801a54c:	4618      	mov	r0, r3
 801a54e:	4710      	bx	r2

0801a550 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801a550:	4298      	cmp	r0, r3
 801a552:	d200      	bcs.n	801a556 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801a554:	b913      	cbnz	r3, 801a55c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801a556:	440a      	add	r2, r1
 801a558:	b210      	sxth	r0, r2
 801a55a:	4770      	bx	lr
 801a55c:	ee07 0a90 	vmov	s15, r0
 801a560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a564:	ee07 3a90 	vmov	s15, r3
 801a568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a56c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a570:	ee07 2a90 	vmov	s15, r2
 801a574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a578:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801a57c:	ee07 1a90 	vmov	s15, r1
 801a580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a584:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a588:	ee67 5a07 	vmul.f32	s11, s14, s14
 801a58c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a590:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801a594:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5a0:	bfcc      	ite	gt
 801a5a2:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801a5a6:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801a5aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a5ae:	ee17 3a90 	vmov	r3, s15
 801a5b2:	b218      	sxth	r0, r3
 801a5b4:	4770      	bx	lr

0801a5b6 <_ZN8touchgfx12TextProviderC1Ev>:
 801a5b6:	b538      	push	{r3, r4, r5, lr}
 801a5b8:	2500      	movs	r5, #0
 801a5ba:	2302      	movs	r3, #2
 801a5bc:	4604      	mov	r4, r0
 801a5be:	220e      	movs	r2, #14
 801a5c0:	7403      	strb	r3, [r0, #16]
 801a5c2:	4629      	mov	r1, r5
 801a5c4:	6145      	str	r5, [r0, #20]
 801a5c6:	7605      	strb	r5, [r0, #24]
 801a5c8:	83c5      	strh	r5, [r0, #30]
 801a5ca:	8405      	strh	r5, [r0, #32]
 801a5cc:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a5ce:	8705      	strh	r5, [r0, #56]	; 0x38
 801a5d0:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801a5d2:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801a5d6:	e9c0 5500 	strd	r5, r5, [r0]
 801a5da:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801a5de:	304c      	adds	r0, #76	; 0x4c
 801a5e0:	f00b fb56 	bl	8025c90 <memset>
 801a5e4:	2301      	movs	r3, #1
 801a5e6:	4620      	mov	r0, r4
 801a5e8:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801a5ec:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a5f0:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801a5f4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801a5f8:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801a5fc:	f7ed f9ee 	bl	80079dc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a600:	4620      	mov	r0, r4
 801a602:	bd38      	pop	{r3, r4, r5, pc}

0801a604 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a604:	b530      	push	{r4, r5, lr}
 801a606:	2500      	movs	r5, #0
 801a608:	2401      	movs	r4, #1
 801a60a:	6843      	ldr	r3, [r0, #4]
 801a60c:	b913      	cbnz	r3, 801a614 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a60e:	6803      	ldr	r3, [r0, #0]
 801a610:	b313      	cbz	r3, 801a658 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a612:	6043      	str	r3, [r0, #4]
 801a614:	7e03      	ldrb	r3, [r0, #24]
 801a616:	b143      	cbz	r3, 801a62a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a618:	6943      	ldr	r3, [r0, #20]
 801a61a:	b12b      	cbz	r3, 801a628 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a61c:	881a      	ldrh	r2, [r3, #0]
 801a61e:	b11a      	cbz	r2, 801a628 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a620:	1c9a      	adds	r2, r3, #2
 801a622:	6142      	str	r2, [r0, #20]
 801a624:	8818      	ldrh	r0, [r3, #0]
 801a626:	bd30      	pop	{r4, r5, pc}
 801a628:	7605      	strb	r5, [r0, #24]
 801a62a:	6843      	ldr	r3, [r0, #4]
 801a62c:	8819      	ldrh	r1, [r3, #0]
 801a62e:	b199      	cbz	r1, 801a658 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a630:	1c9a      	adds	r2, r3, #2
 801a632:	2902      	cmp	r1, #2
 801a634:	6042      	str	r2, [r0, #4]
 801a636:	d1f5      	bne.n	801a624 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a638:	7c03      	ldrb	r3, [r0, #16]
 801a63a:	2b01      	cmp	r3, #1
 801a63c:	d8e5      	bhi.n	801a60a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a63e:	1c5a      	adds	r2, r3, #1
 801a640:	3302      	adds	r3, #2
 801a642:	7402      	strb	r2, [r0, #16]
 801a644:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801a648:	6143      	str	r3, [r0, #20]
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d0dd      	beq.n	801a60a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a64e:	881b      	ldrh	r3, [r3, #0]
 801a650:	2b00      	cmp	r3, #0
 801a652:	d0da      	beq.n	801a60a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a654:	7604      	strb	r4, [r0, #24]
 801a656:	e7d8      	b.n	801a60a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a658:	2000      	movs	r0, #0
 801a65a:	e7e4      	b.n	801a626 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a65c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a65c:	b430      	push	{r4, r5}
 801a65e:	6815      	ldr	r5, [r2, #0]
 801a660:	6085      	str	r5, [r0, #8]
 801a662:	6852      	ldr	r2, [r2, #4]
 801a664:	6443      	str	r3, [r0, #68]	; 0x44
 801a666:	60c2      	str	r2, [r0, #12]
 801a668:	2200      	movs	r2, #0
 801a66a:	9b02      	ldr	r3, [sp, #8]
 801a66c:	7402      	strb	r2, [r0, #16]
 801a66e:	6001      	str	r1, [r0, #0]
 801a670:	6483      	str	r3, [r0, #72]	; 0x48
 801a672:	6042      	str	r2, [r0, #4]
 801a674:	6142      	str	r2, [r0, #20]
 801a676:	7602      	strb	r2, [r0, #24]
 801a678:	8702      	strh	r2, [r0, #56]	; 0x38
 801a67a:	8402      	strh	r2, [r0, #32]
 801a67c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a680:	bc30      	pop	{r4, r5}
 801a682:	f7ed b9ab 	b.w	80079dc <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a686 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a686:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a688:	4605      	mov	r5, r0
 801a68a:	4608      	mov	r0, r1
 801a68c:	b1f1      	cbz	r1, 801a6cc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a68e:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801a692:	460b      	mov	r3, r1
 801a694:	f101 0708 	add.w	r7, r1, #8
 801a698:	4622      	mov	r2, r4
 801a69a:	6818      	ldr	r0, [r3, #0]
 801a69c:	3308      	adds	r3, #8
 801a69e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a6a2:	4626      	mov	r6, r4
 801a6a4:	42bb      	cmp	r3, r7
 801a6a6:	c603      	stmia	r6!, {r0, r1}
 801a6a8:	4634      	mov	r4, r6
 801a6aa:	d1f6      	bne.n	801a69a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a6ac:	6818      	ldr	r0, [r3, #0]
 801a6ae:	6030      	str	r0, [r6, #0]
 801a6b0:	4610      	mov	r0, r2
 801a6b2:	889b      	ldrh	r3, [r3, #4]
 801a6b4:	80b3      	strh	r3, [r6, #4]
 801a6b6:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801a6ba:	015b      	lsls	r3, r3, #5
 801a6bc:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a6c0:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801a6c4:	430b      	orrs	r3, r1
 801a6c6:	425b      	negs	r3, r3
 801a6c8:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a6ce <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a6ce:	b538      	push	{r3, r4, r5, lr}
 801a6d0:	460c      	mov	r4, r1
 801a6d2:	6811      	ldr	r1, [r2, #0]
 801a6d4:	4610      	mov	r0, r2
 801a6d6:	68cd      	ldr	r5, [r1, #12]
 801a6d8:	4619      	mov	r1, r3
 801a6da:	47a8      	blx	r5
 801a6dc:	2800      	cmp	r0, #0
 801a6de:	bf08      	it	eq
 801a6e0:	4620      	moveq	r0, r4
 801a6e2:	bd38      	pop	{r3, r4, r5, pc}

0801a6e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6e6:	4604      	mov	r4, r0
 801a6e8:	4615      	mov	r5, r2
 801a6ea:	4608      	mov	r0, r1
 801a6ec:	b93a      	cbnz	r2, 801a6fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a6ee:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a6f2:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801a6f6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801a6fa:	4628      	mov	r0, r5
 801a6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6fe:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a702:	8893      	ldrh	r3, [r2, #4]
 801a704:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a708:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a70c:	79ee      	ldrb	r6, [r5, #7]
 801a70e:	4316      	orrs	r6, r2
 801a710:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801a714:	189a      	adds	r2, r3, r2
 801a716:	b2b7      	uxth	r7, r6
 801a718:	b291      	uxth	r1, r2
 801a71a:	291d      	cmp	r1, #29
 801a71c:	f200 8084 	bhi.w	801a828 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a720:	2201      	movs	r2, #1
 801a722:	10f6      	asrs	r6, r6, #3
 801a724:	408a      	lsls	r2, r1
 801a726:	4978      	ldr	r1, [pc, #480]	; (801a908 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801a728:	420a      	tst	r2, r1
 801a72a:	d12e      	bne.n	801a78a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a72c:	f412 7f60 	tst.w	r2, #896	; 0x380
 801a730:	d07a      	beq.n	801a828 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801a732:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801a736:	462b      	mov	r3, r5
 801a738:	f105 0e08 	add.w	lr, r5, #8
 801a73c:	4615      	mov	r5, r2
 801a73e:	6818      	ldr	r0, [r3, #0]
 801a740:	3308      	adds	r3, #8
 801a742:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a746:	4694      	mov	ip, r2
 801a748:	4573      	cmp	r3, lr
 801a74a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a74e:	4662      	mov	r2, ip
 801a750:	d1f5      	bne.n	801a73e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801a752:	6818      	ldr	r0, [r3, #0]
 801a754:	f8cc 0000 	str.w	r0, [ip]
 801a758:	889b      	ldrh	r3, [r3, #4]
 801a75a:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a75e:	b2b3      	uxth	r3, r6
 801a760:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801a764:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801a768:	1aca      	subs	r2, r1, r3
 801a76a:	1bcf      	subs	r7, r1, r7
 801a76c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801a770:	b292      	uxth	r2, r2
 801a772:	1afb      	subs	r3, r7, r3
 801a774:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801a778:	10d2      	asrs	r2, r2, #3
 801a77a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801a77e:	4302      	orrs	r2, r0
 801a780:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801a784:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801a788:	e7b7      	b.n	801a6fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a78a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801a78c:	b92b      	cbnz	r3, 801a79a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801a78e:	4b5f      	ldr	r3, [pc, #380]	; (801a90c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801a790:	21c0      	movs	r1, #192	; 0xc0
 801a792:	4a5f      	ldr	r2, [pc, #380]	; (801a910 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801a794:	485f      	ldr	r0, [pc, #380]	; (801a914 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801a796:	f00b f9ef 	bl	8025b78 <__assert_func>
 801a79a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a79c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a7a0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801a7a2:	f640 6333 	movw	r3, #3635	; 0xe33
 801a7a6:	4299      	cmp	r1, r3
 801a7a8:	d110      	bne.n	801a7cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801a7aa:	6803      	ldr	r3, [r0, #0]
 801a7ac:	68db      	ldr	r3, [r3, #12]
 801a7ae:	4798      	blx	r3
 801a7b0:	7b41      	ldrb	r1, [r0, #13]
 801a7b2:	00cb      	lsls	r3, r1, #3
 801a7b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a7b8:	7a03      	ldrb	r3, [r0, #8]
 801a7ba:	0648      	lsls	r0, r1, #25
 801a7bc:	ea43 0302 	orr.w	r3, r3, r2
 801a7c0:	bf44      	itt	mi
 801a7c2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a7c6:	b21b      	sxthmi	r3, r3
 801a7c8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a7cc:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801a7d0:	462a      	mov	r2, r5
 801a7d2:	f105 0c08 	add.w	ip, r5, #8
 801a7d6:	443b      	add	r3, r7
 801a7d8:	4433      	add	r3, r6
 801a7da:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801a7de:	b29b      	uxth	r3, r3
 801a7e0:	4635      	mov	r5, r6
 801a7e2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a7e6:	6810      	ldr	r0, [r2, #0]
 801a7e8:	3208      	adds	r2, #8
 801a7ea:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a7ee:	4637      	mov	r7, r6
 801a7f0:	4562      	cmp	r2, ip
 801a7f2:	c703      	stmia	r7!, {r0, r1}
 801a7f4:	463e      	mov	r6, r7
 801a7f6:	d1f6      	bne.n	801a7e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801a7f8:	6810      	ldr	r0, [r2, #0]
 801a7fa:	6038      	str	r0, [r7, #0]
 801a7fc:	8892      	ldrh	r2, [r2, #4]
 801a7fe:	80ba      	strh	r2, [r7, #4]
 801a800:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a804:	10db      	asrs	r3, r3, #3
 801a806:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a80a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a80e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a812:	4313      	orrs	r3, r2
 801a814:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801a818:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a81c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801a820:	1a9b      	subs	r3, r3, r2
 801a822:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801a826:	e768      	b.n	801a6fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a828:	f023 0204 	bic.w	r2, r3, #4
 801a82c:	f640 611b 	movw	r1, #3611	; 0xe1b
 801a830:	428a      	cmp	r2, r1
 801a832:	d003      	beq.n	801a83c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801a834:	f640 621d 	movw	r2, #3613	; 0xe1d
 801a838:	4293      	cmp	r3, r2
 801a83a:	d120      	bne.n	801a87e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a83c:	3b01      	subs	r3, #1
 801a83e:	4602      	mov	r2, r0
 801a840:	4629      	mov	r1, r5
 801a842:	4620      	mov	r0, r4
 801a844:	b29b      	uxth	r3, r3
 801a846:	f7ff ff42 	bl	801a6ce <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a84a:	7b41      	ldrb	r1, [r0, #13]
 801a84c:	00cb      	lsls	r3, r1, #3
 801a84e:	0649      	lsls	r1, r1, #25
 801a850:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a854:	7a03      	ldrb	r3, [r0, #8]
 801a856:	ea43 0302 	orr.w	r3, r3, r2
 801a85a:	bf44      	itt	mi
 801a85c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a860:	b21b      	sxthmi	r3, r3
 801a862:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a866:	7b6b      	ldrb	r3, [r5, #13]
 801a868:	7aaa      	ldrb	r2, [r5, #10]
 801a86a:	005b      	lsls	r3, r3, #1
 801a86c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a870:	4313      	orrs	r3, r2
 801a872:	115a      	asrs	r2, r3, #5
 801a874:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a878:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a87c:	e035      	b.n	801a8ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801a87e:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a882:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801a886:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801a88a:	7a2a      	ldrb	r2, [r5, #8]
 801a88c:	ea42 0201 	orr.w	r2, r2, r1
 801a890:	f640 6109 	movw	r1, #3593	; 0xe09
 801a894:	bf1c      	itt	ne
 801a896:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801a89a:	b212      	sxthne	r2, r2
 801a89c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a8a0:	f023 0210 	bic.w	r2, r3, #16
 801a8a4:	428a      	cmp	r2, r1
 801a8a6:	d003      	beq.n	801a8b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801a8a8:	f640 6213 	movw	r2, #3603	; 0xe13
 801a8ac:	4293      	cmp	r3, r2
 801a8ae:	d129      	bne.n	801a904 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801a8b0:	7b6e      	ldrb	r6, [r5, #13]
 801a8b2:	4629      	mov	r1, r5
 801a8b4:	0076      	lsls	r6, r6, #1
 801a8b6:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a8ba:	7aae      	ldrb	r6, [r5, #10]
 801a8bc:	4316      	orrs	r6, r2
 801a8be:	f640 6213 	movw	r2, #3603	; 0xe13
 801a8c2:	4293      	cmp	r3, r2
 801a8c4:	4602      	mov	r2, r0
 801a8c6:	4620      	mov	r0, r4
 801a8c8:	bf16      	itet	ne
 801a8ca:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a8ce:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a8d2:	b29b      	uxthne	r3, r3
 801a8d4:	f7ff fefb 	bl	801a6ce <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a8d8:	7b43      	ldrb	r3, [r0, #13]
 801a8da:	7a82      	ldrb	r2, [r0, #10]
 801a8dc:	005b      	lsls	r3, r3, #1
 801a8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a8e2:	4313      	orrs	r3, r2
 801a8e4:	1af6      	subs	r6, r6, r3
 801a8e6:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801a8ea:	7b69      	ldrb	r1, [r5, #13]
 801a8ec:	00cb      	lsls	r3, r1, #3
 801a8ee:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a8f2:	7a2b      	ldrb	r3, [r5, #8]
 801a8f4:	4313      	orrs	r3, r2
 801a8f6:	064a      	lsls	r2, r1, #25
 801a8f8:	bf44      	itt	mi
 801a8fa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a8fe:	b21b      	sxthmi	r3, r3
 801a900:	1bdb      	subs	r3, r3, r7
 801a902:	e73f      	b.n	801a784 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801a904:	2300      	movs	r3, #0
 801a906:	e7b7      	b.n	801a878 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801a908:	3fc00079 	.word	0x3fc00079
 801a90c:	0802a50c 	.word	0x0802a50c
 801a910:	0802a77e 	.word	0x0802a77e
 801a914:	0802a515 	.word	0x0802a515

0801a918 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801a918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a91c:	4604      	mov	r4, r0
 801a91e:	b942      	cbnz	r2, 801a932 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801a920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a924:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801a928:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801a92c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a930:	e046      	b.n	801a9c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801a932:	7b51      	ldrb	r1, [r2, #13]
 801a934:	8893      	ldrh	r3, [r2, #4]
 801a936:	010f      	lsls	r7, r1, #4
 801a938:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801a93c:	79d7      	ldrb	r7, [r2, #7]
 801a93e:	4307      	orrs	r7, r0
 801a940:	2f04      	cmp	r7, #4
 801a942:	b2bd      	uxth	r5, r7
 801a944:	bfcc      	ite	gt
 801a946:	08bf      	lsrgt	r7, r7, #2
 801a948:	2701      	movle	r7, #1
 801a94a:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801a94e:	f200 80ab 	bhi.w	801aaa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801a952:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801a956:	4283      	cmp	r3, r0
 801a958:	d216      	bcs.n	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a95a:	f240 605b 	movw	r0, #1627	; 0x65b
 801a95e:	4283      	cmp	r3, r0
 801a960:	d859      	bhi.n	801aa16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801a962:	f240 6057 	movw	r0, #1623	; 0x657
 801a966:	4283      	cmp	r3, r0
 801a968:	d20e      	bcs.n	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a96a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a96e:	d24a      	bcs.n	801aa06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801a970:	f240 604e 	movw	r0, #1614	; 0x64e
 801a974:	4283      	cmp	r3, r0
 801a976:	d207      	bcs.n	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a978:	f240 601a 	movw	r0, #1562	; 0x61a
 801a97c:	4283      	cmp	r3, r0
 801a97e:	d02a      	beq.n	801a9d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801a980:	d821      	bhi.n	801a9c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801a982:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801a986:	d35b      	bcc.n	801aa40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a988:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801a98c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a990:	f040 80d0 	bne.w	801ab34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801a994:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801a998:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a99c:	f040 80ca 	bne.w	801ab34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801a9a0:	00cb      	lsls	r3, r1, #3
 801a9a2:	0649      	lsls	r1, r1, #25
 801a9a4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a9a8:	7a13      	ldrb	r3, [r2, #8]
 801a9aa:	ea43 0300 	orr.w	r3, r3, r0
 801a9ae:	bf44      	itt	mi
 801a9b0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a9b4:	b21b      	sxthmi	r3, r3
 801a9b6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a9ba:	1b5d      	subs	r5, r3, r5
 801a9bc:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a9c0:	4610      	mov	r0, r2
 801a9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9c6:	f240 604b 	movw	r0, #1611	; 0x64b
 801a9ca:	4283      	cmp	r3, r0
 801a9cc:	d338      	bcc.n	801aa40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a9ce:	f240 604c 	movw	r0, #1612	; 0x64c
 801a9d2:	4283      	cmp	r3, r0
 801a9d4:	d9d8      	bls.n	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801a9d6:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801a9da:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801a9de:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a9e2:	f040 80f2 	bne.w	801abca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801a9e6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a9ea:	f040 80ee 	bne.w	801abca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801a9ee:	00cb      	lsls	r3, r1, #3
 801a9f0:	064e      	lsls	r6, r1, #25
 801a9f2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a9f6:	7a13      	ldrb	r3, [r2, #8]
 801a9f8:	ea43 0300 	orr.w	r3, r3, r0
 801a9fc:	bf44      	itt	mi
 801a9fe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aa02:	b21b      	sxthmi	r3, r3
 801aa04:	e7d9      	b.n	801a9ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801aa06:	f240 6054 	movw	r0, #1620	; 0x654
 801aa0a:	4283      	cmp	r3, r0
 801aa0c:	d8e3      	bhi.n	801a9d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aa0e:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801aa12:	d9e0      	bls.n	801a9d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aa14:	e7b8      	b.n	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa16:	f240 6074 	movw	r0, #1652	; 0x674
 801aa1a:	4283      	cmp	r3, r0
 801aa1c:	d0b4      	beq.n	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa1e:	d82d      	bhi.n	801aa7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801aa20:	f240 605e 	movw	r0, #1630	; 0x65e
 801aa24:	4283      	cmp	r3, r0
 801aa26:	d804      	bhi.n	801aa32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801aa28:	f240 605d 	movw	r0, #1629	; 0x65d
 801aa2c:	4283      	cmp	r3, r0
 801aa2e:	d3d2      	bcc.n	801a9d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aa30:	e7aa      	b.n	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa32:	f240 605f 	movw	r0, #1631	; 0x65f
 801aa36:	4283      	cmp	r3, r0
 801aa38:	d0cd      	beq.n	801a9d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aa3a:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801aa3e:	d0a3      	beq.n	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa40:	00cb      	lsls	r3, r1, #3
 801aa42:	0649      	lsls	r1, r1, #25
 801aa44:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801aa48:	7a13      	ldrb	r3, [r2, #8]
 801aa4a:	ea43 0300 	orr.w	r3, r3, r0
 801aa4e:	bf44      	itt	mi
 801aa50:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aa54:	b21b      	sxthmi	r3, r3
 801aa56:	1b5d      	subs	r5, r3, r5
 801aa58:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801aa5c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801aa60:	7b53      	ldrb	r3, [r2, #13]
 801aa62:	015b      	lsls	r3, r3, #5
 801aa64:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801aa68:	7993      	ldrb	r3, [r2, #6]
 801aa6a:	430b      	orrs	r3, r1
 801aa6c:	2105      	movs	r1, #5
 801aa6e:	005b      	lsls	r3, r3, #1
 801aa70:	fb93 f3f1 	sdiv	r3, r3, r1
 801aa74:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801aa78:	440b      	add	r3, r1
 801aa7a:	e757      	b.n	801a92c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801aa7c:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801aa80:	4283      	cmp	r3, r0
 801aa82:	d809      	bhi.n	801aa98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801aa84:	f240 60df 	movw	r0, #1759	; 0x6df
 801aa88:	4283      	cmp	r3, r0
 801aa8a:	f4bf af7d 	bcs.w	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa8e:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801aa92:	2b05      	cmp	r3, #5
 801aa94:	d8d4      	bhi.n	801aa40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aa96:	e777      	b.n	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aa98:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801aa9c:	4283      	cmp	r3, r0
 801aa9e:	d09a      	beq.n	801a9d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aaa0:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801aaa4:	4283      	cmp	r3, r0
 801aaa6:	e7ca      	b.n	801aa3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801aaa8:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801aaac:	d22b      	bcs.n	801ab06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801aaae:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801aab2:	4283      	cmp	r3, r0
 801aab4:	d28f      	bcs.n	801a9d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aab6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801aaba:	4283      	cmp	r3, r0
 801aabc:	d816      	bhi.n	801aaec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801aabe:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801aac2:	4283      	cmp	r3, r0
 801aac4:	f4bf af60 	bcs.w	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aac8:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801aacc:	4283      	cmp	r3, r0
 801aace:	d80a      	bhi.n	801aae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801aad0:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801aad4:	4283      	cmp	r3, r0
 801aad6:	f4bf af57 	bcs.w	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801aada:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801aade:	4283      	cmp	r3, r0
 801aae0:	f43f af79 	beq.w	801a9d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801aae4:	e7ac      	b.n	801aa40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aae6:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801aaea:	e7f8      	b.n	801aade <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801aaec:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801aaf0:	4283      	cmp	r3, r0
 801aaf2:	d802      	bhi.n	801aafa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801aaf4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801aaf8:	e798      	b.n	801aa2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801aafa:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801aafe:	4283      	cmp	r3, r0
 801ab00:	f47f af42 	bne.w	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab04:	e767      	b.n	801a9d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab06:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ab0a:	4283      	cmp	r3, r0
 801ab0c:	f43f af63 	beq.w	801a9d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab10:	d802      	bhi.n	801ab18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801ab12:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ab16:	e7f2      	b.n	801aafe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801ab18:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801ab1c:	4283      	cmp	r3, r0
 801ab1e:	d805      	bhi.n	801ab2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801ab20:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801ab24:	4283      	cmp	r3, r0
 801ab26:	f4ff af2f 	bcc.w	801a988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ab2a:	e754      	b.n	801a9d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ab2c:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ab30:	4283      	cmp	r3, r0
 801ab32:	e7af      	b.n	801aa94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801ab34:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801ab38:	4617      	mov	r7, r2
 801ab3a:	f102 0808 	add.w	r8, r2, #8
 801ab3e:	4666      	mov	r6, ip
 801ab40:	6838      	ldr	r0, [r7, #0]
 801ab42:	3708      	adds	r7, #8
 801ab44:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ab48:	46e6      	mov	lr, ip
 801ab4a:	4547      	cmp	r7, r8
 801ab4c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ab50:	46f4      	mov	ip, lr
 801ab52:	d1f5      	bne.n	801ab40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801ab54:	6838      	ldr	r0, [r7, #0]
 801ab56:	f8ce 0000 	str.w	r0, [lr]
 801ab5a:	88b9      	ldrh	r1, [r7, #4]
 801ab5c:	f8ae 1004 	strh.w	r1, [lr, #4]
 801ab60:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801ab64:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ab68:	d009      	beq.n	801ab7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801ab6a:	7b51      	ldrb	r1, [r2, #13]
 801ab6c:	7992      	ldrb	r2, [r2, #6]
 801ab6e:	0149      	lsls	r1, r1, #5
 801ab70:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ab74:	4311      	orrs	r1, r2
 801ab76:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ab7a:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801ab7e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ab82:	d00d      	beq.n	801aba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801ab84:	442b      	add	r3, r5
 801ab86:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ab8a:	b29b      	uxth	r3, r3
 801ab8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ab90:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ab94:	10db      	asrs	r3, r3, #3
 801ab96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ab9a:	4313      	orrs	r3, r2
 801ab9c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801aba0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801aba4:	00cb      	lsls	r3, r1, #3
 801aba6:	064f      	lsls	r7, r1, #25
 801aba8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801abac:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801abb0:	ea43 0302 	orr.w	r3, r3, r2
 801abb4:	bf44      	itt	mi
 801abb6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801abba:	b21b      	sxthmi	r3, r3
 801abbc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801abc0:	1b5d      	subs	r5, r3, r5
 801abc2:	4632      	mov	r2, r6
 801abc4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801abc8:	e6fa      	b.n	801a9c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801abca:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801abce:	4694      	mov	ip, r2
 801abd0:	f102 0908 	add.w	r9, r2, #8
 801abd4:	4676      	mov	r6, lr
 801abd6:	f8dc 0000 	ldr.w	r0, [ip]
 801abda:	f10c 0c08 	add.w	ip, ip, #8
 801abde:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801abe2:	46f0      	mov	r8, lr
 801abe4:	45cc      	cmp	ip, r9
 801abe6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801abea:	46c6      	mov	lr, r8
 801abec:	d1f3      	bne.n	801abd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801abee:	f8dc 0000 	ldr.w	r0, [ip]
 801abf2:	f8c8 0000 	str.w	r0, [r8]
 801abf6:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801abfa:	f8a8 1004 	strh.w	r1, [r8, #4]
 801abfe:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801ac02:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ac06:	d009      	beq.n	801ac1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801ac08:	7b51      	ldrb	r1, [r2, #13]
 801ac0a:	7992      	ldrb	r2, [r2, #6]
 801ac0c:	0149      	lsls	r1, r1, #5
 801ac0e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ac12:	4311      	orrs	r1, r2
 801ac14:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ac18:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801ac1c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ac20:	d00d      	beq.n	801ac3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801ac22:	1bdb      	subs	r3, r3, r7
 801ac24:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ac28:	b29b      	uxth	r3, r3
 801ac2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ac2e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ac32:	10db      	asrs	r3, r3, #3
 801ac34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ac38:	4313      	orrs	r3, r2
 801ac3a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ac3e:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801ac42:	00cb      	lsls	r3, r1, #3
 801ac44:	0648      	lsls	r0, r1, #25
 801ac46:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ac4a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801ac4e:	ea43 0302 	orr.w	r3, r3, r2
 801ac52:	bf44      	itt	mi
 801ac54:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ac58:	b21b      	sxthmi	r3, r3
 801ac5a:	e7b1      	b.n	801abc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801ac5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801ac5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac60:	461e      	mov	r6, r3
 801ac62:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801ac64:	4604      	mov	r4, r0
 801ac66:	4617      	mov	r7, r2
 801ac68:	b92b      	cbnz	r3, 801ac76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801ac6a:	4b25      	ldr	r3, [pc, #148]	; (801ad00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801ac6c:	21c0      	movs	r1, #192	; 0xc0
 801ac6e:	4a25      	ldr	r2, [pc, #148]	; (801ad04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801ac70:	4825      	ldr	r0, [pc, #148]	; (801ad08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801ac72:	f00a ff81 	bl	8025b78 <__assert_func>
 801ac76:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ac78:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ac7c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ac80:	f7ec fe06 	bl	8007890 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ac84:	4605      	mov	r5, r0
 801ac86:	b918      	cbnz	r0, 801ac90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801ac88:	6030      	str	r0, [r6, #0]
 801ac8a:	4628      	mov	r0, r5
 801ac8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac90:	683b      	ldr	r3, [r7, #0]
 801ac92:	4601      	mov	r1, r0
 801ac94:	4638      	mov	r0, r7
 801ac96:	68db      	ldr	r3, [r3, #12]
 801ac98:	4798      	blx	r3
 801ac9a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ac9e:	4602      	mov	r2, r0
 801aca0:	6030      	str	r0, [r6, #0]
 801aca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801aca6:	d213      	bcs.n	801acd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801aca8:	4643      	mov	r3, r8
 801acaa:	4639      	mov	r1, r7
 801acac:	4620      	mov	r0, r4
 801acae:	f7ff fe33 	bl	801a918 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801acb2:	6030      	str	r0, [r6, #0]
 801acb4:	6833      	ldr	r3, [r6, #0]
 801acb6:	b143      	cbz	r3, 801acca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801acb8:	7b5a      	ldrb	r2, [r3, #13]
 801acba:	7a9b      	ldrb	r3, [r3, #10]
 801acbc:	0052      	lsls	r2, r2, #1
 801acbe:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801acc2:	4313      	orrs	r3, r2
 801acc4:	bf0c      	ite	eq
 801acc6:	2301      	moveq	r3, #1
 801acc8:	2300      	movne	r3, #0
 801acca:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801acce:	e7dc      	b.n	801ac8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801acd0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801acd4:	b29b      	uxth	r3, r3
 801acd6:	2b7f      	cmp	r3, #127	; 0x7f
 801acd8:	d804      	bhi.n	801ace4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801acda:	4639      	mov	r1, r7
 801acdc:	4620      	mov	r0, r4
 801acde:	f7ff fd01 	bl	801a6e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ace2:	e7e6      	b.n	801acb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801ace4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d0e3      	beq.n	801acb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801acec:	f640 1302 	movw	r3, #2306	; 0x902
 801acf0:	429d      	cmp	r5, r3
 801acf2:	d1df      	bne.n	801acb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801acf4:	4601      	mov	r1, r0
 801acf6:	4620      	mov	r0, r4
 801acf8:	f7ff fcc5 	bl	801a686 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801acfc:	e7d9      	b.n	801acb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801acfe:	bf00      	nop
 801ad00:	0802a50c 	.word	0x0802a50c
 801ad04:	0802a77e 	.word	0x0802a77e
 801ad08:	0802a515 	.word	0x0802a515

0801ad0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801ad0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad10:	461e      	mov	r6, r3
 801ad12:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801ad14:	4604      	mov	r4, r0
 801ad16:	4617      	mov	r7, r2
 801ad18:	b92b      	cbnz	r3, 801ad26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801ad1a:	4b26      	ldr	r3, [pc, #152]	; (801adb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801ad1c:	21c0      	movs	r1, #192	; 0xc0
 801ad1e:	4a26      	ldr	r2, [pc, #152]	; (801adb8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801ad20:	4826      	ldr	r0, [pc, #152]	; (801adbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801ad22:	f00a ff29 	bl	8025b78 <__assert_func>
 801ad26:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ad28:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ad2c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ad30:	f7ec fdae 	bl	8007890 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ad34:	4605      	mov	r5, r0
 801ad36:	b918      	cbnz	r0, 801ad40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801ad38:	6030      	str	r0, [r6, #0]
 801ad3a:	4628      	mov	r0, r5
 801ad3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad40:	683b      	ldr	r3, [r7, #0]
 801ad42:	4601      	mov	r1, r0
 801ad44:	4638      	mov	r0, r7
 801ad46:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801ad4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ad4e:	47c8      	blx	r9
 801ad50:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ad54:	4602      	mov	r2, r0
 801ad56:	6030      	str	r0, [r6, #0]
 801ad58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ad5c:	d213      	bcs.n	801ad86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801ad5e:	4643      	mov	r3, r8
 801ad60:	4639      	mov	r1, r7
 801ad62:	4620      	mov	r0, r4
 801ad64:	f7ff fdd8 	bl	801a918 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ad68:	6030      	str	r0, [r6, #0]
 801ad6a:	6833      	ldr	r3, [r6, #0]
 801ad6c:	b143      	cbz	r3, 801ad80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801ad6e:	7b5a      	ldrb	r2, [r3, #13]
 801ad70:	7a9b      	ldrb	r3, [r3, #10]
 801ad72:	0052      	lsls	r2, r2, #1
 801ad74:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ad78:	4313      	orrs	r3, r2
 801ad7a:	bf0c      	ite	eq
 801ad7c:	2301      	moveq	r3, #1
 801ad7e:	2300      	movne	r3, #0
 801ad80:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ad84:	e7d9      	b.n	801ad3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801ad86:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ad8a:	b29b      	uxth	r3, r3
 801ad8c:	2b7f      	cmp	r3, #127	; 0x7f
 801ad8e:	d804      	bhi.n	801ad9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801ad90:	4639      	mov	r1, r7
 801ad92:	4620      	mov	r0, r4
 801ad94:	f7ff fca6 	bl	801a6e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ad98:	e7e6      	b.n	801ad68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801ad9a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d0e3      	beq.n	801ad6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801ada2:	f640 1302 	movw	r3, #2306	; 0x902
 801ada6:	429d      	cmp	r5, r3
 801ada8:	d1df      	bne.n	801ad6a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801adaa:	4601      	mov	r1, r0
 801adac:	4620      	mov	r0, r4
 801adae:	f7ff fc6a 	bl	801a686 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801adb2:	e7d9      	b.n	801ad68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801adb4:	0802a50c 	.word	0x0802a50c
 801adb8:	0802a77e 	.word	0x0802a77e
 801adbc:	0802a515 	.word	0x0802a515

0801adc0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801adc0:	b510      	push	{r4, lr}
 801adc2:	4604      	mov	r4, r0
 801adc4:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801adc8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801adca:	b9d9      	cbnz	r1, 801ae04 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801adcc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801adce:	2b0a      	cmp	r3, #10
 801add0:	d037      	beq.n	801ae42 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801add2:	4620      	mov	r0, r4
 801add4:	f7ff fc16 	bl	801a604 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801add8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801adda:	2b09      	cmp	r3, #9
 801addc:	d906      	bls.n	801adec <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801adde:	4b19      	ldr	r3, [pc, #100]	; (801ae44 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801ade0:	f44f 7182 	mov.w	r1, #260	; 0x104
 801ade4:	4a18      	ldr	r2, [pc, #96]	; (801ae48 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801ade6:	4819      	ldr	r0, [pc, #100]	; (801ae4c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801ade8:	f00a fec6 	bl	8025b78 <__assert_func>
 801adec:	1c5a      	adds	r2, r3, #1
 801adee:	8722      	strh	r2, [r4, #56]	; 0x38
 801adf0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801adf2:	4413      	add	r3, r2
 801adf4:	b29b      	uxth	r3, r3
 801adf6:	2b09      	cmp	r3, #9
 801adf8:	bf88      	it	hi
 801adfa:	3b0a      	subhi	r3, #10
 801adfc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ae00:	8458      	strh	r0, [r3, #34]	; 0x22
 801ae02:	e7e3      	b.n	801adcc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801ae04:	2b0a      	cmp	r3, #10
 801ae06:	d01c      	beq.n	801ae42 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801ae08:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801ae0a:	3901      	subs	r1, #1
 801ae0c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801ae10:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801ae12:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801ae16:	1c51      	adds	r1, r2, #1
 801ae18:	b289      	uxth	r1, r1
 801ae1a:	2901      	cmp	r1, #1
 801ae1c:	bf8a      	itet	hi
 801ae1e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ae22:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801ae24:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801ae26:	2b09      	cmp	r3, #9
 801ae28:	d8d9      	bhi.n	801adde <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801ae2a:	1c5a      	adds	r2, r3, #1
 801ae2c:	8722      	strh	r2, [r4, #56]	; 0x38
 801ae2e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ae30:	4413      	add	r3, r2
 801ae32:	b29b      	uxth	r3, r3
 801ae34:	2b09      	cmp	r3, #9
 801ae36:	bf88      	it	hi
 801ae38:	3b0a      	subhi	r3, #10
 801ae3a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ae3e:	8458      	strh	r0, [r3, #34]	; 0x22
 801ae40:	e7c0      	b.n	801adc4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801ae42:	bd10      	pop	{r4, pc}
 801ae44:	0802a541 	.word	0x0802a541
 801ae48:	0802a8d4 	.word	0x0802a8d4
 801ae4c:	0802a515 	.word	0x0802a515

0801ae50 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ae50:	b538      	push	{r3, r4, r5, lr}
 801ae52:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801ae54:	4604      	mov	r4, r0
 801ae56:	b92a      	cbnz	r2, 801ae64 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801ae58:	4b13      	ldr	r3, [pc, #76]	; (801aea8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801ae5a:	21d5      	movs	r1, #213	; 0xd5
 801ae5c:	4a13      	ldr	r2, [pc, #76]	; (801aeac <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801ae5e:	4814      	ldr	r0, [pc, #80]	; (801aeb0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801ae60:	f00a fe8a 	bl	8025b78 <__assert_func>
 801ae64:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ae66:	3a01      	subs	r2, #1
 801ae68:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801ae6c:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801ae6e:	8702      	strh	r2, [r0, #56]	; 0x38
 801ae70:	1c5a      	adds	r2, r3, #1
 801ae72:	b292      	uxth	r2, r2
 801ae74:	2a09      	cmp	r2, #9
 801ae76:	bf8a      	itet	hi
 801ae78:	3b09      	subhi	r3, #9
 801ae7a:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801ae7c:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801ae7e:	f7ff ff9f 	bl	801adc0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ae82:	8c23      	ldrh	r3, [r4, #32]
 801ae84:	2b01      	cmp	r3, #1
 801ae86:	bf9c      	itt	ls
 801ae88:	3301      	addls	r3, #1
 801ae8a:	8423      	strhls	r3, [r4, #32]
 801ae8c:	8be3      	ldrh	r3, [r4, #30]
 801ae8e:	b90b      	cbnz	r3, 801ae94 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801ae90:	2302      	movs	r3, #2
 801ae92:	83e3      	strh	r3, [r4, #30]
 801ae94:	8be3      	ldrh	r3, [r4, #30]
 801ae96:	4628      	mov	r0, r5
 801ae98:	3b01      	subs	r3, #1
 801ae9a:	b29b      	uxth	r3, r3
 801ae9c:	83e3      	strh	r3, [r4, #30]
 801ae9e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801aea2:	8365      	strh	r5, [r4, #26]
 801aea4:	bd38      	pop	{r3, r4, r5, pc}
 801aea6:	bf00      	nop
 801aea8:	0802a50c 	.word	0x0802a50c
 801aeac:	0802a829 	.word	0x0802a829
 801aeb0:	0802a515 	.word	0x0802a515

0801aeb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801aeb4:	428a      	cmp	r2, r1
 801aeb6:	b538      	push	{r3, r4, r5, lr}
 801aeb8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801aeba:	d90c      	bls.n	801aed6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801aebc:	b92c      	cbnz	r4, 801aeca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801aebe:	4b1c      	ldr	r3, [pc, #112]	; (801af30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801aec0:	21e1      	movs	r1, #225	; 0xe1
 801aec2:	4a1c      	ldr	r2, [pc, #112]	; (801af34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801aec4:	481c      	ldr	r0, [pc, #112]	; (801af38 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801aec6:	f00a fe57 	bl	8025b78 <__assert_func>
 801aeca:	3c01      	subs	r4, #1
 801aecc:	4b1b      	ldr	r3, [pc, #108]	; (801af3c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801aece:	4a1c      	ldr	r2, [pc, #112]	; (801af40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801aed0:	21c5      	movs	r1, #197	; 0xc5
 801aed2:	8704      	strh	r4, [r0, #56]	; 0x38
 801aed4:	e7f6      	b.n	801aec4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801aed6:	428c      	cmp	r4, r1
 801aed8:	d203      	bcs.n	801aee2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801aeda:	4b1a      	ldr	r3, [pc, #104]	; (801af44 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801aedc:	21cb      	movs	r1, #203	; 0xcb
 801aede:	4a1a      	ldr	r2, [pc, #104]	; (801af48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801aee0:	e7f0      	b.n	801aec4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801aee2:	1a64      	subs	r4, r4, r1
 801aee4:	250a      	movs	r5, #10
 801aee6:	8704      	strh	r4, [r0, #56]	; 0x38
 801aee8:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801aeea:	4421      	add	r1, r4
 801aeec:	b289      	uxth	r1, r1
 801aeee:	2909      	cmp	r1, #9
 801aef0:	bf88      	it	hi
 801aef2:	390a      	subhi	r1, #10
 801aef4:	86c1      	strh	r1, [r0, #54]	; 0x36
 801aef6:	b1ba      	cbz	r2, 801af28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801aef8:	3a01      	subs	r2, #1
 801aefa:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801aefc:	b292      	uxth	r2, r2
 801aefe:	2909      	cmp	r1, #9
 801af00:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801af04:	d903      	bls.n	801af0e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801af06:	4b11      	ldr	r3, [pc, #68]	; (801af4c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801af08:	21e6      	movs	r1, #230	; 0xe6
 801af0a:	4a11      	ldr	r2, [pc, #68]	; (801af50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801af0c:	e7da      	b.n	801aec4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801af0e:	3101      	adds	r1, #1
 801af10:	8701      	strh	r1, [r0, #56]	; 0x38
 801af12:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801af14:	b901      	cbnz	r1, 801af18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801af16:	86c5      	strh	r5, [r0, #54]	; 0x36
 801af18:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801af1a:	3901      	subs	r1, #1
 801af1c:	b289      	uxth	r1, r1
 801af1e:	86c1      	strh	r1, [r0, #54]	; 0x36
 801af20:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801af24:	844c      	strh	r4, [r1, #34]	; 0x22
 801af26:	e7e6      	b.n	801aef6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801af28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af2c:	f7ff bf48 	b.w	801adc0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801af30:	0802a50c 	.word	0x0802a50c
 801af34:	0802a602 	.word	0x0802a602
 801af38:	0802a515 	.word	0x0802a515
 801af3c:	0802a54d 	.word	0x0802a54d
 801af40:	0802a6ac 	.word	0x0802a6ac
 801af44:	0802a55b 	.word	0x0802a55b
 801af48:	0802a983 	.word	0x0802a983
 801af4c:	0802a567 	.word	0x0802a567
 801af50:	0802a57a 	.word	0x0802a57a

0801af54 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801af54:	3a01      	subs	r2, #1
 801af56:	b570      	push	{r4, r5, r6, lr}
 801af58:	b292      	uxth	r2, r2
 801af5a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801af5e:	42b2      	cmp	r2, r6
 801af60:	d019      	beq.n	801af96 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801af62:	8c04      	ldrh	r4, [r0, #32]
 801af64:	f831 5b02 	ldrh.w	r5, [r1], #2
 801af68:	4294      	cmp	r4, r2
 801af6a:	d805      	bhi.n	801af78 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801af6c:	4b19      	ldr	r3, [pc, #100]	; (801afd4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801af6e:	4a1a      	ldr	r2, [pc, #104]	; (801afd8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801af70:	21c5      	movs	r1, #197	; 0xc5
 801af72:	481a      	ldr	r0, [pc, #104]	; (801afdc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801af74:	f00a fe00 	bl	8025b78 <__assert_func>
 801af78:	8bc4      	ldrh	r4, [r0, #30]
 801af7a:	4414      	add	r4, r2
 801af7c:	3a01      	subs	r2, #1
 801af7e:	b2a4      	uxth	r4, r4
 801af80:	b292      	uxth	r2, r2
 801af82:	2c01      	cmp	r4, #1
 801af84:	bf88      	it	hi
 801af86:	3c02      	subhi	r4, #2
 801af88:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801af8c:	8b64      	ldrh	r4, [r4, #26]
 801af8e:	42ac      	cmp	r4, r5
 801af90:	d0e5      	beq.n	801af5e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801af92:	2000      	movs	r0, #0
 801af94:	bd70      	pop	{r4, r5, r6, pc}
 801af96:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801af9a:	2400      	movs	r4, #0
 801af9c:	4413      	add	r3, r2
 801af9e:	b2a2      	uxth	r2, r4
 801afa0:	429a      	cmp	r2, r3
 801afa2:	da14      	bge.n	801afce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801afa4:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801afa6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801afaa:	4296      	cmp	r6, r2
 801afac:	d802      	bhi.n	801afb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801afae:	4b09      	ldr	r3, [pc, #36]	; (801afd4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801afb0:	4a0b      	ldr	r2, [pc, #44]	; (801afe0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801afb2:	e7dd      	b.n	801af70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801afb4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801afb6:	3401      	adds	r4, #1
 801afb8:	4432      	add	r2, r6
 801afba:	b292      	uxth	r2, r2
 801afbc:	2a09      	cmp	r2, #9
 801afbe:	bf88      	it	hi
 801afc0:	3a0a      	subhi	r2, #10
 801afc2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801afc6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801afc8:	42aa      	cmp	r2, r5
 801afca:	d0e8      	beq.n	801af9e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801afcc:	e7e1      	b.n	801af92 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801afce:	2001      	movs	r0, #1
 801afd0:	e7e0      	b.n	801af94 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801afd2:	bf00      	nop
 801afd4:	0802a54d 	.word	0x0802a54d
 801afd8:	0802aa07 	.word	0x0802aa07
 801afdc:	0802a515 	.word	0x0802a515
 801afe0:	0802a6ac 	.word	0x0802a6ac

0801afe4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801afe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afe8:	4605      	mov	r5, r0
 801afea:	4616      	mov	r6, r2
 801afec:	1c8c      	adds	r4, r1, #2
 801afee:	8809      	ldrh	r1, [r1, #0]
 801aff0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801aff4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801aff8:	42b3      	cmp	r3, r6
 801affa:	d124      	bne.n	801b046 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801affc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801b000:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801b004:	f001 070f 	and.w	r7, r1, #15
 801b008:	4652      	mov	r2, sl
 801b00a:	f8cd 8000 	str.w	r8, [sp]
 801b00e:	464b      	mov	r3, r9
 801b010:	4621      	mov	r1, r4
 801b012:	4628      	mov	r0, r5
 801b014:	f7ff ff9e 	bl	801af54 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801b018:	4683      	mov	fp, r0
 801b01a:	b168      	cbz	r0, 801b038 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801b01c:	eb0a 0109 	add.w	r1, sl, r9
 801b020:	463a      	mov	r2, r7
 801b022:	4628      	mov	r0, r5
 801b024:	4441      	add	r1, r8
 801b026:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801b02a:	4649      	mov	r1, r9
 801b02c:	f7ff ff42 	bl	801aeb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801b030:	4658      	mov	r0, fp
 801b032:	b003      	add	sp, #12
 801b034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b038:	eb07 010a 	add.w	r1, r7, sl
 801b03c:	4449      	add	r1, r9
 801b03e:	4441      	add	r1, r8
 801b040:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801b044:	e7d2      	b.n	801afec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801b046:	f04f 0b00 	mov.w	fp, #0
 801b04a:	e7f1      	b.n	801b030 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801b04c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801b04c:	b570      	push	{r4, r5, r6, lr}
 801b04e:	8810      	ldrh	r0, [r2, #0]
 801b050:	4298      	cmp	r0, r3
 801b052:	d817      	bhi.n	801b084 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b054:	1e48      	subs	r0, r1, #1
 801b056:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b05a:	4298      	cmp	r0, r3
 801b05c:	d312      	bcc.n	801b084 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b05e:	2400      	movs	r4, #0
 801b060:	428c      	cmp	r4, r1
 801b062:	d20f      	bcs.n	801b084 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b064:	1860      	adds	r0, r4, r1
 801b066:	1040      	asrs	r0, r0, #1
 801b068:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b06c:	0085      	lsls	r5, r0, #2
 801b06e:	42b3      	cmp	r3, r6
 801b070:	d902      	bls.n	801b078 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b072:	3001      	adds	r0, #1
 801b074:	b284      	uxth	r4, r0
 801b076:	e7f3      	b.n	801b060 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b078:	d201      	bcs.n	801b07e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b07a:	b281      	uxth	r1, r0
 801b07c:	e7f0      	b.n	801b060 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b07e:	442a      	add	r2, r5
 801b080:	8850      	ldrh	r0, [r2, #2]
 801b082:	bd70      	pop	{r4, r5, r6, pc}
 801b084:	2000      	movs	r0, #0
 801b086:	e7fc      	b.n	801b082 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b088 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b08c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801b08e:	4604      	mov	r4, r0
 801b090:	260b      	movs	r6, #11
 801b092:	886f      	ldrh	r7, [r5, #2]
 801b094:	087f      	lsrs	r7, r7, #1
 801b096:	3e01      	subs	r6, #1
 801b098:	d01b      	beq.n	801b0d2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b09a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801b09c:	b92b      	cbnz	r3, 801b0aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801b09e:	4b0e      	ldr	r3, [pc, #56]	; (801b0d8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801b0a0:	21c0      	movs	r1, #192	; 0xc0
 801b0a2:	4a0e      	ldr	r2, [pc, #56]	; (801b0dc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801b0a4:	480e      	ldr	r0, [pc, #56]	; (801b0e0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801b0a6:	f00a fd67 	bl	8025b78 <__assert_func>
 801b0aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b0ac:	462a      	mov	r2, r5
 801b0ae:	4639      	mov	r1, r7
 801b0b0:	4620      	mov	r0, r4
 801b0b2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b0b6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801b0ba:	4643      	mov	r3, r8
 801b0bc:	f7ff ffc6 	bl	801b04c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b0c0:	b138      	cbz	r0, 801b0d2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801b0c2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b0c6:	4642      	mov	r2, r8
 801b0c8:	4620      	mov	r0, r4
 801b0ca:	f7ff ff8b 	bl	801afe4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b0ce:	2800      	cmp	r0, #0
 801b0d0:	d1e1      	bne.n	801b096 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0d6:	bf00      	nop
 801b0d8:	0802a50c 	.word	0x0802a50c
 801b0dc:	0802a77e 	.word	0x0802a77e
 801b0e0:	0802a515 	.word	0x0802a515

0801b0e4 <_ZN8touchgfx8ceil28_4El>:
 801b0e4:	f110 030f 	adds.w	r3, r0, #15
 801b0e8:	d401      	bmi.n	801b0ee <_ZN8touchgfx8ceil28_4El+0xa>
 801b0ea:	1118      	asrs	r0, r3, #4
 801b0ec:	4770      	bx	lr
 801b0ee:	2210      	movs	r2, #16
 801b0f0:	f1c0 0001 	rsb	r0, r0, #1
 801b0f4:	fb93 f3f2 	sdiv	r3, r3, r2
 801b0f8:	f010 000f 	ands.w	r0, r0, #15
 801b0fc:	bf18      	it	ne
 801b0fe:	2001      	movne	r0, #1
 801b100:	1a18      	subs	r0, r3, r0
 801b102:	4770      	bx	lr

0801b104 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801b104:	2900      	cmp	r1, #0
 801b106:	b538      	push	{r3, r4, r5, lr}
 801b108:	dc05      	bgt.n	801b116 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801b10a:	4b0f      	ldr	r3, [pc, #60]	; (801b148 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801b10c:	21f7      	movs	r1, #247	; 0xf7
 801b10e:	4a0f      	ldr	r2, [pc, #60]	; (801b14c <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801b110:	480f      	ldr	r0, [pc, #60]	; (801b150 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801b112:	f00a fd31 	bl	8025b78 <__assert_func>
 801b116:	2800      	cmp	r0, #0
 801b118:	db06      	blt.n	801b128 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801b11a:	fb90 f4f1 	sdiv	r4, r0, r1
 801b11e:	fb01 0114 	mls	r1, r1, r4, r0
 801b122:	6014      	str	r4, [r2, #0]
 801b124:	6019      	str	r1, [r3, #0]
 801b126:	bd38      	pop	{r3, r4, r5, pc}
 801b128:	4240      	negs	r0, r0
 801b12a:	fb90 f4f1 	sdiv	r4, r0, r1
 801b12e:	4265      	negs	r5, r4
 801b130:	fb01 0014 	mls	r0, r1, r4, r0
 801b134:	6015      	str	r5, [r2, #0]
 801b136:	6018      	str	r0, [r3, #0]
 801b138:	2800      	cmp	r0, #0
 801b13a:	d0f4      	beq.n	801b126 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801b13c:	6810      	ldr	r0, [r2, #0]
 801b13e:	3801      	subs	r0, #1
 801b140:	6010      	str	r0, [r2, #0]
 801b142:	6818      	ldr	r0, [r3, #0]
 801b144:	1a09      	subs	r1, r1, r0
 801b146:	e7ed      	b.n	801b124 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801b148:	0802aad8 	.word	0x0802aad8
 801b14c:	0802ab17 	.word	0x0802ab17
 801b150:	0802aae8 	.word	0x0802aae8

0801b154 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801b154:	b570      	push	{r4, r5, r6, lr}
 801b156:	694a      	ldr	r2, [r1, #20]
 801b158:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801b15a:	684b      	ldr	r3, [r1, #4]
 801b15c:	1b54      	subs	r4, r2, r5
 801b15e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801b160:	f000 8106 	beq.w	801b370 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801b164:	1b9b      	subs	r3, r3, r6
 801b166:	d003      	beq.n	801b170 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b168:	4363      	muls	r3, r4
 801b16a:	2210      	movs	r2, #16
 801b16c:	fb93 f3f2 	sdiv	r3, r3, r2
 801b170:	680c      	ldr	r4, [r1, #0]
 801b172:	698a      	ldr	r2, [r1, #24]
 801b174:	1b65      	subs	r5, r4, r5
 801b176:	f000 80fd 	beq.w	801b374 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801b17a:	1b92      	subs	r2, r2, r6
 801b17c:	d003      	beq.n	801b186 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b17e:	436a      	muls	r2, r5
 801b180:	2410      	movs	r4, #16
 801b182:	fb92 f2f4 	sdiv	r2, r2, r4
 801b186:	1a9b      	subs	r3, r3, r2
 801b188:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801b3b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801b18c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b190:	460a      	mov	r2, r1
 801b192:	ee07 3a90 	vmov	s15, r3
 801b196:	f100 040c 	add.w	r4, r0, #12
 801b19a:	4603      	mov	r3, r0
 801b19c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b1a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b1a4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801b1a8:	eeb1 6a43 	vneg.f32	s12, s6
 801b1ac:	edd2 7a02 	vldr	s15, [r2, #8]
 801b1b0:	3214      	adds	r2, #20
 801b1b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b1b6:	ece3 6a01 	vstmia	r3!, {s13}
 801b1ba:	429c      	cmp	r4, r3
 801b1bc:	ed52 7a02 	vldr	s15, [r2, #-8]
 801b1c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b1c4:	edc3 7a02 	vstr	s15, [r3, #8]
 801b1c8:	ed52 7a01 	vldr	s15, [r2, #-4]
 801b1cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b1d0:	edc3 7a05 	vstr	s15, [r3, #20]
 801b1d4:	d1ea      	bne.n	801b1ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801b1d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b1d8:	698b      	ldr	r3, [r1, #24]
 801b1da:	edd0 4a02 	vldr	s9, [r0, #8]
 801b1de:	1a9b      	subs	r3, r3, r2
 801b1e0:	edd0 3a00 	vldr	s7, [r0]
 801b1e4:	edd0 6a01 	vldr	s13, [r0, #4]
 801b1e8:	ee07 3a90 	vmov	s15, r3
 801b1ec:	684b      	ldr	r3, [r1, #4]
 801b1ee:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801b1f2:	ed90 5a05 	vldr	s10, [r0, #20]
 801b1f6:	1a9b      	subs	r3, r3, r2
 801b1f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b1fc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801b200:	ed90 2a03 	vldr	s4, [r0, #12]
 801b204:	ee07 3a10 	vmov	s14, r3
 801b208:	edd0 5a04 	vldr	s11, [r0, #16]
 801b20c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b210:	ed90 1a07 	vldr	s2, [r0, #28]
 801b214:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b218:	edd0 2a06 	vldr	s5, [r0, #24]
 801b21c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b220:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801b224:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b228:	ee32 5a45 	vsub.f32	s10, s4, s10
 801b22c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b230:	ee67 7a83 	vmul.f32	s15, s15, s6
 801b234:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801b238:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b23a:	694a      	ldr	r2, [r1, #20]
 801b23c:	1b13      	subs	r3, r2, r4
 801b23e:	ee07 3a10 	vmov	s14, r3
 801b242:	680b      	ldr	r3, [r1, #0]
 801b244:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b248:	1b1b      	subs	r3, r3, r4
 801b24a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b24e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801b252:	ee07 3a10 	vmov	s14, r3
 801b256:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b25a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b25e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801b262:	ee64 4a86 	vmul.f32	s9, s9, s12
 801b266:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801b26a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b26c:	698b      	ldr	r3, [r1, #24]
 801b26e:	1a9b      	subs	r3, r3, r2
 801b270:	ee06 3a90 	vmov	s13, r3
 801b274:	684b      	ldr	r3, [r1, #4]
 801b276:	1a9b      	subs	r3, r3, r2
 801b278:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b27c:	ee07 3a10 	vmov	s14, r3
 801b280:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b284:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b288:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801b28c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b290:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b294:	ee66 6a83 	vmul.f32	s13, s13, s6
 801b298:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801b29c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b29e:	694a      	ldr	r2, [r1, #20]
 801b2a0:	1b13      	subs	r3, r2, r4
 801b2a2:	ee07 3a10 	vmov	s14, r3
 801b2a6:	680b      	ldr	r3, [r1, #0]
 801b2a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b2ac:	1b1b      	subs	r3, r3, r4
 801b2ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b2b2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801b2b6:	ee07 3a10 	vmov	s14, r3
 801b2ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b2be:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b2c2:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b2c6:	edd0 5a08 	vldr	s11, [r0, #32]
 801b2ca:	ee31 1a65 	vsub.f32	s2, s2, s11
 801b2ce:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801b2d2:	ee25 5a06 	vmul.f32	s10, s10, s12
 801b2d6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801b2da:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b2dc:	698b      	ldr	r3, [r1, #24]
 801b2de:	1a9b      	subs	r3, r3, r2
 801b2e0:	ee07 3a10 	vmov	s14, r3
 801b2e4:	684b      	ldr	r3, [r1, #4]
 801b2e6:	1a9b      	subs	r3, r3, r2
 801b2e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b2ec:	ee01 3a90 	vmov	s3, r3
 801b2f0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b2f4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b2f8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801b2fc:	ee61 1a84 	vmul.f32	s3, s3, s8
 801b300:	eea1 7a21 	vfma.f32	s14, s2, s3
 801b304:	ee27 7a03 	vmul.f32	s14, s14, s6
 801b308:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b30c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b30e:	694a      	ldr	r2, [r1, #20]
 801b310:	1b13      	subs	r3, r2, r4
 801b312:	ee03 3a10 	vmov	s6, r3
 801b316:	680b      	ldr	r3, [r1, #0]
 801b318:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b31c:	1b1b      	subs	r3, r3, r4
 801b31e:	ee23 3a04 	vmul.f32	s6, s6, s8
 801b322:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801b326:	ee03 3a10 	vmov	s6, r3
 801b32a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b32e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801b332:	eee1 5a04 	vfma.f32	s11, s2, s8
 801b336:	ee25 6a86 	vmul.f32	s12, s11, s12
 801b33a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801b33e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801b342:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801b346:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b34e:	dd13      	ble.n	801b378 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801b350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b354:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801b358:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b35a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801b35e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b366:	dd15      	ble.n	801b394 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801b368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b36c:	6403      	str	r3, [r0, #64]	; 0x40
 801b36e:	bd70      	pop	{r4, r5, r6, pc}
 801b370:	4623      	mov	r3, r4
 801b372:	e6fd      	b.n	801b170 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b374:	462a      	mov	r2, r5
 801b376:	e706      	b.n	801b186 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b378:	d502      	bpl.n	801b380 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801b37a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b37e:	e7e9      	b.n	801b354 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801b380:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801b384:	eea3 2a85 	vfma.f32	s4, s7, s10
 801b388:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801b38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b390:	dade      	bge.n	801b350 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801b392:	e7f2      	b.n	801b37a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801b394:	d502      	bpl.n	801b39c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801b396:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b39a:	e7e7      	b.n	801b36c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801b39c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801b3a0:	eee3 4a86 	vfma.f32	s9, s7, s12
 801b3a4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3ac:	dadc      	bge.n	801b368 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801b3ae:	e7f2      	b.n	801b396 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801b3b0:	3d800000 	.word	0x3d800000

0801b3b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801b3b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3b8:	f04f 0814 	mov.w	r8, #20
 801b3bc:	4604      	mov	r4, r0
 801b3be:	4617      	mov	r7, r2
 801b3c0:	460d      	mov	r5, r1
 801b3c2:	fb08 f903 	mul.w	r9, r8, r3
 801b3c6:	461e      	mov	r6, r3
 801b3c8:	eb02 0a09 	add.w	sl, r2, r9
 801b3cc:	f8da 0004 	ldr.w	r0, [sl, #4]
 801b3d0:	f7ff fe88 	bl	801b0e4 <_ZN8touchgfx8ceil28_4El>
 801b3d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b3d6:	6160      	str	r0, [r4, #20]
 801b3d8:	fb08 f803 	mul.w	r8, r8, r3
 801b3dc:	9001      	str	r0, [sp, #4]
 801b3de:	eb07 0b08 	add.w	fp, r7, r8
 801b3e2:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b3e6:	f7ff fe7d 	bl	801b0e4 <_ZN8touchgfx8ceil28_4El>
 801b3ea:	9a01      	ldr	r2, [sp, #4]
 801b3ec:	1a80      	subs	r0, r0, r2
 801b3ee:	61a0      	str	r0, [r4, #24]
 801b3f0:	2800      	cmp	r0, #0
 801b3f2:	f000 8088 	beq.w	801b506 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801b3f6:	f857 3009 	ldr.w	r3, [r7, r9]
 801b3fa:	f857 c008 	ldr.w	ip, [r7, r8]
 801b3fe:	f8db 0004 	ldr.w	r0, [fp, #4]
 801b402:	ebac 0c03 	sub.w	ip, ip, r3
 801b406:	f8da 1004 	ldr.w	r1, [sl, #4]
 801b40a:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801b40e:	1a40      	subs	r0, r0, r1
 801b410:	fb0b f202 	mul.w	r2, fp, r2
 801b414:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801b418:	fb0c 2211 	mls	r2, ip, r1, r2
 801b41c:	4641      	mov	r1, r8
 801b41e:	fb00 2003 	mla	r0, r0, r3, r2
 801b422:	f104 0310 	add.w	r3, r4, #16
 801b426:	4622      	mov	r2, r4
 801b428:	3801      	subs	r0, #1
 801b42a:	4440      	add	r0, r8
 801b42c:	f7ff fe6a 	bl	801b104 <_ZN8touchgfx11floorDivModEllRlS0_>
 801b430:	f104 0308 	add.w	r3, r4, #8
 801b434:	1d22      	adds	r2, r4, #4
 801b436:	4641      	mov	r1, r8
 801b438:	4658      	mov	r0, fp
 801b43a:	f7ff fe63 	bl	801b104 <_ZN8touchgfx11floorDivModEllRlS0_>
 801b43e:	f8c4 800c 	str.w	r8, [r4, #12]
 801b442:	6962      	ldr	r2, [r4, #20]
 801b444:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b448:	eddf 6a31 	vldr	s13, [pc, #196]	; 801b510 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b44c:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801b450:	6822      	ldr	r2, [r4, #0]
 801b452:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801b456:	ee07 3a10 	vmov	s14, r3
 801b45a:	f857 3009 	ldr.w	r3, [r7, r9]
 801b45e:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801b462:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b466:	ee07 3a90 	vmov	s15, r3
 801b46a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801b46e:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b476:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b47a:	edd3 6a00 	vldr	s13, [r3]
 801b47e:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b482:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801b486:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b48a:	edc4 6a07 	vstr	s13, [r4, #28]
 801b48e:	edd4 6a01 	vldr	s13, [r4, #4]
 801b492:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801b496:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b49a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801b49e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b4a2:	ed84 6a08 	vstr	s12, [r4, #32]
 801b4a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801b4a8:	6262      	str	r2, [r4, #36]	; 0x24
 801b4aa:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801b4ae:	ed93 6a03 	vldr	s12, [r3, #12]
 801b4b2:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b4b6:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801b4ba:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b4be:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801b4c2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801b4c6:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801b4ca:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b4ce:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801b4d2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801b4d4:	6322      	str	r2, [r4, #48]	; 0x30
 801b4d6:	ed93 6a06 	vldr	s12, [r3, #24]
 801b4da:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801b4de:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b4e2:	eeb0 7a46 	vmov.f32	s14, s12
 801b4e6:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801b4ea:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b4ee:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801b4f2:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801b4f6:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801b4fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b4fe:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801b502:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b504:	63e3      	str	r3, [r4, #60]	; 0x3c
 801b506:	4620      	mov	r0, r4
 801b508:	b003      	add	sp, #12
 801b50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b50e:	bf00      	nop
 801b510:	3d800000 	.word	0x3d800000

0801b514 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b514:	4602      	mov	r2, r0
 801b516:	b148      	cbz	r0, 801b52c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b518:	2300      	movs	r3, #0
 801b51a:	b298      	uxth	r0, r3
 801b51c:	3301      	adds	r3, #1
 801b51e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b522:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b526:	2900      	cmp	r1, #0
 801b528:	d1f7      	bne.n	801b51a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b52a:	4770      	bx	lr
 801b52c:	4770      	bx	lr

0801b52e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b52e:	b530      	push	{r4, r5, lr}
 801b530:	4604      	mov	r4, r0
 801b532:	b159      	cbz	r1, 801b54c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b534:	b148      	cbz	r0, 801b54a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b536:	2300      	movs	r3, #0
 801b538:	b298      	uxth	r0, r3
 801b53a:	4282      	cmp	r2, r0
 801b53c:	d905      	bls.n	801b54a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b53e:	5ccd      	ldrb	r5, [r1, r3]
 801b540:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b544:	3301      	adds	r3, #1
 801b546:	2d00      	cmp	r5, #0
 801b548:	d1f6      	bne.n	801b538 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b54a:	bd30      	pop	{r4, r5, pc}
 801b54c:	4608      	mov	r0, r1
 801b54e:	e7fc      	b.n	801b54a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b550 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801b550:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b552:	468c      	mov	ip, r1
 801b554:	b08b      	sub	sp, #44	; 0x2c
 801b556:	2100      	movs	r1, #0
 801b558:	ae01      	add	r6, sp, #4
 801b55a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b55e:	211f      	movs	r1, #31
 801b560:	fbb0 f7f3 	udiv	r7, r0, r3
 801b564:	fb03 0517 	mls	r5, r3, r7, r0
 801b568:	4638      	mov	r0, r7
 801b56a:	b2ec      	uxtb	r4, r5
 801b56c:	2d09      	cmp	r5, #9
 801b56e:	bfd4      	ite	le
 801b570:	3430      	addle	r4, #48	; 0x30
 801b572:	3457      	addgt	r4, #87	; 0x57
 801b574:	b2e4      	uxtb	r4, r4
 801b576:	558c      	strb	r4, [r1, r6]
 801b578:	1e4c      	subs	r4, r1, #1
 801b57a:	b92f      	cbnz	r7, 801b588 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801b57c:	4431      	add	r1, r6
 801b57e:	4660      	mov	r0, ip
 801b580:	f7ff ffd5 	bl	801b52e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b584:	b00b      	add	sp, #44	; 0x2c
 801b586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b588:	4621      	mov	r1, r4
 801b58a:	e7e9      	b.n	801b560 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801b58c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801b58c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b58e:	4607      	mov	r7, r0
 801b590:	b08b      	sub	sp, #44	; 0x2c
 801b592:	4608      	mov	r0, r1
 801b594:	b341      	cbz	r1, 801b5e8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b596:	1e99      	subs	r1, r3, #2
 801b598:	2922      	cmp	r1, #34	; 0x22
 801b59a:	d825      	bhi.n	801b5e8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b59c:	2100      	movs	r1, #0
 801b59e:	463c      	mov	r4, r7
 801b5a0:	261f      	movs	r6, #31
 801b5a2:	f10d 0c04 	add.w	ip, sp, #4
 801b5a6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b5aa:	1e71      	subs	r1, r6, #1
 801b5ac:	fb94 fef3 	sdiv	lr, r4, r3
 801b5b0:	fb03 441e 	mls	r4, r3, lr, r4
 801b5b4:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b5b8:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b5bc:	b2ec      	uxtb	r4, r5
 801b5be:	2d09      	cmp	r5, #9
 801b5c0:	bfd4      	ite	le
 801b5c2:	3430      	addle	r4, #48	; 0x30
 801b5c4:	3457      	addgt	r4, #87	; 0x57
 801b5c6:	b2e4      	uxtb	r4, r4
 801b5c8:	f80c 4006 	strb.w	r4, [ip, r6]
 801b5cc:	4674      	mov	r4, lr
 801b5ce:	b96c      	cbnz	r4, 801b5ec <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801b5d0:	2f00      	cmp	r7, #0
 801b5d2:	da05      	bge.n	801b5e0 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801b5d4:	ab0a      	add	r3, sp, #40	; 0x28
 801b5d6:	4419      	add	r1, r3
 801b5d8:	232d      	movs	r3, #45	; 0x2d
 801b5da:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b5de:	1eb1      	subs	r1, r6, #2
 801b5e0:	3101      	adds	r1, #1
 801b5e2:	4461      	add	r1, ip
 801b5e4:	f7ff ffa3 	bl	801b52e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b5e8:	b00b      	add	sp, #44	; 0x2c
 801b5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5ec:	460e      	mov	r6, r1
 801b5ee:	e7dc      	b.n	801b5aa <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801b5f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801b5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5f4:	b085      	sub	sp, #20
 801b5f6:	4691      	mov	r9, r2
 801b5f8:	6802      	ldr	r2, [r0, #0]
 801b5fa:	4688      	mov	r8, r1
 801b5fc:	461c      	mov	r4, r3
 801b5fe:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801b602:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b606:	4683      	mov	fp, r0
 801b608:	4610      	mov	r0, r2
 801b60a:	9103      	str	r1, [sp, #12]
 801b60c:	9302      	str	r3, [sp, #8]
 801b60e:	9201      	str	r2, [sp, #4]
 801b610:	f7ff ff80 	bl	801b514 <_ZN8touchgfx7Unicode6strlenEPKt>
 801b614:	f1b8 0f00 	cmp.w	r8, #0
 801b618:	bf0c      	ite	eq
 801b61a:	4684      	moveq	ip, r0
 801b61c:	f100 0c01 	addne.w	ip, r0, #1
 801b620:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801b624:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801b628:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b62a:	fa1f fc8c 	uxth.w	ip, ip
 801b62e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b630:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801b634:	9903      	ldr	r1, [sp, #12]
 801b636:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b63a:	d041      	beq.n	801b6c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b63c:	d834      	bhi.n	801b6a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801b63e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801b642:	d059      	beq.n	801b6f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801b644:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801b648:	d03a      	beq.n	801b6c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b64a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801b64e:	d034      	beq.n	801b6ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b650:	2400      	movs	r4, #0
 801b652:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b656:	3a01      	subs	r2, #1
 801b658:	b169      	cbz	r1, 801b676 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b65a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b65c:	458c      	cmp	ip, r1
 801b65e:	da09      	bge.n	801b674 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b660:	eba1 010c 	sub.w	r1, r1, ip
 801b664:	b289      	uxth	r1, r1
 801b666:	b933      	cbnz	r3, 801b676 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b668:	2e00      	cmp	r6, #0
 801b66a:	d051      	beq.n	801b710 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b66c:	2800      	cmp	r0, #0
 801b66e:	d04f      	beq.n	801b710 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b670:	440c      	add	r4, r1
 801b672:	b2a4      	uxth	r4, r4
 801b674:	2100      	movs	r1, #0
 801b676:	682b      	ldr	r3, [r5, #0]
 801b678:	4293      	cmp	r3, r2
 801b67a:	da07      	bge.n	801b68c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b67c:	f1b8 0f00 	cmp.w	r8, #0
 801b680:	d004      	beq.n	801b68c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b682:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801b686:	682b      	ldr	r3, [r5, #0]
 801b688:	3301      	adds	r3, #1
 801b68a:	602b      	str	r3, [r5, #0]
 801b68c:	2730      	movs	r7, #48	; 0x30
 801b68e:	2c00      	cmp	r4, #0
 801b690:	d04e      	beq.n	801b730 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b692:	682e      	ldr	r6, [r5, #0]
 801b694:	3c01      	subs	r4, #1
 801b696:	42b2      	cmp	r2, r6
 801b698:	b2a4      	uxth	r4, r4
 801b69a:	dd49      	ble.n	801b730 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b69c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b6a0:	682b      	ldr	r3, [r5, #0]
 801b6a2:	3301      	adds	r3, #1
 801b6a4:	602b      	str	r3, [r5, #0]
 801b6a6:	e7f2      	b.n	801b68e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801b6a8:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801b6ac:	d01d      	beq.n	801b6ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801b6ae:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801b6b2:	d002      	beq.n	801b6ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b6b4:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801b6b8:	e7c9      	b.n	801b64e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801b6ba:	4684      	mov	ip, r0
 801b6bc:	f04f 0800 	mov.w	r8, #0
 801b6c0:	2c00      	cmp	r4, #0
 801b6c2:	d0c6      	beq.n	801b652 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b6c4:	b947      	cbnz	r7, 801b6d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b6c6:	2801      	cmp	r0, #1
 801b6c8:	d106      	bne.n	801b6d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b6ca:	8814      	ldrh	r4, [r2, #0]
 801b6cc:	2c30      	cmp	r4, #48	; 0x30
 801b6ce:	bf02      	ittt	eq
 801b6d0:	3202      	addeq	r2, #2
 801b6d2:	4638      	moveq	r0, r7
 801b6d4:	f8cb 2000 	streq.w	r2, [fp]
 801b6d8:	45bc      	cmp	ip, r7
 801b6da:	da14      	bge.n	801b706 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801b6dc:	b2bf      	uxth	r7, r7
 801b6de:	eba7 040c 	sub.w	r4, r7, ip
 801b6e2:	46bc      	mov	ip, r7
 801b6e4:	b2a4      	uxth	r4, r4
 801b6e6:	2600      	movs	r6, #0
 801b6e8:	e7b3      	b.n	801b652 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b6ea:	4684      	mov	ip, r0
 801b6ec:	b16c      	cbz	r4, 801b70a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801b6ee:	42b8      	cmp	r0, r7
 801b6f0:	dd00      	ble.n	801b6f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801b6f2:	b2b8      	uxth	r0, r7
 801b6f4:	2400      	movs	r4, #0
 801b6f6:	e003      	b.n	801b700 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801b6f8:	f04f 0c01 	mov.w	ip, #1
 801b6fc:	2400      	movs	r4, #0
 801b6fe:	4660      	mov	r0, ip
 801b700:	4626      	mov	r6, r4
 801b702:	46a0      	mov	r8, r4
 801b704:	e7a5      	b.n	801b652 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b706:	2400      	movs	r4, #0
 801b708:	e7ed      	b.n	801b6e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801b70a:	4626      	mov	r6, r4
 801b70c:	46a0      	mov	r8, r4
 801b70e:	e7a0      	b.n	801b652 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b710:	2900      	cmp	r1, #0
 801b712:	d0b0      	beq.n	801b676 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b714:	2720      	movs	r7, #32
 801b716:	682e      	ldr	r6, [r5, #0]
 801b718:	2900      	cmp	r1, #0
 801b71a:	d0ac      	beq.n	801b676 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b71c:	3901      	subs	r1, #1
 801b71e:	4296      	cmp	r6, r2
 801b720:	b289      	uxth	r1, r1
 801b722:	daa7      	bge.n	801b674 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b724:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b728:	682b      	ldr	r3, [r5, #0]
 801b72a:	3301      	adds	r3, #1
 801b72c:	602b      	str	r3, [r5, #0]
 801b72e:	e7f2      	b.n	801b716 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801b730:	b188      	cbz	r0, 801b756 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b732:	682b      	ldr	r3, [r5, #0]
 801b734:	3801      	subs	r0, #1
 801b736:	429a      	cmp	r2, r3
 801b738:	b280      	uxth	r0, r0
 801b73a:	dd0c      	ble.n	801b756 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b73c:	f8db 3000 	ldr.w	r3, [fp]
 801b740:	1c9c      	adds	r4, r3, #2
 801b742:	f8cb 4000 	str.w	r4, [fp]
 801b746:	881c      	ldrh	r4, [r3, #0]
 801b748:	682b      	ldr	r3, [r5, #0]
 801b74a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801b74e:	682b      	ldr	r3, [r5, #0]
 801b750:	3301      	adds	r3, #1
 801b752:	602b      	str	r3, [r5, #0]
 801b754:	e7ec      	b.n	801b730 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b756:	2620      	movs	r6, #32
 801b758:	b151      	cbz	r1, 801b770 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b75a:	6828      	ldr	r0, [r5, #0]
 801b75c:	3901      	subs	r1, #1
 801b75e:	4282      	cmp	r2, r0
 801b760:	b289      	uxth	r1, r1
 801b762:	dd05      	ble.n	801b770 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b764:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801b768:	682b      	ldr	r3, [r5, #0]
 801b76a:	3301      	adds	r3, #1
 801b76c:	602b      	str	r3, [r5, #0]
 801b76e:	e7f3      	b.n	801b758 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801b770:	b005      	add	sp, #20
 801b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b776 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801b776:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b77a:	2400      	movs	r4, #0
 801b77c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801b780:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801b784:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801b788:	8014      	strh	r4, [r2, #0]
 801b78a:	701c      	strb	r4, [r3, #0]
 801b78c:	f888 4000 	strb.w	r4, [r8]
 801b790:	f88c 4000 	strb.w	r4, [ip]
 801b794:	f88e 4000 	strb.w	r4, [lr]
 801b798:	703c      	strb	r4, [r7, #0]
 801b79a:	6804      	ldr	r4, [r0, #0]
 801b79c:	b1a4      	cbz	r4, 801b7c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801b79e:	8824      	ldrh	r4, [r4, #0]
 801b7a0:	f04f 0901 	mov.w	r9, #1
 801b7a4:	b314      	cbz	r4, 801b7ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b7a6:	2c2b      	cmp	r4, #43	; 0x2b
 801b7a8:	d001      	beq.n	801b7ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801b7aa:	2c20      	cmp	r4, #32
 801b7ac:	d110      	bne.n	801b7d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801b7ae:	8014      	strh	r4, [r2, #0]
 801b7b0:	6804      	ldr	r4, [r0, #0]
 801b7b2:	b10c      	cbz	r4, 801b7b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801b7b4:	3402      	adds	r4, #2
 801b7b6:	6004      	str	r4, [r0, #0]
 801b7b8:	680c      	ldr	r4, [r1, #0]
 801b7ba:	b10c      	cbz	r4, 801b7c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801b7bc:	3401      	adds	r4, #1
 801b7be:	600c      	str	r4, [r1, #0]
 801b7c0:	6804      	ldr	r4, [r0, #0]
 801b7c2:	b17c      	cbz	r4, 801b7e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801b7c4:	8824      	ldrh	r4, [r4, #0]
 801b7c6:	e7ed      	b.n	801b7a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b7c8:	680c      	ldr	r4, [r1, #0]
 801b7ca:	b17c      	cbz	r4, 801b7ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b7cc:	7824      	ldrb	r4, [r4, #0]
 801b7ce:	e7e7      	b.n	801b7a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801b7d0:	2c2d      	cmp	r4, #45	; 0x2d
 801b7d2:	d102      	bne.n	801b7da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801b7d4:	f883 9000 	strb.w	r9, [r3]
 801b7d8:	e7ea      	b.n	801b7b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b7da:	2c23      	cmp	r4, #35	; 0x23
 801b7dc:	d107      	bne.n	801b7ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801b7de:	f888 9000 	strb.w	r9, [r8]
 801b7e2:	e7e5      	b.n	801b7b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b7e4:	680c      	ldr	r4, [r1, #0]
 801b7e6:	b10c      	cbz	r4, 801b7ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b7e8:	7824      	ldrb	r4, [r4, #0]
 801b7ea:	e7db      	b.n	801b7a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b7ec:	2400      	movs	r4, #0
 801b7ee:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801b7f2:	2b09      	cmp	r3, #9
 801b7f4:	d901      	bls.n	801b7fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801b7f6:	2c2a      	cmp	r4, #42	; 0x2a
 801b7f8:	d122      	bne.n	801b840 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b7fa:	2301      	movs	r3, #1
 801b7fc:	2c30      	cmp	r4, #48	; 0x30
 801b7fe:	f88e 3000 	strb.w	r3, [lr]
 801b802:	d10d      	bne.n	801b820 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b804:	f88c 3000 	strb.w	r3, [ip]
 801b808:	6803      	ldr	r3, [r0, #0]
 801b80a:	b10b      	cbz	r3, 801b810 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801b80c:	3302      	adds	r3, #2
 801b80e:	6003      	str	r3, [r0, #0]
 801b810:	680b      	ldr	r3, [r1, #0]
 801b812:	b10b      	cbz	r3, 801b818 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801b814:	3301      	adds	r3, #1
 801b816:	600b      	str	r3, [r1, #0]
 801b818:	6803      	ldr	r3, [r0, #0]
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d02f      	beq.n	801b87e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801b81e:	881c      	ldrh	r4, [r3, #0]
 801b820:	2c2a      	cmp	r4, #42	; 0x2a
 801b822:	d135      	bne.n	801b890 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b824:	f04f 33ff 	mov.w	r3, #4294967295
 801b828:	6033      	str	r3, [r6, #0]
 801b82a:	6803      	ldr	r3, [r0, #0]
 801b82c:	b10b      	cbz	r3, 801b832 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801b82e:	3302      	adds	r3, #2
 801b830:	6003      	str	r3, [r0, #0]
 801b832:	680b      	ldr	r3, [r1, #0]
 801b834:	b10b      	cbz	r3, 801b83a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801b836:	3301      	adds	r3, #1
 801b838:	600b      	str	r3, [r1, #0]
 801b83a:	6803      	ldr	r3, [r0, #0]
 801b83c:	b31b      	cbz	r3, 801b886 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801b83e:	881c      	ldrh	r4, [r3, #0]
 801b840:	2c2e      	cmp	r4, #46	; 0x2e
 801b842:	d11a      	bne.n	801b87a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b844:	2301      	movs	r3, #1
 801b846:	703b      	strb	r3, [r7, #0]
 801b848:	6803      	ldr	r3, [r0, #0]
 801b84a:	b10b      	cbz	r3, 801b850 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801b84c:	3302      	adds	r3, #2
 801b84e:	6003      	str	r3, [r0, #0]
 801b850:	680b      	ldr	r3, [r1, #0]
 801b852:	b10b      	cbz	r3, 801b858 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801b854:	3301      	adds	r3, #1
 801b856:	600b      	str	r3, [r1, #0]
 801b858:	6803      	ldr	r3, [r0, #0]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d036      	beq.n	801b8cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801b85e:	881b      	ldrh	r3, [r3, #0]
 801b860:	2b2a      	cmp	r3, #42	; 0x2a
 801b862:	d137      	bne.n	801b8d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b864:	f04f 33ff 	mov.w	r3, #4294967295
 801b868:	602b      	str	r3, [r5, #0]
 801b86a:	6803      	ldr	r3, [r0, #0]
 801b86c:	b10b      	cbz	r3, 801b872 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801b86e:	3302      	adds	r3, #2
 801b870:	6003      	str	r3, [r0, #0]
 801b872:	680b      	ldr	r3, [r1, #0]
 801b874:	b10b      	cbz	r3, 801b87a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b876:	3301      	adds	r3, #1
 801b878:	600b      	str	r3, [r1, #0]
 801b87a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b87e:	680c      	ldr	r4, [r1, #0]
 801b880:	b134      	cbz	r4, 801b890 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b882:	7824      	ldrb	r4, [r4, #0]
 801b884:	e7cc      	b.n	801b820 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b886:	680b      	ldr	r3, [r1, #0]
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d0f6      	beq.n	801b87a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b88c:	781c      	ldrb	r4, [r3, #0]
 801b88e:	e7d7      	b.n	801b840 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b890:	2300      	movs	r3, #0
 801b892:	220a      	movs	r2, #10
 801b894:	6033      	str	r3, [r6, #0]
 801b896:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b89a:	fa1f f38c 	uxth.w	r3, ip
 801b89e:	2b09      	cmp	r3, #9
 801b8a0:	d8ce      	bhi.n	801b840 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b8a2:	6833      	ldr	r3, [r6, #0]
 801b8a4:	fb02 c303 	mla	r3, r2, r3, ip
 801b8a8:	6033      	str	r3, [r6, #0]
 801b8aa:	6803      	ldr	r3, [r0, #0]
 801b8ac:	b10b      	cbz	r3, 801b8b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801b8ae:	3302      	adds	r3, #2
 801b8b0:	6003      	str	r3, [r0, #0]
 801b8b2:	680b      	ldr	r3, [r1, #0]
 801b8b4:	b10b      	cbz	r3, 801b8ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801b8b6:	3301      	adds	r3, #1
 801b8b8:	600b      	str	r3, [r1, #0]
 801b8ba:	6803      	ldr	r3, [r0, #0]
 801b8bc:	b10b      	cbz	r3, 801b8c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801b8be:	881c      	ldrh	r4, [r3, #0]
 801b8c0:	e7e9      	b.n	801b896 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b8c2:	680c      	ldr	r4, [r1, #0]
 801b8c4:	2c00      	cmp	r4, #0
 801b8c6:	d0e6      	beq.n	801b896 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b8c8:	7824      	ldrb	r4, [r4, #0]
 801b8ca:	e7e4      	b.n	801b896 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b8cc:	680b      	ldr	r3, [r1, #0]
 801b8ce:	b10b      	cbz	r3, 801b8d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b8d0:	781b      	ldrb	r3, [r3, #0]
 801b8d2:	e7c5      	b.n	801b860 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801b8d4:	2200      	movs	r2, #0
 801b8d6:	240a      	movs	r4, #10
 801b8d8:	602a      	str	r2, [r5, #0]
 801b8da:	3b30      	subs	r3, #48	; 0x30
 801b8dc:	682a      	ldr	r2, [r5, #0]
 801b8de:	b29e      	uxth	r6, r3
 801b8e0:	2e09      	cmp	r6, #9
 801b8e2:	d813      	bhi.n	801b90c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801b8e4:	fb04 3302 	mla	r3, r4, r2, r3
 801b8e8:	602b      	str	r3, [r5, #0]
 801b8ea:	6803      	ldr	r3, [r0, #0]
 801b8ec:	b10b      	cbz	r3, 801b8f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801b8ee:	3302      	adds	r3, #2
 801b8f0:	6003      	str	r3, [r0, #0]
 801b8f2:	680b      	ldr	r3, [r1, #0]
 801b8f4:	b10b      	cbz	r3, 801b8fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801b8f6:	3301      	adds	r3, #1
 801b8f8:	600b      	str	r3, [r1, #0]
 801b8fa:	6803      	ldr	r3, [r0, #0]
 801b8fc:	b10b      	cbz	r3, 801b902 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801b8fe:	881b      	ldrh	r3, [r3, #0]
 801b900:	e7eb      	b.n	801b8da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b902:	680b      	ldr	r3, [r1, #0]
 801b904:	2b00      	cmp	r3, #0
 801b906:	d0e8      	beq.n	801b8da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b908:	781b      	ldrb	r3, [r3, #0]
 801b90a:	e7e6      	b.n	801b8da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b90c:	2a06      	cmp	r2, #6
 801b90e:	bfa8      	it	ge
 801b910:	2206      	movge	r2, #6
 801b912:	602a      	str	r2, [r5, #0]
 801b914:	e7b1      	b.n	801b87a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801b916 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801b916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b91a:	b0a3      	sub	sp, #140	; 0x8c
 801b91c:	2600      	movs	r6, #0
 801b91e:	4607      	mov	r7, r0
 801b920:	4688      	mov	r8, r1
 801b922:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801b926:	4631      	mov	r1, r6
 801b928:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801b92a:	4648      	mov	r0, r9
 801b92c:	960d      	str	r6, [sp, #52]	; 0x34
 801b92e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b932:	2242      	movs	r2, #66	; 0x42
 801b934:	f00a f9ac 	bl	8025c90 <memset>
 801b938:	b15f      	cbz	r7, 801b952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801b93a:	f108 3aff 	add.w	sl, r8, #4294967295
 801b93e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b942:	b152      	cbz	r2, 801b95a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801b944:	8812      	ldrh	r2, [r2, #0]
 801b946:	b10a      	cbz	r2, 801b94c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b948:	459a      	cmp	sl, r3
 801b94a:	dc2e      	bgt.n	801b9aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801b94c:	2200      	movs	r2, #0
 801b94e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b952:	4638      	mov	r0, r7
 801b954:	b023      	add	sp, #140	; 0x8c
 801b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b95a:	9a08      	ldr	r2, [sp, #32]
 801b95c:	2a00      	cmp	r2, #0
 801b95e:	d0f5      	beq.n	801b94c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b960:	7812      	ldrb	r2, [r2, #0]
 801b962:	e7f0      	b.n	801b946 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801b964:	2d00      	cmp	r5, #0
 801b966:	d0ea      	beq.n	801b93e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b968:	782a      	ldrb	r2, [r5, #0]
 801b96a:	b142      	cbz	r2, 801b97e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801b96c:	2a25      	cmp	r2, #37	; 0x25
 801b96e:	d001      	beq.n	801b974 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801b970:	459a      	cmp	sl, r3
 801b972:	dc08      	bgt.n	801b986 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801b974:	f1bb 0f00 	cmp.w	fp, #0
 801b978:	d121      	bne.n	801b9be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801b97a:	2d00      	cmp	r5, #0
 801b97c:	d0df      	beq.n	801b93e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b97e:	782a      	ldrb	r2, [r5, #0]
 801b980:	f04f 0b00 	mov.w	fp, #0
 801b984:	e01d      	b.n	801b9c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801b986:	f1bb 0f00 	cmp.w	fp, #0
 801b98a:	d077      	beq.n	801ba7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801b98c:	f8bb 2000 	ldrh.w	r2, [fp]
 801b990:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b994:	f1bb 0f00 	cmp.w	fp, #0
 801b998:	d002      	beq.n	801b9a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801b99a:	f10b 0202 	add.w	r2, fp, #2
 801b99e:	9209      	str	r2, [sp, #36]	; 0x24
 801b9a0:	b10d      	cbz	r5, 801b9a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801b9a2:	3501      	adds	r5, #1
 801b9a4:	9508      	str	r5, [sp, #32]
 801b9a6:	3301      	adds	r3, #1
 801b9a8:	930d      	str	r3, [sp, #52]	; 0x34
 801b9aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b9ac:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801b9b0:	f1bb 0f00 	cmp.w	fp, #0
 801b9b4:	d0d6      	beq.n	801b964 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801b9b6:	f8bb 2000 	ldrh.w	r2, [fp]
 801b9ba:	2a00      	cmp	r2, #0
 801b9bc:	d1d6      	bne.n	801b96c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801b9be:	f8bb 2000 	ldrh.w	r2, [fp]
 801b9c2:	2a00      	cmp	r2, #0
 801b9c4:	d0bb      	beq.n	801b93e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b9c6:	459a      	cmp	sl, r3
 801b9c8:	ddb9      	ble.n	801b93e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b9ca:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801b9ce:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801b9d2:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801b9d6:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801b9da:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801b9de:	960e      	str	r6, [sp, #56]	; 0x38
 801b9e0:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801b9e4:	960f      	str	r6, [sp, #60]	; 0x3c
 801b9e6:	f1bb 0f00 	cmp.w	fp, #0
 801b9ea:	d002      	beq.n	801b9f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801b9ec:	f10b 0302 	add.w	r3, fp, #2
 801b9f0:	9309      	str	r3, [sp, #36]	; 0x24
 801b9f2:	b10d      	cbz	r5, 801b9f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801b9f4:	1c6b      	adds	r3, r5, #1
 801b9f6:	9308      	str	r3, [sp, #32]
 801b9f8:	ab0f      	add	r3, sp, #60	; 0x3c
 801b9fa:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801b9fe:	a908      	add	r1, sp, #32
 801ba00:	a809      	add	r0, sp, #36	; 0x24
 801ba02:	9305      	str	r3, [sp, #20]
 801ba04:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801ba08:	9304      	str	r3, [sp, #16]
 801ba0a:	ab0e      	add	r3, sp, #56	; 0x38
 801ba0c:	9303      	str	r3, [sp, #12]
 801ba0e:	ab0c      	add	r3, sp, #48	; 0x30
 801ba10:	9302      	str	r3, [sp, #8]
 801ba12:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801ba16:	9301      	str	r3, [sp, #4]
 801ba18:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ba1c:	9300      	str	r3, [sp, #0]
 801ba1e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801ba22:	f7ff fea8 	bl	801b776 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801ba26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	bfbf      	itttt	lt
 801ba2c:	6823      	ldrlt	r3, [r4, #0]
 801ba2e:	3404      	addlt	r4, #4
 801ba30:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ba34:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ba36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	bfbe      	ittt	lt
 801ba3c:	6823      	ldrlt	r3, [r4, #0]
 801ba3e:	3404      	addlt	r4, #4
 801ba40:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ba44:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ba48:	bfb8      	it	lt
 801ba4a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801ba4c:	b1d9      	cbz	r1, 801ba86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801ba4e:	880b      	ldrh	r3, [r1, #0]
 801ba50:	2b69      	cmp	r3, #105	; 0x69
 801ba52:	d01f      	beq.n	801ba94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ba54:	d82f      	bhi.n	801bab6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801ba56:	2b58      	cmp	r3, #88	; 0x58
 801ba58:	d01c      	beq.n	801ba94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ba5a:	d818      	bhi.n	801ba8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801ba5c:	2b25      	cmp	r3, #37	; 0x25
 801ba5e:	d034      	beq.n	801baca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801ba60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba62:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801ba66:	f1bb 0f00 	cmp.w	fp, #0
 801ba6a:	f000 80b7 	beq.w	801bbdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801ba6e:	f8bb 5000 	ldrh.w	r5, [fp]
 801ba72:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801ba76:	3301      	adds	r3, #1
 801ba78:	930d      	str	r3, [sp, #52]	; 0x34
 801ba7a:	e029      	b.n	801bad0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ba7c:	b10d      	cbz	r5, 801ba82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801ba7e:	782a      	ldrb	r2, [r5, #0]
 801ba80:	e786      	b.n	801b990 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ba82:	462a      	mov	r2, r5
 801ba84:	e784      	b.n	801b990 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ba86:	2a00      	cmp	r2, #0
 801ba88:	d0ea      	beq.n	801ba60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ba8a:	7813      	ldrb	r3, [r2, #0]
 801ba8c:	e7e0      	b.n	801ba50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801ba8e:	3b63      	subs	r3, #99	; 0x63
 801ba90:	2b01      	cmp	r3, #1
 801ba92:	d8e5      	bhi.n	801ba60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ba94:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801ba98:	b329      	cbz	r1, 801bae6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801ba9a:	880b      	ldrh	r3, [r1, #0]
 801ba9c:	2b69      	cmp	r3, #105	; 0x69
 801ba9e:	d063      	beq.n	801bb68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801baa0:	d825      	bhi.n	801baee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801baa2:	2b63      	cmp	r3, #99	; 0x63
 801baa4:	d038      	beq.n	801bb18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801baa6:	2b64      	cmp	r3, #100	; 0x64
 801baa8:	d05e      	beq.n	801bb68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801baaa:	2b58      	cmp	r3, #88	; 0x58
 801baac:	d07a      	beq.n	801bba4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801baae:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801bab2:	4625      	mov	r5, r4
 801bab4:	e036      	b.n	801bb24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bab6:	2b73      	cmp	r3, #115	; 0x73
 801bab8:	d0ec      	beq.n	801ba94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801baba:	d802      	bhi.n	801bac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801babc:	2b6f      	cmp	r3, #111	; 0x6f
 801babe:	d1cf      	bne.n	801ba60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801bac0:	e7e8      	b.n	801ba94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bac2:	2b75      	cmp	r3, #117	; 0x75
 801bac4:	d0e6      	beq.n	801ba94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801bac6:	2b78      	cmp	r3, #120	; 0x78
 801bac8:	e7f9      	b.n	801babe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801baca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bacc:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801bad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bad2:	b10b      	cbz	r3, 801bad8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801bad4:	3302      	adds	r3, #2
 801bad6:	9309      	str	r3, [sp, #36]	; 0x24
 801bad8:	9b08      	ldr	r3, [sp, #32]
 801bada:	2b00      	cmp	r3, #0
 801badc:	f43f af2f 	beq.w	801b93e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bae0:	3301      	adds	r3, #1
 801bae2:	9308      	str	r3, [sp, #32]
 801bae4:	e72b      	b.n	801b93e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801bae6:	2a00      	cmp	r2, #0
 801bae8:	d0e1      	beq.n	801baae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801baea:	7813      	ldrb	r3, [r2, #0]
 801baec:	e7d6      	b.n	801ba9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801baee:	2b73      	cmp	r3, #115	; 0x73
 801baf0:	d036      	beq.n	801bb60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801baf2:	d807      	bhi.n	801bb04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801baf4:	2b6f      	cmp	r3, #111	; 0x6f
 801baf6:	d1da      	bne.n	801baae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801baf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bafa:	1d25      	adds	r5, r4, #4
 801bafc:	2308      	movs	r3, #8
 801bafe:	eba8 0202 	sub.w	r2, r8, r2
 801bb02:	e049      	b.n	801bb98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801bb04:	2b75      	cmp	r3, #117	; 0x75
 801bb06:	d042      	beq.n	801bb8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801bb08:	2b78      	cmp	r3, #120	; 0x78
 801bb0a:	d1d0      	bne.n	801baae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801bb0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb0e:	1d25      	adds	r5, r4, #4
 801bb10:	2310      	movs	r3, #16
 801bb12:	eba8 0202 	sub.w	r2, r8, r2
 801bb16:	e03f      	b.n	801bb98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801bb18:	7823      	ldrb	r3, [r4, #0]
 801bb1a:	1d25      	adds	r5, r4, #4
 801bb1c:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801bb20:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801bb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb26:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	d051      	beq.n	801bbd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801bb2e:	881a      	ldrh	r2, [r3, #0]
 801bb30:	a80d      	add	r0, sp, #52	; 0x34
 801bb32:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801bb36:	462c      	mov	r4, r5
 801bb38:	9005      	str	r0, [sp, #20]
 801bb3a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801bb3e:	9004      	str	r0, [sp, #16]
 801bb40:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bb42:	9003      	str	r0, [sp, #12]
 801bb44:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801bb48:	9002      	str	r0, [sp, #8]
 801bb4a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bb4c:	9001      	str	r0, [sp, #4]
 801bb4e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801bb52:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801bb56:	9000      	str	r0, [sp, #0]
 801bb58:	a810      	add	r0, sp, #64	; 0x40
 801bb5a:	f7ff fd49 	bl	801b5f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801bb5e:	e7b7      	b.n	801bad0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801bb60:	1d25      	adds	r5, r4, #4
 801bb62:	6823      	ldr	r3, [r4, #0]
 801bb64:	9310      	str	r3, [sp, #64]	; 0x40
 801bb66:	e7dd      	b.n	801bb24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bb68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb6a:	230a      	movs	r3, #10
 801bb6c:	4649      	mov	r1, r9
 801bb6e:	6820      	ldr	r0, [r4, #0]
 801bb70:	eba8 0202 	sub.w	r2, r8, r2
 801bb74:	1d25      	adds	r5, r4, #4
 801bb76:	b292      	uxth	r2, r2
 801bb78:	f7ff fd08 	bl	801b58c <_ZN8touchgfx7Unicode4itoaElPtti>
 801bb7c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801bb80:	2b2d      	cmp	r3, #45	; 0x2d
 801bb82:	d1cf      	bne.n	801bb24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bb84:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801bb88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb8a:	3302      	adds	r3, #2
 801bb8c:	e7ea      	b.n	801bb64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801bb8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb90:	1d25      	adds	r5, r4, #4
 801bb92:	230a      	movs	r3, #10
 801bb94:	eba8 0202 	sub.w	r2, r8, r2
 801bb98:	b292      	uxth	r2, r2
 801bb9a:	4649      	mov	r1, r9
 801bb9c:	6820      	ldr	r0, [r4, #0]
 801bb9e:	f7ff fcd7 	bl	801b550 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801bba2:	e7bf      	b.n	801bb24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bba4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bba6:	2310      	movs	r3, #16
 801bba8:	4649      	mov	r1, r9
 801bbaa:	6820      	ldr	r0, [r4, #0]
 801bbac:	eba8 0202 	sub.w	r2, r8, r2
 801bbb0:	1d25      	adds	r5, r4, #4
 801bbb2:	b292      	uxth	r2, r2
 801bbb4:	f7ff fccc 	bl	801b550 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801bbb8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801bbbc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	d0af      	beq.n	801bb24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bbc4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801bbc8:	2919      	cmp	r1, #25
 801bbca:	d8f7      	bhi.n	801bbbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801bbcc:	3b20      	subs	r3, #32
 801bbce:	8013      	strh	r3, [r2, #0]
 801bbd0:	e7f4      	b.n	801bbbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801bbd2:	9a08      	ldr	r2, [sp, #32]
 801bbd4:	2a00      	cmp	r2, #0
 801bbd6:	d0ab      	beq.n	801bb30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801bbd8:	7812      	ldrb	r2, [r2, #0]
 801bbda:	e7a9      	b.n	801bb30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801bbdc:	2d00      	cmp	r5, #0
 801bbde:	f43f af48 	beq.w	801ba72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801bbe2:	782d      	ldrb	r5, [r5, #0]
 801bbe4:	e745      	b.n	801ba72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801bbe6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801bbe6:	b507      	push	{r0, r1, r2, lr}
 801bbe8:	9300      	str	r3, [sp, #0]
 801bbea:	4613      	mov	r3, r2
 801bbec:	2200      	movs	r2, #0
 801bbee:	f7ff fe92 	bl	801b916 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801bbf2:	b003      	add	sp, #12
 801bbf4:	f85d fb04 	ldr.w	pc, [sp], #4

0801bbf8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801bbf8:	b40c      	push	{r2, r3}
 801bbfa:	b507      	push	{r0, r1, r2, lr}
 801bbfc:	ab04      	add	r3, sp, #16
 801bbfe:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc02:	9301      	str	r3, [sp, #4]
 801bc04:	f7ff ffef 	bl	801bbe6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801bc08:	b003      	add	sp, #12
 801bc0a:	f85d eb04 	ldr.w	lr, [sp], #4
 801bc0e:	b002      	add	sp, #8
 801bc10:	4770      	bx	lr
	...

0801bc14 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801bc14:	4b01      	ldr	r3, [pc, #4]	; (801bc1c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801bc16:	6018      	str	r0, [r3, #0]
 801bc18:	4770      	bx	lr
 801bc1a:	bf00      	nop
 801bc1c:	2400c924 	.word	0x2400c924

0801bc20 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801bc20:	4b06      	ldr	r3, [pc, #24]	; (801bc3c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801bc22:	881a      	ldrh	r2, [r3, #0]
 801bc24:	4282      	cmp	r2, r0
 801bc26:	d807      	bhi.n	801bc38 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801bc28:	4b05      	ldr	r3, [pc, #20]	; (801bc40 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801bc2a:	881b      	ldrh	r3, [r3, #0]
 801bc2c:	4413      	add	r3, r2
 801bc2e:	4298      	cmp	r0, r3
 801bc30:	bfac      	ite	ge
 801bc32:	2000      	movge	r0, #0
 801bc34:	2001      	movlt	r0, #1
 801bc36:	4770      	bx	lr
 801bc38:	2000      	movs	r0, #0
 801bc3a:	4770      	bx	lr
 801bc3c:	2400c944 	.word	0x2400c944
 801bc40:	2400c948 	.word	0x2400c948

0801bc44 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801bc44:	b508      	push	{r3, lr}
 801bc46:	4601      	mov	r1, r0
 801bc48:	f7ff ffea 	bl	801bc20 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801bc4c:	b118      	cbz	r0, 801bc56 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801bc4e:	4b02      	ldr	r3, [pc, #8]	; (801bc58 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801bc56:	bd08      	pop	{r3, pc}
 801bc58:	2400c928 	.word	0x2400c928

0801bc5c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801bc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc60:	4d28      	ldr	r5, [pc, #160]	; (801bd04 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801bc62:	682b      	ldr	r3, [r5, #0]
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	d04a      	beq.n	801bcfe <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801bc68:	4a27      	ldr	r2, [pc, #156]	; (801bd08 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801bc6a:	4e28      	ldr	r6, [pc, #160]	; (801bd0c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801bc6c:	8810      	ldrh	r0, [r2, #0]
 801bc6e:	f8b6 8000 	ldrh.w	r8, [r6]
 801bc72:	4c27      	ldr	r4, [pc, #156]	; (801bd10 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801bc74:	4440      	add	r0, r8
 801bc76:	4f27      	ldr	r7, [pc, #156]	; (801bd14 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801bc78:	1c41      	adds	r1, r0, #1
 801bc7a:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801bc7e:	f021 0101 	bic.w	r1, r1, #1
 801bc82:	eb03 020e 	add.w	r2, r3, lr
 801bc86:	0409      	lsls	r1, r1, #16
 801bc88:	6022      	str	r2, [r4, #0]
 801bc8a:	0c09      	lsrs	r1, r1, #16
 801bc8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801bc90:	eb0e 010c 	add.w	r1, lr, ip
 801bc94:	185a      	adds	r2, r3, r1
 801bc96:	603a      	str	r2, [r7, #0]
 801bc98:	220e      	movs	r2, #14
 801bc9a:	fb02 f208 	mul.w	r2, r2, r8
 801bc9e:	3203      	adds	r2, #3
 801bca0:	f022 0203 	bic.w	r2, r2, #3
 801bca4:	4411      	add	r1, r2
 801bca6:	440b      	add	r3, r1
 801bca8:	491b      	ldr	r1, [pc, #108]	; (801bd18 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801bcaa:	600b      	str	r3, [r1, #0]
 801bcac:	2300      	movs	r3, #0
 801bcae:	491b      	ldr	r1, [pc, #108]	; (801bd1c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801bcb0:	800b      	strh	r3, [r1, #0]
 801bcb2:	491b      	ldr	r1, [pc, #108]	; (801bd20 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801bcb4:	6809      	ldr	r1, [r1, #0]
 801bcb6:	eba1 010e 	sub.w	r1, r1, lr
 801bcba:	eba1 010c 	sub.w	r1, r1, ip
 801bcbe:	469c      	mov	ip, r3
 801bcc0:	1a8a      	subs	r2, r1, r2
 801bcc2:	4918      	ldr	r1, [pc, #96]	; (801bd24 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801bcc4:	600a      	str	r2, [r1, #0]
 801bcc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bcca:	4a17      	ldr	r2, [pc, #92]	; (801bd28 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801bccc:	8013      	strh	r3, [r2, #0]
 801bcce:	4283      	cmp	r3, r0
 801bcd0:	d10d      	bne.n	801bcee <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801bcd2:	8835      	ldrh	r5, [r6, #0]
 801bcd4:	2300      	movs	r3, #0
 801bcd6:	6838      	ldr	r0, [r7, #0]
 801bcd8:	240e      	movs	r4, #14
 801bcda:	429d      	cmp	r5, r3
 801bcdc:	d90f      	bls.n	801bcfe <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801bcde:	fb04 0203 	mla	r2, r4, r3, r0
 801bce2:	3301      	adds	r3, #1
 801bce4:	7b11      	ldrb	r1, [r2, #12]
 801bce6:	f36f 1145 	bfc	r1, #5, #1
 801bcea:	7311      	strb	r1, [r2, #12]
 801bcec:	e7f5      	b.n	801bcda <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801bcee:	682a      	ldr	r2, [r5, #0]
 801bcf0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801bcf4:	6822      	ldr	r2, [r4, #0]
 801bcf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801bcfa:	3301      	adds	r3, #1
 801bcfc:	e7e7      	b.n	801bcce <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801bcfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd02:	bf00      	nop
 801bd04:	2400c928 	.word	0x2400c928
 801bd08:	2400c944 	.word	0x2400c944
 801bd0c:	2400c948 	.word	0x2400c948
 801bd10:	2400c93c 	.word	0x2400c93c
 801bd14:	2400c92c 	.word	0x2400c92c
 801bd18:	2400c934 	.word	0x2400c934
 801bd1c:	2400c946 	.word	0x2400c946
 801bd20:	2400c930 	.word	0x2400c930
 801bd24:	2400c940 	.word	0x2400c940
 801bd28:	2400c938 	.word	0x2400c938

0801bd2c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801bd2c:	4b10      	ldr	r3, [pc, #64]	; (801bd70 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801bd2e:	b510      	push	{r4, lr}
 801bd30:	681b      	ldr	r3, [r3, #0]
 801bd32:	b9db      	cbnz	r3, 801bd6c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bd34:	b1d1      	cbz	r1, 801bd6c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801bd36:	4b0f      	ldr	r3, [pc, #60]	; (801bd74 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801bd38:	240e      	movs	r4, #14
 801bd3a:	801a      	strh	r2, [r3, #0]
 801bd3c:	b292      	uxth	r2, r2
 801bd3e:	4b0e      	ldr	r3, [pc, #56]	; (801bd78 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801bd40:	881b      	ldrh	r3, [r3, #0]
 801bd42:	4413      	add	r3, r2
 801bd44:	4362      	muls	r2, r4
 801bd46:	2406      	movs	r4, #6
 801bd48:	fb04 2203 	mla	r2, r4, r3, r2
 801bd4c:	428a      	cmp	r2, r1
 801bd4e:	d305      	bcc.n	801bd5c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801bd50:	4b0a      	ldr	r3, [pc, #40]	; (801bd7c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801bd52:	2135      	movs	r1, #53	; 0x35
 801bd54:	4a0a      	ldr	r2, [pc, #40]	; (801bd80 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801bd56:	480b      	ldr	r0, [pc, #44]	; (801bd84 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801bd58:	f009 ff0e 	bl	8025b78 <__assert_func>
 801bd5c:	4b0a      	ldr	r3, [pc, #40]	; (801bd88 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801bd5e:	6019      	str	r1, [r3, #0]
 801bd60:	4b0a      	ldr	r3, [pc, #40]	; (801bd8c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801bd62:	6018      	str	r0, [r3, #0]
 801bd64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd68:	f7ff bf78 	b.w	801bc5c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801bd6c:	bd10      	pop	{r4, pc}
 801bd6e:	bf00      	nop
 801bd70:	2400c934 	.word	0x2400c934
 801bd74:	2400c948 	.word	0x2400c948
 801bd78:	2400c944 	.word	0x2400c944
 801bd7c:	0802abb5 	.word	0x0802abb5
 801bd80:	0802ac0e 	.word	0x0802ac0e
 801bd84:	0802ab90 	.word	0x0802ab90
 801bd88:	2400c930 	.word	0x2400c930
 801bd8c:	2400c928 	.word	0x2400c928

0801bd90 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801bd90:	b470      	push	{r4, r5, r6}
 801bd92:	4c07      	ldr	r4, [pc, #28]	; (801bdb0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801bd94:	4605      	mov	r5, r0
 801bd96:	4610      	mov	r0, r2
 801bd98:	9a03      	ldr	r2, [sp, #12]
 801bd9a:	6826      	ldr	r6, [r4, #0]
 801bd9c:	b936      	cbnz	r6, 801bdac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801bd9e:	6025      	str	r5, [r4, #0]
 801bda0:	4c04      	ldr	r4, [pc, #16]	; (801bdb4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801bda2:	8021      	strh	r1, [r4, #0]
 801bda4:	4619      	mov	r1, r3
 801bda6:	bc70      	pop	{r4, r5, r6}
 801bda8:	f7ff bfc0 	b.w	801bd2c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801bdac:	bc70      	pop	{r4, r5, r6}
 801bdae:	4770      	bx	lr
 801bdb0:	2400c94c 	.word	0x2400c94c
 801bdb4:	2400c944 	.word	0x2400c944

0801bdb8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801bdb8:	b508      	push	{r3, lr}
 801bdba:	4b14      	ldr	r3, [pc, #80]	; (801be0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801bdbc:	6819      	ldr	r1, [r3, #0]
 801bdbe:	b931      	cbnz	r1, 801bdce <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801bdc0:	4b13      	ldr	r3, [pc, #76]	; (801be10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801bdc2:	f240 4185 	movw	r1, #1157	; 0x485
 801bdc6:	4a13      	ldr	r2, [pc, #76]	; (801be14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801bdc8:	4813      	ldr	r0, [pc, #76]	; (801be18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bdca:	f009 fed5 	bl	8025b78 <__assert_func>
 801bdce:	4a13      	ldr	r2, [pc, #76]	; (801be1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801bdd0:	8803      	ldrh	r3, [r0, #0]
 801bdd2:	8812      	ldrh	r2, [r2, #0]
 801bdd4:	4293      	cmp	r3, r2
 801bdd6:	d204      	bcs.n	801bde2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801bdd8:	2214      	movs	r2, #20
 801bdda:	fb02 1303 	mla	r3, r2, r3, r1
 801bdde:	8918      	ldrh	r0, [r3, #8]
 801bde0:	bd08      	pop	{r3, pc}
 801bde2:	490f      	ldr	r1, [pc, #60]	; (801be20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801bde4:	8809      	ldrh	r1, [r1, #0]
 801bde6:	4411      	add	r1, r2
 801bde8:	428b      	cmp	r3, r1
 801bdea:	da06      	bge.n	801bdfa <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801bdec:	1a9b      	subs	r3, r3, r2
 801bdee:	4a0d      	ldr	r2, [pc, #52]	; (801be24 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801bdf0:	210e      	movs	r1, #14
 801bdf2:	6812      	ldr	r2, [r2, #0]
 801bdf4:	fb01 2303 	mla	r3, r1, r3, r2
 801bdf8:	e7f1      	b.n	801bdde <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801bdfa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bdfe:	4293      	cmp	r3, r2
 801be00:	bf0a      	itet	eq
 801be02:	4b09      	ldreq	r3, [pc, #36]	; (801be28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801be04:	2000      	movne	r0, #0
 801be06:	8818      	ldrheq	r0, [r3, #0]
 801be08:	e7ea      	b.n	801bde0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801be0a:	bf00      	nop
 801be0c:	2400c94c 	.word	0x2400c94c
 801be10:	08029d10 	.word	0x08029d10
 801be14:	0802acbb 	.word	0x0802acbb
 801be18:	0802ab90 	.word	0x0802ab90
 801be1c:	2400c944 	.word	0x2400c944
 801be20:	2400c948 	.word	0x2400c948
 801be24:	2400c92c 	.word	0x2400c92c
 801be28:	2400c898 	.word	0x2400c898

0801be2c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801be2c:	b508      	push	{r3, lr}
 801be2e:	4b14      	ldr	r3, [pc, #80]	; (801be80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801be30:	6819      	ldr	r1, [r3, #0]
 801be32:	b931      	cbnz	r1, 801be42 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801be34:	4b13      	ldr	r3, [pc, #76]	; (801be84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801be36:	f240 4199 	movw	r1, #1177	; 0x499
 801be3a:	4a13      	ldr	r2, [pc, #76]	; (801be88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801be3c:	4813      	ldr	r0, [pc, #76]	; (801be8c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801be3e:	f009 fe9b 	bl	8025b78 <__assert_func>
 801be42:	4a13      	ldr	r2, [pc, #76]	; (801be90 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801be44:	8803      	ldrh	r3, [r0, #0]
 801be46:	8812      	ldrh	r2, [r2, #0]
 801be48:	4293      	cmp	r3, r2
 801be4a:	d204      	bcs.n	801be56 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801be4c:	2214      	movs	r2, #20
 801be4e:	fb02 1303 	mla	r3, r2, r3, r1
 801be52:	8958      	ldrh	r0, [r3, #10]
 801be54:	bd08      	pop	{r3, pc}
 801be56:	490f      	ldr	r1, [pc, #60]	; (801be94 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801be58:	8809      	ldrh	r1, [r1, #0]
 801be5a:	4411      	add	r1, r2
 801be5c:	428b      	cmp	r3, r1
 801be5e:	da06      	bge.n	801be6e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801be60:	1a9b      	subs	r3, r3, r2
 801be62:	4a0d      	ldr	r2, [pc, #52]	; (801be98 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801be64:	210e      	movs	r1, #14
 801be66:	6812      	ldr	r2, [r2, #0]
 801be68:	fb01 2303 	mla	r3, r1, r3, r2
 801be6c:	e7f1      	b.n	801be52 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801be6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be72:	4293      	cmp	r3, r2
 801be74:	bf0a      	itet	eq
 801be76:	4b09      	ldreq	r3, [pc, #36]	; (801be9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801be78:	2000      	movne	r0, #0
 801be7a:	8818      	ldrheq	r0, [r3, #0]
 801be7c:	e7ea      	b.n	801be54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801be7e:	bf00      	nop
 801be80:	2400c94c 	.word	0x2400c94c
 801be84:	08029d10 	.word	0x08029d10
 801be88:	0802ace7 	.word	0x0802ace7
 801be8c:	0802ab90 	.word	0x0802ab90
 801be90:	2400c944 	.word	0x2400c944
 801be94:	2400c948 	.word	0x2400c948
 801be98:	2400c92c 	.word	0x2400c92c
 801be9c:	2400c89a 	.word	0x2400c89a

0801bea0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801bea0:	4b23      	ldr	r3, [pc, #140]	; (801bf30 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801bea2:	b510      	push	{r4, lr}
 801bea4:	681c      	ldr	r4, [r3, #0]
 801bea6:	b934      	cbnz	r4, 801beb6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801bea8:	4b22      	ldr	r3, [pc, #136]	; (801bf34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801beaa:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801beae:	4a22      	ldr	r2, [pc, #136]	; (801bf38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801beb0:	4822      	ldr	r0, [pc, #136]	; (801bf3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801beb2:	f009 fe61 	bl	8025b78 <__assert_func>
 801beb6:	4a22      	ldr	r2, [pc, #136]	; (801bf40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801beb8:	880b      	ldrh	r3, [r1, #0]
 801beba:	8812      	ldrh	r2, [r2, #0]
 801bebc:	4293      	cmp	r3, r2
 801bebe:	d211      	bcs.n	801bee4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801bec0:	2214      	movs	r2, #20
 801bec2:	fb02 4303 	mla	r3, r2, r3, r4
 801bec6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801beca:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801bece:	8a1a      	ldrh	r2, [r3, #16]
 801bed0:	8a5b      	ldrh	r3, [r3, #18]
 801bed2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bed6:	8004      	strh	r4, [r0, #0]
 801bed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bedc:	8041      	strh	r1, [r0, #2]
 801bede:	8082      	strh	r2, [r0, #4]
 801bee0:	80c3      	strh	r3, [r0, #6]
 801bee2:	e00e      	b.n	801bf02 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801bee4:	4917      	ldr	r1, [pc, #92]	; (801bf44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801bee6:	8809      	ldrh	r1, [r1, #0]
 801bee8:	4411      	add	r1, r2
 801beea:	428b      	cmp	r3, r1
 801beec:	da0a      	bge.n	801bf04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801beee:	1a9b      	subs	r3, r3, r2
 801bef0:	4a15      	ldr	r2, [pc, #84]	; (801bf48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801bef2:	210e      	movs	r1, #14
 801bef4:	6812      	ldr	r2, [r2, #0]
 801bef6:	fb01 2303 	mla	r3, r1, r3, r2
 801befa:	681a      	ldr	r2, [r3, #0]
 801befc:	6002      	str	r2, [r0, #0]
 801befe:	685a      	ldr	r2, [r3, #4]
 801bf00:	6042      	str	r2, [r0, #4]
 801bf02:	bd10      	pop	{r4, pc}
 801bf04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bf08:	4293      	cmp	r3, r2
 801bf0a:	d10b      	bne.n	801bf24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801bf0c:	4b0f      	ldr	r3, [pc, #60]	; (801bf4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801bf0e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bf12:	4b0f      	ldr	r3, [pc, #60]	; (801bf50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801bf14:	8081      	strh	r1, [r0, #4]
 801bf16:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bf1a:	2300      	movs	r3, #0
 801bf1c:	80c2      	strh	r2, [r0, #6]
 801bf1e:	8003      	strh	r3, [r0, #0]
 801bf20:	8043      	strh	r3, [r0, #2]
 801bf22:	e7ee      	b.n	801bf02 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801bf24:	2300      	movs	r3, #0
 801bf26:	8003      	strh	r3, [r0, #0]
 801bf28:	8043      	strh	r3, [r0, #2]
 801bf2a:	8083      	strh	r3, [r0, #4]
 801bf2c:	e7d8      	b.n	801bee0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801bf2e:	bf00      	nop
 801bf30:	2400c94c 	.word	0x2400c94c
 801bf34:	08029d10 	.word	0x08029d10
 801bf38:	0802ac54 	.word	0x0802ac54
 801bf3c:	0802ab90 	.word	0x0802ab90
 801bf40:	2400c944 	.word	0x2400c944
 801bf44:	2400c948 	.word	0x2400c948
 801bf48:	2400c92c 	.word	0x2400c92c
 801bf4c:	2400c898 	.word	0x2400c898
 801bf50:	2400c89a 	.word	0x2400c89a

0801bf54 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bf54:	b508      	push	{r3, lr}
 801bf56:	4b12      	ldr	r3, [pc, #72]	; (801bfa0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bf58:	6819      	ldr	r1, [r3, #0]
 801bf5a:	b931      	cbnz	r1, 801bf6a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bf5c:	4b11      	ldr	r3, [pc, #68]	; (801bfa4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bf5e:	f240 41d1 	movw	r1, #1233	; 0x4d1
 801bf62:	4a11      	ldr	r2, [pc, #68]	; (801bfa8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bf64:	4811      	ldr	r0, [pc, #68]	; (801bfac <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bf66:	f009 fe07 	bl	8025b78 <__assert_func>
 801bf6a:	8803      	ldrh	r3, [r0, #0]
 801bf6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bf70:	4293      	cmp	r3, r2
 801bf72:	d012      	beq.n	801bf9a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bf74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bf78:	4293      	cmp	r3, r2
 801bf7a:	d103      	bne.n	801bf84 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801bf7c:	4b0c      	ldr	r3, [pc, #48]	; (801bfb0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801bf82:	bd08      	pop	{r3, pc}
 801bf84:	4a0b      	ldr	r2, [pc, #44]	; (801bfb4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801bf86:	6812      	ldr	r2, [r2, #0]
 801bf88:	b11a      	cbz	r2, 801bf92 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801bf8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bf8e:	2800      	cmp	r0, #0
 801bf90:	d1f7      	bne.n	801bf82 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bf92:	2214      	movs	r2, #20
 801bf94:	4353      	muls	r3, r2
 801bf96:	58c8      	ldr	r0, [r1, r3]
 801bf98:	e7f3      	b.n	801bf82 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bf9a:	2000      	movs	r0, #0
 801bf9c:	e7f1      	b.n	801bf82 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801bf9e:	bf00      	nop
 801bfa0:	2400c94c 	.word	0x2400c94c
 801bfa4:	08029d10 	.word	0x08029d10
 801bfa8:	0802ac8a 	.word	0x0802ac8a
 801bfac:	0802ab90 	.word	0x0802ab90
 801bfb0:	2400c8a4 	.word	0x2400c8a4
 801bfb4:	2400c928 	.word	0x2400c928

0801bfb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bfb8:	8802      	ldrh	r2, [r0, #0]
 801bfba:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801bfbe:	429a      	cmp	r2, r3
 801bfc0:	d845      	bhi.n	801c04e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801bfc2:	4b24      	ldr	r3, [pc, #144]	; (801c054 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bfc4:	8818      	ldrh	r0, [r3, #0]
 801bfc6:	4282      	cmp	r2, r0
 801bfc8:	d221      	bcs.n	801c00e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801bfca:	4b23      	ldr	r3, [pc, #140]	; (801c058 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bfcc:	6819      	ldr	r1, [r3, #0]
 801bfce:	2314      	movs	r3, #20
 801bfd0:	fb03 1302 	mla	r3, r3, r2, r1
 801bfd4:	6858      	ldr	r0, [r3, #4]
 801bfd6:	2800      	cmp	r0, #0
 801bfd8:	d03a      	beq.n	801c050 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801bfda:	4920      	ldr	r1, [pc, #128]	; (801c05c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801bfdc:	6809      	ldr	r1, [r1, #0]
 801bfde:	2900      	cmp	r1, #0
 801bfe0:	d036      	beq.n	801c050 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801bfe2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bfe6:	2900      	cmp	r1, #0
 801bfe8:	d032      	beq.n	801c050 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801bfea:	891a      	ldrh	r2, [r3, #8]
 801bfec:	8958      	ldrh	r0, [r3, #10]
 801bfee:	4350      	muls	r0, r2
 801bff0:	7c5a      	ldrb	r2, [r3, #17]
 801bff2:	7cdb      	ldrb	r3, [r3, #19]
 801bff4:	0952      	lsrs	r2, r2, #5
 801bff6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bffa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bffe:	2b0b      	cmp	r3, #11
 801c000:	bf18      	it	ne
 801c002:	0040      	lslne	r0, r0, #1
 801c004:	3003      	adds	r0, #3
 801c006:	f020 0003 	bic.w	r0, r0, #3
 801c00a:	4408      	add	r0, r1
 801c00c:	4770      	bx	lr
 801c00e:	4b14      	ldr	r3, [pc, #80]	; (801c060 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801c010:	881b      	ldrh	r3, [r3, #0]
 801c012:	4403      	add	r3, r0
 801c014:	429a      	cmp	r2, r3
 801c016:	da1a      	bge.n	801c04e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801c018:	4b12      	ldr	r3, [pc, #72]	; (801c064 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801c01a:	1a10      	subs	r0, r2, r0
 801c01c:	210e      	movs	r1, #14
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	fb01 3000 	mla	r0, r1, r0, r3
 801c024:	7b03      	ldrb	r3, [r0, #12]
 801c026:	f003 031f 	and.w	r3, r3, #31
 801c02a:	2b0b      	cmp	r3, #11
 801c02c:	d10b      	bne.n	801c046 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c02e:	8903      	ldrh	r3, [r0, #8]
 801c030:	8940      	ldrh	r0, [r0, #10]
 801c032:	4358      	muls	r0, r3
 801c034:	4b09      	ldr	r3, [pc, #36]	; (801c05c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801c036:	3003      	adds	r0, #3
 801c038:	6819      	ldr	r1, [r3, #0]
 801c03a:	f020 0303 	bic.w	r3, r0, #3
 801c03e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801c042:	4418      	add	r0, r3
 801c044:	4770      	bx	lr
 801c046:	2b0d      	cmp	r3, #13
 801c048:	d101      	bne.n	801c04e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801c04a:	300d      	adds	r0, #13
 801c04c:	4770      	bx	lr
 801c04e:	2000      	movs	r0, #0
 801c050:	4770      	bx	lr
 801c052:	bf00      	nop
 801c054:	2400c944 	.word	0x2400c944
 801c058:	2400c94c 	.word	0x2400c94c
 801c05c:	2400c928 	.word	0x2400c928
 801c060:	2400c948 	.word	0x2400c948
 801c064:	2400c92c 	.word	0x2400c92c

0801c068 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801c068:	4b17      	ldr	r3, [pc, #92]	; (801c0c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801c06a:	b510      	push	{r4, lr}
 801c06c:	6819      	ldr	r1, [r3, #0]
 801c06e:	8803      	ldrh	r3, [r0, #0]
 801c070:	b1e9      	cbz	r1, 801c0ae <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801c072:	4a16      	ldr	r2, [pc, #88]	; (801c0cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801c074:	8812      	ldrh	r2, [r2, #0]
 801c076:	429a      	cmp	r2, r3
 801c078:	d90a      	bls.n	801c090 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801c07a:	2214      	movs	r2, #20
 801c07c:	fb02 1303 	mla	r3, r2, r3, r1
 801c080:	7c58      	ldrb	r0, [r3, #17]
 801c082:	0942      	lsrs	r2, r0, #5
 801c084:	7cd8      	ldrb	r0, [r3, #19]
 801c086:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801c08a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801c08e:	bd10      	pop	{r4, pc}
 801c090:	490f      	ldr	r1, [pc, #60]	; (801c0d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801c092:	8809      	ldrh	r1, [r1, #0]
 801c094:	4411      	add	r1, r2
 801c096:	428b      	cmp	r3, r1
 801c098:	da09      	bge.n	801c0ae <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801c09a:	1a9b      	subs	r3, r3, r2
 801c09c:	4a0d      	ldr	r2, [pc, #52]	; (801c0d4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801c09e:	210e      	movs	r1, #14
 801c0a0:	6812      	ldr	r2, [r2, #0]
 801c0a2:	fb01 2303 	mla	r3, r1, r3, r2
 801c0a6:	7b18      	ldrb	r0, [r3, #12]
 801c0a8:	f000 001f 	and.w	r0, r0, #31
 801c0ac:	e7ef      	b.n	801c08e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c0ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c0b2:	4293      	cmp	r3, r2
 801c0b4:	d106      	bne.n	801c0c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801c0b6:	f7e7 fe45 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 801c0ba:	6803      	ldr	r3, [r0, #0]
 801c0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0c2:	4718      	bx	r3
 801c0c4:	2000      	movs	r0, #0
 801c0c6:	e7e2      	b.n	801c08e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c0c8:	2400c94c 	.word	0x2400c94c
 801c0cc:	2400c944 	.word	0x2400c944
 801c0d0:	2400c948 	.word	0x2400c948
 801c0d4:	2400c92c 	.word	0x2400c92c

0801c0d8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801c0d8:	2018      	movs	r0, #24
 801c0da:	4770      	bx	lr

0801c0dc <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801c0dc:	2001      	movs	r0, #1
 801c0de:	4770      	bx	lr

0801c0e0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0e4:	b085      	sub	sp, #20
 801c0e6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c0e8:	9203      	str	r2, [sp, #12]
 801c0ea:	6870      	ldr	r0, [r6, #4]
 801c0ec:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c0f0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c0f4:	9101      	str	r1, [sp, #4]
 801c0f6:	fa1f f885 	uxth.w	r8, r5
 801c0fa:	43ed      	mvns	r5, r5
 801c0fc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c100:	b2ed      	uxtb	r5, r5
 801c102:	fb00 2404 	mla	r4, r0, r4, r2
 801c106:	6832      	ldr	r2, [r6, #0]
 801c108:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c10c:	4414      	add	r4, r2
 801c10e:	f8dc 2000 	ldr.w	r2, [ip]
 801c112:	9202      	str	r2, [sp, #8]
 801c114:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c118:	f102 0e04 	add.w	lr, r2, #4
 801c11c:	9a01      	ldr	r2, [sp, #4]
 801c11e:	2a00      	cmp	r2, #0
 801c120:	dc03      	bgt.n	801c12a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c122:	9a03      	ldr	r2, [sp, #12]
 801c124:	2a00      	cmp	r2, #0
 801c126:	f340 8116 	ble.w	801c356 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c12a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c12c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801c130:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c134:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c136:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801c13a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c13e:	2b00      	cmp	r3, #0
 801c140:	dd0e      	ble.n	801c160 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c142:	1406      	asrs	r6, r0, #16
 801c144:	d405      	bmi.n	801c152 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c146:	4556      	cmp	r6, sl
 801c148:	da03      	bge.n	801c152 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c14a:	1416      	asrs	r6, r2, #16
 801c14c:	d401      	bmi.n	801c152 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c14e:	454e      	cmp	r6, r9
 801c150:	db07      	blt.n	801c162 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c152:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c154:	3b01      	subs	r3, #1
 801c156:	3403      	adds	r4, #3
 801c158:	4430      	add	r0, r6
 801c15a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c15c:	4432      	add	r2, r6
 801c15e:	e7ee      	b.n	801c13e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c160:	d063      	beq.n	801c22a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c162:	1e5e      	subs	r6, r3, #1
 801c164:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801c166:	fb07 0706 	mla	r7, r7, r6, r0
 801c16a:	143f      	asrs	r7, r7, #16
 801c16c:	d454      	bmi.n	801c218 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c16e:	4557      	cmp	r7, sl
 801c170:	da52      	bge.n	801c218 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c172:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801c174:	fb07 2606 	mla	r6, r7, r6, r2
 801c178:	1436      	asrs	r6, r6, #16
 801c17a:	d44d      	bmi.n	801c218 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c17c:	454e      	cmp	r6, r9
 801c17e:	da4b      	bge.n	801c218 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c180:	1ce6      	adds	r6, r4, #3
 801c182:	4699      	mov	r9, r3
 801c184:	f1b9 0f00 	cmp.w	r9, #0
 801c188:	f106 0603 	add.w	r6, r6, #3
 801c18c:	dd48      	ble.n	801c220 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801c18e:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801c192:	1417      	asrs	r7, r2, #16
 801c194:	9902      	ldr	r1, [sp, #8]
 801c196:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c19a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c19e:	fb0b 1707 	mla	r7, fp, r7, r1
 801c1a2:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c1a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c1a8:	f817 700a 	ldrb.w	r7, [r7, sl]
 801c1ac:	fb1b fb05 	smulbb	fp, fp, r5
 801c1b0:	4408      	add	r0, r1
 801c1b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c1b4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c1b8:	440a      	add	r2, r1
 801c1ba:	eb0e 0a07 	add.w	sl, lr, r7
 801c1be:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801c1c2:	fb07 b708 	mla	r7, r7, r8, fp
 801c1c6:	b2bf      	uxth	r7, r7
 801c1c8:	f107 0b01 	add.w	fp, r7, #1
 801c1cc:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c1d0:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c1d4:	fb1b fb05 	smulbb	fp, fp, r5
 801c1d8:	123f      	asrs	r7, r7, #8
 801c1da:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c1de:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c1e2:	fb07 b708 	mla	r7, r7, r8, fp
 801c1e6:	b2bf      	uxth	r7, r7
 801c1e8:	f107 0b01 	add.w	fp, r7, #1
 801c1ec:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c1f0:	123f      	asrs	r7, r7, #8
 801c1f2:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c1f6:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c1fa:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c1fe:	fb1a fa05 	smulbb	sl, sl, r5
 801c202:	fb07 a708 	mla	r7, r7, r8, sl
 801c206:	b2bf      	uxth	r7, r7
 801c208:	f107 0a01 	add.w	sl, r7, #1
 801c20c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c210:	123f      	asrs	r7, r7, #8
 801c212:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c216:	e7b5      	b.n	801c184 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801c218:	2700      	movs	r7, #0
 801c21a:	1bde      	subs	r6, r3, r7
 801c21c:	2e00      	cmp	r6, #0
 801c21e:	dc42      	bgt.n	801c2a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801c220:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c224:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c228:	441c      	add	r4, r3
 801c22a:	9b01      	ldr	r3, [sp, #4]
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	f340 8092 	ble.w	801c356 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c238:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c23c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c240:	eef0 6a62 	vmov.f32	s13, s5
 801c244:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c248:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c24c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c250:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801c254:	eef0 6a43 	vmov.f32	s13, s6
 801c258:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c25c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801c260:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c264:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c268:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c26c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c270:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c274:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c278:	ee12 2a90 	vmov	r2, s5
 801c27c:	eef0 2a47 	vmov.f32	s5, s14
 801c280:	fb92 f3f3 	sdiv	r3, r2, r3
 801c284:	ee13 2a10 	vmov	r2, s6
 801c288:	9311      	str	r3, [sp, #68]	; 0x44
 801c28a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c28c:	eeb0 3a67 	vmov.f32	s6, s15
 801c290:	fb92 f3f3 	sdiv	r3, r2, r3
 801c294:	9312      	str	r3, [sp, #72]	; 0x48
 801c296:	9b01      	ldr	r3, [sp, #4]
 801c298:	9a03      	ldr	r2, [sp, #12]
 801c29a:	3b01      	subs	r3, #1
 801c29c:	9301      	str	r3, [sp, #4]
 801c29e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2a0:	bf08      	it	eq
 801c2a2:	4613      	moveq	r3, r2
 801c2a4:	e73a      	b.n	801c11c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c2a6:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c2aa:	d44e      	bmi.n	801c34a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c2ac:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c2b0:	4556      	cmp	r6, sl
 801c2b2:	dd4a      	ble.n	801c34a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c2b4:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801c2b8:	d447      	bmi.n	801c34a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c2ba:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801c2be:	4559      	cmp	r1, fp
 801c2c0:	dd43      	ble.n	801c34a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c2c2:	fa0f f986 	sxth.w	r9, r6
 801c2c6:	9902      	ldr	r1, [sp, #8]
 801c2c8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c2cc:	fb0b 1909 	mla	r9, fp, r9, r1
 801c2d0:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c2d4:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c2d8:	fb1b fb05 	smulbb	fp, fp, r5
 801c2dc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c2e0:	eb0e 0a09 	add.w	sl, lr, r9
 801c2e4:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801c2e8:	fb09 b908 	mla	r9, r9, r8, fp
 801c2ec:	fa1f f989 	uxth.w	r9, r9
 801c2f0:	f109 0b01 	add.w	fp, r9, #1
 801c2f4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c2f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c2fc:	f804 9006 	strb.w	r9, [r4, r6]
 801c300:	4426      	add	r6, r4
 801c302:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c306:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c30a:	fb1b fb05 	smulbb	fp, fp, r5
 801c30e:	fb09 b908 	mla	r9, r9, r8, fp
 801c312:	fa1f f989 	uxth.w	r9, r9
 801c316:	f109 0b01 	add.w	fp, r9, #1
 801c31a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c31e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c322:	f886 9001 	strb.w	r9, [r6, #1]
 801c326:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c32a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c32e:	fb1a fa05 	smulbb	sl, sl, r5
 801c332:	fb09 a908 	mla	r9, r9, r8, sl
 801c336:	fa1f f989 	uxth.w	r9, r9
 801c33a:	f109 0a01 	add.w	sl, r9, #1
 801c33e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c342:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c346:	f886 9002 	strb.w	r9, [r6, #2]
 801c34a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c34c:	3701      	adds	r7, #1
 801c34e:	4408      	add	r0, r1
 801c350:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c352:	440a      	add	r2, r1
 801c354:	e761      	b.n	801c21a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c356:	b005      	add	sp, #20
 801c358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c35c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c360:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c362:	4693      	mov	fp, r2
 801c364:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c36a:	6868      	ldr	r0, [r5, #4]
 801c36c:	6877      	ldr	r7, [r6, #4]
 801c36e:	9100      	str	r1, [sp, #0]
 801c370:	3704      	adds	r7, #4
 801c372:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c376:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801c37a:	fb00 2404 	mla	r4, r0, r4, r2
 801c37e:	682a      	ldr	r2, [r5, #0]
 801c380:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c384:	4414      	add	r4, r2
 801c386:	6832      	ldr	r2, [r6, #0]
 801c388:	9201      	str	r2, [sp, #4]
 801c38a:	9a00      	ldr	r2, [sp, #0]
 801c38c:	2a00      	cmp	r2, #0
 801c38e:	dc03      	bgt.n	801c398 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c390:	f1bb 0f00 	cmp.w	fp, #0
 801c394:	f340 80bc 	ble.w	801c510 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c398:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c39a:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801c39e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c3a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c3a4:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801c3a8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	dd0c      	ble.n	801c3ca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c3b0:	1405      	asrs	r5, r0, #16
 801c3b2:	d405      	bmi.n	801c3c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c3b4:	4555      	cmp	r5, sl
 801c3b6:	da03      	bge.n	801c3c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c3b8:	1415      	asrs	r5, r2, #16
 801c3ba:	d401      	bmi.n	801c3c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c3bc:	454d      	cmp	r5, r9
 801c3be:	db05      	blt.n	801c3cc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c3c0:	4440      	add	r0, r8
 801c3c2:	4472      	add	r2, lr
 801c3c4:	3b01      	subs	r3, #1
 801c3c6:	3403      	adds	r4, #3
 801c3c8:	e7f0      	b.n	801c3ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c3ca:	d03f      	beq.n	801c44c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801c3cc:	1e5d      	subs	r5, r3, #1
 801c3ce:	fb08 0c05 	mla	ip, r8, r5, r0
 801c3d2:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801c3d6:	d42e      	bmi.n	801c436 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c3d8:	45d4      	cmp	ip, sl
 801c3da:	da2c      	bge.n	801c436 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c3dc:	fb0e 2505 	mla	r5, lr, r5, r2
 801c3e0:	142d      	asrs	r5, r5, #16
 801c3e2:	d428      	bmi.n	801c436 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c3e4:	454d      	cmp	r5, r9
 801c3e6:	da26      	bge.n	801c436 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c3e8:	1ce5      	adds	r5, r4, #3
 801c3ea:	469c      	mov	ip, r3
 801c3ec:	f1bc 0f00 	cmp.w	ip, #0
 801c3f0:	f105 0503 	add.w	r5, r5, #3
 801c3f4:	dd25      	ble.n	801c442 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801c3f6:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801c3fa:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c3fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c402:	4472      	add	r2, lr
 801c404:	468a      	mov	sl, r1
 801c406:	9901      	ldr	r1, [sp, #4]
 801c408:	fb0a 1909 	mla	r9, sl, r9, r1
 801c40c:	1401      	asrs	r1, r0, #16
 801c40e:	4440      	add	r0, r8
 801c410:	f819 9001 	ldrb.w	r9, [r9, r1]
 801c414:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c418:	eb07 0a09 	add.w	sl, r7, r9
 801c41c:	f817 9009 	ldrb.w	r9, [r7, r9]
 801c420:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c424:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c428:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c42c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c430:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c434:	e7da      	b.n	801c3ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c436:	2500      	movs	r5, #0
 801c438:	eba3 0c05 	sub.w	ip, r3, r5
 801c43c:	f1bc 0f00 	cmp.w	ip, #0
 801c440:	dc3b      	bgt.n	801c4ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c442:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c446:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c44a:	441c      	add	r4, r3
 801c44c:	9b00      	ldr	r3, [sp, #0]
 801c44e:	2b00      	cmp	r3, #0
 801c450:	dd5e      	ble.n	801c510 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c452:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c458:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c45c:	eeb0 6a62 	vmov.f32	s12, s5
 801c460:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c464:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c468:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c46c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c470:	eeb0 6a43 	vmov.f32	s12, s6
 801c474:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c478:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c47c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c480:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c484:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c488:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c48c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c490:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c494:	ee12 2a90 	vmov	r2, s5
 801c498:	eef0 2a47 	vmov.f32	s5, s14
 801c49c:	fb92 f8f3 	sdiv	r8, r2, r3
 801c4a0:	ee13 2a10 	vmov	r2, s6
 801c4a4:	eeb0 3a67 	vmov.f32	s6, s15
 801c4a8:	fb92 fef3 	sdiv	lr, r2, r3
 801c4ac:	9b00      	ldr	r3, [sp, #0]
 801c4ae:	3b01      	subs	r3, #1
 801c4b0:	9300      	str	r3, [sp, #0]
 801c4b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c4b4:	bf08      	it	eq
 801c4b6:	465b      	moveq	r3, fp
 801c4b8:	e767      	b.n	801c38a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c4ba:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c4be:	d423      	bmi.n	801c508 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c4c0:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801c4c4:	45cc      	cmp	ip, r9
 801c4c6:	dd1f      	ble.n	801c508 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c4c8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c4cc:	d41c      	bmi.n	801c508 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c4ce:	68f1      	ldr	r1, [r6, #12]
 801c4d0:	4551      	cmp	r1, sl
 801c4d2:	dd19      	ble.n	801c508 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c4d4:	fa0f fc8c 	sxth.w	ip, ip
 801c4d8:	9901      	ldr	r1, [sp, #4]
 801c4da:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801c4de:	f81c c009 	ldrb.w	ip, [ip, r9]
 801c4e2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c4e6:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801c4ea:	eb07 090c 	add.w	r9, r7, ip
 801c4ee:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801c4f2:	f804 a00c 	strb.w	sl, [r4, ip]
 801c4f6:	44a4      	add	ip, r4
 801c4f8:	f899 a001 	ldrb.w	sl, [r9, #1]
 801c4fc:	f88c a001 	strb.w	sl, [ip, #1]
 801c500:	f899 9002 	ldrb.w	r9, [r9, #2]
 801c504:	f88c 9002 	strb.w	r9, [ip, #2]
 801c508:	4440      	add	r0, r8
 801c50a:	4472      	add	r2, lr
 801c50c:	3501      	adds	r5, #1
 801c50e:	e793      	b.n	801c438 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801c510:	b003      	add	sp, #12
 801c512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c516 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c516:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c51a:	b085      	sub	sp, #20
 801c51c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c520:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c522:	9202      	str	r2, [sp, #8]
 801c524:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801c528:	6860      	ldr	r0, [r4, #4]
 801c52a:	9203      	str	r2, [sp, #12]
 801c52c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c530:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801c534:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c538:	fb00 2505 	mla	r5, r0, r5, r2
 801c53c:	6822      	ldr	r2, [r4, #0]
 801c53e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c542:	4415      	add	r5, r2
 801c544:	f8dc 2000 	ldr.w	r2, [ip]
 801c548:	9200      	str	r2, [sp, #0]
 801c54a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c54e:	3204      	adds	r2, #4
 801c550:	9201      	str	r2, [sp, #4]
 801c552:	2900      	cmp	r1, #0
 801c554:	dc03      	bgt.n	801c55e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c556:	9a02      	ldr	r2, [sp, #8]
 801c558:	2a00      	cmp	r2, #0
 801c55a:	f340 8127 	ble.w	801c7ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c55e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c560:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c564:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c568:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c56a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c56e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c572:	2b00      	cmp	r3, #0
 801c574:	dd0d      	ble.n	801c592 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c576:	1422      	asrs	r2, r4, #16
 801c578:	d405      	bmi.n	801c586 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c57a:	4542      	cmp	r2, r8
 801c57c:	da03      	bge.n	801c586 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c57e:	1402      	asrs	r2, r0, #16
 801c580:	d401      	bmi.n	801c586 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c582:	42ba      	cmp	r2, r7
 801c584:	db06      	blt.n	801c594 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c586:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c588:	4474      	add	r4, lr
 801c58a:	3b01      	subs	r3, #1
 801c58c:	3503      	adds	r5, #3
 801c58e:	4410      	add	r0, r2
 801c590:	e7ef      	b.n	801c572 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c592:	d075      	beq.n	801c680 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801c594:	1e5a      	subs	r2, r3, #1
 801c596:	fb0e 4602 	mla	r6, lr, r2, r4
 801c59a:	1436      	asrs	r6, r6, #16
 801c59c:	d465      	bmi.n	801c66a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c59e:	4546      	cmp	r6, r8
 801c5a0:	da63      	bge.n	801c66a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c5a2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c5a4:	fb06 0202 	mla	r2, r6, r2, r0
 801c5a8:	1412      	asrs	r2, r2, #16
 801c5aa:	d45e      	bmi.n	801c66a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c5ac:	42ba      	cmp	r2, r7
 801c5ae:	da5c      	bge.n	801c66a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c5b0:	1cef      	adds	r7, r5, #3
 801c5b2:	4699      	mov	r9, r3
 801c5b4:	f1b9 0f00 	cmp.w	r9, #0
 801c5b8:	dd5d      	ble.n	801c676 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801c5ba:	1402      	asrs	r2, r0, #16
 801c5bc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c5c0:	1426      	asrs	r6, r4, #16
 801c5c2:	4692      	mov	sl, r2
 801c5c4:	9a00      	ldr	r2, [sp, #0]
 801c5c6:	fb08 220a 	mla	r2, r8, sl, r2
 801c5ca:	5d92      	ldrb	r2, [r2, r6]
 801c5cc:	9e01      	ldr	r6, [sp, #4]
 801c5ce:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c5d2:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801c5d6:	d041      	beq.n	801c65c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c5d8:	9a03      	ldr	r2, [sp, #12]
 801c5da:	fa5f fb86 	uxtb.w	fp, r6
 801c5de:	fb02 f808 	mul.w	r8, r2, r8
 801c5e2:	f108 0201 	add.w	r2, r8, #1
 801c5e6:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801c5ea:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801c5ee:	1212      	asrs	r2, r2, #8
 801c5f0:	fa1f fa82 	uxth.w	sl, r2
 801c5f4:	43d2      	mvns	r2, r2
 801c5f6:	fb1b fb0a 	smulbb	fp, fp, sl
 801c5fa:	b2d2      	uxtb	r2, r2
 801c5fc:	fb08 b802 	mla	r8, r8, r2, fp
 801c600:	fa1f f888 	uxth.w	r8, r8
 801c604:	f108 0b01 	add.w	fp, r8, #1
 801c608:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c60c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c610:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c614:	fb1b fb0a 	smulbb	fp, fp, sl
 801c618:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c61c:	fb16 fa0a 	smulbb	sl, r6, sl
 801c620:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c624:	f807 8c03 	strb.w	r8, [r7, #-3]
 801c628:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801c62c:	fb06 aa02 	mla	sl, r6, r2, sl
 801c630:	fb08 b802 	mla	r8, r8, r2, fp
 801c634:	fa1f fa8a 	uxth.w	sl, sl
 801c638:	fa1f f888 	uxth.w	r8, r8
 801c63c:	f10a 0601 	add.w	r6, sl, #1
 801c640:	f108 0b01 	add.w	fp, r8, #1
 801c644:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c648:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c64c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c650:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c654:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c658:	f807 8c02 	strb.w	r8, [r7, #-2]
 801c65c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c65e:	4474      	add	r4, lr
 801c660:	3703      	adds	r7, #3
 801c662:	f109 39ff 	add.w	r9, r9, #4294967295
 801c666:	4410      	add	r0, r2
 801c668:	e7a4      	b.n	801c5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c66a:	f04f 0800 	mov.w	r8, #0
 801c66e:	eba3 0208 	sub.w	r2, r3, r8
 801c672:	2a00      	cmp	r2, #0
 801c674:	dc3b      	bgt.n	801c6ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801c676:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c67a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c67e:	441d      	add	r5, r3
 801c680:	2900      	cmp	r1, #0
 801c682:	f340 8093 	ble.w	801c7ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c686:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c68a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c68c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c690:	3901      	subs	r1, #1
 801c692:	eeb0 6a62 	vmov.f32	s12, s5
 801c696:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c69a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c69e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6a2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c6a6:	eeb0 6a43 	vmov.f32	s12, s6
 801c6aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6ae:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c6b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c6c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c6c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c6ca:	ee12 2a90 	vmov	r2, s5
 801c6ce:	eef0 2a47 	vmov.f32	s5, s14
 801c6d2:	fb92 fef3 	sdiv	lr, r2, r3
 801c6d6:	ee13 2a10 	vmov	r2, s6
 801c6da:	eeb0 3a67 	vmov.f32	s6, s15
 801c6de:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6e2:	9a02      	ldr	r2, [sp, #8]
 801c6e4:	9312      	str	r3, [sp, #72]	; 0x48
 801c6e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6e8:	bf08      	it	eq
 801c6ea:	4613      	moveq	r3, r2
 801c6ec:	e731      	b.n	801c552 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c6ee:	1427      	asrs	r7, r4, #16
 801c6f0:	d456      	bmi.n	801c7a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c6f2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c6f6:	42be      	cmp	r6, r7
 801c6f8:	dd52      	ble.n	801c7a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c6fa:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c6fe:	d44f      	bmi.n	801c7a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c700:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c704:	454a      	cmp	r2, r9
 801c706:	dd4b      	ble.n	801c7a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c708:	9a00      	ldr	r2, [sp, #0]
 801c70a:	b236      	sxth	r6, r6
 801c70c:	fb09 2606 	mla	r6, r9, r6, r2
 801c710:	5df2      	ldrb	r2, [r6, r7]
 801c712:	9e01      	ldr	r6, [sp, #4]
 801c714:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c718:	0e3a      	lsrs	r2, r7, #24
 801c71a:	d041      	beq.n	801c7a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c71c:	9e03      	ldr	r6, [sp, #12]
 801c71e:	fa5f fb87 	uxtb.w	fp, r7
 801c722:	4372      	muls	r2, r6
 801c724:	1c56      	adds	r6, r2, #1
 801c726:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c72a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801c72e:	1212      	asrs	r2, r2, #8
 801c730:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c734:	fa1f fa82 	uxth.w	sl, r2
 801c738:	43d2      	mvns	r2, r2
 801c73a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c73e:	b2d2      	uxtb	r2, r2
 801c740:	fb09 b902 	mla	r9, r9, r2, fp
 801c744:	fa1f f989 	uxth.w	r9, r9
 801c748:	f109 0b01 	add.w	fp, r9, #1
 801c74c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c750:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c754:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c758:	fb1b fb0a 	smulbb	fp, fp, sl
 801c75c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c760:	fb17 fa0a 	smulbb	sl, r7, sl
 801c764:	f805 9006 	strb.w	r9, [r5, r6]
 801c768:	442e      	add	r6, r5
 801c76a:	78b7      	ldrb	r7, [r6, #2]
 801c76c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c770:	fb07 aa02 	mla	sl, r7, r2, sl
 801c774:	fb09 b902 	mla	r9, r9, r2, fp
 801c778:	fa1f fa8a 	uxth.w	sl, sl
 801c77c:	fa1f f989 	uxth.w	r9, r9
 801c780:	f10a 0701 	add.w	r7, sl, #1
 801c784:	f109 0b01 	add.w	fp, r9, #1
 801c788:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c78c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c790:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c794:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c798:	f886 a002 	strb.w	sl, [r6, #2]
 801c79c:	f886 9001 	strb.w	r9, [r6, #1]
 801c7a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c7a2:	4474      	add	r4, lr
 801c7a4:	f108 0801 	add.w	r8, r8, #1
 801c7a8:	4410      	add	r0, r2
 801c7aa:	e760      	b.n	801c66e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801c7ac:	b005      	add	sp, #20
 801c7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c7b2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c7b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7b6:	b085      	sub	sp, #20
 801c7b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c7bc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c7be:	9203      	str	r2, [sp, #12]
 801c7c0:	6868      	ldr	r0, [r5, #4]
 801c7c2:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c7c6:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801c7ca:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c7ce:	fb00 2404 	mla	r4, r0, r4, r2
 801c7d2:	682a      	ldr	r2, [r5, #0]
 801c7d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c7d8:	4414      	add	r4, r2
 801c7da:	f8dc 2000 	ldr.w	r2, [ip]
 801c7de:	9201      	str	r2, [sp, #4]
 801c7e0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c7e4:	3204      	adds	r2, #4
 801c7e6:	9202      	str	r2, [sp, #8]
 801c7e8:	2900      	cmp	r1, #0
 801c7ea:	dc03      	bgt.n	801c7f4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c7ec:	9a03      	ldr	r2, [sp, #12]
 801c7ee:	2a00      	cmp	r2, #0
 801c7f0:	f340 8137 	ble.w	801ca62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c7f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c7f6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c7fa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c7fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c800:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c804:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c808:	2b00      	cmp	r3, #0
 801c80a:	dd0d      	ble.n	801c828 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c80c:	1405      	asrs	r5, r0, #16
 801c80e:	d405      	bmi.n	801c81c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c810:	4545      	cmp	r5, r8
 801c812:	da03      	bge.n	801c81c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c814:	1415      	asrs	r5, r2, #16
 801c816:	d401      	bmi.n	801c81c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c818:	42bd      	cmp	r5, r7
 801c81a:	db06      	blt.n	801c82a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c81c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c81e:	4470      	add	r0, lr
 801c820:	3b01      	subs	r3, #1
 801c822:	3403      	adds	r4, #3
 801c824:	442a      	add	r2, r5
 801c826:	e7ef      	b.n	801c808 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801c828:	d070      	beq.n	801c90c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801c82a:	1e5d      	subs	r5, r3, #1
 801c82c:	fb0e 0605 	mla	r6, lr, r5, r0
 801c830:	1436      	asrs	r6, r6, #16
 801c832:	d462      	bmi.n	801c8fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c834:	4546      	cmp	r6, r8
 801c836:	da60      	bge.n	801c8fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c838:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c83a:	fb06 2505 	mla	r5, r6, r5, r2
 801c83e:	142d      	asrs	r5, r5, #16
 801c840:	d45b      	bmi.n	801c8fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c842:	42bd      	cmp	r5, r7
 801c844:	da59      	bge.n	801c8fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c846:	1ce5      	adds	r5, r4, #3
 801c848:	469a      	mov	sl, r3
 801c84a:	f1ba 0f00 	cmp.w	sl, #0
 801c84e:	dd58      	ble.n	801c902 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801c850:	1416      	asrs	r6, r2, #16
 801c852:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c856:	1407      	asrs	r7, r0, #16
 801c858:	46b1      	mov	r9, r6
 801c85a:	9e01      	ldr	r6, [sp, #4]
 801c85c:	fb08 6609 	mla	r6, r8, r9, r6
 801c860:	5df6      	ldrb	r6, [r6, r7]
 801c862:	9f02      	ldr	r7, [sp, #8]
 801c864:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801c868:	0e37      	lsrs	r7, r6, #24
 801c86a:	2fff      	cmp	r7, #255	; 0xff
 801c86c:	f000 80f0 	beq.w	801ca50 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801c870:	fa5f f887 	uxtb.w	r8, r7
 801c874:	b3d7      	cbz	r7, 801c8ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c876:	fa1f f788 	uxth.w	r7, r8
 801c87a:	ea6f 0808 	mvn.w	r8, r8
 801c87e:	fa5f fb86 	uxtb.w	fp, r6
 801c882:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c886:	fa5f f888 	uxtb.w	r8, r8
 801c88a:	fb1b fb07 	smulbb	fp, fp, r7
 801c88e:	fb09 b908 	mla	r9, r9, r8, fp
 801c892:	fa1f f989 	uxth.w	r9, r9
 801c896:	f109 0b01 	add.w	fp, r9, #1
 801c89a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c89e:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c8a2:	fb1b fb08 	smulbb	fp, fp, r8
 801c8a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8aa:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c8ae:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c8b2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c8b6:	fb09 b907 	mla	r9, r9, r7, fp
 801c8ba:	fa1f f989 	uxth.w	r9, r9
 801c8be:	f109 0b01 	add.w	fp, r9, #1
 801c8c2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c8c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8ca:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c8ce:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c8d2:	fb19 f808 	smulbb	r8, r9, r8
 801c8d6:	fb06 8607 	mla	r6, r6, r7, r8
 801c8da:	b2b6      	uxth	r6, r6
 801c8dc:	f106 0801 	add.w	r8, r6, #1
 801c8e0:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801c8e4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c8e8:	f805 8c01 	strb.w	r8, [r5, #-1]
 801c8ec:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c8ee:	4470      	add	r0, lr
 801c8f0:	3503      	adds	r5, #3
 801c8f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c8f6:	4432      	add	r2, r6
 801c8f8:	e7a7      	b.n	801c84a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c8fa:	2600      	movs	r6, #0
 801c8fc:	1b9d      	subs	r5, r3, r6
 801c8fe:	2d00      	cmp	r5, #0
 801c900:	dc3b      	bgt.n	801c97a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c902:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c906:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c90a:	441c      	add	r4, r3
 801c90c:	2900      	cmp	r1, #0
 801c90e:	f340 80a8 	ble.w	801ca62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c912:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c918:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c91c:	3901      	subs	r1, #1
 801c91e:	eeb0 6a62 	vmov.f32	s12, s5
 801c922:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c926:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c92a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c92e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c932:	eeb0 6a43 	vmov.f32	s12, s6
 801c936:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c93a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c93e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c942:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c946:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c94a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c94e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c952:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c956:	ee12 2a90 	vmov	r2, s5
 801c95a:	eef0 2a47 	vmov.f32	s5, s14
 801c95e:	fb92 fef3 	sdiv	lr, r2, r3
 801c962:	ee13 2a10 	vmov	r2, s6
 801c966:	eeb0 3a67 	vmov.f32	s6, s15
 801c96a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c96e:	9a03      	ldr	r2, [sp, #12]
 801c970:	9312      	str	r3, [sp, #72]	; 0x48
 801c972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c974:	bf08      	it	eq
 801c976:	4613      	moveq	r3, r2
 801c978:	e736      	b.n	801c7e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c97a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c97e:	d457      	bmi.n	801ca30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c980:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801c984:	4547      	cmp	r7, r8
 801c986:	dd53      	ble.n	801ca30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c988:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c98c:	d450      	bmi.n	801ca30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c98e:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801c992:	454d      	cmp	r5, r9
 801c994:	dd4c      	ble.n	801ca30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c996:	9d01      	ldr	r5, [sp, #4]
 801c998:	b23f      	sxth	r7, r7
 801c99a:	fb09 5707 	mla	r7, r9, r7, r5
 801c99e:	f817 5008 	ldrb.w	r5, [r7, r8]
 801c9a2:	9f02      	ldr	r7, [sp, #8]
 801c9a4:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801c9a8:	0e2f      	lsrs	r7, r5, #24
 801c9aa:	2fff      	cmp	r7, #255	; 0xff
 801c9ac:	d045      	beq.n	801ca3a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c9ae:	fa5f f987 	uxtb.w	r9, r7
 801c9b2:	b3ef      	cbz	r7, 801ca30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c9b4:	fa1f f889 	uxth.w	r8, r9
 801c9b8:	ea6f 0909 	mvn.w	r9, r9
 801c9bc:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c9c0:	fa5f fb85 	uxtb.w	fp, r5
 801c9c4:	f814 a007 	ldrb.w	sl, [r4, r7]
 801c9c8:	fa5f f989 	uxtb.w	r9, r9
 801c9cc:	fb1b fb08 	smulbb	fp, fp, r8
 801c9d0:	fb0a ba09 	mla	sl, sl, r9, fp
 801c9d4:	fa1f fa8a 	uxth.w	sl, sl
 801c9d8:	f10a 0b01 	add.w	fp, sl, #1
 801c9dc:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c9e0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c9e4:	f804 a007 	strb.w	sl, [r4, r7]
 801c9e8:	4427      	add	r7, r4
 801c9ea:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c9ee:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801c9f2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c9f6:	fb1b fb09 	smulbb	fp, fp, r9
 801c9fa:	fb0a ba08 	mla	sl, sl, r8, fp
 801c9fe:	fa1f fa8a 	uxth.w	sl, sl
 801ca02:	f10a 0b01 	add.w	fp, sl, #1
 801ca06:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801ca0a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ca0e:	f887 a001 	strb.w	sl, [r7, #1]
 801ca12:	f897 a002 	ldrb.w	sl, [r7, #2]
 801ca16:	fb1a f909 	smulbb	r9, sl, r9
 801ca1a:	fb05 9508 	mla	r5, r5, r8, r9
 801ca1e:	b2ad      	uxth	r5, r5
 801ca20:	f105 0901 	add.w	r9, r5, #1
 801ca24:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801ca28:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca2c:	f887 9002 	strb.w	r9, [r7, #2]
 801ca30:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ca32:	4470      	add	r0, lr
 801ca34:	3601      	adds	r6, #1
 801ca36:	442a      	add	r2, r5
 801ca38:	e760      	b.n	801c8fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801ca3a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801ca3e:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801ca42:	55e5      	strb	r5, [r4, r7]
 801ca44:	4427      	add	r7, r4
 801ca46:	0c2d      	lsrs	r5, r5, #16
 801ca48:	f887 8001 	strb.w	r8, [r7, #1]
 801ca4c:	70bd      	strb	r5, [r7, #2]
 801ca4e:	e7ef      	b.n	801ca30 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ca50:	0a37      	lsrs	r7, r6, #8
 801ca52:	f805 6c03 	strb.w	r6, [r5, #-3]
 801ca56:	0c36      	lsrs	r6, r6, #16
 801ca58:	f805 7c02 	strb.w	r7, [r5, #-2]
 801ca5c:	f805 6c01 	strb.w	r6, [r5, #-1]
 801ca60:	e744      	b.n	801c8ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ca62:	b005      	add	sp, #20
 801ca64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ca68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca6c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ca6e:	9201      	str	r2, [sp, #4]
 801ca70:	6870      	ldr	r0, [r6, #4]
 801ca72:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801ca76:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801ca7a:	fa1f fe85 	uxth.w	lr, r5
 801ca7e:	43ed      	mvns	r5, r5
 801ca80:	f8dc 8000 	ldr.w	r8, [ip]
 801ca84:	b2ed      	uxtb	r5, r5
 801ca86:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ca8a:	fb00 2404 	mla	r4, r0, r4, r2
 801ca8e:	6832      	ldr	r2, [r6, #0]
 801ca90:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ca94:	4414      	add	r4, r2
 801ca96:	2900      	cmp	r1, #0
 801ca98:	dc03      	bgt.n	801caa2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ca9a:	9a01      	ldr	r2, [sp, #4]
 801ca9c:	2a00      	cmp	r2, #0
 801ca9e:	f340 810d 	ble.w	801ccbc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801caa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801caa4:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801caa8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801caac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801caae:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801cab2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	dd0e      	ble.n	801cad8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801caba:	1406      	asrs	r6, r0, #16
 801cabc:	d405      	bmi.n	801caca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cabe:	4556      	cmp	r6, sl
 801cac0:	da03      	bge.n	801caca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cac2:	1416      	asrs	r6, r2, #16
 801cac4:	d401      	bmi.n	801caca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cac6:	454e      	cmp	r6, r9
 801cac8:	db07      	blt.n	801cada <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801caca:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801cacc:	3b01      	subs	r3, #1
 801cace:	3403      	adds	r4, #3
 801cad0:	4430      	add	r0, r6
 801cad2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801cad4:	4432      	add	r2, r6
 801cad6:	e7ee      	b.n	801cab6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801cad8:	d060      	beq.n	801cb9c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801cada:	1e5e      	subs	r6, r3, #1
 801cadc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cade:	fb07 0706 	mla	r7, r7, r6, r0
 801cae2:	143f      	asrs	r7, r7, #16
 801cae4:	d451      	bmi.n	801cb8a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cae6:	4557      	cmp	r7, sl
 801cae8:	da4f      	bge.n	801cb8a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801caea:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801caec:	fb07 2606 	mla	r6, r7, r6, r2
 801caf0:	1436      	asrs	r6, r6, #16
 801caf2:	d44a      	bmi.n	801cb8a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801caf4:	454e      	cmp	r6, r9
 801caf6:	da48      	bge.n	801cb8a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801caf8:	1ce6      	adds	r6, r4, #3
 801cafa:	4699      	mov	r9, r3
 801cafc:	f1b9 0f00 	cmp.w	r9, #0
 801cb00:	f106 0603 	add.w	r6, r6, #3
 801cb04:	dd45      	ble.n	801cb92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801cb06:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801cb0a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cb0e:	1417      	asrs	r7, r2, #16
 801cb10:	f109 39ff 	add.w	r9, r9, #4294967295
 801cb14:	fb0b a707 	mla	r7, fp, r7, sl
 801cb18:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801cb1c:	fb1b fb05 	smulbb	fp, fp, r5
 801cb20:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cb24:	eb08 0a07 	add.w	sl, r8, r7
 801cb28:	f818 7007 	ldrb.w	r7, [r8, r7]
 801cb2c:	fb07 b70e 	mla	r7, r7, lr, fp
 801cb30:	b2bf      	uxth	r7, r7
 801cb32:	f107 0b01 	add.w	fp, r7, #1
 801cb36:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cb3a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801cb3e:	fb1b fb05 	smulbb	fp, fp, r5
 801cb42:	123f      	asrs	r7, r7, #8
 801cb44:	f806 7c06 	strb.w	r7, [r6, #-6]
 801cb48:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801cb4c:	fb07 b70e 	mla	r7, r7, lr, fp
 801cb50:	b2bf      	uxth	r7, r7
 801cb52:	f107 0b01 	add.w	fp, r7, #1
 801cb56:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801cb5a:	123f      	asrs	r7, r7, #8
 801cb5c:	f806 7c05 	strb.w	r7, [r6, #-5]
 801cb60:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801cb64:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801cb68:	fb1a fa05 	smulbb	sl, sl, r5
 801cb6c:	fb07 a70e 	mla	r7, r7, lr, sl
 801cb70:	b2bf      	uxth	r7, r7
 801cb72:	f107 0a01 	add.w	sl, r7, #1
 801cb76:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801cb7a:	123f      	asrs	r7, r7, #8
 801cb7c:	f806 7c04 	strb.w	r7, [r6, #-4]
 801cb80:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cb82:	4438      	add	r0, r7
 801cb84:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cb86:	443a      	add	r2, r7
 801cb88:	e7b8      	b.n	801cafc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cb8a:	2700      	movs	r7, #0
 801cb8c:	1bde      	subs	r6, r3, r7
 801cb8e:	2e00      	cmp	r6, #0
 801cb90:	dc3f      	bgt.n	801cc12 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801cb92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cb96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb9a:	441c      	add	r4, r3
 801cb9c:	2900      	cmp	r1, #0
 801cb9e:	f340 808d 	ble.w	801ccbc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801cba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cba8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cbac:	3901      	subs	r1, #1
 801cbae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cbb2:	eef0 6a62 	vmov.f32	s13, s5
 801cbb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cbba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cbbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbc2:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801cbc6:	eef0 6a43 	vmov.f32	s13, s6
 801cbca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cbce:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801cbd2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cbd6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cbda:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cbde:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cbe2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cbe6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cbea:	ee12 2a90 	vmov	r2, s5
 801cbee:	eef0 2a47 	vmov.f32	s5, s14
 801cbf2:	fb92 f3f3 	sdiv	r3, r2, r3
 801cbf6:	ee13 2a10 	vmov	r2, s6
 801cbfa:	930f      	str	r3, [sp, #60]	; 0x3c
 801cbfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbfe:	eeb0 3a67 	vmov.f32	s6, s15
 801cc02:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc06:	9a01      	ldr	r2, [sp, #4]
 801cc08:	9310      	str	r3, [sp, #64]	; 0x40
 801cc0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc0c:	bf08      	it	eq
 801cc0e:	4613      	moveq	r3, r2
 801cc10:	e741      	b.n	801ca96 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801cc12:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cc16:	d44b      	bmi.n	801ccb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cc18:	f8dc b008 	ldr.w	fp, [ip, #8]
 801cc1c:	45cb      	cmp	fp, r9
 801cc1e:	dd47      	ble.n	801ccb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cc20:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cc24:	d444      	bmi.n	801ccb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cc26:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801cc2a:	4556      	cmp	r6, sl
 801cc2c:	dd40      	ble.n	801ccb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cc2e:	fa0f f68b 	sxth.w	r6, fp
 801cc32:	fb0a 9906 	mla	r9, sl, r6, r9
 801cc36:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801cc3a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801cc3e:	f814 b006 	ldrb.w	fp, [r4, r6]
 801cc42:	fb1b fb05 	smulbb	fp, fp, r5
 801cc46:	eb08 0a09 	add.w	sl, r8, r9
 801cc4a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801cc4e:	fb09 b90e 	mla	r9, r9, lr, fp
 801cc52:	fa1f f989 	uxth.w	r9, r9
 801cc56:	f109 0b01 	add.w	fp, r9, #1
 801cc5a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cc5e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc62:	f804 9006 	strb.w	r9, [r4, r6]
 801cc66:	4426      	add	r6, r4
 801cc68:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801cc6c:	f896 b001 	ldrb.w	fp, [r6, #1]
 801cc70:	fb1b fb05 	smulbb	fp, fp, r5
 801cc74:	fb09 b90e 	mla	r9, r9, lr, fp
 801cc78:	fa1f f989 	uxth.w	r9, r9
 801cc7c:	f109 0b01 	add.w	fp, r9, #1
 801cc80:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cc84:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc88:	f886 9001 	strb.w	r9, [r6, #1]
 801cc8c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801cc90:	f896 a002 	ldrb.w	sl, [r6, #2]
 801cc94:	fb1a fa05 	smulbb	sl, sl, r5
 801cc98:	fb09 a90e 	mla	r9, r9, lr, sl
 801cc9c:	fa1f f989 	uxth.w	r9, r9
 801cca0:	f109 0a01 	add.w	sl, r9, #1
 801cca4:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801cca8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ccac:	f886 9002 	strb.w	r9, [r6, #2]
 801ccb0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ccb2:	3701      	adds	r7, #1
 801ccb4:	4430      	add	r0, r6
 801ccb6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ccb8:	4432      	add	r2, r6
 801ccba:	e767      	b.n	801cb8c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801ccbc:	b003      	add	sp, #12
 801ccbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ccc2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ccc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccc6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ccc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cccc:	9201      	str	r2, [sp, #4]
 801ccce:	6868      	ldr	r0, [r5, #4]
 801ccd0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801ccd2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ccd6:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801ccda:	fb00 2404 	mla	r4, r0, r4, r2
 801ccde:	682a      	ldr	r2, [r5, #0]
 801cce0:	f8d7 8000 	ldr.w	r8, [r7]
 801cce4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cce8:	4414      	add	r4, r2
 801ccea:	2900      	cmp	r1, #0
 801ccec:	dc03      	bgt.n	801ccf6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ccee:	9a01      	ldr	r2, [sp, #4]
 801ccf0:	2a00      	cmp	r2, #0
 801ccf2:	f340 80af 	ble.w	801ce54 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ccf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ccf8:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801ccfc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cd00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd02:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801cd06:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	dd0c      	ble.n	801cd28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801cd0e:	1405      	asrs	r5, r0, #16
 801cd10:	d405      	bmi.n	801cd1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cd12:	4555      	cmp	r5, sl
 801cd14:	da03      	bge.n	801cd1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cd16:	1415      	asrs	r5, r2, #16
 801cd18:	d401      	bmi.n	801cd1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cd1a:	454d      	cmp	r5, r9
 801cd1c:	db05      	blt.n	801cd2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cd1e:	4470      	add	r0, lr
 801cd20:	4462      	add	r2, ip
 801cd22:	3b01      	subs	r3, #1
 801cd24:	3403      	adds	r4, #3
 801cd26:	e7f0      	b.n	801cd0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cd28:	d038      	beq.n	801cd9c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801cd2a:	1e5d      	subs	r5, r3, #1
 801cd2c:	fb0e 0605 	mla	r6, lr, r5, r0
 801cd30:	1436      	asrs	r6, r6, #16
 801cd32:	d42a      	bmi.n	801cd8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cd34:	4556      	cmp	r6, sl
 801cd36:	da28      	bge.n	801cd8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cd38:	fb0c 2505 	mla	r5, ip, r5, r2
 801cd3c:	142d      	asrs	r5, r5, #16
 801cd3e:	d424      	bmi.n	801cd8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cd40:	454d      	cmp	r5, r9
 801cd42:	da22      	bge.n	801cd8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cd44:	1ce6      	adds	r6, r4, #3
 801cd46:	4699      	mov	r9, r3
 801cd48:	f1b9 0f00 	cmp.w	r9, #0
 801cd4c:	f106 0603 	add.w	r6, r6, #3
 801cd50:	dd1f      	ble.n	801cd92 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801cd52:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801cd56:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cd5a:	1415      	asrs	r5, r2, #16
 801cd5c:	4470      	add	r0, lr
 801cd5e:	4462      	add	r2, ip
 801cd60:	f109 39ff 	add.w	r9, r9, #4294967295
 801cd64:	fb0b a505 	mla	r5, fp, r5, sl
 801cd68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd6c:	eb08 0a05 	add.w	sl, r8, r5
 801cd70:	f818 5005 	ldrb.w	r5, [r8, r5]
 801cd74:	f806 5c06 	strb.w	r5, [r6, #-6]
 801cd78:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801cd7c:	f806 5c05 	strb.w	r5, [r6, #-5]
 801cd80:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801cd84:	f806 5c04 	strb.w	r5, [r6, #-4]
 801cd88:	e7de      	b.n	801cd48 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cd8a:	2600      	movs	r6, #0
 801cd8c:	1b9d      	subs	r5, r3, r6
 801cd8e:	2d00      	cmp	r5, #0
 801cd90:	dc38      	bgt.n	801ce04 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801cd92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd9a:	441c      	add	r4, r3
 801cd9c:	2900      	cmp	r1, #0
 801cd9e:	dd59      	ble.n	801ce54 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801cda0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cda4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cda6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cdaa:	3901      	subs	r1, #1
 801cdac:	eeb0 6a62 	vmov.f32	s12, s5
 801cdb0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cdb4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cdb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdbc:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801cdc0:	eeb0 6a43 	vmov.f32	s12, s6
 801cdc4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdc8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801cdcc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cdd0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cdd4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cdd8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cddc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cde0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cde4:	ee12 2a90 	vmov	r2, s5
 801cde8:	eef0 2a47 	vmov.f32	s5, s14
 801cdec:	fb92 fef3 	sdiv	lr, r2, r3
 801cdf0:	ee13 2a10 	vmov	r2, s6
 801cdf4:	eeb0 3a67 	vmov.f32	s6, s15
 801cdf8:	fb92 fcf3 	sdiv	ip, r2, r3
 801cdfc:	9a01      	ldr	r2, [sp, #4]
 801cdfe:	bf08      	it	eq
 801ce00:	4613      	moveq	r3, r2
 801ce02:	e772      	b.n	801ccea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801ce04:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ce08:	d420      	bmi.n	801ce4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ce0a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801ce0e:	45cb      	cmp	fp, r9
 801ce10:	dd1c      	ble.n	801ce4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ce12:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ce16:	d419      	bmi.n	801ce4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ce18:	68fd      	ldr	r5, [r7, #12]
 801ce1a:	4555      	cmp	r5, sl
 801ce1c:	dd16      	ble.n	801ce4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801ce1e:	fa0f f58b 	sxth.w	r5, fp
 801ce22:	fb0a 9505 	mla	r5, sl, r5, r9
 801ce26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce2a:	f818 9005 	ldrb.w	r9, [r8, r5]
 801ce2e:	eb08 0b05 	add.w	fp, r8, r5
 801ce32:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801ce36:	f804 9005 	strb.w	r9, [r4, r5]
 801ce3a:	4425      	add	r5, r4
 801ce3c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801ce40:	f885 9001 	strb.w	r9, [r5, #1]
 801ce44:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ce48:	f885 9002 	strb.w	r9, [r5, #2]
 801ce4c:	4470      	add	r0, lr
 801ce4e:	4462      	add	r2, ip
 801ce50:	3601      	adds	r6, #1
 801ce52:	e79b      	b.n	801cd8c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801ce54:	b003      	add	sp, #12
 801ce56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce5a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce5e:	b085      	sub	sp, #20
 801ce60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce64:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ce66:	9202      	str	r2, [sp, #8]
 801ce68:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801ce6c:	6860      	ldr	r0, [r4, #4]
 801ce6e:	9203      	str	r2, [sp, #12]
 801ce70:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801ce74:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801ce78:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ce7c:	fb00 2505 	mla	r5, r0, r5, r2
 801ce80:	6822      	ldr	r2, [r4, #0]
 801ce82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce86:	4415      	add	r5, r2
 801ce88:	f8dc 2000 	ldr.w	r2, [ip]
 801ce8c:	9201      	str	r2, [sp, #4]
 801ce8e:	2900      	cmp	r1, #0
 801ce90:	dc03      	bgt.n	801ce9a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ce92:	9a02      	ldr	r2, [sp, #8]
 801ce94:	2a00      	cmp	r2, #0
 801ce96:	f340 8122 	ble.w	801d0de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801ce9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ce9c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801cea0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cea4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cea6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ceaa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	dd0d      	ble.n	801cece <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ceb2:	1422      	asrs	r2, r4, #16
 801ceb4:	d405      	bmi.n	801cec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ceb6:	4542      	cmp	r2, r8
 801ceb8:	da03      	bge.n	801cec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ceba:	1402      	asrs	r2, r0, #16
 801cebc:	d401      	bmi.n	801cec2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cebe:	42ba      	cmp	r2, r7
 801cec0:	db06      	blt.n	801ced0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cec2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cec4:	4474      	add	r4, lr
 801cec6:	3b01      	subs	r3, #1
 801cec8:	3503      	adds	r5, #3
 801ceca:	4410      	add	r0, r2
 801cecc:	e7ef      	b.n	801ceae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801cece:	d072      	beq.n	801cfb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801ced0:	1e5a      	subs	r2, r3, #1
 801ced2:	fb0e 4602 	mla	r6, lr, r2, r4
 801ced6:	1436      	asrs	r6, r6, #16
 801ced8:	d462      	bmi.n	801cfa0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ceda:	4546      	cmp	r6, r8
 801cedc:	da60      	bge.n	801cfa0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cede:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801cee0:	fb06 0202 	mla	r2, r6, r2, r0
 801cee4:	1412      	asrs	r2, r2, #16
 801cee6:	d45b      	bmi.n	801cfa0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cee8:	42ba      	cmp	r2, r7
 801ceea:	da59      	bge.n	801cfa0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ceec:	1cef      	adds	r7, r5, #3
 801ceee:	4699      	mov	r9, r3
 801cef0:	f1b9 0f00 	cmp.w	r9, #0
 801cef4:	dd5a      	ble.n	801cfac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cef6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801cefa:	1426      	asrs	r6, r4, #16
 801cefc:	1402      	asrs	r2, r0, #16
 801cefe:	fb08 6202 	mla	r2, r8, r2, r6
 801cf02:	9e01      	ldr	r6, [sp, #4]
 801cf04:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801cf08:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801cf0c:	d041      	beq.n	801cf92 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801cf0e:	9a03      	ldr	r2, [sp, #12]
 801cf10:	fa5f fb86 	uxtb.w	fp, r6
 801cf14:	fb02 f808 	mul.w	r8, r2, r8
 801cf18:	f108 0201 	add.w	r2, r8, #1
 801cf1c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801cf20:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801cf24:	1212      	asrs	r2, r2, #8
 801cf26:	fa1f fa82 	uxth.w	sl, r2
 801cf2a:	43d2      	mvns	r2, r2
 801cf2c:	fb1b fb0a 	smulbb	fp, fp, sl
 801cf30:	b2d2      	uxtb	r2, r2
 801cf32:	fb08 b802 	mla	r8, r8, r2, fp
 801cf36:	fa1f f888 	uxth.w	r8, r8
 801cf3a:	f108 0b01 	add.w	fp, r8, #1
 801cf3e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cf42:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801cf46:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cf4a:	fb1b fb0a 	smulbb	fp, fp, sl
 801cf4e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cf52:	fb16 fa0a 	smulbb	sl, r6, sl
 801cf56:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801cf5a:	f807 8c03 	strb.w	r8, [r7, #-3]
 801cf5e:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801cf62:	fb06 aa02 	mla	sl, r6, r2, sl
 801cf66:	fb08 b802 	mla	r8, r8, r2, fp
 801cf6a:	fa1f fa8a 	uxth.w	sl, sl
 801cf6e:	fa1f f888 	uxth.w	r8, r8
 801cf72:	f10a 0601 	add.w	r6, sl, #1
 801cf76:	f108 0b01 	add.w	fp, r8, #1
 801cf7a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801cf7e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cf82:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cf86:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cf8a:	f807 ac01 	strb.w	sl, [r7, #-1]
 801cf8e:	f807 8c02 	strb.w	r8, [r7, #-2]
 801cf92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cf94:	4474      	add	r4, lr
 801cf96:	3703      	adds	r7, #3
 801cf98:	f109 39ff 	add.w	r9, r9, #4294967295
 801cf9c:	4410      	add	r0, r2
 801cf9e:	e7a7      	b.n	801cef0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cfa0:	f04f 0800 	mov.w	r8, #0
 801cfa4:	eba3 0208 	sub.w	r2, r3, r8
 801cfa8:	2a00      	cmp	r2, #0
 801cfaa:	dc3b      	bgt.n	801d024 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801cfac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cfb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfb4:	441d      	add	r5, r3
 801cfb6:	2900      	cmp	r1, #0
 801cfb8:	f340 8091 	ble.w	801d0de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801cfbc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cfc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfc2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cfc6:	3901      	subs	r1, #1
 801cfc8:	eeb0 6a62 	vmov.f32	s12, s5
 801cfcc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cfd0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cfd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cfd8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cfdc:	eeb0 6a43 	vmov.f32	s12, s6
 801cfe0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cfe4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cfe8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cfec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cff0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cff4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cff8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cffc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d000:	ee12 2a90 	vmov	r2, s5
 801d004:	eef0 2a47 	vmov.f32	s5, s14
 801d008:	fb92 fef3 	sdiv	lr, r2, r3
 801d00c:	ee13 2a10 	vmov	r2, s6
 801d010:	eeb0 3a67 	vmov.f32	s6, s15
 801d014:	fb92 f3f3 	sdiv	r3, r2, r3
 801d018:	9a02      	ldr	r2, [sp, #8]
 801d01a:	9312      	str	r3, [sp, #72]	; 0x48
 801d01c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d01e:	bf08      	it	eq
 801d020:	4613      	moveq	r3, r2
 801d022:	e734      	b.n	801ce8e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d024:	1427      	asrs	r7, r4, #16
 801d026:	d454      	bmi.n	801d0d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d028:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d02c:	42be      	cmp	r6, r7
 801d02e:	dd50      	ble.n	801d0d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d030:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d034:	d44d      	bmi.n	801d0d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d036:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d03a:	454a      	cmp	r2, r9
 801d03c:	dd49      	ble.n	801d0d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d03e:	b236      	sxth	r6, r6
 801d040:	9a01      	ldr	r2, [sp, #4]
 801d042:	fb09 7606 	mla	r6, r9, r6, r7
 801d046:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801d04a:	0e3a      	lsrs	r2, r7, #24
 801d04c:	d041      	beq.n	801d0d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d04e:	9e03      	ldr	r6, [sp, #12]
 801d050:	fa5f fb87 	uxtb.w	fp, r7
 801d054:	4372      	muls	r2, r6
 801d056:	1c56      	adds	r6, r2, #1
 801d058:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d05c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801d060:	1212      	asrs	r2, r2, #8
 801d062:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d066:	fa1f fa82 	uxth.w	sl, r2
 801d06a:	43d2      	mvns	r2, r2
 801d06c:	fb1b fb0a 	smulbb	fp, fp, sl
 801d070:	b2d2      	uxtb	r2, r2
 801d072:	fb09 b902 	mla	r9, r9, r2, fp
 801d076:	fa1f f989 	uxth.w	r9, r9
 801d07a:	f109 0b01 	add.w	fp, r9, #1
 801d07e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d082:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d086:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d08a:	fb1b fb0a 	smulbb	fp, fp, sl
 801d08e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d092:	fb17 fa0a 	smulbb	sl, r7, sl
 801d096:	f805 9006 	strb.w	r9, [r5, r6]
 801d09a:	442e      	add	r6, r5
 801d09c:	78b7      	ldrb	r7, [r6, #2]
 801d09e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d0a2:	fb07 aa02 	mla	sl, r7, r2, sl
 801d0a6:	fb09 b902 	mla	r9, r9, r2, fp
 801d0aa:	fa1f fa8a 	uxth.w	sl, sl
 801d0ae:	fa1f f989 	uxth.w	r9, r9
 801d0b2:	f10a 0701 	add.w	r7, sl, #1
 801d0b6:	f109 0b01 	add.w	fp, r9, #1
 801d0ba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d0be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d0c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d0c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d0ca:	f886 a002 	strb.w	sl, [r6, #2]
 801d0ce:	f886 9001 	strb.w	r9, [r6, #1]
 801d0d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d0d4:	4474      	add	r4, lr
 801d0d6:	f108 0801 	add.w	r8, r8, #1
 801d0da:	4410      	add	r0, r2
 801d0dc:	e762      	b.n	801cfa4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801d0de:	b005      	add	sp, #20
 801d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d0e4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0e8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d0ee:	9201      	str	r2, [sp, #4]
 801d0f0:	6860      	ldr	r0, [r4, #4]
 801d0f2:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801d0f6:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801d0fa:	fb00 2505 	mla	r5, r0, r5, r2
 801d0fe:	6822      	ldr	r2, [r4, #0]
 801d100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d104:	4415      	add	r5, r2
 801d106:	f8dc 2000 	ldr.w	r2, [ip]
 801d10a:	9200      	str	r2, [sp, #0]
 801d10c:	2900      	cmp	r1, #0
 801d10e:	dc03      	bgt.n	801d118 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d110:	9a01      	ldr	r2, [sp, #4]
 801d112:	2a00      	cmp	r2, #0
 801d114:	f340 812b 	ble.w	801d36e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d11a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d11e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d124:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d128:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	dd0e      	ble.n	801d14e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d130:	1422      	asrs	r2, r4, #16
 801d132:	d405      	bmi.n	801d140 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d134:	4572      	cmp	r2, lr
 801d136:	da03      	bge.n	801d140 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d138:	1402      	asrs	r2, r0, #16
 801d13a:	d401      	bmi.n	801d140 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d13c:	42ba      	cmp	r2, r7
 801d13e:	db07      	blt.n	801d150 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d140:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d142:	3b01      	subs	r3, #1
 801d144:	3503      	adds	r5, #3
 801d146:	4414      	add	r4, r2
 801d148:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d14a:	4410      	add	r0, r2
 801d14c:	e7ee      	b.n	801d12c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d14e:	d06f      	beq.n	801d230 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d150:	1e5a      	subs	r2, r3, #1
 801d152:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d154:	fb06 4602 	mla	r6, r6, r2, r4
 801d158:	1436      	asrs	r6, r6, #16
 801d15a:	d45e      	bmi.n	801d21a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d15c:	4576      	cmp	r6, lr
 801d15e:	da5c      	bge.n	801d21a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d160:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d162:	fb06 0202 	mla	r2, r6, r2, r0
 801d166:	1412      	asrs	r2, r2, #16
 801d168:	d457      	bmi.n	801d21a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d16a:	42ba      	cmp	r2, r7
 801d16c:	da55      	bge.n	801d21a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d16e:	1cee      	adds	r6, r5, #3
 801d170:	469a      	mov	sl, r3
 801d172:	f1ba 0f00 	cmp.w	sl, #0
 801d176:	dd56      	ble.n	801d226 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d178:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d17c:	1427      	asrs	r7, r4, #16
 801d17e:	1402      	asrs	r2, r0, #16
 801d180:	fb0e 7202 	mla	r2, lr, r2, r7
 801d184:	9f00      	ldr	r7, [sp, #0]
 801d186:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801d18a:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801d18e:	d03c      	beq.n	801d20a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d190:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d194:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d198:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d19c:	fa5f f28e 	uxtb.w	r2, lr
 801d1a0:	b2ff      	uxtb	r7, r7
 801d1a2:	f000 80dd 	beq.w	801d360 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d1a6:	fa1f f882 	uxth.w	r8, r2
 801d1aa:	43d2      	mvns	r2, r2
 801d1ac:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801d1b0:	fb17 f708 	smulbb	r7, r7, r8
 801d1b4:	b2d2      	uxtb	r2, r2
 801d1b6:	fb19 f908 	smulbb	r9, r9, r8
 801d1ba:	fb0e 7702 	mla	r7, lr, r2, r7
 801d1be:	fb1b f808 	smulbb	r8, fp, r8
 801d1c2:	b2bf      	uxth	r7, r7
 801d1c4:	f107 0e01 	add.w	lr, r7, #1
 801d1c8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d1cc:	123f      	asrs	r7, r7, #8
 801d1ce:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d1d2:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801d1d6:	fb07 9902 	mla	r9, r7, r2, r9
 801d1da:	fa1f f989 	uxth.w	r9, r9
 801d1de:	f109 0701 	add.w	r7, r9, #1
 801d1e2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d1e6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d1ea:	fb07 8802 	mla	r8, r7, r2, r8
 801d1ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d1f2:	fa1f f888 	uxth.w	r8, r8
 801d1f6:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d1fa:	f108 0201 	add.w	r2, r8, #1
 801d1fe:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d202:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d206:	f806 8c01 	strb.w	r8, [r6, #-1]
 801d20a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d20c:	3603      	adds	r6, #3
 801d20e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d212:	4414      	add	r4, r2
 801d214:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d216:	4410      	add	r0, r2
 801d218:	e7ab      	b.n	801d172 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d21a:	f04f 0e00 	mov.w	lr, #0
 801d21e:	eba3 020e 	sub.w	r2, r3, lr
 801d222:	2a00      	cmp	r2, #0
 801d224:	dc3d      	bgt.n	801d2a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801d226:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d22a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d22e:	441d      	add	r5, r3
 801d230:	2900      	cmp	r1, #0
 801d232:	f340 809c 	ble.w	801d36e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d236:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d23a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d23c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d240:	3901      	subs	r1, #1
 801d242:	eeb0 6a62 	vmov.f32	s12, s5
 801d246:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d24a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d24e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d252:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801d256:	eeb0 6a43 	vmov.f32	s12, s6
 801d25a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d25e:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801d262:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d266:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d26a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d26e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d272:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d276:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d27a:	ee12 2a90 	vmov	r2, s5
 801d27e:	eef0 2a47 	vmov.f32	s5, s14
 801d282:	fb92 f3f3 	sdiv	r3, r2, r3
 801d286:	ee13 2a10 	vmov	r2, s6
 801d28a:	930f      	str	r3, [sp, #60]	; 0x3c
 801d28c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d28e:	eeb0 3a67 	vmov.f32	s6, s15
 801d292:	fb92 f3f3 	sdiv	r3, r2, r3
 801d296:	9a01      	ldr	r2, [sp, #4]
 801d298:	9310      	str	r3, [sp, #64]	; 0x40
 801d29a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d29c:	bf08      	it	eq
 801d29e:	4613      	moveq	r3, r2
 801d2a0:	e734      	b.n	801d10c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801d2a2:	1427      	asrs	r7, r4, #16
 801d2a4:	d44d      	bmi.n	801d342 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d2a6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d2aa:	42be      	cmp	r6, r7
 801d2ac:	dd49      	ble.n	801d342 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d2ae:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d2b2:	d446      	bmi.n	801d342 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d2b4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d2b8:	4542      	cmp	r2, r8
 801d2ba:	dd42      	ble.n	801d342 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d2bc:	b236      	sxth	r6, r6
 801d2be:	9a00      	ldr	r2, [sp, #0]
 801d2c0:	fb08 7606 	mla	r6, r8, r6, r7
 801d2c4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801d2c8:	0e3a      	lsrs	r2, r7, #24
 801d2ca:	d03a      	beq.n	801d342 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d2cc:	2aff      	cmp	r2, #255	; 0xff
 801d2ce:	b2d6      	uxtb	r6, r2
 801d2d0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d2d4:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d2d8:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801d2dc:	b2ff      	uxtb	r7, r7
 801d2de:	d037      	beq.n	801d350 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801d2e0:	fa1f f986 	uxth.w	r9, r6
 801d2e4:	4472      	add	r2, lr
 801d2e6:	43f6      	mvns	r6, r6
 801d2e8:	f815 8002 	ldrb.w	r8, [r5, r2]
 801d2ec:	fb17 f709 	smulbb	r7, r7, r9
 801d2f0:	fb1a fa09 	smulbb	sl, sl, r9
 801d2f4:	b2f6      	uxtb	r6, r6
 801d2f6:	fb1b f909 	smulbb	r9, fp, r9
 801d2fa:	fb08 7706 	mla	r7, r8, r6, r7
 801d2fe:	b2bf      	uxth	r7, r7
 801d300:	f107 0801 	add.w	r8, r7, #1
 801d304:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801d308:	123f      	asrs	r7, r7, #8
 801d30a:	54af      	strb	r7, [r5, r2]
 801d30c:	442a      	add	r2, r5
 801d30e:	7857      	ldrb	r7, [r2, #1]
 801d310:	fb07 aa06 	mla	sl, r7, r6, sl
 801d314:	fa1f fa8a 	uxth.w	sl, sl
 801d318:	f10a 0701 	add.w	r7, sl, #1
 801d31c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d320:	7897      	ldrb	r7, [r2, #2]
 801d322:	fb07 9906 	mla	r9, r7, r6, r9
 801d326:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d32a:	fa1f f989 	uxth.w	r9, r9
 801d32e:	f882 a001 	strb.w	sl, [r2, #1]
 801d332:	f109 0601 	add.w	r6, r9, #1
 801d336:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d33a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d33e:	f882 9002 	strb.w	r9, [r2, #2]
 801d342:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d344:	f10e 0e01 	add.w	lr, lr, #1
 801d348:	4414      	add	r4, r2
 801d34a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d34c:	4410      	add	r0, r2
 801d34e:	e766      	b.n	801d21e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d350:	4472      	add	r2, lr
 801d352:	54af      	strb	r7, [r5, r2]
 801d354:	442a      	add	r2, r5
 801d356:	f882 a001 	strb.w	sl, [r2, #1]
 801d35a:	f882 b002 	strb.w	fp, [r2, #2]
 801d35e:	e7f0      	b.n	801d342 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d360:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d364:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d368:	f806 bc01 	strb.w	fp, [r6, #-1]
 801d36c:	e74d      	b.n	801d20a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d36e:	b003      	add	sp, #12
 801d370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d374 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d378:	b087      	sub	sp, #28
 801d37a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d37e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d380:	9204      	str	r2, [sp, #16]
 801d382:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d386:	6860      	ldr	r0, [r4, #4]
 801d388:	9205      	str	r2, [sp, #20]
 801d38a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d38e:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801d392:	9101      	str	r1, [sp, #4]
 801d394:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d398:	fb00 2505 	mla	r5, r0, r5, r2
 801d39c:	6822      	ldr	r2, [r4, #0]
 801d39e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d3a2:	4415      	add	r5, r2
 801d3a4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d3a8:	3201      	adds	r2, #1
 801d3aa:	f022 0201 	bic.w	r2, r2, #1
 801d3ae:	9202      	str	r2, [sp, #8]
 801d3b0:	f8dc 2000 	ldr.w	r2, [ip]
 801d3b4:	9203      	str	r2, [sp, #12]
 801d3b6:	9a01      	ldr	r2, [sp, #4]
 801d3b8:	2a00      	cmp	r2, #0
 801d3ba:	dc03      	bgt.n	801d3c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d3bc:	9a04      	ldr	r2, [sp, #16]
 801d3be:	2a00      	cmp	r2, #0
 801d3c0:	f340 8135 	ble.w	801d62e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d3c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d3c6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d3ca:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d3ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d3d0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d3d4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	dd0d      	ble.n	801d3f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d3dc:	1422      	asrs	r2, r4, #16
 801d3de:	d405      	bmi.n	801d3ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d3e0:	4542      	cmp	r2, r8
 801d3e2:	da03      	bge.n	801d3ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d3e4:	1402      	asrs	r2, r0, #16
 801d3e6:	d401      	bmi.n	801d3ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d3e8:	42ba      	cmp	r2, r7
 801d3ea:	db06      	blt.n	801d3fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d3ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d3ee:	4474      	add	r4, lr
 801d3f0:	3b01      	subs	r3, #1
 801d3f2:	3503      	adds	r5, #3
 801d3f4:	4410      	add	r0, r2
 801d3f6:	e7ef      	b.n	801d3d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d3f8:	d077      	beq.n	801d4ea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801d3fa:	1e5a      	subs	r2, r3, #1
 801d3fc:	fb0e 4602 	mla	r6, lr, r2, r4
 801d400:	1436      	asrs	r6, r6, #16
 801d402:	d469      	bmi.n	801d4d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d404:	4546      	cmp	r6, r8
 801d406:	da67      	bge.n	801d4d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d408:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d40a:	fb06 0202 	mla	r2, r6, r2, r0
 801d40e:	1412      	asrs	r2, r2, #16
 801d410:	d462      	bmi.n	801d4d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d412:	42ba      	cmp	r2, r7
 801d414:	da60      	bge.n	801d4d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d416:	1cee      	adds	r6, r5, #3
 801d418:	4699      	mov	r9, r3
 801d41a:	f1b9 0f00 	cmp.w	r9, #0
 801d41e:	dd5f      	ble.n	801d4e0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d420:	1422      	asrs	r2, r4, #16
 801d422:	9902      	ldr	r1, [sp, #8]
 801d424:	1407      	asrs	r7, r0, #16
 801d426:	fb01 2707 	mla	r7, r1, r7, r2
 801d42a:	9903      	ldr	r1, [sp, #12]
 801d42c:	087a      	lsrs	r2, r7, #1
 801d42e:	5c8a      	ldrb	r2, [r1, r2]
 801d430:	07f9      	lsls	r1, r7, #31
 801d432:	bf54      	ite	pl
 801d434:	f002 020f 	andpl.w	r2, r2, #15
 801d438:	1112      	asrmi	r2, r2, #4
 801d43a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d43e:	b2d2      	uxtb	r2, r2
 801d440:	2a00      	cmp	r2, #0
 801d442:	d042      	beq.n	801d4ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d444:	497b      	ldr	r1, [pc, #492]	; (801d634 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d446:	680f      	ldr	r7, [r1, #0]
 801d448:	9905      	ldr	r1, [sp, #20]
 801d44a:	fa5f fb87 	uxtb.w	fp, r7
 801d44e:	434a      	muls	r2, r1
 801d450:	f102 0801 	add.w	r8, r2, #1
 801d454:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801d458:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801d45c:	1212      	asrs	r2, r2, #8
 801d45e:	fa1f fa82 	uxth.w	sl, r2
 801d462:	43d2      	mvns	r2, r2
 801d464:	fb1b fb0a 	smulbb	fp, fp, sl
 801d468:	b2d2      	uxtb	r2, r2
 801d46a:	fb08 b802 	mla	r8, r8, r2, fp
 801d46e:	fa1f f888 	uxth.w	r8, r8
 801d472:	f108 0b01 	add.w	fp, r8, #1
 801d476:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d47a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d47e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d482:	fb1b fb0a 	smulbb	fp, fp, sl
 801d486:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d48a:	fb17 fa0a 	smulbb	sl, r7, sl
 801d48e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d492:	f806 8c03 	strb.w	r8, [r6, #-3]
 801d496:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801d49a:	fb07 aa02 	mla	sl, r7, r2, sl
 801d49e:	fb08 b802 	mla	r8, r8, r2, fp
 801d4a2:	fa1f fa8a 	uxth.w	sl, sl
 801d4a6:	fa1f f888 	uxth.w	r8, r8
 801d4aa:	f10a 0701 	add.w	r7, sl, #1
 801d4ae:	f108 0b01 	add.w	fp, r8, #1
 801d4b2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d4b6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d4ba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d4be:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d4c2:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d4c6:	f806 8c02 	strb.w	r8, [r6, #-2]
 801d4ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d4cc:	4474      	add	r4, lr
 801d4ce:	3603      	adds	r6, #3
 801d4d0:	f109 39ff 	add.w	r9, r9, #4294967295
 801d4d4:	4410      	add	r0, r2
 801d4d6:	e7a0      	b.n	801d41a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d4d8:	2700      	movs	r7, #0
 801d4da:	1bda      	subs	r2, r3, r7
 801d4dc:	2a00      	cmp	r2, #0
 801d4de:	dc3e      	bgt.n	801d55e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d4e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d4e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d4e8:	441d      	add	r5, r3
 801d4ea:	9b01      	ldr	r3, [sp, #4]
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	f340 809e 	ble.w	801d62e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d4f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d4f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d4f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d4fc:	eeb0 6a62 	vmov.f32	s12, s5
 801d500:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d504:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d508:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d50c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d510:	eeb0 6a43 	vmov.f32	s12, s6
 801d514:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d518:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d51c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d520:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d524:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d528:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d52c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d530:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d534:	ee12 2a90 	vmov	r2, s5
 801d538:	eef0 2a47 	vmov.f32	s5, s14
 801d53c:	fb92 fef3 	sdiv	lr, r2, r3
 801d540:	ee13 2a10 	vmov	r2, s6
 801d544:	eeb0 3a67 	vmov.f32	s6, s15
 801d548:	fb92 f3f3 	sdiv	r3, r2, r3
 801d54c:	9314      	str	r3, [sp, #80]	; 0x50
 801d54e:	9b01      	ldr	r3, [sp, #4]
 801d550:	9a04      	ldr	r2, [sp, #16]
 801d552:	3b01      	subs	r3, #1
 801d554:	9301      	str	r3, [sp, #4]
 801d556:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d558:	bf08      	it	eq
 801d55a:	4613      	moveq	r3, r2
 801d55c:	e72b      	b.n	801d3b6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801d55e:	1426      	asrs	r6, r4, #16
 801d560:	d460      	bmi.n	801d624 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d562:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d566:	42b2      	cmp	r2, r6
 801d568:	dd5c      	ble.n	801d624 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d56a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d56e:	d459      	bmi.n	801d624 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d570:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d574:	4542      	cmp	r2, r8
 801d576:	dd55      	ble.n	801d624 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d578:	9a02      	ldr	r2, [sp, #8]
 801d57a:	9903      	ldr	r1, [sp, #12]
 801d57c:	fb08 6602 	mla	r6, r8, r2, r6
 801d580:	0872      	lsrs	r2, r6, #1
 801d582:	07f6      	lsls	r6, r6, #31
 801d584:	5c8a      	ldrb	r2, [r1, r2]
 801d586:	bf54      	ite	pl
 801d588:	f002 020f 	andpl.w	r2, r2, #15
 801d58c:	1112      	asrmi	r2, r2, #4
 801d58e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d592:	b2d2      	uxtb	r2, r2
 801d594:	2a00      	cmp	r2, #0
 801d596:	d045      	beq.n	801d624 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d598:	4926      	ldr	r1, [pc, #152]	; (801d634 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d59a:	f8d1 8000 	ldr.w	r8, [r1]
 801d59e:	9905      	ldr	r1, [sp, #20]
 801d5a0:	fa5f fb88 	uxtb.w	fp, r8
 801d5a4:	434a      	muls	r2, r1
 801d5a6:	1c56      	adds	r6, r2, #1
 801d5a8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d5ac:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801d5b0:	1212      	asrs	r2, r2, #8
 801d5b2:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d5b6:	fa1f fa82 	uxth.w	sl, r2
 801d5ba:	43d2      	mvns	r2, r2
 801d5bc:	fb1b fb0a 	smulbb	fp, fp, sl
 801d5c0:	b2d2      	uxtb	r2, r2
 801d5c2:	fb09 b902 	mla	r9, r9, r2, fp
 801d5c6:	fa1f f989 	uxth.w	r9, r9
 801d5ca:	f109 0b01 	add.w	fp, r9, #1
 801d5ce:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d5d2:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801d5d6:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801d5da:	fb1b fb0a 	smulbb	fp, fp, sl
 801d5de:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d5e2:	fb18 fa0a 	smulbb	sl, r8, sl
 801d5e6:	f805 9006 	strb.w	r9, [r5, r6]
 801d5ea:	442e      	add	r6, r5
 801d5ec:	f896 8002 	ldrb.w	r8, [r6, #2]
 801d5f0:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d5f4:	fb08 aa02 	mla	sl, r8, r2, sl
 801d5f8:	fb09 b902 	mla	r9, r9, r2, fp
 801d5fc:	fa1f fa8a 	uxth.w	sl, sl
 801d600:	fa1f f989 	uxth.w	r9, r9
 801d604:	f10a 0801 	add.w	r8, sl, #1
 801d608:	f109 0b01 	add.w	fp, r9, #1
 801d60c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801d610:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d614:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d618:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d61c:	f886 a002 	strb.w	sl, [r6, #2]
 801d620:	f886 9001 	strb.w	r9, [r6, #1]
 801d624:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d626:	4474      	add	r4, lr
 801d628:	3701      	adds	r7, #1
 801d62a:	4410      	add	r0, r2
 801d62c:	e755      	b.n	801d4da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801d62e:	b007      	add	sp, #28
 801d630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d634:	2400c8cc 	.word	0x2400c8cc

0801d638 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d63c:	b085      	sub	sp, #20
 801d63e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d642:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d644:	9203      	str	r2, [sp, #12]
 801d646:	6860      	ldr	r0, [r4, #4]
 801d648:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d64c:	9100      	str	r1, [sp, #0]
 801d64e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801d652:	fb00 2606 	mla	r6, r0, r6, r2
 801d656:	6822      	ldr	r2, [r4, #0]
 801d658:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d65c:	4416      	add	r6, r2
 801d65e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d662:	3201      	adds	r2, #1
 801d664:	f022 0201 	bic.w	r2, r2, #1
 801d668:	9201      	str	r2, [sp, #4]
 801d66a:	f8dc 2000 	ldr.w	r2, [ip]
 801d66e:	9202      	str	r2, [sp, #8]
 801d670:	9a00      	ldr	r2, [sp, #0]
 801d672:	2a00      	cmp	r2, #0
 801d674:	dc03      	bgt.n	801d67e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d676:	9a03      	ldr	r2, [sp, #12]
 801d678:	2a00      	cmp	r2, #0
 801d67a:	f340 8140 	ble.w	801d8fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d67e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d680:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d684:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801d688:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d68a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d68e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d692:	2b00      	cmp	r3, #0
 801d694:	dd0e      	ble.n	801d6b4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d696:	142a      	asrs	r2, r5, #16
 801d698:	d405      	bmi.n	801d6a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d69a:	4572      	cmp	r2, lr
 801d69c:	da03      	bge.n	801d6a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d69e:	1422      	asrs	r2, r4, #16
 801d6a0:	d401      	bmi.n	801d6a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d6a2:	42ba      	cmp	r2, r7
 801d6a4:	db07      	blt.n	801d6b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d6a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d6a8:	3b01      	subs	r3, #1
 801d6aa:	3603      	adds	r6, #3
 801d6ac:	4415      	add	r5, r2
 801d6ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d6b0:	4414      	add	r4, r2
 801d6b2:	e7ee      	b.n	801d692 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d6b4:	d072      	beq.n	801d79c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d6b6:	1e5a      	subs	r2, r3, #1
 801d6b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d6ba:	fb00 5002 	mla	r0, r0, r2, r5
 801d6be:	1400      	asrs	r0, r0, #16
 801d6c0:	d463      	bmi.n	801d78a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d6c2:	4570      	cmp	r0, lr
 801d6c4:	da61      	bge.n	801d78a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d6c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d6c8:	fb00 4202 	mla	r2, r0, r2, r4
 801d6cc:	1412      	asrs	r2, r2, #16
 801d6ce:	d45c      	bmi.n	801d78a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d6d0:	42ba      	cmp	r2, r7
 801d6d2:	da5a      	bge.n	801d78a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d6d4:	1cf0      	adds	r0, r6, #3
 801d6d6:	469a      	mov	sl, r3
 801d6d8:	f1ba 0f00 	cmp.w	sl, #0
 801d6dc:	dd59      	ble.n	801d792 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801d6de:	142a      	asrs	r2, r5, #16
 801d6e0:	9901      	ldr	r1, [sp, #4]
 801d6e2:	1427      	asrs	r7, r4, #16
 801d6e4:	fb01 2707 	mla	r7, r1, r7, r2
 801d6e8:	9902      	ldr	r1, [sp, #8]
 801d6ea:	087a      	lsrs	r2, r7, #1
 801d6ec:	5c8a      	ldrb	r2, [r1, r2]
 801d6ee:	07f9      	lsls	r1, r7, #31
 801d6f0:	bf54      	ite	pl
 801d6f2:	f002 020f 	andpl.w	r2, r2, #15
 801d6f6:	1112      	asrmi	r2, r2, #4
 801d6f8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d6fc:	b2d2      	uxtb	r2, r2
 801d6fe:	2a00      	cmp	r2, #0
 801d700:	d03b      	beq.n	801d77a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d702:	4980      	ldr	r1, [pc, #512]	; (801d904 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d704:	2aff      	cmp	r2, #255	; 0xff
 801d706:	680f      	ldr	r7, [r1, #0]
 801d708:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d70c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d710:	b2ff      	uxtb	r7, r7
 801d712:	f000 80ed 	beq.w	801d8f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801d716:	fa1f f882 	uxth.w	r8, r2
 801d71a:	43d2      	mvns	r2, r2
 801d71c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801d720:	fb17 f708 	smulbb	r7, r7, r8
 801d724:	b2d2      	uxtb	r2, r2
 801d726:	fb19 f908 	smulbb	r9, r9, r8
 801d72a:	fb0e 7702 	mla	r7, lr, r2, r7
 801d72e:	fb1b f808 	smulbb	r8, fp, r8
 801d732:	b2bf      	uxth	r7, r7
 801d734:	f107 0e01 	add.w	lr, r7, #1
 801d738:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d73c:	123f      	asrs	r7, r7, #8
 801d73e:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d742:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d746:	fb07 9902 	mla	r9, r7, r2, r9
 801d74a:	fa1f f989 	uxth.w	r9, r9
 801d74e:	f109 0701 	add.w	r7, r9, #1
 801d752:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d756:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d75a:	fb07 8802 	mla	r8, r7, r2, r8
 801d75e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d762:	fa1f f888 	uxth.w	r8, r8
 801d766:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d76a:	f108 0201 	add.w	r2, r8, #1
 801d76e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d772:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d776:	f800 8c01 	strb.w	r8, [r0, #-1]
 801d77a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d77c:	3003      	adds	r0, #3
 801d77e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d782:	4415      	add	r5, r2
 801d784:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d786:	4414      	add	r4, r2
 801d788:	e7a6      	b.n	801d6d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d78a:	2700      	movs	r7, #0
 801d78c:	1bda      	subs	r2, r3, r7
 801d78e:	2a00      	cmp	r2, #0
 801d790:	dc40      	bgt.n	801d814 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801d792:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d796:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d79a:	441e      	add	r6, r3
 801d79c:	9b00      	ldr	r3, [sp, #0]
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	f340 80ad 	ble.w	801d8fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d7a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d7a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d7aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d7ae:	eeb0 6a62 	vmov.f32	s12, s5
 801d7b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d7b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d7ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7be:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d7c2:	eeb0 6a43 	vmov.f32	s12, s6
 801d7c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7ca:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d7ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d7d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d7d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d7da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d7de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d7e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d7e6:	ee12 2a90 	vmov	r2, s5
 801d7ea:	eef0 2a47 	vmov.f32	s5, s14
 801d7ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801d7f2:	ee13 2a10 	vmov	r2, s6
 801d7f6:	9311      	str	r3, [sp, #68]	; 0x44
 801d7f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d7fa:	eeb0 3a67 	vmov.f32	s6, s15
 801d7fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801d802:	9312      	str	r3, [sp, #72]	; 0x48
 801d804:	9b00      	ldr	r3, [sp, #0]
 801d806:	9a03      	ldr	r2, [sp, #12]
 801d808:	3b01      	subs	r3, #1
 801d80a:	9300      	str	r3, [sp, #0]
 801d80c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d80e:	bf08      	it	eq
 801d810:	4613      	moveq	r3, r2
 801d812:	e72d      	b.n	801d670 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d814:	1428      	asrs	r0, r5, #16
 801d816:	d45c      	bmi.n	801d8d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d818:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d81c:	4282      	cmp	r2, r0
 801d81e:	dd58      	ble.n	801d8d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d820:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801d824:	d455      	bmi.n	801d8d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d826:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d82a:	4572      	cmp	r2, lr
 801d82c:	dd51      	ble.n	801d8d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d82e:	9a01      	ldr	r2, [sp, #4]
 801d830:	9902      	ldr	r1, [sp, #8]
 801d832:	fb0e 0002 	mla	r0, lr, r2, r0
 801d836:	0842      	lsrs	r2, r0, #1
 801d838:	07c0      	lsls	r0, r0, #31
 801d83a:	5c8a      	ldrb	r2, [r1, r2]
 801d83c:	bf54      	ite	pl
 801d83e:	f002 020f 	andpl.w	r2, r2, #15
 801d842:	1112      	asrmi	r2, r2, #4
 801d844:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d848:	b2d2      	uxtb	r2, r2
 801d84a:	2a00      	cmp	r2, #0
 801d84c:	d041      	beq.n	801d8d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d84e:	492d      	ldr	r1, [pc, #180]	; (801d904 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d850:	2aff      	cmp	r2, #255	; 0xff
 801d852:	6808      	ldr	r0, [r1, #0]
 801d854:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d858:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d85c:	fa5f fe80 	uxtb.w	lr, r0
 801d860:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d864:	d03b      	beq.n	801d8de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d866:	fa1f f982 	uxth.w	r9, r2
 801d86a:	4438      	add	r0, r7
 801d86c:	43d2      	mvns	r2, r2
 801d86e:	f816 8000 	ldrb.w	r8, [r6, r0]
 801d872:	fb1e fe09 	smulbb	lr, lr, r9
 801d876:	fb1a fa09 	smulbb	sl, sl, r9
 801d87a:	b2d2      	uxtb	r2, r2
 801d87c:	fb1b f909 	smulbb	r9, fp, r9
 801d880:	fb08 ee02 	mla	lr, r8, r2, lr
 801d884:	fa1f fe8e 	uxth.w	lr, lr
 801d888:	f10e 0801 	add.w	r8, lr, #1
 801d88c:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801d890:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d894:	f806 e000 	strb.w	lr, [r6, r0]
 801d898:	4430      	add	r0, r6
 801d89a:	f890 e001 	ldrb.w	lr, [r0, #1]
 801d89e:	fb0e aa02 	mla	sl, lr, r2, sl
 801d8a2:	fa1f fa8a 	uxth.w	sl, sl
 801d8a6:	f10a 0e01 	add.w	lr, sl, #1
 801d8aa:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801d8ae:	f890 e002 	ldrb.w	lr, [r0, #2]
 801d8b2:	fb0e 9902 	mla	r9, lr, r2, r9
 801d8b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d8ba:	fa1f f989 	uxth.w	r9, r9
 801d8be:	f880 a001 	strb.w	sl, [r0, #1]
 801d8c2:	f109 0201 	add.w	r2, r9, #1
 801d8c6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d8ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d8ce:	f880 9002 	strb.w	r9, [r0, #2]
 801d8d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d8d4:	3701      	adds	r7, #1
 801d8d6:	4415      	add	r5, r2
 801d8d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d8da:	4414      	add	r4, r2
 801d8dc:	e756      	b.n	801d78c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d8de:	4438      	add	r0, r7
 801d8e0:	f806 e000 	strb.w	lr, [r6, r0]
 801d8e4:	4430      	add	r0, r6
 801d8e6:	f880 a001 	strb.w	sl, [r0, #1]
 801d8ea:	f880 b002 	strb.w	fp, [r0, #2]
 801d8ee:	e7f0      	b.n	801d8d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d8f0:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d8f4:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d8f8:	f800 bc01 	strb.w	fp, [r0, #-1]
 801d8fc:	e73d      	b.n	801d77a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d8fe:	b005      	add	sp, #20
 801d900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d904:	2400c8cc 	.word	0x2400c8cc

0801d908 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d908:	4770      	bx	lr

0801d90a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d90a:	4770      	bx	lr

0801d90c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d90c:	4770      	bx	lr

0801d90e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d90e:	4770      	bx	lr

0801d910 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d910:	4770      	bx	lr

0801d912 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d912:	4770      	bx	lr

0801d914 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d914:	4770      	bx	lr

0801d916 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d916:	4770      	bx	lr

0801d918 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d918:	4770      	bx	lr

0801d91a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d91a:	4770      	bx	lr

0801d91c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d91c:	4770      	bx	lr

0801d91e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d91e:	4770      	bx	lr

0801d920 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d920:	4770      	bx	lr

0801d922 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d922:	4770      	bx	lr

0801d924 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d924:	4770      	bx	lr

0801d926 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d926:	4770      	bx	lr

0801d928 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d928:	4770      	bx	lr

0801d92a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d92a:	4770      	bx	lr

0801d92c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d92c:	4770      	bx	lr

0801d92e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d92e:	4770      	bx	lr

0801d930 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d930:	2bff      	cmp	r3, #255	; 0xff
 801d932:	b508      	push	{r3, lr}
 801d934:	d04f      	beq.n	801d9d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801d936:	2a2c      	cmp	r2, #44	; 0x2c
 801d938:	d032      	beq.n	801d9a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801d93a:	d80f      	bhi.n	801d95c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801d93c:	2a08      	cmp	r2, #8
 801d93e:	d046      	beq.n	801d9ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d940:	d805      	bhi.n	801d94e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801d942:	2a04      	cmp	r2, #4
 801d944:	d041      	beq.n	801d9ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801d946:	2a05      	cmp	r2, #5
 801d948:	d03d      	beq.n	801d9c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801d94a:	2000      	movs	r0, #0
 801d94c:	e027      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d94e:	2a0a      	cmp	r2, #10
 801d950:	d03d      	beq.n	801d9ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801d952:	d301      	bcc.n	801d958 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801d954:	2a0b      	cmp	r2, #11
 801d956:	d1f8      	bne.n	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d958:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d95a:	e020      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d95c:	2a30      	cmp	r2, #48	; 0x30
 801d95e:	d038      	beq.n	801d9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d960:	d808      	bhi.n	801d974 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801d962:	2a2e      	cmp	r2, #46	; 0x2e
 801d964:	684b      	ldr	r3, [r1, #4]
 801d966:	d029      	beq.n	801d9bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801d968:	d90b      	bls.n	801d982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801d96a:	781b      	ldrb	r3, [r3, #0]
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d1ec      	bne.n	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d970:	6a00      	ldr	r0, [r0, #32]
 801d972:	e014      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d974:	2a32      	cmp	r2, #50	; 0x32
 801d976:	d02c      	beq.n	801d9d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801d978:	d301      	bcc.n	801d97e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801d97a:	2a33      	cmp	r2, #51	; 0x33
 801d97c:	d1e5      	bne.n	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d97e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d980:	e00d      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d982:	781b      	ldrb	r3, [r3, #0]
 801d984:	2b01      	cmp	r3, #1
 801d986:	d009      	beq.n	801d99c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801d988:	d3f2      	bcc.n	801d970 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801d98a:	2b02      	cmp	r3, #2
 801d98c:	d1dd      	bne.n	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d98e:	4b39      	ldr	r3, [pc, #228]	; (801da74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d990:	f240 4109 	movw	r1, #1033	; 0x409
 801d994:	4a38      	ldr	r2, [pc, #224]	; (801da78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d996:	4839      	ldr	r0, [pc, #228]	; (801da7c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801d998:	f008 f8ee 	bl	8025b78 <__assert_func>
 801d99c:	6900      	ldr	r0, [r0, #16]
 801d99e:	bd08      	pop	{r3, pc}
 801d9a0:	684b      	ldr	r3, [r1, #4]
 801d9a2:	781b      	ldrb	r3, [r3, #0]
 801d9a4:	2b01      	cmp	r3, #1
 801d9a6:	d007      	beq.n	801d9b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801d9a8:	d30b      	bcc.n	801d9c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801d9aa:	2b02      	cmp	r3, #2
 801d9ac:	d1cd      	bne.n	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9ae:	4b31      	ldr	r3, [pc, #196]	; (801da74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801d9b0:	f240 4115 	movw	r1, #1045	; 0x415
 801d9b4:	4a30      	ldr	r2, [pc, #192]	; (801da78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801d9b6:	e7ee      	b.n	801d996 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801d9b8:	6880      	ldr	r0, [r0, #8]
 801d9ba:	e7f0      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9bc:	781b      	ldrb	r3, [r3, #0]
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d1c3      	bne.n	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9c2:	6980      	ldr	r0, [r0, #24]
 801d9c4:	e7eb      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9c6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d9c8:	e7e9      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d9cc:	e7e7      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d9d0:	e7e5      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9d2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d9d4:	e7e3      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9d6:	2a2c      	cmp	r2, #44	; 0x2c
 801d9d8:	d030      	beq.n	801da3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801d9da:	d80f      	bhi.n	801d9fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801d9dc:	2a08      	cmp	r2, #8
 801d9de:	d044      	beq.n	801da6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d9e0:	d805      	bhi.n	801d9ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801d9e2:	2a04      	cmp	r2, #4
 801d9e4:	d03f      	beq.n	801da66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801d9e6:	2a05      	cmp	r2, #5
 801d9e8:	d1af      	bne.n	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9ea:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d9ec:	e7d7      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9ee:	2a0a      	cmp	r2, #10
 801d9f0:	d03b      	beq.n	801da6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801d9f2:	d301      	bcc.n	801d9f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801d9f4:	2a0b      	cmp	r2, #11
 801d9f6:	d1a8      	bne.n	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801d9f8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d9fa:	e7d0      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801d9fc:	2a30      	cmp	r2, #48	; 0x30
 801d9fe:	d036      	beq.n	801da6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801da00:	d808      	bhi.n	801da14 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801da02:	2a2e      	cmp	r2, #46	; 0x2e
 801da04:	684b      	ldr	r3, [r1, #4]
 801da06:	d028      	beq.n	801da5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801da08:	d90b      	bls.n	801da22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801da0a:	781b      	ldrb	r3, [r3, #0]
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d19c      	bne.n	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da10:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801da12:	e7c4      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da14:	2a32      	cmp	r2, #50	; 0x32
 801da16:	d02a      	beq.n	801da6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801da18:	d301      	bcc.n	801da1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801da1a:	2a33      	cmp	r2, #51	; 0x33
 801da1c:	d195      	bne.n	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da1e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801da20:	e7bd      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da22:	781b      	ldrb	r3, [r3, #0]
 801da24:	2b01      	cmp	r3, #1
 801da26:	d007      	beq.n	801da38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801da28:	d3f2      	bcc.n	801da10 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801da2a:	2b02      	cmp	r3, #2
 801da2c:	d18d      	bne.n	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da2e:	4b11      	ldr	r3, [pc, #68]	; (801da74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801da30:	f240 4146 	movw	r1, #1094	; 0x446
 801da34:	4a10      	ldr	r2, [pc, #64]	; (801da78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801da36:	e7ae      	b.n	801d996 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801da38:	6940      	ldr	r0, [r0, #20]
 801da3a:	e7b0      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da3c:	684b      	ldr	r3, [r1, #4]
 801da3e:	781b      	ldrb	r3, [r3, #0]
 801da40:	2b01      	cmp	r3, #1
 801da42:	d008      	beq.n	801da56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801da44:	d30d      	bcc.n	801da62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801da46:	2b02      	cmp	r3, #2
 801da48:	f47f af7f 	bne.w	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da4c:	4b09      	ldr	r3, [pc, #36]	; (801da74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801da4e:	f240 4152 	movw	r1, #1106	; 0x452
 801da52:	4a09      	ldr	r2, [pc, #36]	; (801da78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801da54:	e79f      	b.n	801d996 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801da56:	68c0      	ldr	r0, [r0, #12]
 801da58:	e7a1      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da5a:	781b      	ldrb	r3, [r3, #0]
 801da5c:	2b00      	cmp	r3, #0
 801da5e:	f47f af74 	bne.w	801d94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801da62:	69c0      	ldr	r0, [r0, #28]
 801da64:	e79b      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da66:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801da68:	e799      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da6a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801da6c:	e797      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da6e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801da70:	e795      	b.n	801d99e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801da72:	bf00      	nop
 801da74:	0802ae30 	.word	0x0802ae30
 801da78:	0802b5e3 	.word	0x0802b5e3
 801da7c:	0802ae7c 	.word	0x0802ae7c

0801da80 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801da80:	b508      	push	{r3, lr}
 801da82:	4b06      	ldr	r3, [pc, #24]	; (801da9c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801da84:	8818      	ldrh	r0, [r3, #0]
 801da86:	b928      	cbnz	r0, 801da94 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801da88:	4b05      	ldr	r3, [pc, #20]	; (801daa0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801da8a:	214d      	movs	r1, #77	; 0x4d
 801da8c:	4a05      	ldr	r2, [pc, #20]	; (801daa4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801da8e:	4806      	ldr	r0, [pc, #24]	; (801daa8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801da90:	f008 f872 	bl	8025b78 <__assert_func>
 801da94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801da98:	b280      	uxth	r0, r0
 801da9a:	bd08      	pop	{r3, pc}
 801da9c:	2400c89e 	.word	0x2400c89e
 801daa0:	0802b0c9 	.word	0x0802b0c9
 801daa4:	0802b5a8 	.word	0x0802b5a8
 801daa8:	0802b10b 	.word	0x0802b10b

0801daac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801daac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dab0:	b08b      	sub	sp, #44	; 0x2c
 801dab2:	460d      	mov	r5, r1
 801dab4:	4616      	mov	r6, r2
 801dab6:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801daba:	f1b8 0f00 	cmp.w	r8, #0
 801dabe:	d047      	beq.n	801db50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801dac0:	6810      	ldr	r0, [r2, #0]
 801dac2:	ac06      	add	r4, sp, #24
 801dac4:	6851      	ldr	r1, [r2, #4]
 801dac6:	4f51      	ldr	r7, [pc, #324]	; (801dc0c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801dac8:	c403      	stmia	r4!, {r0, r1}
 801daca:	6818      	ldr	r0, [r3, #0]
 801dacc:	ac08      	add	r4, sp, #32
 801dace:	6859      	ldr	r1, [r3, #4]
 801dad0:	c403      	stmia	r4!, {r0, r1}
 801dad2:	a806      	add	r0, sp, #24
 801dad4:	f7fa ff6a 	bl	80189ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dad8:	4631      	mov	r1, r6
 801dada:	a808      	add	r0, sp, #32
 801dadc:	f7fa ff8e 	bl	80189fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dae0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801dae4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801dae8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801daec:	6838      	ldr	r0, [r7, #0]
 801daee:	fb11 2103 	smlabb	r1, r1, r3, r2
 801daf2:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801daf6:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801dafa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dafe:	440d      	add	r5, r1
 801db00:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801db04:	440a      	add	r2, r1
 801db06:	f8ad 2020 	strh.w	r2, [sp, #32]
 801db0a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801db0e:	4413      	add	r3, r2
 801db10:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801db14:	6803      	ldr	r3, [r0, #0]
 801db16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db18:	4798      	blx	r3
 801db1a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801db1e:	d01a      	beq.n	801db56 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801db20:	f010 0f04 	tst.w	r0, #4
 801db24:	6838      	ldr	r0, [r7, #0]
 801db26:	d019      	beq.n	801db5c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801db28:	2100      	movs	r1, #0
 801db2a:	6807      	ldr	r7, [r0, #0]
 801db2c:	b2a4      	uxth	r4, r4
 801db2e:	f8cd 800c 	str.w	r8, [sp, #12]
 801db32:	b2b6      	uxth	r6, r6
 801db34:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801db38:	9401      	str	r4, [sp, #4]
 801db3a:	9600      	str	r6, [sp, #0]
 801db3c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801db40:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801db44:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801db48:	9102      	str	r1, [sp, #8]
 801db4a:	4629      	mov	r1, r5
 801db4c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801db4e:	47a0      	blx	r4
 801db50:	b00b      	add	sp, #44	; 0x2c
 801db52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801db56:	f010 0f01 	tst.w	r0, #1
 801db5a:	e7e3      	b.n	801db24 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801db5c:	6803      	ldr	r3, [r0, #0]
 801db5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db60:	4798      	blx	r3
 801db62:	4a2b      	ldr	r2, [pc, #172]	; (801dc10 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801db64:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801db68:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801db6c:	8813      	ldrh	r3, [r2, #0]
 801db6e:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801db72:	fb03 f404 	mul.w	r4, r3, r4
 801db76:	fb03 c101 	mla	r1, r3, r1, ip
 801db7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801db7e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801db82:	4408      	add	r0, r1
 801db84:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801db88:	4404      	add	r4, r0
 801db8a:	d02e      	beq.n	801dbea <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801db8c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801db90:	1b9b      	subs	r3, r3, r6
 801db92:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801db96:	1b96      	subs	r6, r2, r6
 801db98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db9c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dba0:	42a0      	cmp	r0, r4
 801dba2:	d22d      	bcs.n	801dc00 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801dba4:	eb00 0e01 	add.w	lr, r0, r1
 801dba8:	4570      	cmp	r0, lr
 801dbaa:	d210      	bcs.n	801dbce <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801dbac:	f890 9000 	ldrb.w	r9, [r0]
 801dbb0:	f815 2b01 	ldrb.w	r2, [r5], #1
 801dbb4:	fb19 f90c 	smulbb	r9, r9, ip
 801dbb8:	fb02 9208 	mla	r2, r2, r8, r9
 801dbbc:	b292      	uxth	r2, r2
 801dbbe:	f102 0901 	add.w	r9, r2, #1
 801dbc2:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801dbc6:	1212      	asrs	r2, r2, #8
 801dbc8:	f800 2b01 	strb.w	r2, [r0], #1
 801dbcc:	e7ec      	b.n	801dba8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801dbce:	4418      	add	r0, r3
 801dbd0:	4435      	add	r5, r6
 801dbd2:	e7e5      	b.n	801dba0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801dbd4:	8813      	ldrh	r3, [r2, #0]
 801dbd6:	1b9b      	subs	r3, r3, r6
 801dbd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dbdc:	4418      	add	r0, r3
 801dbde:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801dbe2:	1b9b      	subs	r3, r3, r6
 801dbe4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dbe8:	441d      	add	r5, r3
 801dbea:	42a0      	cmp	r0, r4
 801dbec:	d208      	bcs.n	801dc00 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801dbee:	eb00 0c01 	add.w	ip, r0, r1
 801dbf2:	4560      	cmp	r0, ip
 801dbf4:	d2ee      	bcs.n	801dbd4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801dbf6:	f815 3b01 	ldrb.w	r3, [r5], #1
 801dbfa:	f800 3b01 	strb.w	r3, [r0], #1
 801dbfe:	e7f8      	b.n	801dbf2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801dc00:	6838      	ldr	r0, [r7, #0]
 801dc02:	6803      	ldr	r3, [r0, #0]
 801dc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc06:	4798      	blx	r3
 801dc08:	e7a2      	b.n	801db50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801dc0a:	bf00      	nop
 801dc0c:	2400c8a4 	.word	0x2400c8a4
 801dc10:	2400c89e 	.word	0x2400c89e

0801dc14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dc14:	b510      	push	{r4, lr}
 801dc16:	4604      	mov	r4, r0
 801dc18:	2104      	movs	r1, #4
 801dc1a:	f007 ff7e 	bl	8025b1a <_ZdlPvj>
 801dc1e:	4620      	mov	r0, r4
 801dc20:	bd10      	pop	{r4, pc}

0801dc22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801dc22:	b510      	push	{r4, lr}
 801dc24:	4604      	mov	r4, r0
 801dc26:	2104      	movs	r1, #4
 801dc28:	f007 ff77 	bl	8025b1a <_ZdlPvj>
 801dc2c:	4620      	mov	r0, r4
 801dc2e:	bd10      	pop	{r4, pc}

0801dc30 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dc30:	b510      	push	{r4, lr}
 801dc32:	4604      	mov	r4, r0
 801dc34:	2104      	movs	r1, #4
 801dc36:	f007 ff70 	bl	8025b1a <_ZdlPvj>
 801dc3a:	4620      	mov	r0, r4
 801dc3c:	bd10      	pop	{r4, pc}

0801dc3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801dc3e:	b510      	push	{r4, lr}
 801dc40:	4604      	mov	r4, r0
 801dc42:	2104      	movs	r1, #4
 801dc44:	f007 ff69 	bl	8025b1a <_ZdlPvj>
 801dc48:	4620      	mov	r0, r4
 801dc4a:	bd10      	pop	{r4, pc}

0801dc4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801dc4c:	b510      	push	{r4, lr}
 801dc4e:	4604      	mov	r4, r0
 801dc50:	2104      	movs	r1, #4
 801dc52:	f007 ff62 	bl	8025b1a <_ZdlPvj>
 801dc56:	4620      	mov	r0, r4
 801dc58:	bd10      	pop	{r4, pc}

0801dc5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801dc5a:	b510      	push	{r4, lr}
 801dc5c:	4604      	mov	r4, r0
 801dc5e:	2104      	movs	r1, #4
 801dc60:	f007 ff5b 	bl	8025b1a <_ZdlPvj>
 801dc64:	4620      	mov	r0, r4
 801dc66:	bd10      	pop	{r4, pc}

0801dc68 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801dc68:	b510      	push	{r4, lr}
 801dc6a:	4604      	mov	r4, r0
 801dc6c:	2104      	movs	r1, #4
 801dc6e:	f007 ff54 	bl	8025b1a <_ZdlPvj>
 801dc72:	4620      	mov	r0, r4
 801dc74:	bd10      	pop	{r4, pc}

0801dc76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801dc76:	b510      	push	{r4, lr}
 801dc78:	4604      	mov	r4, r0
 801dc7a:	2104      	movs	r1, #4
 801dc7c:	f007 ff4d 	bl	8025b1a <_ZdlPvj>
 801dc80:	4620      	mov	r0, r4
 801dc82:	bd10      	pop	{r4, pc}

0801dc84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dc84:	b510      	push	{r4, lr}
 801dc86:	4604      	mov	r4, r0
 801dc88:	2104      	movs	r1, #4
 801dc8a:	f007 ff46 	bl	8025b1a <_ZdlPvj>
 801dc8e:	4620      	mov	r0, r4
 801dc90:	bd10      	pop	{r4, pc}

0801dc92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801dc92:	b510      	push	{r4, lr}
 801dc94:	4604      	mov	r4, r0
 801dc96:	2104      	movs	r1, #4
 801dc98:	f007 ff3f 	bl	8025b1a <_ZdlPvj>
 801dc9c:	4620      	mov	r0, r4
 801dc9e:	bd10      	pop	{r4, pc}

0801dca0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dca0:	b510      	push	{r4, lr}
 801dca2:	4604      	mov	r4, r0
 801dca4:	2104      	movs	r1, #4
 801dca6:	f007 ff38 	bl	8025b1a <_ZdlPvj>
 801dcaa:	4620      	mov	r0, r4
 801dcac:	bd10      	pop	{r4, pc}

0801dcae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801dcae:	b510      	push	{r4, lr}
 801dcb0:	4604      	mov	r4, r0
 801dcb2:	2104      	movs	r1, #4
 801dcb4:	f007 ff31 	bl	8025b1a <_ZdlPvj>
 801dcb8:	4620      	mov	r0, r4
 801dcba:	bd10      	pop	{r4, pc}

0801dcbc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801dcbc:	b510      	push	{r4, lr}
 801dcbe:	4604      	mov	r4, r0
 801dcc0:	2104      	movs	r1, #4
 801dcc2:	f007 ff2a 	bl	8025b1a <_ZdlPvj>
 801dcc6:	4620      	mov	r0, r4
 801dcc8:	bd10      	pop	{r4, pc}

0801dcca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801dcca:	b510      	push	{r4, lr}
 801dccc:	4604      	mov	r4, r0
 801dcce:	2104      	movs	r1, #4
 801dcd0:	f007 ff23 	bl	8025b1a <_ZdlPvj>
 801dcd4:	4620      	mov	r0, r4
 801dcd6:	bd10      	pop	{r4, pc}

0801dcd8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801dcd8:	b510      	push	{r4, lr}
 801dcda:	4604      	mov	r4, r0
 801dcdc:	2104      	movs	r1, #4
 801dcde:	f007 ff1c 	bl	8025b1a <_ZdlPvj>
 801dce2:	4620      	mov	r0, r4
 801dce4:	bd10      	pop	{r4, pc}

0801dce6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801dce6:	b510      	push	{r4, lr}
 801dce8:	4604      	mov	r4, r0
 801dcea:	2104      	movs	r1, #4
 801dcec:	f007 ff15 	bl	8025b1a <_ZdlPvj>
 801dcf0:	4620      	mov	r0, r4
 801dcf2:	bd10      	pop	{r4, pc}

0801dcf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801dcf4:	b510      	push	{r4, lr}
 801dcf6:	4604      	mov	r4, r0
 801dcf8:	2104      	movs	r1, #4
 801dcfa:	f007 ff0e 	bl	8025b1a <_ZdlPvj>
 801dcfe:	4620      	mov	r0, r4
 801dd00:	bd10      	pop	{r4, pc}

0801dd02 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801dd02:	b510      	push	{r4, lr}
 801dd04:	4604      	mov	r4, r0
 801dd06:	2104      	movs	r1, #4
 801dd08:	f007 ff07 	bl	8025b1a <_ZdlPvj>
 801dd0c:	4620      	mov	r0, r4
 801dd0e:	bd10      	pop	{r4, pc}

0801dd10 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801dd10:	b510      	push	{r4, lr}
 801dd12:	4604      	mov	r4, r0
 801dd14:	2104      	movs	r1, #4
 801dd16:	f007 ff00 	bl	8025b1a <_ZdlPvj>
 801dd1a:	4620      	mov	r0, r4
 801dd1c:	bd10      	pop	{r4, pc}

0801dd1e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801dd1e:	b510      	push	{r4, lr}
 801dd20:	4604      	mov	r4, r0
 801dd22:	2104      	movs	r1, #4
 801dd24:	f007 fef9 	bl	8025b1a <_ZdlPvj>
 801dd28:	4620      	mov	r0, r4
 801dd2a:	bd10      	pop	{r4, pc}

0801dd2c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801dd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd30:	4db4      	ldr	r5, [pc, #720]	; (801e004 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 801dd32:	4690      	mov	r8, r2
 801dd34:	b08d      	sub	sp, #52	; 0x34
 801dd36:	4604      	mov	r4, r0
 801dd38:	682a      	ldr	r2, [r5, #0]
 801dd3a:	4689      	mov	r9, r1
 801dd3c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801dd40:	2a02      	cmp	r2, #2
 801dd42:	d106      	bne.n	801dd52 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801dd44:	4bb0      	ldr	r3, [pc, #704]	; (801e008 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 801dd46:	f240 11ed 	movw	r1, #493	; 0x1ed
 801dd4a:	4ab0      	ldr	r2, [pc, #704]	; (801e00c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801dd4c:	48b0      	ldr	r0, [pc, #704]	; (801e010 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 801dd4e:	f007 ff13 	bl	8025b78 <__assert_func>
 801dd52:	ae0c      	add	r6, sp, #48	; 0x30
 801dd54:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 801dd58:	4630      	mov	r0, r6
 801dd5a:	f7fe f985 	bl	801c068 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dd5e:	6823      	ldr	r3, [r4, #0]
 801dd60:	4607      	mov	r7, r0
 801dd62:	4620      	mov	r0, r4
 801dd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd66:	4798      	blx	r3
 801dd68:	4287      	cmp	r7, r0
 801dd6a:	d004      	beq.n	801dd76 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801dd6c:	4ba9      	ldr	r3, [pc, #676]	; (801e014 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 801dd6e:	f240 11ef 	movw	r1, #495	; 0x1ef
 801dd72:	4aa6      	ldr	r2, [pc, #664]	; (801e00c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801dd74:	e7ea      	b.n	801dd4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dd76:	4630      	mov	r0, r6
 801dd78:	f7fe f8ec 	bl	801bf54 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dd7c:	4607      	mov	r7, r0
 801dd7e:	b920      	cbnz	r0, 801dd8a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801dd80:	4ba5      	ldr	r3, [pc, #660]	; (801e018 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 801dd82:	f240 11f1 	movw	r1, #497	; 0x1f1
 801dd86:	4aa1      	ldr	r2, [pc, #644]	; (801e00c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801dd88:	e7e0      	b.n	801dd4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801dd8a:	f8d8 0000 	ldr.w	r0, [r8]
 801dd8e:	ab06      	add	r3, sp, #24
 801dd90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801dd94:	f9b8 a000 	ldrsh.w	sl, [r8]
 801dd98:	c303      	stmia	r3!, {r0, r1}
 801dd9a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801dd9e:	ab08      	add	r3, sp, #32
 801dda0:	f8d9 0000 	ldr.w	r0, [r9]
 801dda4:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801dda8:	c303      	stmia	r3!, {r0, r1}
 801ddaa:	4630      	mov	r0, r6
 801ddac:	f7fe f804 	bl	801bdb8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ddb0:	4680      	mov	r8, r0
 801ddb2:	4630      	mov	r0, r6
 801ddb4:	f7fe f83a 	bl	801be2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ddb8:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801ddbc:	f10d 0920 	add.w	r9, sp, #32
 801ddc0:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801ddc4:	a806      	add	r0, sp, #24
 801ddc6:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801ddca:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801ddce:	f7fa fded 	bl	80189ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ddd2:	4648      	mov	r0, r9
 801ddd4:	f7fa fdea 	bl	80189ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ddd8:	a80a      	add	r0, sp, #40	; 0x28
 801ddda:	f7fa fde7 	bl	80189ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ddde:	4b8f      	ldr	r3, [pc, #572]	; (801e01c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801dde0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801dde4:	881e      	ldrh	r6, [r3, #0]
 801dde6:	4b8e      	ldr	r3, [pc, #568]	; (801e020 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801dde8:	fa0f fb86 	sxth.w	fp, r6
 801ddec:	8819      	ldrh	r1, [r3, #0]
 801ddee:	4593      	cmp	fp, r2
 801ddf0:	dd75      	ble.n	801dede <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801ddf2:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801ddf6:	4494      	add	ip, r2
 801ddf8:	fa1f fc8c 	uxth.w	ip, ip
 801ddfc:	fa0f fa8c 	sxth.w	sl, ip
 801de00:	f1ba 0f00 	cmp.w	sl, #0
 801de04:	dd6b      	ble.n	801dede <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801de06:	fa0f f881 	sxth.w	r8, r1
 801de0a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801de0e:	4598      	cmp	r8, r3
 801de10:	dd65      	ble.n	801dede <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801de12:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 801de16:	4418      	add	r0, r3
 801de18:	b280      	uxth	r0, r0
 801de1a:	fa0f fe80 	sxth.w	lr, r0
 801de1e:	f1be 0f00 	cmp.w	lr, #0
 801de22:	dd5c      	ble.n	801dede <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 801de24:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801de28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801de2c:	45d3      	cmp	fp, sl
 801de2e:	bfc8      	it	gt
 801de30:	4666      	movgt	r6, ip
 801de32:	45f0      	cmp	r8, lr
 801de34:	bfc8      	it	gt
 801de36:	4601      	movgt	r1, r0
 801de38:	f8ad 2020 	strh.w	r2, [sp, #32]
 801de3c:	1ab6      	subs	r6, r6, r2
 801de3e:	1ac9      	subs	r1, r1, r3
 801de40:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801de44:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801de48:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801de4c:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801de50:	f1bc 0f00 	cmp.w	ip, #0
 801de54:	f340 80aa 	ble.w	801dfac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801de58:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801de5c:	2e00      	cmp	r6, #0
 801de5e:	f340 80a5 	ble.w	801dfac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801de62:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801de66:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801de6a:	4288      	cmp	r0, r1
 801de6c:	db3b      	blt.n	801dee6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801de6e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801de72:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801de76:	429a      	cmp	r2, r3
 801de78:	db35      	blt.n	801dee6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801de7a:	4460      	add	r0, ip
 801de7c:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801de80:	4461      	add	r1, ip
 801de82:	b200      	sxth	r0, r0
 801de84:	b209      	sxth	r1, r1
 801de86:	4288      	cmp	r0, r1
 801de88:	dc2d      	bgt.n	801dee6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801de8a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801de8e:	4432      	add	r2, r6
 801de90:	440b      	add	r3, r1
 801de92:	b212      	sxth	r2, r2
 801de94:	b21b      	sxth	r3, r3
 801de96:	429a      	cmp	r2, r3
 801de98:	dc25      	bgt.n	801dee6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 801de9a:	6823      	ldr	r3, [r4, #0]
 801de9c:	4620      	mov	r0, r4
 801de9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dea0:	4798      	blx	r3
 801dea2:	4682      	mov	sl, r0
 801dea4:	6828      	ldr	r0, [r5, #0]
 801dea6:	6803      	ldr	r3, [r0, #0]
 801dea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801deaa:	4798      	blx	r3
 801deac:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801deb0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801deb4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801deb8:	9303      	str	r3, [sp, #12]
 801deba:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801debe:	1a9b      	subs	r3, r3, r2
 801dec0:	b29b      	uxth	r3, r3
 801dec2:	b21c      	sxth	r4, r3
 801dec4:	2c00      	cmp	r4, #0
 801dec6:	dc13      	bgt.n	801def0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 801dec8:	bf18      	it	ne
 801deca:	f8ad 2020 	strhne.w	r2, [sp, #32]
 801dece:	463c      	mov	r4, r7
 801ded0:	bf1e      	ittt	ne
 801ded2:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 801ded6:	189b      	addne	r3, r3, r2
 801ded8:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 801dedc:	e00f      	b.n	801defe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 801dede:	2300      	movs	r3, #0
 801dee0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801dee4:	e7b2      	b.n	801de4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 801dee6:	4b4f      	ldr	r3, [pc, #316]	; (801e024 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 801dee8:	f240 11ff 	movw	r1, #511	; 0x1ff
 801deec:	4a47      	ldr	r2, [pc, #284]	; (801e00c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 801deee:	e72d      	b.n	801dd4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801def0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801def4:	ebab 0303 	sub.w	r3, fp, r3
 801def8:	443c      	add	r4, r7
 801defa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801defe:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801df02:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801df06:	1a9b      	subs	r3, r3, r2
 801df08:	b29b      	uxth	r3, r3
 801df0a:	b219      	sxth	r1, r3
 801df0c:	2900      	cmp	r1, #0
 801df0e:	dd51      	ble.n	801dfb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 801df10:	9a03      	ldr	r2, [sp, #12]
 801df12:	fb02 4401 	mla	r4, r2, r1, r4
 801df16:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801df1a:	1ad3      	subs	r3, r2, r3
 801df1c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801df20:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801df24:	2b00      	cmp	r3, #0
 801df26:	dd41      	ble.n	801dfac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801df28:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801df2c:	2e00      	cmp	r6, #0
 801df2e:	dd3d      	ble.n	801dfac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801df30:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801df34:	f04f 0803 	mov.w	r8, #3
 801df38:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801df3c:	fb0a f10c 	mul.w	r1, sl, ip
 801df40:	fb12 1808 	smlabb	r8, r2, r8, r1
 801df44:	4935      	ldr	r1, [pc, #212]	; (801e01c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 801df46:	4480      	add	r8, r0
 801df48:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801df4c:	8809      	ldrh	r1, [r1, #0]
 801df4e:	4283      	cmp	r3, r0
 801df50:	eba1 0202 	sub.w	r2, r1, r2
 801df54:	bfa8      	it	ge
 801df56:	4603      	movge	r3, r0
 801df58:	4293      	cmp	r3, r2
 801df5a:	bfa8      	it	ge
 801df5c:	4613      	movge	r3, r2
 801df5e:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 801df62:	4296      	cmp	r6, r2
 801df64:	bfa8      	it	ge
 801df66:	4616      	movge	r6, r2
 801df68:	4a2d      	ldr	r2, [pc, #180]	; (801e020 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 801df6a:	8812      	ldrh	r2, [r2, #0]
 801df6c:	eba2 0c0c 	sub.w	ip, r2, ip
 801df70:	4632      	mov	r2, r6
 801df72:	4566      	cmp	r6, ip
 801df74:	bfa8      	it	ge
 801df76:	4662      	movge	r2, ip
 801df78:	4299      	cmp	r1, r3
 801df7a:	9202      	str	r2, [sp, #8]
 801df7c:	d12d      	bne.n	801dfda <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801df7e:	4559      	cmp	r1, fp
 801df80:	d12b      	bne.n	801dfda <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 801df82:	6828      	ldr	r0, [r5, #0]
 801df84:	6803      	ldr	r3, [r0, #0]
 801df86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df88:	4798      	blx	r3
 801df8a:	07c3      	lsls	r3, r0, #31
 801df8c:	d51b      	bpl.n	801dfc6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 801df8e:	6828      	ldr	r0, [r5, #0]
 801df90:	9b02      	ldr	r3, [sp, #8]
 801df92:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801df96:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801df9a:	6803      	ldr	r3, [r0, #0]
 801df9c:	f8cd b000 	str.w	fp, [sp]
 801dfa0:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 801dfa2:	4623      	mov	r3, r4
 801dfa4:	e899 0006 	ldmia.w	r9, {r1, r2}
 801dfa8:	47a8      	blx	r5
 801dfaa:	4607      	mov	r7, r0
 801dfac:	4638      	mov	r0, r7
 801dfae:	b00d      	add	sp, #52	; 0x34
 801dfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfb4:	bf1f      	itttt	ne
 801dfb6:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801dfba:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801dfbe:	189b      	addne	r3, r3, r2
 801dfc0:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801dfc4:	e7ac      	b.n	801df20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 801dfc6:	6828      	ldr	r0, [r5, #0]
 801dfc8:	4642      	mov	r2, r8
 801dfca:	4621      	mov	r1, r4
 801dfcc:	6803      	ldr	r3, [r0, #0]
 801dfce:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 801dfd0:	9b02      	ldr	r3, [sp, #8]
 801dfd2:	fb03 f30a 	mul.w	r3, r3, sl
 801dfd6:	47a8      	blx	r5
 801dfd8:	e7e8      	b.n	801dfac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801dfda:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801dfde:	f04f 0900 	mov.w	r9, #0
 801dfe2:	9b02      	ldr	r3, [sp, #8]
 801dfe4:	454b      	cmp	r3, r9
 801dfe6:	dde1      	ble.n	801dfac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801dfe8:	6828      	ldr	r0, [r5, #0]
 801dfea:	4642      	mov	r2, r8
 801dfec:	4621      	mov	r1, r4
 801dfee:	44d0      	add	r8, sl
 801dff0:	6803      	ldr	r3, [r0, #0]
 801dff2:	f109 0901 	add.w	r9, r9, #1
 801dff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dff8:	461e      	mov	r6, r3
 801dffa:	465b      	mov	r3, fp
 801dffc:	47b0      	blx	r6
 801dffe:	9b03      	ldr	r3, [sp, #12]
 801e000:	441c      	add	r4, r3
 801e002:	e7ee      	b.n	801dfe2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 801e004:	2400c8a4 	.word	0x2400c8a4
 801e008:	0802aeae 	.word	0x0802aeae
 801e00c:	0802b68d 	.word	0x0802b68d
 801e010:	0802ae7c 	.word	0x0802ae7c
 801e014:	0802af60 	.word	0x0802af60
 801e018:	0802afb5 	.word	0x0802afb5
 801e01c:	2400c89e 	.word	0x2400c89e
 801e020:	2400c8a0 	.word	0x2400c8a0
 801e024:	0802aff3 	.word	0x0802aff3

0801e028 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801e028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e02c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801e030:	9c06      	ldr	r4, [sp, #24]
 801e032:	2800      	cmp	r0, #0
 801e034:	d06e      	beq.n	801e114 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e036:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801e03a:	2d00      	cmp	r5, #0
 801e03c:	dd6a      	ble.n	801e114 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e03e:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801e042:	f1bc 0f00 	cmp.w	ip, #0
 801e046:	dd65      	ble.n	801e114 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e048:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801e04c:	28ff      	cmp	r0, #255	; 0xff
 801e04e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e052:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801e056:	fb02 3306 	mla	r3, r2, r6, r3
 801e05a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801e05e:	b2e4      	uxtb	r4, r4
 801e060:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e064:	4419      	add	r1, r3
 801e066:	fb02 f30c 	mul.w	r3, r2, ip
 801e06a:	eba2 0205 	sub.w	r2, r2, r5
 801e06e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e072:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e076:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e07a:	440b      	add	r3, r1
 801e07c:	d03e      	beq.n	801e0fc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801e07e:	fa1f fc80 	uxth.w	ip, r0
 801e082:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801e086:	fb06 f60c 	mul.w	r6, r6, ip
 801e08a:	b280      	uxth	r0, r0
 801e08c:	fb07 f70c 	mul.w	r7, r7, ip
 801e090:	fb04 f40c 	mul.w	r4, r4, ip
 801e094:	4299      	cmp	r1, r3
 801e096:	d23d      	bcs.n	801e114 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e098:	eb01 0c05 	add.w	ip, r1, r5
 801e09c:	458c      	cmp	ip, r1
 801e09e:	f101 0e03 	add.w	lr, r1, #3
 801e0a2:	d928      	bls.n	801e0f6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801e0a4:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801e0a8:	fb11 f100 	smulbb	r1, r1, r0
 801e0ac:	4421      	add	r1, r4
 801e0ae:	b289      	uxth	r1, r1
 801e0b0:	f101 0801 	add.w	r8, r1, #1
 801e0b4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e0b8:	1209      	asrs	r1, r1, #8
 801e0ba:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801e0be:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801e0c2:	fb11 f100 	smulbb	r1, r1, r0
 801e0c6:	4439      	add	r1, r7
 801e0c8:	b289      	uxth	r1, r1
 801e0ca:	f101 0801 	add.w	r8, r1, #1
 801e0ce:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e0d2:	1209      	asrs	r1, r1, #8
 801e0d4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801e0d8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801e0dc:	fb11 f100 	smulbb	r1, r1, r0
 801e0e0:	4431      	add	r1, r6
 801e0e2:	b289      	uxth	r1, r1
 801e0e4:	f101 0801 	add.w	r8, r1, #1
 801e0e8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e0ec:	1209      	asrs	r1, r1, #8
 801e0ee:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801e0f2:	4671      	mov	r1, lr
 801e0f4:	e7d2      	b.n	801e09c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801e0f6:	4411      	add	r1, r2
 801e0f8:	e7cc      	b.n	801e094 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801e0fa:	4411      	add	r1, r2
 801e0fc:	4299      	cmp	r1, r3
 801e0fe:	d209      	bcs.n	801e114 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e100:	1948      	adds	r0, r1, r5
 801e102:	4281      	cmp	r1, r0
 801e104:	d2f9      	bcs.n	801e0fa <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801e106:	700c      	strb	r4, [r1, #0]
 801e108:	3103      	adds	r1, #3
 801e10a:	f801 7c02 	strb.w	r7, [r1, #-2]
 801e10e:	f801 6c01 	strb.w	r6, [r1, #-1]
 801e112:	e7f6      	b.n	801e102 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801e114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e118 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801e118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e11a:	4606      	mov	r6, r0
 801e11c:	b087      	sub	sp, #28
 801e11e:	4615      	mov	r5, r2
 801e120:	461f      	mov	r7, r3
 801e122:	b353      	cbz	r3, 801e17a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801e124:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e128:	2b00      	cmp	r3, #0
 801e12a:	dd26      	ble.n	801e17a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801e12c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801e130:	2b00      	cmp	r3, #0
 801e132:	dd22      	ble.n	801e17a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801e134:	6808      	ldr	r0, [r1, #0]
 801e136:	aa04      	add	r2, sp, #16
 801e138:	6849      	ldr	r1, [r1, #4]
 801e13a:	4c1b      	ldr	r4, [pc, #108]	; (801e1a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801e13c:	c203      	stmia	r2!, {r0, r1}
 801e13e:	a804      	add	r0, sp, #16
 801e140:	f7fa fc34 	bl	80189ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e144:	6820      	ldr	r0, [r4, #0]
 801e146:	6803      	ldr	r3, [r0, #0]
 801e148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e14a:	4798      	blx	r3
 801e14c:	2fff      	cmp	r7, #255	; 0xff
 801e14e:	d016      	beq.n	801e17e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801e150:	f010 0f08 	tst.w	r0, #8
 801e154:	6820      	ldr	r0, [r4, #0]
 801e156:	d015      	beq.n	801e184 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801e158:	2400      	movs	r4, #0
 801e15a:	6801      	ldr	r1, [r0, #0]
 801e15c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801e160:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e164:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801e168:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801e16c:	9401      	str	r4, [sp, #4]
 801e16e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801e172:	9400      	str	r4, [sp, #0]
 801e174:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 801e176:	4629      	mov	r1, r5
 801e178:	47a0      	blx	r4
 801e17a:	b007      	add	sp, #28
 801e17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e17e:	f010 0f02 	tst.w	r0, #2
 801e182:	e7e7      	b.n	801e154 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801e184:	6803      	ldr	r3, [r0, #0]
 801e186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e188:	4798      	blx	r3
 801e18a:	4b08      	ldr	r3, [pc, #32]	; (801e1ac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801e18c:	4601      	mov	r1, r0
 801e18e:	4630      	mov	r0, r6
 801e190:	881a      	ldrh	r2, [r3, #0]
 801e192:	6833      	ldr	r3, [r6, #0]
 801e194:	e9cd 5700 	strd	r5, r7, [sp]
 801e198:	69dd      	ldr	r5, [r3, #28]
 801e19a:	ab04      	add	r3, sp, #16
 801e19c:	47a8      	blx	r5
 801e19e:	6820      	ldr	r0, [r4, #0]
 801e1a0:	6803      	ldr	r3, [r0, #0]
 801e1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e1a4:	4798      	blx	r3
 801e1a6:	e7e8      	b.n	801e17a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801e1a8:	2400c8a4 	.word	0x2400c8a4
 801e1ac:	2400c89e 	.word	0x2400c89e

0801e1b0 <_ZN8touchgfx8LCD24bppC1Ev>:
 801e1b0:	2200      	movs	r2, #0
 801e1b2:	490c      	ldr	r1, [pc, #48]	; (801e1e4 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801e1b4:	6042      	str	r2, [r0, #4]
 801e1b6:	6001      	str	r1, [r0, #0]
 801e1b8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801e1bc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801e1c0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801e1c4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801e1c8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801e1cc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801e1d0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801e1d4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801e1d8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801e1dc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801e1e0:	4770      	bx	lr
 801e1e2:	bf00      	nop
 801e1e4:	0802b2d8 	.word	0x0802b2d8

0801e1e8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1ec:	b091      	sub	sp, #68	; 0x44
 801e1ee:	880d      	ldrh	r5, [r1, #0]
 801e1f0:	4607      	mov	r7, r0
 801e1f2:	4688      	mov	r8, r1
 801e1f4:	4616      	mov	r6, r2
 801e1f6:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801e1fa:	b12d      	cbz	r5, 801e208 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801e1fc:	4b69      	ldr	r3, [pc, #420]	; (801e3a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 801e1fe:	2160      	movs	r1, #96	; 0x60
 801e200:	4a69      	ldr	r2, [pc, #420]	; (801e3a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801e202:	486a      	ldr	r0, [pc, #424]	; (801e3ac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801e204:	f007 fcb8 	bl	8025b78 <__assert_func>
 801e208:	6810      	ldr	r0, [r2, #0]
 801e20a:	ac0c      	add	r4, sp, #48	; 0x30
 801e20c:	6851      	ldr	r1, [r2, #4]
 801e20e:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 801e3b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 801e212:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 801e3b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801e216:	c403      	stmia	r4!, {r0, r1}
 801e218:	6818      	ldr	r0, [r3, #0]
 801e21a:	ac0e      	add	r4, sp, #56	; 0x38
 801e21c:	6859      	ldr	r1, [r3, #4]
 801e21e:	c403      	stmia	r4!, {r0, r1}
 801e220:	a80c      	add	r0, sp, #48	; 0x30
 801e222:	f7fa fbc3 	bl	80189ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e226:	4631      	mov	r1, r6
 801e228:	a80e      	add	r0, sp, #56	; 0x38
 801e22a:	f7fa fbe7 	bl	80189fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e22e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e232:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e236:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e23a:	f8da 0000 	ldr.w	r0, [sl]
 801e23e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e242:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801e246:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801e24a:	440f      	add	r7, r1
 801e24c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e250:	440a      	add	r2, r1
 801e252:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e256:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e25a:	4413      	add	r3, r2
 801e25c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e260:	6803      	ldr	r3, [r0, #0]
 801e262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e264:	4798      	blx	r3
 801e266:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e26a:	f8da 0000 	ldr.w	r0, [sl]
 801e26e:	d01e      	beq.n	801e2ae <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 801e270:	6801      	ldr	r1, [r0, #0]
 801e272:	2201      	movs	r2, #1
 801e274:	9509      	str	r5, [sp, #36]	; 0x24
 801e276:	250b      	movs	r5, #11
 801e278:	b2a4      	uxth	r4, r4
 801e27a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e27e:	b2b6      	uxth	r6, r6
 801e280:	e9cd 5207 	strd	r5, r2, [sp, #28]
 801e284:	f8bb 5000 	ldrh.w	r5, [fp]
 801e288:	f8cd 9010 	str.w	r9, [sp, #16]
 801e28c:	9602      	str	r6, [sp, #8]
 801e28e:	9401      	str	r4, [sp, #4]
 801e290:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801e294:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e298:	9203      	str	r2, [sp, #12]
 801e29a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e29e:	9200      	str	r2, [sp, #0]
 801e2a0:	4642      	mov	r2, r8
 801e2a2:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801e2a4:	4639      	mov	r1, r7
 801e2a6:	47a0      	blx	r4
 801e2a8:	b011      	add	sp, #68	; 0x44
 801e2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2ae:	6803      	ldr	r3, [r0, #0]
 801e2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e2b2:	4798      	blx	r3
 801e2b4:	f8bb 5000 	ldrh.w	r5, [fp]
 801e2b8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e2bc:	f04f 0e04 	mov.w	lr, #4
 801e2c0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e2c4:	436e      	muls	r6, r5
 801e2c6:	fb05 2303 	mla	r3, r5, r3, r2
 801e2ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e2ce:	1b2d      	subs	r5, r5, r4
 801e2d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e2d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e2d8:	4418      	add	r0, r3
 801e2da:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e2de:	1982      	adds	r2, r0, r6
 801e2e0:	1b1b      	subs	r3, r3, r4
 801e2e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e2e6:	930b      	str	r3, [sp, #44]	; 0x2c
 801e2e8:	4290      	cmp	r0, r2
 801e2ea:	d254      	bcs.n	801e396 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 801e2ec:	eb00 0a04 	add.w	sl, r0, r4
 801e2f0:	4550      	cmp	r0, sl
 801e2f2:	d24c      	bcs.n	801e38e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 801e2f4:	f817 1b01 	ldrb.w	r1, [r7], #1
 801e2f8:	fb1e e101 	smlabb	r1, lr, r1, lr
 801e2fc:	eb08 0c01 	add.w	ip, r8, r1
 801e300:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801e304:	b173      	cbz	r3, 801e324 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801e306:	2bff      	cmp	r3, #255	; 0xff
 801e308:	f818 b001 	ldrb.w	fp, [r8, r1]
 801e30c:	d10c      	bne.n	801e328 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801e30e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e312:	d109      	bne.n	801e328 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801e314:	f880 b000 	strb.w	fp, [r0]
 801e318:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e31c:	7043      	strb	r3, [r0, #1]
 801e31e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801e322:	7083      	strb	r3, [r0, #2]
 801e324:	3003      	adds	r0, #3
 801e326:	e7e3      	b.n	801e2f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 801e328:	fb09 f103 	mul.w	r1, r9, r3
 801e32c:	1c4b      	adds	r3, r1, #1
 801e32e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e332:	7801      	ldrb	r1, [r0, #0]
 801e334:	121b      	asrs	r3, r3, #8
 801e336:	b29e      	uxth	r6, r3
 801e338:	43db      	mvns	r3, r3
 801e33a:	fb1b fb06 	smulbb	fp, fp, r6
 801e33e:	b2db      	uxtb	r3, r3
 801e340:	fb01 b103 	mla	r1, r1, r3, fp
 801e344:	b289      	uxth	r1, r1
 801e346:	f101 0b01 	add.w	fp, r1, #1
 801e34a:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e34e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e352:	fb1b fb03 	smulbb	fp, fp, r3
 801e356:	1209      	asrs	r1, r1, #8
 801e358:	7001      	strb	r1, [r0, #0]
 801e35a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e35e:	fb01 b106 	mla	r1, r1, r6, fp
 801e362:	b289      	uxth	r1, r1
 801e364:	f101 0b01 	add.w	fp, r1, #1
 801e368:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e36c:	1209      	asrs	r1, r1, #8
 801e36e:	7041      	strb	r1, [r0, #1]
 801e370:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801e374:	f890 c002 	ldrb.w	ip, [r0, #2]
 801e378:	fb1c f303 	smulbb	r3, ip, r3
 801e37c:	fb01 3606 	mla	r6, r1, r6, r3
 801e380:	b2b6      	uxth	r6, r6
 801e382:	1c73      	adds	r3, r6, #1
 801e384:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e388:	1236      	asrs	r6, r6, #8
 801e38a:	7086      	strb	r6, [r0, #2]
 801e38c:	e7ca      	b.n	801e324 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801e38e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e390:	4428      	add	r0, r5
 801e392:	441f      	add	r7, r3
 801e394:	e7a8      	b.n	801e2e8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 801e396:	4b06      	ldr	r3, [pc, #24]	; (801e3b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801e398:	6818      	ldr	r0, [r3, #0]
 801e39a:	6803      	ldr	r3, [r0, #0]
 801e39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e39e:	4798      	blx	r3
 801e3a0:	e782      	b.n	801e2a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 801e3a2:	bf00      	nop
 801e3a4:	0802ade0 	.word	0x0802ade0
 801e3a8:	0802b4af 	.word	0x0802b4af
 801e3ac:	0802ae7c 	.word	0x0802ae7c
 801e3b0:	2400c8a4 	.word	0x2400c8a4
 801e3b4:	2400c89e 	.word	0x2400c89e

0801e3b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3bc:	f8b1 9000 	ldrh.w	r9, [r1]
 801e3c0:	b091      	sub	sp, #68	; 0x44
 801e3c2:	4604      	mov	r4, r0
 801e3c4:	460e      	mov	r6, r1
 801e3c6:	f1b9 0f01 	cmp.w	r9, #1
 801e3ca:	4690      	mov	r8, r2
 801e3cc:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801e3d0:	d005      	beq.n	801e3de <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 801e3d2:	4b69      	ldr	r3, [pc, #420]	; (801e578 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 801e3d4:	21ae      	movs	r1, #174	; 0xae
 801e3d6:	4a69      	ldr	r2, [pc, #420]	; (801e57c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801e3d8:	4869      	ldr	r0, [pc, #420]	; (801e580 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801e3da:	f007 fbcd 	bl	8025b78 <__assert_func>
 801e3de:	6810      	ldr	r0, [r2, #0]
 801e3e0:	ad0c      	add	r5, sp, #48	; 0x30
 801e3e2:	6851      	ldr	r1, [r2, #4]
 801e3e4:	f8df a19c 	ldr.w	sl, [pc, #412]	; 801e584 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 801e3e8:	f8df b19c 	ldr.w	fp, [pc, #412]	; 801e588 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801e3ec:	c503      	stmia	r5!, {r0, r1}
 801e3ee:	6818      	ldr	r0, [r3, #0]
 801e3f0:	ad0e      	add	r5, sp, #56	; 0x38
 801e3f2:	6859      	ldr	r1, [r3, #4]
 801e3f4:	c503      	stmia	r5!, {r0, r1}
 801e3f6:	a80c      	add	r0, sp, #48	; 0x30
 801e3f8:	f7fa fad8 	bl	80189ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e3fc:	4641      	mov	r1, r8
 801e3fe:	a80e      	add	r0, sp, #56	; 0x38
 801e400:	f7fa fafc 	bl	80189fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e404:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e408:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e40c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e410:	f8da 0000 	ldr.w	r0, [sl]
 801e414:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e418:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801e41c:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801e420:	440c      	add	r4, r1
 801e422:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e426:	440a      	add	r2, r1
 801e428:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e42c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e430:	4413      	add	r3, r2
 801e432:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e436:	6803      	ldr	r3, [r0, #0]
 801e438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e43a:	4798      	blx	r3
 801e43c:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e440:	f8da 0000 	ldr.w	r0, [sl]
 801e444:	d020      	beq.n	801e488 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 801e446:	2200      	movs	r2, #0
 801e448:	f04f 0c0b 	mov.w	ip, #11
 801e44c:	6801      	ldr	r1, [r0, #0]
 801e44e:	b2ad      	uxth	r5, r5
 801e450:	f8cd c01c 	str.w	ip, [sp, #28]
 801e454:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e458:	e9cd 9208 	strd	r9, r2, [sp, #32]
 801e45c:	f8bb c000 	ldrh.w	ip, [fp]
 801e460:	9704      	str	r7, [sp, #16]
 801e462:	9502      	str	r5, [sp, #8]
 801e464:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801e468:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e46c:	9203      	str	r2, [sp, #12]
 801e46e:	fa1f f288 	uxth.w	r2, r8
 801e472:	9201      	str	r2, [sp, #4]
 801e474:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e478:	9200      	str	r2, [sp, #0]
 801e47a:	4632      	mov	r2, r6
 801e47c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801e47e:	4621      	mov	r1, r4
 801e480:	47a8      	blx	r5
 801e482:	b011      	add	sp, #68	; 0x44
 801e484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e488:	6803      	ldr	r3, [r0, #0]
 801e48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e48c:	4798      	blx	r3
 801e48e:	f8bb 2000 	ldrh.w	r2, [fp]
 801e492:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e496:	f04f 0e03 	mov.w	lr, #3
 801e49a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801e49e:	4355      	muls	r5, r2
 801e4a0:	fa1f fc87 	uxth.w	ip, r7
 801e4a4:	fb02 1303 	mla	r3, r2, r3, r1
 801e4a8:	eba2 0208 	sub.w	r2, r2, r8
 801e4ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e4b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e4b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e4b8:	4418      	add	r0, r3
 801e4ba:	920b      	str	r2, [sp, #44]	; 0x2c
 801e4bc:	1943      	adds	r3, r0, r5
 801e4be:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801e4c2:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801e4c6:	eba2 0208 	sub.w	r2, r2, r8
 801e4ca:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e4ce:	b2ad      	uxth	r5, r5
 801e4d0:	4298      	cmp	r0, r3
 801e4d2:	d24a      	bcs.n	801e56a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801e4d4:	eb00 0908 	add.w	r9, r0, r8
 801e4d8:	4621      	mov	r1, r4
 801e4da:	4548      	cmp	r0, r9
 801e4dc:	460c      	mov	r4, r1
 801e4de:	d240      	bcs.n	801e562 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801e4e0:	f04f 0a04 	mov.w	sl, #4
 801e4e4:	7824      	ldrb	r4, [r4, #0]
 801e4e6:	2fff      	cmp	r7, #255	; 0xff
 801e4e8:	f101 0101 	add.w	r1, r1, #1
 801e4ec:	fb1e a404 	smlabb	r4, lr, r4, sl
 801e4f0:	eb06 0a04 	add.w	sl, r6, r4
 801e4f4:	f816 b004 	ldrb.w	fp, [r6, r4]
 801e4f8:	d02b      	beq.n	801e552 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801e4fa:	7804      	ldrb	r4, [r0, #0]
 801e4fc:	fb14 f405 	smulbb	r4, r4, r5
 801e500:	fb0b 440c 	mla	r4, fp, ip, r4
 801e504:	b2a4      	uxth	r4, r4
 801e506:	f104 0b01 	add.w	fp, r4, #1
 801e50a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e50e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e512:	fb1b fb05 	smulbb	fp, fp, r5
 801e516:	1224      	asrs	r4, r4, #8
 801e518:	7004      	strb	r4, [r0, #0]
 801e51a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e51e:	fb04 b40c 	mla	r4, r4, ip, fp
 801e522:	b2a4      	uxth	r4, r4
 801e524:	f104 0b01 	add.w	fp, r4, #1
 801e528:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e52c:	1224      	asrs	r4, r4, #8
 801e52e:	7044      	strb	r4, [r0, #1]
 801e530:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e534:	f890 a002 	ldrb.w	sl, [r0, #2]
 801e538:	fb1a fa05 	smulbb	sl, sl, r5
 801e53c:	fb04 a40c 	mla	r4, r4, ip, sl
 801e540:	b2a4      	uxth	r4, r4
 801e542:	f104 0a01 	add.w	sl, r4, #1
 801e546:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801e54a:	1224      	asrs	r4, r4, #8
 801e54c:	7084      	strb	r4, [r0, #2]
 801e54e:	3003      	adds	r0, #3
 801e550:	e7c3      	b.n	801e4da <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 801e552:	f880 b000 	strb.w	fp, [r0]
 801e556:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e55a:	7044      	strb	r4, [r0, #1]
 801e55c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e560:	e7f4      	b.n	801e54c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 801e562:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e564:	4420      	add	r0, r4
 801e566:	188c      	adds	r4, r1, r2
 801e568:	e7b2      	b.n	801e4d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 801e56a:	4b06      	ldr	r3, [pc, #24]	; (801e584 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801e56c:	6818      	ldr	r0, [r3, #0]
 801e56e:	6803      	ldr	r3, [r0, #0]
 801e570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e572:	4798      	blx	r3
 801e574:	e785      	b.n	801e482 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 801e576:	bf00      	nop
 801e578:	0802ad5f 	.word	0x0802ad5f
 801e57c:	0802b3a2 	.word	0x0802b3a2
 801e580:	0802ae7c 	.word	0x0802ae7c
 801e584:	2400c8a4 	.word	0x2400c8a4
 801e588:	2400c89e 	.word	0x2400c89e

0801e58c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e58c:	b570      	push	{r4, r5, r6, lr}
 801e58e:	780d      	ldrb	r5, [r1, #0]
 801e590:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801e594:	2d01      	cmp	r5, #1
 801e596:	d00d      	beq.n	801e5b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801e598:	d307      	bcc.n	801e5aa <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801e59a:	2d02      	cmp	r5, #2
 801e59c:	d10f      	bne.n	801e5be <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801e59e:	4b08      	ldr	r3, [pc, #32]	; (801e5c0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801e5a0:	2153      	movs	r1, #83	; 0x53
 801e5a2:	4a08      	ldr	r2, [pc, #32]	; (801e5c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801e5a4:	4808      	ldr	r0, [pc, #32]	; (801e5c8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801e5a6:	f007 fae7 	bl	8025b78 <__assert_func>
 801e5aa:	9404      	str	r4, [sp, #16]
 801e5ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e5b0:	f7ff be1a 	b.w	801e1e8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e5b4:	9404      	str	r4, [sp, #16]
 801e5b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e5ba:	f7ff befd 	b.w	801e3b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e5be:	bd70      	pop	{r4, r5, r6, pc}
 801e5c0:	0802ad14 	.word	0x0802ad14
 801e5c4:	0802b320 	.word	0x0802b320
 801e5c8:	0802ae7c 	.word	0x0802ae7c

0801e5cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801e5cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e5d0:	4605      	mov	r5, r0
 801e5d2:	b08f      	sub	sp, #60	; 0x3c
 801e5d4:	460c      	mov	r4, r1
 801e5d6:	461f      	mov	r7, r3
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	d052      	beq.n	801e682 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801e5dc:	6808      	ldr	r0, [r1, #0]
 801e5de:	ab0a      	add	r3, sp, #40	; 0x28
 801e5e0:	6849      	ldr	r1, [r1, #4]
 801e5e2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801e7ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801e5e6:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801e7b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801e5ea:	c303      	stmia	r3!, {r0, r1}
 801e5ec:	6810      	ldr	r0, [r2, #0]
 801e5ee:	ab0c      	add	r3, sp, #48	; 0x30
 801e5f0:	6851      	ldr	r1, [r2, #4]
 801e5f2:	c303      	stmia	r3!, {r0, r1}
 801e5f4:	a80a      	add	r0, sp, #40	; 0x28
 801e5f6:	f7fa f9d9 	bl	80189ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e5fa:	4621      	mov	r1, r4
 801e5fc:	a80c      	add	r0, sp, #48	; 0x30
 801e5fe:	f7fa f9fd 	bl	80189fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e602:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e606:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801e60a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e60e:	f8d8 0000 	ldr.w	r0, [r8]
 801e612:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e616:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801e61a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801e61e:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801e622:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801e626:	440a      	add	r2, r1
 801e628:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801e62c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801e630:	4413      	add	r3, r2
 801e632:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e636:	6803      	ldr	r3, [r0, #0]
 801e638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e63a:	4798      	blx	r3
 801e63c:	2fff      	cmp	r7, #255	; 0xff
 801e63e:	d023      	beq.n	801e688 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801e640:	f010 0f04 	tst.w	r0, #4
 801e644:	f8d8 0000 	ldr.w	r0, [r8]
 801e648:	d021      	beq.n	801e68e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801e64a:	2100      	movs	r1, #0
 801e64c:	f04f 0e01 	mov.w	lr, #1
 801e650:	f8d0 c000 	ldr.w	ip, [r0]
 801e654:	b2a4      	uxth	r4, r4
 801e656:	9106      	str	r1, [sp, #24]
 801e658:	b2b6      	uxth	r6, r6
 801e65a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801e65e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801e662:	e9cd e107 	strd	lr, r1, [sp, #28]
 801e666:	f8b9 e000 	ldrh.w	lr, [r9]
 801e66a:	9703      	str	r7, [sp, #12]
 801e66c:	9401      	str	r4, [sp, #4]
 801e66e:	9600      	str	r6, [sp, #0]
 801e670:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801e674:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e678:	9102      	str	r1, [sp, #8]
 801e67a:	4629      	mov	r1, r5
 801e67c:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801e680:	47a0      	blx	r4
 801e682:	b00f      	add	sp, #60	; 0x3c
 801e684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e688:	f010 0f01 	tst.w	r0, #1
 801e68c:	e7da      	b.n	801e644 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801e68e:	6803      	ldr	r3, [r0, #0]
 801e690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e692:	4798      	blx	r3
 801e694:	f8b9 1000 	ldrh.w	r1, [r9]
 801e698:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801e69c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801e6a0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e6a4:	434c      	muls	r4, r1
 801e6a6:	2fff      	cmp	r7, #255	; 0xff
 801e6a8:	fb01 2303 	mla	r3, r1, r3, r2
 801e6ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e6b0:	eba1 0106 	sub.w	r1, r1, r6
 801e6b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e6b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e6bc:	4418      	add	r0, r3
 801e6be:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801e6c2:	eba3 0606 	sub.w	r6, r3, r6
 801e6c6:	4404      	add	r4, r0
 801e6c8:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801e6cc:	d04a      	beq.n	801e764 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801e6ce:	43fa      	mvns	r2, r7
 801e6d0:	b2bb      	uxth	r3, r7
 801e6d2:	b2d7      	uxtb	r7, r2
 801e6d4:	42a0      	cmp	r0, r4
 801e6d6:	d263      	bcs.n	801e7a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801e6d8:	eb00 0e0c 	add.w	lr, r0, ip
 801e6dc:	4586      	cmp	lr, r0
 801e6de:	f100 0803 	add.w	r8, r0, #3
 801e6e2:	d93a      	bls.n	801e75a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801e6e4:	f835 2b02 	ldrh.w	r2, [r5], #2
 801e6e8:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801e6ec:	00d0      	lsls	r0, r2, #3
 801e6ee:	fb19 f907 	smulbb	r9, r9, r7
 801e6f2:	b2c0      	uxtb	r0, r0
 801e6f4:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e6f8:	fb00 9003 	mla	r0, r0, r3, r9
 801e6fc:	b280      	uxth	r0, r0
 801e6fe:	f100 0901 	add.w	r9, r0, #1
 801e702:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e706:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801e70a:	fb19 f907 	smulbb	r9, r9, r7
 801e70e:	1200      	asrs	r0, r0, #8
 801e710:	f808 0c03 	strb.w	r0, [r8, #-3]
 801e714:	10d0      	asrs	r0, r2, #3
 801e716:	1212      	asrs	r2, r2, #8
 801e718:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e71c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e720:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801e724:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e728:	fb00 9003 	mla	r0, r0, r3, r9
 801e72c:	b280      	uxth	r0, r0
 801e72e:	f100 0901 	add.w	r9, r0, #1
 801e732:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e736:	1200      	asrs	r0, r0, #8
 801e738:	f808 0c02 	strb.w	r0, [r8, #-2]
 801e73c:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801e740:	fb10 f007 	smulbb	r0, r0, r7
 801e744:	fb02 0203 	mla	r2, r2, r3, r0
 801e748:	b292      	uxth	r2, r2
 801e74a:	1c50      	adds	r0, r2, #1
 801e74c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e750:	4640      	mov	r0, r8
 801e752:	1212      	asrs	r2, r2, #8
 801e754:	f808 2c01 	strb.w	r2, [r8, #-1]
 801e758:	e7c0      	b.n	801e6dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801e75a:	4408      	add	r0, r1
 801e75c:	4435      	add	r5, r6
 801e75e:	e7b9      	b.n	801e6d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801e760:	4408      	add	r0, r1
 801e762:	4435      	add	r5, r6
 801e764:	42a0      	cmp	r0, r4
 801e766:	d21b      	bcs.n	801e7a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801e768:	eb00 070c 	add.w	r7, r0, ip
 801e76c:	42b8      	cmp	r0, r7
 801e76e:	d2f7      	bcs.n	801e760 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801e770:	f835 3b02 	ldrh.w	r3, [r5], #2
 801e774:	3003      	adds	r0, #3
 801e776:	00da      	lsls	r2, r3, #3
 801e778:	b2d2      	uxtb	r2, r2
 801e77a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e77e:	f800 2c03 	strb.w	r2, [r0, #-3]
 801e782:	10da      	asrs	r2, r3, #3
 801e784:	121b      	asrs	r3, r3, #8
 801e786:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e78a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e78e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801e792:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801e796:	f800 2c02 	strb.w	r2, [r0, #-2]
 801e79a:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e79e:	e7e5      	b.n	801e76c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801e7a0:	4b02      	ldr	r3, [pc, #8]	; (801e7ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801e7a2:	6818      	ldr	r0, [r3, #0]
 801e7a4:	6803      	ldr	r3, [r0, #0]
 801e7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e7a8:	4798      	blx	r3
 801e7aa:	e76a      	b.n	801e682 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801e7ac:	2400c8a4 	.word	0x2400c8a4
 801e7b0:	2400c89e 	.word	0x2400c89e

0801e7b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7b8:	b08a      	sub	sp, #40	; 0x28
 801e7ba:	460d      	mov	r5, r1
 801e7bc:	4604      	mov	r4, r0
 801e7be:	461e      	mov	r6, r3
 801e7c0:	6808      	ldr	r0, [r1, #0]
 801e7c2:	ab06      	add	r3, sp, #24
 801e7c4:	6849      	ldr	r1, [r1, #4]
 801e7c6:	4f5d      	ldr	r7, [pc, #372]	; (801e93c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801e7c8:	c303      	stmia	r3!, {r0, r1}
 801e7ca:	6810      	ldr	r0, [r2, #0]
 801e7cc:	ab08      	add	r3, sp, #32
 801e7ce:	6851      	ldr	r1, [r2, #4]
 801e7d0:	c303      	stmia	r3!, {r0, r1}
 801e7d2:	a806      	add	r0, sp, #24
 801e7d4:	f7fa f8ea 	bl	80189ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e7d8:	4629      	mov	r1, r5
 801e7da:	a808      	add	r0, sp, #32
 801e7dc:	f7fa f90e 	bl	80189fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e7e0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e7e4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e7e8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e7ec:	6838      	ldr	r0, [r7, #0]
 801e7ee:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e7f2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801e7f6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801e7fa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e7fe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e802:	440a      	add	r2, r1
 801e804:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e808:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e80c:	4413      	add	r3, r2
 801e80e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e812:	6803      	ldr	r3, [r0, #0]
 801e814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e816:	4798      	blx	r3
 801e818:	2eff      	cmp	r6, #255	; 0xff
 801e81a:	d119      	bne.n	801e850 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e81c:	f010 0f20 	tst.w	r0, #32
 801e820:	6838      	ldr	r0, [r7, #0]
 801e822:	d018      	beq.n	801e856 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e824:	b2ad      	uxth	r5, r5
 801e826:	2700      	movs	r7, #0
 801e828:	6801      	ldr	r1, [r0, #0]
 801e82a:	9501      	str	r5, [sp, #4]
 801e82c:	fa1f f588 	uxth.w	r5, r8
 801e830:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e834:	9500      	str	r5, [sp, #0]
 801e836:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e83a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801e83e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801e842:	9602      	str	r6, [sp, #8]
 801e844:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801e846:	4621      	mov	r1, r4
 801e848:	47a8      	blx	r5
 801e84a:	b00a      	add	sp, #40	; 0x28
 801e84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e850:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e854:	e7e4      	b.n	801e820 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801e856:	6803      	ldr	r3, [r0, #0]
 801e858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e85a:	4798      	blx	r3
 801e85c:	4b38      	ldr	r3, [pc, #224]	; (801e940 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801e85e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e862:	f8b3 c000 	ldrh.w	ip, [r3]
 801e866:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e86a:	fb0c f505 	mul.w	r5, ip, r5
 801e86e:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801e872:	fb0c 2303 	mla	r3, ip, r3, r2
 801e876:	ebac 0c08 	sub.w	ip, ip, r8
 801e87a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e87e:	ebae 0e08 	sub.w	lr, lr, r8
 801e882:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e886:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e88a:	4418      	add	r0, r3
 801e88c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801e890:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e894:	4405      	add	r5, r0
 801e896:	42a8      	cmp	r0, r5
 801e898:	d24a      	bcs.n	801e930 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801e89a:	eb00 0803 	add.w	r8, r0, r3
 801e89e:	4540      	cmp	r0, r8
 801e8a0:	d243      	bcs.n	801e92a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801e8a2:	78e2      	ldrb	r2, [r4, #3]
 801e8a4:	b15a      	cbz	r2, 801e8be <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e8a6:	2aff      	cmp	r2, #255	; 0xff
 801e8a8:	f894 9000 	ldrb.w	r9, [r4]
 801e8ac:	d10a      	bne.n	801e8c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e8ae:	2eff      	cmp	r6, #255	; 0xff
 801e8b0:	d108      	bne.n	801e8c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e8b2:	f880 9000 	strb.w	r9, [r0]
 801e8b6:	7862      	ldrb	r2, [r4, #1]
 801e8b8:	7042      	strb	r2, [r0, #1]
 801e8ba:	78a2      	ldrb	r2, [r4, #2]
 801e8bc:	7082      	strb	r2, [r0, #2]
 801e8be:	3003      	adds	r0, #3
 801e8c0:	3404      	adds	r4, #4
 801e8c2:	e7ec      	b.n	801e89e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801e8c4:	4372      	muls	r2, r6
 801e8c6:	1c51      	adds	r1, r2, #1
 801e8c8:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801e8cc:	1209      	asrs	r1, r1, #8
 801e8ce:	fa1f fa81 	uxth.w	sl, r1
 801e8d2:	43c9      	mvns	r1, r1
 801e8d4:	fb19 f90a 	smulbb	r9, r9, sl
 801e8d8:	b2ca      	uxtb	r2, r1
 801e8da:	7801      	ldrb	r1, [r0, #0]
 801e8dc:	fb01 9902 	mla	r9, r1, r2, r9
 801e8e0:	fa1f f989 	uxth.w	r9, r9
 801e8e4:	f109 0101 	add.w	r1, r9, #1
 801e8e8:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801e8ec:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e8f0:	f880 9000 	strb.w	r9, [r0]
 801e8f4:	f890 9001 	ldrb.w	r9, [r0, #1]
 801e8f8:	7861      	ldrb	r1, [r4, #1]
 801e8fa:	fb19 f902 	smulbb	r9, r9, r2
 801e8fe:	fb01 910a 	mla	r1, r1, sl, r9
 801e902:	b289      	uxth	r1, r1
 801e904:	f101 0901 	add.w	r9, r1, #1
 801e908:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801e90c:	1209      	asrs	r1, r1, #8
 801e90e:	7041      	strb	r1, [r0, #1]
 801e910:	7881      	ldrb	r1, [r0, #2]
 801e912:	f894 9002 	ldrb.w	r9, [r4, #2]
 801e916:	fb11 f202 	smulbb	r2, r1, r2
 801e91a:	fb09 220a 	mla	r2, r9, sl, r2
 801e91e:	b292      	uxth	r2, r2
 801e920:	1c51      	adds	r1, r2, #1
 801e922:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e926:	1212      	asrs	r2, r2, #8
 801e928:	e7c8      	b.n	801e8bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801e92a:	4460      	add	r0, ip
 801e92c:	4474      	add	r4, lr
 801e92e:	e7b2      	b.n	801e896 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801e930:	6838      	ldr	r0, [r7, #0]
 801e932:	6803      	ldr	r3, [r0, #0]
 801e934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e936:	4798      	blx	r3
 801e938:	e787      	b.n	801e84a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e93a:	bf00      	nop
 801e93c:	2400c8a4 	.word	0x2400c8a4
 801e940:	2400c89e 	.word	0x2400c89e

0801e944 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e948:	b085      	sub	sp, #20
 801e94a:	4606      	mov	r6, r0
 801e94c:	460c      	mov	r4, r1
 801e94e:	4691      	mov	r9, r2
 801e950:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801e954:	4698      	mov	r8, r3
 801e956:	b31d      	cbz	r5, 801e9a0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e958:	4608      	mov	r0, r1
 801e95a:	f7fd fa2d 	bl	801bdb8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e95e:	4607      	mov	r7, r0
 801e960:	4620      	mov	r0, r4
 801e962:	f7fd fa63 	bl	801be2c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e966:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e96a:	4620      	mov	r0, r4
 801e96c:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e970:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e974:	f8ad 700c 	strh.w	r7, [sp, #12]
 801e978:	f7fd fb76 	bl	801c068 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e97c:	280b      	cmp	r0, #11
 801e97e:	d838      	bhi.n	801e9f2 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 801e980:	e8df f000 	tbb	[pc, r0]
 801e984:	37062920 	.word	0x37062920
 801e988:	37373737 	.word	0x37373737
 801e98c:	11373737 	.word	0x11373737
 801e990:	4620      	mov	r0, r4
 801e992:	f7fd fadf 	bl	801bf54 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e996:	462b      	mov	r3, r5
 801e998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e99a:	a902      	add	r1, sp, #8
 801e99c:	f7ff ff0a 	bl	801e7b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e9a0:	b005      	add	sp, #20
 801e9a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e9a6:	4620      	mov	r0, r4
 801e9a8:	f7fd fad4 	bl	801bf54 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e9ac:	4606      	mov	r6, r0
 801e9ae:	4620      	mov	r0, r4
 801e9b0:	f7fd fb02 	bl	801bfb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801e9b4:	9500      	str	r5, [sp, #0]
 801e9b6:	4601      	mov	r1, r0
 801e9b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e9ba:	aa02      	add	r2, sp, #8
 801e9bc:	4630      	mov	r0, r6
 801e9be:	f7ff fde5 	bl	801e58c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801e9c2:	e7ed      	b.n	801e9a0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e9c4:	4620      	mov	r0, r4
 801e9c6:	f7fd fac5 	bl	801bf54 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e9ca:	462b      	mov	r3, r5
 801e9cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e9ce:	a902      	add	r1, sp, #8
 801e9d0:	f7ff fdfc 	bl	801e5cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801e9d4:	e7e4      	b.n	801e9a0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e9d6:	6833      	ldr	r3, [r6, #0]
 801e9d8:	4620      	mov	r0, r4
 801e9da:	68df      	ldr	r7, [r3, #12]
 801e9dc:	f7fd faba 	bl	801bf54 <_ZNK8touchgfx6Bitmap7getDataEv>
 801e9e0:	2300      	movs	r3, #0
 801e9e2:	4601      	mov	r1, r0
 801e9e4:	aa02      	add	r2, sp, #8
 801e9e6:	4630      	mov	r0, r6
 801e9e8:	e9cd 5300 	strd	r5, r3, [sp]
 801e9ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e9ee:	47b8      	blx	r7
 801e9f0:	e7d6      	b.n	801e9a0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e9f2:	4b03      	ldr	r3, [pc, #12]	; (801ea00 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 801e9f4:	2147      	movs	r1, #71	; 0x47
 801e9f6:	4a03      	ldr	r2, [pc, #12]	; (801ea04 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801e9f8:	4803      	ldr	r0, [pc, #12]	; (801ea08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801e9fa:	f007 f8bd 	bl	8025b78 <__assert_func>
 801e9fe:	bf00      	nop
 801ea00:	0802adad 	.word	0x0802adad
 801ea04:	0802b42b 	.word	0x0802b42b
 801ea08:	0802ae7c 	.word	0x0802ae7c

0801ea0c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801ea0c:	b570      	push	{r4, r5, r6, lr}
 801ea0e:	9d04      	ldr	r5, [sp, #16]
 801ea10:	460c      	mov	r4, r1
 801ea12:	4619      	mov	r1, r3
 801ea14:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ea18:	2a0d      	cmp	r2, #13
 801ea1a:	d826      	bhi.n	801ea6a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801ea1c:	e8df f002 	tbb	[pc, r2]
 801ea20:	200e1407 	.word	0x200e1407
 801ea24:	20202020 	.word	0x20202020
 801ea28:	20202020 	.word	0x20202020
 801ea2c:	2020      	.short	0x2020
 801ea2e:	4b0f      	ldr	r3, [pc, #60]	; (801ea6c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801ea30:	f240 11d3 	movw	r1, #467	; 0x1d3
 801ea34:	4a0e      	ldr	r2, [pc, #56]	; (801ea70 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801ea36:	480f      	ldr	r0, [pc, #60]	; (801ea74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801ea38:	f007 f89e 	bl	8025b78 <__assert_func>
 801ea3c:	462a      	mov	r2, r5
 801ea3e:	4620      	mov	r0, r4
 801ea40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ea44:	f7ff beb6 	b.w	801e7b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ea48:	6802      	ldr	r2, [r0, #0]
 801ea4a:	2600      	movs	r6, #0
 801ea4c:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801ea50:	68d6      	ldr	r6, [r2, #12]
 801ea52:	462b      	mov	r3, r5
 801ea54:	460a      	mov	r2, r1
 801ea56:	4621      	mov	r1, r4
 801ea58:	46b4      	mov	ip, r6
 801ea5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ea5e:	4760      	bx	ip
 801ea60:	4b05      	ldr	r3, [pc, #20]	; (801ea78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801ea62:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 801ea66:	4a02      	ldr	r2, [pc, #8]	; (801ea70 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801ea68:	e7e5      	b.n	801ea36 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801ea6a:	bd70      	pop	{r4, r5, r6, pc}
 801ea6c:	0802b053 	.word	0x0802b053
 801ea70:	0802b713 	.word	0x0802b713
 801ea74:	0802ae7c 	.word	0x0802ae7c
 801ea78:	0802b094 	.word	0x0802b094

0801ea7c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801ea7c:	b158      	cbz	r0, 801ea96 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801ea7e:	2902      	cmp	r1, #2
 801ea80:	d00f      	beq.n	801eaa2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801ea82:	2903      	cmp	r1, #3
 801ea84:	d010      	beq.n	801eaa8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801ea86:	2901      	cmp	r1, #1
 801ea88:	d101      	bne.n	801ea8e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ea8a:	2001      	movs	r0, #1
 801ea8c:	4770      	bx	lr
 801ea8e:	4b08      	ldr	r3, [pc, #32]	; (801eab0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801ea90:	8819      	ldrh	r1, [r3, #0]
 801ea92:	4248      	negs	r0, r1
 801ea94:	4770      	bx	lr
 801ea96:	2902      	cmp	r1, #2
 801ea98:	d006      	beq.n	801eaa8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801ea9a:	2903      	cmp	r1, #3
 801ea9c:	d0f7      	beq.n	801ea8e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ea9e:	2901      	cmp	r1, #1
 801eaa0:	d1f3      	bne.n	801ea8a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801eaa2:	4b03      	ldr	r3, [pc, #12]	; (801eab0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801eaa4:	8818      	ldrh	r0, [r3, #0]
 801eaa6:	4770      	bx	lr
 801eaa8:	f04f 30ff 	mov.w	r0, #4294967295
 801eaac:	4770      	bx	lr
 801eaae:	bf00      	nop
 801eab0:	2400c89e 	.word	0x2400c89e

0801eab4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801eab4:	b170      	cbz	r0, 801ead4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801eab6:	2902      	cmp	r1, #2
 801eab8:	d012      	beq.n	801eae0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801eaba:	2903      	cmp	r1, #3
 801eabc:	d006      	beq.n	801eacc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801eabe:	2901      	cmp	r1, #1
 801eac0:	d001      	beq.n	801eac6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801eac2:	2001      	movs	r0, #1
 801eac4:	4770      	bx	lr
 801eac6:	4b08      	ldr	r3, [pc, #32]	; (801eae8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801eac8:	8818      	ldrh	r0, [r3, #0]
 801eaca:	4770      	bx	lr
 801eacc:	4b06      	ldr	r3, [pc, #24]	; (801eae8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801eace:	8818      	ldrh	r0, [r3, #0]
 801ead0:	4240      	negs	r0, r0
 801ead2:	4770      	bx	lr
 801ead4:	2902      	cmp	r1, #2
 801ead6:	d0f9      	beq.n	801eacc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801ead8:	2903      	cmp	r1, #3
 801eada:	d0f2      	beq.n	801eac2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801eadc:	2901      	cmp	r1, #1
 801eade:	d1f2      	bne.n	801eac6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801eae0:	f04f 30ff 	mov.w	r0, #4294967295
 801eae4:	4770      	bx	lr
 801eae6:	bf00      	nop
 801eae8:	2400c89e 	.word	0x2400c89e

0801eaec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801eaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaf0:	b097      	sub	sp, #92	; 0x5c
 801eaf2:	910b      	str	r1, [sp, #44]	; 0x2c
 801eaf4:	a912      	add	r1, sp, #72	; 0x48
 801eaf6:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801eafa:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801eafe:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801eb02:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801eb06:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801eb0a:	e881 000c 	stmia.w	r1, {r2, r3}
 801eb0e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801eb12:	930a      	str	r3, [sp, #40]	; 0x28
 801eb14:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801eb18:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801eb1c:	9311      	str	r3, [sp, #68]	; 0x44
 801eb1e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801eb22:	798d      	ldrb	r5, [r1, #6]
 801eb24:	930c      	str	r3, [sp, #48]	; 0x30
 801eb26:	7b4b      	ldrb	r3, [r1, #13]
 801eb28:	0158      	lsls	r0, r3, #5
 801eb2a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801eb2e:	4328      	orrs	r0, r5
 801eb30:	9009      	str	r0, [sp, #36]	; 0x24
 801eb32:	f000 817d 	beq.w	801ee30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801eb36:	011b      	lsls	r3, r3, #4
 801eb38:	79c8      	ldrb	r0, [r1, #7]
 801eb3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801eb3e:	4303      	orrs	r3, r0
 801eb40:	930e      	str	r3, [sp, #56]	; 0x38
 801eb42:	f000 8175 	beq.w	801ee30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801eb46:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801eb4a:	b29b      	uxth	r3, r3
 801eb4c:	2f00      	cmp	r7, #0
 801eb4e:	f000 8117 	beq.w	801ed80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 801eb52:	1aff      	subs	r7, r7, r3
 801eb54:	b2bf      	uxth	r7, r7
 801eb56:	043b      	lsls	r3, r7, #16
 801eb58:	d502      	bpl.n	801eb60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801eb5a:	1bf6      	subs	r6, r6, r7
 801eb5c:	2700      	movs	r7, #0
 801eb5e:	b236      	sxth	r6, r6
 801eb60:	f9b2 1000 	ldrsh.w	r1, [r2]
 801eb64:	a812      	add	r0, sp, #72	; 0x48
 801eb66:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801eb6a:	428e      	cmp	r6, r1
 801eb6c:	b28b      	uxth	r3, r1
 801eb6e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801eb72:	bfbf      	itttt	lt
 801eb74:	18ff      	addlt	r7, r7, r3
 801eb76:	1bbe      	sublt	r6, r7, r6
 801eb78:	b2b7      	uxthlt	r7, r6
 801eb7a:	460e      	movlt	r6, r1
 801eb7c:	8891      	ldrh	r1, [r2, #4]
 801eb7e:	440b      	add	r3, r1
 801eb80:	4631      	mov	r1, r6
 801eb82:	b21b      	sxth	r3, r3
 801eb84:	9310      	str	r3, [sp, #64]	; 0x40
 801eb86:	88d3      	ldrh	r3, [r2, #6]
 801eb88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eb8a:	449a      	add	sl, r3
 801eb8c:	fa0f f38a 	sxth.w	r3, sl
 801eb90:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801eb94:	930f      	str	r3, [sp, #60]	; 0x3c
 801eb96:	4bb6      	ldr	r3, [pc, #728]	; (801ee70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801eb98:	f893 b000 	ldrb.w	fp, [r3]
 801eb9c:	f10b 3cff 	add.w	ip, fp, #4294967295
 801eba0:	f1dc 0300 	rsbs	r3, ip, #0
 801eba4:	eb43 030c 	adc.w	r3, r3, ip
 801eba8:	930d      	str	r3, [sp, #52]	; 0x34
 801ebaa:	464b      	mov	r3, r9
 801ebac:	f7f9 fd82 	bl	80186b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ebb0:	4631      	mov	r1, r6
 801ebb2:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801ebb6:	464b      	mov	r3, r9
 801ebb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ebba:	a812      	add	r0, sp, #72	; 0x48
 801ebbc:	f7f9 fd92 	bl	80186e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ebc0:	a916      	add	r1, sp, #88	; 0x58
 801ebc2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ebc6:	a815      	add	r0, sp, #84	; 0x54
 801ebc8:	f7f9 feae 	bl	8018928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ebcc:	f1b9 0f00 	cmp.w	r9, #0
 801ebd0:	f040 80d9 	bne.w	801ed86 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 801ebd4:	f1bb 0f01 	cmp.w	fp, #1
 801ebd8:	f040 80dd 	bne.w	801ed96 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 801ebdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ebde:	b153      	cbz	r3, 801ebf6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801ebe0:	2508      	movs	r5, #8
 801ebe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ebe4:	fb95 f3f8 	sdiv	r3, r5, r8
 801ebe8:	1e5d      	subs	r5, r3, #1
 801ebea:	4415      	add	r5, r2
 801ebec:	fb95 f5f3 	sdiv	r5, r5, r3
 801ebf0:	fb15 f503 	smulbb	r5, r5, r3
 801ebf4:	b2ad      	uxth	r5, r5
 801ebf6:	b907      	cbnz	r7, 801ebfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801ebf8:	b16c      	cbz	r4, 801ec16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801ebfa:	fb04 7305 	mla	r3, r4, r5, r7
 801ebfe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ec00:	ebaa 0a04 	sub.w	sl, sl, r4
 801ec04:	fb08 f303 	mul.w	r3, r8, r3
 801ec08:	fa1f fa8a 	uxth.w	sl, sl
 801ec0c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801ec10:	f003 0407 	and.w	r4, r3, #7
 801ec14:	9226      	str	r2, [sp, #152]	; 0x98
 801ec16:	4649      	mov	r1, r9
 801ec18:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ec1a:	f7ff ff2f 	bl	801ea7c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801ec1e:	4649      	mov	r1, r9
 801ec20:	4683      	mov	fp, r0
 801ec22:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ec24:	f7ff ff46 	bl	801eab4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801ec28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ec2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ec2c:	4681      	mov	r9, r0
 801ec2e:	1a9b      	subs	r3, r3, r2
 801ec30:	459a      	cmp	sl, r3
 801ec32:	bfa8      	it	ge
 801ec34:	469a      	movge	sl, r3
 801ec36:	f1ba 0f00 	cmp.w	sl, #0
 801ec3a:	f340 80f9 	ble.w	801ee30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801ec3e:	1bf6      	subs	r6, r6, r7
 801ec40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ec42:	1b9e      	subs	r6, r3, r6
 801ec44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec46:	429e      	cmp	r6, r3
 801ec48:	bfd4      	ite	le
 801ec4a:	ebc7 0706 	rsble	r7, r7, r6
 801ec4e:	ebc7 0703 	rsbgt	r7, r7, r3
 801ec52:	2f00      	cmp	r7, #0
 801ec54:	f340 80ec 	ble.w	801ee30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801ec58:	1bed      	subs	r5, r5, r7
 801ec5a:	fb08 f305 	mul.w	r3, r8, r5
 801ec5e:	930d      	str	r3, [sp, #52]	; 0x34
 801ec60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec62:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ec66:	930e      	str	r3, [sp, #56]	; 0x38
 801ec68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ec6e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ec70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec72:	b2db      	uxtb	r3, r3
 801ec74:	9310      	str	r3, [sp, #64]	; 0x40
 801ec76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	f040 80de 	bne.w	801ee3a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 801ec7e:	4b7d      	ldr	r3, [pc, #500]	; (801ee74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801ec80:	6818      	ldr	r0, [r3, #0]
 801ec82:	6803      	ldr	r3, [r0, #0]
 801ec84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ec86:	4798      	blx	r3
 801ec88:	2301      	movs	r3, #1
 801ec8a:	4a7b      	ldr	r2, [pc, #492]	; (801ee78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801ec8c:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801ec90:	fb07 9b1b 	mls	fp, r7, fp, r9
 801ec94:	fa03 f308 	lsl.w	r3, r3, r8
 801ec98:	8811      	ldrh	r1, [r2, #0]
 801ec9a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801ec9e:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801eca2:	3b01      	subs	r3, #1
 801eca4:	fb06 bb07 	mla	fp, r6, r7, fp
 801eca8:	b2db      	uxtb	r3, r3
 801ecaa:	930a      	str	r3, [sp, #40]	; 0x28
 801ecac:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801ecb0:	fb01 2303 	mla	r3, r1, r3, r2
 801ecb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ecb8:	18c3      	adds	r3, r0, r3
 801ecba:	9309      	str	r3, [sp, #36]	; 0x24
 801ecbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ecbe:	781a      	ldrb	r2, [r3, #0]
 801ecc0:	4122      	asrs	r2, r4
 801ecc2:	b2d2      	uxtb	r2, r2
 801ecc4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801ecc8:	f0c0 80d8 	bcc.w	801ee7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801eccc:	46be      	mov	lr, r7
 801ecce:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ecd0:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801ecd4:	f0c0 80ba 	bcc.w	801ee4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 801ecd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ecda:	4013      	ands	r3, r2
 801ecdc:	d041      	beq.n	801ed62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801ecde:	20ff      	movs	r0, #255	; 0xff
 801ece0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ece2:	fb90 f5f5 	sdiv	r5, r0, r5
 801ece6:	436b      	muls	r3, r5
 801ece8:	2bfe      	cmp	r3, #254	; 0xfe
 801ecea:	dd03      	ble.n	801ecf4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801ecec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ecee:	4285      	cmp	r5, r0
 801ecf0:	f000 80a5 	beq.w	801ee3e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801ecf4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ecf6:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ecf8:	fb15 f303 	smulbb	r3, r5, r3
 801ecfc:	b29b      	uxth	r3, r3
 801ecfe:	1c5d      	adds	r5, r3, #1
 801ed00:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801ed04:	780d      	ldrb	r5, [r1, #0]
 801ed06:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ed0a:	fa1f fc83 	uxth.w	ip, r3
 801ed0e:	43db      	mvns	r3, r3
 801ed10:	fb10 f90c 	smulbb	r9, r0, ip
 801ed14:	b2db      	uxtb	r3, r3
 801ed16:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ed18:	fb05 9503 	mla	r5, r5, r3, r9
 801ed1c:	b2ad      	uxth	r5, r5
 801ed1e:	f105 0901 	add.w	r9, r5, #1
 801ed22:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ed26:	fb10 f90c 	smulbb	r9, r0, ip
 801ed2a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ed2c:	122d      	asrs	r5, r5, #8
 801ed2e:	fb10 fc0c 	smulbb	ip, r0, ip
 801ed32:	700d      	strb	r5, [r1, #0]
 801ed34:	784d      	ldrb	r5, [r1, #1]
 801ed36:	fb05 9503 	mla	r5, r5, r3, r9
 801ed3a:	b2ad      	uxth	r5, r5
 801ed3c:	f105 0901 	add.w	r9, r5, #1
 801ed40:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ed44:	122d      	asrs	r5, r5, #8
 801ed46:	704d      	strb	r5, [r1, #1]
 801ed48:	788d      	ldrb	r5, [r1, #2]
 801ed4a:	fb05 cc03 	mla	ip, r5, r3, ip
 801ed4e:	fa1f fc8c 	uxth.w	ip, ip
 801ed52:	f10c 0301 	add.w	r3, ip, #1
 801ed56:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ed5a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ed5e:	f881 c002 	strb.w	ip, [r1, #2]
 801ed62:	4444      	add	r4, r8
 801ed64:	4431      	add	r1, r6
 801ed66:	b2a4      	uxth	r4, r4
 801ed68:	2c07      	cmp	r4, #7
 801ed6a:	bf89      	itett	hi
 801ed6c:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801ed6e:	fa42 f208 	asrls.w	r2, r2, r8
 801ed72:	2400      	movhi	r4, #0
 801ed74:	785a      	ldrbhi	r2, [r3, #1]
 801ed76:	bf8a      	itet	hi
 801ed78:	3301      	addhi	r3, #1
 801ed7a:	b2d2      	uxtbls	r2, r2
 801ed7c:	9326      	strhi	r3, [sp, #152]	; 0x98
 801ed7e:	e7a7      	b.n	801ecd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 801ed80:	441e      	add	r6, r3
 801ed82:	b236      	sxth	r6, r6
 801ed84:	e6ec      	b.n	801eb60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ed86:	f1b9 0f01 	cmp.w	r9, #1
 801ed8a:	f47f af27 	bne.w	801ebdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ed8e:	f1bb 0f01 	cmp.w	fp, #1
 801ed92:	f47f af23 	bne.w	801ebdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ed96:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 801ee74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 801ed9a:	f8db 0000 	ldr.w	r0, [fp]
 801ed9e:	6803      	ldr	r3, [r0, #0]
 801eda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eda2:	4798      	blx	r3
 801eda4:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801eda8:	465a      	mov	r2, fp
 801edaa:	d006      	beq.n	801edba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801edac:	f1b8 0f04 	cmp.w	r8, #4
 801edb0:	d141      	bne.n	801ee36 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 801edb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801edb4:	3300      	adds	r3, #0
 801edb6:	bf18      	it	ne
 801edb8:	2301      	movne	r3, #1
 801edba:	0580      	lsls	r0, r0, #22
 801edbc:	d567      	bpl.n	801ee8e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801edbe:	f1b8 0f08 	cmp.w	r8, #8
 801edc2:	d164      	bne.n	801ee8e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	bf0c      	ite	eq
 801edc8:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801edcc:	f44f 7180 	movne.w	r1, #256	; 0x100
 801edd0:	2f00      	cmp	r7, #0
 801edd2:	f47f af03 	bne.w	801ebdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801edd6:	2c00      	cmp	r4, #0
 801edd8:	f47f af00 	bne.w	801ebdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801edde:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ede0:	18f3      	adds	r3, r6, r3
 801ede2:	4283      	cmp	r3, r0
 801ede4:	f73f aefa 	bgt.w	801ebdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ede8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801edea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801edec:	4403      	add	r3, r0
 801edee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801edf0:	4283      	cmp	r3, r0
 801edf2:	f73f aef3 	bgt.w	801ebdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801edf6:	f1b8 0f08 	cmp.w	r8, #8
 801edfa:	6810      	ldr	r0, [r2, #0]
 801edfc:	f04f 0600 	mov.w	r6, #0
 801ee00:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801ee04:	bf18      	it	ne
 801ee06:	3501      	addne	r5, #1
 801ee08:	6804      	ldr	r4, [r0, #0]
 801ee0a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801ee0e:	bf18      	it	ne
 801ee10:	f025 0501 	bicne.w	r5, r5, #1
 801ee14:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801ee18:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ee1a:	bf18      	it	ne
 801ee1c:	b2ad      	uxthne	r5, r5
 801ee1e:	9104      	str	r1, [sp, #16]
 801ee20:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ee22:	e9cd 5a00 	strd	r5, sl, [sp]
 801ee26:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801ee2a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801ee2c:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801ee2e:	47a0      	blx	r4
 801ee30:	b017      	add	sp, #92	; 0x5c
 801ee32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee36:	2300      	movs	r3, #0
 801ee38:	e7bf      	b.n	801edba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801ee3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ee3c:	e724      	b.n	801ec88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 801ee3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee40:	700b      	strb	r3, [r1, #0]
 801ee42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ee44:	704b      	strb	r3, [r1, #1]
 801ee46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee48:	708b      	strb	r3, [r1, #2]
 801ee4a:	e78a      	b.n	801ed62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 801ee4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee4e:	b153      	cbz	r3, 801ee66 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801ee50:	441c      	add	r4, r3
 801ee52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ee54:	b2a4      	uxth	r4, r4
 801ee56:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801ee5a:	f004 0407 	and.w	r4, r4, #7
 801ee5e:	781a      	ldrb	r2, [r3, #0]
 801ee60:	9326      	str	r3, [sp, #152]	; 0x98
 801ee62:	4122      	asrs	r2, r4
 801ee64:	b2d2      	uxtb	r2, r2
 801ee66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee68:	445b      	add	r3, fp
 801ee6a:	9309      	str	r3, [sp, #36]	; 0x24
 801ee6c:	e72a      	b.n	801ecc4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 801ee6e:	bf00      	nop
 801ee70:	2400c89c 	.word	0x2400c89c
 801ee74:	2400c8a4 	.word	0x2400c8a4
 801ee78:	2400c89e 	.word	0x2400c89e
 801ee7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	d1d6      	bne.n	801ee30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801ee82:	4b06      	ldr	r3, [pc, #24]	; (801ee9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 801ee84:	6818      	ldr	r0, [r3, #0]
 801ee86:	6803      	ldr	r3, [r0, #0]
 801ee88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ee8a:	4798      	blx	r3
 801ee8c:	e7d0      	b.n	801ee30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	f43f aea4 	beq.w	801ebdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ee94:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ee98:	e79a      	b.n	801edd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 801ee9a:	bf00      	nop
 801ee9c:	2400c8a4 	.word	0x2400c8a4

0801eea0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801eea0:	b538      	push	{r3, r4, r5, lr}
 801eea2:	4c15      	ldr	r4, [pc, #84]	; (801eef8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801eea4:	4605      	mov	r5, r0
 801eea6:	7823      	ldrb	r3, [r4, #0]
 801eea8:	f3bf 8f5b 	dmb	ish
 801eeac:	07da      	lsls	r2, r3, #31
 801eeae:	d40b      	bmi.n	801eec8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801eeb0:	4620      	mov	r0, r4
 801eeb2:	f006 fe34 	bl	8025b1e <__cxa_guard_acquire>
 801eeb6:	b138      	cbz	r0, 801eec8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801eeb8:	4620      	mov	r0, r4
 801eeba:	f006 fe3c 	bl	8025b36 <__cxa_guard_release>
 801eebe:	4a0f      	ldr	r2, [pc, #60]	; (801eefc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801eec0:	490f      	ldr	r1, [pc, #60]	; (801ef00 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801eec2:	4810      	ldr	r0, [pc, #64]	; (801ef04 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801eec4:	f006 fe24 	bl	8025b10 <__aeabi_atexit>
 801eec8:	4c0f      	ldr	r4, [pc, #60]	; (801ef08 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801eeca:	7823      	ldrb	r3, [r4, #0]
 801eecc:	f3bf 8f5b 	dmb	ish
 801eed0:	07db      	lsls	r3, r3, #31
 801eed2:	d40b      	bmi.n	801eeec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801eed4:	4620      	mov	r0, r4
 801eed6:	f006 fe22 	bl	8025b1e <__cxa_guard_acquire>
 801eeda:	b138      	cbz	r0, 801eeec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801eedc:	4620      	mov	r0, r4
 801eede:	f006 fe2a 	bl	8025b36 <__cxa_guard_release>
 801eee2:	4a06      	ldr	r2, [pc, #24]	; (801eefc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801eee4:	4909      	ldr	r1, [pc, #36]	; (801ef0c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801eee6:	480a      	ldr	r0, [pc, #40]	; (801ef10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801eee8:	f006 fe12 	bl	8025b10 <__aeabi_atexit>
 801eeec:	4b05      	ldr	r3, [pc, #20]	; (801ef04 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801eeee:	612b      	str	r3, [r5, #16]
 801eef0:	4b07      	ldr	r3, [pc, #28]	; (801ef10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801eef2:	616b      	str	r3, [r5, #20]
 801eef4:	bd38      	pop	{r3, r4, r5, pc}
 801eef6:	bf00      	nop
 801eef8:	2400c990 	.word	0x2400c990
 801eefc:	24000000 	.word	0x24000000
 801ef00:	0801d92b 	.word	0x0801d92b
 801ef04:	24000094 	.word	0x24000094
 801ef08:	2400c994 	.word	0x2400c994
 801ef0c:	0801d929 	.word	0x0801d929
 801ef10:	24000098 	.word	0x24000098

0801ef14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801ef14:	b538      	push	{r3, r4, r5, lr}
 801ef16:	4c15      	ldr	r4, [pc, #84]	; (801ef6c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801ef18:	4605      	mov	r5, r0
 801ef1a:	7823      	ldrb	r3, [r4, #0]
 801ef1c:	f3bf 8f5b 	dmb	ish
 801ef20:	07da      	lsls	r2, r3, #31
 801ef22:	d40b      	bmi.n	801ef3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ef24:	4620      	mov	r0, r4
 801ef26:	f006 fdfa 	bl	8025b1e <__cxa_guard_acquire>
 801ef2a:	b138      	cbz	r0, 801ef3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ef2c:	4620      	mov	r0, r4
 801ef2e:	f006 fe02 	bl	8025b36 <__cxa_guard_release>
 801ef32:	4a0f      	ldr	r2, [pc, #60]	; (801ef70 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ef34:	490f      	ldr	r1, [pc, #60]	; (801ef74 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801ef36:	4810      	ldr	r0, [pc, #64]	; (801ef78 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ef38:	f006 fdea 	bl	8025b10 <__aeabi_atexit>
 801ef3c:	4c0f      	ldr	r4, [pc, #60]	; (801ef7c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801ef3e:	7823      	ldrb	r3, [r4, #0]
 801ef40:	f3bf 8f5b 	dmb	ish
 801ef44:	07db      	lsls	r3, r3, #31
 801ef46:	d40b      	bmi.n	801ef60 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ef48:	4620      	mov	r0, r4
 801ef4a:	f006 fde8 	bl	8025b1e <__cxa_guard_acquire>
 801ef4e:	b138      	cbz	r0, 801ef60 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ef50:	4620      	mov	r0, r4
 801ef52:	f006 fdf0 	bl	8025b36 <__cxa_guard_release>
 801ef56:	4a06      	ldr	r2, [pc, #24]	; (801ef70 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ef58:	4909      	ldr	r1, [pc, #36]	; (801ef80 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801ef5a:	480a      	ldr	r0, [pc, #40]	; (801ef84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ef5c:	f006 fdd8 	bl	8025b10 <__aeabi_atexit>
 801ef60:	4b05      	ldr	r3, [pc, #20]	; (801ef78 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ef62:	60ab      	str	r3, [r5, #8]
 801ef64:	4b07      	ldr	r3, [pc, #28]	; (801ef84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ef66:	60eb      	str	r3, [r5, #12]
 801ef68:	bd38      	pop	{r3, r4, r5, pc}
 801ef6a:	bf00      	nop
 801ef6c:	2400c970 	.word	0x2400c970
 801ef70:	24000000 	.word	0x24000000
 801ef74:	0801d92f 	.word	0x0801d92f
 801ef78:	24000074 	.word	0x24000074
 801ef7c:	2400c974 	.word	0x2400c974
 801ef80:	0801d92d 	.word	0x0801d92d
 801ef84:	24000078 	.word	0x24000078

0801ef88 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801ef88:	b510      	push	{r4, lr}
 801ef8a:	4604      	mov	r4, r0
 801ef8c:	f7ff ff88 	bl	801eea0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801ef90:	4620      	mov	r0, r4
 801ef92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef96:	f7ff bfbd 	b.w	801ef14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801ef9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801ef9c:	b538      	push	{r3, r4, r5, lr}
 801ef9e:	4c15      	ldr	r4, [pc, #84]	; (801eff4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801efa0:	4605      	mov	r5, r0
 801efa2:	7823      	ldrb	r3, [r4, #0]
 801efa4:	f3bf 8f5b 	dmb	ish
 801efa8:	07da      	lsls	r2, r3, #31
 801efaa:	d40b      	bmi.n	801efc4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801efac:	4620      	mov	r0, r4
 801efae:	f006 fdb6 	bl	8025b1e <__cxa_guard_acquire>
 801efb2:	b138      	cbz	r0, 801efc4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801efb4:	4620      	mov	r0, r4
 801efb6:	f006 fdbe 	bl	8025b36 <__cxa_guard_release>
 801efba:	4a0f      	ldr	r2, [pc, #60]	; (801eff8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801efbc:	490f      	ldr	r1, [pc, #60]	; (801effc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801efbe:	4810      	ldr	r0, [pc, #64]	; (801f000 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801efc0:	f006 fda6 	bl	8025b10 <__aeabi_atexit>
 801efc4:	4c0f      	ldr	r4, [pc, #60]	; (801f004 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801efc6:	7823      	ldrb	r3, [r4, #0]
 801efc8:	f3bf 8f5b 	dmb	ish
 801efcc:	07db      	lsls	r3, r3, #31
 801efce:	d40b      	bmi.n	801efe8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801efd0:	4620      	mov	r0, r4
 801efd2:	f006 fda4 	bl	8025b1e <__cxa_guard_acquire>
 801efd6:	b138      	cbz	r0, 801efe8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801efd8:	4620      	mov	r0, r4
 801efda:	f006 fdac 	bl	8025b36 <__cxa_guard_release>
 801efde:	4a06      	ldr	r2, [pc, #24]	; (801eff8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801efe0:	4909      	ldr	r1, [pc, #36]	; (801f008 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801efe2:	480a      	ldr	r0, [pc, #40]	; (801f00c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801efe4:	f006 fd94 	bl	8025b10 <__aeabi_atexit>
 801efe8:	4b05      	ldr	r3, [pc, #20]	; (801f000 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801efea:	622b      	str	r3, [r5, #32]
 801efec:	4b07      	ldr	r3, [pc, #28]	; (801f00c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801efee:	626b      	str	r3, [r5, #36]	; 0x24
 801eff0:	bd38      	pop	{r3, r4, r5, pc}
 801eff2:	bf00      	nop
 801eff4:	2400c998 	.word	0x2400c998
 801eff8:	24000000 	.word	0x24000000
 801effc:	0801d923 	.word	0x0801d923
 801f000:	2400009c 	.word	0x2400009c
 801f004:	2400c99c 	.word	0x2400c99c
 801f008:	0801d921 	.word	0x0801d921
 801f00c:	240000a0 	.word	0x240000a0

0801f010 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801f010:	b538      	push	{r3, r4, r5, lr}
 801f012:	4c15      	ldr	r4, [pc, #84]	; (801f068 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f014:	4605      	mov	r5, r0
 801f016:	7823      	ldrb	r3, [r4, #0]
 801f018:	f3bf 8f5b 	dmb	ish
 801f01c:	07da      	lsls	r2, r3, #31
 801f01e:	d40b      	bmi.n	801f038 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f020:	4620      	mov	r0, r4
 801f022:	f006 fd7c 	bl	8025b1e <__cxa_guard_acquire>
 801f026:	b138      	cbz	r0, 801f038 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f028:	4620      	mov	r0, r4
 801f02a:	f006 fd84 	bl	8025b36 <__cxa_guard_release>
 801f02e:	4a0f      	ldr	r2, [pc, #60]	; (801f06c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f030:	490f      	ldr	r1, [pc, #60]	; (801f070 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f032:	4810      	ldr	r0, [pc, #64]	; (801f074 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f034:	f006 fd6c 	bl	8025b10 <__aeabi_atexit>
 801f038:	4c0f      	ldr	r4, [pc, #60]	; (801f078 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801f03a:	7823      	ldrb	r3, [r4, #0]
 801f03c:	f3bf 8f5b 	dmb	ish
 801f040:	07db      	lsls	r3, r3, #31
 801f042:	d40b      	bmi.n	801f05c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f044:	4620      	mov	r0, r4
 801f046:	f006 fd6a 	bl	8025b1e <__cxa_guard_acquire>
 801f04a:	b138      	cbz	r0, 801f05c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f04c:	4620      	mov	r0, r4
 801f04e:	f006 fd72 	bl	8025b36 <__cxa_guard_release>
 801f052:	4a06      	ldr	r2, [pc, #24]	; (801f06c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f054:	4909      	ldr	r1, [pc, #36]	; (801f07c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f056:	480a      	ldr	r0, [pc, #40]	; (801f080 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f058:	f006 fd5a 	bl	8025b10 <__aeabi_atexit>
 801f05c:	4b05      	ldr	r3, [pc, #20]	; (801f074 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f05e:	61ab      	str	r3, [r5, #24]
 801f060:	4b07      	ldr	r3, [pc, #28]	; (801f080 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f062:	61eb      	str	r3, [r5, #28]
 801f064:	bd38      	pop	{r3, r4, r5, pc}
 801f066:	bf00      	nop
 801f068:	2400c978 	.word	0x2400c978
 801f06c:	24000000 	.word	0x24000000
 801f070:	0801d927 	.word	0x0801d927
 801f074:	2400007c 	.word	0x2400007c
 801f078:	2400c97c 	.word	0x2400c97c
 801f07c:	0801d925 	.word	0x0801d925
 801f080:	24000080 	.word	0x24000080

0801f084 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801f084:	b510      	push	{r4, lr}
 801f086:	4604      	mov	r4, r0
 801f088:	f7ff ff88 	bl	801ef9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801f08c:	4620      	mov	r0, r4
 801f08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f092:	f7ff bfbd 	b.w	801f010 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801f098 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801f098:	b538      	push	{r3, r4, r5, lr}
 801f09a:	4c15      	ldr	r4, [pc, #84]	; (801f0f0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801f09c:	4605      	mov	r5, r0
 801f09e:	7823      	ldrb	r3, [r4, #0]
 801f0a0:	f3bf 8f5b 	dmb	ish
 801f0a4:	07da      	lsls	r2, r3, #31
 801f0a6:	d40b      	bmi.n	801f0c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f0a8:	4620      	mov	r0, r4
 801f0aa:	f006 fd38 	bl	8025b1e <__cxa_guard_acquire>
 801f0ae:	b138      	cbz	r0, 801f0c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f0b0:	4620      	mov	r0, r4
 801f0b2:	f006 fd40 	bl	8025b36 <__cxa_guard_release>
 801f0b6:	4a0f      	ldr	r2, [pc, #60]	; (801f0f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f0b8:	490f      	ldr	r1, [pc, #60]	; (801f0f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801f0ba:	4810      	ldr	r0, [pc, #64]	; (801f0fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f0bc:	f006 fd28 	bl	8025b10 <__aeabi_atexit>
 801f0c0:	4c0f      	ldr	r4, [pc, #60]	; (801f100 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801f0c2:	7823      	ldrb	r3, [r4, #0]
 801f0c4:	f3bf 8f5b 	dmb	ish
 801f0c8:	07db      	lsls	r3, r3, #31
 801f0ca:	d40b      	bmi.n	801f0e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f0cc:	4620      	mov	r0, r4
 801f0ce:	f006 fd26 	bl	8025b1e <__cxa_guard_acquire>
 801f0d2:	b138      	cbz	r0, 801f0e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f0d4:	4620      	mov	r0, r4
 801f0d6:	f006 fd2e 	bl	8025b36 <__cxa_guard_release>
 801f0da:	4a06      	ldr	r2, [pc, #24]	; (801f0f4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f0dc:	4909      	ldr	r1, [pc, #36]	; (801f104 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801f0de:	480a      	ldr	r0, [pc, #40]	; (801f108 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f0e0:	f006 fd16 	bl	8025b10 <__aeabi_atexit>
 801f0e4:	4b05      	ldr	r3, [pc, #20]	; (801f0fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f0e6:	632b      	str	r3, [r5, #48]	; 0x30
 801f0e8:	4b07      	ldr	r3, [pc, #28]	; (801f108 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f0ea:	636b      	str	r3, [r5, #52]	; 0x34
 801f0ec:	bd38      	pop	{r3, r4, r5, pc}
 801f0ee:	bf00      	nop
 801f0f0:	2400c980 	.word	0x2400c980
 801f0f4:	24000000 	.word	0x24000000
 801f0f8:	0801d91b 	.word	0x0801d91b
 801f0fc:	24000084 	.word	0x24000084
 801f100:	2400c984 	.word	0x2400c984
 801f104:	0801d919 	.word	0x0801d919
 801f108:	24000088 	.word	0x24000088

0801f10c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801f10c:	b538      	push	{r3, r4, r5, lr}
 801f10e:	4c15      	ldr	r4, [pc, #84]	; (801f164 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801f110:	4605      	mov	r5, r0
 801f112:	7823      	ldrb	r3, [r4, #0]
 801f114:	f3bf 8f5b 	dmb	ish
 801f118:	07da      	lsls	r2, r3, #31
 801f11a:	d40b      	bmi.n	801f134 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f11c:	4620      	mov	r0, r4
 801f11e:	f006 fcfe 	bl	8025b1e <__cxa_guard_acquire>
 801f122:	b138      	cbz	r0, 801f134 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f124:	4620      	mov	r0, r4
 801f126:	f006 fd06 	bl	8025b36 <__cxa_guard_release>
 801f12a:	4a0f      	ldr	r2, [pc, #60]	; (801f168 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f12c:	490f      	ldr	r1, [pc, #60]	; (801f16c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801f12e:	4810      	ldr	r0, [pc, #64]	; (801f170 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f130:	f006 fcee 	bl	8025b10 <__aeabi_atexit>
 801f134:	4c0f      	ldr	r4, [pc, #60]	; (801f174 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801f136:	7823      	ldrb	r3, [r4, #0]
 801f138:	f3bf 8f5b 	dmb	ish
 801f13c:	07db      	lsls	r3, r3, #31
 801f13e:	d40b      	bmi.n	801f158 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f140:	4620      	mov	r0, r4
 801f142:	f006 fcec 	bl	8025b1e <__cxa_guard_acquire>
 801f146:	b138      	cbz	r0, 801f158 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f148:	4620      	mov	r0, r4
 801f14a:	f006 fcf4 	bl	8025b36 <__cxa_guard_release>
 801f14e:	4a06      	ldr	r2, [pc, #24]	; (801f168 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f150:	4909      	ldr	r1, [pc, #36]	; (801f178 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801f152:	480a      	ldr	r0, [pc, #40]	; (801f17c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f154:	f006 fcdc 	bl	8025b10 <__aeabi_atexit>
 801f158:	4b05      	ldr	r3, [pc, #20]	; (801f170 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f15a:	62ab      	str	r3, [r5, #40]	; 0x28
 801f15c:	4b07      	ldr	r3, [pc, #28]	; (801f17c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f15e:	62eb      	str	r3, [r5, #44]	; 0x2c
 801f160:	bd38      	pop	{r3, r4, r5, pc}
 801f162:	bf00      	nop
 801f164:	2400c958 	.word	0x2400c958
 801f168:	24000000 	.word	0x24000000
 801f16c:	0801d91f 	.word	0x0801d91f
 801f170:	2400005c 	.word	0x2400005c
 801f174:	2400c95c 	.word	0x2400c95c
 801f178:	0801d91d 	.word	0x0801d91d
 801f17c:	24000060 	.word	0x24000060

0801f180 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801f180:	b510      	push	{r4, lr}
 801f182:	4604      	mov	r4, r0
 801f184:	f7ff ff88 	bl	801f098 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801f188:	4620      	mov	r0, r4
 801f18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f18e:	f7ff bfbd 	b.w	801f10c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801f194 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801f194:	b538      	push	{r3, r4, r5, lr}
 801f196:	4c15      	ldr	r4, [pc, #84]	; (801f1ec <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f198:	4605      	mov	r5, r0
 801f19a:	7823      	ldrb	r3, [r4, #0]
 801f19c:	f3bf 8f5b 	dmb	ish
 801f1a0:	07da      	lsls	r2, r3, #31
 801f1a2:	d40b      	bmi.n	801f1bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f1a4:	4620      	mov	r0, r4
 801f1a6:	f006 fcba 	bl	8025b1e <__cxa_guard_acquire>
 801f1aa:	b138      	cbz	r0, 801f1bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f1ac:	4620      	mov	r0, r4
 801f1ae:	f006 fcc2 	bl	8025b36 <__cxa_guard_release>
 801f1b2:	4a0f      	ldr	r2, [pc, #60]	; (801f1f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f1b4:	490f      	ldr	r1, [pc, #60]	; (801f1f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f1b6:	4810      	ldr	r0, [pc, #64]	; (801f1f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f1b8:	f006 fcaa 	bl	8025b10 <__aeabi_atexit>
 801f1bc:	4c0f      	ldr	r4, [pc, #60]	; (801f1fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f1be:	7823      	ldrb	r3, [r4, #0]
 801f1c0:	f3bf 8f5b 	dmb	ish
 801f1c4:	07db      	lsls	r3, r3, #31
 801f1c6:	d40b      	bmi.n	801f1e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f1c8:	4620      	mov	r0, r4
 801f1ca:	f006 fca8 	bl	8025b1e <__cxa_guard_acquire>
 801f1ce:	b138      	cbz	r0, 801f1e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f1d0:	4620      	mov	r0, r4
 801f1d2:	f006 fcb0 	bl	8025b36 <__cxa_guard_release>
 801f1d6:	4a06      	ldr	r2, [pc, #24]	; (801f1f0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f1d8:	4909      	ldr	r1, [pc, #36]	; (801f200 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f1da:	480a      	ldr	r0, [pc, #40]	; (801f204 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f1dc:	f006 fc98 	bl	8025b10 <__aeabi_atexit>
 801f1e0:	4b05      	ldr	r3, [pc, #20]	; (801f1f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f1e2:	642b      	str	r3, [r5, #64]	; 0x40
 801f1e4:	4b07      	ldr	r3, [pc, #28]	; (801f204 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f1e6:	646b      	str	r3, [r5, #68]	; 0x44
 801f1e8:	bd38      	pop	{r3, r4, r5, pc}
 801f1ea:	bf00      	nop
 801f1ec:	2400c988 	.word	0x2400c988
 801f1f0:	24000000 	.word	0x24000000
 801f1f4:	0801d913 	.word	0x0801d913
 801f1f8:	2400008c 	.word	0x2400008c
 801f1fc:	2400c98c 	.word	0x2400c98c
 801f200:	0801d911 	.word	0x0801d911
 801f204:	24000090 	.word	0x24000090

0801f208 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f208:	b538      	push	{r3, r4, r5, lr}
 801f20a:	4c15      	ldr	r4, [pc, #84]	; (801f260 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f20c:	4605      	mov	r5, r0
 801f20e:	7823      	ldrb	r3, [r4, #0]
 801f210:	f3bf 8f5b 	dmb	ish
 801f214:	07da      	lsls	r2, r3, #31
 801f216:	d40b      	bmi.n	801f230 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f218:	4620      	mov	r0, r4
 801f21a:	f006 fc80 	bl	8025b1e <__cxa_guard_acquire>
 801f21e:	b138      	cbz	r0, 801f230 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f220:	4620      	mov	r0, r4
 801f222:	f006 fc88 	bl	8025b36 <__cxa_guard_release>
 801f226:	4a0f      	ldr	r2, [pc, #60]	; (801f264 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f228:	490f      	ldr	r1, [pc, #60]	; (801f268 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f22a:	4810      	ldr	r0, [pc, #64]	; (801f26c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f22c:	f006 fc70 	bl	8025b10 <__aeabi_atexit>
 801f230:	4c0f      	ldr	r4, [pc, #60]	; (801f270 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f232:	7823      	ldrb	r3, [r4, #0]
 801f234:	f3bf 8f5b 	dmb	ish
 801f238:	07db      	lsls	r3, r3, #31
 801f23a:	d40b      	bmi.n	801f254 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f23c:	4620      	mov	r0, r4
 801f23e:	f006 fc6e 	bl	8025b1e <__cxa_guard_acquire>
 801f242:	b138      	cbz	r0, 801f254 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f244:	4620      	mov	r0, r4
 801f246:	f006 fc76 	bl	8025b36 <__cxa_guard_release>
 801f24a:	4a06      	ldr	r2, [pc, #24]	; (801f264 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f24c:	4909      	ldr	r1, [pc, #36]	; (801f274 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f24e:	480a      	ldr	r0, [pc, #40]	; (801f278 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f250:	f006 fc5e 	bl	8025b10 <__aeabi_atexit>
 801f254:	4b05      	ldr	r3, [pc, #20]	; (801f26c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f256:	63ab      	str	r3, [r5, #56]	; 0x38
 801f258:	4b07      	ldr	r3, [pc, #28]	; (801f278 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f25a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f25c:	bd38      	pop	{r3, r4, r5, pc}
 801f25e:	bf00      	nop
 801f260:	2400c968 	.word	0x2400c968
 801f264:	24000000 	.word	0x24000000
 801f268:	0801d917 	.word	0x0801d917
 801f26c:	2400006c 	.word	0x2400006c
 801f270:	2400c96c 	.word	0x2400c96c
 801f274:	0801d915 	.word	0x0801d915
 801f278:	24000070 	.word	0x24000070

0801f27c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801f27c:	b510      	push	{r4, lr}
 801f27e:	4604      	mov	r4, r0
 801f280:	f7ff ff88 	bl	801f194 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f284:	4620      	mov	r0, r4
 801f286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f28a:	f7ff bfbd 	b.w	801f208 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f290 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f290:	b538      	push	{r3, r4, r5, lr}
 801f292:	4c15      	ldr	r4, [pc, #84]	; (801f2e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f294:	4605      	mov	r5, r0
 801f296:	7823      	ldrb	r3, [r4, #0]
 801f298:	f3bf 8f5b 	dmb	ish
 801f29c:	07da      	lsls	r2, r3, #31
 801f29e:	d40b      	bmi.n	801f2b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f2a0:	4620      	mov	r0, r4
 801f2a2:	f006 fc3c 	bl	8025b1e <__cxa_guard_acquire>
 801f2a6:	b138      	cbz	r0, 801f2b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f2a8:	4620      	mov	r0, r4
 801f2aa:	f006 fc44 	bl	8025b36 <__cxa_guard_release>
 801f2ae:	4a0f      	ldr	r2, [pc, #60]	; (801f2ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f2b0:	490f      	ldr	r1, [pc, #60]	; (801f2f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f2b2:	4810      	ldr	r0, [pc, #64]	; (801f2f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f2b4:	f006 fc2c 	bl	8025b10 <__aeabi_atexit>
 801f2b8:	4c0f      	ldr	r4, [pc, #60]	; (801f2f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f2ba:	7823      	ldrb	r3, [r4, #0]
 801f2bc:	f3bf 8f5b 	dmb	ish
 801f2c0:	07db      	lsls	r3, r3, #31
 801f2c2:	d40b      	bmi.n	801f2dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f2c4:	4620      	mov	r0, r4
 801f2c6:	f006 fc2a 	bl	8025b1e <__cxa_guard_acquire>
 801f2ca:	b138      	cbz	r0, 801f2dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f2cc:	4620      	mov	r0, r4
 801f2ce:	f006 fc32 	bl	8025b36 <__cxa_guard_release>
 801f2d2:	4a06      	ldr	r2, [pc, #24]	; (801f2ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f2d4:	4909      	ldr	r1, [pc, #36]	; (801f2fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f2d6:	480a      	ldr	r0, [pc, #40]	; (801f300 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f2d8:	f006 fc1a 	bl	8025b10 <__aeabi_atexit>
 801f2dc:	4b05      	ldr	r3, [pc, #20]	; (801f2f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f2de:	652b      	str	r3, [r5, #80]	; 0x50
 801f2e0:	4b07      	ldr	r3, [pc, #28]	; (801f300 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f2e2:	656b      	str	r3, [r5, #84]	; 0x54
 801f2e4:	bd38      	pop	{r3, r4, r5, pc}
 801f2e6:	bf00      	nop
 801f2e8:	2400c960 	.word	0x2400c960
 801f2ec:	24000000 	.word	0x24000000
 801f2f0:	0801d90b 	.word	0x0801d90b
 801f2f4:	24000064 	.word	0x24000064
 801f2f8:	2400c964 	.word	0x2400c964
 801f2fc:	0801d909 	.word	0x0801d909
 801f300:	24000068 	.word	0x24000068

0801f304 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f304:	b538      	push	{r3, r4, r5, lr}
 801f306:	4c15      	ldr	r4, [pc, #84]	; (801f35c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f308:	4605      	mov	r5, r0
 801f30a:	7823      	ldrb	r3, [r4, #0]
 801f30c:	f3bf 8f5b 	dmb	ish
 801f310:	07da      	lsls	r2, r3, #31
 801f312:	d40b      	bmi.n	801f32c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f314:	4620      	mov	r0, r4
 801f316:	f006 fc02 	bl	8025b1e <__cxa_guard_acquire>
 801f31a:	b138      	cbz	r0, 801f32c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f31c:	4620      	mov	r0, r4
 801f31e:	f006 fc0a 	bl	8025b36 <__cxa_guard_release>
 801f322:	4a0f      	ldr	r2, [pc, #60]	; (801f360 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f324:	490f      	ldr	r1, [pc, #60]	; (801f364 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f326:	4810      	ldr	r0, [pc, #64]	; (801f368 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f328:	f006 fbf2 	bl	8025b10 <__aeabi_atexit>
 801f32c:	4c0f      	ldr	r4, [pc, #60]	; (801f36c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f32e:	7823      	ldrb	r3, [r4, #0]
 801f330:	f3bf 8f5b 	dmb	ish
 801f334:	07db      	lsls	r3, r3, #31
 801f336:	d40b      	bmi.n	801f350 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f338:	4620      	mov	r0, r4
 801f33a:	f006 fbf0 	bl	8025b1e <__cxa_guard_acquire>
 801f33e:	b138      	cbz	r0, 801f350 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f340:	4620      	mov	r0, r4
 801f342:	f006 fbf8 	bl	8025b36 <__cxa_guard_release>
 801f346:	4a06      	ldr	r2, [pc, #24]	; (801f360 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f348:	4909      	ldr	r1, [pc, #36]	; (801f370 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f34a:	480a      	ldr	r0, [pc, #40]	; (801f374 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f34c:	f006 fbe0 	bl	8025b10 <__aeabi_atexit>
 801f350:	4b05      	ldr	r3, [pc, #20]	; (801f368 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f352:	64ab      	str	r3, [r5, #72]	; 0x48
 801f354:	4b07      	ldr	r3, [pc, #28]	; (801f374 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f356:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f358:	bd38      	pop	{r3, r4, r5, pc}
 801f35a:	bf00      	nop
 801f35c:	2400c950 	.word	0x2400c950
 801f360:	24000000 	.word	0x24000000
 801f364:	0801d90f 	.word	0x0801d90f
 801f368:	24000054 	.word	0x24000054
 801f36c:	2400c954 	.word	0x2400c954
 801f370:	0801d90d 	.word	0x0801d90d
 801f374:	24000058 	.word	0x24000058

0801f378 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801f378:	b510      	push	{r4, lr}
 801f37a:	4604      	mov	r4, r0
 801f37c:	f7ff ff88 	bl	801f290 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f380:	4620      	mov	r0, r4
 801f382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f386:	f7ff bfbd 	b.w	801f304 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801f38a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801f38a:	b510      	push	{r4, lr}
 801f38c:	4604      	mov	r4, r0
 801f38e:	f7ff fff3 	bl	801f378 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801f392:	4620      	mov	r0, r4
 801f394:	f7ff ff72 	bl	801f27c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801f398:	4620      	mov	r0, r4
 801f39a:	f7ff fe73 	bl	801f084 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801f39e:	4620      	mov	r0, r4
 801f3a0:	f7ff fdf2 	bl	801ef88 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801f3a4:	4620      	mov	r0, r4
 801f3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f3aa:	f7ff bee9 	b.w	801f180 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801f3b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801f3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3b4:	b087      	sub	sp, #28
 801f3b6:	7888      	ldrb	r0, [r1, #2]
 801f3b8:	4616      	mov	r6, r2
 801f3ba:	9001      	str	r0, [sp, #4]
 801f3bc:	7848      	ldrb	r0, [r1, #1]
 801f3be:	9100      	str	r1, [sp, #0]
 801f3c0:	9002      	str	r0, [sp, #8]
 801f3c2:	7808      	ldrb	r0, [r1, #0]
 801f3c4:	9901      	ldr	r1, [sp, #4]
 801f3c6:	9003      	str	r0, [sp, #12]
 801f3c8:	9802      	ldr	r0, [sp, #8]
 801f3ca:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801f3ce:	0200      	lsls	r0, r0, #8
 801f3d0:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801f3d4:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801f3d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801f3dc:	9903      	ldr	r1, [sp, #12]
 801f3de:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f3e2:	4308      	orrs	r0, r1
 801f3e4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801f3e8:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801f3ec:	9005      	str	r0, [sp, #20]
 801f3ee:	fb05 ca0e 	mla	sl, r5, lr, ip
 801f3f2:	2d00      	cmp	r5, #0
 801f3f4:	eb06 080a 	add.w	r8, r6, sl
 801f3f8:	db4a      	blt.n	801f490 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801f3fa:	45a9      	cmp	r9, r5
 801f3fc:	dd48      	ble.n	801f490 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 801f3fe:	f1bc 0f00 	cmp.w	ip, #0
 801f402:	db43      	blt.n	801f48c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801f404:	45e6      	cmp	lr, ip
 801f406:	dd41      	ble.n	801f48c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 801f408:	f816 600a 	ldrb.w	r6, [r6, sl]
 801f40c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f410:	441e      	add	r6, r3
 801f412:	f11c 0001 	adds.w	r0, ip, #1
 801f416:	d43e      	bmi.n	801f496 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801f418:	4586      	cmp	lr, r0
 801f41a:	dd3c      	ble.n	801f496 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801f41c:	2a00      	cmp	r2, #0
 801f41e:	d03a      	beq.n	801f496 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 801f420:	f898 0001 	ldrb.w	r0, [r8, #1]
 801f424:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f428:	4418      	add	r0, r3
 801f42a:	3501      	adds	r5, #1
 801f42c:	d437      	bmi.n	801f49e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801f42e:	45a9      	cmp	r9, r5
 801f430:	dd35      	ble.n	801f49e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801f432:	b3a4      	cbz	r4, 801f49e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 801f434:	f1bc 0f00 	cmp.w	ip, #0
 801f438:	db2f      	blt.n	801f49a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801f43a:	45e6      	cmp	lr, ip
 801f43c:	dd2d      	ble.n	801f49a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 801f43e:	f818 500e 	ldrb.w	r5, [r8, lr]
 801f442:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f446:	441d      	add	r5, r3
 801f448:	f11c 0c01 	adds.w	ip, ip, #1
 801f44c:	d42a      	bmi.n	801f4a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801f44e:	45e6      	cmp	lr, ip
 801f450:	dd28      	ble.n	801f4a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801f452:	b33a      	cbz	r2, 801f4a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 801f454:	44c6      	add	lr, r8
 801f456:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f45a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f45e:	4463      	add	r3, ip
 801f460:	ea6f 0c07 	mvn.w	ip, r7
 801f464:	2a0f      	cmp	r2, #15
 801f466:	f896 a000 	ldrb.w	sl, [r6]
 801f46a:	fa5f fc8c 	uxtb.w	ip, ip
 801f46e:	f890 b000 	ldrb.w	fp, [r0]
 801f472:	f895 9000 	ldrb.w	r9, [r5]
 801f476:	7819      	ldrb	r1, [r3, #0]
 801f478:	d801      	bhi.n	801f47e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 801f47a:	2c0f      	cmp	r4, #15
 801f47c:	d914      	bls.n	801f4a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 801f47e:	4b40      	ldr	r3, [pc, #256]	; (801f580 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 801f480:	f240 1157 	movw	r1, #343	; 0x157
 801f484:	4a3f      	ldr	r2, [pc, #252]	; (801f584 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801f486:	4840      	ldr	r0, [pc, #256]	; (801f588 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801f488:	f006 fb76 	bl	8025b78 <__assert_func>
 801f48c:	ae05      	add	r6, sp, #20
 801f48e:	e7c0      	b.n	801f412 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 801f490:	a805      	add	r0, sp, #20
 801f492:	4606      	mov	r6, r0
 801f494:	e7c9      	b.n	801f42a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801f496:	a805      	add	r0, sp, #20
 801f498:	e7c7      	b.n	801f42a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 801f49a:	ad05      	add	r5, sp, #20
 801f49c:	e7d4      	b.n	801f448 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 801f49e:	ab05      	add	r3, sp, #20
 801f4a0:	461d      	mov	r5, r3
 801f4a2:	e7dd      	b.n	801f460 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801f4a4:	ab05      	add	r3, sp, #20
 801f4a6:	e7db      	b.n	801f460 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 801f4a8:	b292      	uxth	r2, r2
 801f4aa:	b2a4      	uxth	r4, r4
 801f4ac:	fa1f fc8c 	uxth.w	ip, ip
 801f4b0:	fb02 f804 	mul.w	r8, r2, r4
 801f4b4:	0112      	lsls	r2, r2, #4
 801f4b6:	b2bf      	uxth	r7, r7
 801f4b8:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801f4bc:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801f4c0:	eba2 0208 	sub.w	r2, r2, r8
 801f4c4:	b2a4      	uxth	r4, r4
 801f4c6:	b292      	uxth	r2, r2
 801f4c8:	ebae 0e04 	sub.w	lr, lr, r4
 801f4cc:	fb02 fb0b 	mul.w	fp, r2, fp
 801f4d0:	fa1f fe8e 	uxth.w	lr, lr
 801f4d4:	fb0e ba0a 	mla	sl, lr, sl, fp
 801f4d8:	fb04 aa09 	mla	sl, r4, r9, sl
 801f4dc:	fb08 aa01 	mla	sl, r8, r1, sl
 801f4e0:	9903      	ldr	r1, [sp, #12]
 801f4e2:	fb11 f90c 	smulbb	r9, r1, ip
 801f4e6:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801f4ea:	9900      	ldr	r1, [sp, #0]
 801f4ec:	fb0a 9a07 	mla	sl, sl, r7, r9
 801f4f0:	fa1f fa8a 	uxth.w	sl, sl
 801f4f4:	f10a 0901 	add.w	r9, sl, #1
 801f4f8:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801f4fc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f500:	f881 a000 	strb.w	sl, [r1]
 801f504:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f508:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f50c:	fb02 fa0a 	mul.w	sl, r2, sl
 801f510:	9902      	ldr	r1, [sp, #8]
 801f512:	fb0e aa09 	mla	sl, lr, r9, sl
 801f516:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f51a:	fb04 aa09 	mla	sl, r4, r9, sl
 801f51e:	f893 9001 	ldrb.w	r9, [r3, #1]
 801f522:	fb08 a909 	mla	r9, r8, r9, sl
 801f526:	fb11 fa0c 	smulbb	sl, r1, ip
 801f52a:	9900      	ldr	r1, [sp, #0]
 801f52c:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f530:	fb09 a907 	mla	r9, r9, r7, sl
 801f534:	fa1f f989 	uxth.w	r9, r9
 801f538:	f109 0a01 	add.w	sl, r9, #1
 801f53c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801f540:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f544:	f881 9001 	strb.w	r9, [r1, #1]
 801f548:	7880      	ldrb	r0, [r0, #2]
 801f54a:	78b6      	ldrb	r6, [r6, #2]
 801f54c:	4342      	muls	r2, r0
 801f54e:	78a8      	ldrb	r0, [r5, #2]
 801f550:	789b      	ldrb	r3, [r3, #2]
 801f552:	fb0e 2206 	mla	r2, lr, r6, r2
 801f556:	fb04 2400 	mla	r4, r4, r0, r2
 801f55a:	fb08 4803 	mla	r8, r8, r3, r4
 801f55e:	9b01      	ldr	r3, [sp, #4]
 801f560:	fb13 fc0c 	smulbb	ip, r3, ip
 801f564:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801f568:	fb08 c707 	mla	r7, r8, r7, ip
 801f56c:	b2bf      	uxth	r7, r7
 801f56e:	f107 0c01 	add.w	ip, r7, #1
 801f572:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801f576:	123f      	asrs	r7, r7, #8
 801f578:	708f      	strb	r7, [r1, #2]
 801f57a:	b007      	add	sp, #28
 801f57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f580:	0802b042 	.word	0x0802b042
 801f584:	0802b53a 	.word	0x0802b53a
 801f588:	0802b10b 	.word	0x0802b10b

0801f58c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f590:	ed2d 8b08 	vpush	{d8-d11}
 801f594:	b093      	sub	sp, #76	; 0x4c
 801f596:	eeb0 aa40 	vmov.f32	s20, s0
 801f59a:	eef0 9a60 	vmov.f32	s19, s1
 801f59e:	9210      	str	r2, [sp, #64]	; 0x40
 801f5a0:	eeb0 9a41 	vmov.f32	s18, s2
 801f5a4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f5a6:	eeb0 8a62 	vmov.f32	s16, s5
 801f5aa:	9309      	str	r3, [sp, #36]	; 0x24
 801f5ac:	eef0 8a43 	vmov.f32	s17, s6
 801f5b0:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 801f5b4:	eef0 ba44 	vmov.f32	s23, s8
 801f5b8:	9011      	str	r0, [sp, #68]	; 0x44
 801f5ba:	eeb0 ba64 	vmov.f32	s22, s9
 801f5be:	930e      	str	r3, [sp, #56]	; 0x38
 801f5c0:	eef0 aa45 	vmov.f32	s21, s10
 801f5c4:	6850      	ldr	r0, [r2, #4]
 801f5c6:	910d      	str	r1, [sp, #52]	; 0x34
 801f5c8:	6812      	ldr	r2, [r2, #0]
 801f5ca:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801f5ce:	fb00 1303 	mla	r3, r0, r3, r1
 801f5d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f5d6:	18d3      	adds	r3, r2, r3
 801f5d8:	930a      	str	r3, [sp, #40]	; 0x28
 801f5da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f5dc:	681b      	ldr	r3, [r3, #0]
 801f5de:	930c      	str	r3, [sp, #48]	; 0x30
 801f5e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f5e2:	685c      	ldr	r4, [r3, #4]
 801f5e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5e6:	3404      	adds	r4, #4
 801f5e8:	43db      	mvns	r3, r3
 801f5ea:	b2db      	uxtb	r3, r3
 801f5ec:	930b      	str	r3, [sp, #44]	; 0x2c
 801f5ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f5f0:	2b00      	cmp	r3, #0
 801f5f2:	dc03      	bgt.n	801f5fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	f340 8250 	ble.w	801fa9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801f5fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f5fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f602:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f606:	1e48      	subs	r0, r1, #1
 801f608:	1e55      	subs	r5, r2, #1
 801f60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f60c:	2b00      	cmp	r3, #0
 801f60e:	f340 80ee 	ble.w	801f7ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801f612:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801f614:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f616:	1436      	asrs	r6, r6, #16
 801f618:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f61c:	d406      	bmi.n	801f62c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f61e:	4286      	cmp	r6, r0
 801f620:	da04      	bge.n	801f62c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f622:	2b00      	cmp	r3, #0
 801f624:	db02      	blt.n	801f62c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f626:	42ab      	cmp	r3, r5
 801f628:	f2c0 80e2 	blt.w	801f7f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801f62c:	3601      	adds	r6, #1
 801f62e:	f100 80cf 	bmi.w	801f7d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f632:	42b1      	cmp	r1, r6
 801f634:	f2c0 80cc 	blt.w	801f7d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f638:	3301      	adds	r3, #1
 801f63a:	f100 80c9 	bmi.w	801f7d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f63e:	429a      	cmp	r2, r3
 801f640:	f2c0 80c6 	blt.w	801f7d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f644:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801f648:	f1bb 0f00 	cmp.w	fp, #0
 801f64c:	f340 80f1 	ble.w	801f832 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801f650:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f652:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f654:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801f656:	141d      	asrs	r5, r3, #16
 801f658:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f65a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f65e:	68c7      	ldr	r7, [r0, #12]
 801f660:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f662:	1418      	asrs	r0, r3, #16
 801f664:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801f668:	6892      	ldr	r2, [r2, #8]
 801f66a:	f100 8137 	bmi.w	801f8dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f66e:	f102 3cff 	add.w	ip, r2, #4294967295
 801f672:	4560      	cmp	r0, ip
 801f674:	f280 8132 	bge.w	801f8dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f678:	2d00      	cmp	r5, #0
 801f67a:	f2c0 812f 	blt.w	801f8dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f67e:	f107 3cff 	add.w	ip, r7, #4294967295
 801f682:	4565      	cmp	r5, ip
 801f684:	f280 812a 	bge.w	801f8dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801f688:	b212      	sxth	r2, r2
 801f68a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f68c:	fb05 0002 	mla	r0, r5, r2, r0
 801f690:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f692:	f817 c000 	ldrb.w	ip, [r7, r0]
 801f696:	4405      	add	r5, r0
 801f698:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f69c:	eb04 0e0c 	add.w	lr, r4, ip
 801f6a0:	f1b8 0f00 	cmp.w	r8, #0
 801f6a4:	f000 810c 	beq.w	801f8c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 801f6a8:	786f      	ldrb	r7, [r5, #1]
 801f6aa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f6ae:	4427      	add	r7, r4
 801f6b0:	2900      	cmp	r1, #0
 801f6b2:	f000 810d 	beq.w	801f8d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f6b6:	18a8      	adds	r0, r5, r2
 801f6b8:	5caa      	ldrb	r2, [r5, r2]
 801f6ba:	7840      	ldrb	r0, [r0, #1]
 801f6bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f6c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f6c4:	4422      	add	r2, r4
 801f6c6:	4420      	add	r0, r4
 801f6c8:	fa1f f388 	uxth.w	r3, r8
 801f6cc:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801f6d0:	b289      	uxth	r1, r1
 801f6d2:	f897 c000 	ldrb.w	ip, [r7]
 801f6d6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801f6da:	fb03 f901 	mul.w	r9, r3, r1
 801f6de:	011b      	lsls	r3, r3, #4
 801f6e0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f6e4:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801f6e8:	eba3 0309 	sub.w	r3, r3, r9
 801f6ec:	b289      	uxth	r1, r1
 801f6ee:	b29b      	uxth	r3, r3
 801f6f0:	eba8 0801 	sub.w	r8, r8, r1
 801f6f4:	fb03 fc0c 	mul.w	ip, r3, ip
 801f6f8:	fa1f f888 	uxth.w	r8, r8
 801f6fc:	930f      	str	r3, [sp, #60]	; 0x3c
 801f6fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f700:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f704:	f892 a000 	ldrb.w	sl, [r2]
 801f708:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f70c:	f890 a000 	ldrb.w	sl, [r0]
 801f710:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f714:	f896 a000 	ldrb.w	sl, [r6]
 801f718:	fb1a fa03 	smulbb	sl, sl, r3
 801f71c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f720:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f722:	fb0c ac05 	mla	ip, ip, r5, sl
 801f726:	fa1f fc8c 	uxth.w	ip, ip
 801f72a:	f10c 0a01 	add.w	sl, ip, #1
 801f72e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801f732:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f736:	f886 a000 	strb.w	sl, [r6]
 801f73a:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f73e:	f89e a001 	ldrb.w	sl, [lr, #1]
 801f742:	fb03 fc0c 	mul.w	ip, r3, ip
 801f746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f748:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f74c:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f750:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f754:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f758:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f75c:	f896 a001 	ldrb.w	sl, [r6, #1]
 801f760:	fb1a fa03 	smulbb	sl, sl, r3
 801f764:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f768:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f76a:	fb0c ac05 	mla	ip, ip, r5, sl
 801f76e:	fa1f fc8c 	uxth.w	ip, ip
 801f772:	f10c 0a01 	add.w	sl, ip, #1
 801f776:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801f77a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f77e:	f886 c001 	strb.w	ip, [r6, #1]
 801f782:	78bf      	ldrb	r7, [r7, #2]
 801f784:	f89e c002 	ldrb.w	ip, [lr, #2]
 801f788:	437b      	muls	r3, r7
 801f78a:	fb08 330c 	mla	r3, r8, ip, r3
 801f78e:	f892 c002 	ldrb.w	ip, [r2, #2]
 801f792:	7882      	ldrb	r2, [r0, #2]
 801f794:	fb01 310c 	mla	r1, r1, ip, r3
 801f798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f79a:	fb09 1902 	mla	r9, r9, r2, r1
 801f79e:	78b1      	ldrb	r1, [r6, #2]
 801f7a0:	fb11 f103 	smulbb	r1, r1, r3
 801f7a4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f7a8:	fb09 1505 	mla	r5, r9, r5, r1
 801f7ac:	b2ad      	uxth	r5, r5
 801f7ae:	1c6b      	adds	r3, r5, #1
 801f7b0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f7b4:	122d      	asrs	r5, r5, #8
 801f7b6:	70b5      	strb	r5, [r6, #2]
 801f7b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f7ba:	3603      	adds	r6, #3
 801f7bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801f7be:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f7c2:	4413      	add	r3, r2
 801f7c4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801f7c6:	9325      	str	r3, [sp, #148]	; 0x94
 801f7c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f7ca:	4413      	add	r3, r2
 801f7cc:	9326      	str	r3, [sp, #152]	; 0x98
 801f7ce:	e73b      	b.n	801f648 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 801f7d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f7d2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 801f7d4:	4433      	add	r3, r6
 801f7d6:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801f7d8:	9325      	str	r3, [sp, #148]	; 0x94
 801f7da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f7dc:	4433      	add	r3, r6
 801f7de:	9326      	str	r3, [sp, #152]	; 0x98
 801f7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7e2:	3b01      	subs	r3, #1
 801f7e4:	9309      	str	r3, [sp, #36]	; 0x24
 801f7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7e8:	3303      	adds	r3, #3
 801f7ea:	930a      	str	r3, [sp, #40]	; 0x28
 801f7ec:	e70d      	b.n	801f60a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f7ee:	d028      	beq.n	801f842 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7f2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f7f4:	3b01      	subs	r3, #1
 801f7f6:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801f7f8:	fb00 5003 	mla	r0, r0, r3, r5
 801f7fc:	1400      	asrs	r0, r0, #16
 801f7fe:	f53f af21 	bmi.w	801f644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801f802:	3901      	subs	r1, #1
 801f804:	4288      	cmp	r0, r1
 801f806:	f6bf af1d 	bge.w	801f644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801f80a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f80c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801f80e:	fb01 0303 	mla	r3, r1, r3, r0
 801f812:	141b      	asrs	r3, r3, #16
 801f814:	f53f af16 	bmi.w	801f644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801f818:	3a01      	subs	r2, #1
 801f81a:	4293      	cmp	r3, r2
 801f81c:	f6bf af12 	bge.w	801f644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801f820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f822:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f826:	1cdf      	adds	r7, r3, #3
 801f828:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801f82c:	f1b9 0f00 	cmp.w	r9, #0
 801f830:	dc73      	bgt.n	801f91a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801f832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f836:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f83a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f83e:	441a      	add	r2, r3
 801f840:	920a      	str	r2, [sp, #40]	; 0x28
 801f842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f844:	2b00      	cmp	r3, #0
 801f846:	f340 8129 	ble.w	801fa9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801f84a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f84e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f850:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f854:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f858:	eef0 6a48 	vmov.f32	s13, s16
 801f85c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f860:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f864:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f868:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801f86c:	eef0 6a68 	vmov.f32	s13, s17
 801f870:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f874:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 801f878:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f87c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f880:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f884:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f888:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f88c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f890:	ee18 2a10 	vmov	r2, s16
 801f894:	eeb0 8a47 	vmov.f32	s16, s14
 801f898:	fb92 f3f3 	sdiv	r3, r2, r3
 801f89c:	ee18 2a90 	vmov	r2, s17
 801f8a0:	9327      	str	r3, [sp, #156]	; 0x9c
 801f8a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f8a4:	eef0 8a67 	vmov.f32	s17, s15
 801f8a8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8ac:	9328      	str	r3, [sp, #160]	; 0xa0
 801f8ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f8b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f8b2:	3b01      	subs	r3, #1
 801f8b4:	930d      	str	r3, [sp, #52]	; 0x34
 801f8b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f8b8:	bf08      	it	eq
 801f8ba:	4613      	moveq	r3, r2
 801f8bc:	9309      	str	r3, [sp, #36]	; 0x24
 801f8be:	e696      	b.n	801f5ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f8c0:	b149      	cbz	r1, 801f8d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f8c2:	5caa      	ldrb	r2, [r5, r2]
 801f8c4:	4670      	mov	r0, lr
 801f8c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f8ca:	4422      	add	r2, r4
 801f8cc:	4677      	mov	r7, lr
 801f8ce:	e6fb      	b.n	801f6c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801f8d0:	4670      	mov	r0, lr
 801f8d2:	4672      	mov	r2, lr
 801f8d4:	e6f8      	b.n	801f6c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801f8d6:	4670      	mov	r0, lr
 801f8d8:	4672      	mov	r2, lr
 801f8da:	e7f7      	b.n	801f8cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 801f8dc:	f110 0c01 	adds.w	ip, r0, #1
 801f8e0:	f53f af6a 	bmi.w	801f7b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801f8e4:	4562      	cmp	r2, ip
 801f8e6:	f6ff af67 	blt.w	801f7b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801f8ea:	f115 0c01 	adds.w	ip, r5, #1
 801f8ee:	f53f af63 	bmi.w	801f7b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801f8f2:	4567      	cmp	r7, ip
 801f8f4:	f6ff af60 	blt.w	801f7b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801f8f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f8fa:	b23f      	sxth	r7, r7
 801f8fc:	b212      	sxth	r2, r2
 801f8fe:	9002      	str	r0, [sp, #8]
 801f900:	9701      	str	r7, [sp, #4]
 801f902:	9200      	str	r2, [sp, #0]
 801f904:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f908:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801f90c:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801f910:	4623      	mov	r3, r4
 801f912:	4631      	mov	r1, r6
 801f914:	f7ff fd4c 	bl	801f3b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801f918:	e74e      	b.n	801f7b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801f91a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f91c:	9826      	ldr	r0, [sp, #152]	; 0x98
 801f91e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f922:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801f924:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f926:	1400      	asrs	r0, r0, #16
 801f928:	142d      	asrs	r5, r5, #16
 801f92a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f92c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f930:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f934:	fb02 5000 	mla	r0, r2, r0, r5
 801f938:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f93a:	f815 e000 	ldrb.w	lr, [r5, r0]
 801f93e:	eb05 0c00 	add.w	ip, r5, r0
 801f942:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f946:	eb04 060e 	add.w	r6, r4, lr
 801f94a:	2b00      	cmp	r3, #0
 801f94c:	f000 8097 	beq.w	801fa7e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801f950:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f958:	4425      	add	r5, r4
 801f95a:	2900      	cmp	r1, #0
 801f95c:	f000 8098 	beq.w	801fa90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801f960:	eb0c 0002 	add.w	r0, ip, r2
 801f964:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f968:	7840      	ldrb	r0, [r0, #1]
 801f96a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f96e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f972:	4422      	add	r2, r4
 801f974:	4420      	add	r0, r4
 801f976:	b29b      	uxth	r3, r3
 801f978:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f97c:	b289      	uxth	r1, r1
 801f97e:	f895 e000 	ldrb.w	lr, [r5]
 801f982:	3703      	adds	r7, #3
 801f984:	f109 39ff 	add.w	r9, r9, #4294967295
 801f988:	fb03 f801 	mul.w	r8, r3, r1
 801f98c:	011b      	lsls	r3, r3, #4
 801f98e:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801f992:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f996:	eba3 0308 	sub.w	r3, r3, r8
 801f99a:	b289      	uxth	r1, r1
 801f99c:	b29b      	uxth	r3, r3
 801f99e:	ebac 0c01 	sub.w	ip, ip, r1
 801f9a2:	fb03 fe0e 	mul.w	lr, r3, lr
 801f9a6:	fa1f fc8c 	uxth.w	ip, ip
 801f9aa:	930f      	str	r3, [sp, #60]	; 0x3c
 801f9ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f9ae:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f9b2:	f892 b000 	ldrb.w	fp, [r2]
 801f9b6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f9ba:	f890 b000 	ldrb.w	fp, [r0]
 801f9be:	fb08 ee0b 	mla	lr, r8, fp, lr
 801f9c2:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801f9c6:	fb1b fb03 	smulbb	fp, fp, r3
 801f9ca:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f9ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f9d0:	fb0e be0a 	mla	lr, lr, sl, fp
 801f9d4:	fa1f fe8e 	uxth.w	lr, lr
 801f9d8:	f10e 0b01 	add.w	fp, lr, #1
 801f9dc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f9e0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f9e4:	f807 ec06 	strb.w	lr, [r7, #-6]
 801f9e8:	f895 e001 	ldrb.w	lr, [r5, #1]
 801f9ec:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f9f0:	fb03 fe0e 	mul.w	lr, r3, lr
 801f9f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f9f6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f9fa:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f9fe:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fa02:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fa06:	fb08 ee0b 	mla	lr, r8, fp, lr
 801fa0a:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801fa0e:	fb1b fb03 	smulbb	fp, fp, r3
 801fa12:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801fa16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa18:	fb0e be0a 	mla	lr, lr, sl, fp
 801fa1c:	fa1f fe8e 	uxth.w	lr, lr
 801fa20:	f10e 0b01 	add.w	fp, lr, #1
 801fa24:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801fa28:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fa2c:	f807 ec05 	strb.w	lr, [r7, #-5]
 801fa30:	78ad      	ldrb	r5, [r5, #2]
 801fa32:	78b6      	ldrb	r6, [r6, #2]
 801fa34:	436b      	muls	r3, r5
 801fa36:	7895      	ldrb	r5, [r2, #2]
 801fa38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fa3a:	fb0c 3306 	mla	r3, ip, r6, r3
 801fa3e:	fb01 3305 	mla	r3, r1, r5, r3
 801fa42:	7885      	ldrb	r5, [r0, #2]
 801fa44:	fb08 3805 	mla	r8, r8, r5, r3
 801fa48:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801fa4c:	fb13 f302 	smulbb	r3, r3, r2
 801fa50:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801fa54:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801fa56:	fb08 380a 	mla	r8, r8, sl, r3
 801fa5a:	fa1f f888 	uxth.w	r8, r8
 801fa5e:	f108 0301 	add.w	r3, r8, #1
 801fa62:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801fa66:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fa68:	4413      	add	r3, r2
 801fa6a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801fa6c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fa70:	9325      	str	r3, [sp, #148]	; 0x94
 801fa72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fa74:	f807 8c04 	strb.w	r8, [r7, #-4]
 801fa78:	4413      	add	r3, r2
 801fa7a:	9326      	str	r3, [sp, #152]	; 0x98
 801fa7c:	e6d6      	b.n	801f82c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801fa7e:	b151      	cbz	r1, 801fa96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 801fa80:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801fa84:	4630      	mov	r0, r6
 801fa86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa8a:	4422      	add	r2, r4
 801fa8c:	4635      	mov	r5, r6
 801fa8e:	e772      	b.n	801f976 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801fa90:	4630      	mov	r0, r6
 801fa92:	4632      	mov	r2, r6
 801fa94:	e76f      	b.n	801f976 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801fa96:	4630      	mov	r0, r6
 801fa98:	4632      	mov	r2, r6
 801fa9a:	e7f7      	b.n	801fa8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801fa9c:	b013      	add	sp, #76	; 0x4c
 801fa9e:	ecbd 8b08 	vpop	{d8-d11}
 801faa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801faa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801faa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faac:	784d      	ldrb	r5, [r1, #1]
 801faae:	f891 9002 	ldrb.w	r9, [r1, #2]
 801fab2:	022d      	lsls	r5, r5, #8
 801fab4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801fab8:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801fabc:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801fac0:	f891 9000 	ldrb.w	r9, [r1]
 801fac4:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801fac8:	ea45 0509 	orr.w	r5, r5, r9
 801facc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801fad0:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801fad4:	9501      	str	r5, [sp, #4]
 801fad6:	fb06 470c 	mla	r7, r6, ip, r4
 801fada:	2e00      	cmp	r6, #0
 801fadc:	eb02 0e07 	add.w	lr, r2, r7
 801fae0:	db46      	blt.n	801fb70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801fae2:	45b0      	cmp	r8, r6
 801fae4:	dd44      	ble.n	801fb70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801fae6:	2c00      	cmp	r4, #0
 801fae8:	db40      	blt.n	801fb6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801faea:	45a4      	cmp	ip, r4
 801faec:	dd3e      	ble.n	801fb6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801faee:	5dd7      	ldrb	r7, [r2, r7]
 801faf0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801faf4:	441f      	add	r7, r3
 801faf6:	1c62      	adds	r2, r4, #1
 801faf8:	d43d      	bmi.n	801fb76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801fafa:	4594      	cmp	ip, r2
 801fafc:	dd3b      	ble.n	801fb76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801fafe:	f1ba 0f00 	cmp.w	sl, #0
 801fb02:	d038      	beq.n	801fb76 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801fb04:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801fb08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb0c:	441d      	add	r5, r3
 801fb0e:	3601      	adds	r6, #1
 801fb10:	d435      	bmi.n	801fb7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801fb12:	45b0      	cmp	r8, r6
 801fb14:	dd33      	ble.n	801fb7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801fb16:	b390      	cbz	r0, 801fb7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801fb18:	2c00      	cmp	r4, #0
 801fb1a:	db2e      	blt.n	801fb7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801fb1c:	45a4      	cmp	ip, r4
 801fb1e:	dd2c      	ble.n	801fb7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 801fb20:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801fb24:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fb28:	441e      	add	r6, r3
 801fb2a:	1c62      	adds	r2, r4, #1
 801fb2c:	d42a      	bmi.n	801fb84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801fb2e:	4594      	cmp	ip, r2
 801fb30:	dd28      	ble.n	801fb84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801fb32:	f1ba 0f00 	cmp.w	sl, #0
 801fb36:	d025      	beq.n	801fb84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801fb38:	44f4      	add	ip, lr
 801fb3a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801fb3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb42:	4413      	add	r3, r2
 801fb44:	f1ba 0f0f 	cmp.w	sl, #15
 801fb48:	f897 8000 	ldrb.w	r8, [r7]
 801fb4c:	f895 9000 	ldrb.w	r9, [r5]
 801fb50:	f896 e000 	ldrb.w	lr, [r6]
 801fb54:	f893 c000 	ldrb.w	ip, [r3]
 801fb58:	d801      	bhi.n	801fb5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 801fb5a:	280f      	cmp	r0, #15
 801fb5c:	d914      	bls.n	801fb88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 801fb5e:	4b29      	ldr	r3, [pc, #164]	; (801fc04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 801fb60:	f240 1157 	movw	r1, #343	; 0x157
 801fb64:	4a28      	ldr	r2, [pc, #160]	; (801fc08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801fb66:	4829      	ldr	r0, [pc, #164]	; (801fc0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801fb68:	f006 f806 	bl	8025b78 <__assert_func>
 801fb6c:	af01      	add	r7, sp, #4
 801fb6e:	e7c2      	b.n	801faf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 801fb70:	ad01      	add	r5, sp, #4
 801fb72:	462f      	mov	r7, r5
 801fb74:	e7cb      	b.n	801fb0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801fb76:	ad01      	add	r5, sp, #4
 801fb78:	e7c9      	b.n	801fb0e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 801fb7a:	ae01      	add	r6, sp, #4
 801fb7c:	e7d5      	b.n	801fb2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 801fb7e:	ab01      	add	r3, sp, #4
 801fb80:	461e      	mov	r6, r3
 801fb82:	e7df      	b.n	801fb44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801fb84:	ab01      	add	r3, sp, #4
 801fb86:	e7dd      	b.n	801fb44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 801fb88:	fa1f f48a 	uxth.w	r4, sl
 801fb8c:	b280      	uxth	r0, r0
 801fb8e:	fb04 fa00 	mul.w	sl, r4, r0
 801fb92:	0124      	lsls	r4, r4, #4
 801fb94:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fb98:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801fb9c:	b282      	uxth	r2, r0
 801fb9e:	eba4 000a 	sub.w	r0, r4, sl
 801fba2:	ebab 0b02 	sub.w	fp, fp, r2
 801fba6:	b280      	uxth	r0, r0
 801fba8:	fa1f fb8b 	uxth.w	fp, fp
 801fbac:	fb00 f909 	mul.w	r9, r0, r9
 801fbb0:	fb0b 9808 	mla	r8, fp, r8, r9
 801fbb4:	fb02 8e0e 	mla	lr, r2, lr, r8
 801fbb8:	fb0a ec0c 	mla	ip, sl, ip, lr
 801fbbc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fbc0:	f881 c000 	strb.w	ip, [r1]
 801fbc4:	786c      	ldrb	r4, [r5, #1]
 801fbc6:	f897 c001 	ldrb.w	ip, [r7, #1]
 801fbca:	4344      	muls	r4, r0
 801fbcc:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801fbd0:	7874      	ldrb	r4, [r6, #1]
 801fbd2:	fb02 cc04 	mla	ip, r2, r4, ip
 801fbd6:	785c      	ldrb	r4, [r3, #1]
 801fbd8:	fb0a c404 	mla	r4, sl, r4, ip
 801fbdc:	1224      	asrs	r4, r4, #8
 801fbde:	704c      	strb	r4, [r1, #1]
 801fbe0:	78ad      	ldrb	r5, [r5, #2]
 801fbe2:	78bc      	ldrb	r4, [r7, #2]
 801fbe4:	4368      	muls	r0, r5
 801fbe6:	fb0b 0b04 	mla	fp, fp, r4, r0
 801fbea:	78b0      	ldrb	r0, [r6, #2]
 801fbec:	fb02 b000 	mla	r0, r2, r0, fp
 801fbf0:	789a      	ldrb	r2, [r3, #2]
 801fbf2:	fb0a 0a02 	mla	sl, sl, r2, r0
 801fbf6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801fbfa:	f881 a002 	strb.w	sl, [r1, #2]
 801fbfe:	b003      	add	sp, #12
 801fc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc04:	0802b042 	.word	0x0802b042
 801fc08:	0802b53a 	.word	0x0802b53a
 801fc0c:	0802b10b 	.word	0x0802b10b

0801fc10 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc14:	ed2d 8b0a 	vpush	{d8-d12}
 801fc18:	b08d      	sub	sp, #52	; 0x34
 801fc1a:	eeb0 aa40 	vmov.f32	s20, s0
 801fc1e:	eef0 9a60 	vmov.f32	s19, s1
 801fc22:	900b      	str	r0, [sp, #44]	; 0x2c
 801fc24:	eeb0 9a41 	vmov.f32	s18, s2
 801fc28:	9306      	str	r3, [sp, #24]
 801fc2a:	eeb0 8a62 	vmov.f32	s16, s5
 801fc2e:	eef0 8a43 	vmov.f32	s17, s6
 801fc32:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801fc34:	eeb0 ca44 	vmov.f32	s24, s8
 801fc38:	eef0 ba64 	vmov.f32	s23, s9
 801fc3c:	eeb0 ba45 	vmov.f32	s22, s10
 801fc40:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801fc44:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801fc48:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801fc4a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801fc4e:	6850      	ldr	r0, [r2, #4]
 801fc50:	6812      	ldr	r2, [r2, #0]
 801fc52:	fb00 1303 	mla	r3, r0, r3, r1
 801fc56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fc5a:	18d3      	adds	r3, r2, r3
 801fc5c:	9307      	str	r3, [sp, #28]
 801fc5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc60:	681b      	ldr	r3, [r3, #0]
 801fc62:	9308      	str	r3, [sp, #32]
 801fc64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc66:	685d      	ldr	r5, [r3, #4]
 801fc68:	3504      	adds	r5, #4
 801fc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc6c:	2b00      	cmp	r3, #0
 801fc6e:	dc03      	bgt.n	801fc78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc72:	2b00      	cmp	r3, #0
 801fc74:	f340 81e6 	ble.w	8020044 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801fc78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fc7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fc7e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fc82:	1e48      	subs	r0, r1, #1
 801fc84:	1e56      	subs	r6, r2, #1
 801fc86:	9b06      	ldr	r3, [sp, #24]
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	f340 80bd 	ble.w	801fe08 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801fc8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fc90:	1427      	asrs	r7, r4, #16
 801fc92:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fc96:	d406      	bmi.n	801fca6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fc98:	4287      	cmp	r7, r0
 801fc9a:	da04      	bge.n	801fca6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	db02      	blt.n	801fca6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fca0:	42b3      	cmp	r3, r6
 801fca2:	f2c0 80b2 	blt.w	801fe0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fca6:	3701      	adds	r7, #1
 801fca8:	f100 80a1 	bmi.w	801fdee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fcac:	42b9      	cmp	r1, r7
 801fcae:	f2c0 809e 	blt.w	801fdee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fcb2:	3301      	adds	r3, #1
 801fcb4:	f100 809b 	bmi.w	801fdee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fcb8:	429a      	cmp	r2, r3
 801fcba:	f2c0 8098 	blt.w	801fdee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801fcbe:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801fcc2:	f1bb 0f00 	cmp.w	fp, #0
 801fcc6:	f340 80bf 	ble.w	801fe48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801fcca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801fccc:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801fcce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fcd0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fcd4:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801fcd8:	1420      	asrs	r0, r4, #16
 801fcda:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801fcdc:	ea4f 4723 	mov.w	r7, r3, asr #16
 801fce0:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801fce4:	6892      	ldr	r2, [r2, #8]
 801fce6:	f100 8103 	bmi.w	801fef0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fcea:	f102 3eff 	add.w	lr, r2, #4294967295
 801fcee:	4570      	cmp	r0, lr
 801fcf0:	f280 80fe 	bge.w	801fef0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fcf4:	2f00      	cmp	r7, #0
 801fcf6:	f2c0 80fb 	blt.w	801fef0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fcfa:	f10c 3eff 	add.w	lr, ip, #4294967295
 801fcfe:	4577      	cmp	r7, lr
 801fd00:	f280 80f6 	bge.w	801fef0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801fd04:	b212      	sxth	r2, r2
 801fd06:	fb07 0002 	mla	r0, r7, r2, r0
 801fd0a:	9f08      	ldr	r7, [sp, #32]
 801fd0c:	f817 8000 	ldrb.w	r8, [r7, r0]
 801fd10:	eb07 0e00 	add.w	lr, r7, r0
 801fd14:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fd18:	eb05 0c08 	add.w	ip, r5, r8
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	f000 80d8 	beq.w	801fed2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 801fd22:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801fd26:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fd2a:	442f      	add	r7, r5
 801fd2c:	2900      	cmp	r1, #0
 801fd2e:	f000 80d9 	beq.w	801fee4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801fd32:	eb0e 0002 	add.w	r0, lr, r2
 801fd36:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801fd3a:	7840      	ldrb	r0, [r0, #1]
 801fd3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fd40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fd44:	442a      	add	r2, r5
 801fd46:	4428      	add	r0, r5
 801fd48:	b29b      	uxth	r3, r3
 801fd4a:	f815 a008 	ldrb.w	sl, [r5, r8]
 801fd4e:	b289      	uxth	r1, r1
 801fd50:	f897 8000 	ldrb.w	r8, [r7]
 801fd54:	fb03 f901 	mul.w	r9, r3, r1
 801fd58:	011b      	lsls	r3, r3, #4
 801fd5a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fd5e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fd62:	eba3 0309 	sub.w	r3, r3, r9
 801fd66:	b289      	uxth	r1, r1
 801fd68:	b29b      	uxth	r3, r3
 801fd6a:	ebae 0e01 	sub.w	lr, lr, r1
 801fd6e:	fb03 f808 	mul.w	r8, r3, r8
 801fd72:	fa1f fe8e 	uxth.w	lr, lr
 801fd76:	fb0e 880a 	mla	r8, lr, sl, r8
 801fd7a:	f892 a000 	ldrb.w	sl, [r2]
 801fd7e:	fb01 880a 	mla	r8, r1, sl, r8
 801fd82:	f890 a000 	ldrb.w	sl, [r0]
 801fd86:	fb09 880a 	mla	r8, r9, sl, r8
 801fd8a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fd8e:	f886 8000 	strb.w	r8, [r6]
 801fd92:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fd96:	f89c a001 	ldrb.w	sl, [ip, #1]
 801fd9a:	fb03 f808 	mul.w	r8, r3, r8
 801fd9e:	fb0e 880a 	mla	r8, lr, sl, r8
 801fda2:	f892 a001 	ldrb.w	sl, [r2, #1]
 801fda6:	fb01 880a 	mla	r8, r1, sl, r8
 801fdaa:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fdae:	fb09 880a 	mla	r8, r9, sl, r8
 801fdb2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fdb6:	f886 8001 	strb.w	r8, [r6, #1]
 801fdba:	78bf      	ldrb	r7, [r7, #2]
 801fdbc:	f89c c002 	ldrb.w	ip, [ip, #2]
 801fdc0:	437b      	muls	r3, r7
 801fdc2:	7892      	ldrb	r2, [r2, #2]
 801fdc4:	fb0e 330c 	mla	r3, lr, ip, r3
 801fdc8:	fb01 3102 	mla	r1, r1, r2, r3
 801fdcc:	7882      	ldrb	r2, [r0, #2]
 801fdce:	fb09 1902 	mla	r9, r9, r2, r1
 801fdd2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fdd6:	f886 9002 	strb.w	r9, [r6, #2]
 801fdda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fddc:	3603      	adds	r6, #3
 801fdde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801fde0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fde4:	441c      	add	r4, r3
 801fde6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fde8:	4413      	add	r3, r2
 801fdea:	9322      	str	r3, [sp, #136]	; 0x88
 801fdec:	e769      	b.n	801fcc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801fdee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801fdf0:	9f24      	ldr	r7, [sp, #144]	; 0x90
 801fdf2:	441c      	add	r4, r3
 801fdf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801fdf6:	443b      	add	r3, r7
 801fdf8:	9322      	str	r3, [sp, #136]	; 0x88
 801fdfa:	9b06      	ldr	r3, [sp, #24]
 801fdfc:	3b01      	subs	r3, #1
 801fdfe:	9306      	str	r3, [sp, #24]
 801fe00:	9b07      	ldr	r3, [sp, #28]
 801fe02:	3303      	adds	r3, #3
 801fe04:	9307      	str	r3, [sp, #28]
 801fe06:	e73e      	b.n	801fc86 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fe08:	d026      	beq.n	801fe58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801fe0a:	9b06      	ldr	r3, [sp, #24]
 801fe0c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801fe0e:	3b01      	subs	r3, #1
 801fe10:	fb00 4003 	mla	r0, r0, r3, r4
 801fe14:	1400      	asrs	r0, r0, #16
 801fe16:	f53f af52 	bmi.w	801fcbe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801fe1a:	3901      	subs	r1, #1
 801fe1c:	4288      	cmp	r0, r1
 801fe1e:	f6bf af4e 	bge.w	801fcbe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801fe22:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fe24:	9822      	ldr	r0, [sp, #136]	; 0x88
 801fe26:	fb01 0303 	mla	r3, r1, r3, r0
 801fe2a:	141b      	asrs	r3, r3, #16
 801fe2c:	f53f af47 	bmi.w	801fcbe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801fe30:	3a01      	subs	r2, #1
 801fe32:	4293      	cmp	r3, r2
 801fe34:	f6bf af43 	bge.w	801fcbe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801fe38:	9b07      	ldr	r3, [sp, #28]
 801fe3a:	f8dd a018 	ldr.w	sl, [sp, #24]
 801fe3e:	f103 0803 	add.w	r8, r3, #3
 801fe42:	f1ba 0f00 	cmp.w	sl, #0
 801fe46:	dc71      	bgt.n	801ff2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801fe48:	9b06      	ldr	r3, [sp, #24]
 801fe4a:	9a07      	ldr	r2, [sp, #28]
 801fe4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe54:	441a      	add	r2, r3
 801fe56:	9207      	str	r2, [sp, #28]
 801fe58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe5a:	2b00      	cmp	r3, #0
 801fe5c:	f340 80f2 	ble.w	8020044 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801fe60:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801fe64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801fe66:	ee79 9aab 	vadd.f32	s19, s19, s23
 801fe6a:	eef0 6a48 	vmov.f32	s13, s16
 801fe6e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801fe72:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801fe76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe7a:	ee16 4a90 	vmov	r4, s13
 801fe7e:	eef0 6a68 	vmov.f32	s13, s17
 801fe82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe86:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801fe8a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fe8e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fe92:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fe96:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fe9a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fe9e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fea2:	ee18 2a10 	vmov	r2, s16
 801fea6:	eeb0 8a47 	vmov.f32	s16, s14
 801feaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801feae:	ee18 2a90 	vmov	r2, s17
 801feb2:	9323      	str	r3, [sp, #140]	; 0x8c
 801feb4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801feb6:	eef0 8a67 	vmov.f32	s17, s15
 801feba:	fb92 f3f3 	sdiv	r3, r2, r3
 801febe:	9324      	str	r3, [sp, #144]	; 0x90
 801fec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fec4:	3b01      	subs	r3, #1
 801fec6:	9309      	str	r3, [sp, #36]	; 0x24
 801fec8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801feca:	bf08      	it	eq
 801fecc:	4613      	moveq	r3, r2
 801fece:	9306      	str	r3, [sp, #24]
 801fed0:	e6cb      	b.n	801fc6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fed2:	b151      	cbz	r1, 801feea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 801fed4:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801fed8:	4660      	mov	r0, ip
 801feda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fede:	442a      	add	r2, r5
 801fee0:	4667      	mov	r7, ip
 801fee2:	e731      	b.n	801fd48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801fee4:	4660      	mov	r0, ip
 801fee6:	4662      	mov	r2, ip
 801fee8:	e72e      	b.n	801fd48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801feea:	4660      	mov	r0, ip
 801feec:	4662      	mov	r2, ip
 801feee:	e7f7      	b.n	801fee0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801fef0:	f110 0e01 	adds.w	lr, r0, #1
 801fef4:	f53f af71 	bmi.w	801fdda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801fef8:	4572      	cmp	r2, lr
 801fefa:	f6ff af6e 	blt.w	801fdda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801fefe:	f117 0e01 	adds.w	lr, r7, #1
 801ff02:	f53f af6a 	bmi.w	801fdda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801ff06:	45f4      	cmp	ip, lr
 801ff08:	f6ff af67 	blt.w	801fdda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801ff0c:	b212      	sxth	r2, r2
 801ff0e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801ff12:	fa0f f38c 	sxth.w	r3, ip
 801ff16:	9200      	str	r2, [sp, #0]
 801ff18:	4631      	mov	r1, r6
 801ff1a:	9a08      	ldr	r2, [sp, #32]
 801ff1c:	9301      	str	r3, [sp, #4]
 801ff1e:	462b      	mov	r3, r5
 801ff20:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801ff24:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ff26:	f7ff fdbf 	bl	801faa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801ff2a:	e756      	b.n	801fdda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801ff2c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801ff2e:	1426      	asrs	r6, r4, #16
 801ff30:	9822      	ldr	r0, [sp, #136]	; 0x88
 801ff32:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801ff36:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ff3a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ff3c:	1400      	asrs	r0, r0, #16
 801ff3e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801ff42:	fb02 6000 	mla	r0, r2, r0, r6
 801ff46:	9e08      	ldr	r6, [sp, #32]
 801ff48:	f816 e000 	ldrb.w	lr, [r6, r0]
 801ff4c:	eb06 0c00 	add.w	ip, r6, r0
 801ff50:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ff54:	eb05 070e 	add.w	r7, r5, lr
 801ff58:	2b00      	cmp	r3, #0
 801ff5a:	d064      	beq.n	8020026 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 801ff5c:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801ff60:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ff64:	442e      	add	r6, r5
 801ff66:	2900      	cmp	r1, #0
 801ff68:	d066      	beq.n	8020038 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 801ff6a:	eb0c 0002 	add.w	r0, ip, r2
 801ff6e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ff72:	7840      	ldrb	r0, [r0, #1]
 801ff74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ff78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ff7c:	442a      	add	r2, r5
 801ff7e:	4428      	add	r0, r5
 801ff80:	b29b      	uxth	r3, r3
 801ff82:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801ff86:	b289      	uxth	r1, r1
 801ff88:	f896 e000 	ldrb.w	lr, [r6]
 801ff8c:	f108 0803 	add.w	r8, r8, #3
 801ff90:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ff94:	fb03 f901 	mul.w	r9, r3, r1
 801ff98:	011b      	lsls	r3, r3, #4
 801ff9a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ff9e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801ffa2:	eba3 0309 	sub.w	r3, r3, r9
 801ffa6:	b289      	uxth	r1, r1
 801ffa8:	b29b      	uxth	r3, r3
 801ffaa:	ebac 0c01 	sub.w	ip, ip, r1
 801ffae:	fb03 fe0e 	mul.w	lr, r3, lr
 801ffb2:	fa1f fc8c 	uxth.w	ip, ip
 801ffb6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ffba:	f892 b000 	ldrb.w	fp, [r2]
 801ffbe:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ffc2:	f890 b000 	ldrb.w	fp, [r0]
 801ffc6:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ffca:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ffce:	f808 ec06 	strb.w	lr, [r8, #-6]
 801ffd2:	f896 e001 	ldrb.w	lr, [r6, #1]
 801ffd6:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ffda:	fb03 fe0e 	mul.w	lr, r3, lr
 801ffde:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ffe2:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ffe6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ffea:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ffee:	fb09 ee0b 	mla	lr, r9, fp, lr
 801fff2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fff6:	f808 ec05 	strb.w	lr, [r8, #-5]
 801fffa:	78b6      	ldrb	r6, [r6, #2]
 801fffc:	78bf      	ldrb	r7, [r7, #2]
 801fffe:	4373      	muls	r3, r6
 8020000:	7896      	ldrb	r6, [r2, #2]
 8020002:	7882      	ldrb	r2, [r0, #2]
 8020004:	fb0c 3307 	mla	r3, ip, r7, r3
 8020008:	fb01 3306 	mla	r3, r1, r6, r3
 802000c:	fb09 3902 	mla	r9, r9, r2, r3
 8020010:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020012:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8020014:	441c      	add	r4, r3
 8020016:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020018:	ea4f 2929 	mov.w	r9, r9, asr #8
 802001c:	4413      	add	r3, r2
 802001e:	f808 9c04 	strb.w	r9, [r8, #-4]
 8020022:	9322      	str	r3, [sp, #136]	; 0x88
 8020024:	e70d      	b.n	801fe42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020026:	b151      	cbz	r1, 802003e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8020028:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802002c:	4638      	mov	r0, r7
 802002e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020032:	442a      	add	r2, r5
 8020034:	463e      	mov	r6, r7
 8020036:	e7a3      	b.n	801ff80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020038:	4638      	mov	r0, r7
 802003a:	463a      	mov	r2, r7
 802003c:	e7a0      	b.n	801ff80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802003e:	4638      	mov	r0, r7
 8020040:	463a      	mov	r2, r7
 8020042:	e7f7      	b.n	8020034 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8020044:	b00d      	add	sp, #52	; 0x34
 8020046:	ecbd 8b0a 	vpop	{d8-d12}
 802004a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020050 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8020050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020054:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8020058:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802005c:	2d00      	cmp	r5, #0
 802005e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8020062:	fb05 040e 	mla	r4, r5, lr, r0
 8020066:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802006a:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 802006e:	eb02 0804 	add.w	r8, r2, r4
 8020072:	db40      	blt.n	80200f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8020074:	45a9      	cmp	r9, r5
 8020076:	dd3e      	ble.n	80200f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8020078:	2800      	cmp	r0, #0
 802007a:	db3a      	blt.n	80200f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 802007c:	4586      	cmp	lr, r0
 802007e:	dd38      	ble.n	80200f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8020080:	5d12      	ldrb	r2, [r2, r4]
 8020082:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020086:	1c42      	adds	r2, r0, #1
 8020088:	d438      	bmi.n	80200fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 802008a:	4596      	cmp	lr, r2
 802008c:	dd36      	ble.n	80200fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 802008e:	b3bf      	cbz	r7, 8020100 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8020090:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020094:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8020098:	3501      	adds	r5, #1
 802009a:	d435      	bmi.n	8020108 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 802009c:	45a9      	cmp	r9, r5
 802009e:	dd33      	ble.n	8020108 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 80200a0:	f1bc 0f00 	cmp.w	ip, #0
 80200a4:	d033      	beq.n	802010e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 80200a6:	2800      	cmp	r0, #0
 80200a8:	db2c      	blt.n	8020104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 80200aa:	4586      	cmp	lr, r0
 80200ac:	dd2a      	ble.n	8020104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 80200ae:	f818 200e 	ldrb.w	r2, [r8, lr]
 80200b2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80200b6:	3001      	adds	r0, #1
 80200b8:	d42c      	bmi.n	8020114 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 80200ba:	4586      	cmp	lr, r0
 80200bc:	dd2a      	ble.n	8020114 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 80200be:	b35f      	cbz	r7, 8020118 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 80200c0:	44c6      	add	lr, r8
 80200c2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80200c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80200ca:	2f0f      	cmp	r7, #15
 80200cc:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80200d0:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 80200d4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80200d8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80200dc:	d802      	bhi.n	80200e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 80200de:	f1bc 0f0f 	cmp.w	ip, #15
 80200e2:	d91b      	bls.n	802011c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 80200e4:	4b77      	ldr	r3, [pc, #476]	; (80202c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 80200e6:	f240 1157 	movw	r1, #343	; 0x157
 80200ea:	4a77      	ldr	r2, [pc, #476]	; (80202c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 80200ec:	4877      	ldr	r0, [pc, #476]	; (80202cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 80200ee:	f005 fd43 	bl	8025b78 <__assert_func>
 80200f2:	2600      	movs	r6, #0
 80200f4:	e7c7      	b.n	8020086 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 80200f6:	2400      	movs	r4, #0
 80200f8:	4626      	mov	r6, r4
 80200fa:	e7cd      	b.n	8020098 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 80200fc:	2400      	movs	r4, #0
 80200fe:	e7cb      	b.n	8020098 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020100:	463c      	mov	r4, r7
 8020102:	e7c9      	b.n	8020098 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8020104:	2500      	movs	r5, #0
 8020106:	e7d6      	b.n	80200b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8020108:	2200      	movs	r2, #0
 802010a:	4615      	mov	r5, r2
 802010c:	e7dd      	b.n	80200ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 802010e:	4662      	mov	r2, ip
 8020110:	4665      	mov	r5, ip
 8020112:	e7da      	b.n	80200ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020114:	2200      	movs	r2, #0
 8020116:	e7d8      	b.n	80200ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8020118:	463a      	mov	r2, r7
 802011a:	e7d6      	b.n	80200ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 802011c:	b2bf      	uxth	r7, r7
 802011e:	fa1f f08c 	uxth.w	r0, ip
 8020122:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8020126:	fb00 fe07 	mul.w	lr, r0, r7
 802012a:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 802012e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020132:	ebac 070e 	sub.w	r7, ip, lr
 8020136:	b280      	uxth	r0, r0
 8020138:	b2bf      	uxth	r7, r7
 802013a:	1a1b      	subs	r3, r3, r0
 802013c:	fb07 fc0a 	mul.w	ip, r7, sl
 8020140:	b29b      	uxth	r3, r3
 8020142:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020146:	9300      	str	r3, [sp, #0]
 8020148:	fb00 cc09 	mla	ip, r0, r9, ip
 802014c:	fb0e cc08 	mla	ip, lr, r8, ip
 8020150:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020154:	9301      	str	r3, [sp, #4]
 8020156:	2b00      	cmp	r3, #0
 8020158:	f000 80b0 	beq.w	80202bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 802015c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020160:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020164:	fb0b fc0c 	mul.w	ip, fp, ip
 8020168:	fb0b f606 	mul.w	r6, fp, r6
 802016c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020170:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020174:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020178:	44dc      	add	ip, fp
 802017a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802017e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020182:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020186:	fb0a fb0b 	mul.w	fp, sl, fp
 802018a:	fb0a fa04 	mul.w	sl, sl, r4
 802018e:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8020192:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020196:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 802019a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802019e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80201a2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80201a6:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 80201aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80201ae:	0a36      	lsrs	r6, r6, #8
 80201b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80201b4:	44dc      	add	ip, fp
 80201b6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80201ba:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80201be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80201c2:	fb09 fb0b 	mul.w	fp, r9, fp
 80201c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80201ca:	fb09 f905 	mul.w	r9, r9, r5
 80201ce:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80201d2:	ea4f 241b 	mov.w	r4, fp, lsr #8
 80201d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80201da:	f509 7580 	add.w	r5, r9, #256	; 0x100
 80201de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80201e2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80201e6:	fb0c fc07 	mul.w	ip, ip, r7
 80201ea:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80201ee:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80201f2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80201f6:	445c      	add	r4, fp
 80201f8:	fb08 f505 	mul.w	r5, r8, r5
 80201fc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020200:	fb08 f802 	mul.w	r8, r8, r2
 8020204:	0a24      	lsrs	r4, r4, #8
 8020206:	0a2a      	lsrs	r2, r5, #8
 8020208:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 802020c:	fb07 f70a 	mul.w	r7, r7, sl
 8020210:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020214:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020218:	4415      	add	r5, r2
 802021a:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802021e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020222:	9a00      	ldr	r2, [sp, #0]
 8020224:	0a2d      	lsrs	r5, r5, #8
 8020226:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802022a:	fb03 cc02 	mla	ip, r3, r2, ip
 802022e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020232:	fb02 7306 	mla	r3, r2, r6, r7
 8020236:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802023a:	9a01      	ldr	r2, [sp, #4]
 802023c:	fb05 c50e 	mla	r5, r5, lr, ip
 8020240:	fb0e 3e08 	mla	lr, lr, r8, r3
 8020244:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8020248:	fb04 5400 	mla	r4, r4, r0, r5
 802024c:	fb00 e303 	mla	r3, r0, r3, lr
 8020250:	0a24      	lsrs	r4, r4, #8
 8020252:	0a1b      	lsrs	r3, r3, #8
 8020254:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020258:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802025c:	431c      	orrs	r4, r3
 802025e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8020262:	b29b      	uxth	r3, r3
 8020264:	b2e0      	uxtb	r0, r4
 8020266:	435a      	muls	r2, r3
 8020268:	fb10 f003 	smulbb	r0, r0, r3
 802026c:	1c55      	adds	r5, r2, #1
 802026e:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8020272:	780a      	ldrb	r2, [r1, #0]
 8020274:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8020278:	b2ed      	uxtb	r5, r5
 802027a:	fb02 0205 	mla	r2, r2, r5, r0
 802027e:	b292      	uxth	r2, r2
 8020280:	1c50      	adds	r0, r2, #1
 8020282:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020286:	7848      	ldrb	r0, [r1, #1]
 8020288:	fb10 f005 	smulbb	r0, r0, r5
 802028c:	1212      	asrs	r2, r2, #8
 802028e:	700a      	strb	r2, [r1, #0]
 8020290:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8020294:	0c24      	lsrs	r4, r4, #16
 8020296:	fb02 0203 	mla	r2, r2, r3, r0
 802029a:	b292      	uxth	r2, r2
 802029c:	1c50      	adds	r0, r2, #1
 802029e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80202a2:	1212      	asrs	r2, r2, #8
 80202a4:	704a      	strb	r2, [r1, #1]
 80202a6:	788a      	ldrb	r2, [r1, #2]
 80202a8:	fb12 f505 	smulbb	r5, r2, r5
 80202ac:	fb04 5303 	mla	r3, r4, r3, r5
 80202b0:	b29b      	uxth	r3, r3
 80202b2:	1c5a      	adds	r2, r3, #1
 80202b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80202b8:	121b      	asrs	r3, r3, #8
 80202ba:	708b      	strb	r3, [r1, #2]
 80202bc:	b003      	add	sp, #12
 80202be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202c2:	bf00      	nop
 80202c4:	0802b042 	.word	0x0802b042
 80202c8:	0802b53a 	.word	0x0802b53a
 80202cc:	0802b10b 	.word	0x0802b10b

080202d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80202d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202d4:	ed2d 8b08 	vpush	{d8-d11}
 80202d8:	b09f      	sub	sp, #124	; 0x7c
 80202da:	eeb0 aa40 	vmov.f32	s20, s0
 80202de:	eef0 9a60 	vmov.f32	s19, s1
 80202e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80202e4:	eeb0 9a41 	vmov.f32	s18, s2
 80202e8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80202ea:	eeb0 8a62 	vmov.f32	s16, s5
 80202ee:	9309      	str	r3, [sp, #36]	; 0x24
 80202f0:	eef0 8a43 	vmov.f32	s17, s6
 80202f4:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 80202f8:	eef0 ba44 	vmov.f32	s23, s8
 80202fc:	901d      	str	r0, [sp, #116]	; 0x74
 80202fe:	eeb0 ba64 	vmov.f32	s22, s9
 8020302:	931c      	str	r3, [sp, #112]	; 0x70
 8020304:	eef0 aa45 	vmov.f32	s21, s10
 8020308:	6850      	ldr	r0, [r2, #4]
 802030a:	9119      	str	r1, [sp, #100]	; 0x64
 802030c:	6812      	ldr	r2, [r2, #0]
 802030e:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8020310:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020314:	fb00 1303 	mla	r3, r0, r3, r1
 8020318:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802031c:	18d3      	adds	r3, r2, r3
 802031e:	930c      	str	r3, [sp, #48]	; 0x30
 8020320:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020322:	681b      	ldr	r3, [r3, #0]
 8020324:	9312      	str	r3, [sp, #72]	; 0x48
 8020326:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020328:	685e      	ldr	r6, [r3, #4]
 802032a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 802032e:	3604      	adds	r6, #4
 8020330:	930d      	str	r3, [sp, #52]	; 0x34
 8020332:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020334:	2b00      	cmp	r3, #0
 8020336:	dc03      	bgt.n	8020340 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020338:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802033a:	2b00      	cmp	r3, #0
 802033c:	f340 8378 	ble.w	8020a30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8020340:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8020342:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020346:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802034a:	1e48      	subs	r0, r1, #1
 802034c:	1e57      	subs	r7, r2, #1
 802034e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020350:	2b00      	cmp	r3, #0
 8020352:	f340 818c 	ble.w	802066e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8020356:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8020358:	142b      	asrs	r3, r5, #16
 802035a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802035e:	d406      	bmi.n	802036e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020360:	4584      	cmp	ip, r0
 8020362:	da04      	bge.n	802036e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020364:	2b00      	cmp	r3, #0
 8020366:	db02      	blt.n	802036e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020368:	42bb      	cmp	r3, r7
 802036a:	f2c0 8181 	blt.w	8020670 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 802036e:	f11c 0c01 	adds.w	ip, ip, #1
 8020372:	f100 816f 	bmi.w	8020654 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020376:	4561      	cmp	r1, ip
 8020378:	f2c0 816c 	blt.w	8020654 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802037c:	3301      	adds	r3, #1
 802037e:	f100 8169 	bmi.w	8020654 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020382:	429a      	cmp	r2, r3
 8020384:	f2c0 8166 	blt.w	8020654 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802038a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802038c:	931a      	str	r3, [sp, #104]	; 0x68
 802038e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020390:	2b00      	cmp	r3, #0
 8020392:	f340 818c 	ble.w	80206ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8020396:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020398:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802039c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80203a0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80203a4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80203a6:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80203aa:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80203ac:	141b      	asrs	r3, r3, #16
 80203ae:	f100 81d0 	bmi.w	8020752 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80203b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80203b6:	4543      	cmp	r3, r8
 80203b8:	f280 81cb 	bge.w	8020752 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80203bc:	f1bc 0f00 	cmp.w	ip, #0
 80203c0:	f2c0 81c7 	blt.w	8020752 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80203c4:	f10e 38ff 	add.w	r8, lr, #4294967295
 80203c8:	45c4      	cmp	ip, r8
 80203ca:	f280 81c2 	bge.w	8020752 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80203ce:	b200      	sxth	r0, r0
 80203d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80203d2:	fb0c 3300 	mla	r3, ip, r0, r3
 80203d6:	eb04 0803 	add.w	r8, r4, r3
 80203da:	5ce3      	ldrb	r3, [r4, r3]
 80203dc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80203e0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80203e4:	2a00      	cmp	r2, #0
 80203e6:	f000 81a9 	beq.w	802073c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 80203ea:	f898 c001 	ldrb.w	ip, [r8, #1]
 80203ee:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80203f2:	940e      	str	r4, [sp, #56]	; 0x38
 80203f4:	0e24      	lsrs	r4, r4, #24
 80203f6:	9415      	str	r4, [sp, #84]	; 0x54
 80203f8:	b179      	cbz	r1, 802041a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80203fa:	eb08 0c00 	add.w	ip, r8, r0
 80203fe:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020402:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020406:	900a      	str	r0, [sp, #40]	; 0x28
 8020408:	0e00      	lsrs	r0, r0, #24
 802040a:	9013      	str	r0, [sp, #76]	; 0x4c
 802040c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020410:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020414:	900f      	str	r0, [sp, #60]	; 0x3c
 8020416:	0e00      	lsrs	r0, r0, #24
 8020418:	9016      	str	r0, [sp, #88]	; 0x58
 802041a:	b292      	uxth	r2, r2
 802041c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802041e:	b289      	uxth	r1, r1
 8020420:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020422:	fb02 f901 	mul.w	r9, r2, r1
 8020426:	0112      	lsls	r2, r2, #4
 8020428:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802042c:	eba2 0809 	sub.w	r8, r2, r9
 8020430:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020434:	b289      	uxth	r1, r1
 8020436:	fa1f f888 	uxth.w	r8, r8
 802043a:	1a52      	subs	r2, r2, r1
 802043c:	fb08 f000 	mul.w	r0, r8, r0
 8020440:	b292      	uxth	r2, r2
 8020442:	fb02 000e 	mla	r0, r2, lr, r0
 8020446:	fb01 0004 	mla	r0, r1, r4, r0
 802044a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802044c:	fb09 0004 	mla	r0, r9, r4, r0
 8020450:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020454:	2800      	cmp	r0, #0
 8020456:	f000 80f2 	beq.w	802063e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802045a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802045e:	d01b      	beq.n	8020498 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8020460:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020464:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020468:	fb0e fa0a 	mul.w	sl, lr, sl
 802046c:	fb0e fe03 	mul.w	lr, lr, r3
 8020470:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020474:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020478:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802047c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020480:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020484:	4453      	add	r3, sl
 8020486:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802048a:	0a1b      	lsrs	r3, r3, #8
 802048c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020490:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020494:	ea43 030c 	orr.w	r3, r3, ip
 8020498:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802049a:	2cff      	cmp	r4, #255	; 0xff
 802049c:	d021      	beq.n	80204e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802049e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80204a0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80204a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80204a6:	fb04 fb0b 	mul.w	fp, r4, fp
 80204aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80204ac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80204b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80204b2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80204b6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80204ba:	fb04 fa0a 	mul.w	sl, r4, sl
 80204be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80204c2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80204c6:	44de      	add	lr, fp
 80204c8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80204cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80204d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80204d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80204d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80204dc:	ea4e 040a 	orr.w	r4, lr, sl
 80204e0:	940e      	str	r4, [sp, #56]	; 0x38
 80204e2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80204e4:	2cff      	cmp	r4, #255	; 0xff
 80204e6:	d021      	beq.n	802052c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 80204e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80204ea:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80204ee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80204f0:	fb04 fb0b 	mul.w	fp, r4, fp
 80204f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80204f6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80204fa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80204fc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020500:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020504:	fb04 fa0a 	mul.w	sl, r4, sl
 8020508:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802050c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020510:	44de      	add	lr, fp
 8020512:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020516:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802051a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802051e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020522:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020526:	ea4e 040a 	orr.w	r4, lr, sl
 802052a:	940a      	str	r4, [sp, #40]	; 0x28
 802052c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802052e:	2cff      	cmp	r4, #255	; 0xff
 8020530:	d021      	beq.n	8020576 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8020532:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020534:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020538:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802053a:	fb04 fb0b 	mul.w	fp, r4, fp
 802053e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020540:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020544:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020546:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802054a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802054e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020552:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020556:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802055a:	44de      	add	lr, fp
 802055c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020560:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020564:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020568:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802056c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020570:	ea4e 040a 	orr.w	r4, lr, sl
 8020574:	940f      	str	r4, [sp, #60]	; 0x3c
 8020576:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020578:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802057c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020580:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020584:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020586:	fb08 fc0c 	mul.w	ip, r8, ip
 802058a:	fb02 cc0e 	mla	ip, r2, lr, ip
 802058e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020592:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020594:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020598:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802059c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802059e:	fb09 cc0e 	mla	ip, r9, lr, ip
 80205a2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80205a6:	fb08 f80e 	mul.w	r8, r8, lr
 80205aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205ae:	fb02 8303 	mla	r3, r2, r3, r8
 80205b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80205b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80205b8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80205bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80205be:	fb01 330a 	mla	r3, r1, sl, r3
 80205c2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80205c6:	fb09 3901 	mla	r9, r9, r1, r3
 80205ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80205cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80205ce:	4343      	muls	r3, r0
 80205d0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80205d4:	1c58      	adds	r0, r3, #1
 80205d6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80205da:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80205de:	ea4c 0c09 	orr.w	ip, ip, r9
 80205e2:	783b      	ldrb	r3, [r7, #0]
 80205e4:	fa5f f28c 	uxtb.w	r2, ip
 80205e8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80205ec:	fb12 f201 	smulbb	r2, r2, r1
 80205f0:	b2c0      	uxtb	r0, r0
 80205f2:	fb03 2300 	mla	r3, r3, r0, r2
 80205f6:	b29b      	uxth	r3, r3
 80205f8:	1c5a      	adds	r2, r3, #1
 80205fa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80205fe:	787a      	ldrb	r2, [r7, #1]
 8020600:	fb12 f200 	smulbb	r2, r2, r0
 8020604:	121b      	asrs	r3, r3, #8
 8020606:	703b      	strb	r3, [r7, #0]
 8020608:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802060c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020610:	fb03 2301 	mla	r3, r3, r1, r2
 8020614:	b29b      	uxth	r3, r3
 8020616:	1c5a      	adds	r2, r3, #1
 8020618:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802061c:	121b      	asrs	r3, r3, #8
 802061e:	707b      	strb	r3, [r7, #1]
 8020620:	78bb      	ldrb	r3, [r7, #2]
 8020622:	fb13 f000 	smulbb	r0, r3, r0
 8020626:	fb0c 0c01 	mla	ip, ip, r1, r0
 802062a:	fa1f fc8c 	uxth.w	ip, ip
 802062e:	f10c 0301 	add.w	r3, ip, #1
 8020632:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020636:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802063a:	f887 c002 	strb.w	ip, [r7, #2]
 802063e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020640:	3703      	adds	r7, #3
 8020642:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020644:	441a      	add	r2, r3
 8020646:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020648:	441d      	add	r5, r3
 802064a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802064c:	9231      	str	r2, [sp, #196]	; 0xc4
 802064e:	3b01      	subs	r3, #1
 8020650:	931a      	str	r3, [sp, #104]	; 0x68
 8020652:	e69c      	b.n	802038e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8020654:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020656:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8020658:	441c      	add	r4, r3
 802065a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802065c:	441d      	add	r5, r3
 802065e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020660:	9431      	str	r4, [sp, #196]	; 0xc4
 8020662:	3b01      	subs	r3, #1
 8020664:	9309      	str	r3, [sp, #36]	; 0x24
 8020666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020668:	3303      	adds	r3, #3
 802066a:	930c      	str	r3, [sp, #48]	; 0x30
 802066c:	e66f      	b.n	802034e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802066e:	d026      	beq.n	80206be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020672:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8020674:	3b01      	subs	r3, #1
 8020676:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8020678:	fb00 4003 	mla	r0, r0, r3, r4
 802067c:	1400      	asrs	r0, r0, #16
 802067e:	f53f ae83 	bmi.w	8020388 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020682:	3901      	subs	r1, #1
 8020684:	4288      	cmp	r0, r1
 8020686:	f6bf ae7f 	bge.w	8020388 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802068a:	9934      	ldr	r1, [sp, #208]	; 0xd0
 802068c:	fb01 5303 	mla	r3, r1, r3, r5
 8020690:	141b      	asrs	r3, r3, #16
 8020692:	f53f ae79 	bmi.w	8020388 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8020696:	3a01      	subs	r2, #1
 8020698:	4293      	cmp	r3, r2
 802069a:	f6bf ae75 	bge.w	8020388 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802069e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80206a0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80206a4:	f103 0e03 	add.w	lr, r3, #3
 80206a8:	f1bb 0f00 	cmp.w	fp, #0
 80206ac:	dc71      	bgt.n	8020792 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80206ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80206b0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80206b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80206b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80206ba:	4423      	add	r3, r4
 80206bc:	930c      	str	r3, [sp, #48]	; 0x30
 80206be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80206c0:	2b00      	cmp	r3, #0
 80206c2:	f340 81b5 	ble.w	8020a30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 80206c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80206ca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80206cc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80206d0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80206d4:	eef0 6a48 	vmov.f32	s13, s16
 80206d8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80206dc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80206e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80206e4:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 80206e8:	eef0 6a68 	vmov.f32	s13, s17
 80206ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80206f0:	ee16 5a90 	vmov	r5, s13
 80206f4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80206f8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80206fc:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020700:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020704:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020708:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802070c:	ee18 2a10 	vmov	r2, s16
 8020710:	eeb0 8a47 	vmov.f32	s16, s14
 8020714:	fb92 f3f3 	sdiv	r3, r2, r3
 8020718:	ee18 2a90 	vmov	r2, s17
 802071c:	9333      	str	r3, [sp, #204]	; 0xcc
 802071e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020720:	eef0 8a67 	vmov.f32	s17, s15
 8020724:	fb92 f3f3 	sdiv	r3, r2, r3
 8020728:	9334      	str	r3, [sp, #208]	; 0xd0
 802072a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802072c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802072e:	3b01      	subs	r3, #1
 8020730:	9319      	str	r3, [sp, #100]	; 0x64
 8020732:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020734:	bf08      	it	eq
 8020736:	4613      	moveq	r3, r2
 8020738:	9309      	str	r3, [sp, #36]	; 0x24
 802073a:	e5fa      	b.n	8020332 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802073c:	2900      	cmp	r1, #0
 802073e:	f43f ae6c 	beq.w	802041a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020742:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020746:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802074a:	900a      	str	r0, [sp, #40]	; 0x28
 802074c:	0e00      	lsrs	r0, r0, #24
 802074e:	9013      	str	r0, [sp, #76]	; 0x4c
 8020750:	e663      	b.n	802041a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8020752:	f113 0801 	adds.w	r8, r3, #1
 8020756:	f53f af72 	bmi.w	802063e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802075a:	4540      	cmp	r0, r8
 802075c:	f6ff af6f 	blt.w	802063e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020760:	f11c 0801 	adds.w	r8, ip, #1
 8020764:	f53f af6b 	bmi.w	802063e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020768:	45c6      	cmp	lr, r8
 802076a:	f6ff af68 	blt.w	802063e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802076e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020770:	b200      	sxth	r0, r0
 8020772:	9302      	str	r3, [sp, #8]
 8020774:	fa0f f38e 	sxth.w	r3, lr
 8020778:	9000      	str	r0, [sp, #0]
 802077a:	9301      	str	r3, [sp, #4]
 802077c:	4633      	mov	r3, r6
 802077e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020780:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020784:	e9cd c203 	strd	ip, r2, [sp, #12]
 8020788:	4639      	mov	r1, r7
 802078a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802078c:	f7ff fc60 	bl	8020050 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8020790:	e755      	b.n	802063e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020792:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8020794:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020798:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802079a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802079e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80207a0:	1427      	asrs	r7, r4, #16
 80207a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80207a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80207a8:	142b      	asrs	r3, r5, #16
 80207aa:	fb01 7303 	mla	r3, r1, r3, r7
 80207ae:	18e7      	adds	r7, r4, r3
 80207b0:	5ce3      	ldrb	r3, [r4, r3]
 80207b2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80207b6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80207ba:	2a00      	cmp	r2, #0
 80207bc:	f000 812e 	beq.w	8020a1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 80207c0:	f897 8001 	ldrb.w	r8, [r7, #1]
 80207c4:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80207c8:	9410      	str	r4, [sp, #64]	; 0x40
 80207ca:	0e24      	lsrs	r4, r4, #24
 80207cc:	9417      	str	r4, [sp, #92]	; 0x5c
 80207ce:	b170      	cbz	r0, 80207ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80207d0:	eb07 0801 	add.w	r8, r7, r1
 80207d4:	5c79      	ldrb	r1, [r7, r1]
 80207d6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80207da:	910b      	str	r1, [sp, #44]	; 0x2c
 80207dc:	0e09      	lsrs	r1, r1, #24
 80207de:	9114      	str	r1, [sp, #80]	; 0x50
 80207e0:	f898 1001 	ldrb.w	r1, [r8, #1]
 80207e4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80207e8:	9111      	str	r1, [sp, #68]	; 0x44
 80207ea:	0e09      	lsrs	r1, r1, #24
 80207ec:	9118      	str	r1, [sp, #96]	; 0x60
 80207ee:	b292      	uxth	r2, r2
 80207f0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80207f2:	b280      	uxth	r0, r0
 80207f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80207f6:	fb02 f900 	mul.w	r9, r2, r0
 80207fa:	0112      	lsls	r2, r2, #4
 80207fc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020800:	eba2 0809 	sub.w	r8, r2, r9
 8020804:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020808:	b280      	uxth	r0, r0
 802080a:	fa1f f888 	uxth.w	r8, r8
 802080e:	1a12      	subs	r2, r2, r0
 8020810:	fb08 f101 	mul.w	r1, r8, r1
 8020814:	b292      	uxth	r2, r2
 8020816:	fb02 110c 	mla	r1, r2, ip, r1
 802081a:	fb00 1104 	mla	r1, r0, r4, r1
 802081e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020820:	fb09 1104 	mla	r1, r9, r4, r1
 8020824:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020828:	2900      	cmp	r1, #0
 802082a:	f000 80ec 	beq.w	8020a06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 802082e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020832:	d019      	beq.n	8020868 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 8020834:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020838:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802083c:	fb0c fa0a 	mul.w	sl, ip, sl
 8020840:	fb0c fc03 	mul.w	ip, ip, r3
 8020844:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020848:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802084c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020850:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020854:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020858:	4453      	add	r3, sl
 802085a:	0a3f      	lsrs	r7, r7, #8
 802085c:	0a1b      	lsrs	r3, r3, #8
 802085e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020862:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020866:	433b      	orrs	r3, r7
 8020868:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802086a:	2cff      	cmp	r4, #255	; 0xff
 802086c:	d020      	beq.n	80208b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 802086e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020870:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020874:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020876:	4367      	muls	r7, r4
 8020878:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802087a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802087e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020882:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020884:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020888:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802088c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020890:	44bc      	add	ip, r7
 8020892:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020896:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802089a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802089e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80208aa:	ea4c 040a 	orr.w	r4, ip, sl
 80208ae:	9410      	str	r4, [sp, #64]	; 0x40
 80208b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80208b2:	2cff      	cmp	r4, #255	; 0xff
 80208b4:	d020      	beq.n	80208f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 80208b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80208b8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80208bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80208be:	4367      	muls	r7, r4
 80208c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80208c2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80208c6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80208ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80208cc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80208d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208d4:	fb04 fa0a 	mul.w	sl, r4, sl
 80208d8:	44bc      	add	ip, r7
 80208da:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80208de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80208e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80208f2:	ea4c 040a 	orr.w	r4, ip, sl
 80208f6:	940b      	str	r4, [sp, #44]	; 0x2c
 80208f8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80208fa:	2cff      	cmp	r4, #255	; 0xff
 80208fc:	d020      	beq.n	8020940 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80208fe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020900:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020904:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020906:	4367      	muls	r7, r4
 8020908:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802090a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802090e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020912:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020914:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020918:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802091c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020920:	44bc      	add	ip, r7
 8020922:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020926:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802092a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802092e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020932:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020936:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802093a:	ea4c 040a 	orr.w	r4, ip, sl
 802093e:	9411      	str	r4, [sp, #68]	; 0x44
 8020940:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020942:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020946:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802094a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802094e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020950:	fb08 f707 	mul.w	r7, r8, r7
 8020954:	fb02 770c 	mla	r7, r2, ip, r7
 8020958:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802095c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802095e:	fb00 770c 	mla	r7, r0, ip, r7
 8020962:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020966:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020968:	fb09 770c 	mla	r7, r9, ip, r7
 802096c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020970:	fb08 f80c 	mul.w	r8, r8, ip
 8020974:	0a3f      	lsrs	r7, r7, #8
 8020976:	fb02 8303 	mla	r3, r2, r3, r8
 802097a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802097c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020980:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020984:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020986:	fb00 330a 	mla	r3, r0, sl, r3
 802098a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802098e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020990:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020996:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802099a:	434b      	muls	r3, r1
 802099c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80209a0:	1c59      	adds	r1, r3, #1
 80209a2:	ea47 070c 	orr.w	r7, r7, ip
 80209a6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80209aa:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80209ae:	b2fa      	uxtb	r2, r7
 80209b0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80209b4:	fb12 f200 	smulbb	r2, r2, r0
 80209b8:	b2c9      	uxtb	r1, r1
 80209ba:	fb03 2301 	mla	r3, r3, r1, r2
 80209be:	b29b      	uxth	r3, r3
 80209c0:	1c5a      	adds	r2, r3, #1
 80209c2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80209c6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80209ca:	fb12 f201 	smulbb	r2, r2, r1
 80209ce:	121b      	asrs	r3, r3, #8
 80209d0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80209d4:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80209d8:	0c3f      	lsrs	r7, r7, #16
 80209da:	fb03 2300 	mla	r3, r3, r0, r2
 80209de:	b29b      	uxth	r3, r3
 80209e0:	1c5a      	adds	r2, r3, #1
 80209e2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80209e6:	121b      	asrs	r3, r3, #8
 80209e8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80209ec:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80209f0:	fb13 f101 	smulbb	r1, r3, r1
 80209f4:	fb07 1700 	mla	r7, r7, r0, r1
 80209f8:	b2bf      	uxth	r7, r7
 80209fa:	1c7b      	adds	r3, r7, #1
 80209fc:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8020a00:	123f      	asrs	r7, r7, #8
 8020a02:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020a06:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020a08:	f10e 0e03 	add.w	lr, lr, #3
 8020a0c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8020a0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020a12:	441a      	add	r2, r3
 8020a14:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020a16:	9231      	str	r2, [sp, #196]	; 0xc4
 8020a18:	441d      	add	r5, r3
 8020a1a:	e645      	b.n	80206a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8020a1c:	2800      	cmp	r0, #0
 8020a1e:	f43f aee6 	beq.w	80207ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8020a22:	5c79      	ldrb	r1, [r7, r1]
 8020a24:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020a28:	910b      	str	r1, [sp, #44]	; 0x2c
 8020a2a:	0e09      	lsrs	r1, r1, #24
 8020a2c:	9114      	str	r1, [sp, #80]	; 0x50
 8020a2e:	e6de      	b.n	80207ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8020a30:	b01f      	add	sp, #124	; 0x7c
 8020a32:	ecbd 8b08 	vpop	{d8-d11}
 8020a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020a3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a40:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 8020a44:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8020a48:	2c00      	cmp	r4, #0
 8020a4a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8020a4e:	fb04 060c 	mla	r6, r4, ip, r0
 8020a52:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8020a56:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8020a5a:	eb02 0e06 	add.w	lr, r2, r6
 8020a5e:	db3d      	blt.n	8020adc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8020a60:	45a0      	cmp	r8, r4
 8020a62:	dd3b      	ble.n	8020adc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8020a64:	2800      	cmp	r0, #0
 8020a66:	db37      	blt.n	8020ad8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020a68:	4584      	cmp	ip, r0
 8020a6a:	dd35      	ble.n	8020ad8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020a6c:	5d92      	ldrb	r2, [r2, r6]
 8020a6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020a72:	1c46      	adds	r6, r0, #1
 8020a74:	d435      	bmi.n	8020ae2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8020a76:	45b4      	cmp	ip, r6
 8020a78:	dd33      	ble.n	8020ae2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 8020a7a:	b3a5      	cbz	r5, 8020ae6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 8020a7c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8020a80:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8020a84:	3401      	adds	r4, #1
 8020a86:	d432      	bmi.n	8020aee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8020a88:	45a0      	cmp	r8, r4
 8020a8a:	dd30      	ble.n	8020aee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8020a8c:	b397      	cbz	r7, 8020af4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 8020a8e:	2800      	cmp	r0, #0
 8020a90:	db2b      	blt.n	8020aea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8020a92:	4584      	cmp	ip, r0
 8020a94:	dd29      	ble.n	8020aea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8020a96:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8020a9a:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8020a9e:	3001      	adds	r0, #1
 8020aa0:	d42b      	bmi.n	8020afa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8020aa2:	4584      	cmp	ip, r0
 8020aa4:	dd29      	ble.n	8020afa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8020aa6:	b355      	cbz	r5, 8020afe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 8020aa8:	44f4      	add	ip, lr
 8020aaa:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020aae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8020ab2:	2d0f      	cmp	r5, #15
 8020ab4:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020ab8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020abc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020ac0:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8020ac4:	d801      	bhi.n	8020aca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 8020ac6:	2f0f      	cmp	r7, #15
 8020ac8:	d91b      	bls.n	8020b02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 8020aca:	4b7f      	ldr	r3, [pc, #508]	; (8020cc8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8020acc:	f240 1157 	movw	r1, #343	; 0x157
 8020ad0:	4a7e      	ldr	r2, [pc, #504]	; (8020ccc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8020ad2:	487f      	ldr	r0, [pc, #508]	; (8020cd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8020ad4:	f005 f850 	bl	8025b78 <__assert_func>
 8020ad8:	2200      	movs	r2, #0
 8020ada:	e7ca      	b.n	8020a72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8020adc:	2600      	movs	r6, #0
 8020ade:	4632      	mov	r2, r6
 8020ae0:	e7d0      	b.n	8020a84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8020ae2:	2600      	movs	r6, #0
 8020ae4:	e7ce      	b.n	8020a84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8020ae6:	462e      	mov	r6, r5
 8020ae8:	e7cc      	b.n	8020a84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8020aea:	2400      	movs	r4, #0
 8020aec:	e7d7      	b.n	8020a9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 8020aee:	2300      	movs	r3, #0
 8020af0:	461c      	mov	r4, r3
 8020af2:	e7de      	b.n	8020ab2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020af4:	463b      	mov	r3, r7
 8020af6:	463c      	mov	r4, r7
 8020af8:	e7db      	b.n	8020ab2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020afa:	2300      	movs	r3, #0
 8020afc:	e7d9      	b.n	8020ab2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020afe:	462b      	mov	r3, r5
 8020b00:	e7d7      	b.n	8020ab2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8020b02:	b2a8      	uxth	r0, r5
 8020b04:	b2bf      	uxth	r7, r7
 8020b06:	fb07 fe00 	mul.w	lr, r7, r0
 8020b0a:	0100      	lsls	r0, r0, #4
 8020b0c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8020b10:	eba0 0c0e 	sub.w	ip, r0, lr
 8020b14:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8020b18:	b2bf      	uxth	r7, r7
 8020b1a:	fa1f fc8c 	uxth.w	ip, ip
 8020b1e:	1bc5      	subs	r5, r0, r7
 8020b20:	fb0c f00a 	mul.w	r0, ip, sl
 8020b24:	b2ad      	uxth	r5, r5
 8020b26:	fb05 000b 	mla	r0, r5, fp, r0
 8020b2a:	fb07 0009 	mla	r0, r7, r9, r0
 8020b2e:	fb0e 0008 	mla	r0, lr, r8, r0
 8020b32:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020b36:	9001      	str	r0, [sp, #4]
 8020b38:	2800      	cmp	r0, #0
 8020b3a:	f000 80c2 	beq.w	8020cc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 8020b3e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020b42:	d018      	beq.n	8020b76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 8020b44:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8020b48:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020b4c:	fb0b f000 	mul.w	r0, fp, r0
 8020b50:	fb0b fb02 	mul.w	fp, fp, r2
 8020b54:	0a02      	lsrs	r2, r0, #8
 8020b56:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020b5a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020b5e:	4402      	add	r2, r0
 8020b60:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8020b64:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8020b68:	0a12      	lsrs	r2, r2, #8
 8020b6a:	0a00      	lsrs	r0, r0, #8
 8020b6c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020b70:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020b74:	4302      	orrs	r2, r0
 8020b76:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020b7a:	d01a      	beq.n	8020bb2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 8020b7c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8020b80:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020b84:	fb0a f000 	mul.w	r0, sl, r0
 8020b88:	fb0a fa06 	mul.w	sl, sl, r6
 8020b8c:	0a06      	lsrs	r6, r0, #8
 8020b8e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8020b92:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020b96:	4406      	add	r6, r0
 8020b98:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8020b9c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8020ba0:	0a36      	lsrs	r6, r6, #8
 8020ba2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ba6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020baa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020bae:	ea46 060a 	orr.w	r6, r6, sl
 8020bb2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020bb6:	d01b      	beq.n	8020bf0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 8020bb8:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8020bbc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020bc0:	fb09 fa0a 	mul.w	sl, r9, sl
 8020bc4:	fb09 f004 	mul.w	r0, r9, r4
 8020bc8:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8020bcc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020bd0:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8020bd4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020bd8:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8020bdc:	4454      	add	r4, sl
 8020bde:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020be2:	0a24      	lsrs	r4, r4, #8
 8020be4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020be8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8020bec:	ea44 0409 	orr.w	r4, r4, r9
 8020bf0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020bf4:	d01b      	beq.n	8020c2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 8020bf6:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8020bfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020bfe:	fb08 f909 	mul.w	r9, r8, r9
 8020c02:	fb08 f003 	mul.w	r0, r8, r3
 8020c06:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8020c0a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8020c0e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8020c12:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c16:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8020c1a:	444b      	add	r3, r9
 8020c1c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020c20:	0a1b      	lsrs	r3, r3, #8
 8020c22:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020c26:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c2a:	ea43 0308 	orr.w	r3, r3, r8
 8020c2e:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8020c32:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020c36:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8020c3a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020c3e:	fb0c f000 	mul.w	r0, ip, r0
 8020c42:	fb0c f606 	mul.w	r6, ip, r6
 8020c46:	fb05 0808 	mla	r8, r5, r8, r0
 8020c4a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8020c4e:	fb05 6502 	mla	r5, r5, r2, r6
 8020c52:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020c56:	fb07 8800 	mla	r8, r7, r0, r8
 8020c5a:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8020c5e:	fb07 5704 	mla	r7, r7, r4, r5
 8020c62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020c66:	fb0e 8000 	mla	r0, lr, r0, r8
 8020c6a:	780a      	ldrb	r2, [r1, #0]
 8020c6c:	fb0e 7e03 	mla	lr, lr, r3, r7
 8020c70:	9b01      	ldr	r3, [sp, #4]
 8020c72:	0a00      	lsrs	r0, r0, #8
 8020c74:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020c78:	43db      	mvns	r3, r3
 8020c7a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020c7e:	b2db      	uxtb	r3, r3
 8020c80:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020c84:	ea40 0e0e 	orr.w	lr, r0, lr
 8020c88:	fb02 f003 	mul.w	r0, r2, r3
 8020c8c:	1c42      	adds	r2, r0, #1
 8020c8e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020c92:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8020c96:	700a      	strb	r2, [r1, #0]
 8020c98:	784a      	ldrb	r2, [r1, #1]
 8020c9a:	435a      	muls	r2, r3
 8020c9c:	1c50      	adds	r0, r2, #1
 8020c9e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8020ca2:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8020ca6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020caa:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020cae:	704a      	strb	r2, [r1, #1]
 8020cb0:	788a      	ldrb	r2, [r1, #2]
 8020cb2:	4353      	muls	r3, r2
 8020cb4:	1c5a      	adds	r2, r3, #1
 8020cb6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020cba:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8020cbe:	f881 e002 	strb.w	lr, [r1, #2]
 8020cc2:	b003      	add	sp, #12
 8020cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cc8:	0802b042 	.word	0x0802b042
 8020ccc:	0802b53a 	.word	0x0802b53a
 8020cd0:	0802b10b 	.word	0x0802b10b

08020cd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cd8:	ed2d 8b0a 	vpush	{d8-d12}
 8020cdc:	b09b      	sub	sp, #108	; 0x6c
 8020cde:	eeb0 aa40 	vmov.f32	s20, s0
 8020ce2:	eef0 9a60 	vmov.f32	s19, s1
 8020ce6:	9218      	str	r2, [sp, #96]	; 0x60
 8020ce8:	eeb0 9a41 	vmov.f32	s18, s2
 8020cec:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8020cee:	eeb0 8a62 	vmov.f32	s16, s5
 8020cf2:	9019      	str	r0, [sp, #100]	; 0x64
 8020cf4:	eef0 8a43 	vmov.f32	s17, s6
 8020cf8:	6850      	ldr	r0, [r2, #4]
 8020cfa:	eeb0 ca44 	vmov.f32	s24, s8
 8020cfe:	9116      	str	r1, [sp, #88]	; 0x58
 8020d00:	eef0 ba64 	vmov.f32	s23, s9
 8020d04:	9307      	str	r3, [sp, #28]
 8020d06:	eeb0 ba45 	vmov.f32	s22, s10
 8020d0a:	6812      	ldr	r2, [r2, #0]
 8020d0c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020d10:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8020d12:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8020d16:	fb00 1303 	mla	r3, r0, r3, r1
 8020d1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d1e:	18d3      	adds	r3, r2, r3
 8020d20:	930a      	str	r3, [sp, #40]	; 0x28
 8020d22:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020d24:	681b      	ldr	r3, [r3, #0]
 8020d26:	930f      	str	r3, [sp, #60]	; 0x3c
 8020d28:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020d2a:	685e      	ldr	r6, [r3, #4]
 8020d2c:	3604      	adds	r6, #4
 8020d2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020d30:	2b00      	cmp	r3, #0
 8020d32:	dc03      	bgt.n	8020d3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020d34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	f340 834f 	ble.w	80213da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8020d3c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020d3e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020d42:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020d46:	1e48      	subs	r0, r1, #1
 8020d48:	1e57      	subs	r7, r2, #1
 8020d4a:	9b07      	ldr	r3, [sp, #28]
 8020d4c:	2b00      	cmp	r3, #0
 8020d4e:	f340 8178 	ble.w	8021042 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020d52:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8020d54:	142b      	asrs	r3, r5, #16
 8020d56:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020d5a:	d406      	bmi.n	8020d6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020d5c:	4584      	cmp	ip, r0
 8020d5e:	da04      	bge.n	8020d6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	db02      	blt.n	8020d6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020d64:	42bb      	cmp	r3, r7
 8020d66:	f2c0 816d 	blt.w	8021044 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020d6a:	f11c 0c01 	adds.w	ip, ip, #1
 8020d6e:	f100 815b 	bmi.w	8021028 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020d72:	4561      	cmp	r1, ip
 8020d74:	f2c0 8158 	blt.w	8021028 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020d78:	3301      	adds	r3, #1
 8020d7a:	f100 8155 	bmi.w	8021028 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020d7e:	429a      	cmp	r2, r3
 8020d80:	f2c0 8152 	blt.w	8021028 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020d84:	9b07      	ldr	r3, [sp, #28]
 8020d86:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020d88:	9317      	str	r3, [sp, #92]	; 0x5c
 8020d8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	f340 8178 	ble.w	8021082 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8020d92:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8020d94:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020d98:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020d9c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020da0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020da2:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8020da6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8020da8:	141b      	asrs	r3, r3, #16
 8020daa:	f100 81ba 	bmi.w	8021122 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8020dae:	f101 38ff 	add.w	r8, r1, #4294967295
 8020db2:	4543      	cmp	r3, r8
 8020db4:	f280 81b5 	bge.w	8021122 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8020db8:	f1bc 0f00 	cmp.w	ip, #0
 8020dbc:	f2c0 81b1 	blt.w	8021122 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8020dc0:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020dc4:	45c4      	cmp	ip, r8
 8020dc6:	f280 81ac 	bge.w	8021122 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8020dca:	b209      	sxth	r1, r1
 8020dcc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020dce:	fb0c 3301 	mla	r3, ip, r1, r3
 8020dd2:	eb04 0803 	add.w	r8, r4, r3
 8020dd6:	5ce3      	ldrb	r3, [r4, r3]
 8020dd8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020ddc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020de0:	2a00      	cmp	r2, #0
 8020de2:	f000 8193 	beq.w	802110c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8020de6:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020dea:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020dee:	940b      	str	r4, [sp, #44]	; 0x2c
 8020df0:	0e24      	lsrs	r4, r4, #24
 8020df2:	9412      	str	r4, [sp, #72]	; 0x48
 8020df4:	b178      	cbz	r0, 8020e16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8020df6:	eb08 0c01 	add.w	ip, r8, r1
 8020dfa:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020dfe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020e02:	9108      	str	r1, [sp, #32]
 8020e04:	0e09      	lsrs	r1, r1, #24
 8020e06:	9110      	str	r1, [sp, #64]	; 0x40
 8020e08:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8020e0c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020e10:	910c      	str	r1, [sp, #48]	; 0x30
 8020e12:	0e09      	lsrs	r1, r1, #24
 8020e14:	9113      	str	r1, [sp, #76]	; 0x4c
 8020e16:	b292      	uxth	r2, r2
 8020e18:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020e1a:	b280      	uxth	r0, r0
 8020e1c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020e1e:	fb02 f900 	mul.w	r9, r2, r0
 8020e22:	0112      	lsls	r2, r2, #4
 8020e24:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020e28:	eba2 0809 	sub.w	r8, r2, r9
 8020e2c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020e30:	b280      	uxth	r0, r0
 8020e32:	fa1f f888 	uxth.w	r8, r8
 8020e36:	1a12      	subs	r2, r2, r0
 8020e38:	fb08 f101 	mul.w	r1, r8, r1
 8020e3c:	b292      	uxth	r2, r2
 8020e3e:	fb02 110e 	mla	r1, r2, lr, r1
 8020e42:	fb00 1104 	mla	r1, r0, r4, r1
 8020e46:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020e48:	fb09 1104 	mla	r1, r9, r4, r1
 8020e4c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020e50:	2900      	cmp	r1, #0
 8020e52:	f000 80de 	beq.w	8021012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8020e56:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020e5a:	d01b      	beq.n	8020e94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8020e5c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020e60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e64:	fb0e fa0a 	mul.w	sl, lr, sl
 8020e68:	fb0e fe03 	mul.w	lr, lr, r3
 8020e6c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020e70:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020e74:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020e78:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020e7c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020e80:	4453      	add	r3, sl
 8020e82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e86:	0a1b      	lsrs	r3, r3, #8
 8020e88:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020e8c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020e90:	ea43 030c 	orr.w	r3, r3, ip
 8020e94:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020e96:	2cff      	cmp	r4, #255	; 0xff
 8020e98:	d021      	beq.n	8020ede <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020e9a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020e9c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020ea0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020ea2:	fb04 fb0b 	mul.w	fp, r4, fp
 8020ea6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020ea8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020eac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020eae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020eb2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020eb6:	fb04 fa0a 	mul.w	sl, r4, sl
 8020eba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ebe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020ec2:	44de      	add	lr, fp
 8020ec4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020ec8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ecc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ed0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020ed4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020ed8:	ea4e 040a 	orr.w	r4, lr, sl
 8020edc:	940b      	str	r4, [sp, #44]	; 0x2c
 8020ede:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020ee0:	2cff      	cmp	r4, #255	; 0xff
 8020ee2:	d021      	beq.n	8020f28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8020ee4:	9c08      	ldr	r4, [sp, #32]
 8020ee6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020eea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020eec:	fb04 fb0b 	mul.w	fp, r4, fp
 8020ef0:	9c08      	ldr	r4, [sp, #32]
 8020ef2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020ef6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020ef8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020efc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020f00:	fb04 fa0a 	mul.w	sl, r4, sl
 8020f04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f08:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020f0c:	44de      	add	lr, fp
 8020f0e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020f12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020f16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f1e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020f22:	ea4e 040a 	orr.w	r4, lr, sl
 8020f26:	9408      	str	r4, [sp, #32]
 8020f28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020f2a:	2cff      	cmp	r4, #255	; 0xff
 8020f2c:	d021      	beq.n	8020f72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8020f2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020f30:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020f34:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020f36:	fb04 fb0b 	mul.w	fp, r4, fp
 8020f3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020f3c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020f40:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020f42:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020f46:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020f4a:	fb04 fa0a 	mul.w	sl, r4, sl
 8020f4e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f52:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020f56:	44de      	add	lr, fp
 8020f58:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020f5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020f60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020f64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020f6c:	ea4e 040a 	orr.w	r4, lr, sl
 8020f70:	940c      	str	r4, [sp, #48]	; 0x30
 8020f72:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020f74:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020f78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020f7c:	43c9      	mvns	r1, r1
 8020f7e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020f82:	9c08      	ldr	r4, [sp, #32]
 8020f84:	b2c9      	uxtb	r1, r1
 8020f86:	fb08 fc0c 	mul.w	ip, r8, ip
 8020f8a:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020f8e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020f92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020f94:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020f98:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020f9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020f9e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020fa2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020fa6:	fb08 f80e 	mul.w	r8, r8, lr
 8020faa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fae:	fb02 8303 	mla	r3, r2, r3, r8
 8020fb2:	9a08      	ldr	r2, [sp, #32]
 8020fb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020fb8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020fbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020fbe:	fb00 330a 	mla	r3, r0, sl, r3
 8020fc2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020fc6:	fb09 3900 	mla	r9, r9, r0, r3
 8020fca:	783b      	ldrb	r3, [r7, #0]
 8020fcc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020fd0:	fb03 f201 	mul.w	r2, r3, r1
 8020fd4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020fd8:	1c53      	adds	r3, r2, #1
 8020fda:	ea4c 0c09 	orr.w	ip, ip, r9
 8020fde:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020fe2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020fe6:	703b      	strb	r3, [r7, #0]
 8020fe8:	787b      	ldrb	r3, [r7, #1]
 8020fea:	434b      	muls	r3, r1
 8020fec:	1c5a      	adds	r2, r3, #1
 8020fee:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020ff2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020ff6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020ffa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020ffe:	707b      	strb	r3, [r7, #1]
 8021000:	78bb      	ldrb	r3, [r7, #2]
 8021002:	4359      	muls	r1, r3
 8021004:	1c4b      	adds	r3, r1, #1
 8021006:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802100a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802100e:	f887 c002 	strb.w	ip, [r7, #2]
 8021012:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8021014:	3703      	adds	r7, #3
 8021016:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021018:	441a      	add	r2, r3
 802101a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802101c:	441d      	add	r5, r3
 802101e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021020:	922f      	str	r2, [sp, #188]	; 0xbc
 8021022:	3b01      	subs	r3, #1
 8021024:	9317      	str	r3, [sp, #92]	; 0x5c
 8021026:	e6b0      	b.n	8020d8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8021028:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802102a:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 802102c:	441c      	add	r4, r3
 802102e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021030:	441d      	add	r5, r3
 8021032:	9b07      	ldr	r3, [sp, #28]
 8021034:	942f      	str	r4, [sp, #188]	; 0xbc
 8021036:	3b01      	subs	r3, #1
 8021038:	9307      	str	r3, [sp, #28]
 802103a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802103c:	3303      	adds	r3, #3
 802103e:	930a      	str	r3, [sp, #40]	; 0x28
 8021040:	e683      	b.n	8020d4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021042:	d026      	beq.n	8021092 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8021044:	9b07      	ldr	r3, [sp, #28]
 8021046:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8021048:	3b01      	subs	r3, #1
 802104a:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 802104c:	fb00 4003 	mla	r0, r0, r3, r4
 8021050:	1400      	asrs	r0, r0, #16
 8021052:	f53f ae97 	bmi.w	8020d84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021056:	3901      	subs	r1, #1
 8021058:	4288      	cmp	r0, r1
 802105a:	f6bf ae93 	bge.w	8020d84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802105e:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8021060:	fb01 5303 	mla	r3, r1, r3, r5
 8021064:	141b      	asrs	r3, r3, #16
 8021066:	f53f ae8d 	bmi.w	8020d84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802106a:	3a01      	subs	r2, #1
 802106c:	4293      	cmp	r3, r2
 802106e:	f6bf ae89 	bge.w	8020d84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8021072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021074:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021078:	f103 0e03 	add.w	lr, r3, #3
 802107c:	f1bb 0f00 	cmp.w	fp, #0
 8021080:	dc6d      	bgt.n	802115e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8021082:	9b07      	ldr	r3, [sp, #28]
 8021084:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802108a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802108e:	4423      	add	r3, r4
 8021090:	930a      	str	r3, [sp, #40]	; 0x28
 8021092:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021094:	2b00      	cmp	r3, #0
 8021096:	f340 81a0 	ble.w	80213da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802109a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802109e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80210a0:	ee79 9aab 	vadd.f32	s19, s19, s23
 80210a4:	eef0 6a48 	vmov.f32	s13, s16
 80210a8:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80210ac:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80210b0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80210b4:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 80210b8:	eef0 6a68 	vmov.f32	s13, s17
 80210bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80210c0:	ee16 5a90 	vmov	r5, s13
 80210c4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80210c8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80210cc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80210d0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80210d4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80210d8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80210dc:	ee18 2a10 	vmov	r2, s16
 80210e0:	eeb0 8a47 	vmov.f32	s16, s14
 80210e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80210e8:	ee18 2a90 	vmov	r2, s17
 80210ec:	9331      	str	r3, [sp, #196]	; 0xc4
 80210ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80210f0:	eef0 8a67 	vmov.f32	s17, s15
 80210f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80210f8:	9332      	str	r3, [sp, #200]	; 0xc8
 80210fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80210fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80210fe:	3b01      	subs	r3, #1
 8021100:	9316      	str	r3, [sp, #88]	; 0x58
 8021102:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021104:	bf08      	it	eq
 8021106:	4613      	moveq	r3, r2
 8021108:	9307      	str	r3, [sp, #28]
 802110a:	e610      	b.n	8020d2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802110c:	2800      	cmp	r0, #0
 802110e:	f43f ae82 	beq.w	8020e16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021112:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021116:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802111a:	9108      	str	r1, [sp, #32]
 802111c:	0e09      	lsrs	r1, r1, #24
 802111e:	9110      	str	r1, [sp, #64]	; 0x40
 8021120:	e679      	b.n	8020e16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021122:	f113 0801 	adds.w	r8, r3, #1
 8021126:	f53f af74 	bmi.w	8021012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802112a:	4541      	cmp	r1, r8
 802112c:	f6ff af71 	blt.w	8021012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021130:	f11c 0801 	adds.w	r8, ip, #1
 8021134:	f53f af6d 	bmi.w	8021012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021138:	45c6      	cmp	lr, r8
 802113a:	f6ff af6a 	blt.w	8021012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802113e:	b209      	sxth	r1, r1
 8021140:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021144:	fa0f f38e 	sxth.w	r3, lr
 8021148:	9100      	str	r1, [sp, #0]
 802114a:	4639      	mov	r1, r7
 802114c:	9301      	str	r3, [sp, #4]
 802114e:	4633      	mov	r3, r6
 8021150:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8021154:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021156:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021158:	f7ff fc70 	bl	8020a3c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 802115c:	e759      	b.n	8021012 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802115e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021160:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021164:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8021166:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802116a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802116c:	1427      	asrs	r7, r4, #16
 802116e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021170:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021174:	142b      	asrs	r3, r5, #16
 8021176:	fb01 7303 	mla	r3, r1, r3, r7
 802117a:	18e7      	adds	r7, r4, r3
 802117c:	5ce3      	ldrb	r3, [r4, r3]
 802117e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021182:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021186:	2a00      	cmp	r2, #0
 8021188:	f000 811d 	beq.w	80213c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 802118c:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021190:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8021194:	940d      	str	r4, [sp, #52]	; 0x34
 8021196:	0e24      	lsrs	r4, r4, #24
 8021198:	9414      	str	r4, [sp, #80]	; 0x50
 802119a:	b170      	cbz	r0, 80211ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 802119c:	eb07 0801 	add.w	r8, r7, r1
 80211a0:	5c79      	ldrb	r1, [r7, r1]
 80211a2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80211a6:	9109      	str	r1, [sp, #36]	; 0x24
 80211a8:	0e09      	lsrs	r1, r1, #24
 80211aa:	9111      	str	r1, [sp, #68]	; 0x44
 80211ac:	f898 1001 	ldrb.w	r1, [r8, #1]
 80211b0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80211b4:	910e      	str	r1, [sp, #56]	; 0x38
 80211b6:	0e09      	lsrs	r1, r1, #24
 80211b8:	9115      	str	r1, [sp, #84]	; 0x54
 80211ba:	b292      	uxth	r2, r2
 80211bc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80211be:	b280      	uxth	r0, r0
 80211c0:	fb02 f900 	mul.w	r9, r2, r0
 80211c4:	0112      	lsls	r2, r2, #4
 80211c6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80211ca:	eba2 0809 	sub.w	r8, r2, r9
 80211ce:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80211d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80211d4:	b280      	uxth	r0, r0
 80211d6:	fa1f f888 	uxth.w	r8, r8
 80211da:	1a09      	subs	r1, r1, r0
 80211dc:	fb08 f202 	mul.w	r2, r8, r2
 80211e0:	b289      	uxth	r1, r1
 80211e2:	fb01 220c 	mla	r2, r1, ip, r2
 80211e6:	fb00 2204 	mla	r2, r0, r4, r2
 80211ea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80211ec:	fb09 2204 	mla	r2, r9, r4, r2
 80211f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80211f4:	2a00      	cmp	r2, #0
 80211f6:	f000 80db 	beq.w	80213b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80211fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80211fe:	d019      	beq.n	8021234 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8021200:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021204:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021208:	fb0c fa0a 	mul.w	sl, ip, sl
 802120c:	fb0c fc03 	mul.w	ip, ip, r3
 8021210:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021214:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021218:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802121c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021220:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021224:	4453      	add	r3, sl
 8021226:	0a3f      	lsrs	r7, r7, #8
 8021228:	0a1b      	lsrs	r3, r3, #8
 802122a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802122e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021232:	433b      	orrs	r3, r7
 8021234:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021236:	2cff      	cmp	r4, #255	; 0xff
 8021238:	d020      	beq.n	802127c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 802123a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802123c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021240:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021242:	4367      	muls	r7, r4
 8021244:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021246:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802124a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802124e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021250:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021254:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021258:	fb04 fa0a 	mul.w	sl, r4, sl
 802125c:	44bc      	add	ip, r7
 802125e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021262:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021266:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802126a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802126e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021272:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021276:	ea4c 040a 	orr.w	r4, ip, sl
 802127a:	940d      	str	r4, [sp, #52]	; 0x34
 802127c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802127e:	2cff      	cmp	r4, #255	; 0xff
 8021280:	d020      	beq.n	80212c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 8021282:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021284:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021288:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802128a:	4367      	muls	r7, r4
 802128c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802128e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021292:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021296:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021298:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802129c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80212a4:	44bc      	add	ip, r7
 80212a6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80212aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212ae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80212b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80212ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80212be:	ea4c 040a 	orr.w	r4, ip, sl
 80212c2:	9409      	str	r4, [sp, #36]	; 0x24
 80212c4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80212c6:	2cff      	cmp	r4, #255	; 0xff
 80212c8:	d020      	beq.n	802130c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 80212ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80212cc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80212d0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80212d2:	4367      	muls	r7, r4
 80212d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80212d6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80212da:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80212de:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80212e0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80212e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212e8:	fb04 fa0a 	mul.w	sl, r4, sl
 80212ec:	44bc      	add	ip, r7
 80212ee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80212f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212f6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80212fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021302:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021306:	ea4c 040a 	orr.w	r4, ip, sl
 802130a:	940e      	str	r4, [sp, #56]	; 0x38
 802130c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802130e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021312:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021316:	43d2      	mvns	r2, r2
 8021318:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802131c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802131e:	b2d2      	uxtb	r2, r2
 8021320:	fb08 f707 	mul.w	r7, r8, r7
 8021324:	fb01 770c 	mla	r7, r1, ip, r7
 8021328:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802132c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802132e:	fb00 770c 	mla	r7, r0, ip, r7
 8021332:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021336:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021338:	fb09 770c 	mla	r7, r9, ip, r7
 802133c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021340:	fb08 f80c 	mul.w	r8, r8, ip
 8021344:	0a3f      	lsrs	r7, r7, #8
 8021346:	fb01 8303 	mla	r3, r1, r3, r8
 802134a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802134c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021350:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021354:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021356:	fb00 330a 	mla	r3, r0, sl, r3
 802135a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802135e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021362:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021366:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802136a:	fb03 f102 	mul.w	r1, r3, r2
 802136e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021372:	1c4b      	adds	r3, r1, #1
 8021374:	ea47 070c 	orr.w	r7, r7, ip
 8021378:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802137c:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8021380:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021384:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8021388:	4353      	muls	r3, r2
 802138a:	1c59      	adds	r1, r3, #1
 802138c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021390:	0a3b      	lsrs	r3, r7, #8
 8021392:	0c3f      	lsrs	r7, r7, #16
 8021394:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021398:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802139c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80213a0:	435a      	muls	r2, r3
 80213a2:	1c53      	adds	r3, r2, #1
 80213a4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80213a8:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80213ac:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80213b0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80213b2:	f10e 0e03 	add.w	lr, lr, #3
 80213b6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80213b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80213bc:	441a      	add	r2, r3
 80213be:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80213c0:	922f      	str	r2, [sp, #188]	; 0xbc
 80213c2:	441d      	add	r5, r3
 80213c4:	e65a      	b.n	802107c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80213c6:	2800      	cmp	r0, #0
 80213c8:	f43f aef7 	beq.w	80211ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80213cc:	5c79      	ldrb	r1, [r7, r1]
 80213ce:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80213d2:	9109      	str	r1, [sp, #36]	; 0x24
 80213d4:	0e09      	lsrs	r1, r1, #24
 80213d6:	9111      	str	r1, [sp, #68]	; 0x44
 80213d8:	e6ef      	b.n	80211ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80213da:	b01b      	add	sp, #108	; 0x6c
 80213dc:	ecbd 8b0a 	vpop	{d8-d12}
 80213e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080213e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80213e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213e8:	b08d      	sub	sp, #52	; 0x34
 80213ea:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 80213ee:	9103      	str	r1, [sp, #12]
 80213f0:	fb07 5803 	mla	r8, r7, r3, r5
 80213f4:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80213f8:	9803      	ldr	r0, [sp, #12]
 80213fa:	2f00      	cmp	r7, #0
 80213fc:	910b      	str	r1, [sp, #44]	; 0x2c
 80213fe:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021402:	9903      	ldr	r1, [sp, #12]
 8021404:	9c03      	ldr	r4, [sp, #12]
 8021406:	eb02 0608 	add.w	r6, r2, r8
 802140a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802140e:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8021412:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8021416:	7809      	ldrb	r1, [r1, #0]
 8021418:	7840      	ldrb	r0, [r0, #1]
 802141a:	78a4      	ldrb	r4, [r4, #2]
 802141c:	db51      	blt.n	80214c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802141e:	45be      	cmp	lr, r7
 8021420:	dd4f      	ble.n	80214c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8021422:	2d00      	cmp	r5, #0
 8021424:	db49      	blt.n	80214ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8021426:	42ab      	cmp	r3, r5
 8021428:	dd47      	ble.n	80214ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 802142a:	f812 2008 	ldrb.w	r2, [r2, r8]
 802142e:	9204      	str	r2, [sp, #16]
 8021430:	7872      	ldrb	r2, [r6, #1]
 8021432:	9205      	str	r2, [sp, #20]
 8021434:	78b2      	ldrb	r2, [r6, #2]
 8021436:	9206      	str	r2, [sp, #24]
 8021438:	1c6a      	adds	r2, r5, #1
 802143a:	d449      	bmi.n	80214d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 802143c:	4293      	cmp	r3, r2
 802143e:	dd47      	ble.n	80214d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021440:	f1bc 0f00 	cmp.w	ip, #0
 8021444:	d044      	beq.n	80214d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8021446:	7972      	ldrb	r2, [r6, #5]
 8021448:	f896 b003 	ldrb.w	fp, [r6, #3]
 802144c:	f896 a004 	ldrb.w	sl, [r6, #4]
 8021450:	9201      	str	r2, [sp, #4]
 8021452:	3701      	adds	r7, #1
 8021454:	d444      	bmi.n	80214e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8021456:	45be      	cmp	lr, r7
 8021458:	dd42      	ble.n	80214e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802145a:	f1b9 0f00 	cmp.w	r9, #0
 802145e:	f000 80c1 	beq.w	80215e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8021462:	2d00      	cmp	r5, #0
 8021464:	db38      	blt.n	80214d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8021466:	42ab      	cmp	r3, r5
 8021468:	dd36      	ble.n	80214d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802146a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802146e:	f816 8002 	ldrb.w	r8, [r6, r2]
 8021472:	2203      	movs	r2, #3
 8021474:	fb03 6702 	mla	r7, r3, r2, r6
 8021478:	fb03 6202 	mla	r2, r3, r2, r6
 802147c:	787f      	ldrb	r7, [r7, #1]
 802147e:	f892 e002 	ldrb.w	lr, [r2, #2]
 8021482:	9702      	str	r7, [sp, #8]
 8021484:	3501      	adds	r5, #1
 8021486:	d432      	bmi.n	80214ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8021488:	42ab      	cmp	r3, r5
 802148a:	dd30      	ble.n	80214ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802148c:	f1bc 0f00 	cmp.w	ip, #0
 8021490:	d031      	beq.n	80214f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8021492:	2703      	movs	r7, #3
 8021494:	fb13 7207 	smlabb	r2, r3, r7, r7
 8021498:	5cb5      	ldrb	r5, [r6, r2]
 802149a:	fb03 6207 	mla	r2, r3, r7, r6
 802149e:	fb03 6307 	mla	r3, r3, r7, r6
 80214a2:	7912      	ldrb	r2, [r2, #4]
 80214a4:	795e      	ldrb	r6, [r3, #5]
 80214a6:	f1bc 0f0f 	cmp.w	ip, #15
 80214aa:	d927      	bls.n	80214fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 80214ac:	4b53      	ldr	r3, [pc, #332]	; (80215fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 80214ae:	f240 1157 	movw	r1, #343	; 0x157
 80214b2:	4a53      	ldr	r2, [pc, #332]	; (8021600 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 80214b4:	4853      	ldr	r0, [pc, #332]	; (8021604 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 80214b6:	f004 fb5f 	bl	8025b78 <__assert_func>
 80214ba:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80214be:	9104      	str	r1, [sp, #16]
 80214c0:	e7ba      	b.n	8021438 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 80214c2:	9401      	str	r4, [sp, #4]
 80214c4:	4682      	mov	sl, r0
 80214c6:	468b      	mov	fp, r1
 80214c8:	9104      	str	r1, [sp, #16]
 80214ca:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80214ce:	e7c0      	b.n	8021452 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80214d0:	9401      	str	r4, [sp, #4]
 80214d2:	4682      	mov	sl, r0
 80214d4:	468b      	mov	fp, r1
 80214d6:	e7bc      	b.n	8021452 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80214d8:	46a6      	mov	lr, r4
 80214da:	9002      	str	r0, [sp, #8]
 80214dc:	4688      	mov	r8, r1
 80214de:	e7d1      	b.n	8021484 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 80214e0:	4626      	mov	r6, r4
 80214e2:	4602      	mov	r2, r0
 80214e4:	460d      	mov	r5, r1
 80214e6:	46a6      	mov	lr, r4
 80214e8:	9002      	str	r0, [sp, #8]
 80214ea:	4688      	mov	r8, r1
 80214ec:	e7db      	b.n	80214a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80214ee:	4626      	mov	r6, r4
 80214f0:	4602      	mov	r2, r0
 80214f2:	460d      	mov	r5, r1
 80214f4:	e7d7      	b.n	80214a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80214f6:	4626      	mov	r6, r4
 80214f8:	4602      	mov	r2, r0
 80214fa:	460d      	mov	r5, r1
 80214fc:	f1b9 0f0f 	cmp.w	r9, #15
 8021500:	d8d4      	bhi.n	80214ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8021502:	fa1f f38c 	uxth.w	r3, ip
 8021506:	fa1f fc89 	uxth.w	ip, r9
 802150a:	fb03 f70c 	mul.w	r7, r3, ip
 802150e:	011b      	lsls	r3, r3, #4
 8021510:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8021514:	9707      	str	r7, [sp, #28]
 8021516:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802151a:	fa1f fc8c 	uxth.w	ip, ip
 802151e:	eba7 070c 	sub.w	r7, r7, ip
 8021522:	b2bf      	uxth	r7, r7
 8021524:	9709      	str	r7, [sp, #36]	; 0x24
 8021526:	9f07      	ldr	r7, [sp, #28]
 8021528:	1bdb      	subs	r3, r3, r7
 802152a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 802152e:	b29b      	uxth	r3, r3
 8021530:	9708      	str	r7, [sp, #32]
 8021532:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021534:	930a      	str	r3, [sp, #40]	; 0x28
 8021536:	ea6f 0907 	mvn.w	r9, r7
 802153a:	fb03 fb0b 	mul.w	fp, r3, fp
 802153e:	9f04      	ldr	r7, [sp, #16]
 8021540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021542:	fa5f f989 	uxtb.w	r9, r9
 8021546:	fb03 bb07 	mla	fp, r3, r7, fp
 802154a:	9f07      	ldr	r7, [sp, #28]
 802154c:	fb11 f109 	smulbb	r1, r1, r9
 8021550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021552:	fb0c b808 	mla	r8, ip, r8, fp
 8021556:	fb10 f009 	smulbb	r0, r0, r9
 802155a:	fb14 f409 	smulbb	r4, r4, r9
 802155e:	fb07 8805 	mla	r8, r7, r5, r8
 8021562:	9d08      	ldr	r5, [sp, #32]
 8021564:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021566:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802156a:	fb08 1805 	mla	r8, r8, r5, r1
 802156e:	9d05      	ldr	r5, [sp, #20]
 8021570:	fa1f f888 	uxth.w	r8, r8
 8021574:	f108 0101 	add.w	r1, r8, #1
 8021578:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 802157c:	9903      	ldr	r1, [sp, #12]
 802157e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021582:	f881 8000 	strb.w	r8, [r1]
 8021586:	fb03 f10a 	mul.w	r1, r3, sl
 802158a:	fb07 1105 	mla	r1, r7, r5, r1
 802158e:	9d02      	ldr	r5, [sp, #8]
 8021590:	fb0c 1105 	mla	r1, ip, r5, r1
 8021594:	9d07      	ldr	r5, [sp, #28]
 8021596:	fb05 1102 	mla	r1, r5, r2, r1
 802159a:	9a08      	ldr	r2, [sp, #32]
 802159c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80215a0:	fb01 0102 	mla	r1, r1, r2, r0
 80215a4:	9a03      	ldr	r2, [sp, #12]
 80215a6:	b289      	uxth	r1, r1
 80215a8:	1c48      	adds	r0, r1, #1
 80215aa:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80215ae:	1209      	asrs	r1, r1, #8
 80215b0:	7051      	strb	r1, [r2, #1]
 80215b2:	9a01      	ldr	r2, [sp, #4]
 80215b4:	4353      	muls	r3, r2
 80215b6:	9a06      	ldr	r2, [sp, #24]
 80215b8:	fb07 3702 	mla	r7, r7, r2, r3
 80215bc:	9b08      	ldr	r3, [sp, #32]
 80215be:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80215c2:	fb05 c606 	mla	r6, r5, r6, ip
 80215c6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80215ca:	fb06 4603 	mla	r6, r6, r3, r4
 80215ce:	9b03      	ldr	r3, [sp, #12]
 80215d0:	b2b6      	uxth	r6, r6
 80215d2:	f106 0e01 	add.w	lr, r6, #1
 80215d6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80215da:	1236      	asrs	r6, r6, #8
 80215dc:	709e      	strb	r6, [r3, #2]
 80215de:	b00d      	add	sp, #52	; 0x34
 80215e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215e4:	f1bc 0f0f 	cmp.w	ip, #15
 80215e8:	f63f af60 	bhi.w	80214ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80215ec:	4626      	mov	r6, r4
 80215ee:	4602      	mov	r2, r0
 80215f0:	460d      	mov	r5, r1
 80215f2:	46a6      	mov	lr, r4
 80215f4:	9002      	str	r0, [sp, #8]
 80215f6:	4688      	mov	r8, r1
 80215f8:	e783      	b.n	8021502 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80215fa:	bf00      	nop
 80215fc:	0802b042 	.word	0x0802b042
 8021600:	0802b53a 	.word	0x0802b53a
 8021604:	0802b10b 	.word	0x0802b10b

08021608 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802160c:	ed2d 8b08 	vpush	{d8-d11}
 8021610:	b09f      	sub	sp, #124	; 0x7c
 8021612:	eeb0 aa40 	vmov.f32	s20, s0
 8021616:	eef0 9a60 	vmov.f32	s19, s1
 802161a:	920e      	str	r2, [sp, #56]	; 0x38
 802161c:	eeb0 9a41 	vmov.f32	s18, s2
 8021620:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8021622:	eeb0 8a62 	vmov.f32	s16, s5
 8021626:	9307      	str	r3, [sp, #28]
 8021628:	eef0 8a43 	vmov.f32	s17, s6
 802162c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8021630:	eef0 ba44 	vmov.f32	s23, s8
 8021634:	901d      	str	r0, [sp, #116]	; 0x74
 8021636:	eeb0 ba64 	vmov.f32	s22, s9
 802163a:	930c      	str	r3, [sp, #48]	; 0x30
 802163c:	eef0 aa45 	vmov.f32	s21, s10
 8021640:	6850      	ldr	r0, [r2, #4]
 8021642:	910b      	str	r1, [sp, #44]	; 0x2c
 8021644:	6812      	ldr	r2, [r2, #0]
 8021646:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 802164a:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 802164e:	fb00 1303 	mla	r3, r0, r3, r1
 8021652:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021656:	18d3      	adds	r3, r2, r3
 8021658:	9308      	str	r3, [sp, #32]
 802165a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802165c:	681b      	ldr	r3, [r3, #0]
 802165e:	930a      	str	r3, [sp, #40]	; 0x28
 8021660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021662:	43db      	mvns	r3, r3
 8021664:	b2db      	uxtb	r3, r3
 8021666:	9309      	str	r3, [sp, #36]	; 0x24
 8021668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802166a:	2b00      	cmp	r3, #0
 802166c:	dc03      	bgt.n	8021676 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802166e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021670:	2b00      	cmp	r3, #0
 8021672:	f340 81f5 	ble.w	8021a60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8021676:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8021678:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802167c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021680:	1e48      	subs	r0, r1, #1
 8021682:	1e54      	subs	r4, r2, #1
 8021684:	9b07      	ldr	r3, [sp, #28]
 8021686:	2b00      	cmp	r3, #0
 8021688:	f340 80d5 	ble.w	8021836 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802168c:	ea5f 452a 	movs.w	r5, sl, asr #16
 8021690:	ea4f 4328 	mov.w	r3, r8, asr #16
 8021694:	d406      	bmi.n	80216a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021696:	4285      	cmp	r5, r0
 8021698:	da04      	bge.n	80216a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802169a:	2b00      	cmp	r3, #0
 802169c:	db02      	blt.n	80216a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802169e:	42a3      	cmp	r3, r4
 80216a0:	f2c0 80ca 	blt.w	8021838 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80216a4:	3501      	adds	r5, #1
 80216a6:	f100 80bb 	bmi.w	8021820 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80216aa:	42a9      	cmp	r1, r5
 80216ac:	f2c0 80b8 	blt.w	8021820 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80216b0:	3301      	adds	r3, #1
 80216b2:	f100 80b5 	bmi.w	8021820 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80216b6:	429a      	cmp	r2, r3
 80216b8:	f2c0 80b2 	blt.w	8021820 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80216bc:	9b07      	ldr	r3, [sp, #28]
 80216be:	9d08      	ldr	r5, [sp, #32]
 80216c0:	930d      	str	r3, [sp, #52]	; 0x34
 80216c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80216c4:	2b00      	cmp	r3, #0
 80216c6:	f340 80d6 	ble.w	8021876 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80216ca:	9838      	ldr	r0, [sp, #224]	; 0xe0
 80216cc:	ea4f 4428 	mov.w	r4, r8, asr #16
 80216d0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80216d2:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80216d6:	68c6      	ldr	r6, [r0, #12]
 80216d8:	ea5f 402a 	movs.w	r0, sl, asr #16
 80216dc:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80216e0:	689b      	ldr	r3, [r3, #8]
 80216e2:	f100 810f 	bmi.w	8021904 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80216e6:	1e5f      	subs	r7, r3, #1
 80216e8:	42b8      	cmp	r0, r7
 80216ea:	f280 810b 	bge.w	8021904 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80216ee:	2c00      	cmp	r4, #0
 80216f0:	f2c0 8108 	blt.w	8021904 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80216f4:	1e77      	subs	r7, r6, #1
 80216f6:	42bc      	cmp	r4, r7
 80216f8:	f280 8104 	bge.w	8021904 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80216fc:	b21b      	sxth	r3, r3
 80216fe:	fb04 0003 	mla	r0, r4, r3, r0
 8021702:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021704:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021708:	1826      	adds	r6, r4, r0
 802170a:	5c24      	ldrb	r4, [r4, r0]
 802170c:	78b7      	ldrb	r7, [r6, #2]
 802170e:	7870      	ldrb	r0, [r6, #1]
 8021710:	970f      	str	r7, [sp, #60]	; 0x3c
 8021712:	7977      	ldrb	r7, [r6, #5]
 8021714:	f896 e003 	ldrb.w	lr, [r6, #3]
 8021718:	f896 c004 	ldrb.w	ip, [r6, #4]
 802171c:	9710      	str	r7, [sp, #64]	; 0x40
 802171e:	b1c9      	cbz	r1, 8021754 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8021720:	f04f 0b03 	mov.w	fp, #3
 8021724:	f06f 0904 	mvn.w	r9, #4
 8021728:	3605      	adds	r6, #5
 802172a:	fb13 930b 	smlabb	r3, r3, fp, r9
 802172e:	eb06 0b03 	add.w	fp, r6, r3
 8021732:	5cf3      	ldrb	r3, [r6, r3]
 8021734:	9311      	str	r3, [sp, #68]	; 0x44
 8021736:	f89b 3001 	ldrb.w	r3, [fp, #1]
 802173a:	9313      	str	r3, [sp, #76]	; 0x4c
 802173c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021740:	9315      	str	r3, [sp, #84]	; 0x54
 8021742:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8021746:	9312      	str	r3, [sp, #72]	; 0x48
 8021748:	f89b 3004 	ldrb.w	r3, [fp, #4]
 802174c:	9314      	str	r3, [sp, #80]	; 0x50
 802174e:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8021752:	9316      	str	r3, [sp, #88]	; 0x58
 8021754:	b292      	uxth	r2, r2
 8021756:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8021758:	b289      	uxth	r1, r1
 802175a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 802175e:	fb02 f601 	mul.w	r6, r2, r1
 8021762:	0112      	lsls	r2, r2, #4
 8021764:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8021768:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 802176c:	1b92      	subs	r2, r2, r6
 802176e:	b289      	uxth	r1, r1
 8021770:	b292      	uxth	r2, r2
 8021772:	eba9 0901 	sub.w	r9, r9, r1
 8021776:	fb02 fe0e 	mul.w	lr, r2, lr
 802177a:	fa1f f989 	uxth.w	r9, r9
 802177e:	fb02 fc0c 	mul.w	ip, r2, ip
 8021782:	fb09 e404 	mla	r4, r9, r4, lr
 8021786:	f895 e000 	ldrb.w	lr, [r5]
 802178a:	fb09 c000 	mla	r0, r9, r0, ip
 802178e:	fb01 4407 	mla	r4, r1, r7, r4
 8021792:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021794:	fb06 4407 	mla	r4, r6, r7, r4
 8021798:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802179a:	fb1e fe07 	smulbb	lr, lr, r7
 802179e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80217a2:	fb04 e403 	mla	r4, r4, r3, lr
 80217a6:	b2a4      	uxth	r4, r4
 80217a8:	f104 0e01 	add.w	lr, r4, #1
 80217ac:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80217b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80217b2:	fb01 0004 	mla	r0, r1, r4, r0
 80217b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80217b8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80217bc:	fb06 0004 	mla	r0, r6, r4, r0
 80217c0:	786c      	ldrb	r4, [r5, #1]
 80217c2:	f885 e000 	strb.w	lr, [r5]
 80217c6:	fb14 f407 	smulbb	r4, r4, r7
 80217ca:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80217ce:	fb00 4003 	mla	r0, r0, r3, r4
 80217d2:	b280      	uxth	r0, r0
 80217d4:	1c44      	adds	r4, r0, #1
 80217d6:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80217da:	1200      	asrs	r0, r0, #8
 80217dc:	7068      	strb	r0, [r5, #1]
 80217de:	9810      	ldr	r0, [sp, #64]	; 0x40
 80217e0:	4342      	muls	r2, r0
 80217e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80217e4:	fb09 2200 	mla	r2, r9, r0, r2
 80217e8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80217ea:	fb01 2100 	mla	r1, r1, r0, r2
 80217ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80217f0:	fb06 1602 	mla	r6, r6, r2, r1
 80217f4:	78a9      	ldrb	r1, [r5, #2]
 80217f6:	fb11 f107 	smulbb	r1, r1, r7
 80217fa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80217fe:	fb06 1303 	mla	r3, r6, r3, r1
 8021802:	b29b      	uxth	r3, r3
 8021804:	1c5e      	adds	r6, r3, #1
 8021806:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802180a:	121b      	asrs	r3, r3, #8
 802180c:	70ab      	strb	r3, [r5, #2]
 802180e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021810:	3503      	adds	r5, #3
 8021812:	449a      	add	sl, r3
 8021814:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021816:	4498      	add	r8, r3
 8021818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802181a:	3b01      	subs	r3, #1
 802181c:	930d      	str	r3, [sp, #52]	; 0x34
 802181e:	e750      	b.n	80216c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8021820:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021822:	449a      	add	sl, r3
 8021824:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021826:	4498      	add	r8, r3
 8021828:	9b07      	ldr	r3, [sp, #28]
 802182a:	3b01      	subs	r3, #1
 802182c:	9307      	str	r3, [sp, #28]
 802182e:	9b08      	ldr	r3, [sp, #32]
 8021830:	3303      	adds	r3, #3
 8021832:	9308      	str	r3, [sp, #32]
 8021834:	e726      	b.n	8021684 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021836:	d026      	beq.n	8021886 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021838:	9b07      	ldr	r3, [sp, #28]
 802183a:	9833      	ldr	r0, [sp, #204]	; 0xcc
 802183c:	3b01      	subs	r3, #1
 802183e:	fb00 a003 	mla	r0, r0, r3, sl
 8021842:	1400      	asrs	r0, r0, #16
 8021844:	f53f af3a 	bmi.w	80216bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021848:	3901      	subs	r1, #1
 802184a:	4288      	cmp	r0, r1
 802184c:	f6bf af36 	bge.w	80216bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021850:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8021852:	fb01 8303 	mla	r3, r1, r3, r8
 8021856:	141b      	asrs	r3, r3, #16
 8021858:	f53f af30 	bmi.w	80216bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802185c:	3a01      	subs	r2, #1
 802185e:	4293      	cmp	r3, r2
 8021860:	f6bf af2c 	bge.w	80216bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8021864:	9b08      	ldr	r3, [sp, #32]
 8021866:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802186a:	1cdd      	adds	r5, r3, #3
 802186c:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8021870:	f1bc 0f00 	cmp.w	ip, #0
 8021874:	dc5f      	bgt.n	8021936 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021876:	9b07      	ldr	r3, [sp, #28]
 8021878:	9a08      	ldr	r2, [sp, #32]
 802187a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802187e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021882:	441a      	add	r2, r3
 8021884:	9208      	str	r2, [sp, #32]
 8021886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021888:	2b00      	cmp	r3, #0
 802188a:	f340 80e9 	ble.w	8021a60 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 802188e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021892:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021894:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021898:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802189c:	eef0 6a48 	vmov.f32	s13, s16
 80218a0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80218a4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80218a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80218ac:	ee16 aa90 	vmov	sl, s13
 80218b0:	eef0 6a68 	vmov.f32	s13, s17
 80218b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80218b8:	ee16 8a90 	vmov	r8, s13
 80218bc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80218c0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80218c4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80218c8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80218cc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80218d0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80218d4:	ee18 2a10 	vmov	r2, s16
 80218d8:	eeb0 8a47 	vmov.f32	s16, s14
 80218dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80218e0:	ee18 2a90 	vmov	r2, s17
 80218e4:	9333      	str	r3, [sp, #204]	; 0xcc
 80218e6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80218e8:	eef0 8a67 	vmov.f32	s17, s15
 80218ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80218f0:	9334      	str	r3, [sp, #208]	; 0xd0
 80218f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80218f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80218f6:	3b01      	subs	r3, #1
 80218f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80218fa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80218fc:	bf08      	it	eq
 80218fe:	4613      	moveq	r3, r2
 8021900:	9307      	str	r3, [sp, #28]
 8021902:	e6b1      	b.n	8021668 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021904:	1c47      	adds	r7, r0, #1
 8021906:	d482      	bmi.n	802180e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021908:	42bb      	cmp	r3, r7
 802190a:	db80      	blt.n	802180e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802190c:	1c67      	adds	r7, r4, #1
 802190e:	f53f af7e 	bmi.w	802180e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021912:	42be      	cmp	r6, r7
 8021914:	f6ff af7b 	blt.w	802180e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021918:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802191a:	b236      	sxth	r6, r6
 802191c:	9001      	str	r0, [sp, #4]
 802191e:	b21b      	sxth	r3, r3
 8021920:	9600      	str	r6, [sp, #0]
 8021922:	981d      	ldr	r0, [sp, #116]	; 0x74
 8021924:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8021928:	e9cd 4202 	strd	r4, r2, [sp, #8]
 802192c:	4629      	mov	r1, r5
 802192e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021930:	f7ff fd58 	bl	80213e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8021934:	e76b      	b.n	802180e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021936:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8021938:	ea4f 402a 	mov.w	r0, sl, asr #16
 802193c:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8021940:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8021944:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8021948:	ea4f 4128 	mov.w	r1, r8, asr #16
 802194c:	fb07 0101 	mla	r1, r7, r1, r0
 8021950:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021952:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021956:	1844      	adds	r4, r0, r1
 8021958:	5c40      	ldrb	r0, [r0, r1]
 802195a:	78a6      	ldrb	r6, [r4, #2]
 802195c:	7861      	ldrb	r1, [r4, #1]
 802195e:	960f      	str	r6, [sp, #60]	; 0x3c
 8021960:	78e6      	ldrb	r6, [r4, #3]
 8021962:	910d      	str	r1, [sp, #52]	; 0x34
 8021964:	9610      	str	r6, [sp, #64]	; 0x40
 8021966:	f894 9004 	ldrb.w	r9, [r4, #4]
 802196a:	f894 b005 	ldrb.w	fp, [r4, #5]
 802196e:	b192      	cbz	r2, 8021996 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8021970:	f06f 0604 	mvn.w	r6, #4
 8021974:	2103      	movs	r1, #3
 8021976:	3405      	adds	r4, #5
 8021978:	fb17 6701 	smlabb	r7, r7, r1, r6
 802197c:	19e6      	adds	r6, r4, r7
 802197e:	5de4      	ldrb	r4, [r4, r7]
 8021980:	9417      	str	r4, [sp, #92]	; 0x5c
 8021982:	7874      	ldrb	r4, [r6, #1]
 8021984:	9419      	str	r4, [sp, #100]	; 0x64
 8021986:	78b4      	ldrb	r4, [r6, #2]
 8021988:	941b      	str	r4, [sp, #108]	; 0x6c
 802198a:	78f4      	ldrb	r4, [r6, #3]
 802198c:	9418      	str	r4, [sp, #96]	; 0x60
 802198e:	7934      	ldrb	r4, [r6, #4]
 8021990:	941a      	str	r4, [sp, #104]	; 0x68
 8021992:	7974      	ldrb	r4, [r6, #5]
 8021994:	941c      	str	r4, [sp, #112]	; 0x70
 8021996:	b29b      	uxth	r3, r3
 8021998:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802199a:	b292      	uxth	r2, r2
 802199c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802199e:	3503      	adds	r5, #3
 80219a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80219a4:	fb03 f402 	mul.w	r4, r3, r2
 80219a8:	011b      	lsls	r3, r3, #4
 80219aa:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 80219ae:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 80219b2:	1b1b      	subs	r3, r3, r4
 80219b4:	b292      	uxth	r2, r2
 80219b6:	b29b      	uxth	r3, r3
 80219b8:	1ab6      	subs	r6, r6, r2
 80219ba:	435f      	muls	r7, r3
 80219bc:	b2b6      	uxth	r6, r6
 80219be:	fb03 f909 	mul.w	r9, r3, r9
 80219c2:	fb03 fb0b 	mul.w	fp, r3, fp
 80219c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80219c8:	fb06 7000 	mla	r0, r6, r0, r7
 80219cc:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80219ce:	fb06 bb03 	mla	fp, r6, r3, fp
 80219d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80219d4:	fb02 0007 	mla	r0, r2, r7, r0
 80219d8:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80219da:	fb02 bb03 	mla	fp, r2, r3, fp
 80219de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80219e0:	fb04 0007 	mla	r0, r4, r7, r0
 80219e4:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80219e8:	fb17 f701 	smulbb	r7, r7, r1
 80219ec:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80219f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80219f2:	fb00 700e 	mla	r0, r0, lr, r7
 80219f6:	fb06 9101 	mla	r1, r6, r1, r9
 80219fa:	b280      	uxth	r0, r0
 80219fc:	1c47      	adds	r7, r0, #1
 80219fe:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8021a02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021a04:	1200      	asrs	r0, r0, #8
 8021a06:	f805 0c06 	strb.w	r0, [r5, #-6]
 8021a0a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021a0c:	fb02 1100 	mla	r1, r2, r0, r1
 8021a10:	981a      	ldr	r0, [sp, #104]	; 0x68
 8021a12:	fb04 1100 	mla	r1, r4, r0, r1
 8021a16:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8021a1a:	fb04 b403 	mla	r4, r4, r3, fp
 8021a1e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8021a22:	fb10 f007 	smulbb	r0, r0, r7
 8021a26:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021a2a:	fb13 f307 	smulbb	r3, r3, r7
 8021a2e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021a32:	fb01 010e 	mla	r1, r1, lr, r0
 8021a36:	fb04 340e 	mla	r4, r4, lr, r3
 8021a3a:	b289      	uxth	r1, r1
 8021a3c:	b2a4      	uxth	r4, r4
 8021a3e:	1c48      	adds	r0, r1, #1
 8021a40:	1c63      	adds	r3, r4, #1
 8021a42:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021a46:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021a4a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021a4c:	1209      	asrs	r1, r1, #8
 8021a4e:	1224      	asrs	r4, r4, #8
 8021a50:	449a      	add	sl, r3
 8021a52:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021a54:	f805 1c05 	strb.w	r1, [r5, #-5]
 8021a58:	f805 4c04 	strb.w	r4, [r5, #-4]
 8021a5c:	4498      	add	r8, r3
 8021a5e:	e707      	b.n	8021870 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8021a60:	b01f      	add	sp, #124	; 0x7c
 8021a62:	ecbd 8b08 	vpop	{d8-d11}
 8021a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021a6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8021a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a70:	b085      	sub	sp, #20
 8021a72:	784d      	ldrb	r5, [r1, #1]
 8021a74:	788e      	ldrb	r6, [r1, #2]
 8021a76:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8021a7a:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8021a7e:	9403      	str	r4, [sp, #12]
 8021a80:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8021a84:	780c      	ldrb	r4, [r1, #0]
 8021a86:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8021a8a:	fb07 ce03 	mla	lr, r7, r3, ip
 8021a8e:	2f00      	cmp	r7, #0
 8021a90:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021a94:	eb02 0b0e 	add.w	fp, r2, lr
 8021a98:	db56      	blt.n	8021b48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8021a9a:	45b9      	cmp	r9, r7
 8021a9c:	dd54      	ble.n	8021b48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8021a9e:	f1bc 0f00 	cmp.w	ip, #0
 8021aa2:	db4d      	blt.n	8021b40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021aa4:	4563      	cmp	r3, ip
 8021aa6:	dd4b      	ble.n	8021b40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8021aa8:	f812 200e 	ldrb.w	r2, [r2, lr]
 8021aac:	9200      	str	r2, [sp, #0]
 8021aae:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8021ab2:	9201      	str	r2, [sp, #4]
 8021ab4:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8021ab8:	9202      	str	r2, [sp, #8]
 8021aba:	f11c 0201 	adds.w	r2, ip, #1
 8021abe:	d44a      	bmi.n	8021b56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021ac0:	4293      	cmp	r3, r2
 8021ac2:	dd48      	ble.n	8021b56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021ac4:	2800      	cmp	r0, #0
 8021ac6:	d046      	beq.n	8021b56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8021ac8:	f89b e003 	ldrb.w	lr, [fp, #3]
 8021acc:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8021ad0:	f89b a005 	ldrb.w	sl, [fp, #5]
 8021ad4:	3701      	adds	r7, #1
 8021ad6:	d446      	bmi.n	8021b66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021ad8:	45b9      	cmp	r9, r7
 8021ada:	dd44      	ble.n	8021b66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8021adc:	9a03      	ldr	r2, [sp, #12]
 8021ade:	2a00      	cmp	r2, #0
 8021ae0:	d045      	beq.n	8021b6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8021ae2:	f1bc 0f00 	cmp.w	ip, #0
 8021ae6:	db3a      	blt.n	8021b5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021ae8:	4563      	cmp	r3, ip
 8021aea:	dd38      	ble.n	8021b5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8021aec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021af0:	f04f 0903 	mov.w	r9, #3
 8021af4:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8021af8:	fb03 b209 	mla	r2, r3, r9, fp
 8021afc:	fb03 b909 	mla	r9, r3, r9, fp
 8021b00:	7852      	ldrb	r2, [r2, #1]
 8021b02:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021b06:	f11c 0c01 	adds.w	ip, ip, #1
 8021b0a:	d40d      	bmi.n	8021b28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021b0c:	4563      	cmp	r3, ip
 8021b0e:	dd0b      	ble.n	8021b28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021b10:	b160      	cbz	r0, 8021b2c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8021b12:	2603      	movs	r6, #3
 8021b14:	fb13 6406 	smlabb	r4, r3, r6, r6
 8021b18:	fb03 b506 	mla	r5, r3, r6, fp
 8021b1c:	fb03 b306 	mla	r3, r3, r6, fp
 8021b20:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8021b24:	792d      	ldrb	r5, [r5, #4]
 8021b26:	795e      	ldrb	r6, [r3, #5]
 8021b28:	280f      	cmp	r0, #15
 8021b2a:	d802      	bhi.n	8021b32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8021b2c:	9b03      	ldr	r3, [sp, #12]
 8021b2e:	2b0f      	cmp	r3, #15
 8021b30:	d922      	bls.n	8021b78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8021b32:	4b2f      	ldr	r3, [pc, #188]	; (8021bf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8021b34:	f240 1157 	movw	r1, #343	; 0x157
 8021b38:	4a2e      	ldr	r2, [pc, #184]	; (8021bf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8021b3a:	482f      	ldr	r0, [pc, #188]	; (8021bf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8021b3c:	f004 f81c 	bl	8025b78 <__assert_func>
 8021b40:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8021b44:	9400      	str	r4, [sp, #0]
 8021b46:	e7b8      	b.n	8021aba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8021b48:	46b2      	mov	sl, r6
 8021b4a:	46a8      	mov	r8, r5
 8021b4c:	46a6      	mov	lr, r4
 8021b4e:	9400      	str	r4, [sp, #0]
 8021b50:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8021b54:	e7be      	b.n	8021ad4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8021b56:	46b2      	mov	sl, r6
 8021b58:	46a8      	mov	r8, r5
 8021b5a:	46a6      	mov	lr, r4
 8021b5c:	e7ba      	b.n	8021ad4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8021b5e:	46b1      	mov	r9, r6
 8021b60:	462a      	mov	r2, r5
 8021b62:	4627      	mov	r7, r4
 8021b64:	e7cf      	b.n	8021b06 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8021b66:	46b1      	mov	r9, r6
 8021b68:	462a      	mov	r2, r5
 8021b6a:	4627      	mov	r7, r4
 8021b6c:	e7dc      	b.n	8021b28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8021b6e:	280f      	cmp	r0, #15
 8021b70:	d8df      	bhi.n	8021b32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8021b72:	46b1      	mov	r9, r6
 8021b74:	462a      	mov	r2, r5
 8021b76:	4627      	mov	r7, r4
 8021b78:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8021b7c:	b280      	uxth	r0, r0
 8021b7e:	fb00 f30b 	mul.w	r3, r0, fp
 8021b82:	0100      	lsls	r0, r0, #4
 8021b84:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8021b88:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8021b8c:	1ac0      	subs	r0, r0, r3
 8021b8e:	fa1f fb8b 	uxth.w	fp, fp
 8021b92:	b280      	uxth	r0, r0
 8021b94:	ebac 0c0b 	sub.w	ip, ip, fp
 8021b98:	9003      	str	r0, [sp, #12]
 8021b9a:	fa1f fc8c 	uxth.w	ip, ip
 8021b9e:	fb00 fe0e 	mul.w	lr, r0, lr
 8021ba2:	9800      	ldr	r0, [sp, #0]
 8021ba4:	fb0c ee00 	mla	lr, ip, r0, lr
 8021ba8:	9803      	ldr	r0, [sp, #12]
 8021baa:	fb00 f808 	mul.w	r8, r0, r8
 8021bae:	9801      	ldr	r0, [sp, #4]
 8021bb0:	fb0b ee07 	mla	lr, fp, r7, lr
 8021bb4:	fb0c 8800 	mla	r8, ip, r0, r8
 8021bb8:	fb03 ee04 	mla	lr, r3, r4, lr
 8021bbc:	fb0b 8202 	mla	r2, fp, r2, r8
 8021bc0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021bc4:	fb03 2505 	mla	r5, r3, r5, r2
 8021bc8:	9a03      	ldr	r2, [sp, #12]
 8021bca:	f881 e000 	strb.w	lr, [r1]
 8021bce:	fb02 f00a 	mul.w	r0, r2, sl
 8021bd2:	9a02      	ldr	r2, [sp, #8]
 8021bd4:	122d      	asrs	r5, r5, #8
 8021bd6:	fb0c 0c02 	mla	ip, ip, r2, r0
 8021bda:	704d      	strb	r5, [r1, #1]
 8021bdc:	fb0b c909 	mla	r9, fp, r9, ip
 8021be0:	fb03 9606 	mla	r6, r3, r6, r9
 8021be4:	1236      	asrs	r6, r6, #8
 8021be6:	708e      	strb	r6, [r1, #2]
 8021be8:	b005      	add	sp, #20
 8021bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bee:	bf00      	nop
 8021bf0:	0802b042 	.word	0x0802b042
 8021bf4:	0802b53a 	.word	0x0802b53a
 8021bf8:	0802b10b 	.word	0x0802b10b

08021bfc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c00:	ed2d 8b08 	vpush	{d8-d11}
 8021c04:	b09b      	sub	sp, #108	; 0x6c
 8021c06:	eeb0 aa40 	vmov.f32	s20, s0
 8021c0a:	eef0 9a60 	vmov.f32	s19, s1
 8021c0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8021c10:	eeb0 9a41 	vmov.f32	s18, s2
 8021c14:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8021c16:	eeb0 8a62 	vmov.f32	s16, s5
 8021c1a:	9019      	str	r0, [sp, #100]	; 0x64
 8021c1c:	eef0 8a43 	vmov.f32	s17, s6
 8021c20:	6850      	ldr	r0, [r2, #4]
 8021c22:	eef0 ba44 	vmov.f32	s23, s8
 8021c26:	9109      	str	r1, [sp, #36]	; 0x24
 8021c28:	eeb0 ba64 	vmov.f32	s22, s9
 8021c2c:	9306      	str	r3, [sp, #24]
 8021c2e:	eef0 aa45 	vmov.f32	s21, s10
 8021c32:	6812      	ldr	r2, [r2, #0]
 8021c34:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8021c38:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 8021c3c:	fb00 1303 	mla	r3, r0, r3, r1
 8021c40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021c44:	18d3      	adds	r3, r2, r3
 8021c46:	9307      	str	r3, [sp, #28]
 8021c48:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021c4a:	681b      	ldr	r3, [r3, #0]
 8021c4c:	9308      	str	r3, [sp, #32]
 8021c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	dc03      	bgt.n	8021c5c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021c56:	2b00      	cmp	r3, #0
 8021c58:	f340 81ab 	ble.w	8021fb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8021c5c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021c5e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c62:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021c66:	1e48      	subs	r0, r1, #1
 8021c68:	1e55      	subs	r5, r2, #1
 8021c6a:	9b06      	ldr	r3, [sp, #24]
 8021c6c:	2b00      	cmp	r3, #0
 8021c6e:	f340 80b1 	ble.w	8021dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8021c72:	ea5f 462b 	movs.w	r6, fp, asr #16
 8021c76:	ea4f 4324 	mov.w	r3, r4, asr #16
 8021c7a:	d406      	bmi.n	8021c8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021c7c:	4286      	cmp	r6, r0
 8021c7e:	da04      	bge.n	8021c8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	db02      	blt.n	8021c8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021c84:	42ab      	cmp	r3, r5
 8021c86:	f2c0 80a6 	blt.w	8021dd6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8021c8a:	3601      	adds	r6, #1
 8021c8c:	f100 8097 	bmi.w	8021dbe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021c90:	42b1      	cmp	r1, r6
 8021c92:	f2c0 8094 	blt.w	8021dbe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021c96:	3301      	adds	r3, #1
 8021c98:	f100 8091 	bmi.w	8021dbe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021c9c:	429a      	cmp	r2, r3
 8021c9e:	f2c0 808e 	blt.w	8021dbe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021ca2:	9b06      	ldr	r3, [sp, #24]
 8021ca4:	9e07      	ldr	r6, [sp, #28]
 8021ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8021ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021caa:	2b00      	cmp	r3, #0
 8021cac:	f340 80b0 	ble.w	8021e10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021cb0:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8021cb2:	1425      	asrs	r5, r4, #16
 8021cb4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021cb6:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021cba:	68c7      	ldr	r7, [r0, #12]
 8021cbc:	ea5f 402b 	movs.w	r0, fp, asr #16
 8021cc0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021cc4:	689b      	ldr	r3, [r3, #8]
 8021cc6:	f100 80ea 	bmi.w	8021e9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021cca:	f103 3cff 	add.w	ip, r3, #4294967295
 8021cce:	4560      	cmp	r0, ip
 8021cd0:	f280 80e5 	bge.w	8021e9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021cd4:	2d00      	cmp	r5, #0
 8021cd6:	f2c0 80e2 	blt.w	8021e9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021cda:	f107 3cff 	add.w	ip, r7, #4294967295
 8021cde:	4565      	cmp	r5, ip
 8021ce0:	f280 80dd 	bge.w	8021e9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021ce4:	b21b      	sxth	r3, r3
 8021ce6:	fb05 0003 	mla	r0, r5, r3, r0
 8021cea:	9d08      	ldr	r5, [sp, #32]
 8021cec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021cf0:	182f      	adds	r7, r5, r0
 8021cf2:	5c2d      	ldrb	r5, [r5, r0]
 8021cf4:	7878      	ldrb	r0, [r7, #1]
 8021cf6:	f897 e002 	ldrb.w	lr, [r7, #2]
 8021cfa:	900c      	str	r0, [sp, #48]	; 0x30
 8021cfc:	f897 9003 	ldrb.w	r9, [r7, #3]
 8021d00:	f897 8004 	ldrb.w	r8, [r7, #4]
 8021d04:	f897 a005 	ldrb.w	sl, [r7, #5]
 8021d08:	b1c9      	cbz	r1, 8021d3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8021d0a:	f04f 0c03 	mov.w	ip, #3
 8021d0e:	f06f 0004 	mvn.w	r0, #4
 8021d12:	3705      	adds	r7, #5
 8021d14:	fb13 030c 	smlabb	r3, r3, ip, r0
 8021d18:	eb07 0c03 	add.w	ip, r7, r3
 8021d1c:	5cfb      	ldrb	r3, [r7, r3]
 8021d1e:	930d      	str	r3, [sp, #52]	; 0x34
 8021d20:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021d24:	930f      	str	r3, [sp, #60]	; 0x3c
 8021d26:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8021d2a:	9311      	str	r3, [sp, #68]	; 0x44
 8021d2c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021d30:	930e      	str	r3, [sp, #56]	; 0x38
 8021d32:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8021d36:	9310      	str	r3, [sp, #64]	; 0x40
 8021d38:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8021d3c:	9312      	str	r3, [sp, #72]	; 0x48
 8021d3e:	b292      	uxth	r2, r2
 8021d40:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021d42:	b289      	uxth	r1, r1
 8021d44:	fb02 f301 	mul.w	r3, r2, r1
 8021d48:	0112      	lsls	r2, r2, #4
 8021d4a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021d4e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8021d52:	1ad2      	subs	r2, r2, r3
 8021d54:	b289      	uxth	r1, r1
 8021d56:	b292      	uxth	r2, r2
 8021d58:	1a7f      	subs	r7, r7, r1
 8021d5a:	fb02 f909 	mul.w	r9, r2, r9
 8021d5e:	b2bf      	uxth	r7, r7
 8021d60:	fb02 f808 	mul.w	r8, r2, r8
 8021d64:	fb02 fa0a 	mul.w	sl, r2, sl
 8021d68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021d6a:	fb07 9905 	mla	r9, r7, r5, r9
 8021d6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021d70:	fb07 8800 	mla	r8, r7, r0, r8
 8021d74:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021d76:	fb07 aa0e 	mla	sl, r7, lr, sl
 8021d7a:	fb01 9905 	mla	r9, r1, r5, r9
 8021d7e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021d80:	fb01 8800 	mla	r8, r1, r0, r8
 8021d84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021d86:	fb01 a102 	mla	r1, r1, r2, sl
 8021d8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021d8c:	fb03 9905 	mla	r9, r3, r5, r9
 8021d90:	fb03 8800 	mla	r8, r3, r0, r8
 8021d94:	fb03 1302 	mla	r3, r3, r2, r1
 8021d98:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021d9c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021da0:	121b      	asrs	r3, r3, #8
 8021da2:	f886 9000 	strb.w	r9, [r6]
 8021da6:	f886 8001 	strb.w	r8, [r6, #1]
 8021daa:	70b3      	strb	r3, [r6, #2]
 8021dac:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021dae:	3603      	adds	r6, #3
 8021db0:	449b      	add	fp, r3
 8021db2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021db4:	441c      	add	r4, r3
 8021db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021db8:	3b01      	subs	r3, #1
 8021dba:	930a      	str	r3, [sp, #40]	; 0x28
 8021dbc:	e774      	b.n	8021ca8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8021dbe:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021dc0:	449b      	add	fp, r3
 8021dc2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021dc4:	441c      	add	r4, r3
 8021dc6:	9b06      	ldr	r3, [sp, #24]
 8021dc8:	3b01      	subs	r3, #1
 8021dca:	9306      	str	r3, [sp, #24]
 8021dcc:	9b07      	ldr	r3, [sp, #28]
 8021dce:	3303      	adds	r3, #3
 8021dd0:	9307      	str	r3, [sp, #28]
 8021dd2:	e74a      	b.n	8021c6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021dd4:	d024      	beq.n	8021e20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8021dd6:	9b06      	ldr	r3, [sp, #24]
 8021dd8:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8021dda:	3b01      	subs	r3, #1
 8021ddc:	fb00 b003 	mla	r0, r0, r3, fp
 8021de0:	1400      	asrs	r0, r0, #16
 8021de2:	f53f af5e 	bmi.w	8021ca2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021de6:	3901      	subs	r1, #1
 8021de8:	4288      	cmp	r0, r1
 8021dea:	f6bf af5a 	bge.w	8021ca2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021dee:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8021df0:	fb01 4303 	mla	r3, r1, r3, r4
 8021df4:	141b      	asrs	r3, r3, #16
 8021df6:	f53f af54 	bmi.w	8021ca2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021dfa:	3a01      	subs	r2, #1
 8021dfc:	4293      	cmp	r3, r2
 8021dfe:	f6bf af50 	bge.w	8021ca2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021e02:	9b07      	ldr	r3, [sp, #28]
 8021e04:	f8dd e018 	ldr.w	lr, [sp, #24]
 8021e08:	1cde      	adds	r6, r3, #3
 8021e0a:	f1be 0f00 	cmp.w	lr, #0
 8021e0e:	dc5f      	bgt.n	8021ed0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8021e10:	9b06      	ldr	r3, [sp, #24]
 8021e12:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021e16:	9b07      	ldr	r3, [sp, #28]
 8021e18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021e1c:	4423      	add	r3, r4
 8021e1e:	9307      	str	r3, [sp, #28]
 8021e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e22:	2b00      	cmp	r3, #0
 8021e24:	f340 80c5 	ble.w	8021fb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8021e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021e2c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021e2e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021e32:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021e36:	eef0 6a48 	vmov.f32	s13, s16
 8021e3a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8021e3e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021e42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e46:	ee16 ba90 	vmov	fp, s13
 8021e4a:	eef0 6a68 	vmov.f32	s13, s17
 8021e4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e52:	ee16 4a90 	vmov	r4, s13
 8021e56:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021e5a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021e5e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021e62:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021e66:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021e6a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021e6e:	ee18 2a10 	vmov	r2, s16
 8021e72:	eeb0 8a47 	vmov.f32	s16, s14
 8021e76:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e7a:	ee18 2a90 	vmov	r2, s17
 8021e7e:	932f      	str	r3, [sp, #188]	; 0xbc
 8021e80:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021e82:	eef0 8a67 	vmov.f32	s17, s15
 8021e86:	fb92 f3f3 	sdiv	r3, r2, r3
 8021e8a:	9330      	str	r3, [sp, #192]	; 0xc0
 8021e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021e90:	3b01      	subs	r3, #1
 8021e92:	9309      	str	r3, [sp, #36]	; 0x24
 8021e94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021e96:	bf08      	it	eq
 8021e98:	4613      	moveq	r3, r2
 8021e9a:	9306      	str	r3, [sp, #24]
 8021e9c:	e6d7      	b.n	8021c4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021e9e:	f110 0c01 	adds.w	ip, r0, #1
 8021ea2:	d483      	bmi.n	8021dac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8021ea4:	4563      	cmp	r3, ip
 8021ea6:	db81      	blt.n	8021dac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8021ea8:	f115 0c01 	adds.w	ip, r5, #1
 8021eac:	f53f af7e 	bmi.w	8021dac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8021eb0:	4567      	cmp	r7, ip
 8021eb2:	f6ff af7b 	blt.w	8021dac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8021eb6:	b23f      	sxth	r7, r7
 8021eb8:	b21b      	sxth	r3, r3
 8021eba:	9700      	str	r7, [sp, #0]
 8021ebc:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8021ec0:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8021ec4:	9a08      	ldr	r2, [sp, #32]
 8021ec6:	4631      	mov	r1, r6
 8021ec8:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021eca:	f7ff fdcf 	bl	8021a6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8021ece:	e76d      	b.n	8021dac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8021ed0:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8021ed2:	ea4f 402b 	mov.w	r0, fp, asr #16
 8021ed6:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8021eda:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021ede:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8021ee2:	1421      	asrs	r1, r4, #16
 8021ee4:	930a      	str	r3, [sp, #40]	; 0x28
 8021ee6:	fb0c 0101 	mla	r1, ip, r1, r0
 8021eea:	9808      	ldr	r0, [sp, #32]
 8021eec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021ef0:	1845      	adds	r5, r0, r1
 8021ef2:	5c40      	ldrb	r0, [r0, r1]
 8021ef4:	796f      	ldrb	r7, [r5, #5]
 8021ef6:	7869      	ldrb	r1, [r5, #1]
 8021ef8:	f895 8002 	ldrb.w	r8, [r5, #2]
 8021efc:	f895 a003 	ldrb.w	sl, [r5, #3]
 8021f00:	f895 9004 	ldrb.w	r9, [r5, #4]
 8021f04:	970c      	str	r7, [sp, #48]	; 0x30
 8021f06:	b1a2      	cbz	r2, 8021f32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8021f08:	2703      	movs	r7, #3
 8021f0a:	f06f 0304 	mvn.w	r3, #4
 8021f0e:	3505      	adds	r5, #5
 8021f10:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8021f14:	eb05 070c 	add.w	r7, r5, ip
 8021f18:	f815 500c 	ldrb.w	r5, [r5, ip]
 8021f1c:	9513      	str	r5, [sp, #76]	; 0x4c
 8021f1e:	787d      	ldrb	r5, [r7, #1]
 8021f20:	9515      	str	r5, [sp, #84]	; 0x54
 8021f22:	78bd      	ldrb	r5, [r7, #2]
 8021f24:	9517      	str	r5, [sp, #92]	; 0x5c
 8021f26:	78fd      	ldrb	r5, [r7, #3]
 8021f28:	9514      	str	r5, [sp, #80]	; 0x50
 8021f2a:	793d      	ldrb	r5, [r7, #4]
 8021f2c:	9516      	str	r5, [sp, #88]	; 0x58
 8021f2e:	797d      	ldrb	r5, [r7, #5]
 8021f30:	9518      	str	r5, [sp, #96]	; 0x60
 8021f32:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8021f36:	b292      	uxth	r2, r2
 8021f38:	3603      	adds	r6, #3
 8021f3a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021f3e:	fb03 f502 	mul.w	r5, r3, r2
 8021f42:	011b      	lsls	r3, r3, #4
 8021f44:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8021f48:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021f4c:	1b5b      	subs	r3, r3, r5
 8021f4e:	b292      	uxth	r2, r2
 8021f50:	b29b      	uxth	r3, r3
 8021f52:	1abf      	subs	r7, r7, r2
 8021f54:	fb03 f909 	mul.w	r9, r3, r9
 8021f58:	b2bf      	uxth	r7, r7
 8021f5a:	fb03 fa0a 	mul.w	sl, r3, sl
 8021f5e:	fb07 9901 	mla	r9, r7, r1, r9
 8021f62:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021f64:	fb07 aa00 	mla	sl, r7, r0, sl
 8021f68:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021f6a:	fb02 9901 	mla	r9, r2, r1, r9
 8021f6e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8021f70:	fb02 aa00 	mla	sl, r2, r0, sl
 8021f74:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021f76:	fb05 9901 	mla	r9, r5, r1, r9
 8021f7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021f7c:	fb05 aa00 	mla	sl, r5, r0, sl
 8021f80:	434b      	muls	r3, r1
 8021f82:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021f84:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021f88:	fb07 3308 	mla	r3, r7, r8, r3
 8021f8c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021f90:	f806 ac06 	strb.w	sl, [r6, #-6]
 8021f94:	fb02 3201 	mla	r2, r2, r1, r3
 8021f98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021f9a:	f806 9c05 	strb.w	r9, [r6, #-5]
 8021f9e:	fb05 2503 	mla	r5, r5, r3, r2
 8021fa2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8021fa4:	122d      	asrs	r5, r5, #8
 8021fa6:	449b      	add	fp, r3
 8021fa8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021faa:	f806 5c04 	strb.w	r5, [r6, #-4]
 8021fae:	441c      	add	r4, r3
 8021fb0:	e72b      	b.n	8021e0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8021fb2:	b01b      	add	sp, #108	; 0x6c
 8021fb4:	ecbd 8b08 	vpop	{d8-d11}
 8021fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021fbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fc0:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8021fc4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8021fc8:	fb04 5603 	mla	r6, r4, r3, r5
 8021fcc:	2c00      	cmp	r4, #0
 8021fce:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8021fd2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8021fd6:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8021fda:	db36      	blt.n	802204a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8021fdc:	45a6      	cmp	lr, r4
 8021fde:	dd34      	ble.n	802204a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8021fe0:	2d00      	cmp	r5, #0
 8021fe2:	db30      	blt.n	8022046 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8021fe4:	42ab      	cmp	r3, r5
 8021fe6:	dd2e      	ble.n	8022046 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8021fe8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8021fec:	1c6e      	adds	r6, r5, #1
 8021fee:	d42f      	bmi.n	8022050 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8021ff0:	42b3      	cmp	r3, r6
 8021ff2:	dd2d      	ble.n	8022050 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8021ff4:	b370      	cbz	r0, 8022054 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 8021ff6:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8021ffa:	3401      	adds	r4, #1
 8021ffc:	d42e      	bmi.n	802205c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8021ffe:	45a6      	cmp	lr, r4
 8022000:	dd2c      	ble.n	802205c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 8022002:	b377      	cbz	r7, 8022062 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 8022004:	2d00      	cmp	r5, #0
 8022006:	db27      	blt.n	8022058 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 8022008:	42ab      	cmp	r3, r5
 802200a:	dd25      	ble.n	8022058 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 802200c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022010:	3501      	adds	r5, #1
 8022012:	d429      	bmi.n	8022068 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022014:	42ab      	cmp	r3, r5
 8022016:	dd27      	ble.n	8022068 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 8022018:	b340      	cbz	r0, 802206c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 802201a:	3301      	adds	r3, #1
 802201c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8022020:	280f      	cmp	r0, #15
 8022022:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022026:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802202a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802202e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8022032:	d801      	bhi.n	8022038 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 8022034:	2f0f      	cmp	r7, #15
 8022036:	d91b      	bls.n	8022070 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 8022038:	4b89      	ldr	r3, [pc, #548]	; (8022260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 802203a:	f240 1157 	movw	r1, #343	; 0x157
 802203e:	4a89      	ldr	r2, [pc, #548]	; (8022264 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8022040:	4889      	ldr	r0, [pc, #548]	; (8022268 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8022042:	f003 fd99 	bl	8025b78 <__assert_func>
 8022046:	2200      	movs	r2, #0
 8022048:	e7d0      	b.n	8021fec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 802204a:	2600      	movs	r6, #0
 802204c:	4632      	mov	r2, r6
 802204e:	e7d4      	b.n	8021ffa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022050:	2600      	movs	r6, #0
 8022052:	e7d2      	b.n	8021ffa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022054:	4606      	mov	r6, r0
 8022056:	e7d0      	b.n	8021ffa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 8022058:	2400      	movs	r4, #0
 802205a:	e7d9      	b.n	8022010 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 802205c:	2300      	movs	r3, #0
 802205e:	461c      	mov	r4, r3
 8022060:	e7de      	b.n	8022020 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022062:	463b      	mov	r3, r7
 8022064:	463c      	mov	r4, r7
 8022066:	e7db      	b.n	8022020 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022068:	2300      	movs	r3, #0
 802206a:	e7d9      	b.n	8022020 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 802206c:	4603      	mov	r3, r0
 802206e:	e7d7      	b.n	8022020 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8022070:	b280      	uxth	r0, r0
 8022072:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022076:	b2bf      	uxth	r7, r7
 8022078:	fb00 fe07 	mul.w	lr, r0, r7
 802207c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8022080:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022084:	eba0 0c0e 	sub.w	ip, r0, lr
 8022088:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 802208c:	b2bf      	uxth	r7, r7
 802208e:	fa1f fc8c 	uxth.w	ip, ip
 8022092:	eba5 0507 	sub.w	r5, r5, r7
 8022096:	fb0c f00a 	mul.w	r0, ip, sl
 802209a:	b2ad      	uxth	r5, r5
 802209c:	fb05 000b 	mla	r0, r5, fp, r0
 80220a0:	fb07 0009 	mla	r0, r7, r9, r0
 80220a4:	fb0e 0008 	mla	r0, lr, r8, r0
 80220a8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80220ac:	9001      	str	r0, [sp, #4]
 80220ae:	d018      	beq.n	80220e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 80220b0:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80220b4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80220b8:	fb0b f000 	mul.w	r0, fp, r0
 80220bc:	fb0b fb02 	mul.w	fp, fp, r2
 80220c0:	0a02      	lsrs	r2, r0, #8
 80220c2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80220c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80220ca:	4402      	add	r2, r0
 80220cc:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80220d0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80220d4:	0a12      	lsrs	r2, r2, #8
 80220d6:	0a00      	lsrs	r0, r0, #8
 80220d8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80220dc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80220e0:	4302      	orrs	r2, r0
 80220e2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80220e6:	d01a      	beq.n	802211e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 80220e8:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80220ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80220f0:	fb0a f000 	mul.w	r0, sl, r0
 80220f4:	fb0a fa06 	mul.w	sl, sl, r6
 80220f8:	0a06      	lsrs	r6, r0, #8
 80220fa:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80220fe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022102:	4406      	add	r6, r0
 8022104:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022108:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802210c:	0a36      	lsrs	r6, r6, #8
 802210e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022112:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022116:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802211a:	ea46 060a 	orr.w	r6, r6, sl
 802211e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022122:	d01b      	beq.n	802215c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8022124:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022128:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802212c:	fb09 fa0a 	mul.w	sl, r9, sl
 8022130:	fb09 f004 	mul.w	r0, r9, r4
 8022134:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022138:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802213c:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8022140:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022144:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8022148:	4454      	add	r4, sl
 802214a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802214e:	0a24      	lsrs	r4, r4, #8
 8022150:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022154:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022158:	ea44 0409 	orr.w	r4, r4, r9
 802215c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022160:	d01b      	beq.n	802219a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 8022162:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8022166:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802216a:	fb08 f909 	mul.w	r9, r8, r9
 802216e:	fb08 f003 	mul.w	r0, r8, r3
 8022172:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8022176:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802217a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802217e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022182:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8022186:	444b      	add	r3, r9
 8022188:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802218c:	0a1b      	lsrs	r3, r3, #8
 802218e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022192:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022196:	ea43 0308 	orr.w	r3, r3, r8
 802219a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802219e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80221a2:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80221a6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80221aa:	fb0c f000 	mul.w	r0, ip, r0
 80221ae:	fb0c f606 	mul.w	r6, ip, r6
 80221b2:	fb05 0808 	mla	r8, r5, r8, r0
 80221b6:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80221ba:	fb05 6502 	mla	r5, r5, r2, r6
 80221be:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80221c2:	fb07 8800 	mla	r8, r7, r0, r8
 80221c6:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80221ca:	fb07 5704 	mla	r7, r7, r4, r5
 80221ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80221d2:	fb0e 8000 	mla	r0, lr, r0, r8
 80221d6:	fb0e 7e03 	mla	lr, lr, r3, r7
 80221da:	9b01      	ldr	r3, [sp, #4]
 80221dc:	0a00      	lsrs	r0, r0, #8
 80221de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80221e2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80221e6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80221ea:	ea40 0e0e 	orr.w	lr, r0, lr
 80221ee:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80221f2:	b280      	uxth	r0, r0
 80221f4:	fa5f f48e 	uxtb.w	r4, lr
 80221f8:	4343      	muls	r3, r0
 80221fa:	fb14 f400 	smulbb	r4, r4, r0
 80221fe:	1c5a      	adds	r2, r3, #1
 8022200:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022204:	780b      	ldrb	r3, [r1, #0]
 8022206:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 802220a:	b2d2      	uxtb	r2, r2
 802220c:	fb03 4302 	mla	r3, r3, r2, r4
 8022210:	b29b      	uxth	r3, r3
 8022212:	1c5c      	adds	r4, r3, #1
 8022214:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022218:	784c      	ldrb	r4, [r1, #1]
 802221a:	fb14 f402 	smulbb	r4, r4, r2
 802221e:	121b      	asrs	r3, r3, #8
 8022220:	700b      	strb	r3, [r1, #0]
 8022222:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8022226:	fb03 4300 	mla	r3, r3, r0, r4
 802222a:	b29b      	uxth	r3, r3
 802222c:	1c5c      	adds	r4, r3, #1
 802222e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8022232:	121b      	asrs	r3, r3, #8
 8022234:	704b      	strb	r3, [r1, #1]
 8022236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802223a:	f891 e002 	ldrb.w	lr, [r1, #2]
 802223e:	fb1e fe02 	smulbb	lr, lr, r2
 8022242:	fb03 ee00 	mla	lr, r3, r0, lr
 8022246:	fa1f fe8e 	uxth.w	lr, lr
 802224a:	f10e 0301 	add.w	r3, lr, #1
 802224e:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8022252:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022256:	f881 e002 	strb.w	lr, [r1, #2]
 802225a:	b003      	add	sp, #12
 802225c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022260:	0802b042 	.word	0x0802b042
 8022264:	0802b53a 	.word	0x0802b53a
 8022268:	0802b10b 	.word	0x0802b10b

0802226c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022270:	ed2d 8b08 	vpush	{d8-d11}
 8022274:	b09d      	sub	sp, #116	; 0x74
 8022276:	eeb0 aa40 	vmov.f32	s20, s0
 802227a:	eef0 9a60 	vmov.f32	s19, s1
 802227e:	9219      	str	r2, [sp, #100]	; 0x64
 8022280:	eeb0 9a41 	vmov.f32	s18, s2
 8022284:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8022286:	eeb0 8a62 	vmov.f32	s16, s5
 802228a:	9307      	str	r3, [sp, #28]
 802228c:	eef0 8a43 	vmov.f32	s17, s6
 8022290:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8022294:	eef0 ba44 	vmov.f32	s23, s8
 8022298:	901b      	str	r0, [sp, #108]	; 0x6c
 802229a:	eeb0 ba64 	vmov.f32	s22, s9
 802229e:	931a      	str	r3, [sp, #104]	; 0x68
 80222a0:	eef0 aa45 	vmov.f32	s21, s10
 80222a4:	6850      	ldr	r0, [r2, #4]
 80222a6:	9117      	str	r1, [sp, #92]	; 0x5c
 80222a8:	6812      	ldr	r2, [r2, #0]
 80222aa:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 80222ae:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 80222b2:	fb00 1303 	mla	r3, r0, r3, r1
 80222b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222ba:	18d3      	adds	r3, r2, r3
 80222bc:	930a      	str	r3, [sp, #40]	; 0x28
 80222be:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80222c0:	681b      	ldr	r3, [r3, #0]
 80222c2:	9310      	str	r3, [sp, #64]	; 0x40
 80222c4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80222c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80222ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80222cc:	2b00      	cmp	r3, #0
 80222ce:	dc03      	bgt.n	80222d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80222d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	f340 8368 	ble.w	80229a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80222d8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80222da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80222de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80222e2:	1e48      	subs	r0, r1, #1
 80222e4:	1e57      	subs	r7, r2, #1
 80222e6:	9b07      	ldr	r3, [sp, #28]
 80222e8:	2b00      	cmp	r3, #0
 80222ea:	f340 8187 	ble.w	80225fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 80222ee:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80222f2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80222f6:	d406      	bmi.n	8022306 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80222f8:	4584      	cmp	ip, r0
 80222fa:	da04      	bge.n	8022306 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80222fc:	2b00      	cmp	r3, #0
 80222fe:	db02      	blt.n	8022306 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022300:	42bb      	cmp	r3, r7
 8022302:	f2c0 817c 	blt.w	80225fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022306:	f11c 0c01 	adds.w	ip, ip, #1
 802230a:	f100 816c 	bmi.w	80225e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802230e:	4561      	cmp	r1, ip
 8022310:	f2c0 8169 	blt.w	80225e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022314:	3301      	adds	r3, #1
 8022316:	f100 8166 	bmi.w	80225e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802231a:	429a      	cmp	r2, r3
 802231c:	f2c0 8163 	blt.w	80225e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8022320:	9b07      	ldr	r3, [sp, #28]
 8022322:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022324:	9318      	str	r3, [sp, #96]	; 0x60
 8022326:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022328:	2b00      	cmp	r3, #0
 802232a:	f340 8186 	ble.w	802263a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 802232e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022330:	142a      	asrs	r2, r5, #16
 8022332:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022336:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802233a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802233e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022342:	f100 81cb 	bmi.w	80226dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022346:	f10e 38ff 	add.w	r8, lr, #4294967295
 802234a:	4542      	cmp	r2, r8
 802234c:	f280 81c6 	bge.w	80226dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022350:	2800      	cmp	r0, #0
 8022352:	f2c0 81c3 	blt.w	80226dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022356:	f103 38ff 	add.w	r8, r3, #4294967295
 802235a:	4540      	cmp	r0, r8
 802235c:	f280 81be 	bge.w	80226dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022360:	fa0f f38e 	sxth.w	r3, lr
 8022364:	fb00 2203 	mla	r2, r0, r3, r2
 8022368:	9810      	ldr	r0, [sp, #64]	; 0x40
 802236a:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 802236e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8022372:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022376:	2900      	cmp	r1, #0
 8022378:	f000 81a6 	beq.w	80226c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 802237c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8022380:	900c      	str	r0, [sp, #48]	; 0x30
 8022382:	0e00      	lsrs	r0, r0, #24
 8022384:	9013      	str	r0, [sp, #76]	; 0x4c
 8022386:	f1bc 0f00 	cmp.w	ip, #0
 802238a:	d00f      	beq.n	80223ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802238c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022390:	3b01      	subs	r3, #1
 8022392:	009b      	lsls	r3, r3, #2
 8022394:	3304      	adds	r3, #4
 8022396:	eb08 0003 	add.w	r0, r8, r3
 802239a:	f858 3003 	ldr.w	r3, [r8, r3]
 802239e:	9308      	str	r3, [sp, #32]
 80223a0:	0e1b      	lsrs	r3, r3, #24
 80223a2:	9311      	str	r3, [sp, #68]	; 0x44
 80223a4:	6843      	ldr	r3, [r0, #4]
 80223a6:	930d      	str	r3, [sp, #52]	; 0x34
 80223a8:	0e1b      	lsrs	r3, r3, #24
 80223aa:	9314      	str	r3, [sp, #80]	; 0x50
 80223ac:	b289      	uxth	r1, r1
 80223ae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80223b0:	fa1f fc8c 	uxth.w	ip, ip
 80223b4:	0108      	lsls	r0, r1, #4
 80223b6:	fb01 f90c 	mul.w	r9, r1, ip
 80223ba:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80223be:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80223c2:	eba0 0809 	sub.w	r8, r0, r9
 80223c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80223c8:	fa1f f18c 	uxth.w	r1, ip
 80223cc:	fa1f f888 	uxth.w	r8, r8
 80223d0:	1a5b      	subs	r3, r3, r1
 80223d2:	fb08 f000 	mul.w	r0, r8, r0
 80223d6:	b29b      	uxth	r3, r3
 80223d8:	fb03 000e 	mla	r0, r3, lr, r0
 80223dc:	fb01 0004 	mla	r0, r1, r4, r0
 80223e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80223e2:	fb09 0004 	mla	r0, r9, r4, r0
 80223e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80223ea:	2800      	cmp	r0, #0
 80223ec:	f000 80f2 	beq.w	80225d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80223f0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80223f4:	d01b      	beq.n	802242e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80223f6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80223fa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80223fe:	fb0e fa0a 	mul.w	sl, lr, sl
 8022402:	fb0e fe02 	mul.w	lr, lr, r2
 8022406:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802240a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802240e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022412:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022416:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802241a:	4452      	add	r2, sl
 802241c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022420:	0a12      	lsrs	r2, r2, #8
 8022422:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022426:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802242a:	ea42 020c 	orr.w	r2, r2, ip
 802242e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022430:	2cff      	cmp	r4, #255	; 0xff
 8022432:	d021      	beq.n	8022478 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022434:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022436:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802243a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802243c:	fb04 fb0b 	mul.w	fp, r4, fp
 8022440:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022442:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022446:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022448:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802244c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022450:	fb04 fa0a 	mul.w	sl, r4, sl
 8022454:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022458:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802245c:	44de      	add	lr, fp
 802245e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022462:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022466:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802246a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802246e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022472:	ea4e 040a 	orr.w	r4, lr, sl
 8022476:	940c      	str	r4, [sp, #48]	; 0x30
 8022478:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802247a:	2cff      	cmp	r4, #255	; 0xff
 802247c:	d021      	beq.n	80224c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 802247e:	9c08      	ldr	r4, [sp, #32]
 8022480:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022484:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022486:	fb04 fb0b 	mul.w	fp, r4, fp
 802248a:	9c08      	ldr	r4, [sp, #32]
 802248c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022490:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022492:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022496:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802249a:	fb04 fa0a 	mul.w	sl, r4, sl
 802249e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80224a2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80224a6:	44de      	add	lr, fp
 80224a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80224ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80224b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80224b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80224bc:	ea4e 040a 	orr.w	r4, lr, sl
 80224c0:	9408      	str	r4, [sp, #32]
 80224c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80224c4:	2cff      	cmp	r4, #255	; 0xff
 80224c6:	d021      	beq.n	802250c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80224c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80224ca:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80224ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80224d0:	fb04 fb0b 	mul.w	fp, r4, fp
 80224d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80224d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80224da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80224dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80224e0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80224e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80224e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80224ec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80224f0:	44de      	add	lr, fp
 80224f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80224f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80224fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022502:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022506:	ea4e 040a 	orr.w	r4, lr, sl
 802250a:	940d      	str	r4, [sp, #52]	; 0x34
 802250c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802250e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022512:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022516:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802251a:	9c08      	ldr	r4, [sp, #32]
 802251c:	fb08 fc0c 	mul.w	ip, r8, ip
 8022520:	fb03 cc0e 	mla	ip, r3, lr, ip
 8022524:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022528:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802252a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802252e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022532:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022534:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022538:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802253c:	fb08 f80e 	mul.w	r8, r8, lr
 8022540:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022544:	fb03 8202 	mla	r2, r3, r2, r8
 8022548:	9b08      	ldr	r3, [sp, #32]
 802254a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802254e:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8022552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022554:	fb01 220a 	mla	r2, r1, sl, r2
 8022558:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802255c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802255e:	fb09 2901 	mla	r9, r9, r1, r2
 8022562:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022564:	4343      	muls	r3, r0
 8022566:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802256a:	1c58      	adds	r0, r3, #1
 802256c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022570:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022574:	783b      	ldrb	r3, [r7, #0]
 8022576:	ea4c 0c09 	orr.w	ip, ip, r9
 802257a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802257e:	fa5f f28c 	uxtb.w	r2, ip
 8022582:	b2c0      	uxtb	r0, r0
 8022584:	fb12 f201 	smulbb	r2, r2, r1
 8022588:	fb03 2300 	mla	r3, r3, r0, r2
 802258c:	b29b      	uxth	r3, r3
 802258e:	1c5a      	adds	r2, r3, #1
 8022590:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022594:	787a      	ldrb	r2, [r7, #1]
 8022596:	fb12 f200 	smulbb	r2, r2, r0
 802259a:	121b      	asrs	r3, r3, #8
 802259c:	703b      	strb	r3, [r7, #0]
 802259e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80225a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80225a6:	fb03 2301 	mla	r3, r3, r1, r2
 80225aa:	b29b      	uxth	r3, r3
 80225ac:	1c5a      	adds	r2, r3, #1
 80225ae:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80225b2:	121b      	asrs	r3, r3, #8
 80225b4:	707b      	strb	r3, [r7, #1]
 80225b6:	78bb      	ldrb	r3, [r7, #2]
 80225b8:	fb13 f000 	smulbb	r0, r3, r0
 80225bc:	fb0c 0c01 	mla	ip, ip, r1, r0
 80225c0:	fa1f fc8c 	uxth.w	ip, ip
 80225c4:	f10c 0301 	add.w	r3, ip, #1
 80225c8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80225cc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80225d0:	f887 c002 	strb.w	ip, [r7, #2]
 80225d4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80225d6:	3703      	adds	r7, #3
 80225d8:	441d      	add	r5, r3
 80225da:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80225dc:	441e      	add	r6, r3
 80225de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80225e0:	3b01      	subs	r3, #1
 80225e2:	9318      	str	r3, [sp, #96]	; 0x60
 80225e4:	e69f      	b.n	8022326 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80225e6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80225e8:	441d      	add	r5, r3
 80225ea:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80225ec:	441e      	add	r6, r3
 80225ee:	9b07      	ldr	r3, [sp, #28]
 80225f0:	3b01      	subs	r3, #1
 80225f2:	9307      	str	r3, [sp, #28]
 80225f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80225f6:	3303      	adds	r3, #3
 80225f8:	930a      	str	r3, [sp, #40]	; 0x28
 80225fa:	e674      	b.n	80222e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80225fc:	d025      	beq.n	802264a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80225fe:	9b07      	ldr	r3, [sp, #28]
 8022600:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8022602:	3b01      	subs	r3, #1
 8022604:	fb00 5003 	mla	r0, r0, r3, r5
 8022608:	1400      	asrs	r0, r0, #16
 802260a:	f53f ae89 	bmi.w	8022320 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802260e:	3901      	subs	r1, #1
 8022610:	4288      	cmp	r0, r1
 8022612:	f6bf ae85 	bge.w	8022320 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022616:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8022618:	fb01 6303 	mla	r3, r1, r3, r6
 802261c:	141b      	asrs	r3, r3, #16
 802261e:	f53f ae7f 	bmi.w	8022320 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8022622:	3a01      	subs	r2, #1
 8022624:	4293      	cmp	r3, r2
 8022626:	f6bf ae7b 	bge.w	8022320 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802262a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802262c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8022630:	f103 0e03 	add.w	lr, r3, #3
 8022634:	f1bb 0f00 	cmp.w	fp, #0
 8022638:	dc6e      	bgt.n	8022718 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 802263a:	9b07      	ldr	r3, [sp, #28]
 802263c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022642:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022646:	4423      	add	r3, r4
 8022648:	930a      	str	r3, [sp, #40]	; 0x28
 802264a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802264c:	2b00      	cmp	r3, #0
 802264e:	f340 81ab 	ble.w	80229a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8022652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022656:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022658:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802265c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022660:	eef0 6a48 	vmov.f32	s13, s16
 8022664:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022668:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802266c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022670:	ee16 5a90 	vmov	r5, s13
 8022674:	eef0 6a68 	vmov.f32	s13, s17
 8022678:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802267c:	ee16 6a90 	vmov	r6, s13
 8022680:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022684:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022688:	ee37 8a48 	vsub.f32	s16, s14, s16
 802268c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022690:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022694:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022698:	ee18 2a10 	vmov	r2, s16
 802269c:	eeb0 8a47 	vmov.f32	s16, s14
 80226a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80226a4:	ee18 2a90 	vmov	r2, s17
 80226a8:	9331      	str	r3, [sp, #196]	; 0xc4
 80226aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80226ac:	eef0 8a67 	vmov.f32	s17, s15
 80226b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80226b4:	9332      	str	r3, [sp, #200]	; 0xc8
 80226b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80226b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80226ba:	3b01      	subs	r3, #1
 80226bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80226be:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80226c0:	bf08      	it	eq
 80226c2:	4613      	moveq	r3, r2
 80226c4:	9307      	str	r3, [sp, #28]
 80226c6:	e600      	b.n	80222ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80226c8:	f1bc 0f00 	cmp.w	ip, #0
 80226cc:	f43f ae6e 	beq.w	80223ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80226d0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80226d4:	9308      	str	r3, [sp, #32]
 80226d6:	0e1b      	lsrs	r3, r3, #24
 80226d8:	9311      	str	r3, [sp, #68]	; 0x44
 80226da:	e667      	b.n	80223ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80226dc:	f112 0801 	adds.w	r8, r2, #1
 80226e0:	f53f af78 	bmi.w	80225d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80226e4:	45c6      	cmp	lr, r8
 80226e6:	f6ff af75 	blt.w	80225d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80226ea:	f110 0801 	adds.w	r8, r0, #1
 80226ee:	f53f af71 	bmi.w	80225d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80226f2:	4543      	cmp	r3, r8
 80226f4:	f6ff af6e 	blt.w	80225d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80226f8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80226fa:	b21b      	sxth	r3, r3
 80226fc:	9201      	str	r2, [sp, #4]
 80226fe:	9300      	str	r3, [sp, #0]
 8022700:	fa0f f38e 	sxth.w	r3, lr
 8022704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802270a:	e9cd c404 	strd	ip, r4, [sp, #16]
 802270e:	4639      	mov	r1, r7
 8022710:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022712:	f7ff fc53 	bl	8021fbc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8022716:	e75d      	b.n	80225d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8022718:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802271a:	142f      	asrs	r7, r5, #16
 802271c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802271e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022722:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8022726:	1433      	asrs	r3, r6, #16
 8022728:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802272c:	fb02 7303 	mla	r3, r2, r3, r7
 8022730:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8022734:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8022738:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802273c:	2900      	cmp	r1, #0
 802273e:	f000 812a 	beq.w	8022996 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 8022742:	687c      	ldr	r4, [r7, #4]
 8022744:	940e      	str	r4, [sp, #56]	; 0x38
 8022746:	0e24      	lsrs	r4, r4, #24
 8022748:	9415      	str	r4, [sp, #84]	; 0x54
 802274a:	b178      	cbz	r0, 802276c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 802274c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8022750:	3a01      	subs	r2, #1
 8022752:	0092      	lsls	r2, r2, #2
 8022754:	3204      	adds	r2, #4
 8022756:	eb07 0802 	add.w	r8, r7, r2
 802275a:	58ba      	ldr	r2, [r7, r2]
 802275c:	9209      	str	r2, [sp, #36]	; 0x24
 802275e:	0e12      	lsrs	r2, r2, #24
 8022760:	9212      	str	r2, [sp, #72]	; 0x48
 8022762:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8022766:	920f      	str	r2, [sp, #60]	; 0x3c
 8022768:	0e12      	lsrs	r2, r2, #24
 802276a:	9216      	str	r2, [sp, #88]	; 0x58
 802276c:	b289      	uxth	r1, r1
 802276e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022770:	b280      	uxth	r0, r0
 8022772:	fb01 f900 	mul.w	r9, r1, r0
 8022776:	0109      	lsls	r1, r1, #4
 8022778:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802277c:	eba1 0809 	sub.w	r8, r1, r9
 8022780:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8022784:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022786:	b280      	uxth	r0, r0
 8022788:	fa1f f888 	uxth.w	r8, r8
 802278c:	1a12      	subs	r2, r2, r0
 802278e:	fb08 f101 	mul.w	r1, r8, r1
 8022792:	b292      	uxth	r2, r2
 8022794:	fb02 110c 	mla	r1, r2, ip, r1
 8022798:	fb00 1104 	mla	r1, r0, r4, r1
 802279c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802279e:	fb09 1104 	mla	r1, r9, r4, r1
 80227a2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80227a6:	2900      	cmp	r1, #0
 80227a8:	f000 80ec 	beq.w	8022984 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80227ac:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80227b0:	d019      	beq.n	80227e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 80227b2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80227b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80227ba:	fb0c fa0a 	mul.w	sl, ip, sl
 80227be:	fb0c fc03 	mul.w	ip, ip, r3
 80227c2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80227c6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80227ca:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80227ce:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80227d2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80227d6:	4453      	add	r3, sl
 80227d8:	0a3f      	lsrs	r7, r7, #8
 80227da:	0a1b      	lsrs	r3, r3, #8
 80227dc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80227e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80227e4:	433b      	orrs	r3, r7
 80227e6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80227e8:	2cff      	cmp	r4, #255	; 0xff
 80227ea:	d020      	beq.n	802282e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 80227ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80227ee:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80227f2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80227f4:	4367      	muls	r7, r4
 80227f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80227f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80227fc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022800:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022802:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022806:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802280a:	fb04 fa0a 	mul.w	sl, r4, sl
 802280e:	44bc      	add	ip, r7
 8022810:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022814:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022818:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802281c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022820:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022824:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022828:	ea4c 040a 	orr.w	r4, ip, sl
 802282c:	940e      	str	r4, [sp, #56]	; 0x38
 802282e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022830:	2cff      	cmp	r4, #255	; 0xff
 8022832:	d020      	beq.n	8022876 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 8022834:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022836:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802283a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802283c:	4367      	muls	r7, r4
 802283e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022840:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022844:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022848:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802284a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802284e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022852:	fb04 fa0a 	mul.w	sl, r4, sl
 8022856:	44bc      	add	ip, r7
 8022858:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802285c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022860:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022864:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022868:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802286c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022870:	ea4c 040a 	orr.w	r4, ip, sl
 8022874:	9409      	str	r4, [sp, #36]	; 0x24
 8022876:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022878:	2cff      	cmp	r4, #255	; 0xff
 802287a:	d020      	beq.n	80228be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 802287c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802287e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022882:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022884:	4367      	muls	r7, r4
 8022886:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022888:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802288c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022890:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8022892:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022896:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802289a:	fb04 fa0a 	mul.w	sl, r4, sl
 802289e:	44bc      	add	ip, r7
 80228a0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80228a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80228a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80228ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80228b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80228b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80228b8:	ea4c 040a 	orr.w	r4, ip, sl
 80228bc:	940f      	str	r4, [sp, #60]	; 0x3c
 80228be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80228c0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80228c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80228c8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80228cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80228ce:	fb08 f707 	mul.w	r7, r8, r7
 80228d2:	fb02 770c 	mla	r7, r2, ip, r7
 80228d6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80228da:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80228dc:	fb00 770c 	mla	r7, r0, ip, r7
 80228e0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80228e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80228e6:	fb09 770c 	mla	r7, r9, ip, r7
 80228ea:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80228ee:	fb08 f80c 	mul.w	r8, r8, ip
 80228f2:	0a3f      	lsrs	r7, r7, #8
 80228f4:	fb02 8303 	mla	r3, r2, r3, r8
 80228f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80228fa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80228fe:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022902:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022904:	fb00 330a 	mla	r3, r0, sl, r3
 8022908:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802290c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802290e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022914:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022918:	434b      	muls	r3, r1
 802291a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802291e:	1c59      	adds	r1, r3, #1
 8022920:	ea47 070c 	orr.w	r7, r7, ip
 8022924:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022928:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802292c:	b2fa      	uxtb	r2, r7
 802292e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022932:	fb12 f200 	smulbb	r2, r2, r0
 8022936:	b2c9      	uxtb	r1, r1
 8022938:	fb03 2301 	mla	r3, r3, r1, r2
 802293c:	b29b      	uxth	r3, r3
 802293e:	1c5a      	adds	r2, r3, #1
 8022940:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022944:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022948:	fb12 f201 	smulbb	r2, r2, r1
 802294c:	121b      	asrs	r3, r3, #8
 802294e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022952:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8022956:	0c3f      	lsrs	r7, r7, #16
 8022958:	fb03 2300 	mla	r3, r3, r0, r2
 802295c:	b29b      	uxth	r3, r3
 802295e:	1c5a      	adds	r2, r3, #1
 8022960:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022964:	121b      	asrs	r3, r3, #8
 8022966:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802296a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802296e:	fb13 f101 	smulbb	r1, r3, r1
 8022972:	fb07 1700 	mla	r7, r7, r0, r1
 8022976:	b2bf      	uxth	r7, r7
 8022978:	1c79      	adds	r1, r7, #1
 802297a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802297e:	123f      	asrs	r7, r7, #8
 8022980:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8022984:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8022986:	f10e 0e03 	add.w	lr, lr, #3
 802298a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802298e:	441d      	add	r5, r3
 8022990:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022992:	441e      	add	r6, r3
 8022994:	e64e      	b.n	8022634 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8022996:	2800      	cmp	r0, #0
 8022998:	f43f aee8 	beq.w	802276c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 802299c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80229a0:	9209      	str	r2, [sp, #36]	; 0x24
 80229a2:	0e12      	lsrs	r2, r2, #24
 80229a4:	9212      	str	r2, [sp, #72]	; 0x48
 80229a6:	e6e1      	b.n	802276c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80229a8:	b01d      	add	sp, #116	; 0x74
 80229aa:	ecbd 8b08 	vpop	{d8-d11}
 80229ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080229b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80229b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229b8:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80229bc:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80229c0:	fb04 5603 	mla	r6, r4, r3, r5
 80229c4:	2c00      	cmp	r4, #0
 80229c6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80229ca:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80229ce:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80229d2:	db36      	blt.n	8022a42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 80229d4:	45a6      	cmp	lr, r4
 80229d6:	dd34      	ble.n	8022a42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 80229d8:	2d00      	cmp	r5, #0
 80229da:	db30      	blt.n	8022a3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 80229dc:	42ab      	cmp	r3, r5
 80229de:	dd2e      	ble.n	8022a3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 80229e0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80229e4:	1c6e      	adds	r6, r5, #1
 80229e6:	d42f      	bmi.n	8022a48 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 80229e8:	42b3      	cmp	r3, r6
 80229ea:	dd2d      	ble.n	8022a48 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 80229ec:	b370      	cbz	r0, 8022a4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 80229ee:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80229f2:	3401      	adds	r4, #1
 80229f4:	d42e      	bmi.n	8022a54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 80229f6:	45a6      	cmp	lr, r4
 80229f8:	dd2c      	ble.n	8022a54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 80229fa:	b377      	cbz	r7, 8022a5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 80229fc:	2d00      	cmp	r5, #0
 80229fe:	db27      	blt.n	8022a50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8022a00:	42ab      	cmp	r3, r5
 8022a02:	dd25      	ble.n	8022a50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 8022a04:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8022a08:	3501      	adds	r5, #1
 8022a0a:	d429      	bmi.n	8022a60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8022a0c:	42ab      	cmp	r3, r5
 8022a0e:	dd27      	ble.n	8022a60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 8022a10:	b340      	cbz	r0, 8022a64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 8022a12:	3301      	adds	r3, #1
 8022a14:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8022a18:	280f      	cmp	r0, #15
 8022a1a:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8022a1e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022a22:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022a26:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8022a2a:	d801      	bhi.n	8022a30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 8022a2c:	2f0f      	cmp	r7, #15
 8022a2e:	d91b      	bls.n	8022a68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 8022a30:	4b7e      	ldr	r3, [pc, #504]	; (8022c2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 8022a32:	f240 1157 	movw	r1, #343	; 0x157
 8022a36:	4a7e      	ldr	r2, [pc, #504]	; (8022c30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 8022a38:	487e      	ldr	r0, [pc, #504]	; (8022c34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 8022a3a:	f003 f89d 	bl	8025b78 <__assert_func>
 8022a3e:	2200      	movs	r2, #0
 8022a40:	e7d0      	b.n	80229e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 8022a42:	2600      	movs	r6, #0
 8022a44:	4632      	mov	r2, r6
 8022a46:	e7d4      	b.n	80229f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8022a48:	2600      	movs	r6, #0
 8022a4a:	e7d2      	b.n	80229f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8022a4c:	4606      	mov	r6, r0
 8022a4e:	e7d0      	b.n	80229f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 8022a50:	2400      	movs	r4, #0
 8022a52:	e7d9      	b.n	8022a08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 8022a54:	2300      	movs	r3, #0
 8022a56:	461c      	mov	r4, r3
 8022a58:	e7de      	b.n	8022a18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8022a5a:	463b      	mov	r3, r7
 8022a5c:	463c      	mov	r4, r7
 8022a5e:	e7db      	b.n	8022a18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8022a60:	2300      	movs	r3, #0
 8022a62:	e7d9      	b.n	8022a18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8022a64:	4603      	mov	r3, r0
 8022a66:	e7d7      	b.n	8022a18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8022a68:	b280      	uxth	r0, r0
 8022a6a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022a6e:	b2bf      	uxth	r7, r7
 8022a70:	fb00 fe07 	mul.w	lr, r0, r7
 8022a74:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8022a78:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8022a7c:	eba0 0c0e 	sub.w	ip, r0, lr
 8022a80:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8022a84:	b2bf      	uxth	r7, r7
 8022a86:	fa1f fc8c 	uxth.w	ip, ip
 8022a8a:	eba0 0507 	sub.w	r5, r0, r7
 8022a8e:	fb0c f00a 	mul.w	r0, ip, sl
 8022a92:	b2ad      	uxth	r5, r5
 8022a94:	fb05 000b 	mla	r0, r5, fp, r0
 8022a98:	fb07 0009 	mla	r0, r7, r9, r0
 8022a9c:	fb0e 0008 	mla	r0, lr, r8, r0
 8022aa0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022aa4:	9001      	str	r0, [sp, #4]
 8022aa6:	d018      	beq.n	8022ada <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 8022aa8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8022aac:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022ab0:	fb0b f000 	mul.w	r0, fp, r0
 8022ab4:	fb0b fb02 	mul.w	fp, fp, r2
 8022ab8:	0a02      	lsrs	r2, r0, #8
 8022aba:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022abe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022ac2:	4402      	add	r2, r0
 8022ac4:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8022ac8:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022acc:	0a12      	lsrs	r2, r2, #8
 8022ace:	0a00      	lsrs	r0, r0, #8
 8022ad0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022ad4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022ad8:	4302      	orrs	r2, r0
 8022ada:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022ade:	d01a      	beq.n	8022b16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 8022ae0:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022ae4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022ae8:	fb0a f000 	mul.w	r0, sl, r0
 8022aec:	fb0a fa06 	mul.w	sl, sl, r6
 8022af0:	0a06      	lsrs	r6, r0, #8
 8022af2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8022af6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022afa:	4406      	add	r6, r0
 8022afc:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8022b00:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8022b04:	0a36      	lsrs	r6, r6, #8
 8022b06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022b0a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022b0e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022b12:	ea46 060a 	orr.w	r6, r6, sl
 8022b16:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022b1a:	d01b      	beq.n	8022b54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 8022b1c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8022b20:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022b24:	fb09 fa0a 	mul.w	sl, r9, sl
 8022b28:	fb09 f004 	mul.w	r0, r9, r4
 8022b2c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8022b30:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022b34:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8022b38:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022b3c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8022b40:	4454      	add	r4, sl
 8022b42:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022b46:	0a24      	lsrs	r4, r4, #8
 8022b48:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022b4c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022b50:	ea44 0409 	orr.w	r4, r4, r9
 8022b54:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8022b58:	d01b      	beq.n	8022b92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 8022b5a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8022b5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b62:	fb08 f909 	mul.w	r9, r8, r9
 8022b66:	fb08 f003 	mul.w	r0, r8, r3
 8022b6a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8022b6e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8022b72:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8022b76:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b7a:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8022b7e:	444b      	add	r3, r9
 8022b80:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022b84:	0a1b      	lsrs	r3, r3, #8
 8022b86:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022b8a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022b8e:	ea43 0308 	orr.w	r3, r3, r8
 8022b92:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8022b96:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022b9a:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8022b9e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022ba2:	fb0c f000 	mul.w	r0, ip, r0
 8022ba6:	fb0c f606 	mul.w	r6, ip, r6
 8022baa:	fb05 0808 	mla	r8, r5, r8, r0
 8022bae:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8022bb2:	fb05 6502 	mla	r5, r5, r2, r6
 8022bb6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022bba:	fb07 8800 	mla	r8, r7, r0, r8
 8022bbe:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8022bc2:	fb07 5704 	mla	r7, r7, r4, r5
 8022bc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022bca:	fb0e 8000 	mla	r0, lr, r0, r8
 8022bce:	780a      	ldrb	r2, [r1, #0]
 8022bd0:	fb0e 7e03 	mla	lr, lr, r3, r7
 8022bd4:	9b01      	ldr	r3, [sp, #4]
 8022bd6:	0a00      	lsrs	r0, r0, #8
 8022bd8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022bdc:	43db      	mvns	r3, r3
 8022bde:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022be2:	b2db      	uxtb	r3, r3
 8022be4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022be8:	ea40 0e0e 	orr.w	lr, r0, lr
 8022bec:	fb02 f003 	mul.w	r0, r2, r3
 8022bf0:	1c42      	adds	r2, r0, #1
 8022bf2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022bf6:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022bfa:	700a      	strb	r2, [r1, #0]
 8022bfc:	784a      	ldrb	r2, [r1, #1]
 8022bfe:	435a      	muls	r2, r3
 8022c00:	1c50      	adds	r0, r2, #1
 8022c02:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022c06:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8022c0a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022c0e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022c12:	704a      	strb	r2, [r1, #1]
 8022c14:	788a      	ldrb	r2, [r1, #2]
 8022c16:	4353      	muls	r3, r2
 8022c18:	1c5a      	adds	r2, r3, #1
 8022c1a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022c1e:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022c22:	f881 e002 	strb.w	lr, [r1, #2]
 8022c26:	b003      	add	sp, #12
 8022c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c2c:	0802b042 	.word	0x0802b042
 8022c30:	0802b53a 	.word	0x0802b53a
 8022c34:	0802b10b 	.word	0x0802b10b

08022c38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c3c:	ed2d 8b08 	vpush	{d8-d11}
 8022c40:	b099      	sub	sp, #100	; 0x64
 8022c42:	eeb0 aa40 	vmov.f32	s20, s0
 8022c46:	eef0 9a60 	vmov.f32	s19, s1
 8022c4a:	9017      	str	r0, [sp, #92]	; 0x5c
 8022c4c:	eeb0 9a41 	vmov.f32	s18, s2
 8022c50:	9306      	str	r3, [sp, #24]
 8022c52:	eeb0 8a62 	vmov.f32	s16, s5
 8022c56:	eef0 8a43 	vmov.f32	s17, s6
 8022c5a:	eef0 ba44 	vmov.f32	s23, s8
 8022c5e:	eeb0 ba64 	vmov.f32	s22, s9
 8022c62:	eef0 aa45 	vmov.f32	s21, s10
 8022c66:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8022c6a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022c6c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8022c70:	6850      	ldr	r0, [r2, #4]
 8022c72:	6812      	ldr	r2, [r2, #0]
 8022c74:	fb00 1303 	mla	r3, r0, r3, r1
 8022c78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022c7c:	18d3      	adds	r3, r2, r3
 8022c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8022c80:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022c82:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 8022c86:	681b      	ldr	r3, [r3, #0]
 8022c88:	930e      	str	r3, [sp, #56]	; 0x38
 8022c8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022c8c:	2b00      	cmp	r3, #0
 8022c8e:	dc03      	bgt.n	8022c98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8022c90:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022c92:	2b00      	cmp	r3, #0
 8022c94:	f340 8360 	ble.w	8023358 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8022c98:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022c9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022c9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022ca2:	1e48      	subs	r0, r1, #1
 8022ca4:	1e57      	subs	r7, r2, #1
 8022ca6:	9b06      	ldr	r3, [sp, #24]
 8022ca8:	2b00      	cmp	r3, #0
 8022caa:	f340 817b 	ble.w	8022fa4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022cae:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022cb2:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022cb6:	d406      	bmi.n	8022cc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022cb8:	4584      	cmp	ip, r0
 8022cba:	da04      	bge.n	8022cc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022cbc:	2b00      	cmp	r3, #0
 8022cbe:	db02      	blt.n	8022cc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022cc0:	42bb      	cmp	r3, r7
 8022cc2:	f2c0 8170 	blt.w	8022fa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8022cc6:	f11c 0c01 	adds.w	ip, ip, #1
 8022cca:	f100 8160 	bmi.w	8022f8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022cce:	4561      	cmp	r1, ip
 8022cd0:	f2c0 815d 	blt.w	8022f8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022cd4:	3301      	adds	r3, #1
 8022cd6:	f100 815a 	bmi.w	8022f8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022cda:	429a      	cmp	r2, r3
 8022cdc:	f2c0 8157 	blt.w	8022f8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022ce0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022ce4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022ce6:	f1b8 0f00 	cmp.w	r8, #0
 8022cea:	f340 8179 	ble.w	8022fe0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8022cee:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8022cf0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022cf4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022cf6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022cfa:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022cfe:	142a      	asrs	r2, r5, #16
 8022d00:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022d04:	689b      	ldr	r3, [r3, #8]
 8022d06:	f100 81be 	bmi.w	8023086 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022d0a:	f103 39ff 	add.w	r9, r3, #4294967295
 8022d0e:	454a      	cmp	r2, r9
 8022d10:	f280 81b9 	bge.w	8023086 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022d14:	f1bc 0f00 	cmp.w	ip, #0
 8022d18:	f2c0 81b5 	blt.w	8023086 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022d1c:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022d20:	45cc      	cmp	ip, r9
 8022d22:	f280 81b0 	bge.w	8023086 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8022d26:	b21b      	sxth	r3, r3
 8022d28:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022d2a:	fb0c 2203 	mla	r2, ip, r3, r2
 8022d2e:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8022d32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022d36:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022d3a:	2900      	cmp	r1, #0
 8022d3c:	f000 8197 	beq.w	802306e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 8022d40:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8022d44:	940a      	str	r4, [sp, #40]	; 0x28
 8022d46:	0e24      	lsrs	r4, r4, #24
 8022d48:	9411      	str	r4, [sp, #68]	; 0x44
 8022d4a:	b180      	cbz	r0, 8022d6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8022d4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022d50:	3b01      	subs	r3, #1
 8022d52:	009b      	lsls	r3, r3, #2
 8022d54:	3304      	adds	r3, #4
 8022d56:	eb09 0c03 	add.w	ip, r9, r3
 8022d5a:	f859 3003 	ldr.w	r3, [r9, r3]
 8022d5e:	9307      	str	r3, [sp, #28]
 8022d60:	0e1b      	lsrs	r3, r3, #24
 8022d62:	930f      	str	r3, [sp, #60]	; 0x3c
 8022d64:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022d68:	930b      	str	r3, [sp, #44]	; 0x2c
 8022d6a:	0e1b      	lsrs	r3, r3, #24
 8022d6c:	9312      	str	r3, [sp, #72]	; 0x48
 8022d6e:	b289      	uxth	r1, r1
 8022d70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022d72:	b280      	uxth	r0, r0
 8022d74:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022d76:	fb01 fa00 	mul.w	sl, r1, r0
 8022d7a:	0109      	lsls	r1, r1, #4
 8022d7c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022d80:	eba1 090a 	sub.w	r9, r1, sl
 8022d84:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8022d88:	b280      	uxth	r0, r0
 8022d8a:	fa1f f989 	uxth.w	r9, r9
 8022d8e:	1a09      	subs	r1, r1, r0
 8022d90:	fb09 f303 	mul.w	r3, r9, r3
 8022d94:	b289      	uxth	r1, r1
 8022d96:	fb01 330e 	mla	r3, r1, lr, r3
 8022d9a:	fb00 3304 	mla	r3, r0, r4, r3
 8022d9e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022da0:	fb0a 3304 	mla	r3, sl, r4, r3
 8022da4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022da8:	2b00      	cmp	r3, #0
 8022daa:	f000 80e8 	beq.w	8022f7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8022dae:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022db2:	d01b      	beq.n	8022dec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022db4:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8022db8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022dbc:	fb0e fb0b 	mul.w	fp, lr, fp
 8022dc0:	fb0e fe02 	mul.w	lr, lr, r2
 8022dc4:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8022dc8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022dcc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022dd0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022dd4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022dd8:	445a      	add	r2, fp
 8022dda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022dde:	0a12      	lsrs	r2, r2, #8
 8022de0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022de4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022de8:	ea42 020c 	orr.w	r2, r2, ip
 8022dec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022dee:	2cff      	cmp	r4, #255	; 0xff
 8022df0:	d021      	beq.n	8022e36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8022df2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022df4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022df8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022dfa:	fb04 fc0c 	mul.w	ip, r4, ip
 8022dfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022e00:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022e04:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8022e08:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022e0a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022e0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e12:	fb04 fb0b 	mul.w	fp, r4, fp
 8022e16:	44e6      	add	lr, ip
 8022e18:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8022e1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e20:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022e24:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e28:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022e2c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022e30:	ea4e 040b 	orr.w	r4, lr, fp
 8022e34:	940a      	str	r4, [sp, #40]	; 0x28
 8022e36:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022e38:	2cff      	cmp	r4, #255	; 0xff
 8022e3a:	d021      	beq.n	8022e80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022e3c:	9c07      	ldr	r4, [sp, #28]
 8022e3e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022e42:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022e44:	fb04 fc0c 	mul.w	ip, r4, ip
 8022e48:	9c07      	ldr	r4, [sp, #28]
 8022e4a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022e4e:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8022e52:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022e54:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022e58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e5c:	fb04 fb0b 	mul.w	fp, r4, fp
 8022e60:	44e6      	add	lr, ip
 8022e62:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8022e66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e6a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022e6e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022e72:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022e76:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022e7a:	ea4e 040b 	orr.w	r4, lr, fp
 8022e7e:	9407      	str	r4, [sp, #28]
 8022e80:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022e82:	2cff      	cmp	r4, #255	; 0xff
 8022e84:	d021      	beq.n	8022eca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8022e86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022e88:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022e8c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022e8e:	fb04 fc0c 	mul.w	ip, r4, ip
 8022e92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022e94:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022e98:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8022e9c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022e9e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022ea2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ea6:	fb04 fb0b 	mul.w	fp, r4, fp
 8022eaa:	44e6      	add	lr, ip
 8022eac:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8022eb0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022eb4:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022eb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022ebc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022ec0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022ec4:	ea4e 040b 	orr.w	r4, lr, fp
 8022ec8:	940b      	str	r4, [sp, #44]	; 0x2c
 8022eca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022ecc:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022ed0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022ed4:	2bff      	cmp	r3, #255	; 0xff
 8022ed6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022eda:	9c07      	ldr	r4, [sp, #28]
 8022edc:	fb09 fc0c 	mul.w	ip, r9, ip
 8022ee0:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022ee4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022ee8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022eea:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022eee:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022ef2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022ef4:	fb0a cc0e 	mla	ip, sl, lr, ip
 8022ef8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022efc:	fb09 f90e 	mul.w	r9, r9, lr
 8022f00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f04:	fb01 9202 	mla	r2, r1, r2, r9
 8022f08:	9907      	ldr	r1, [sp, #28]
 8022f0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022f0e:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8022f12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022f14:	fb00 220b 	mla	r2, r0, fp, r2
 8022f18:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022f1c:	fb0a 2a00 	mla	sl, sl, r0, r2
 8022f20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022f24:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022f28:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022f2c:	fa5f f08c 	uxtb.w	r0, ip
 8022f30:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8022f34:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022f38:	f000 80a2 	beq.w	8023080 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8022f3c:	43db      	mvns	r3, r3
 8022f3e:	783a      	ldrb	r2, [r7, #0]
 8022f40:	f897 a002 	ldrb.w	sl, [r7, #2]
 8022f44:	b2db      	uxtb	r3, r3
 8022f46:	fb02 fe03 	mul.w	lr, r2, r3
 8022f4a:	fb0a fa03 	mul.w	sl, sl, r3
 8022f4e:	f10e 0201 	add.w	r2, lr, #1
 8022f52:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8022f56:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022f5a:	703a      	strb	r2, [r7, #0]
 8022f5c:	787a      	ldrb	r2, [r7, #1]
 8022f5e:	fb02 f003 	mul.w	r0, r2, r3
 8022f62:	f10a 0301 	add.w	r3, sl, #1
 8022f66:	1c42      	adds	r2, r0, #1
 8022f68:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022f6c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022f70:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022f74:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022f78:	707a      	strb	r2, [r7, #1]
 8022f7a:	f887 c002 	strb.w	ip, [r7, #2]
 8022f7e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022f80:	3703      	adds	r7, #3
 8022f82:	f108 38ff 	add.w	r8, r8, #4294967295
 8022f86:	441d      	add	r5, r3
 8022f88:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022f8a:	441e      	add	r6, r3
 8022f8c:	e6ab      	b.n	8022ce6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8022f8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022f90:	441d      	add	r5, r3
 8022f92:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022f94:	441e      	add	r6, r3
 8022f96:	9b06      	ldr	r3, [sp, #24]
 8022f98:	3b01      	subs	r3, #1
 8022f9a:	9306      	str	r3, [sp, #24]
 8022f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f9e:	3303      	adds	r3, #3
 8022fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8022fa2:	e680      	b.n	8022ca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022fa4:	d024      	beq.n	8022ff0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 8022fa6:	9b06      	ldr	r3, [sp, #24]
 8022fa8:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8022faa:	3b01      	subs	r3, #1
 8022fac:	fb00 5003 	mla	r0, r0, r3, r5
 8022fb0:	1400      	asrs	r0, r0, #16
 8022fb2:	f53f ae95 	bmi.w	8022ce0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022fb6:	3901      	subs	r1, #1
 8022fb8:	4288      	cmp	r0, r1
 8022fba:	f6bf ae91 	bge.w	8022ce0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022fbe:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8022fc0:	fb01 6303 	mla	r3, r1, r3, r6
 8022fc4:	141b      	asrs	r3, r3, #16
 8022fc6:	f53f ae8b 	bmi.w	8022ce0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022fca:	3a01      	subs	r2, #1
 8022fcc:	4293      	cmp	r3, r2
 8022fce:	f6bf ae87 	bge.w	8022ce0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fd4:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022fd8:	1cdf      	adds	r7, r3, #3
 8022fda:	f1bb 0f00 	cmp.w	fp, #0
 8022fde:	dc6e      	bgt.n	80230be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8022fe0:	9b06      	ldr	r3, [sp, #24]
 8022fe2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fe8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022fec:	4423      	add	r3, r4
 8022fee:	9309      	str	r3, [sp, #36]	; 0x24
 8022ff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022ff2:	2b00      	cmp	r3, #0
 8022ff4:	f340 81b0 	ble.w	8023358 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 8022ff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022ffc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022ffe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023002:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023006:	eef0 6a48 	vmov.f32	s13, s16
 802300a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802300e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023012:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023016:	ee16 5a90 	vmov	r5, s13
 802301a:	eef0 6a68 	vmov.f32	s13, s17
 802301e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023022:	ee16 6a90 	vmov	r6, s13
 8023026:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802302a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802302e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023032:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023036:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802303a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802303e:	ee18 2a10 	vmov	r2, s16
 8023042:	eeb0 8a47 	vmov.f32	s16, s14
 8023046:	fb92 f3f3 	sdiv	r3, r2, r3
 802304a:	ee18 2a90 	vmov	r2, s17
 802304e:	932d      	str	r3, [sp, #180]	; 0xb4
 8023050:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023052:	eef0 8a67 	vmov.f32	s17, s15
 8023056:	fb92 f3f3 	sdiv	r3, r2, r3
 802305a:	932e      	str	r3, [sp, #184]	; 0xb8
 802305c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802305e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023060:	3b01      	subs	r3, #1
 8023062:	9315      	str	r3, [sp, #84]	; 0x54
 8023064:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023066:	bf08      	it	eq
 8023068:	4613      	moveq	r3, r2
 802306a:	9306      	str	r3, [sp, #24]
 802306c:	e60d      	b.n	8022c8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802306e:	2800      	cmp	r0, #0
 8023070:	f43f ae7d 	beq.w	8022d6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8023074:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8023078:	9307      	str	r3, [sp, #28]
 802307a:	0e1b      	lsrs	r3, r3, #24
 802307c:	930f      	str	r3, [sp, #60]	; 0x3c
 802307e:	e676      	b.n	8022d6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8023080:	7038      	strb	r0, [r7, #0]
 8023082:	7079      	strb	r1, [r7, #1]
 8023084:	e779      	b.n	8022f7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023086:	f112 0901 	adds.w	r9, r2, #1
 802308a:	f53f af78 	bmi.w	8022f7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802308e:	454b      	cmp	r3, r9
 8023090:	f6ff af75 	blt.w	8022f7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023094:	f11c 0901 	adds.w	r9, ip, #1
 8023098:	f53f af71 	bmi.w	8022f7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 802309c:	45ce      	cmp	lr, r9
 802309e:	f6ff af6e 	blt.w	8022f7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80230a2:	b21b      	sxth	r3, r3
 80230a4:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80230a8:	fa0f f28e 	sxth.w	r2, lr
 80230ac:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80230b0:	9200      	str	r2, [sp, #0]
 80230b2:	4639      	mov	r1, r7
 80230b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80230b6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80230b8:	f7ff fc7c 	bl	80229b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80230bc:	e75f      	b.n	8022f7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80230be:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80230c0:	1429      	asrs	r1, r5, #16
 80230c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80230c4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80230c8:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80230cc:	1433      	asrs	r3, r6, #16
 80230ce:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80230d2:	fb0c 1303 	mla	r3, ip, r3, r1
 80230d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80230d8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80230dc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80230e0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80230e4:	2a00      	cmp	r2, #0
 80230e6:	f000 8129 	beq.w	802333c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 80230ea:	684c      	ldr	r4, [r1, #4]
 80230ec:	940c      	str	r4, [sp, #48]	; 0x30
 80230ee:	0e24      	lsrs	r4, r4, #24
 80230f0:	9413      	str	r4, [sp, #76]	; 0x4c
 80230f2:	b198      	cbz	r0, 802311c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80230f4:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80230f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80230fc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8023100:	f10c 0c04 	add.w	ip, ip, #4
 8023104:	eb01 080c 	add.w	r8, r1, ip
 8023108:	f851 100c 	ldr.w	r1, [r1, ip]
 802310c:	9108      	str	r1, [sp, #32]
 802310e:	0e09      	lsrs	r1, r1, #24
 8023110:	9110      	str	r1, [sp, #64]	; 0x40
 8023112:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023116:	910d      	str	r1, [sp, #52]	; 0x34
 8023118:	0e09      	lsrs	r1, r1, #24
 802311a:	9114      	str	r1, [sp, #80]	; 0x50
 802311c:	b292      	uxth	r2, r2
 802311e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023120:	b280      	uxth	r0, r0
 8023122:	fb02 f900 	mul.w	r9, r2, r0
 8023126:	0112      	lsls	r2, r2, #4
 8023128:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802312c:	eba2 0809 	sub.w	r8, r2, r9
 8023130:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023134:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023136:	b280      	uxth	r0, r0
 8023138:	fa1f f888 	uxth.w	r8, r8
 802313c:	1a09      	subs	r1, r1, r0
 802313e:	fb08 f202 	mul.w	r2, r8, r2
 8023142:	b289      	uxth	r1, r1
 8023144:	fb01 220e 	mla	r2, r1, lr, r2
 8023148:	fb00 2204 	mla	r2, r0, r4, r2
 802314c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802314e:	fb09 2204 	mla	r2, r9, r4, r2
 8023152:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023156:	2a00      	cmp	r2, #0
 8023158:	f000 80e8 	beq.w	802332c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 802315c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023160:	d01b      	beq.n	802319a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8023162:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023166:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802316a:	fb0e fa0a 	mul.w	sl, lr, sl
 802316e:	fb0e fe03 	mul.w	lr, lr, r3
 8023172:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023176:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802317a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802317e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023182:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023186:	4453      	add	r3, sl
 8023188:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802318c:	0a1b      	lsrs	r3, r3, #8
 802318e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023192:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023196:	ea43 030c 	orr.w	r3, r3, ip
 802319a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802319c:	2cff      	cmp	r4, #255	; 0xff
 802319e:	d021      	beq.n	80231e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 80231a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80231a2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80231a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80231a8:	fb04 fc0c 	mul.w	ip, r4, ip
 80231ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80231ae:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80231b2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80231b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80231b8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80231bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80231c0:	fb04 fa0a 	mul.w	sl, r4, sl
 80231c4:	44e6      	add	lr, ip
 80231c6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80231ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80231ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80231d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80231d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80231da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80231de:	ea4e 040a 	orr.w	r4, lr, sl
 80231e2:	940c      	str	r4, [sp, #48]	; 0x30
 80231e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80231e6:	2cff      	cmp	r4, #255	; 0xff
 80231e8:	d021      	beq.n	802322e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 80231ea:	9c08      	ldr	r4, [sp, #32]
 80231ec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80231f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80231f2:	fb04 fc0c 	mul.w	ip, r4, ip
 80231f6:	9c08      	ldr	r4, [sp, #32]
 80231f8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80231fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80231fe:	fb04 fa0e 	mul.w	sl, r4, lr
 8023202:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023206:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802320a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802320e:	44e6      	add	lr, ip
 8023210:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023214:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023218:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802321c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023220:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023224:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023228:	ea4e 040a 	orr.w	r4, lr, sl
 802322c:	9408      	str	r4, [sp, #32]
 802322e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023230:	2cff      	cmp	r4, #255	; 0xff
 8023232:	d021      	beq.n	8023278 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8023234:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023236:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802323a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802323c:	fb04 fc0c 	mul.w	ip, r4, ip
 8023240:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023242:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023246:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802324a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802324c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023250:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023254:	fb04 fa0a 	mul.w	sl, r4, sl
 8023258:	44e6      	add	lr, ip
 802325a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802325e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023262:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023266:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802326a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802326e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023272:	ea4e 040a 	orr.w	r4, lr, sl
 8023276:	940d      	str	r4, [sp, #52]	; 0x34
 8023278:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802327a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802327e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023282:	2aff      	cmp	r2, #255	; 0xff
 8023284:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023288:	9c08      	ldr	r4, [sp, #32]
 802328a:	fb08 fc0c 	mul.w	ip, r8, ip
 802328e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023292:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023296:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023298:	fb00 cc0e 	mla	ip, r0, lr, ip
 802329c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80232a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80232a2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80232a6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80232aa:	fb08 f80e 	mul.w	r8, r8, lr
 80232ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80232b2:	fb01 8303 	mla	r3, r1, r3, r8
 80232b6:	9908      	ldr	r1, [sp, #32]
 80232b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80232bc:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80232c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80232c2:	fb00 330a 	mla	r3, r0, sl, r3
 80232c6:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80232ca:	fb09 3e0e 	mla	lr, r9, lr, r3
 80232ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80232d2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80232d6:	ea4c 0c0e 	orr.w	ip, ip, lr
 80232da:	fa5f f08c 	uxtb.w	r0, ip
 80232de:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80232e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80232e6:	d032      	beq.n	802334e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 80232e8:	43d2      	mvns	r2, r2
 80232ea:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80232ee:	b2d2      	uxtb	r2, r2
 80232f0:	fb0e fe02 	mul.w	lr, lr, r2
 80232f4:	f10e 0301 	add.w	r3, lr, #1
 80232f8:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80232fc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023300:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8023304:	4350      	muls	r0, r2
 8023306:	f807 3c03 	strb.w	r3, [r7, #-3]
 802330a:	1c43      	adds	r3, r0, #1
 802330c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023310:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023314:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8023318:	4353      	muls	r3, r2
 802331a:	f807 1c02 	strb.w	r1, [r7, #-2]
 802331e:	1c5a      	adds	r2, r3, #1
 8023320:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023324:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8023328:	f807 cc01 	strb.w	ip, [r7, #-1]
 802332c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802332e:	3703      	adds	r7, #3
 8023330:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023334:	441d      	add	r5, r3
 8023336:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023338:	441e      	add	r6, r3
 802333a:	e64e      	b.n	8022fda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 802333c:	2800      	cmp	r0, #0
 802333e:	f43f aeed 	beq.w	802311c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023342:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8023346:	9108      	str	r1, [sp, #32]
 8023348:	0e09      	lsrs	r1, r1, #24
 802334a:	9110      	str	r1, [sp, #64]	; 0x40
 802334c:	e6e6      	b.n	802311c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802334e:	f807 0c03 	strb.w	r0, [r7, #-3]
 8023352:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023356:	e7e7      	b.n	8023328 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8023358:	b019      	add	sp, #100	; 0x64
 802335a:	ecbd 8b08 	vpop	{d8-d11}
 802335e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023364 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8023364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023368:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 802336c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023370:	2800      	cmp	r0, #0
 8023372:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023376:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802337a:	fb0c 0e03 	mla	lr, ip, r3, r0
 802337e:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8023382:	db6b      	blt.n	802345c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023384:	4580      	cmp	r8, r0
 8023386:	dd69      	ble.n	802345c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023388:	f1bc 0f00 	cmp.w	ip, #0
 802338c:	db66      	blt.n	802345c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802338e:	45e1      	cmp	r9, ip
 8023390:	dd64      	ble.n	802345c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8023392:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023396:	f01e 0f01 	tst.w	lr, #1
 802339a:	5d16      	ldrb	r6, [r2, r4]
 802339c:	bf0c      	ite	eq
 802339e:	f006 060f 	andeq.w	r6, r6, #15
 80233a2:	1136      	asrne	r6, r6, #4
 80233a4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80233a8:	b2f6      	uxtb	r6, r6
 80233aa:	f110 0a01 	adds.w	sl, r0, #1
 80233ae:	d457      	bmi.n	8023460 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80233b0:	45d0      	cmp	r8, sl
 80233b2:	dd55      	ble.n	8023460 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80233b4:	f1bc 0f00 	cmp.w	ip, #0
 80233b8:	db52      	blt.n	8023460 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80233ba:	45e1      	cmp	r9, ip
 80233bc:	dd50      	ble.n	8023460 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80233be:	2f00      	cmp	r7, #0
 80233c0:	f000 80ac 	beq.w	802351c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 80233c4:	f10e 0b01 	add.w	fp, lr, #1
 80233c8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80233cc:	f01b 0f01 	tst.w	fp, #1
 80233d0:	5d14      	ldrb	r4, [r2, r4]
 80233d2:	bf0c      	ite	eq
 80233d4:	f004 040f 	andeq.w	r4, r4, #15
 80233d8:	1124      	asrne	r4, r4, #4
 80233da:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80233de:	b2e4      	uxtb	r4, r4
 80233e0:	2d00      	cmp	r5, #0
 80233e2:	f000 8096 	beq.w	8023512 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80233e6:	2800      	cmp	r0, #0
 80233e8:	f10c 0c01 	add.w	ip, ip, #1
 80233ec:	db3c      	blt.n	8023468 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80233ee:	4580      	cmp	r8, r0
 80233f0:	dd3a      	ble.n	8023468 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80233f2:	f1bc 0f00 	cmp.w	ip, #0
 80233f6:	db37      	blt.n	8023468 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80233f8:	45e1      	cmp	r9, ip
 80233fa:	dd35      	ble.n	8023468 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80233fc:	eb03 0b0e 	add.w	fp, r3, lr
 8023400:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023404:	f01b 0f01 	tst.w	fp, #1
 8023408:	5c10      	ldrb	r0, [r2, r0]
 802340a:	bf0c      	ite	eq
 802340c:	f000 000f 	andeq.w	r0, r0, #15
 8023410:	1100      	asrne	r0, r0, #4
 8023412:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023416:	b2c0      	uxtb	r0, r0
 8023418:	f1ba 0f00 	cmp.w	sl, #0
 802341c:	db26      	blt.n	802346c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802341e:	45d0      	cmp	r8, sl
 8023420:	dd24      	ble.n	802346c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023422:	f1bc 0f00 	cmp.w	ip, #0
 8023426:	db21      	blt.n	802346c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8023428:	45e1      	cmp	r9, ip
 802342a:	dd1f      	ble.n	802346c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802342c:	b307      	cbz	r7, 8023470 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802342e:	3301      	adds	r3, #1
 8023430:	449e      	add	lr, r3
 8023432:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023436:	f01e 0f01 	tst.w	lr, #1
 802343a:	5cd3      	ldrb	r3, [r2, r3]
 802343c:	bf0c      	ite	eq
 802343e:	f003 030f 	andeq.w	r3, r3, #15
 8023442:	111b      	asrne	r3, r3, #4
 8023444:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023448:	b2db      	uxtb	r3, r3
 802344a:	2f0f      	cmp	r7, #15
 802344c:	d911      	bls.n	8023472 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 802344e:	4b35      	ldr	r3, [pc, #212]	; (8023524 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8023450:	f240 1157 	movw	r1, #343	; 0x157
 8023454:	4a34      	ldr	r2, [pc, #208]	; (8023528 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8023456:	4835      	ldr	r0, [pc, #212]	; (802352c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8023458:	f002 fb8e 	bl	8025b78 <__assert_func>
 802345c:	2600      	movs	r6, #0
 802345e:	e7a4      	b.n	80233aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8023460:	2400      	movs	r4, #0
 8023462:	e7bd      	b.n	80233e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8023464:	463c      	mov	r4, r7
 8023466:	e7be      	b.n	80233e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8023468:	2000      	movs	r0, #0
 802346a:	e7d5      	b.n	8023418 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 802346c:	2300      	movs	r3, #0
 802346e:	e7ec      	b.n	802344a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8023470:	463b      	mov	r3, r7
 8023472:	2d0f      	cmp	r5, #15
 8023474:	d8eb      	bhi.n	802344e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023476:	b2bf      	uxth	r7, r7
 8023478:	b2ad      	uxth	r5, r5
 802347a:	fb07 f205 	mul.w	r2, r7, r5
 802347e:	013f      	lsls	r7, r7, #4
 8023480:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023484:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023488:	1abf      	subs	r7, r7, r2
 802348a:	b2ad      	uxth	r5, r5
 802348c:	b2bf      	uxth	r7, r7
 802348e:	ebac 0c05 	sub.w	ip, ip, r5
 8023492:	437c      	muls	r4, r7
 8023494:	fa1f fc8c 	uxth.w	ip, ip
 8023498:	fb06 440c 	mla	r4, r6, ip, r4
 802349c:	fb05 4400 	mla	r4, r5, r0, r4
 80234a0:	fb02 4203 	mla	r2, r2, r3, r4
 80234a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80234a8:	b38a      	cbz	r2, 802350e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 80234aa:	4b21      	ldr	r3, [pc, #132]	; (8023530 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 80234ac:	681c      	ldr	r4, [r3, #0]
 80234ae:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80234b2:	b2e5      	uxtb	r5, r4
 80234b4:	4353      	muls	r3, r2
 80234b6:	1c5a      	adds	r2, r3, #1
 80234b8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80234bc:	1212      	asrs	r2, r2, #8
 80234be:	b290      	uxth	r0, r2
 80234c0:	43d2      	mvns	r2, r2
 80234c2:	fb15 f500 	smulbb	r5, r5, r0
 80234c6:	b2d3      	uxtb	r3, r2
 80234c8:	780a      	ldrb	r2, [r1, #0]
 80234ca:	fb02 5203 	mla	r2, r2, r3, r5
 80234ce:	b292      	uxth	r2, r2
 80234d0:	1c55      	adds	r5, r2, #1
 80234d2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80234d6:	784d      	ldrb	r5, [r1, #1]
 80234d8:	fb15 f503 	smulbb	r5, r5, r3
 80234dc:	1212      	asrs	r2, r2, #8
 80234de:	700a      	strb	r2, [r1, #0]
 80234e0:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80234e4:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80234e8:	fb02 5200 	mla	r2, r2, r0, r5
 80234ec:	b292      	uxth	r2, r2
 80234ee:	1c55      	adds	r5, r2, #1
 80234f0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80234f4:	1212      	asrs	r2, r2, #8
 80234f6:	704a      	strb	r2, [r1, #1]
 80234f8:	788a      	ldrb	r2, [r1, #2]
 80234fa:	fb12 f303 	smulbb	r3, r2, r3
 80234fe:	fb04 3300 	mla	r3, r4, r0, r3
 8023502:	b29b      	uxth	r3, r3
 8023504:	1c5a      	adds	r2, r3, #1
 8023506:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802350a:	121b      	asrs	r3, r3, #8
 802350c:	708b      	strb	r3, [r1, #2]
 802350e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023512:	2f0f      	cmp	r7, #15
 8023514:	d89b      	bhi.n	802344e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8023516:	462b      	mov	r3, r5
 8023518:	4628      	mov	r0, r5
 802351a:	e7ac      	b.n	8023476 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 802351c:	2d00      	cmp	r5, #0
 802351e:	d1a1      	bne.n	8023464 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8023520:	462c      	mov	r4, r5
 8023522:	e7f8      	b.n	8023516 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8023524:	0802b042 	.word	0x0802b042
 8023528:	0802b53a 	.word	0x0802b53a
 802352c:	0802b10b 	.word	0x0802b10b
 8023530:	2400c8cc 	.word	0x2400c8cc

08023534 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023538:	ed2d 8b08 	vpush	{d8-d11}
 802353c:	b097      	sub	sp, #92	; 0x5c
 802353e:	eeb0 aa40 	vmov.f32	s20, s0
 8023542:	eef0 9a60 	vmov.f32	s19, s1
 8023546:	9214      	str	r2, [sp, #80]	; 0x50
 8023548:	eeb0 9a41 	vmov.f32	s18, s2
 802354c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802354e:	eeb0 8a62 	vmov.f32	s16, s5
 8023552:	9309      	str	r3, [sp, #36]	; 0x24
 8023554:	eef0 8a43 	vmov.f32	s17, s6
 8023558:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802355c:	eef0 ba44 	vmov.f32	s23, s8
 8023560:	9015      	str	r0, [sp, #84]	; 0x54
 8023562:	eeb0 ba64 	vmov.f32	s22, s9
 8023566:	6850      	ldr	r0, [r2, #4]
 8023568:	eef0 aa45 	vmov.f32	s21, s10
 802356c:	910c      	str	r1, [sp, #48]	; 0x30
 802356e:	930e      	str	r3, [sp, #56]	; 0x38
 8023570:	6812      	ldr	r2, [r2, #0]
 8023572:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023576:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802357a:	fb00 1303 	mla	r3, r0, r3, r1
 802357e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023582:	eb02 0a03 	add.w	sl, r2, r3
 8023586:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023588:	689b      	ldr	r3, [r3, #8]
 802358a:	3301      	adds	r3, #1
 802358c:	f023 0301 	bic.w	r3, r3, #1
 8023590:	930f      	str	r3, [sp, #60]	; 0x3c
 8023592:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023594:	681f      	ldr	r7, [r3, #0]
 8023596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023598:	2b00      	cmp	r3, #0
 802359a:	dc03      	bgt.n	80235a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802359c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802359e:	2b00      	cmp	r3, #0
 80235a0:	f340 8247 	ble.w	8023a32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 80235a4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80235a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80235aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80235ae:	1e48      	subs	r0, r1, #1
 80235b0:	f102 3cff 	add.w	ip, r2, #4294967295
 80235b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80235b6:	2b00      	cmp	r3, #0
 80235b8:	f340 80e5 	ble.w	8023786 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80235bc:	ea5f 4e25 	movs.w	lr, r5, asr #16
 80235c0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80235c4:	d406      	bmi.n	80235d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80235c6:	4586      	cmp	lr, r0
 80235c8:	da04      	bge.n	80235d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80235ca:	2b00      	cmp	r3, #0
 80235cc:	db02      	blt.n	80235d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80235ce:	4563      	cmp	r3, ip
 80235d0:	f2c0 80da 	blt.w	8023788 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80235d4:	f11e 0e01 	adds.w	lr, lr, #1
 80235d8:	f100 80cb 	bmi.w	8023772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80235dc:	4571      	cmp	r1, lr
 80235de:	f2c0 80c8 	blt.w	8023772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80235e2:	3301      	adds	r3, #1
 80235e4:	f100 80c5 	bmi.w	8023772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80235e8:	429a      	cmp	r2, r3
 80235ea:	f2c0 80c2 	blt.w	8023772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80235ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80235f0:	46d0      	mov	r8, sl
 80235f2:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80235f6:	930d      	str	r3, [sp, #52]	; 0x34
 80235f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80235fa:	2b00      	cmp	r3, #0
 80235fc:	f340 80e3 	ble.w	80237c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8023600:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023602:	1430      	asrs	r0, r6, #16
 8023604:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023608:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802360c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023610:	142b      	asrs	r3, r5, #16
 8023612:	f100 812e 	bmi.w	8023872 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023616:	f10c 3bff 	add.w	fp, ip, #4294967295
 802361a:	455b      	cmp	r3, fp
 802361c:	f280 8129 	bge.w	8023872 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023620:	2800      	cmp	r0, #0
 8023622:	f2c0 8126 	blt.w	8023872 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023626:	f10e 3bff 	add.w	fp, lr, #4294967295
 802362a:	4558      	cmp	r0, fp
 802362c:	f280 8121 	bge.w	8023872 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023630:	fb00 3309 	mla	r3, r0, r9, r3
 8023634:	0858      	lsrs	r0, r3, #1
 8023636:	07dc      	lsls	r4, r3, #31
 8023638:	f817 c000 	ldrb.w	ip, [r7, r0]
 802363c:	bf54      	ite	pl
 802363e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023642:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023646:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802364a:	fa5f fc8c 	uxtb.w	ip, ip
 802364e:	2a00      	cmp	r2, #0
 8023650:	f000 80fe 	beq.w	8023850 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8023654:	1c58      	adds	r0, r3, #1
 8023656:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802365a:	07c0      	lsls	r0, r0, #31
 802365c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023660:	bf54      	ite	pl
 8023662:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023666:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802366a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802366e:	fa5f f08e 	uxtb.w	r0, lr
 8023672:	9010      	str	r0, [sp, #64]	; 0x40
 8023674:	b1d9      	cbz	r1, 80236ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8023676:	444b      	add	r3, r9
 8023678:	0858      	lsrs	r0, r3, #1
 802367a:	07dc      	lsls	r4, r3, #31
 802367c:	f103 0301 	add.w	r3, r3, #1
 8023680:	5c38      	ldrb	r0, [r7, r0]
 8023682:	bf54      	ite	pl
 8023684:	f000 000f 	andpl.w	r0, r0, #15
 8023688:	1100      	asrmi	r0, r0, #4
 802368a:	07dc      	lsls	r4, r3, #31
 802368c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023690:	b2c0      	uxtb	r0, r0
 8023692:	900a      	str	r0, [sp, #40]	; 0x28
 8023694:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8023698:	f817 e000 	ldrb.w	lr, [r7, r0]
 802369c:	bf54      	ite	pl
 802369e:	f00e 030f 	andpl.w	r3, lr, #15
 80236a2:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80236a6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80236aa:	b2db      	uxtb	r3, r3
 80236ac:	9311      	str	r3, [sp, #68]	; 0x44
 80236ae:	b292      	uxth	r2, r2
 80236b0:	b289      	uxth	r1, r1
 80236b2:	0113      	lsls	r3, r2, #4
 80236b4:	fb02 f001 	mul.w	r0, r2, r1
 80236b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80236ba:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80236be:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 80236c2:	1a1b      	subs	r3, r3, r0
 80236c4:	b289      	uxth	r1, r1
 80236c6:	b29b      	uxth	r3, r3
 80236c8:	ebae 0e01 	sub.w	lr, lr, r1
 80236cc:	4353      	muls	r3, r2
 80236ce:	fa1f fe8e 	uxth.w	lr, lr
 80236d2:	fb0c 320e 	mla	r2, ip, lr, r3
 80236d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80236d8:	fb01 2203 	mla	r2, r1, r3, r2
 80236dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80236de:	fb00 2203 	mla	r2, r0, r3, r2
 80236e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80236e6:	2a00      	cmp	r2, #0
 80236e8:	d039      	beq.n	802375e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80236ea:	4bc7      	ldr	r3, [pc, #796]	; (8023a08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 80236ec:	6819      	ldr	r1, [r3, #0]
 80236ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80236f0:	fa5f fc81 	uxtb.w	ip, r1
 80236f4:	435a      	muls	r2, r3
 80236f6:	1c53      	adds	r3, r2, #1
 80236f8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80236fc:	1212      	asrs	r2, r2, #8
 80236fe:	b290      	uxth	r0, r2
 8023700:	43d2      	mvns	r2, r2
 8023702:	fb1c fc00 	smulbb	ip, ip, r0
 8023706:	b2d3      	uxtb	r3, r2
 8023708:	f898 2000 	ldrb.w	r2, [r8]
 802370c:	fb02 c203 	mla	r2, r2, r3, ip
 8023710:	b292      	uxth	r2, r2
 8023712:	f102 0c01 	add.w	ip, r2, #1
 8023716:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802371a:	f898 c001 	ldrb.w	ip, [r8, #1]
 802371e:	fb1c fc03 	smulbb	ip, ip, r3
 8023722:	1212      	asrs	r2, r2, #8
 8023724:	f888 2000 	strb.w	r2, [r8]
 8023728:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802372c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8023730:	fb02 c200 	mla	r2, r2, r0, ip
 8023734:	b292      	uxth	r2, r2
 8023736:	f102 0c01 	add.w	ip, r2, #1
 802373a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802373e:	1212      	asrs	r2, r2, #8
 8023740:	f888 2001 	strb.w	r2, [r8, #1]
 8023744:	f898 2002 	ldrb.w	r2, [r8, #2]
 8023748:	fb12 f303 	smulbb	r3, r2, r3
 802374c:	fb01 3300 	mla	r3, r1, r0, r3
 8023750:	b29b      	uxth	r3, r3
 8023752:	1c5a      	adds	r2, r3, #1
 8023754:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023758:	121b      	asrs	r3, r3, #8
 802375a:	f888 3002 	strb.w	r3, [r8, #2]
 802375e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023760:	f108 0803 	add.w	r8, r8, #3
 8023764:	441d      	add	r5, r3
 8023766:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023768:	441e      	add	r6, r3
 802376a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802376c:	3b01      	subs	r3, #1
 802376e:	930d      	str	r3, [sp, #52]	; 0x34
 8023770:	e742      	b.n	80235f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8023772:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023774:	f10a 0a03 	add.w	sl, sl, #3
 8023778:	441d      	add	r5, r3
 802377a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802377c:	441e      	add	r6, r3
 802377e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023780:	3b01      	subs	r3, #1
 8023782:	9309      	str	r3, [sp, #36]	; 0x24
 8023784:	e716      	b.n	80235b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8023786:	d024      	beq.n	80237d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8023788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802378a:	982b      	ldr	r0, [sp, #172]	; 0xac
 802378c:	3b01      	subs	r3, #1
 802378e:	fb00 5003 	mla	r0, r0, r3, r5
 8023792:	1400      	asrs	r0, r0, #16
 8023794:	f53f af2b 	bmi.w	80235ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023798:	3901      	subs	r1, #1
 802379a:	4288      	cmp	r0, r1
 802379c:	f6bf af27 	bge.w	80235ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80237a0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80237a2:	fb01 6303 	mla	r3, r1, r3, r6
 80237a6:	141b      	asrs	r3, r3, #16
 80237a8:	f53f af21 	bmi.w	80235ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80237ac:	3a01      	subs	r2, #1
 80237ae:	4293      	cmp	r3, r2
 80237b0:	f6bf af1d 	bge.w	80235ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80237b4:	f10a 0e03 	add.w	lr, sl, #3
 80237b8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80237bc:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80237c0:	f1b8 0f00 	cmp.w	r8, #0
 80237c4:	dc76      	bgt.n	80238b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80237c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80237c8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80237cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80237d0:	44a2      	add	sl, r4
 80237d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80237d4:	2b00      	cmp	r3, #0
 80237d6:	f340 812c 	ble.w	8023a32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 80237da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80237de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80237e0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80237e4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80237e8:	eef0 6a48 	vmov.f32	s13, s16
 80237ec:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80237f0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80237f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80237f8:	ee16 5a90 	vmov	r5, s13
 80237fc:	eef0 6a68 	vmov.f32	s13, s17
 8023800:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023804:	ee16 6a90 	vmov	r6, s13
 8023808:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802380c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023810:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023814:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023818:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802381c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023820:	ee18 2a10 	vmov	r2, s16
 8023824:	eeb0 8a47 	vmov.f32	s16, s14
 8023828:	fb92 f3f3 	sdiv	r3, r2, r3
 802382c:	ee18 2a90 	vmov	r2, s17
 8023830:	932b      	str	r3, [sp, #172]	; 0xac
 8023832:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023834:	eef0 8a67 	vmov.f32	s17, s15
 8023838:	fb92 f3f3 	sdiv	r3, r2, r3
 802383c:	932c      	str	r3, [sp, #176]	; 0xb0
 802383e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023840:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023842:	3b01      	subs	r3, #1
 8023844:	930c      	str	r3, [sp, #48]	; 0x30
 8023846:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023848:	bf08      	it	eq
 802384a:	4613      	moveq	r3, r2
 802384c:	9309      	str	r3, [sp, #36]	; 0x24
 802384e:	e6a2      	b.n	8023596 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8023850:	2900      	cmp	r1, #0
 8023852:	f43f af2c 	beq.w	80236ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8023856:	eb09 0003 	add.w	r0, r9, r3
 802385a:	0843      	lsrs	r3, r0, #1
 802385c:	07c0      	lsls	r0, r0, #31
 802385e:	5cfb      	ldrb	r3, [r7, r3]
 8023860:	bf54      	ite	pl
 8023862:	f003 030f 	andpl.w	r3, r3, #15
 8023866:	111b      	asrmi	r3, r3, #4
 8023868:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802386c:	b2db      	uxtb	r3, r3
 802386e:	930a      	str	r3, [sp, #40]	; 0x28
 8023870:	e71d      	b.n	80236ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8023872:	f113 0b01 	adds.w	fp, r3, #1
 8023876:	f53f af72 	bmi.w	802375e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802387a:	45dc      	cmp	ip, fp
 802387c:	f6ff af6f 	blt.w	802375e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023880:	f110 0b01 	adds.w	fp, r0, #1
 8023884:	f53f af6b 	bmi.w	802375e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023888:	45de      	cmp	lr, fp
 802388a:	f6ff af68 	blt.w	802375e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802388e:	9302      	str	r3, [sp, #8]
 8023890:	fa0f f38e 	sxth.w	r3, lr
 8023894:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023896:	9301      	str	r3, [sp, #4]
 8023898:	fa0f f38c 	sxth.w	r3, ip
 802389c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80238a0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80238a4:	9300      	str	r3, [sp, #0]
 80238a6:	463a      	mov	r2, r7
 80238a8:	464b      	mov	r3, r9
 80238aa:	4641      	mov	r1, r8
 80238ac:	9815      	ldr	r0, [sp, #84]	; 0x54
 80238ae:	f7ff fd59 	bl	8023364 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80238b2:	e754      	b.n	802375e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80238b4:	142a      	asrs	r2, r5, #16
 80238b6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80238ba:	1433      	asrs	r3, r6, #16
 80238bc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80238c0:	fb09 2303 	mla	r3, r9, r3, r2
 80238c4:	085a      	lsrs	r2, r3, #1
 80238c6:	07dc      	lsls	r4, r3, #31
 80238c8:	5cba      	ldrb	r2, [r7, r2]
 80238ca:	bf54      	ite	pl
 80238cc:	f002 020f 	andpl.w	r2, r2, #15
 80238d0:	1112      	asrmi	r2, r2, #4
 80238d2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80238d6:	b2d2      	uxtb	r2, r2
 80238d8:	2900      	cmp	r1, #0
 80238da:	f000 8097 	beq.w	8023a0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80238de:	f103 0b01 	add.w	fp, r3, #1
 80238e2:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80238e6:	f01b 0f01 	tst.w	fp, #1
 80238ea:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80238ee:	bf0c      	ite	eq
 80238f0:	f00c 0c0f 	andeq.w	ip, ip, #15
 80238f4:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80238f8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80238fc:	fa5f f48c 	uxtb.w	r4, ip
 8023900:	9412      	str	r4, [sp, #72]	; 0x48
 8023902:	b300      	cbz	r0, 8023946 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023904:	444b      	add	r3, r9
 8023906:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802390a:	07dc      	lsls	r4, r3, #31
 802390c:	f103 0301 	add.w	r3, r3, #1
 8023910:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023914:	bf54      	ite	pl
 8023916:	f00c 0c0f 	andpl.w	ip, ip, #15
 802391a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802391e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023922:	fa5f f48c 	uxtb.w	r4, ip
 8023926:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802392a:	940b      	str	r4, [sp, #44]	; 0x2c
 802392c:	07dc      	lsls	r4, r3, #31
 802392e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023932:	bf54      	ite	pl
 8023934:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023938:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802393c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023940:	fa5f f38c 	uxtb.w	r3, ip
 8023944:	9313      	str	r3, [sp, #76]	; 0x4c
 8023946:	b289      	uxth	r1, r1
 8023948:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802394a:	b280      	uxth	r0, r0
 802394c:	fb01 f300 	mul.w	r3, r1, r0
 8023950:	0109      	lsls	r1, r1, #4
 8023952:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8023956:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802395a:	1ac9      	subs	r1, r1, r3
 802395c:	b280      	uxth	r0, r0
 802395e:	b289      	uxth	r1, r1
 8023960:	ebac 0c00 	sub.w	ip, ip, r0
 8023964:	4361      	muls	r1, r4
 8023966:	fa1f fc8c 	uxth.w	ip, ip
 802396a:	fb02 120c 	mla	r2, r2, ip, r1
 802396e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023970:	fb00 2001 	mla	r0, r0, r1, r2
 8023974:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023976:	fb03 0302 	mla	r3, r3, r2, r0
 802397a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802397e:	2b00      	cmp	r3, #0
 8023980:	d039      	beq.n	80239f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8023982:	4a21      	ldr	r2, [pc, #132]	; (8023a08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8023984:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023988:	6810      	ldr	r0, [r2, #0]
 802398a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802398c:	fa5f fc80 	uxtb.w	ip, r0
 8023990:	4353      	muls	r3, r2
 8023992:	1c5a      	adds	r2, r3, #1
 8023994:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023998:	121b      	asrs	r3, r3, #8
 802399a:	b29a      	uxth	r2, r3
 802399c:	43db      	mvns	r3, r3
 802399e:	fb1c fc02 	smulbb	ip, ip, r2
 80239a2:	b2db      	uxtb	r3, r3
 80239a4:	fb01 c103 	mla	r1, r1, r3, ip
 80239a8:	b289      	uxth	r1, r1
 80239aa:	f101 0c01 	add.w	ip, r1, #1
 80239ae:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80239b2:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80239b6:	fb1c fc03 	smulbb	ip, ip, r3
 80239ba:	1209      	asrs	r1, r1, #8
 80239bc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80239c0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80239c4:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80239c8:	fb01 c102 	mla	r1, r1, r2, ip
 80239cc:	b289      	uxth	r1, r1
 80239ce:	f101 0c01 	add.w	ip, r1, #1
 80239d2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80239d6:	1209      	asrs	r1, r1, #8
 80239d8:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80239dc:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80239e0:	fb11 f303 	smulbb	r3, r1, r3
 80239e4:	fb00 3002 	mla	r0, r0, r2, r3
 80239e8:	b280      	uxth	r0, r0
 80239ea:	1c42      	adds	r2, r0, #1
 80239ec:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80239f0:	1200      	asrs	r0, r0, #8
 80239f2:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80239f6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80239f8:	f10e 0e03 	add.w	lr, lr, #3
 80239fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8023a00:	441d      	add	r5, r3
 8023a02:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023a04:	441e      	add	r6, r3
 8023a06:	e6db      	b.n	80237c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023a08:	2400c8cc 	.word	0x2400c8cc
 8023a0c:	2800      	cmp	r0, #0
 8023a0e:	d09a      	beq.n	8023946 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023a10:	444b      	add	r3, r9
 8023a12:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023a16:	07db      	lsls	r3, r3, #31
 8023a18:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023a1c:	bf54      	ite	pl
 8023a1e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023a22:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023a26:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023a2a:	fa5f f38c 	uxtb.w	r3, ip
 8023a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023a30:	e789      	b.n	8023946 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023a32:	b017      	add	sp, #92	; 0x5c
 8023a34:	ecbd 8b08 	vpop	{d8-d11}
 8023a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023a3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8023a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a40:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8023a44:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023a48:	2800      	cmp	r0, #0
 8023a4a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8023a4e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8023a52:	fb0c 0e03 	mla	lr, ip, r3, r0
 8023a56:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8023a5a:	db6b      	blt.n	8023b34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023a5c:	4580      	cmp	r8, r0
 8023a5e:	dd69      	ble.n	8023b34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023a60:	f1bc 0f00 	cmp.w	ip, #0
 8023a64:	db66      	blt.n	8023b34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023a66:	45e1      	cmp	r9, ip
 8023a68:	dd64      	ble.n	8023b34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8023a6a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8023a6e:	f01e 0f01 	tst.w	lr, #1
 8023a72:	5d16      	ldrb	r6, [r2, r4]
 8023a74:	bf0c      	ite	eq
 8023a76:	f006 060f 	andeq.w	r6, r6, #15
 8023a7a:	1136      	asrne	r6, r6, #4
 8023a7c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023a80:	b2f6      	uxtb	r6, r6
 8023a82:	f110 0a01 	adds.w	sl, r0, #1
 8023a86:	d457      	bmi.n	8023b38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023a88:	45d0      	cmp	r8, sl
 8023a8a:	dd55      	ble.n	8023b38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023a8c:	f1bc 0f00 	cmp.w	ip, #0
 8023a90:	db52      	blt.n	8023b38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023a92:	45e1      	cmp	r9, ip
 8023a94:	dd50      	ble.n	8023b38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8023a96:	2f00      	cmp	r7, #0
 8023a98:	f000 80a5 	beq.w	8023be6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8023a9c:	f10e 0b01 	add.w	fp, lr, #1
 8023aa0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023aa4:	f01b 0f01 	tst.w	fp, #1
 8023aa8:	5d14      	ldrb	r4, [r2, r4]
 8023aaa:	bf0c      	ite	eq
 8023aac:	f004 040f 	andeq.w	r4, r4, #15
 8023ab0:	1124      	asrne	r4, r4, #4
 8023ab2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023ab6:	b2e4      	uxtb	r4, r4
 8023ab8:	2d00      	cmp	r5, #0
 8023aba:	f000 808f 	beq.w	8023bdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8023abe:	2800      	cmp	r0, #0
 8023ac0:	f10c 0c01 	add.w	ip, ip, #1
 8023ac4:	db3c      	blt.n	8023b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023ac6:	4580      	cmp	r8, r0
 8023ac8:	dd3a      	ble.n	8023b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023aca:	f1bc 0f00 	cmp.w	ip, #0
 8023ace:	db37      	blt.n	8023b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023ad0:	45e1      	cmp	r9, ip
 8023ad2:	dd35      	ble.n	8023b40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8023ad4:	eb03 0b0e 	add.w	fp, r3, lr
 8023ad8:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8023adc:	f01b 0f01 	tst.w	fp, #1
 8023ae0:	5c10      	ldrb	r0, [r2, r0]
 8023ae2:	bf0c      	ite	eq
 8023ae4:	f000 000f 	andeq.w	r0, r0, #15
 8023ae8:	1100      	asrne	r0, r0, #4
 8023aea:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023aee:	b2c0      	uxtb	r0, r0
 8023af0:	f1ba 0f00 	cmp.w	sl, #0
 8023af4:	db26      	blt.n	8023b44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023af6:	45d0      	cmp	r8, sl
 8023af8:	dd24      	ble.n	8023b44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023afa:	f1bc 0f00 	cmp.w	ip, #0
 8023afe:	db21      	blt.n	8023b44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023b00:	45e1      	cmp	r9, ip
 8023b02:	dd1f      	ble.n	8023b44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8023b04:	b307      	cbz	r7, 8023b48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8023b06:	3301      	adds	r3, #1
 8023b08:	449e      	add	lr, r3
 8023b0a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023b0e:	f01e 0f01 	tst.w	lr, #1
 8023b12:	5cd3      	ldrb	r3, [r2, r3]
 8023b14:	bf0c      	ite	eq
 8023b16:	f003 030f 	andeq.w	r3, r3, #15
 8023b1a:	111b      	asrne	r3, r3, #4
 8023b1c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023b20:	b2db      	uxtb	r3, r3
 8023b22:	2f0f      	cmp	r7, #15
 8023b24:	d911      	bls.n	8023b4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8023b26:	4b32      	ldr	r3, [pc, #200]	; (8023bf0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8023b28:	f240 1157 	movw	r1, #343	; 0x157
 8023b2c:	4a31      	ldr	r2, [pc, #196]	; (8023bf4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8023b2e:	4832      	ldr	r0, [pc, #200]	; (8023bf8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8023b30:	f002 f822 	bl	8025b78 <__assert_func>
 8023b34:	2600      	movs	r6, #0
 8023b36:	e7a4      	b.n	8023a82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8023b38:	2400      	movs	r4, #0
 8023b3a:	e7bd      	b.n	8023ab8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8023b3c:	463c      	mov	r4, r7
 8023b3e:	e7be      	b.n	8023abe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8023b40:	2000      	movs	r0, #0
 8023b42:	e7d5      	b.n	8023af0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8023b44:	2300      	movs	r3, #0
 8023b46:	e7ec      	b.n	8023b22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8023b48:	463b      	mov	r3, r7
 8023b4a:	2d0f      	cmp	r5, #15
 8023b4c:	d8eb      	bhi.n	8023b26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023b4e:	b2bf      	uxth	r7, r7
 8023b50:	b2ad      	uxth	r5, r5
 8023b52:	fb07 f205 	mul.w	r2, r7, r5
 8023b56:	013f      	lsls	r7, r7, #4
 8023b58:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8023b5c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8023b60:	1abf      	subs	r7, r7, r2
 8023b62:	b2ad      	uxth	r5, r5
 8023b64:	b2bf      	uxth	r7, r7
 8023b66:	ebac 0c05 	sub.w	ip, ip, r5
 8023b6a:	437c      	muls	r4, r7
 8023b6c:	fa1f fc8c 	uxth.w	ip, ip
 8023b70:	fb06 440c 	mla	r4, r6, ip, r4
 8023b74:	fb05 4400 	mla	r4, r5, r0, r4
 8023b78:	fb02 4303 	mla	r3, r2, r3, r4
 8023b7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023b80:	b353      	cbz	r3, 8023bd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8023b82:	4a1e      	ldr	r2, [pc, #120]	; (8023bfc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8023b84:	7808      	ldrb	r0, [r1, #0]
 8023b86:	6814      	ldr	r4, [r2, #0]
 8023b88:	b29a      	uxth	r2, r3
 8023b8a:	43db      	mvns	r3, r3
 8023b8c:	b2e5      	uxtb	r5, r4
 8023b8e:	b2db      	uxtb	r3, r3
 8023b90:	fb15 f502 	smulbb	r5, r5, r2
 8023b94:	fb00 5003 	mla	r0, r0, r3, r5
 8023b98:	b280      	uxth	r0, r0
 8023b9a:	1c45      	adds	r5, r0, #1
 8023b9c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023ba0:	784d      	ldrb	r5, [r1, #1]
 8023ba2:	fb15 f503 	smulbb	r5, r5, r3
 8023ba6:	1200      	asrs	r0, r0, #8
 8023ba8:	7008      	strb	r0, [r1, #0]
 8023baa:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8023bae:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023bb2:	fb00 5002 	mla	r0, r0, r2, r5
 8023bb6:	b280      	uxth	r0, r0
 8023bb8:	1c45      	adds	r5, r0, #1
 8023bba:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023bbe:	1200      	asrs	r0, r0, #8
 8023bc0:	7048      	strb	r0, [r1, #1]
 8023bc2:	7888      	ldrb	r0, [r1, #2]
 8023bc4:	fb10 f303 	smulbb	r3, r0, r3
 8023bc8:	fb04 3202 	mla	r2, r4, r2, r3
 8023bcc:	b292      	uxth	r2, r2
 8023bce:	1c53      	adds	r3, r2, #1
 8023bd0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023bd4:	1212      	asrs	r2, r2, #8
 8023bd6:	708a      	strb	r2, [r1, #2]
 8023bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bdc:	2f0f      	cmp	r7, #15
 8023bde:	d8a2      	bhi.n	8023b26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8023be0:	462b      	mov	r3, r5
 8023be2:	4628      	mov	r0, r5
 8023be4:	e7b3      	b.n	8023b4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8023be6:	2d00      	cmp	r5, #0
 8023be8:	d1a8      	bne.n	8023b3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8023bea:	462c      	mov	r4, r5
 8023bec:	e7f8      	b.n	8023be0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8023bee:	bf00      	nop
 8023bf0:	0802b042 	.word	0x0802b042
 8023bf4:	0802b53a 	.word	0x0802b53a
 8023bf8:	0802b10b 	.word	0x0802b10b
 8023bfc:	2400c8cc 	.word	0x2400c8cc

08023c00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c04:	ed2d 8b08 	vpush	{d8-d11}
 8023c08:	b093      	sub	sp, #76	; 0x4c
 8023c0a:	461c      	mov	r4, r3
 8023c0c:	eeb0 aa40 	vmov.f32	s20, s0
 8023c10:	920c      	str	r2, [sp, #48]	; 0x30
 8023c12:	eef0 9a60 	vmov.f32	s19, s1
 8023c16:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023c18:	eeb0 9a41 	vmov.f32	s18, s2
 8023c1c:	9011      	str	r0, [sp, #68]	; 0x44
 8023c1e:	eeb0 8a62 	vmov.f32	s16, s5
 8023c22:	6850      	ldr	r0, [r2, #4]
 8023c24:	eef0 8a43 	vmov.f32	s17, s6
 8023c28:	9107      	str	r1, [sp, #28]
 8023c2a:	eef0 ba44 	vmov.f32	s23, s8
 8023c2e:	6812      	ldr	r2, [r2, #0]
 8023c30:	eeb0 ba64 	vmov.f32	s22, s9
 8023c34:	eef0 aa45 	vmov.f32	s21, s10
 8023c38:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023c3c:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 8023c40:	fb00 1303 	mla	r3, r0, r3, r1
 8023c44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023c48:	eb02 0b03 	add.w	fp, r2, r3
 8023c4c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023c4e:	689b      	ldr	r3, [r3, #8]
 8023c50:	3301      	adds	r3, #1
 8023c52:	f023 0301 	bic.w	r3, r3, #1
 8023c56:	9309      	str	r3, [sp, #36]	; 0x24
 8023c58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023c5a:	f8d3 8000 	ldr.w	r8, [r3]
 8023c5e:	9b07      	ldr	r3, [sp, #28]
 8023c60:	2b00      	cmp	r3, #0
 8023c62:	dc03      	bgt.n	8023c6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023c66:	2b00      	cmp	r3, #0
 8023c68:	f340 822b 	ble.w	80240c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8023c6c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023c6e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023c72:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023c76:	1e48      	subs	r0, r1, #1
 8023c78:	1e57      	subs	r7, r2, #1
 8023c7a:	2c00      	cmp	r4, #0
 8023c7c:	f340 80d7 	ble.w	8023e2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8023c80:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8023c84:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023c88:	d406      	bmi.n	8023c98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023c8a:	4584      	cmp	ip, r0
 8023c8c:	da04      	bge.n	8023c98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023c8e:	2b00      	cmp	r3, #0
 8023c90:	db02      	blt.n	8023c98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023c92:	42bb      	cmp	r3, r7
 8023c94:	f2c0 80cc 	blt.w	8023e30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023c98:	f11c 0c01 	adds.w	ip, ip, #1
 8023c9c:	f100 80bf 	bmi.w	8023e1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8023ca0:	4561      	cmp	r1, ip
 8023ca2:	f2c0 80bc 	blt.w	8023e1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8023ca6:	3301      	adds	r3, #1
 8023ca8:	f100 80b9 	bmi.w	8023e1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8023cac:	429a      	cmp	r2, r3
 8023cae:	f2c0 80b6 	blt.w	8023e1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8023cb2:	46a2      	mov	sl, r4
 8023cb4:	465f      	mov	r7, fp
 8023cb6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023cba:	f1ba 0f00 	cmp.w	sl, #0
 8023cbe:	f340 80d4 	ble.w	8023e6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8023cc2:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8023cc6:	1430      	asrs	r0, r6, #16
 8023cc8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023ccc:	9308      	str	r3, [sp, #32]
 8023cce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023cd0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023cd4:	142b      	asrs	r3, r5, #16
 8023cd6:	f100 8124 	bmi.w	8023f22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023cda:	f10c 32ff 	add.w	r2, ip, #4294967295
 8023cde:	4293      	cmp	r3, r2
 8023ce0:	f280 811f 	bge.w	8023f22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023ce4:	2800      	cmp	r0, #0
 8023ce6:	f2c0 811c 	blt.w	8023f22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023cea:	f10e 32ff 	add.w	r2, lr, #4294967295
 8023cee:	4290      	cmp	r0, r2
 8023cf0:	f280 8117 	bge.w	8023f22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023cf4:	fb00 3309 	mla	r3, r0, r9, r3
 8023cf8:	0858      	lsrs	r0, r3, #1
 8023cfa:	07da      	lsls	r2, r3, #31
 8023cfc:	9a08      	ldr	r2, [sp, #32]
 8023cfe:	f818 c000 	ldrb.w	ip, [r8, r0]
 8023d02:	bf54      	ite	pl
 8023d04:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023d08:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023d0c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023d10:	fa5f fc8c 	uxtb.w	ip, ip
 8023d14:	2a00      	cmp	r2, #0
 8023d16:	f000 80ed 	beq.w	8023ef4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023d1a:	1c58      	adds	r0, r3, #1
 8023d1c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8023d20:	07c0      	lsls	r0, r0, #31
 8023d22:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8023d26:	bf54      	ite	pl
 8023d28:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023d2c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8023d30:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8023d34:	fa5f fe8e 	uxtb.w	lr, lr
 8023d38:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8023d3c:	b1c9      	cbz	r1, 8023d72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8023d3e:	444b      	add	r3, r9
 8023d40:	0858      	lsrs	r0, r3, #1
 8023d42:	07da      	lsls	r2, r3, #31
 8023d44:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023d48:	bf54      	ite	pl
 8023d4a:	f000 000f 	andpl.w	r0, r0, #15
 8023d4e:	1100      	asrmi	r0, r0, #4
 8023d50:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023d54:	b2c0      	uxtb	r0, r0
 8023d56:	900a      	str	r0, [sp, #40]	; 0x28
 8023d58:	1c58      	adds	r0, r3, #1
 8023d5a:	0843      	lsrs	r3, r0, #1
 8023d5c:	07c2      	lsls	r2, r0, #31
 8023d5e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8023d62:	bf54      	ite	pl
 8023d64:	f003 030f 	andpl.w	r3, r3, #15
 8023d68:	111b      	asrmi	r3, r3, #4
 8023d6a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023d6e:	b2db      	uxtb	r3, r3
 8023d70:	930e      	str	r3, [sp, #56]	; 0x38
 8023d72:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023d76:	b289      	uxth	r1, r1
 8023d78:	fb02 f301 	mul.w	r3, r2, r1
 8023d7c:	0112      	lsls	r2, r2, #4
 8023d7e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023d82:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8023d86:	1ad2      	subs	r2, r2, r3
 8023d88:	b289      	uxth	r1, r1
 8023d8a:	b292      	uxth	r2, r2
 8023d8c:	1a40      	subs	r0, r0, r1
 8023d8e:	fa1f fe80 	uxth.w	lr, r0
 8023d92:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023d94:	4342      	muls	r2, r0
 8023d96:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8023d9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023d9c:	fb01 c102 	mla	r1, r1, r2, ip
 8023da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023da2:	fb03 1302 	mla	r3, r3, r2, r1
 8023da6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023daa:	b383      	cbz	r3, 8023e0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023dac:	4ac7      	ldr	r2, [pc, #796]	; (80240cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8023dae:	2bff      	cmp	r3, #255	; 0xff
 8023db0:	6812      	ldr	r2, [r2, #0]
 8023db2:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8023db6:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8023dba:	b2d2      	uxtb	r2, r2
 8023dbc:	f000 80ac 	beq.w	8023f18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8023dc0:	b299      	uxth	r1, r3
 8023dc2:	43db      	mvns	r3, r3
 8023dc4:	f897 c000 	ldrb.w	ip, [r7]
 8023dc8:	fb12 f201 	smulbb	r2, r2, r1
 8023dcc:	b2db      	uxtb	r3, r3
 8023dce:	fb10 f001 	smulbb	r0, r0, r1
 8023dd2:	fb0c 2203 	mla	r2, ip, r3, r2
 8023dd6:	fb1e f101 	smulbb	r1, lr, r1
 8023dda:	b292      	uxth	r2, r2
 8023ddc:	f102 0c01 	add.w	ip, r2, #1
 8023de0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023de4:	1212      	asrs	r2, r2, #8
 8023de6:	703a      	strb	r2, [r7, #0]
 8023de8:	787a      	ldrb	r2, [r7, #1]
 8023dea:	fb02 0003 	mla	r0, r2, r3, r0
 8023dee:	b280      	uxth	r0, r0
 8023df0:	1c42      	adds	r2, r0, #1
 8023df2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023df6:	78ba      	ldrb	r2, [r7, #2]
 8023df8:	fb02 1303 	mla	r3, r2, r3, r1
 8023dfc:	1200      	asrs	r0, r0, #8
 8023dfe:	b29b      	uxth	r3, r3
 8023e00:	7078      	strb	r0, [r7, #1]
 8023e02:	f103 0e01 	add.w	lr, r3, #1
 8023e06:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8023e0a:	121b      	asrs	r3, r3, #8
 8023e0c:	70bb      	strb	r3, [r7, #2]
 8023e0e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023e10:	3703      	adds	r7, #3
 8023e12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023e16:	441d      	add	r5, r3
 8023e18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e1a:	441e      	add	r6, r3
 8023e1c:	e74d      	b.n	8023cba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8023e1e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023e20:	3c01      	subs	r4, #1
 8023e22:	f10b 0b03 	add.w	fp, fp, #3
 8023e26:	441d      	add	r5, r3
 8023e28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023e2a:	441e      	add	r6, r3
 8023e2c:	e725      	b.n	8023c7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023e2e:	d021      	beq.n	8023e74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8023e30:	1e63      	subs	r3, r4, #1
 8023e32:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023e34:	fb00 5003 	mla	r0, r0, r3, r5
 8023e38:	1400      	asrs	r0, r0, #16
 8023e3a:	f53f af3a 	bmi.w	8023cb2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023e3e:	3901      	subs	r1, #1
 8023e40:	4288      	cmp	r0, r1
 8023e42:	f6bf af36 	bge.w	8023cb2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023e46:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023e48:	fb01 6303 	mla	r3, r1, r3, r6
 8023e4c:	141b      	asrs	r3, r3, #16
 8023e4e:	f53f af30 	bmi.w	8023cb2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023e52:	3a01      	subs	r2, #1
 8023e54:	4293      	cmp	r3, r2
 8023e56:	f6bf af2c 	bge.w	8023cb2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8023e5a:	f10b 0c03 	add.w	ip, fp, #3
 8023e5e:	46a6      	mov	lr, r4
 8023e60:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023e64:	f1be 0f00 	cmp.w	lr, #0
 8023e68:	dc79      	bgt.n	8023f5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8023e6a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8023e6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023e72:	44a3      	add	fp, r4
 8023e74:	9b07      	ldr	r3, [sp, #28]
 8023e76:	2b00      	cmp	r3, #0
 8023e78:	f340 8123 	ble.w	80240c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8023e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023e80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e82:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023e86:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023e8a:	eef0 6a48 	vmov.f32	s13, s16
 8023e8e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023e92:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023e96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023e9a:	ee16 5a90 	vmov	r5, s13
 8023e9e:	eef0 6a68 	vmov.f32	s13, s17
 8023ea2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023ea6:	ee16 6a90 	vmov	r6, s13
 8023eaa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023eae:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023eb2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023eb6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023eba:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023ebe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023ec2:	ee18 2a10 	vmov	r2, s16
 8023ec6:	eeb0 8a47 	vmov.f32	s16, s14
 8023eca:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ece:	ee18 2a90 	vmov	r2, s17
 8023ed2:	9327      	str	r3, [sp, #156]	; 0x9c
 8023ed4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023ed6:	eef0 8a67 	vmov.f32	s17, s15
 8023eda:	fb92 f3f3 	sdiv	r3, r2, r3
 8023ede:	9328      	str	r3, [sp, #160]	; 0xa0
 8023ee0:	9b07      	ldr	r3, [sp, #28]
 8023ee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023ee4:	3b01      	subs	r3, #1
 8023ee6:	9307      	str	r3, [sp, #28]
 8023ee8:	bf08      	it	eq
 8023eea:	4614      	moveq	r4, r2
 8023eec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023eee:	bf18      	it	ne
 8023ef0:	461c      	movne	r4, r3
 8023ef2:	e6b4      	b.n	8023c5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8023ef4:	2900      	cmp	r1, #0
 8023ef6:	f43f af3c 	beq.w	8023d72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8023efa:	eb09 0003 	add.w	r0, r9, r3
 8023efe:	0843      	lsrs	r3, r0, #1
 8023f00:	07c0      	lsls	r0, r0, #31
 8023f02:	f818 3003 	ldrb.w	r3, [r8, r3]
 8023f06:	bf54      	ite	pl
 8023f08:	f003 030f 	andpl.w	r3, r3, #15
 8023f0c:	111b      	asrmi	r3, r3, #4
 8023f0e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023f12:	b2db      	uxtb	r3, r3
 8023f14:	930a      	str	r3, [sp, #40]	; 0x28
 8023f16:	e72c      	b.n	8023d72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 8023f18:	703a      	strb	r2, [r7, #0]
 8023f1a:	7078      	strb	r0, [r7, #1]
 8023f1c:	f887 e002 	strb.w	lr, [r7, #2]
 8023f20:	e775      	b.n	8023e0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023f22:	1c5a      	adds	r2, r3, #1
 8023f24:	f53f af73 	bmi.w	8023e0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023f28:	4594      	cmp	ip, r2
 8023f2a:	f6ff af70 	blt.w	8023e0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023f2e:	1c42      	adds	r2, r0, #1
 8023f30:	f53f af6d 	bmi.w	8023e0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023f34:	4596      	cmp	lr, r2
 8023f36:	f6ff af6a 	blt.w	8023e0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023f3a:	9302      	str	r3, [sp, #8]
 8023f3c:	fa0f f38e 	sxth.w	r3, lr
 8023f40:	9a08      	ldr	r2, [sp, #32]
 8023f42:	9301      	str	r3, [sp, #4]
 8023f44:	fa0f f38c 	sxth.w	r3, ip
 8023f48:	9105      	str	r1, [sp, #20]
 8023f4a:	4639      	mov	r1, r7
 8023f4c:	9300      	str	r3, [sp, #0]
 8023f4e:	464b      	mov	r3, r9
 8023f50:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023f54:	4642      	mov	r2, r8
 8023f56:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023f58:	f7ff fd70 	bl	8023a3c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023f5c:	e757      	b.n	8023e0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023f5e:	142a      	asrs	r2, r5, #16
 8023f60:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023f64:	1433      	asrs	r3, r6, #16
 8023f66:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8023f6a:	fb09 2303 	mla	r3, r9, r3, r2
 8023f6e:	085a      	lsrs	r2, r3, #1
 8023f70:	07d9      	lsls	r1, r3, #31
 8023f72:	f818 2002 	ldrb.w	r2, [r8, r2]
 8023f76:	bf54      	ite	pl
 8023f78:	f002 020f 	andpl.w	r2, r2, #15
 8023f7c:	1112      	asrmi	r2, r2, #4
 8023f7e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023f82:	b2d2      	uxtb	r2, r2
 8023f84:	2800      	cmp	r0, #0
 8023f86:	f000 8085 	beq.w	8024094 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8023f8a:	f103 0a01 	add.w	sl, r3, #1
 8023f8e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8023f92:	f01a 0f01 	tst.w	sl, #1
 8023f96:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023f9a:	bf0c      	ite	eq
 8023f9c:	f001 010f 	andeq.w	r1, r1, #15
 8023fa0:	1109      	asrne	r1, r1, #4
 8023fa2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023fa6:	b2c9      	uxtb	r1, r1
 8023fa8:	910f      	str	r1, [sp, #60]	; 0x3c
 8023faa:	b1df      	cbz	r7, 8023fe4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8023fac:	444b      	add	r3, r9
 8023fae:	0859      	lsrs	r1, r3, #1
 8023fb0:	f013 0f01 	tst.w	r3, #1
 8023fb4:	f103 0301 	add.w	r3, r3, #1
 8023fb8:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023fbc:	bf0c      	ite	eq
 8023fbe:	f001 010f 	andeq.w	r1, r1, #15
 8023fc2:	1109      	asrne	r1, r1, #4
 8023fc4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023fc8:	b2c9      	uxtb	r1, r1
 8023fca:	910b      	str	r1, [sp, #44]	; 0x2c
 8023fcc:	0859      	lsrs	r1, r3, #1
 8023fce:	07db      	lsls	r3, r3, #31
 8023fd0:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023fd4:	bf54      	ite	pl
 8023fd6:	f001 010f 	andpl.w	r1, r1, #15
 8023fda:	1109      	asrmi	r1, r1, #4
 8023fdc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023fe0:	b2c9      	uxtb	r1, r1
 8023fe2:	9110      	str	r1, [sp, #64]	; 0x40
 8023fe4:	b280      	uxth	r0, r0
 8023fe6:	b2bf      	uxth	r7, r7
 8023fe8:	fb00 f307 	mul.w	r3, r0, r7
 8023fec:	0100      	lsls	r0, r0, #4
 8023fee:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8023ff2:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023ff6:	1ac0      	subs	r0, r0, r3
 8023ff8:	b2bf      	uxth	r7, r7
 8023ffa:	b280      	uxth	r0, r0
 8023ffc:	1bc9      	subs	r1, r1, r7
 8023ffe:	fa1f fa81 	uxth.w	sl, r1
 8024002:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024004:	4348      	muls	r0, r1
 8024006:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024008:	fb02 020a 	mla	r2, r2, sl, r0
 802400c:	fb07 2701 	mla	r7, r7, r1, r2
 8024010:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024012:	fb03 7302 	mla	r3, r3, r2, r7
 8024016:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802401a:	b393      	cbz	r3, 8024082 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 802401c:	4a2b      	ldr	r2, [pc, #172]	; (80240cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 802401e:	2bff      	cmp	r3, #255	; 0xff
 8024020:	6811      	ldr	r1, [r2, #0]
 8024022:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8024026:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802402a:	b2c9      	uxtb	r1, r1
 802402c:	d042      	beq.n	80240b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802402e:	b298      	uxth	r0, r3
 8024030:	43db      	mvns	r3, r3
 8024032:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8024036:	fb11 f100 	smulbb	r1, r1, r0
 802403a:	b2db      	uxtb	r3, r3
 802403c:	fb17 f700 	smulbb	r7, r7, r0
 8024040:	fb02 1103 	mla	r1, r2, r3, r1
 8024044:	fb1a f000 	smulbb	r0, sl, r0
 8024048:	b289      	uxth	r1, r1
 802404a:	1c4a      	adds	r2, r1, #1
 802404c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024050:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8024054:	fb02 7703 	mla	r7, r2, r3, r7
 8024058:	1209      	asrs	r1, r1, #8
 802405a:	b2bf      	uxth	r7, r7
 802405c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8024060:	1c7a      	adds	r2, r7, #1
 8024062:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8024066:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 802406a:	fb02 0303 	mla	r3, r2, r3, r0
 802406e:	123f      	asrs	r7, r7, #8
 8024070:	b29b      	uxth	r3, r3
 8024072:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8024076:	1c5a      	adds	r2, r3, #1
 8024078:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802407c:	121b      	asrs	r3, r3, #8
 802407e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8024082:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024084:	f10c 0c03 	add.w	ip, ip, #3
 8024088:	f10e 3eff 	add.w	lr, lr, #4294967295
 802408c:	441d      	add	r5, r3
 802408e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024090:	441e      	add	r6, r3
 8024092:	e6e7      	b.n	8023e64 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8024094:	2f00      	cmp	r7, #0
 8024096:	d0a5      	beq.n	8023fe4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024098:	444b      	add	r3, r9
 802409a:	0859      	lsrs	r1, r3, #1
 802409c:	07db      	lsls	r3, r3, #31
 802409e:	f818 1001 	ldrb.w	r1, [r8, r1]
 80240a2:	bf54      	ite	pl
 80240a4:	f001 010f 	andpl.w	r1, r1, #15
 80240a8:	1109      	asrmi	r1, r1, #4
 80240aa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80240ae:	b2c9      	uxtb	r1, r1
 80240b0:	910b      	str	r1, [sp, #44]	; 0x2c
 80240b2:	e797      	b.n	8023fe4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80240b4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80240b8:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80240bc:	f80c ac01 	strb.w	sl, [ip, #-1]
 80240c0:	e7df      	b.n	8024082 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80240c2:	b013      	add	sp, #76	; 0x4c
 80240c4:	ecbd 8b08 	vpop	{d8-d11}
 80240c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240cc:	2400c8cc 	.word	0x2400c8cc

080240d0 <CRC_Lock>:
 80240d0:	4a20      	ldr	r2, [pc, #128]	; (8024154 <CRC_Lock+0x84>)
 80240d2:	b530      	push	{r4, r5, lr}
 80240d4:	6813      	ldr	r3, [r2, #0]
 80240d6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80240da:	f24c 2540 	movw	r5, #49728	; 0xc240
 80240de:	f023 0301 	bic.w	r3, r3, #1
 80240e2:	6013      	str	r3, [r2, #0]
 80240e4:	4b1c      	ldr	r3, [pc, #112]	; (8024158 <CRC_Lock+0x88>)
 80240e6:	681a      	ldr	r2, [r3, #0]
 80240e8:	4022      	ands	r2, r4
 80240ea:	42aa      	cmp	r2, r5
 80240ec:	d005      	beq.n	80240fa <CRC_Lock+0x2a>
 80240ee:	681b      	ldr	r3, [r3, #0]
 80240f0:	f24c 2270 	movw	r2, #49776	; 0xc270
 80240f4:	4023      	ands	r3, r4
 80240f6:	4293      	cmp	r3, r2
 80240f8:	d124      	bne.n	8024144 <CRC_Lock+0x74>
 80240fa:	4b18      	ldr	r3, [pc, #96]	; (802415c <CRC_Lock+0x8c>)
 80240fc:	681b      	ldr	r3, [r3, #0]
 80240fe:	bb0b      	cbnz	r3, 8024144 <CRC_Lock+0x74>
 8024100:	4b17      	ldr	r3, [pc, #92]	; (8024160 <CRC_Lock+0x90>)
 8024102:	681a      	ldr	r2, [r3, #0]
 8024104:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024108:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802410c:	d00d      	beq.n	802412a <CRC_Lock+0x5a>
 802410e:	681a      	ldr	r2, [r3, #0]
 8024110:	f240 4483 	movw	r4, #1155	; 0x483
 8024114:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024118:	42a2      	cmp	r2, r4
 802411a:	d006      	beq.n	802412a <CRC_Lock+0x5a>
 802411c:	681b      	ldr	r3, [r3, #0]
 802411e:	f240 4285 	movw	r2, #1157	; 0x485
 8024122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024126:	4293      	cmp	r3, r2
 8024128:	d10c      	bne.n	8024144 <CRC_Lock+0x74>
 802412a:	4b0e      	ldr	r3, [pc, #56]	; (8024164 <CRC_Lock+0x94>)
 802412c:	2201      	movs	r2, #1
 802412e:	601a      	str	r2, [r3, #0]
 8024130:	681a      	ldr	r2, [r3, #0]
 8024132:	2a00      	cmp	r2, #0
 8024134:	d1fc      	bne.n	8024130 <CRC_Lock+0x60>
 8024136:	4b0c      	ldr	r3, [pc, #48]	; (8024168 <CRC_Lock+0x98>)
 8024138:	6018      	str	r0, [r3, #0]
 802413a:	6818      	ldr	r0, [r3, #0]
 802413c:	1a43      	subs	r3, r0, r1
 802413e:	4258      	negs	r0, r3
 8024140:	4158      	adcs	r0, r3
 8024142:	bd30      	pop	{r4, r5, pc}
 8024144:	4b09      	ldr	r3, [pc, #36]	; (802416c <CRC_Lock+0x9c>)
 8024146:	2201      	movs	r2, #1
 8024148:	601a      	str	r2, [r3, #0]
 802414a:	681a      	ldr	r2, [r3, #0]
 802414c:	2a00      	cmp	r2, #0
 802414e:	d1fc      	bne.n	802414a <CRC_Lock+0x7a>
 8024150:	4b07      	ldr	r3, [pc, #28]	; (8024170 <CRC_Lock+0xa0>)
 8024152:	e7f1      	b.n	8024138 <CRC_Lock+0x68>
 8024154:	e0002000 	.word	0xe0002000
 8024158:	e000ed00 	.word	0xe000ed00
 802415c:	e0042000 	.word	0xe0042000
 8024160:	5c001000 	.word	0x5c001000
 8024164:	58024c08 	.word	0x58024c08
 8024168:	58024c00 	.word	0x58024c00
 802416c:	40023008 	.word	0x40023008
 8024170:	40023000 	.word	0x40023000

08024174 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024174:	6101      	str	r1, [r0, #16]
 8024176:	4770      	bx	lr

08024178 <_ZN8touchgfx8Gestures4tickEv>:
 8024178:	7b83      	ldrb	r3, [r0, #14]
 802417a:	b14b      	cbz	r3, 8024190 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802417c:	8903      	ldrh	r3, [r0, #8]
 802417e:	3301      	adds	r3, #1
 8024180:	b29b      	uxth	r3, r3
 8024182:	2b07      	cmp	r3, #7
 8024184:	8103      	strh	r3, [r0, #8]
 8024186:	bf81      	itttt	hi
 8024188:	2300      	movhi	r3, #0
 802418a:	8143      	strhhi	r3, [r0, #10]
 802418c:	8183      	strhhi	r3, [r0, #12]
 802418e:	7383      	strbhi	r3, [r0, #14]
 8024190:	4770      	bx	lr
	...

08024194 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024194:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024198:	4604      	mov	r4, r0
 802419a:	4698      	mov	r8, r3
 802419c:	8880      	ldrh	r0, [r0, #4]
 802419e:	4617      	mov	r7, r2
 80241a0:	4b1d      	ldr	r3, [pc, #116]	; (8024218 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80241a2:	460e      	mov	r6, r1
 80241a4:	f8ad 0006 	strh.w	r0, [sp, #6]
 80241a8:	eba8 0000 	sub.w	r0, r8, r0
 80241ac:	9300      	str	r3, [sp, #0]
 80241ae:	2300      	movs	r3, #0
 80241b0:	b280      	uxth	r0, r0
 80241b2:	8aa2      	ldrh	r2, [r4, #20]
 80241b4:	f88d 3004 	strb.w	r3, [sp, #4]
 80241b8:	b203      	sxth	r3, r0
 80241ba:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80241be:	88e1      	ldrh	r1, [r4, #6]
 80241c0:	2b00      	cmp	r3, #0
 80241c2:	f8ad 800a 	strh.w	r8, [sp, #10]
 80241c6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80241ca:	bfb8      	it	lt
 80241cc:	4240      	neglt	r0, r0
 80241ce:	f8ad 500c 	strh.w	r5, [sp, #12]
 80241d2:	bfb8      	it	lt
 80241d4:	b203      	sxthlt	r3, r0
 80241d6:	4293      	cmp	r3, r2
 80241d8:	dc08      	bgt.n	80241ec <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80241da:	1a69      	subs	r1, r5, r1
 80241dc:	b289      	uxth	r1, r1
 80241de:	b20b      	sxth	r3, r1
 80241e0:	2b00      	cmp	r3, #0
 80241e2:	bfbc      	itt	lt
 80241e4:	4249      	neglt	r1, r1
 80241e6:	b20b      	sxthlt	r3, r1
 80241e8:	429a      	cmp	r2, r3
 80241ea:	da13      	bge.n	8024214 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80241ec:	6920      	ldr	r0, [r4, #16]
 80241ee:	4669      	mov	r1, sp
 80241f0:	eba8 0606 	sub.w	r6, r8, r6
 80241f4:	1bef      	subs	r7, r5, r7
 80241f6:	6803      	ldr	r3, [r0, #0]
 80241f8:	685b      	ldr	r3, [r3, #4]
 80241fa:	4798      	blx	r3
 80241fc:	2300      	movs	r3, #0
 80241fe:	2001      	movs	r0, #1
 8024200:	8166      	strh	r6, [r4, #10]
 8024202:	8123      	strh	r3, [r4, #8]
 8024204:	81a7      	strh	r7, [r4, #12]
 8024206:	f8a4 8004 	strh.w	r8, [r4, #4]
 802420a:	80e5      	strh	r5, [r4, #6]
 802420c:	73a0      	strb	r0, [r4, #14]
 802420e:	b004      	add	sp, #16
 8024210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024214:	2000      	movs	r0, #0
 8024216:	e7fa      	b.n	802420e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8024218:	0802a4b8 	.word	0x0802a4b8

0802421c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802421c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802421e:	461e      	mov	r6, r3
 8024220:	1e4b      	subs	r3, r1, #1
 8024222:	b085      	sub	sp, #20
 8024224:	4604      	mov	r4, r0
 8024226:	2b01      	cmp	r3, #1
 8024228:	460d      	mov	r5, r1
 802422a:	4617      	mov	r7, r2
 802422c:	d84b      	bhi.n	80242c6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802422e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8024232:	1cd3      	adds	r3, r2, #3
 8024234:	b29b      	uxth	r3, r3
 8024236:	2b06      	cmp	r3, #6
 8024238:	d916      	bls.n	8024268 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802423a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80242dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802423e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024242:	f8cd c004 	str.w	ip, [sp, #4]
 8024246:	f04f 0c00 	mov.w	ip, #0
 802424a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802424e:	6900      	ldr	r0, [r0, #16]
 8024250:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024254:	a901      	add	r1, sp, #4
 8024256:	f88d c008 	strb.w	ip, [sp, #8]
 802425a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802425e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024262:	6803      	ldr	r3, [r0, #0]
 8024264:	689b      	ldr	r3, [r3, #8]
 8024266:	4798      	blx	r3
 8024268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802426c:	1cd3      	adds	r3, r2, #3
 802426e:	b29b      	uxth	r3, r3
 8024270:	2b06      	cmp	r3, #6
 8024272:	d916      	bls.n	80242a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024274:	f8df c064 	ldr.w	ip, [pc, #100]	; 80242dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024278:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802427c:	f8cd c004 	str.w	ip, [sp, #4]
 8024280:	f04f 0c01 	mov.w	ip, #1
 8024284:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024288:	6920      	ldr	r0, [r4, #16]
 802428a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802428e:	a901      	add	r1, sp, #4
 8024290:	f88d c008 	strb.w	ip, [sp, #8]
 8024294:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024298:	f8ad 300e 	strh.w	r3, [sp, #14]
 802429c:	6803      	ldr	r3, [r0, #0]
 802429e:	689b      	ldr	r3, [r3, #8]
 80242a0:	4798      	blx	r3
 80242a2:	4b0d      	ldr	r3, [pc, #52]	; (80242d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80242a4:	a901      	add	r1, sp, #4
 80242a6:	6920      	ldr	r0, [r4, #16]
 80242a8:	9301      	str	r3, [sp, #4]
 80242aa:	2300      	movs	r3, #0
 80242ac:	f88d 5008 	strb.w	r5, [sp, #8]
 80242b0:	f8ad 700a 	strh.w	r7, [sp, #10]
 80242b4:	f8ad 600c 	strh.w	r6, [sp, #12]
 80242b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80242bc:	6803      	ldr	r3, [r0, #0]
 80242be:	681b      	ldr	r3, [r3, #0]
 80242c0:	4798      	blx	r3
 80242c2:	b005      	add	sp, #20
 80242c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80242c6:	2900      	cmp	r1, #0
 80242c8:	d1eb      	bne.n	80242a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80242ca:	80a2      	strh	r2, [r4, #4]
 80242cc:	80c6      	strh	r6, [r0, #6]
 80242ce:	60a1      	str	r1, [r4, #8]
 80242d0:	81a1      	strh	r1, [r4, #12]
 80242d2:	73a1      	strb	r1, [r4, #14]
 80242d4:	e7e5      	b.n	80242a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80242d6:	bf00      	nop
 80242d8:	0802a4a4 	.word	0x0802a4a4
 80242dc:	0802a4cc 	.word	0x0802a4cc

080242e0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 80242e0:	10c9      	asrs	r1, r1, #3
 80242e2:	2900      	cmp	r1, #0
 80242e4:	bfb8      	it	lt
 80242e6:	4249      	neglt	r1, r1
 80242e8:	2801      	cmp	r0, #1
 80242ea:	d108      	bne.n	80242fe <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 80242ec:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80242f0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80242f4:	4601      	mov	r1, r0
 80242f6:	dd02      	ble.n	80242fe <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 80242f8:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80242fc:	4770      	bx	lr
 80242fe:	29ff      	cmp	r1, #255	; 0xff
 8024300:	bfa8      	it	ge
 8024302:	21ff      	movge	r1, #255	; 0xff
 8024304:	4608      	mov	r0, r1
 8024306:	4770      	bx	lr

08024308 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8024308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802430c:	688c      	ldr	r4, [r1, #8]
 802430e:	b087      	sub	sp, #28
 8024310:	4607      	mov	r7, r0
 8024312:	2c00      	cmp	r4, #0
 8024314:	db2b      	blt.n	802436e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8024316:	6803      	ldr	r3, [r0, #0]
 8024318:	691a      	ldr	r2, [r3, #16]
 802431a:	42a2      	cmp	r2, r4
 802431c:	dd27      	ble.n	802436e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802431e:	685a      	ldr	r2, [r3, #4]
 8024320:	695e      	ldr	r6, [r3, #20]
 8024322:	68cd      	ldr	r5, [r1, #12]
 8024324:	fb06 2604 	mla	r6, r6, r4, r2
 8024328:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802432c:	698a      	ldr	r2, [r1, #24]
 802432e:	f893 a008 	ldrb.w	sl, [r3, #8]
 8024332:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8024336:	9205      	str	r2, [sp, #20]
 8024338:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802433c:	9b05      	ldr	r3, [sp, #20]
 802433e:	6839      	ldr	r1, [r7, #0]
 8024340:	eb03 0c02 	add.w	ip, r3, r2
 8024344:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8024348:	68c9      	ldr	r1, [r1, #12]
 802434a:	1898      	adds	r0, r3, r2
 802434c:	4288      	cmp	r0, r1
 802434e:	db02      	blt.n	8024356 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8024350:	1a8b      	subs	r3, r1, r2
 8024352:	2b00      	cmp	r3, #0
 8024354:	dd09      	ble.n	802436a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8024356:	6878      	ldr	r0, [r7, #4]
 8024358:	6801      	ldr	r1, [r0, #0]
 802435a:	9400      	str	r4, [sp, #0]
 802435c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8024360:	4653      	mov	r3, sl
 8024362:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8024366:	4631      	mov	r1, r6
 8024368:	47d8      	blx	fp
 802436a:	3d01      	subs	r5, #1
 802436c:	d1e4      	bne.n	8024338 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 802436e:	b007      	add	sp, #28
 8024370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024374 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8024374:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8024378:	b90b      	cbnz	r3, 802437e <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 802437a:	f001 b991 	b.w	80256a0 <_ZN8touchgfx7Outline6lineToEii>
 802437e:	4770      	bx	lr

08024380 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8024380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024384:	4604      	mov	r4, r0
 8024386:	2600      	movs	r6, #0
 8024388:	4b8f      	ldr	r3, [pc, #572]	; (80245c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 802438a:	f100 0518 	add.w	r5, r0, #24
 802438e:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8024392:	b086      	sub	sp, #24
 8024394:	4690      	mov	r8, r2
 8024396:	e9c0 3100 	strd	r3, r1, [r0]
 802439a:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802439e:	e9c0 6604 	strd	r6, r6, [r0, #16]
 80243a2:	4628      	mov	r0, r5
 80243a4:	f001 fba0 	bl	8025ae8 <_ZN8touchgfx15RenderingBufferC1Ev>
 80243a8:	4638      	mov	r0, r7
 80243aa:	f000 fb45 	bl	8024a38 <_ZN8touchgfx7OutlineC1Ev>
 80243ae:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80243b2:	f001 fb41 	bl	8025a38 <_ZN8touchgfx8ScanlineC1Ev>
 80243b6:	2301      	movs	r3, #1
 80243b8:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 80243bc:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 80243c0:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 80243c4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80243c8:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 80243cc:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80243d0:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 80243d4:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 80243d8:	f7f2 ffd4 	bl	8017384 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 80243dc:	b928      	cbnz	r0, 80243ea <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 80243de:	4b7b      	ldr	r3, [pc, #492]	; (80245cc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 80243e0:	212d      	movs	r1, #45	; 0x2d
 80243e2:	4a7b      	ldr	r2, [pc, #492]	; (80245d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80243e4:	487b      	ldr	r0, [pc, #492]	; (80245d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 80243e6:	f001 fbc7 	bl	8025b78 <__assert_func>
 80243ea:	f9b8 2000 	ldrsh.w	r2, [r8]
 80243ee:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80243f2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80243f6:	4410      	add	r0, r2
 80243f8:	9602      	str	r6, [sp, #8]
 80243fa:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80243fe:	b280      	uxth	r0, r0
 8024400:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8024404:	fa0f fa80 	sxth.w	sl, r0
 8024408:	f1ba 0f00 	cmp.w	sl, #0
 802440c:	dd70      	ble.n	80244f0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 802440e:	4591      	cmp	r9, r2
 8024410:	dd6e      	ble.n	80244f0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8024412:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8024416:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802441a:	440b      	add	r3, r1
 802441c:	b29b      	uxth	r3, r3
 802441e:	b21e      	sxth	r6, r3
 8024420:	2e00      	cmp	r6, #0
 8024422:	dd65      	ble.n	80244f0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8024424:	458e      	cmp	lr, r1
 8024426:	dd63      	ble.n	80244f0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8024428:	45d1      	cmp	r9, sl
 802442a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802442e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8024432:	bfb8      	it	lt
 8024434:	fa1f f089 	uxthlt.w	r0, r9
 8024438:	45b6      	cmp	lr, r6
 802443a:	f8ad 2008 	strh.w	r2, [sp, #8]
 802443e:	bfb8      	it	lt
 8024440:	fa1f f38e 	uxthlt.w	r3, lr
 8024444:	1a80      	subs	r0, r0, r2
 8024446:	f8ad 100a 	strh.w	r1, [sp, #10]
 802444a:	1a5b      	subs	r3, r3, r1
 802444c:	f8ad 000c 	strh.w	r0, [sp, #12]
 8024450:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024454:	f10d 0808 	add.w	r8, sp, #8
 8024458:	ae04      	add	r6, sp, #16
 802445a:	e898 0003 	ldmia.w	r8, {r0, r1}
 802445e:	e886 0003 	stmia.w	r6, {r0, r1}
 8024462:	f8dc 3000 	ldr.w	r3, [ip]
 8024466:	4660      	mov	r0, ip
 8024468:	4631      	mov	r1, r6
 802446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802446c:	4798      	blx	r3
 802446e:	6861      	ldr	r1, [r4, #4]
 8024470:	4640      	mov	r0, r8
 8024472:	3104      	adds	r1, #4
 8024474:	f7f4 fac2 	bl	80189fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024478:	4630      	mov	r0, r6
 802447a:	f7f4 fa97 	bl	80189ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802447e:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8024482:	f7f2 ff0f 	bl	80172a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8024486:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 802448a:	4638      	mov	r0, r7
 802448c:	f000 fab0 	bl	80249f0 <_ZN8touchgfx7Outline5resetEv>
 8024490:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8024494:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8024498:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 802449c:	015b      	lsls	r3, r3, #5
 802449e:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 80244a2:	0152      	lsls	r2, r2, #5
 80244a4:	60e3      	str	r3, [r4, #12]
 80244a6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80244aa:	60a2      	str	r2, [r4, #8]
 80244ac:	015b      	lsls	r3, r3, #5
 80244ae:	6123      	str	r3, [r4, #16]
 80244b0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80244b4:	015b      	lsls	r3, r3, #5
 80244b6:	6163      	str	r3, [r4, #20]
 80244b8:	4b47      	ldr	r3, [pc, #284]	; (80245d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80244ba:	6818      	ldr	r0, [r3, #0]
 80244bc:	6803      	ldr	r3, [r0, #0]
 80244be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80244c0:	4798      	blx	r3
 80244c2:	4606      	mov	r6, r0
 80244c4:	f7df fc3e 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 80244c8:	6803      	ldr	r3, [r0, #0]
 80244ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80244cc:	4798      	blx	r3
 80244ce:	4607      	mov	r7, r0
 80244d0:	f7df fc38 	bl	8003d44 <_ZN8touchgfx3HAL3lcdEv>
 80244d4:	6803      	ldr	r3, [r0, #0]
 80244d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80244d8:	4798      	blx	r3
 80244da:	280d      	cmp	r0, #13
 80244dc:	d854      	bhi.n	8024588 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 80244de:	e8df f000 	tbb	[pc, r0]
 80244e2:	554b      	.short	0x554b
 80244e4:	2b6e0a66 	.word	0x2b6e0a66
 80244e8:	5f5f5f3b 	.word	0x5f5f5f3b
 80244ec:	6e6e5f5f 	.word	0x6e6e5f5f
 80244f0:	2300      	movs	r3, #0
 80244f2:	9303      	str	r3, [sp, #12]
 80244f4:	e7ae      	b.n	8024454 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 80244f6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80244fa:	2108      	movs	r1, #8
 80244fc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024500:	fb92 f1f1 	sdiv	r1, r2, r1
 8024504:	fb07 1303 	mla	r3, r7, r3, r1
 8024508:	441e      	add	r6, r3
 802450a:	4253      	negs	r3, r2
 802450c:	f002 0207 	and.w	r2, r2, #7
 8024510:	f003 0307 	and.w	r3, r3, #7
 8024514:	bf58      	it	pl
 8024516:	425a      	negpl	r2, r3
 8024518:	b2d2      	uxtb	r2, r2
 802451a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802451e:	4628      	mov	r0, r5
 8024520:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024524:	6721      	str	r1, [r4, #112]	; 0x70
 8024526:	e9cd 1700 	strd	r1, r7, [sp]
 802452a:	4631      	mov	r1, r6
 802452c:	f001 fae8 	bl	8025b00 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8024530:	4620      	mov	r0, r4
 8024532:	b006      	add	sp, #24
 8024534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024538:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802453c:	2104      	movs	r1, #4
 802453e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024542:	fb92 f1f1 	sdiv	r1, r2, r1
 8024546:	fb07 1303 	mla	r3, r7, r3, r1
 802454a:	441e      	add	r6, r3
 802454c:	4253      	negs	r3, r2
 802454e:	f002 0203 	and.w	r2, r2, #3
 8024552:	f003 0303 	and.w	r3, r3, #3
 8024556:	e7dd      	b.n	8024514 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8024558:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802455c:	2102      	movs	r1, #2
 802455e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024562:	2a00      	cmp	r2, #0
 8024564:	fb92 f1f1 	sdiv	r1, r2, r1
 8024568:	f002 0201 	and.w	r2, r2, #1
 802456c:	fb07 1303 	mla	r3, r7, r3, r1
 8024570:	bfb8      	it	lt
 8024572:	4252      	neglt	r2, r2
 8024574:	441e      	add	r6, r3
 8024576:	e7cf      	b.n	8024518 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 8024578:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802457c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024580:	437b      	muls	r3, r7
 8024582:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8024586:	441e      	add	r6, r3
 8024588:	2200      	movs	r2, #0
 802458a:	e7c6      	b.n	802451a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 802458c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024590:	2103      	movs	r1, #3
 8024592:	fb07 f203 	mul.w	r2, r7, r3
 8024596:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802459a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802459e:	e7f2      	b.n	8024586 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80245a0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80245a4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80245a8:	fb07 2303 	mla	r3, r7, r3, r2
 80245ac:	e7eb      	b.n	8024586 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80245ae:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80245b2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80245b6:	437b      	muls	r3, r7
 80245b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80245bc:	e7e3      	b.n	8024586 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 80245be:	4b07      	ldr	r3, [pc, #28]	; (80245dc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 80245c0:	216c      	movs	r1, #108	; 0x6c
 80245c2:	4a03      	ldr	r2, [pc, #12]	; (80245d0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 80245c4:	e70e      	b.n	80243e4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 80245c6:	bf00      	nop
 80245c8:	0802b860 	.word	0x0802b860
 80245cc:	0802b7aa 	.word	0x0802b7aa
 80245d0:	0802b868 	.word	0x0802b868
 80245d4:	0802b806 	.word	0x0802b806
 80245d8:	2400c8a4 	.word	0x2400c8a4
 80245dc:	0802b83a 	.word	0x0802b83a

080245e0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 80245e0:	6812      	ldr	r2, [r2, #0]
 80245e2:	2a00      	cmp	r2, #0
 80245e4:	db0b      	blt.n	80245fe <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 80245e6:	9800      	ldr	r0, [sp, #0]
 80245e8:	6800      	ldr	r0, [r0, #0]
 80245ea:	4290      	cmp	r0, r2
 80245ec:	bfd4      	ite	le
 80245ee:	2002      	movle	r0, #2
 80245f0:	2000      	movgt	r0, #0
 80245f2:	680a      	ldr	r2, [r1, #0]
 80245f4:	2a00      	cmp	r2, #0
 80245f6:	da04      	bge.n	8024602 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 80245f8:	f040 0004 	orr.w	r0, r0, #4
 80245fc:	4770      	bx	lr
 80245fe:	2001      	movs	r0, #1
 8024600:	e7f7      	b.n	80245f2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8024602:	681b      	ldr	r3, [r3, #0]
 8024604:	4293      	cmp	r3, r2
 8024606:	bfd8      	it	le
 8024608:	f040 0008 	orrle.w	r0, r0, #8
 802460c:	4770      	bx	lr
	...

08024610 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8024610:	4b07      	ldr	r3, [pc, #28]	; (8024630 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8024612:	b510      	push	{r4, lr}
 8024614:	781b      	ldrb	r3, [r3, #0]
 8024616:	2b01      	cmp	r3, #1
 8024618:	d108      	bne.n	802462c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802461a:	6843      	ldr	r3, [r0, #4]
 802461c:	6814      	ldr	r4, [r2, #0]
 802461e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8024622:	680b      	ldr	r3, [r1, #0]
 8024624:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8024628:	6013      	str	r3, [r2, #0]
 802462a:	600c      	str	r4, [r1, #0]
 802462c:	bd10      	pop	{r4, pc}
 802462e:	bf00      	nop
 8024630:	2400c89c 	.word	0x2400c89c

08024634 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8024634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024636:	b085      	sub	sp, #20
 8024638:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802463c:	4604      	mov	r4, r0
 802463e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024642:	b33b      	cbz	r3, 8024694 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8024644:	aa02      	add	r2, sp, #8
 8024646:	a903      	add	r1, sp, #12
 8024648:	f7ff ffe2 	bl	8024610 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802464c:	68a3      	ldr	r3, [r4, #8]
 802464e:	9e03      	ldr	r6, [sp, #12]
 8024650:	aa02      	add	r2, sp, #8
 8024652:	9f02      	ldr	r7, [sp, #8]
 8024654:	a903      	add	r1, sp, #12
 8024656:	1af6      	subs	r6, r6, r3
 8024658:	68e3      	ldr	r3, [r4, #12]
 802465a:	4620      	mov	r0, r4
 802465c:	1aff      	subs	r7, r7, r3
 802465e:	f104 0314 	add.w	r3, r4, #20
 8024662:	9603      	str	r6, [sp, #12]
 8024664:	9300      	str	r3, [sp, #0]
 8024666:	f104 0310 	add.w	r3, r4, #16
 802466a:	9702      	str	r7, [sp, #8]
 802466c:	f7ff ffb8 	bl	80245e0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8024670:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8024674:	4605      	mov	r5, r0
 8024676:	b97b      	cbnz	r3, 8024698 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8024678:	463a      	mov	r2, r7
 802467a:	4631      	mov	r1, r6
 802467c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8024680:	f7ff fe78 	bl	8024374 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024684:	9b03      	ldr	r3, [sp, #12]
 8024686:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 802468a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802468e:	9b02      	ldr	r3, [sp, #8]
 8024690:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 8024694:	b005      	add	sp, #20
 8024696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024698:	b110      	cbz	r0, 80246a0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802469a:	ea13 0200 	ands.w	r2, r3, r0
 802469e:	d11c      	bne.n	80246da <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 80246a0:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 80246a4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80246a8:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 80246ac:	b188      	cbz	r0, 80246d2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80246ae:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 80246b2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80246b6:	b913      	cbnz	r3, 80246be <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 80246b8:	4630      	mov	r0, r6
 80246ba:	f001 f821 	bl	8025700 <_ZN8touchgfx7Outline6moveToEii>
 80246be:	2300      	movs	r3, #0
 80246c0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80246c4:	2301      	movs	r3, #1
 80246c6:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80246ca:	4630      	mov	r0, r6
 80246cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80246d0:	e7d6      	b.n	8024680 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 80246d2:	4630      	mov	r0, r6
 80246d4:	f7ff fe4e 	bl	8024374 <_ZN8touchgfx10Rasterizer6lineToEii>
 80246d8:	e7f7      	b.n	80246ca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 80246da:	4615      	mov	r5, r2
 80246dc:	e7d2      	b.n	8024684 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

080246de <_ZN8touchgfx6Canvas5closeEv>:
 80246de:	b538      	push	{r3, r4, r5, lr}
 80246e0:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 80246e4:	4604      	mov	r4, r0
 80246e6:	b993      	cbnz	r3, 802470e <_ZN8touchgfx6Canvas5closeEv+0x30>
 80246e8:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 80246ec:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 80246f0:	4213      	tst	r3, r2
 80246f2:	d10c      	bne.n	802470e <_ZN8touchgfx6Canvas5closeEv+0x30>
 80246f4:	f100 0530 	add.w	r5, r0, #48	; 0x30
 80246f8:	b123      	cbz	r3, 8024704 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80246fa:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 80246fe:	4628      	mov	r0, r5
 8024700:	f7ff fe38 	bl	8024374 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024704:	4628      	mov	r0, r5
 8024706:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 802470a:	f7ff fe33 	bl	8024374 <_ZN8touchgfx10Rasterizer6lineToEii>
 802470e:	2300      	movs	r3, #0
 8024710:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024714:	bd38      	pop	{r3, r4, r5, pc}

08024716 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8024716:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024718:	b085      	sub	sp, #20
 802471a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802471e:	4604      	mov	r4, r0
 8024720:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024724:	b353      	cbz	r3, 802477c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8024726:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802472a:	b90b      	cbnz	r3, 8024730 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802472c:	f7ff ffd7 	bl	80246de <_ZN8touchgfx6Canvas5closeEv>
 8024730:	aa02      	add	r2, sp, #8
 8024732:	a903      	add	r1, sp, #12
 8024734:	4620      	mov	r0, r4
 8024736:	f7ff ff6b 	bl	8024610 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802473a:	68a3      	ldr	r3, [r4, #8]
 802473c:	9d03      	ldr	r5, [sp, #12]
 802473e:	aa02      	add	r2, sp, #8
 8024740:	9e02      	ldr	r6, [sp, #8]
 8024742:	a903      	add	r1, sp, #12
 8024744:	1aed      	subs	r5, r5, r3
 8024746:	68e3      	ldr	r3, [r4, #12]
 8024748:	4620      	mov	r0, r4
 802474a:	1af6      	subs	r6, r6, r3
 802474c:	f104 0314 	add.w	r3, r4, #20
 8024750:	9503      	str	r5, [sp, #12]
 8024752:	9300      	str	r3, [sp, #0]
 8024754:	f104 0310 	add.w	r3, r4, #16
 8024758:	9602      	str	r6, [sp, #8]
 802475a:	f7ff ff41 	bl	80245e0 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802475e:	4607      	mov	r7, r0
 8024760:	b170      	cbz	r0, 8024780 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8024762:	2301      	movs	r3, #1
 8024764:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8024768:	9a03      	ldr	r2, [sp, #12]
 802476a:	9b02      	ldr	r3, [sp, #8]
 802476c:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8024770:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8024774:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 8024778:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 802477c:	b005      	add	sp, #20
 802477e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024780:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8024784:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 8024788:	b92b      	cbnz	r3, 8024796 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802478a:	4632      	mov	r2, r6
 802478c:	4629      	mov	r1, r5
 802478e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8024792:	f000 ffb5 	bl	8025700 <_ZN8touchgfx7Outline6moveToEii>
 8024796:	2300      	movs	r3, #0
 8024798:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802479c:	2301      	movs	r3, #1
 802479e:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80247a2:	e7e1      	b.n	8024768 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

080247a4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 80247a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247a8:	4604      	mov	r4, r0
 80247aa:	b087      	sub	sp, #28
 80247ac:	9105      	str	r1, [sp, #20]
 80247ae:	f001 f8ec 	bl	802598a <_ZN8touchgfx7Outline8getCellsEv>
 80247b2:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80247b6:	4605      	mov	r5, r0
 80247b8:	f1b9 0f00 	cmp.w	r9, #0
 80247bc:	d103      	bne.n	80247c6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 80247be:	2001      	movs	r0, #1
 80247c0:	b007      	add	sp, #28
 80247c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247c6:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 80247ca:	2e00      	cmp	r6, #0
 80247cc:	d139      	bne.n	8024842 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 80247ce:	f104 0848 	add.w	r8, r4, #72	; 0x48
 80247d2:	f105 0708 	add.w	r7, r5, #8
 80247d6:	4640      	mov	r0, r8
 80247d8:	f001 f919 	bl	8025a0e <_ZN8touchgfx8Scanline5resetEv>
 80247dc:	f109 33ff 	add.w	r3, r9, #4294967295
 80247e0:	9303      	str	r3, [sp, #12]
 80247e2:	f9b5 b000 	ldrsh.w	fp, [r5]
 80247e6:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 80247ea:	46da      	mov	sl, fp
 80247ec:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80247f0:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 80247f4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80247f8:	9b03      	ldr	r3, [sp, #12]
 80247fa:	4416      	add	r6, r2
 80247fc:	9504      	str	r5, [sp, #16]
 80247fe:	463d      	mov	r5, r7
 8024800:	3b01      	subs	r3, #1
 8024802:	9303      	str	r3, [sp, #12]
 8024804:	3301      	adds	r3, #1
 8024806:	d01e      	beq.n	8024846 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8024808:	3708      	adds	r7, #8
 802480a:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802480e:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8024812:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8024816:	4290      	cmp	r0, r2
 8024818:	d11e      	bne.n	8024858 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802481a:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802481e:	4411      	add	r1, r2
 8024820:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8024824:	e7e8      	b.n	80247f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8024826:	1c91      	adds	r1, r2, #2
 8024828:	f04f 0301 	mov.w	r3, #1
 802482c:	65e1      	str	r1, [r4, #92]	; 0x5c
 802482e:	8053      	strh	r3, [r2, #2]
 8024830:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8024832:	1c91      	adds	r1, r2, #2
 8024834:	65a1      	str	r1, [r4, #88]	; 0x58
 8024836:	f8a2 b002 	strh.w	fp, [r2, #2]
 802483a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802483c:	3201      	adds	r2, #1
 802483e:	6562      	str	r2, [r4, #84]	; 0x54
 8024840:	e03a      	b.n	80248b8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8024842:	2000      	movs	r0, #0
 8024844:	e7bc      	b.n	80247c0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8024846:	b951      	cbnz	r1, 802485e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8024848:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802484a:	2b00      	cmp	r3, #0
 802484c:	d0b7      	beq.n	80247be <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802484e:	4641      	mov	r1, r8
 8024850:	9805      	ldr	r0, [sp, #20]
 8024852:	f7ff fd59 	bl	8024308 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024856:	e7b2      	b.n	80247be <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8024858:	2900      	cmp	r1, #0
 802485a:	d035      	beq.n	80248c8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802485c:	9504      	str	r5, [sp, #16]
 802485e:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8024862:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8024866:	f7ff fd3b 	bl	80242e0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802486a:	4605      	mov	r5, r0
 802486c:	b330      	cbz	r0, 80248bc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802486e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024870:	b182      	cbz	r2, 8024894 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024872:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8024874:	4591      	cmp	r9, r2
 8024876:	d00d      	beq.n	8024894 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8024878:	4641      	mov	r1, r8
 802487a:	9805      	ldr	r0, [sp, #20]
 802487c:	f7ff fd44 	bl	8024308 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8024880:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024884:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8024886:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802488a:	65e2      	str	r2, [r4, #92]	; 0x5c
 802488c:	2300      	movs	r3, #0
 802488e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024890:	6563      	str	r3, [r4, #84]	; 0x54
 8024892:	65a2      	str	r2, [r4, #88]	; 0x58
 8024894:	f1bb 0f00 	cmp.w	fp, #0
 8024898:	db10      	blt.n	80248bc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802489a:	f7f2 fd81 	bl	80173a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802489e:	4583      	cmp	fp, r0
 80248a0:	da0c      	bge.n	80248bc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80248a2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80248a4:	f802 500b 	strb.w	r5, [r2, fp]
 80248a8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80248aa:	3201      	adds	r2, #1
 80248ac:	4593      	cmp	fp, r2
 80248ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80248b0:	d1b9      	bne.n	8024826 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 80248b2:	8811      	ldrh	r1, [r2, #0]
 80248b4:	3101      	adds	r1, #1
 80248b6:	8011      	strh	r1, [r2, #0]
 80248b8:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 80248bc:	9b03      	ldr	r3, [sp, #12]
 80248be:	3301      	adds	r3, #1
 80248c0:	d0c2      	beq.n	8024848 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 80248c2:	f10b 0a01 	add.w	sl, fp, #1
 80248c6:	9d04      	ldr	r5, [sp, #16]
 80248c8:	f9b5 3000 	ldrsh.w	r3, [r5]
 80248cc:	4553      	cmp	r3, sl
 80248ce:	dd88      	ble.n	80247e2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80248d0:	01b1      	lsls	r1, r6, #6
 80248d2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80248d6:	f7ff fd03 	bl	80242e0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 80248da:	4683      	mov	fp, r0
 80248dc:	2800      	cmp	r0, #0
 80248de:	d080      	beq.n	80247e2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 80248e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80248e2:	b183      	cbz	r3, 8024906 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80248e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80248e6:	4599      	cmp	r9, r3
 80248e8:	d00d      	beq.n	8024906 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 80248ea:	4641      	mov	r1, r8
 80248ec:	9805      	ldr	r0, [sp, #20]
 80248ee:	f7ff fd0b 	bl	8024308 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80248f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80248f6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80248fa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80248fc:	65e3      	str	r3, [r4, #92]	; 0x5c
 80248fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024900:	65a3      	str	r3, [r4, #88]	; 0x58
 8024902:	2300      	movs	r3, #0
 8024904:	6563      	str	r3, [r4, #84]	; 0x54
 8024906:	f9b5 3000 	ldrsh.w	r3, [r5]
 802490a:	464a      	mov	r2, r9
 802490c:	f8cd b000 	str.w	fp, [sp]
 8024910:	4651      	mov	r1, sl
 8024912:	eba3 030a 	sub.w	r3, r3, sl
 8024916:	4640      	mov	r0, r8
 8024918:	f001 f8a4 	bl	8025a64 <_ZN8touchgfx8Scanline7addSpanEiijj>
 802491c:	e761      	b.n	80247e2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802491e <_ZN8touchgfx6Canvas6renderEh>:
 802491e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024920:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8024924:	4604      	mov	r4, r0
 8024926:	460d      	mov	r5, r1
 8024928:	b913      	cbnz	r3, 8024930 <_ZN8touchgfx6Canvas6renderEh+0x12>
 802492a:	2001      	movs	r0, #1
 802492c:	b003      	add	sp, #12
 802492e:	bd30      	pop	{r4, r5, pc}
 8024930:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8024934:	2b00      	cmp	r3, #0
 8024936:	d12f      	bne.n	8024998 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 8024938:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802493c:	2b00      	cmp	r3, #0
 802493e:	d0f4      	beq.n	802492a <_ZN8touchgfx6Canvas6renderEh+0xc>
 8024940:	6840      	ldr	r0, [r0, #4]
 8024942:	6803      	ldr	r3, [r0, #0]
 8024944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024946:	4798      	blx	r3
 8024948:	fb10 f105 	smulbb	r1, r0, r5
 802494c:	b288      	uxth	r0, r1
 802494e:	1c41      	adds	r1, r0, #1
 8024950:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024954:	120d      	asrs	r5, r1, #8
 8024956:	d0e8      	beq.n	802492a <_ZN8touchgfx6Canvas6renderEh+0xc>
 8024958:	4620      	mov	r0, r4
 802495a:	f7ff fec0 	bl	80246de <_ZN8touchgfx6Canvas5closeEv>
 802495e:	6860      	ldr	r0, [r4, #4]
 8024960:	6803      	ldr	r3, [r0, #0]
 8024962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024964:	4798      	blx	r3
 8024966:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 802496a:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 802496e:	8082      	strh	r2, [r0, #4]
 8024970:	80c3      	strh	r3, [r0, #6]
 8024972:	6860      	ldr	r0, [r4, #4]
 8024974:	6803      	ldr	r3, [r0, #0]
 8024976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024978:	4798      	blx	r3
 802497a:	7205      	strb	r5, [r0, #8]
 802497c:	6860      	ldr	r0, [r4, #4]
 802497e:	6803      	ldr	r3, [r0, #0]
 8024980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024982:	4798      	blx	r3
 8024984:	f104 0318 	add.w	r3, r4, #24
 8024988:	4669      	mov	r1, sp
 802498a:	e9cd 3000 	strd	r3, r0, [sp]
 802498e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8024992:	f7ff ff07 	bl	80247a4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8024996:	e7c9      	b.n	802492c <_ZN8touchgfx6Canvas6renderEh+0xe>
 8024998:	2000      	movs	r0, #0
 802499a:	e7c7      	b.n	802492c <_ZN8touchgfx6Canvas6renderEh+0xe>

0802499c <_ZN8touchgfx6CanvasD1Ev>:
 802499c:	b538      	push	{r3, r4, r5, lr}
 802499e:	4605      	mov	r5, r0
 80249a0:	4b08      	ldr	r3, [pc, #32]	; (80249c4 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 80249a2:	4604      	mov	r4, r0
 80249a4:	f845 3b30 	str.w	r3, [r5], #48
 80249a8:	4b07      	ldr	r3, [pc, #28]	; (80249c8 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 80249aa:	6818      	ldr	r0, [r3, #0]
 80249ac:	6803      	ldr	r3, [r0, #0]
 80249ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80249b0:	4798      	blx	r3
 80249b2:	4628      	mov	r0, r5
 80249b4:	f000 f814 	bl	80249e0 <_ZN8touchgfx7OutlineD1Ev>
 80249b8:	f104 0018 	add.w	r0, r4, #24
 80249bc:	f001 f88b 	bl	8025ad6 <_ZN8touchgfx15RenderingBufferD1Ev>
 80249c0:	4620      	mov	r0, r4
 80249c2:	bd38      	pop	{r3, r4, r5, pc}
 80249c4:	0802b860 	.word	0x0802b860
 80249c8:	2400c8a4 	.word	0x2400c8a4

080249cc <_ZN8touchgfx6CanvasD0Ev>:
 80249cc:	b510      	push	{r4, lr}
 80249ce:	4604      	mov	r4, r0
 80249d0:	f7ff ffe4 	bl	802499c <_ZN8touchgfx6CanvasD1Ev>
 80249d4:	21bc      	movs	r1, #188	; 0xbc
 80249d6:	4620      	mov	r0, r4
 80249d8:	f001 f89f 	bl	8025b1a <_ZdlPvj>
 80249dc:	4620      	mov	r0, r4
 80249de:	bd10      	pop	{r4, pc}

080249e0 <_ZN8touchgfx7OutlineD1Ev>:
 80249e0:	4770      	bx	lr

080249e2 <_ZN8touchgfx7OutlineD0Ev>:
 80249e2:	b510      	push	{r4, lr}
 80249e4:	4604      	mov	r4, r0
 80249e6:	2148      	movs	r1, #72	; 0x48
 80249e8:	f001 f897 	bl	8025b1a <_ZdlPvj>
 80249ec:	4620      	mov	r0, r4
 80249ee:	bd10      	pop	{r4, pc}

080249f0 <_ZN8touchgfx7Outline5resetEv>:
 80249f0:	b510      	push	{r4, lr}
 80249f2:	4604      	mov	r4, r0
 80249f4:	f7f2 fcec 	bl	80173d0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80249f8:	60e0      	str	r0, [r4, #12]
 80249fa:	f7f2 fcef 	bl	80173dc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80249fe:	68e3      	ldr	r3, [r4, #12]
 8024a00:	2200      	movs	r2, #0
 8024a02:	08c0      	lsrs	r0, r0, #3
 8024a04:	6123      	str	r3, [r4, #16]
 8024a06:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024a0a:	6060      	str	r0, [r4, #4]
 8024a0c:	82a3      	strh	r3, [r4, #20]
 8024a0e:	82e3      	strh	r3, [r4, #22]
 8024a10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024a12:	60a2      	str	r2, [r4, #8]
 8024a14:	f023 0301 	bic.w	r3, r3, #1
 8024a18:	8322      	strh	r2, [r4, #24]
 8024a1a:	8362      	strh	r2, [r4, #26]
 8024a1c:	f043 0302 	orr.w	r3, r3, #2
 8024a20:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024a24:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024a26:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8024a2a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8024a2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024a32:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8024a36:	bd10      	pop	{r4, pc}

08024a38 <_ZN8touchgfx7OutlineC1Ev>:
 8024a38:	4b0f      	ldr	r3, [pc, #60]	; (8024a78 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8024a3a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024a3e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8024a42:	b510      	push	{r4, lr}
 8024a44:	6003      	str	r3, [r0, #0]
 8024a46:	2300      	movs	r3, #0
 8024a48:	4604      	mov	r4, r0
 8024a4a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8024a4e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8024a52:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024a56:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8024a5a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8024a5e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8024a62:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8024a66:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8024a6a:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8024a6e:	f7ff ffbf 	bl	80249f0 <_ZN8touchgfx7Outline5resetEv>
 8024a72:	4620      	mov	r0, r4
 8024a74:	bd10      	pop	{r4, pc}
 8024a76:	bf00      	nop
 8024a78:	0802b930 	.word	0x0802b930

08024a7c <_ZN8touchgfx7Outline10renderLineEiiii>:
 8024a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a80:	b095      	sub	sp, #84	; 0x54
 8024a82:	4604      	mov	r4, r0
 8024a84:	1155      	asrs	r5, r2, #5
 8024a86:	f002 061f 	and.w	r6, r2, #31
 8024a8a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8024a8c:	1157      	asrs	r7, r2, #5
 8024a8e:	9304      	str	r3, [sp, #16]
 8024a90:	1153      	asrs	r3, r2, #5
 8024a92:	9300      	str	r3, [sp, #0]
 8024a94:	1143      	asrs	r3, r0, #5
 8024a96:	930c      	str	r3, [sp, #48]	; 0x30
 8024a98:	f000 031f 	and.w	r3, r0, #31
 8024a9c:	9303      	str	r3, [sp, #12]
 8024a9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024aa0:	42ab      	cmp	r3, r5
 8024aa2:	bfc8      	it	gt
 8024aa4:	462b      	movgt	r3, r5
 8024aa6:	ea4f 1562 	mov.w	r5, r2, asr #5
 8024aaa:	bfc8      	it	gt
 8024aac:	6323      	strgt	r3, [r4, #48]	; 0x30
 8024aae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024ab0:	42ab      	cmp	r3, r5
 8024ab2:	bfd8      	it	le
 8024ab4:	462b      	movle	r3, r5
 8024ab6:	ea4f 1560 	mov.w	r5, r0, asr #5
 8024aba:	bfdc      	itt	le
 8024abc:	3301      	addle	r3, #1
 8024abe:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024ac0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024ac2:	42ab      	cmp	r3, r5
 8024ac4:	bfc8      	it	gt
 8024ac6:	462b      	movgt	r3, r5
 8024ac8:	ea4f 1560 	mov.w	r5, r0, asr #5
 8024acc:	bfc8      	it	gt
 8024ace:	6323      	strgt	r3, [r4, #48]	; 0x30
 8024ad0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024ad2:	42ab      	cmp	r3, r5
 8024ad4:	bfd8      	it	le
 8024ad6:	462b      	movle	r3, r5
 8024ad8:	ea4f 1561 	mov.w	r5, r1, asr #5
 8024adc:	bfdc      	itt	le
 8024ade:	3301      	addle	r3, #1
 8024ae0:	63a3      	strle	r3, [r4, #56]	; 0x38
 8024ae2:	9b04      	ldr	r3, [sp, #16]
 8024ae4:	eba3 0a01 	sub.w	sl, r3, r1
 8024ae8:	1143      	asrs	r3, r0, #5
 8024aea:	429f      	cmp	r7, r3
 8024aec:	f040 811d 	bne.w	8024d2a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 8024af0:	9b04      	ldr	r3, [sp, #16]
 8024af2:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8024af6:	9b03      	ldr	r3, [sp, #12]
 8024af8:	429e      	cmp	r6, r3
 8024afa:	d131      	bne.n	8024b60 <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 8024afc:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024b00:	fa0f fb8b 	sxth.w	fp, fp
 8024b04:	f9bd 2000 	ldrsh.w	r2, [sp]
 8024b08:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024b0c:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 8024b10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024b14:	4281      	cmp	r1, r0
 8024b16:	f000 80e6 	beq.w	8024ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8024b1a:	8b60      	ldrh	r0, [r4, #26]
 8024b1c:	8b21      	ldrh	r1, [r4, #24]
 8024b1e:	4301      	orrs	r1, r0
 8024b20:	d00b      	beq.n	8024b3a <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024b22:	2b00      	cmp	r3, #0
 8024b24:	db09      	blt.n	8024b3a <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024b26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024b28:	428b      	cmp	r3, r1
 8024b2a:	da06      	bge.n	8024b3a <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024b2c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024b30:	4299      	cmp	r1, r3
 8024b32:	d308      	bcc.n	8024b46 <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 8024b34:	2301      	movs	r3, #1
 8024b36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024b3a:	f8a4 b014 	strh.w	fp, [r4, #20]
 8024b3e:	2300      	movs	r3, #0
 8024b40:	82e2      	strh	r2, [r4, #22]
 8024b42:	8323      	strh	r3, [r4, #24]
 8024b44:	e01f      	b.n	8024b86 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8024b46:	f104 0314 	add.w	r3, r4, #20
 8024b4a:	6925      	ldr	r5, [r4, #16]
 8024b4c:	cb03      	ldmia	r3!, {r0, r1}
 8024b4e:	6028      	str	r0, [r5, #0]
 8024b50:	6069      	str	r1, [r5, #4]
 8024b52:	6923      	ldr	r3, [r4, #16]
 8024b54:	3308      	adds	r3, #8
 8024b56:	6123      	str	r3, [r4, #16]
 8024b58:	68a3      	ldr	r3, [r4, #8]
 8024b5a:	3301      	adds	r3, #1
 8024b5c:	60a3      	str	r3, [r4, #8]
 8024b5e:	e7ec      	b.n	8024b3a <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 8024b60:	9b04      	ldr	r3, [sp, #16]
 8024b62:	45ab      	cmp	fp, r5
 8024b64:	f001 011f 	and.w	r1, r1, #31
 8024b68:	8b20      	ldrh	r0, [r4, #24]
 8024b6a:	f003 031f 	and.w	r3, r3, #31
 8024b6e:	8b62      	ldrh	r2, [r4, #26]
 8024b70:	9305      	str	r3, [sp, #20]
 8024b72:	9b03      	ldr	r3, [sp, #12]
 8024b74:	eba3 0306 	sub.w	r3, r3, r6
 8024b78:	d107      	bne.n	8024b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 8024b7a:	4418      	add	r0, r3
 8024b7c:	8320      	strh	r0, [r4, #24]
 8024b7e:	9805      	ldr	r0, [sp, #20]
 8024b80:	4401      	add	r1, r0
 8024b82:	fb03 2301 	mla	r3, r3, r1, r2
 8024b86:	8363      	strh	r3, [r4, #26]
 8024b88:	e0ad      	b.n	8024ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8024b8a:	f1ba 0f00 	cmp.w	sl, #0
 8024b8e:	db33      	blt.n	8024bf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 8024b90:	2701      	movs	r7, #1
 8024b92:	f1c1 0c20 	rsb	ip, r1, #32
 8024b96:	9702      	str	r7, [sp, #8]
 8024b98:	2720      	movs	r7, #32
 8024b9a:	fb03 f30c 	mul.w	r3, r3, ip
 8024b9e:	9701      	str	r7, [sp, #4]
 8024ba0:	9f01      	ldr	r7, [sp, #4]
 8024ba2:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024ba6:	4439      	add	r1, r7
 8024ba8:	fb93 fcfa 	sdiv	ip, r3, sl
 8024bac:	fb0a 331c 	mls	r3, sl, ip, r3
 8024bb0:	2b00      	cmp	r3, #0
 8024bb2:	bfbc      	itt	lt
 8024bb4:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8024bb8:	4453      	addlt	r3, sl
 8024bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8024bbe:	9a02      	ldr	r2, [sp, #8]
 8024bc0:	4460      	add	r0, ip
 8024bc2:	4415      	add	r5, r2
 8024bc4:	f9bd 2000 	ldrsh.w	r2, [sp]
 8024bc8:	b200      	sxth	r0, r0
 8024bca:	0417      	lsls	r7, r2, #16
 8024bcc:	9200      	str	r2, [sp, #0]
 8024bce:	fa0f fe85 	sxth.w	lr, r5
 8024bd2:	8320      	strh	r0, [r4, #24]
 8024bd4:	9704      	str	r7, [sp, #16]
 8024bd6:	b209      	sxth	r1, r1
 8024bd8:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 8024bdc:	9a04      	ldr	r2, [sp, #16]
 8024bde:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 8024be2:	8361      	strh	r1, [r4, #26]
 8024be4:	eb0e 0902 	add.w	r9, lr, r2
 8024be8:	454f      	cmp	r7, r9
 8024bea:	d10d      	bne.n	8024c08 <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 8024bec:	4ba0      	ldr	r3, [pc, #640]	; (8024e70 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 8024bee:	2177      	movs	r1, #119	; 0x77
 8024bf0:	4aa0      	ldr	r2, [pc, #640]	; (8024e74 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 8024bf2:	48a1      	ldr	r0, [pc, #644]	; (8024e78 <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 8024bf4:	f000 ffc0 	bl	8025b78 <__assert_func>
 8024bf8:	f04f 37ff 	mov.w	r7, #4294967295
 8024bfc:	434b      	muls	r3, r1
 8024bfe:	f1ca 0a00 	rsb	sl, sl, #0
 8024c02:	9702      	str	r7, [sp, #8]
 8024c04:	2700      	movs	r7, #0
 8024c06:	e7ca      	b.n	8024b9e <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 8024c08:	ea50 0201 	orrs.w	r2, r0, r1
 8024c0c:	d00c      	beq.n	8024c28 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024c0e:	f1b8 0f00 	cmp.w	r8, #0
 8024c12:	db09      	blt.n	8024c28 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024c14:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024c16:	4588      	cmp	r8, r1
 8024c18:	da06      	bge.n	8024c28 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024c1a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024c1e:	4288      	cmp	r0, r1
 8024c20:	d364      	bcc.n	8024cec <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8024c22:	2101      	movs	r1, #1
 8024c24:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024c28:	2100      	movs	r1, #0
 8024c2a:	9a00      	ldr	r2, [sp, #0]
 8024c2c:	45ab      	cmp	fp, r5
 8024c2e:	f8a4 e014 	strh.w	lr, [r4, #20]
 8024c32:	82e2      	strh	r2, [r4, #22]
 8024c34:	4466      	add	r6, ip
 8024c36:	8321      	strh	r1, [r4, #24]
 8024c38:	8361      	strh	r1, [r4, #26]
 8024c3a:	d04b      	beq.n	8024cd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 8024c3c:	9a03      	ldr	r2, [sp, #12]
 8024c3e:	eba3 030a 	sub.w	r3, r3, sl
 8024c42:	f04f 0800 	mov.w	r8, #0
 8024c46:	1b91      	subs	r1, r2, r6
 8024c48:	448c      	add	ip, r1
 8024c4a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8024c4e:	fb9c f7fa 	sdiv	r7, ip, sl
 8024c52:	fb0a cc17 	mls	ip, sl, r7, ip
 8024c56:	f1bc 0f00 	cmp.w	ip, #0
 8024c5a:	bfbc      	itt	lt
 8024c5c:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8024c60:	44d4      	addlt	ip, sl
 8024c62:	1c7a      	adds	r2, r7, #1
 8024c64:	9207      	str	r2, [sp, #28]
 8024c66:	eb13 030c 	adds.w	r3, r3, ip
 8024c6a:	9a02      	ldr	r2, [sp, #8]
 8024c6c:	bf54      	ite	pl
 8024c6e:	9807      	ldrpl	r0, [sp, #28]
 8024c70:	4638      	movmi	r0, r7
 8024c72:	4415      	add	r5, r2
 8024c74:	9a04      	ldr	r2, [sp, #16]
 8024c76:	fa0f fe80 	sxth.w	lr, r0
 8024c7a:	4406      	add	r6, r0
 8024c7c:	ea4f 1140 	mov.w	r1, r0, lsl #5
 8024c80:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024c84:	fa0f f985 	sxth.w	r9, r5
 8024c88:	bf58      	it	pl
 8024c8a:	eba3 030a 	subpl.w	r3, r3, sl
 8024c8e:	4410      	add	r0, r2
 8024c90:	b209      	sxth	r1, r1
 8024c92:	444a      	add	r2, r9
 8024c94:	f8a4 e018 	strh.w	lr, [r4, #24]
 8024c98:	8361      	strh	r1, [r4, #26]
 8024c9a:	4290      	cmp	r0, r2
 8024c9c:	d0a6      	beq.n	8024bec <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024c9e:	ea5e 0201 	orrs.w	r2, lr, r1
 8024ca2:	d00d      	beq.n	8024cc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8024ca4:	9a00      	ldr	r2, [sp, #0]
 8024ca6:	2a00      	cmp	r2, #0
 8024ca8:	db0a      	blt.n	8024cc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8024caa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024cac:	428a      	cmp	r2, r1
 8024cae:	da07      	bge.n	8024cc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8024cb0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024cb4:	4288      	cmp	r0, r1
 8024cb6:	d329      	bcc.n	8024d0c <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 8024cb8:	f04f 0201 	mov.w	r2, #1
 8024cbc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024cc0:	9a00      	ldr	r2, [sp, #0]
 8024cc2:	45ab      	cmp	fp, r5
 8024cc4:	f8a4 9014 	strh.w	r9, [r4, #20]
 8024cc8:	82e2      	strh	r2, [r4, #22]
 8024cca:	f8a4 8018 	strh.w	r8, [r4, #24]
 8024cce:	f8a4 801a 	strh.w	r8, [r4, #26]
 8024cd2:	d1c8      	bne.n	8024c66 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 8024cd4:	9b03      	ldr	r3, [sp, #12]
 8024cd6:	9a01      	ldr	r2, [sp, #4]
 8024cd8:	1b9e      	subs	r6, r3, r6
 8024cda:	9b05      	ldr	r3, [sp, #20]
 8024cdc:	3320      	adds	r3, #32
 8024cde:	8326      	strh	r6, [r4, #24]
 8024ce0:	1a9b      	subs	r3, r3, r2
 8024ce2:	435e      	muls	r6, r3
 8024ce4:	8366      	strh	r6, [r4, #26]
 8024ce6:	b015      	add	sp, #84	; 0x54
 8024ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cec:	f104 0714 	add.w	r7, r4, #20
 8024cf0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8024cf4:	cf03      	ldmia	r7!, {r0, r1}
 8024cf6:	f8c8 0000 	str.w	r0, [r8]
 8024cfa:	f8c8 1004 	str.w	r1, [r8, #4]
 8024cfe:	6921      	ldr	r1, [r4, #16]
 8024d00:	3108      	adds	r1, #8
 8024d02:	6121      	str	r1, [r4, #16]
 8024d04:	68a1      	ldr	r1, [r4, #8]
 8024d06:	3101      	adds	r1, #1
 8024d08:	60a1      	str	r1, [r4, #8]
 8024d0a:	e78d      	b.n	8024c28 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 8024d0c:	f104 0e14 	add.w	lr, r4, #20
 8024d10:	6922      	ldr	r2, [r4, #16]
 8024d12:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024d16:	9206      	str	r2, [sp, #24]
 8024d18:	6010      	str	r0, [r2, #0]
 8024d1a:	6051      	str	r1, [r2, #4]
 8024d1c:	6921      	ldr	r1, [r4, #16]
 8024d1e:	3108      	adds	r1, #8
 8024d20:	6121      	str	r1, [r4, #16]
 8024d22:	68a1      	ldr	r1, [r4, #8]
 8024d24:	3101      	adds	r1, #1
 8024d26:	60a1      	str	r1, [r4, #8]
 8024d28:	e7ca      	b.n	8024cc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 8024d2a:	eba0 0b02 	sub.w	fp, r0, r2
 8024d2e:	f1ba 0f00 	cmp.w	sl, #0
 8024d32:	f040 80a3 	bne.w	8024e7c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8024d36:	f1bb 0f00 	cmp.w	fp, #0
 8024d3a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024d3e:	8b62      	ldrh	r2, [r4, #26]
 8024d40:	b22d      	sxth	r5, r5
 8024d42:	bfa8      	it	ge
 8024d44:	f04f 0a20 	movge.w	sl, #32
 8024d48:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8024d4c:	8b21      	ldrh	r1, [r4, #24]
 8024d4e:	bfb8      	it	lt
 8024d50:	f04f 39ff 	movlt.w	r9, #4294967295
 8024d54:	ebaa 0606 	sub.w	r6, sl, r6
 8024d58:	bfa8      	it	ge
 8024d5a:	f04f 0901 	movge.w	r9, #1
 8024d5e:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8024d62:	4431      	add	r1, r6
 8024d64:	fb06 2603 	mla	r6, r6, r3, r2
 8024d68:	9a00      	ldr	r2, [sp, #0]
 8024d6a:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 8024d6e:	b209      	sxth	r1, r1
 8024d70:	444a      	add	r2, r9
 8024d72:	b236      	sxth	r6, r6
 8024d74:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 8024d78:	8321      	strh	r1, [r4, #24]
 8024d7a:	b217      	sxth	r7, r2
 8024d7c:	8366      	strh	r6, [r4, #26]
 8024d7e:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 8024d82:	45f4      	cmp	ip, lr
 8024d84:	f43f af32 	beq.w	8024bec <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024d88:	4331      	orrs	r1, r6
 8024d8a:	d00b      	beq.n	8024da4 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8024d8c:	2800      	cmp	r0, #0
 8024d8e:	db09      	blt.n	8024da4 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8024d90:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024d92:	4288      	cmp	r0, r1
 8024d94:	da06      	bge.n	8024da4 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8024d96:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024d9a:	4288      	cmp	r0, r1
 8024d9c:	d33b      	bcc.n	8024e16 <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 8024d9e:	2101      	movs	r1, #1
 8024da0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024da4:	f1aa 0610 	sub.w	r6, sl, #16
 8024da8:	82e7      	strh	r7, [r4, #22]
 8024daa:	2700      	movs	r7, #0
 8024dac:	82a5      	strh	r5, [r4, #20]
 8024dae:	0076      	lsls	r6, r6, #1
 8024db0:	8327      	strh	r7, [r4, #24]
 8024db2:	fb06 fc03 	mul.w	ip, r6, r3
 8024db6:	b236      	sxth	r6, r6
 8024db8:	8367      	strh	r7, [r4, #26]
 8024dba:	fa0f fc8c 	sxth.w	ip, ip
 8024dbe:	ea46 010c 	orr.w	r1, r6, ip
 8024dc2:	9100      	str	r1, [sp, #0]
 8024dc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024dc6:	428a      	cmp	r2, r1
 8024dc8:	d046      	beq.n	8024e58 <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 8024dca:	444a      	add	r2, r9
 8024dcc:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8024dd0:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8024dd4:	fa0f f882 	sxth.w	r8, r2
 8024dd8:	8326      	strh	r6, [r4, #24]
 8024dda:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8024dde:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024de2:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 8024de6:	4570      	cmp	r0, lr
 8024de8:	f43f af00 	beq.w	8024bec <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8024dec:	9800      	ldr	r0, [sp, #0]
 8024dee:	b160      	cbz	r0, 8024e0a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024df0:	2900      	cmp	r1, #0
 8024df2:	db0a      	blt.n	8024e0a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024df4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8024df6:	4281      	cmp	r1, r0
 8024df8:	da07      	bge.n	8024e0a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024dfa:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024dfe:	4288      	cmp	r0, r1
 8024e00:	d319      	bcc.n	8024e36 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 8024e02:	f04f 0101 	mov.w	r1, #1
 8024e06:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024e0a:	82a5      	strh	r5, [r4, #20]
 8024e0c:	f8a4 8016 	strh.w	r8, [r4, #22]
 8024e10:	8327      	strh	r7, [r4, #24]
 8024e12:	8367      	strh	r7, [r4, #26]
 8024e14:	e7d6      	b.n	8024dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 8024e16:	f104 0614 	add.w	r6, r4, #20
 8024e1a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8024e1e:	ce03      	ldmia	r6!, {r0, r1}
 8024e20:	f8cc 0000 	str.w	r0, [ip]
 8024e24:	f8cc 1004 	str.w	r1, [ip, #4]
 8024e28:	6921      	ldr	r1, [r4, #16]
 8024e2a:	3108      	adds	r1, #8
 8024e2c:	6121      	str	r1, [r4, #16]
 8024e2e:	68a1      	ldr	r1, [r4, #8]
 8024e30:	3101      	adds	r1, #1
 8024e32:	60a1      	str	r1, [r4, #8]
 8024e34:	e7b6      	b.n	8024da4 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 8024e36:	f104 0e14 	add.w	lr, r4, #20
 8024e3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8024e3e:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024e42:	f8cb 0000 	str.w	r0, [fp]
 8024e46:	f8cb 1004 	str.w	r1, [fp, #4]
 8024e4a:	6921      	ldr	r1, [r4, #16]
 8024e4c:	3108      	adds	r1, #8
 8024e4e:	6121      	str	r1, [r4, #16]
 8024e50:	68a1      	ldr	r1, [r4, #8]
 8024e52:	3101      	adds	r1, #1
 8024e54:	60a1      	str	r1, [r4, #8]
 8024e56:	e7d8      	b.n	8024e0a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8024e58:	9a03      	ldr	r2, [sp, #12]
 8024e5a:	8b61      	ldrh	r1, [r4, #26]
 8024e5c:	f1a2 0e20 	sub.w	lr, r2, #32
 8024e60:	8b22      	ldrh	r2, [r4, #24]
 8024e62:	44d6      	add	lr, sl
 8024e64:	4472      	add	r2, lr
 8024e66:	fb0e 1303 	mla	r3, lr, r3, r1
 8024e6a:	8322      	strh	r2, [r4, #24]
 8024e6c:	e68b      	b.n	8024b86 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 8024e6e:	bf00      	nop
 8024e70:	0802b8b7 	.word	0x0802b8b7
 8024e74:	0802b938 	.word	0x0802b938
 8024e78:	0802b8e8 	.word	0x0802b8e8
 8024e7c:	f1bb 0f00 	cmp.w	fp, #0
 8024e80:	f2c0 8124 	blt.w	80250cc <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 8024e84:	2201      	movs	r2, #1
 8024e86:	f1c6 0320 	rsb	r3, r6, #32
 8024e8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8024e8c:	2220      	movs	r2, #32
 8024e8e:	fb0a f303 	mul.w	r3, sl, r3
 8024e92:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024e96:	9202      	str	r2, [sp, #8]
 8024e98:	fb93 fcfb 	sdiv	ip, r3, fp
 8024e9c:	fb0b 331c 	mls	r3, fp, ip, r3
 8024ea0:	2b00      	cmp	r3, #0
 8024ea2:	9308      	str	r3, [sp, #32]
 8024ea4:	bfbe      	ittt	lt
 8024ea6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8024eaa:	445b      	addlt	r3, fp
 8024eac:	9308      	strlt	r3, [sp, #32]
 8024eae:	eb0c 0301 	add.w	r3, ip, r1
 8024eb2:	9301      	str	r3, [sp, #4]
 8024eb4:	115b      	asrs	r3, r3, #5
 8024eb6:	9305      	str	r3, [sp, #20]
 8024eb8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8024ebc:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 8024ec0:	461f      	mov	r7, r3
 8024ec2:	9b02      	ldr	r3, [sp, #8]
 8024ec4:	42b3      	cmp	r3, r6
 8024ec6:	f040 8117 	bne.w	80250f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8024eca:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8024ece:	f9bd 3000 	ldrsh.w	r3, [sp]
 8024ed2:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8024ed6:	42b9      	cmp	r1, r7
 8024ed8:	d016      	beq.n	8024f08 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8024eda:	8b60      	ldrh	r0, [r4, #26]
 8024edc:	8b21      	ldrh	r1, [r4, #24]
 8024ede:	4301      	orrs	r1, r0
 8024ee0:	d00d      	beq.n	8024efe <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8024ee2:	f1b8 0f00 	cmp.w	r8, #0
 8024ee6:	db0a      	blt.n	8024efe <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8024ee8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024eea:	4541      	cmp	r1, r8
 8024eec:	dd07      	ble.n	8024efe <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 8024eee:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024ef2:	4288      	cmp	r0, r1
 8024ef4:	f0c0 80f3 	bcc.w	80250de <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 8024ef8:	2101      	movs	r1, #1
 8024efa:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8024efe:	82e3      	strh	r3, [r4, #22]
 8024f00:	2300      	movs	r3, #0
 8024f02:	82a2      	strh	r2, [r4, #20]
 8024f04:	8323      	strh	r3, [r4, #24]
 8024f06:	8363      	strh	r3, [r4, #26]
 8024f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f0a:	9a00      	ldr	r2, [sp, #0]
 8024f0c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024f10:	441a      	add	r2, r3
 8024f12:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024f16:	4691      	mov	r9, r2
 8024f18:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8024f1c:	fa0f f589 	sxth.w	r5, r9
 8024f20:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8024f24:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8024f28:	4281      	cmp	r1, r0
 8024f2a:	d015      	beq.n	8024f58 <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 8024f2c:	8b60      	ldrh	r0, [r4, #26]
 8024f2e:	8b21      	ldrh	r1, [r4, #24]
 8024f30:	4301      	orrs	r1, r0
 8024f32:	d00c      	beq.n	8024f4e <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8024f34:	2a00      	cmp	r2, #0
 8024f36:	db0a      	blt.n	8024f4e <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8024f38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024f3a:	428a      	cmp	r2, r1
 8024f3c:	da07      	bge.n	8024f4e <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 8024f3e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8024f42:	4291      	cmp	r1, r2
 8024f44:	f0c0 81ae 	bcc.w	80252a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 8024f48:	2201      	movs	r2, #1
 8024f4a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024f4e:	82a3      	strh	r3, [r4, #20]
 8024f50:	2300      	movs	r3, #0
 8024f52:	82e5      	strh	r5, [r4, #22]
 8024f54:	8323      	strh	r3, [r4, #24]
 8024f56:	8363      	strh	r3, [r4, #26]
 8024f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024f5a:	454b      	cmp	r3, r9
 8024f5c:	f000 808a 	beq.w	8025074 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 8024f60:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8024f64:	fb93 f2fb 	sdiv	r2, r3, fp
 8024f68:	fb0b 3312 	mls	r3, fp, r2, r3
 8024f6c:	9205      	str	r2, [sp, #20]
 8024f6e:	2b00      	cmp	r3, #0
 8024f70:	9307      	str	r3, [sp, #28]
 8024f72:	da04      	bge.n	8024f7e <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 8024f74:	1e53      	subs	r3, r2, #1
 8024f76:	9305      	str	r3, [sp, #20]
 8024f78:	9b07      	ldr	r3, [sp, #28]
 8024f7a:	445b      	add	r3, fp
 8024f7c:	9307      	str	r3, [sp, #28]
 8024f7e:	9b08      	ldr	r3, [sp, #32]
 8024f80:	f04f 0a00 	mov.w	sl, #0
 8024f84:	eba3 030b 	sub.w	r3, r3, fp
 8024f88:	9308      	str	r3, [sp, #32]
 8024f8a:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 8024f8e:	f1c3 0320 	rsb	r3, r3, #32
 8024f92:	930a      	str	r3, [sp, #40]	; 0x28
 8024f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f96:	9b02      	ldr	r3, [sp, #8]
 8024f98:	1a9b      	subs	r3, r3, r2
 8024f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8024f9c:	9902      	ldr	r1, [sp, #8]
 8024f9e:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8024fa2:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024fa6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024faa:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 8024fae:	189b      	adds	r3, r3, r2
 8024fb0:	9308      	str	r3, [sp, #32]
 8024fb2:	bf57      	itett	pl
 8024fb4:	eba3 030b 	subpl.w	r3, r3, fp
 8024fb8:	9b05      	ldrmi	r3, [sp, #20]
 8024fba:	9308      	strpl	r3, [sp, #32]
 8024fbc:	9b05      	ldrpl	r3, [sp, #20]
 8024fbe:	bf58      	it	pl
 8024fc0:	3301      	addpl	r3, #1
 8024fc2:	9300      	str	r3, [sp, #0]
 8024fc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024fc8:	4413      	add	r3, r2
 8024fca:	9301      	str	r3, [sp, #4]
 8024fcc:	115b      	asrs	r3, r3, #5
 8024fce:	9306      	str	r3, [sp, #24]
 8024fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024fd2:	428b      	cmp	r3, r1
 8024fd4:	f040 8180 	bne.w	80252d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8024fd8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8024fdc:	fa0f f389 	sxth.w	r3, r9
 8024fe0:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 8024fe4:	4541      	cmp	r1, r8
 8024fe6:	d017      	beq.n	8025018 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8024fe8:	8b60      	ldrh	r0, [r4, #26]
 8024fea:	8b21      	ldrh	r1, [r4, #24]
 8024fec:	4301      	orrs	r1, r0
 8024fee:	d00d      	beq.n	802500c <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8024ff0:	2e00      	cmp	r6, #0
 8024ff2:	db0b      	blt.n	802500c <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8024ff4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024ff6:	42b1      	cmp	r1, r6
 8024ff8:	dd08      	ble.n	802500c <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 8024ffa:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024ffe:	4288      	cmp	r0, r1
 8025000:	f0c0 815d 	bcc.w	80252be <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 8025004:	f04f 0101 	mov.w	r1, #1
 8025008:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802500c:	82a2      	strh	r2, [r4, #20]
 802500e:	82e3      	strh	r3, [r4, #22]
 8025010:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025014:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802501a:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802501e:	4499      	add	r9, r3
 8025020:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025024:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8025028:	fa0f f589 	sxth.w	r5, r9
 802502c:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8025030:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 8025034:	4281      	cmp	r1, r0
 8025036:	f43f add9 	beq.w	8024bec <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802503a:	8b60      	ldrh	r0, [r4, #26]
 802503c:	8b21      	ldrh	r1, [r4, #24]
 802503e:	4301      	orrs	r1, r0
 8025040:	d00d      	beq.n	802505e <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8025042:	2a00      	cmp	r2, #0
 8025044:	db0b      	blt.n	802505e <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 8025046:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025048:	428a      	cmp	r2, r1
 802504a:	da08      	bge.n	802505e <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802504c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8025050:	4291      	cmp	r1, r2
 8025052:	f0c0 8228 	bcc.w	80254a6 <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 8025056:	f04f 0201 	mov.w	r2, #1
 802505a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802505e:	82a3      	strh	r3, [r4, #20]
 8025060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025062:	82e5      	strh	r5, [r4, #22]
 8025064:	454b      	cmp	r3, r9
 8025066:	f8a4 a018 	strh.w	sl, [r4, #24]
 802506a:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802506e:	f8dd c004 	ldr.w	ip, [sp, #4]
 8025072:	d193      	bne.n	8024f9c <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 8025074:	9b02      	ldr	r3, [sp, #8]
 8025076:	f1c3 0e20 	rsb	lr, r3, #32
 802507a:	9b04      	ldr	r3, [sp, #16]
 802507c:	ea4f 1b63 	mov.w	fp, r3, asr #5
 8025080:	9b03      	ldr	r3, [sp, #12]
 8025082:	459e      	cmp	lr, r3
 8025084:	f040 8229 	bne.w	80254da <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 8025088:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802508c:	fa0f f58b 	sxth.w	r5, fp
 8025090:	fa0f f289 	sxth.w	r2, r9
 8025094:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8025098:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 802509c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80250a0:	4281      	cmp	r1, r0
 80250a2:	f43f ae20 	beq.w	8024ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 80250a6:	8b60      	ldrh	r0, [r4, #26]
 80250a8:	8b21      	ldrh	r1, [r4, #24]
 80250aa:	4301      	orrs	r1, r0
 80250ac:	d00c      	beq.n	80250c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80250ae:	2b00      	cmp	r3, #0
 80250b0:	db0a      	blt.n	80250c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80250b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80250b4:	428b      	cmp	r3, r1
 80250b6:	da07      	bge.n	80250c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80250b8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80250bc:	4299      	cmp	r1, r3
 80250be:	f0c0 81ff 	bcc.w	80254c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 80250c2:	2301      	movs	r3, #1
 80250c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80250c8:	82a5      	strh	r5, [r4, #20]
 80250ca:	e538      	b.n	8024b3e <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 80250cc:	f04f 32ff 	mov.w	r2, #4294967295
 80250d0:	fb0a f306 	mul.w	r3, sl, r6
 80250d4:	f1cb 0b00 	rsb	fp, fp, #0
 80250d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80250da:	2200      	movs	r2, #0
 80250dc:	e6d9      	b.n	8024e92 <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 80250de:	f104 0514 	add.w	r5, r4, #20
 80250e2:	6926      	ldr	r6, [r4, #16]
 80250e4:	cd03      	ldmia	r5!, {r0, r1}
 80250e6:	6030      	str	r0, [r6, #0]
 80250e8:	6071      	str	r1, [r6, #4]
 80250ea:	6921      	ldr	r1, [r4, #16]
 80250ec:	3108      	adds	r1, #8
 80250ee:	6121      	str	r1, [r4, #16]
 80250f0:	68a1      	ldr	r1, [r4, #8]
 80250f2:	3101      	adds	r1, #1
 80250f4:	60a1      	str	r1, [r4, #8]
 80250f6:	e702      	b.n	8024efe <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 80250f8:	9b01      	ldr	r3, [sp, #4]
 80250fa:	f001 011f 	and.w	r1, r1, #31
 80250fe:	8b20      	ldrh	r0, [r4, #24]
 8025100:	f003 031f 	and.w	r3, r3, #31
 8025104:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8025108:	930d      	str	r3, [sp, #52]	; 0x34
 802510a:	9b02      	ldr	r3, [sp, #8]
 802510c:	1b9a      	subs	r2, r3, r6
 802510e:	9b05      	ldr	r3, [sp, #20]
 8025110:	42ab      	cmp	r3, r5
 8025112:	d107      	bne.n	8025124 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 8025114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025116:	4410      	add	r0, r2
 8025118:	4419      	add	r1, r3
 802511a:	8320      	strh	r0, [r4, #24]
 802511c:	fb02 9201 	mla	r2, r2, r1, r9
 8025120:	8362      	strh	r2, [r4, #26]
 8025122:	e6f1      	b.n	8024f08 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025124:	f1bc 0f00 	cmp.w	ip, #0
 8025128:	f2c0 8093 	blt.w	8025252 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 802512c:	f1c1 0320 	rsb	r3, r1, #32
 8025130:	435a      	muls	r2, r3
 8025132:	2301      	movs	r3, #1
 8025134:	9309      	str	r3, [sp, #36]	; 0x24
 8025136:	2320      	movs	r3, #32
 8025138:	9307      	str	r3, [sp, #28]
 802513a:	9b07      	ldr	r3, [sp, #28]
 802513c:	fb92 fefc 	sdiv	lr, r2, ip
 8025140:	fb0c 221e 	mls	r2, ip, lr, r2
 8025144:	4419      	add	r1, r3
 8025146:	2a00      	cmp	r2, #0
 8025148:	bfbc      	itt	lt
 802514a:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802514e:	4462      	addlt	r2, ip
 8025150:	fb0e 9101 	mla	r1, lr, r1, r9
 8025154:	4470      	add	r0, lr
 8025156:	b20b      	sxth	r3, r1
 8025158:	9909      	ldr	r1, [sp, #36]	; 0x24
 802515a:	b200      	sxth	r0, r0
 802515c:	440d      	add	r5, r1
 802515e:	f9bd 1000 	ldrsh.w	r1, [sp]
 8025162:	8320      	strh	r0, [r4, #24]
 8025164:	fa0f f985 	sxth.w	r9, r5
 8025168:	9106      	str	r1, [sp, #24]
 802516a:	0409      	lsls	r1, r1, #16
 802516c:	8363      	strh	r3, [r4, #26]
 802516e:	910a      	str	r1, [sp, #40]	; 0x28
 8025170:	4449      	add	r1, r9
 8025172:	42b9      	cmp	r1, r7
 8025174:	f43f ad3a 	beq.w	8024bec <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025178:	4303      	orrs	r3, r0
 802517a:	d00c      	beq.n	8025196 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 802517c:	f1b8 0f00 	cmp.w	r8, #0
 8025180:	db09      	blt.n	8025196 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8025182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025184:	4543      	cmp	r3, r8
 8025186:	dd06      	ble.n	8025196 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8025188:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802518c:	4299      	cmp	r1, r3
 802518e:	d368      	bcc.n	8025262 <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 8025190:	2301      	movs	r3, #1
 8025192:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025196:	9b06      	ldr	r3, [sp, #24]
 8025198:	4476      	add	r6, lr
 802519a:	f8a4 9014 	strh.w	r9, [r4, #20]
 802519e:	82e3      	strh	r3, [r4, #22]
 80251a0:	2300      	movs	r3, #0
 80251a2:	8323      	strh	r3, [r4, #24]
 80251a4:	8363      	strh	r3, [r4, #26]
 80251a6:	9b05      	ldr	r3, [sp, #20]
 80251a8:	42ab      	cmp	r3, r5
 80251aa:	d048      	beq.n	802523e <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 80251ac:	9b02      	ldr	r3, [sp, #8]
 80251ae:	eba2 020c 	sub.w	r2, r2, ip
 80251b2:	1b9b      	subs	r3, r3, r6
 80251b4:	4473      	add	r3, lr
 80251b6:	015b      	lsls	r3, r3, #5
 80251b8:	fb93 f8fc 	sdiv	r8, r3, ip
 80251bc:	fb0c 3318 	mls	r3, ip, r8, r3
 80251c0:	2b00      	cmp	r3, #0
 80251c2:	bfbc      	itt	lt
 80251c4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80251c8:	4463      	addlt	r3, ip
 80251ca:	f108 0101 	add.w	r1, r8, #1
 80251ce:	910f      	str	r1, [sp, #60]	; 0x3c
 80251d0:	18d2      	adds	r2, r2, r3
 80251d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80251d4:	bf56      	itet	pl
 80251d6:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 80251d8:	4640      	movmi	r0, r8
 80251da:	eba2 020c 	subpl.w	r2, r2, ip
 80251de:	fa0f fe80 	sxth.w	lr, r0
 80251e2:	4406      	add	r6, r0
 80251e4:	0141      	lsls	r1, r0, #5
 80251e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80251e8:	f8a4 e018 	strh.w	lr, [r4, #24]
 80251ec:	4405      	add	r5, r0
 80251ee:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80251f2:	b209      	sxth	r1, r1
 80251f4:	fa0f f985 	sxth.w	r9, r5
 80251f8:	4438      	add	r0, r7
 80251fa:	8361      	strh	r1, [r4, #26]
 80251fc:	444f      	add	r7, r9
 80251fe:	42b8      	cmp	r0, r7
 8025200:	f43f acf4 	beq.w	8024bec <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025204:	ea5e 0101 	orrs.w	r1, lr, r1
 8025208:	d00e      	beq.n	8025228 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802520a:	9906      	ldr	r1, [sp, #24]
 802520c:	2900      	cmp	r1, #0
 802520e:	db0b      	blt.n	8025228 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025210:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025212:	9806      	ldr	r0, [sp, #24]
 8025214:	4288      	cmp	r0, r1
 8025216:	da07      	bge.n	8025228 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 8025218:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802521c:	4288      	cmp	r0, r1
 802521e:	d330      	bcc.n	8025282 <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 8025220:	f04f 0101 	mov.w	r1, #1
 8025224:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025228:	9906      	ldr	r1, [sp, #24]
 802522a:	f8a4 9014 	strh.w	r9, [r4, #20]
 802522e:	82e1      	strh	r1, [r4, #22]
 8025230:	f04f 0100 	mov.w	r1, #0
 8025234:	8321      	strh	r1, [r4, #24]
 8025236:	8361      	strh	r1, [r4, #26]
 8025238:	9905      	ldr	r1, [sp, #20]
 802523a:	42a9      	cmp	r1, r5
 802523c:	d1c8      	bne.n	80251d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 802523e:	9b02      	ldr	r3, [sp, #8]
 8025240:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025242:	1b9e      	subs	r6, r3, r6
 8025244:	9b07      	ldr	r3, [sp, #28]
 8025246:	3120      	adds	r1, #32
 8025248:	8326      	strh	r6, [r4, #24]
 802524a:	1ac9      	subs	r1, r1, r3
 802524c:	434e      	muls	r6, r1
 802524e:	8366      	strh	r6, [r4, #26]
 8025250:	e65a      	b.n	8024f08 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 8025252:	f04f 33ff 	mov.w	r3, #4294967295
 8025256:	434a      	muls	r2, r1
 8025258:	f1cc 0c00 	rsb	ip, ip, #0
 802525c:	9309      	str	r3, [sp, #36]	; 0x24
 802525e:	2300      	movs	r3, #0
 8025260:	e76a      	b.n	8025138 <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 8025262:	f104 0314 	add.w	r3, r4, #20
 8025266:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802526a:	cb03      	ldmia	r3!, {r0, r1}
 802526c:	f8c8 0000 	str.w	r0, [r8]
 8025270:	f8c8 1004 	str.w	r1, [r8, #4]
 8025274:	6923      	ldr	r3, [r4, #16]
 8025276:	3308      	adds	r3, #8
 8025278:	6123      	str	r3, [r4, #16]
 802527a:	68a3      	ldr	r3, [r4, #8]
 802527c:	3301      	adds	r3, #1
 802527e:	60a3      	str	r3, [r4, #8]
 8025280:	e789      	b.n	8025196 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 8025282:	6921      	ldr	r1, [r4, #16]
 8025284:	f104 0e14 	add.w	lr, r4, #20
 8025288:	910e      	str	r1, [sp, #56]	; 0x38
 802528a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802528c:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8025290:	6038      	str	r0, [r7, #0]
 8025292:	4638      	mov	r0, r7
 8025294:	6079      	str	r1, [r7, #4]
 8025296:	6921      	ldr	r1, [r4, #16]
 8025298:	3108      	adds	r1, #8
 802529a:	6121      	str	r1, [r4, #16]
 802529c:	68a1      	ldr	r1, [r4, #8]
 802529e:	3101      	adds	r1, #1
 80252a0:	60a1      	str	r1, [r4, #8]
 80252a2:	e7c1      	b.n	8025228 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 80252a4:	f104 0214 	add.w	r2, r4, #20
 80252a8:	6926      	ldr	r6, [r4, #16]
 80252aa:	ca03      	ldmia	r2!, {r0, r1}
 80252ac:	6030      	str	r0, [r6, #0]
 80252ae:	6071      	str	r1, [r6, #4]
 80252b0:	6922      	ldr	r2, [r4, #16]
 80252b2:	3208      	adds	r2, #8
 80252b4:	6122      	str	r2, [r4, #16]
 80252b6:	68a2      	ldr	r2, [r4, #8]
 80252b8:	3201      	adds	r2, #1
 80252ba:	60a2      	str	r2, [r4, #8]
 80252bc:	e647      	b.n	8024f4e <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 80252be:	f104 0514 	add.w	r5, r4, #20
 80252c2:	6926      	ldr	r6, [r4, #16]
 80252c4:	cd03      	ldmia	r5!, {r0, r1}
 80252c6:	6030      	str	r0, [r6, #0]
 80252c8:	6071      	str	r1, [r6, #4]
 80252ca:	6921      	ldr	r1, [r4, #16]
 80252cc:	3108      	adds	r1, #8
 80252ce:	6121      	str	r1, [r4, #16]
 80252d0:	68a1      	ldr	r1, [r4, #8]
 80252d2:	3101      	adds	r1, #1
 80252d4:	60a1      	str	r1, [r4, #8]
 80252d6:	e699      	b.n	802500c <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 80252d8:	9b01      	ldr	r3, [sp, #4]
 80252da:	ea4f 176c 	mov.w	r7, ip, asr #5
 80252de:	8b20      	ldrh	r0, [r4, #24]
 80252e0:	f00c 0c1f 	and.w	ip, ip, #31
 80252e4:	f003 031f 	and.w	r3, r3, #31
 80252e8:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 80252ec:	9310      	str	r3, [sp, #64]	; 0x40
 80252ee:	9b06      	ldr	r3, [sp, #24]
 80252f0:	429f      	cmp	r7, r3
 80252f2:	d10a      	bne.n	802530a <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 80252f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80252f6:	4418      	add	r0, r3
 80252f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80252fa:	449c      	add	ip, r3
 80252fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80252fe:	8320      	strh	r0, [r4, #24]
 8025300:	fb03 ee0c 	mla	lr, r3, ip, lr
 8025304:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8025308:	e686      	b.n	8025018 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802530a:	9b00      	ldr	r3, [sp, #0]
 802530c:	2b00      	cmp	r3, #0
 802530e:	f2c0 80a0 	blt.w	8025452 <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 8025312:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025314:	f1cc 0320 	rsb	r3, ip, #32
 8025318:	434b      	muls	r3, r1
 802531a:	2101      	movs	r1, #1
 802531c:	910e      	str	r1, [sp, #56]	; 0x38
 802531e:	2120      	movs	r1, #32
 8025320:	9a00      	ldr	r2, [sp, #0]
 8025322:	910d      	str	r1, [sp, #52]	; 0x34
 8025324:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025326:	fb93 f5f2 	sdiv	r5, r3, r2
 802532a:	fb02 3315 	mls	r3, r2, r5, r3
 802532e:	448c      	add	ip, r1
 8025330:	2b00      	cmp	r3, #0
 8025332:	bfbc      	itt	lt
 8025334:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8025338:	189b      	addlt	r3, r3, r2
 802533a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802533c:	fb05 ec0c 	mla	ip, r5, ip, lr
 8025340:	4428      	add	r0, r5
 8025342:	4417      	add	r7, r2
 8025344:	fa0f f18c 	sxth.w	r1, ip
 8025348:	fa0f fc89 	sxth.w	ip, r9
 802534c:	fa0f fe87 	sxth.w	lr, r7
 8025350:	8361      	strh	r1, [r4, #26]
 8025352:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8025356:	b200      	sxth	r0, r0
 8025358:	920f      	str	r2, [sp, #60]	; 0x3c
 802535a:	4472      	add	r2, lr
 802535c:	8320      	strh	r0, [r4, #24]
 802535e:	4542      	cmp	r2, r8
 8025360:	f43f ac44 	beq.w	8024bec <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025364:	ea50 0201 	orrs.w	r2, r0, r1
 8025368:	d00c      	beq.n	8025384 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802536a:	2e00      	cmp	r6, #0
 802536c:	db0a      	blt.n	8025384 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802536e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025370:	42b1      	cmp	r1, r6
 8025372:	dd07      	ble.n	8025384 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025374:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025378:	4288      	cmp	r0, r1
 802537a:	d375      	bcc.n	8025468 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 802537c:	f04f 0201 	mov.w	r2, #1
 8025380:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025386:	f8a4 e014 	strh.w	lr, [r4, #20]
 802538a:	1956      	adds	r6, r2, r5
 802538c:	9a06      	ldr	r2, [sp, #24]
 802538e:	f8a4 c016 	strh.w	ip, [r4, #22]
 8025392:	42ba      	cmp	r2, r7
 8025394:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025398:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802539c:	d04c      	beq.n	8025438 <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 802539e:	9a02      	ldr	r2, [sp, #8]
 80253a0:	1b91      	subs	r1, r2, r6
 80253a2:	9a00      	ldr	r2, [sp, #0]
 80253a4:	440d      	add	r5, r1
 80253a6:	016d      	lsls	r5, r5, #5
 80253a8:	fb95 fef2 	sdiv	lr, r5, r2
 80253ac:	fb02 551e 	mls	r5, r2, lr, r5
 80253b0:	2d00      	cmp	r5, #0
 80253b2:	bfbc      	itt	lt
 80253b4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80253b8:	18ad      	addlt	r5, r5, r2
 80253ba:	9a00      	ldr	r2, [sp, #0]
 80253bc:	1a9b      	subs	r3, r3, r2
 80253be:	f10e 0201 	add.w	r2, lr, #1
 80253c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80253c4:	195b      	adds	r3, r3, r5
 80253c6:	bf57      	itett	pl
 80253c8:	9a00      	ldrpl	r2, [sp, #0]
 80253ca:	4670      	movmi	r0, lr
 80253cc:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 80253ce:	1a9b      	subpl	r3, r3, r2
 80253d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80253d2:	fa0f f880 	sxth.w	r8, r0
 80253d6:	4406      	add	r6, r0
 80253d8:	4417      	add	r7, r2
 80253da:	0141      	lsls	r1, r0, #5
 80253dc:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80253e0:	b23a      	sxth	r2, r7
 80253e2:	f8a4 8018 	strh.w	r8, [r4, #24]
 80253e6:	b209      	sxth	r1, r1
 80253e8:	9211      	str	r2, [sp, #68]	; 0x44
 80253ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80253ec:	8361      	strh	r1, [r4, #26]
 80253ee:	1882      	adds	r2, r0, r2
 80253f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80253f2:	9212      	str	r2, [sp, #72]	; 0x48
 80253f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80253f6:	4402      	add	r2, r0
 80253f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80253fa:	4290      	cmp	r0, r2
 80253fc:	f43f abf6 	beq.w	8024bec <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025400:	ea58 0201 	orrs.w	r2, r8, r1
 8025404:	d00d      	beq.n	8025422 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8025406:	f1bc 0f00 	cmp.w	ip, #0
 802540a:	db0a      	blt.n	8025422 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802540c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802540e:	458c      	cmp	ip, r1
 8025410:	da07      	bge.n	8025422 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 8025412:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025416:	4288      	cmp	r0, r1
 8025418:	d336      	bcc.n	8025488 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 802541a:	f04f 0201 	mov.w	r2, #1
 802541e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8025422:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025424:	f8a4 c016 	strh.w	ip, [r4, #22]
 8025428:	82a2      	strh	r2, [r4, #20]
 802542a:	9a06      	ldr	r2, [sp, #24]
 802542c:	f8a4 a018 	strh.w	sl, [r4, #24]
 8025430:	42ba      	cmp	r2, r7
 8025432:	f8a4 a01a 	strh.w	sl, [r4, #26]
 8025436:	d1c5      	bne.n	80253c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 8025438:	9b02      	ldr	r3, [sp, #8]
 802543a:	1b9e      	subs	r6, r3, r6
 802543c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802543e:	f103 0c20 	add.w	ip, r3, #32
 8025442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025444:	8326      	strh	r6, [r4, #24]
 8025446:	ebac 0c03 	sub.w	ip, ip, r3
 802544a:	fb06 f60c 	mul.w	r6, r6, ip
 802544e:	8366      	strh	r6, [r4, #26]
 8025450:	e5e2      	b.n	8025018 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 8025452:	9a00      	ldr	r2, [sp, #0]
 8025454:	f04f 31ff 	mov.w	r1, #4294967295
 8025458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802545a:	4252      	negs	r2, r2
 802545c:	910e      	str	r1, [sp, #56]	; 0x38
 802545e:	fb03 f30c 	mul.w	r3, r3, ip
 8025462:	2100      	movs	r1, #0
 8025464:	9200      	str	r2, [sp, #0]
 8025466:	e75b      	b.n	8025320 <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 8025468:	f104 0614 	add.w	r6, r4, #20
 802546c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8025470:	ce03      	ldmia	r6!, {r0, r1}
 8025472:	f8c8 0000 	str.w	r0, [r8]
 8025476:	f8c8 1004 	str.w	r1, [r8, #4]
 802547a:	6921      	ldr	r1, [r4, #16]
 802547c:	3108      	adds	r1, #8
 802547e:	6121      	str	r1, [r4, #16]
 8025480:	68a1      	ldr	r1, [r4, #8]
 8025482:	3101      	adds	r1, #1
 8025484:	60a1      	str	r1, [r4, #8]
 8025486:	e77d      	b.n	8025384 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8025488:	f104 0814 	add.w	r8, r4, #20
 802548c:	6922      	ldr	r2, [r4, #16]
 802548e:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8025492:	9212      	str	r2, [sp, #72]	; 0x48
 8025494:	6010      	str	r0, [r2, #0]
 8025496:	6051      	str	r1, [r2, #4]
 8025498:	6921      	ldr	r1, [r4, #16]
 802549a:	3108      	adds	r1, #8
 802549c:	6121      	str	r1, [r4, #16]
 802549e:	68a1      	ldr	r1, [r4, #8]
 80254a0:	3101      	adds	r1, #1
 80254a2:	60a1      	str	r1, [r4, #8]
 80254a4:	e7bd      	b.n	8025422 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 80254a6:	f104 0214 	add.w	r2, r4, #20
 80254aa:	6926      	ldr	r6, [r4, #16]
 80254ac:	ca03      	ldmia	r2!, {r0, r1}
 80254ae:	6030      	str	r0, [r6, #0]
 80254b0:	6071      	str	r1, [r6, #4]
 80254b2:	6922      	ldr	r2, [r4, #16]
 80254b4:	3208      	adds	r2, #8
 80254b6:	6122      	str	r2, [r4, #16]
 80254b8:	68a2      	ldr	r2, [r4, #8]
 80254ba:	3201      	adds	r2, #1
 80254bc:	60a2      	str	r2, [r4, #8]
 80254be:	e5ce      	b.n	802505e <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 80254c0:	f104 0314 	add.w	r3, r4, #20
 80254c4:	6926      	ldr	r6, [r4, #16]
 80254c6:	cb03      	ldmia	r3!, {r0, r1}
 80254c8:	6030      	str	r0, [r6, #0]
 80254ca:	6071      	str	r1, [r6, #4]
 80254cc:	6923      	ldr	r3, [r4, #16]
 80254ce:	3308      	adds	r3, #8
 80254d0:	6123      	str	r3, [r4, #16]
 80254d2:	68a3      	ldr	r3, [r4, #8]
 80254d4:	3301      	adds	r3, #1
 80254d6:	60a3      	str	r3, [r4, #8]
 80254d8:	e5f6      	b.n	80250c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 80254da:	9b01      	ldr	r3, [sp, #4]
 80254dc:	8b20      	ldrh	r0, [r4, #24]
 80254de:	ea4f 1c63 	mov.w	ip, r3, asr #5
 80254e2:	f003 021f 	and.w	r2, r3, #31
 80254e6:	9b04      	ldr	r3, [sp, #16]
 80254e8:	45dc      	cmp	ip, fp
 80254ea:	8b66      	ldrh	r6, [r4, #26]
 80254ec:	f003 031f 	and.w	r3, r3, #31
 80254f0:	9305      	str	r3, [sp, #20]
 80254f2:	9b03      	ldr	r3, [sp, #12]
 80254f4:	eba3 050e 	sub.w	r5, r3, lr
 80254f8:	d108      	bne.n	802550c <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 80254fa:	9b05      	ldr	r3, [sp, #20]
 80254fc:	4428      	add	r0, r5
 80254fe:	441a      	add	r2, r3
 8025500:	8320      	strh	r0, [r4, #24]
 8025502:	fb05 6502 	mla	r5, r5, r2, r6
 8025506:	8365      	strh	r5, [r4, #26]
 8025508:	f7ff bbed 	b.w	8024ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802550c:	9b04      	ldr	r3, [sp, #16]
 802550e:	9901      	ldr	r1, [sp, #4]
 8025510:	1a5b      	subs	r3, r3, r1
 8025512:	9300      	str	r3, [sp, #0]
 8025514:	f100 809c 	bmi.w	8025650 <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 8025518:	f1c2 0120 	rsb	r1, r2, #32
 802551c:	434d      	muls	r5, r1
 802551e:	2101      	movs	r1, #1
 8025520:	9102      	str	r1, [sp, #8]
 8025522:	2120      	movs	r1, #32
 8025524:	9b00      	ldr	r3, [sp, #0]
 8025526:	9101      	str	r1, [sp, #4]
 8025528:	9901      	ldr	r1, [sp, #4]
 802552a:	fb95 f7f3 	sdiv	r7, r5, r3
 802552e:	fb03 5517 	mls	r5, r3, r7, r5
 8025532:	440a      	add	r2, r1
 8025534:	2d00      	cmp	r5, #0
 8025536:	bfbc      	itt	lt
 8025538:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802553c:	18ed      	addlt	r5, r5, r3
 802553e:	fb07 6202 	mla	r2, r7, r2, r6
 8025542:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 8025546:	4438      	add	r0, r7
 8025548:	b211      	sxth	r1, r2
 802554a:	9a02      	ldr	r2, [sp, #8]
 802554c:	b200      	sxth	r0, r0
 802554e:	4494      	add	ip, r2
 8025550:	fa0f f289 	sxth.w	r2, r9
 8025554:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8025558:	0413      	lsls	r3, r2, #16
 802555a:	8320      	strh	r0, [r4, #24]
 802555c:	fa0f f88c 	sxth.w	r8, ip
 8025560:	8361      	strh	r1, [r4, #26]
 8025562:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 8025566:	9304      	str	r3, [sp, #16]
 8025568:	eb08 0a03 	add.w	sl, r8, r3
 802556c:	45d1      	cmp	r9, sl
 802556e:	f43f ab3d 	beq.w	8024bec <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025572:	ea50 0301 	orrs.w	r3, r0, r1
 8025576:	d00b      	beq.n	8025590 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8025578:	2e00      	cmp	r6, #0
 802557a:	db09      	blt.n	8025590 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 802557c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802557e:	428e      	cmp	r6, r1
 8025580:	da06      	bge.n	8025590 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8025582:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025586:	4288      	cmp	r0, r1
 8025588:	d36b      	bcc.n	8025662 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 802558a:	2101      	movs	r1, #1
 802558c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8025590:	2100      	movs	r1, #0
 8025592:	45e3      	cmp	fp, ip
 8025594:	f8a4 8014 	strh.w	r8, [r4, #20]
 8025598:	44be      	add	lr, r7
 802559a:	82e2      	strh	r2, [r4, #22]
 802559c:	8321      	strh	r1, [r4, #24]
 802559e:	8361      	strh	r1, [r4, #26]
 80255a0:	d047      	beq.n	8025632 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 80255a2:	9b03      	ldr	r3, [sp, #12]
 80255a4:	f04f 0900 	mov.w	r9, #0
 80255a8:	eba3 060e 	sub.w	r6, r3, lr
 80255ac:	9b00      	ldr	r3, [sp, #0]
 80255ae:	443e      	add	r6, r7
 80255b0:	0176      	lsls	r6, r6, #5
 80255b2:	fb96 f7f3 	sdiv	r7, r6, r3
 80255b6:	fb03 6617 	mls	r6, r3, r7, r6
 80255ba:	428e      	cmp	r6, r1
 80255bc:	bfbc      	itt	lt
 80255be:	f107 37ff 	addlt.w	r7, r7, #4294967295
 80255c2:	18f6      	addlt	r6, r6, r3
 80255c4:	9b00      	ldr	r3, [sp, #0]
 80255c6:	1aed      	subs	r5, r5, r3
 80255c8:	1c7b      	adds	r3, r7, #1
 80255ca:	9307      	str	r3, [sp, #28]
 80255cc:	19ad      	adds	r5, r5, r6
 80255ce:	bf57      	itett	pl
 80255d0:	9b00      	ldrpl	r3, [sp, #0]
 80255d2:	4638      	movmi	r0, r7
 80255d4:	9807      	ldrpl	r0, [sp, #28]
 80255d6:	1aed      	subpl	r5, r5, r3
 80255d8:	9b02      	ldr	r3, [sp, #8]
 80255da:	fa0f f880 	sxth.w	r8, r0
 80255de:	4486      	add	lr, r0
 80255e0:	449c      	add	ip, r3
 80255e2:	0141      	lsls	r1, r0, #5
 80255e4:	9b04      	ldr	r3, [sp, #16]
 80255e6:	fa0f fa8c 	sxth.w	sl, ip
 80255ea:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 80255ee:	b209      	sxth	r1, r1
 80255f0:	f8a4 8018 	strh.w	r8, [r4, #24]
 80255f4:	4418      	add	r0, r3
 80255f6:	4453      	add	r3, sl
 80255f8:	8361      	strh	r1, [r4, #26]
 80255fa:	4298      	cmp	r0, r3
 80255fc:	f43f aaf6 	beq.w	8024bec <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 8025600:	ea58 0301 	orrs.w	r3, r8, r1
 8025604:	d00c      	beq.n	8025620 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8025606:	2a00      	cmp	r2, #0
 8025608:	db0a      	blt.n	8025620 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802560a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802560c:	428a      	cmp	r2, r1
 802560e:	da07      	bge.n	8025620 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 8025610:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8025614:	4288      	cmp	r0, r1
 8025616:	d334      	bcc.n	8025682 <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 8025618:	f04f 0301 	mov.w	r3, #1
 802561c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8025620:	45e3      	cmp	fp, ip
 8025622:	f8a4 a014 	strh.w	sl, [r4, #20]
 8025626:	82e2      	strh	r2, [r4, #22]
 8025628:	f8a4 9018 	strh.w	r9, [r4, #24]
 802562c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8025630:	d1cc      	bne.n	80255cc <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 8025632:	9b03      	ldr	r3, [sp, #12]
 8025634:	9e05      	ldr	r6, [sp, #20]
 8025636:	eba3 0e0e 	sub.w	lr, r3, lr
 802563a:	9b01      	ldr	r3, [sp, #4]
 802563c:	3620      	adds	r6, #32
 802563e:	f8a4 e018 	strh.w	lr, [r4, #24]
 8025642:	1af6      	subs	r6, r6, r3
 8025644:	fb0e fe06 	mul.w	lr, lr, r6
 8025648:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802564c:	f7ff bb4b 	b.w	8024ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 8025650:	9b00      	ldr	r3, [sp, #0]
 8025652:	f04f 31ff 	mov.w	r1, #4294967295
 8025656:	4355      	muls	r5, r2
 8025658:	425b      	negs	r3, r3
 802565a:	9102      	str	r1, [sp, #8]
 802565c:	2100      	movs	r1, #0
 802565e:	9300      	str	r3, [sp, #0]
 8025660:	e760      	b.n	8025524 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 8025662:	f104 0614 	add.w	r6, r4, #20
 8025666:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802566a:	ce03      	ldmia	r6!, {r0, r1}
 802566c:	f8c9 0000 	str.w	r0, [r9]
 8025670:	f8c9 1004 	str.w	r1, [r9, #4]
 8025674:	6921      	ldr	r1, [r4, #16]
 8025676:	3108      	adds	r1, #8
 8025678:	6121      	str	r1, [r4, #16]
 802567a:	68a1      	ldr	r1, [r4, #8]
 802567c:	3101      	adds	r1, #1
 802567e:	60a1      	str	r1, [r4, #8]
 8025680:	e786      	b.n	8025590 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 8025682:	f104 0814 	add.w	r8, r4, #20
 8025686:	6923      	ldr	r3, [r4, #16]
 8025688:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802568c:	9306      	str	r3, [sp, #24]
 802568e:	6018      	str	r0, [r3, #0]
 8025690:	6059      	str	r1, [r3, #4]
 8025692:	6921      	ldr	r1, [r4, #16]
 8025694:	3108      	adds	r1, #8
 8025696:	6121      	str	r1, [r4, #16]
 8025698:	68a1      	ldr	r1, [r4, #8]
 802569a:	3101      	adds	r1, #1
 802569c:	60a1      	str	r1, [r4, #8]
 802569e:	e7bf      	b.n	8025620 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

080256a0 <_ZN8touchgfx7Outline6lineToEii>:
 80256a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80256a2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80256a4:	4604      	mov	r4, r0
 80256a6:	460d      	mov	r5, r1
 80256a8:	4616      	mov	r6, r2
 80256aa:	079b      	lsls	r3, r3, #30
 80256ac:	d526      	bpl.n	80256fc <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80256ae:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80256b2:	ea85 0001 	eor.w	r0, r5, r1
 80256b6:	ea86 0302 	eor.w	r3, r6, r2
 80256ba:	4303      	orrs	r3, r0
 80256bc:	d01e      	beq.n	80256fc <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80256be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80256c0:	114b      	asrs	r3, r1, #5
 80256c2:	9600      	str	r6, [sp, #0]
 80256c4:	4283      	cmp	r3, r0
 80256c6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80256c8:	bfb8      	it	lt
 80256ca:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80256cc:	3301      	adds	r3, #1
 80256ce:	4283      	cmp	r3, r0
 80256d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80256d2:	bfc8      	it	gt
 80256d4:	6363      	strgt	r3, [r4, #52]	; 0x34
 80256d6:	116b      	asrs	r3, r5, #5
 80256d8:	4283      	cmp	r3, r0
 80256da:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80256dc:	bfb8      	it	lt
 80256de:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80256e0:	3301      	adds	r3, #1
 80256e2:	4283      	cmp	r3, r0
 80256e4:	4620      	mov	r0, r4
 80256e6:	bfc8      	it	gt
 80256e8:	6363      	strgt	r3, [r4, #52]	; 0x34
 80256ea:	462b      	mov	r3, r5
 80256ec:	f7ff f9c6 	bl	8024a7c <_ZN8touchgfx7Outline10renderLineEiiii>
 80256f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80256f2:	f043 0301 	orr.w	r3, r3, #1
 80256f6:	e9c4 5607 	strd	r5, r6, [r4, #28]
 80256fa:	63e3      	str	r3, [r4, #60]	; 0x3c
 80256fc:	b002      	add	sp, #8
 80256fe:	bd70      	pop	{r4, r5, r6, pc}

08025700 <_ZN8touchgfx7Outline6moveToEii>:
 8025700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025702:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8025704:	4615      	mov	r5, r2
 8025706:	4604      	mov	r4, r0
 8025708:	460e      	mov	r6, r1
 802570a:	079a      	lsls	r2, r3, #30
 802570c:	d401      	bmi.n	8025712 <_ZN8touchgfx7Outline6moveToEii+0x12>
 802570e:	f7ff f96f 	bl	80249f0 <_ZN8touchgfx7Outline5resetEv>
 8025712:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8025714:	07db      	lsls	r3, r3, #31
 8025716:	d504      	bpl.n	8025722 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8025718:	4620      	mov	r0, r4
 802571a:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802571e:	f7ff ffbf 	bl	80256a0 <_ZN8touchgfx7Outline6lineToEii>
 8025722:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8025726:	f346 1c4f 	sbfx	ip, r6, #5, #16
 802572a:	f345 174f 	sbfx	r7, r5, #5, #16
 802572e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8025732:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8025736:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802573a:	428a      	cmp	r2, r1
 802573c:	d015      	beq.n	802576a <_ZN8touchgfx7Outline6moveToEii+0x6a>
 802573e:	8b61      	ldrh	r1, [r4, #26]
 8025740:	8b22      	ldrh	r2, [r4, #24]
 8025742:	430a      	orrs	r2, r1
 8025744:	d00b      	beq.n	802575e <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8025746:	2b00      	cmp	r3, #0
 8025748:	db09      	blt.n	802575e <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802574a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802574c:	4293      	cmp	r3, r2
 802574e:	da06      	bge.n	802575e <_ZN8touchgfx7Outline6moveToEii+0x5e>
 8025750:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8025754:	429a      	cmp	r2, r3
 8025756:	d30d      	bcc.n	8025774 <_ZN8touchgfx7Outline6moveToEii+0x74>
 8025758:	2301      	movs	r3, #1
 802575a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802575e:	2300      	movs	r3, #0
 8025760:	f8a4 c014 	strh.w	ip, [r4, #20]
 8025764:	82e7      	strh	r7, [r4, #22]
 8025766:	8323      	strh	r3, [r4, #24]
 8025768:	8363      	strh	r3, [r4, #26]
 802576a:	61e6      	str	r6, [r4, #28]
 802576c:	62a5      	str	r5, [r4, #40]	; 0x28
 802576e:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8025772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025774:	f104 0314 	add.w	r3, r4, #20
 8025778:	6922      	ldr	r2, [r4, #16]
 802577a:	cb03      	ldmia	r3!, {r0, r1}
 802577c:	6010      	str	r0, [r2, #0]
 802577e:	6051      	str	r1, [r2, #4]
 8025780:	6923      	ldr	r3, [r4, #16]
 8025782:	3308      	adds	r3, #8
 8025784:	6123      	str	r3, [r4, #16]
 8025786:	68a3      	ldr	r3, [r4, #8]
 8025788:	3301      	adds	r3, #1
 802578a:	60a3      	str	r3, [r4, #8]
 802578c:	e7e7      	b.n	802575e <_ZN8touchgfx7Outline6moveToEii+0x5e>

0802578e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802578e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025792:	b0d1      	sub	sp, #324	; 0x144
 8025794:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8025798:	466c      	mov	r4, sp
 802579a:	1a0d      	subs	r5, r1, r0
 802579c:	f100 0208 	add.w	r2, r0, #8
 80257a0:	2d48      	cmp	r5, #72	; 0x48
 80257a2:	f340 80ba 	ble.w	802591a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80257a6:	112d      	asrs	r5, r5, #4
 80257a8:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80257ac:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80257b0:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 80257b4:	f9b0 8000 	ldrsh.w	r8, [r0]
 80257b8:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80257bc:	681e      	ldr	r6, [r3, #0]
 80257be:	6006      	str	r6, [r0, #0]
 80257c0:	685e      	ldr	r6, [r3, #4]
 80257c2:	6046      	str	r6, [r0, #4]
 80257c4:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 80257c8:	f8a3 e002 	strh.w	lr, [r3, #2]
 80257cc:	f8a3 c004 	strh.w	ip, [r3, #4]
 80257d0:	80df      	strh	r7, [r3, #6]
 80257d2:	f1a1 0308 	sub.w	r3, r1, #8
 80257d6:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 80257da:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80257de:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 80257e2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80257e6:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 80257ea:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80257ee:	4565      	cmp	r5, ip
 80257f0:	da0f      	bge.n	8025812 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 80257f2:	681d      	ldr	r5, [r3, #0]
 80257f4:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 80257f8:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80257fc:	6015      	str	r5, [r2, #0]
 80257fe:	685d      	ldr	r5, [r3, #4]
 8025800:	6055      	str	r5, [r2, #4]
 8025802:	f821 7c08 	strh.w	r7, [r1, #-8]
 8025806:	f821 6c06 	strh.w	r6, [r1, #-6]
 802580a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802580e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8025812:	f9b0 7000 	ldrsh.w	r7, [r0]
 8025816:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802581a:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 802581e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8025822:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025826:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802582a:	45ac      	cmp	ip, r5
 802582c:	da0d      	bge.n	802584a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802582e:	6815      	ldr	r5, [r2, #0]
 8025830:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8025834:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025838:	6005      	str	r5, [r0, #0]
 802583a:	6855      	ldr	r5, [r2, #4]
 802583c:	8107      	strh	r7, [r0, #8]
 802583e:	6045      	str	r5, [r0, #4]
 8025840:	8146      	strh	r6, [r0, #10]
 8025842:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8025846:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802584a:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802584e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8025852:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8025856:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802585a:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802585e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8025862:	4565      	cmp	r5, ip
 8025864:	da0f      	bge.n	8025886 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8025866:	681d      	ldr	r5, [r3, #0]
 8025868:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802586c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8025870:	6005      	str	r5, [r0, #0]
 8025872:	685d      	ldr	r5, [r3, #4]
 8025874:	6045      	str	r5, [r0, #4]
 8025876:	f821 7c08 	strh.w	r7, [r1, #-8]
 802587a:	f821 6c06 	strh.w	r6, [r1, #-6]
 802587e:	f821 ec04 	strh.w	lr, [r1, #-4]
 8025882:	f821 cc02 	strh.w	ip, [r1, #-2]
 8025886:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802588a:	f102 0508 	add.w	r5, r2, #8
 802588e:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8025892:	f9b0 e000 	ldrsh.w	lr, [r0]
 8025896:	462f      	mov	r7, r5
 8025898:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802589c:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 80258a0:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 80258a4:	4556      	cmp	r6, sl
 80258a6:	db18      	blt.n	80258da <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 80258a8:	3b08      	subs	r3, #8
 80258aa:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80258ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80258b2:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 80258b6:	45b2      	cmp	sl, r6
 80258b8:	dbf6      	blt.n	80258a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 80258ba:	42ab      	cmp	r3, r5
 80258bc:	681e      	ldr	r6, [r3, #0]
 80258be:	d30e      	bcc.n	80258de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 80258c0:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 80258c4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80258c8:	602e      	str	r6, [r5, #0]
 80258ca:	685e      	ldr	r6, [r3, #4]
 80258cc:	606e      	str	r6, [r5, #4]
 80258ce:	f8a3 9000 	strh.w	r9, [r3]
 80258d2:	f8a3 8002 	strh.w	r8, [r3, #2]
 80258d6:	809f      	strh	r7, [r3, #4]
 80258d8:	80da      	strh	r2, [r3, #6]
 80258da:	462a      	mov	r2, r5
 80258dc:	e7d3      	b.n	8025886 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80258de:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80258e2:	6006      	str	r6, [r0, #0]
 80258e4:	685e      	ldr	r6, [r3, #4]
 80258e6:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80258ea:	6046      	str	r6, [r0, #4]
 80258ec:	1a1e      	subs	r6, r3, r0
 80258ee:	80da      	strh	r2, [r3, #6]
 80258f0:	1b4a      	subs	r2, r1, r5
 80258f2:	f8a3 e000 	strh.w	lr, [r3]
 80258f6:	10d2      	asrs	r2, r2, #3
 80258f8:	f8a3 c002 	strh.w	ip, [r3, #2]
 80258fc:	f8a3 8004 	strh.w	r8, [r3, #4]
 8025900:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8025904:	bfb5      	itete	lt
 8025906:	e9c4 0300 	strdlt	r0, r3, [r4]
 802590a:	4607      	movge	r7, r0
 802590c:	460b      	movlt	r3, r1
 802590e:	e9c4 5100 	strdge	r5, r1, [r4]
 8025912:	4638      	mov	r0, r7
 8025914:	3408      	adds	r4, #8
 8025916:	4619      	mov	r1, r3
 8025918:	e73f      	b.n	802579a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802591a:	4291      	cmp	r1, r2
 802591c:	d925      	bls.n	802596a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802591e:	f1a2 0310 	sub.w	r3, r2, #16
 8025922:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8025926:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802592a:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 802592e:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8025932:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8025936:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802593a:	42ae      	cmp	r6, r5
 802593c:	da13      	bge.n	8025966 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802593e:	461d      	mov	r5, r3
 8025940:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8025944:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8025948:	3b08      	subs	r3, #8
 802594a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802594e:	619e      	str	r6, [r3, #24]
 8025950:	42a8      	cmp	r0, r5
 8025952:	686e      	ldr	r6, [r5, #4]
 8025954:	f8a3 c010 	strh.w	ip, [r3, #16]
 8025958:	61de      	str	r6, [r3, #28]
 802595a:	825f      	strh	r7, [r3, #18]
 802595c:	f8a3 8014 	strh.w	r8, [r3, #20]
 8025960:	f8a3 e016 	strh.w	lr, [r3, #22]
 8025964:	d1dd      	bne.n	8025922 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8025966:	3208      	adds	r2, #8
 8025968:	e7d7      	b.n	802591a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802596a:	466b      	mov	r3, sp
 802596c:	429c      	cmp	r4, r3
 802596e:	d903      	bls.n	8025978 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8025970:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8025974:	3c08      	subs	r4, #8
 8025976:	e710      	b.n	802579a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8025978:	b051      	add	sp, #324	; 0x144
 802597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802597e <_ZN8touchgfx7Outline9sortCellsEv>:
 802597e:	6881      	ldr	r1, [r0, #8]
 8025980:	b111      	cbz	r1, 8025988 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8025982:	68c0      	ldr	r0, [r0, #12]
 8025984:	f7ff bf03 	b.w	802578e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8025988:	4770      	bx	lr

0802598a <_ZN8touchgfx7Outline8getCellsEv>:
 802598a:	b510      	push	{r4, lr}
 802598c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802598e:	4604      	mov	r4, r0
 8025990:	07da      	lsls	r2, r3, #31
 8025992:	d507      	bpl.n	80259a4 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8025994:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8025998:	f7ff fe82 	bl	80256a0 <_ZN8touchgfx7Outline6lineToEii>
 802599c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802599e:	f023 0301 	bic.w	r3, r3, #1
 80259a2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80259a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80259a6:	079b      	lsls	r3, r3, #30
 80259a8:	d51a      	bpl.n	80259e0 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 80259aa:	8b62      	ldrh	r2, [r4, #26]
 80259ac:	8b23      	ldrh	r3, [r4, #24]
 80259ae:	4313      	orrs	r3, r2
 80259b0:	d00d      	beq.n	80259ce <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80259b2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80259b6:	2b00      	cmp	r3, #0
 80259b8:	db09      	blt.n	80259ce <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80259ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80259bc:	4293      	cmp	r3, r2
 80259be:	da06      	bge.n	80259ce <_ZN8touchgfx7Outline8getCellsEv+0x44>
 80259c0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80259c4:	429a      	cmp	r2, r3
 80259c6:	d80d      	bhi.n	80259e4 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 80259c8:	2301      	movs	r3, #1
 80259ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80259ce:	68a0      	ldr	r0, [r4, #8]
 80259d0:	b138      	cbz	r0, 80259e2 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 80259d2:	4620      	mov	r0, r4
 80259d4:	f7ff ffd3 	bl	802597e <_ZN8touchgfx7Outline9sortCellsEv>
 80259d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80259da:	f023 0302 	bic.w	r3, r3, #2
 80259de:	63e3      	str	r3, [r4, #60]	; 0x3c
 80259e0:	68e0      	ldr	r0, [r4, #12]
 80259e2:	bd10      	pop	{r4, pc}
 80259e4:	f104 0314 	add.w	r3, r4, #20
 80259e8:	6922      	ldr	r2, [r4, #16]
 80259ea:	cb03      	ldmia	r3!, {r0, r1}
 80259ec:	6010      	str	r0, [r2, #0]
 80259ee:	6051      	str	r1, [r2, #4]
 80259f0:	6923      	ldr	r3, [r4, #16]
 80259f2:	3308      	adds	r3, #8
 80259f4:	6123      	str	r3, [r4, #16]
 80259f6:	68a3      	ldr	r3, [r4, #8]
 80259f8:	3301      	adds	r3, #1
 80259fa:	60a3      	str	r3, [r4, #8]
 80259fc:	e7e7      	b.n	80259ce <_ZN8touchgfx7Outline8getCellsEv+0x44>

080259fe <_ZN8touchgfx8ScanlineD1Ev>:
 80259fe:	4770      	bx	lr

08025a00 <_ZN8touchgfx8ScanlineD0Ev>:
 8025a00:	b510      	push	{r4, lr}
 8025a02:	4604      	mov	r4, r0
 8025a04:	2124      	movs	r1, #36	; 0x24
 8025a06:	f000 f888 	bl	8025b1a <_ZdlPvj>
 8025a0a:	4620      	mov	r0, r4
 8025a0c:	bd10      	pop	{r4, pc}

08025a0e <_ZN8touchgfx8Scanline5resetEv>:
 8025a0e:	b510      	push	{r4, lr}
 8025a10:	4604      	mov	r4, r0
 8025a12:	f7f1 fccb 	bl	80173ac <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8025a16:	61a0      	str	r0, [r4, #24]
 8025a18:	f7f1 fcce 	bl	80173b8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8025a1c:	61e0      	str	r0, [r4, #28]
 8025a1e:	f7f1 fcd1 	bl	80173c4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8025a22:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025a26:	6220      	str	r0, [r4, #32]
 8025a28:	6160      	str	r0, [r4, #20]
 8025a2a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8025a2e:	69e3      	ldr	r3, [r4, #28]
 8025a30:	6123      	str	r3, [r4, #16]
 8025a32:	2300      	movs	r3, #0
 8025a34:	60e3      	str	r3, [r4, #12]
 8025a36:	bd10      	pop	{r4, pc}

08025a38 <_ZN8touchgfx8ScanlineC1Ev>:
 8025a38:	4b09      	ldr	r3, [pc, #36]	; (8025a60 <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 8025a3a:	b510      	push	{r4, lr}
 8025a3c:	6003      	str	r3, [r0, #0]
 8025a3e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8025a42:	4604      	mov	r4, r0
 8025a44:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8025a48:	2300      	movs	r3, #0
 8025a4a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025a4e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8025a52:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8025a56:	f7ff ffda 	bl	8025a0e <_ZN8touchgfx8Scanline5resetEv>
 8025a5a:	4620      	mov	r0, r4
 8025a5c:	bd10      	pop	{r4, pc}
 8025a5e:	bf00      	nop
 8025a60:	0802b970 	.word	0x0802b970

08025a64 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8025a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a68:	1e0c      	subs	r4, r1, #0
 8025a6a:	4605      	mov	r5, r0
 8025a6c:	4617      	mov	r7, r2
 8025a6e:	461e      	mov	r6, r3
 8025a70:	da03      	bge.n	8025a7a <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8025a72:	4426      	add	r6, r4
 8025a74:	2e01      	cmp	r6, #1
 8025a76:	d421      	bmi.n	8025abc <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025a78:	2400      	movs	r4, #0
 8025a7a:	f7f1 fc91 	bl	80173a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025a7e:	42a0      	cmp	r0, r4
 8025a80:	dd1c      	ble.n	8025abc <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8025a82:	eb04 0806 	add.w	r8, r4, r6
 8025a86:	f7f1 fc8b 	bl	80173a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025a8a:	4580      	cmp	r8, r0
 8025a8c:	d902      	bls.n	8025a94 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8025a8e:	f7f1 fc87 	bl	80173a0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8025a92:	1b06      	subs	r6, r0, r4
 8025a94:	69a8      	ldr	r0, [r5, #24]
 8025a96:	4632      	mov	r2, r6
 8025a98:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8025a9c:	4420      	add	r0, r4
 8025a9e:	f7f4 f995 	bl	8019dcc <_ZN8touchgfx6memsetEPvhm>
 8025aa2:	686b      	ldr	r3, [r5, #4]
 8025aa4:	b2b2      	uxth	r2, r6
 8025aa6:	3301      	adds	r3, #1
 8025aa8:	42a3      	cmp	r3, r4
 8025aaa:	696b      	ldr	r3, [r5, #20]
 8025aac:	d108      	bne.n	8025ac0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8025aae:	8819      	ldrh	r1, [r3, #0]
 8025ab0:	440a      	add	r2, r1
 8025ab2:	801a      	strh	r2, [r3, #0]
 8025ab4:	3c01      	subs	r4, #1
 8025ab6:	4434      	add	r4, r6
 8025ab8:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8025abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025ac0:	1c99      	adds	r1, r3, #2
 8025ac2:	6169      	str	r1, [r5, #20]
 8025ac4:	805a      	strh	r2, [r3, #2]
 8025ac6:	692b      	ldr	r3, [r5, #16]
 8025ac8:	1c9a      	adds	r2, r3, #2
 8025aca:	612a      	str	r2, [r5, #16]
 8025acc:	805c      	strh	r4, [r3, #2]
 8025ace:	68eb      	ldr	r3, [r5, #12]
 8025ad0:	3301      	adds	r3, #1
 8025ad2:	60eb      	str	r3, [r5, #12]
 8025ad4:	e7ee      	b.n	8025ab4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08025ad6 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8025ad6:	4770      	bx	lr

08025ad8 <_ZN8touchgfx15RenderingBufferD0Ev>:
 8025ad8:	b510      	push	{r4, lr}
 8025ada:	4604      	mov	r4, r0
 8025adc:	2118      	movs	r1, #24
 8025ade:	f000 f81c 	bl	8025b1a <_ZdlPvj>
 8025ae2:	4620      	mov	r0, r4
 8025ae4:	bd10      	pop	{r4, pc}
	...

08025ae8 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8025ae8:	4a04      	ldr	r2, [pc, #16]	; (8025afc <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 8025aea:	6002      	str	r2, [r0, #0]
 8025aec:	2200      	movs	r2, #0
 8025aee:	6042      	str	r2, [r0, #4]
 8025af0:	7202      	strb	r2, [r0, #8]
 8025af2:	6142      	str	r2, [r0, #20]
 8025af4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8025af8:	4770      	bx	lr
 8025afa:	bf00      	nop
 8025afc:	0802b980 	.word	0x0802b980

08025b00 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8025b00:	60c3      	str	r3, [r0, #12]
 8025b02:	9b00      	ldr	r3, [sp, #0]
 8025b04:	6041      	str	r1, [r0, #4]
 8025b06:	6103      	str	r3, [r0, #16]
 8025b08:	9b01      	ldr	r3, [sp, #4]
 8025b0a:	7202      	strb	r2, [r0, #8]
 8025b0c:	6143      	str	r3, [r0, #20]
 8025b0e:	4770      	bx	lr

08025b10 <__aeabi_atexit>:
 8025b10:	460b      	mov	r3, r1
 8025b12:	4601      	mov	r1, r0
 8025b14:	4618      	mov	r0, r3
 8025b16:	f000 b853 	b.w	8025bc0 <__cxa_atexit>

08025b1a <_ZdlPvj>:
 8025b1a:	f000 b812 	b.w	8025b42 <_ZdlPv>

08025b1e <__cxa_guard_acquire>:
 8025b1e:	6803      	ldr	r3, [r0, #0]
 8025b20:	07db      	lsls	r3, r3, #31
 8025b22:	d406      	bmi.n	8025b32 <__cxa_guard_acquire+0x14>
 8025b24:	7843      	ldrb	r3, [r0, #1]
 8025b26:	b103      	cbz	r3, 8025b2a <__cxa_guard_acquire+0xc>
 8025b28:	deff      	udf	#255	; 0xff
 8025b2a:	2301      	movs	r3, #1
 8025b2c:	7043      	strb	r3, [r0, #1]
 8025b2e:	4618      	mov	r0, r3
 8025b30:	4770      	bx	lr
 8025b32:	2000      	movs	r0, #0
 8025b34:	4770      	bx	lr

08025b36 <__cxa_guard_release>:
 8025b36:	2301      	movs	r3, #1
 8025b38:	6003      	str	r3, [r0, #0]
 8025b3a:	4770      	bx	lr

08025b3c <__cxa_pure_virtual>:
 8025b3c:	b508      	push	{r3, lr}
 8025b3e:	f000 f80f 	bl	8025b60 <_ZSt9terminatev>

08025b42 <_ZdlPv>:
 8025b42:	f000 b88f 	b.w	8025c64 <free>

08025b46 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025b46:	b508      	push	{r3, lr}
 8025b48:	4780      	blx	r0
 8025b4a:	f000 f80e 	bl	8025b6a <abort>
	...

08025b50 <_ZSt13get_terminatev>:
 8025b50:	4b02      	ldr	r3, [pc, #8]	; (8025b5c <_ZSt13get_terminatev+0xc>)
 8025b52:	6818      	ldr	r0, [r3, #0]
 8025b54:	f3bf 8f5b 	dmb	ish
 8025b58:	4770      	bx	lr
 8025b5a:	bf00      	nop
 8025b5c:	240000a4 	.word	0x240000a4

08025b60 <_ZSt9terminatev>:
 8025b60:	b508      	push	{r3, lr}
 8025b62:	f7ff fff5 	bl	8025b50 <_ZSt13get_terminatev>
 8025b66:	f7ff ffee 	bl	8025b46 <_ZN10__cxxabiv111__terminateEPFvvE>

08025b6a <abort>:
 8025b6a:	b508      	push	{r3, lr}
 8025b6c:	2006      	movs	r0, #6
 8025b6e:	f000 fc67 	bl	8026440 <raise>
 8025b72:	2001      	movs	r0, #1
 8025b74:	f7dd fd90 	bl	8003698 <_exit>

08025b78 <__assert_func>:
 8025b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025b7a:	4614      	mov	r4, r2
 8025b7c:	461a      	mov	r2, r3
 8025b7e:	4b09      	ldr	r3, [pc, #36]	; (8025ba4 <__assert_func+0x2c>)
 8025b80:	681b      	ldr	r3, [r3, #0]
 8025b82:	4605      	mov	r5, r0
 8025b84:	68d8      	ldr	r0, [r3, #12]
 8025b86:	b14c      	cbz	r4, 8025b9c <__assert_func+0x24>
 8025b88:	4b07      	ldr	r3, [pc, #28]	; (8025ba8 <__assert_func+0x30>)
 8025b8a:	9100      	str	r1, [sp, #0]
 8025b8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025b90:	4906      	ldr	r1, [pc, #24]	; (8025bac <__assert_func+0x34>)
 8025b92:	462b      	mov	r3, r5
 8025b94:	f000 f828 	bl	8025be8 <fiprintf>
 8025b98:	f7ff ffe7 	bl	8025b6a <abort>
 8025b9c:	4b04      	ldr	r3, [pc, #16]	; (8025bb0 <__assert_func+0x38>)
 8025b9e:	461c      	mov	r4, r3
 8025ba0:	e7f3      	b.n	8025b8a <__assert_func+0x12>
 8025ba2:	bf00      	nop
 8025ba4:	240000a8 	.word	0x240000a8
 8025ba8:	0802b988 	.word	0x0802b988
 8025bac:	0802b995 	.word	0x0802b995
 8025bb0:	0802b9c3 	.word	0x0802b9c3

08025bb4 <atexit>:
 8025bb4:	2300      	movs	r3, #0
 8025bb6:	4601      	mov	r1, r0
 8025bb8:	461a      	mov	r2, r3
 8025bba:	4618      	mov	r0, r3
 8025bbc:	f000 bd1c 	b.w	80265f8 <__register_exitproc>

08025bc0 <__cxa_atexit>:
 8025bc0:	b510      	push	{r4, lr}
 8025bc2:	4c05      	ldr	r4, [pc, #20]	; (8025bd8 <__cxa_atexit+0x18>)
 8025bc4:	4613      	mov	r3, r2
 8025bc6:	b12c      	cbz	r4, 8025bd4 <__cxa_atexit+0x14>
 8025bc8:	460a      	mov	r2, r1
 8025bca:	4601      	mov	r1, r0
 8025bcc:	2002      	movs	r0, #2
 8025bce:	f000 fd13 	bl	80265f8 <__register_exitproc>
 8025bd2:	bd10      	pop	{r4, pc}
 8025bd4:	4620      	mov	r0, r4
 8025bd6:	e7fc      	b.n	8025bd2 <__cxa_atexit+0x12>
 8025bd8:	080265f9 	.word	0x080265f9

08025bdc <__errno>:
 8025bdc:	4b01      	ldr	r3, [pc, #4]	; (8025be4 <__errno+0x8>)
 8025bde:	6818      	ldr	r0, [r3, #0]
 8025be0:	4770      	bx	lr
 8025be2:	bf00      	nop
 8025be4:	240000a8 	.word	0x240000a8

08025be8 <fiprintf>:
 8025be8:	b40e      	push	{r1, r2, r3}
 8025bea:	b503      	push	{r0, r1, lr}
 8025bec:	4601      	mov	r1, r0
 8025bee:	ab03      	add	r3, sp, #12
 8025bf0:	4805      	ldr	r0, [pc, #20]	; (8025c08 <fiprintf+0x20>)
 8025bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8025bf6:	6800      	ldr	r0, [r0, #0]
 8025bf8:	9301      	str	r3, [sp, #4]
 8025bfa:	f000 f925 	bl	8025e48 <_vfiprintf_r>
 8025bfe:	b002      	add	sp, #8
 8025c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8025c04:	b003      	add	sp, #12
 8025c06:	4770      	bx	lr
 8025c08:	240000a8 	.word	0x240000a8

08025c0c <__libc_init_array>:
 8025c0c:	b570      	push	{r4, r5, r6, lr}
 8025c0e:	4d0d      	ldr	r5, [pc, #52]	; (8025c44 <__libc_init_array+0x38>)
 8025c10:	4c0d      	ldr	r4, [pc, #52]	; (8025c48 <__libc_init_array+0x3c>)
 8025c12:	1b64      	subs	r4, r4, r5
 8025c14:	10a4      	asrs	r4, r4, #2
 8025c16:	2600      	movs	r6, #0
 8025c18:	42a6      	cmp	r6, r4
 8025c1a:	d109      	bne.n	8025c30 <__libc_init_array+0x24>
 8025c1c:	4d0b      	ldr	r5, [pc, #44]	; (8025c4c <__libc_init_array+0x40>)
 8025c1e:	4c0c      	ldr	r4, [pc, #48]	; (8025c50 <__libc_init_array+0x44>)
 8025c20:	f001 f824 	bl	8026c6c <_init>
 8025c24:	1b64      	subs	r4, r4, r5
 8025c26:	10a4      	asrs	r4, r4, #2
 8025c28:	2600      	movs	r6, #0
 8025c2a:	42a6      	cmp	r6, r4
 8025c2c:	d105      	bne.n	8025c3a <__libc_init_array+0x2e>
 8025c2e:	bd70      	pop	{r4, r5, r6, pc}
 8025c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8025c34:	4798      	blx	r3
 8025c36:	3601      	adds	r6, #1
 8025c38:	e7ee      	b.n	8025c18 <__libc_init_array+0xc>
 8025c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8025c3e:	4798      	blx	r3
 8025c40:	3601      	adds	r6, #1
 8025c42:	e7f2      	b.n	8025c2a <__libc_init_array+0x1e>
 8025c44:	0802ba84 	.word	0x0802ba84
 8025c48:	0802ba84 	.word	0x0802ba84
 8025c4c:	0802ba84 	.word	0x0802ba84
 8025c50:	0802ba98 	.word	0x0802ba98

08025c54 <malloc>:
 8025c54:	4b02      	ldr	r3, [pc, #8]	; (8025c60 <malloc+0xc>)
 8025c56:	4601      	mov	r1, r0
 8025c58:	6818      	ldr	r0, [r3, #0]
 8025c5a:	f000 b871 	b.w	8025d40 <_malloc_r>
 8025c5e:	bf00      	nop
 8025c60:	240000a8 	.word	0x240000a8

08025c64 <free>:
 8025c64:	4b02      	ldr	r3, [pc, #8]	; (8025c70 <free+0xc>)
 8025c66:	4601      	mov	r1, r0
 8025c68:	6818      	ldr	r0, [r3, #0]
 8025c6a:	f000 b819 	b.w	8025ca0 <_free_r>
 8025c6e:	bf00      	nop
 8025c70:	240000a8 	.word	0x240000a8

08025c74 <memcpy>:
 8025c74:	440a      	add	r2, r1
 8025c76:	4291      	cmp	r1, r2
 8025c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8025c7c:	d100      	bne.n	8025c80 <memcpy+0xc>
 8025c7e:	4770      	bx	lr
 8025c80:	b510      	push	{r4, lr}
 8025c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025c86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025c8a:	4291      	cmp	r1, r2
 8025c8c:	d1f9      	bne.n	8025c82 <memcpy+0xe>
 8025c8e:	bd10      	pop	{r4, pc}

08025c90 <memset>:
 8025c90:	4402      	add	r2, r0
 8025c92:	4603      	mov	r3, r0
 8025c94:	4293      	cmp	r3, r2
 8025c96:	d100      	bne.n	8025c9a <memset+0xa>
 8025c98:	4770      	bx	lr
 8025c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8025c9e:	e7f9      	b.n	8025c94 <memset+0x4>

08025ca0 <_free_r>:
 8025ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025ca2:	2900      	cmp	r1, #0
 8025ca4:	d048      	beq.n	8025d38 <_free_r+0x98>
 8025ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025caa:	9001      	str	r0, [sp, #4]
 8025cac:	2b00      	cmp	r3, #0
 8025cae:	f1a1 0404 	sub.w	r4, r1, #4
 8025cb2:	bfb8      	it	lt
 8025cb4:	18e4      	addlt	r4, r4, r3
 8025cb6:	f000 ff21 	bl	8026afc <__malloc_lock>
 8025cba:	4a20      	ldr	r2, [pc, #128]	; (8025d3c <_free_r+0x9c>)
 8025cbc:	9801      	ldr	r0, [sp, #4]
 8025cbe:	6813      	ldr	r3, [r2, #0]
 8025cc0:	4615      	mov	r5, r2
 8025cc2:	b933      	cbnz	r3, 8025cd2 <_free_r+0x32>
 8025cc4:	6063      	str	r3, [r4, #4]
 8025cc6:	6014      	str	r4, [r2, #0]
 8025cc8:	b003      	add	sp, #12
 8025cca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025cce:	f000 bf1b 	b.w	8026b08 <__malloc_unlock>
 8025cd2:	42a3      	cmp	r3, r4
 8025cd4:	d90b      	bls.n	8025cee <_free_r+0x4e>
 8025cd6:	6821      	ldr	r1, [r4, #0]
 8025cd8:	1862      	adds	r2, r4, r1
 8025cda:	4293      	cmp	r3, r2
 8025cdc:	bf04      	itt	eq
 8025cde:	681a      	ldreq	r2, [r3, #0]
 8025ce0:	685b      	ldreq	r3, [r3, #4]
 8025ce2:	6063      	str	r3, [r4, #4]
 8025ce4:	bf04      	itt	eq
 8025ce6:	1852      	addeq	r2, r2, r1
 8025ce8:	6022      	streq	r2, [r4, #0]
 8025cea:	602c      	str	r4, [r5, #0]
 8025cec:	e7ec      	b.n	8025cc8 <_free_r+0x28>
 8025cee:	461a      	mov	r2, r3
 8025cf0:	685b      	ldr	r3, [r3, #4]
 8025cf2:	b10b      	cbz	r3, 8025cf8 <_free_r+0x58>
 8025cf4:	42a3      	cmp	r3, r4
 8025cf6:	d9fa      	bls.n	8025cee <_free_r+0x4e>
 8025cf8:	6811      	ldr	r1, [r2, #0]
 8025cfa:	1855      	adds	r5, r2, r1
 8025cfc:	42a5      	cmp	r5, r4
 8025cfe:	d10b      	bne.n	8025d18 <_free_r+0x78>
 8025d00:	6824      	ldr	r4, [r4, #0]
 8025d02:	4421      	add	r1, r4
 8025d04:	1854      	adds	r4, r2, r1
 8025d06:	42a3      	cmp	r3, r4
 8025d08:	6011      	str	r1, [r2, #0]
 8025d0a:	d1dd      	bne.n	8025cc8 <_free_r+0x28>
 8025d0c:	681c      	ldr	r4, [r3, #0]
 8025d0e:	685b      	ldr	r3, [r3, #4]
 8025d10:	6053      	str	r3, [r2, #4]
 8025d12:	4421      	add	r1, r4
 8025d14:	6011      	str	r1, [r2, #0]
 8025d16:	e7d7      	b.n	8025cc8 <_free_r+0x28>
 8025d18:	d902      	bls.n	8025d20 <_free_r+0x80>
 8025d1a:	230c      	movs	r3, #12
 8025d1c:	6003      	str	r3, [r0, #0]
 8025d1e:	e7d3      	b.n	8025cc8 <_free_r+0x28>
 8025d20:	6825      	ldr	r5, [r4, #0]
 8025d22:	1961      	adds	r1, r4, r5
 8025d24:	428b      	cmp	r3, r1
 8025d26:	bf04      	itt	eq
 8025d28:	6819      	ldreq	r1, [r3, #0]
 8025d2a:	685b      	ldreq	r3, [r3, #4]
 8025d2c:	6063      	str	r3, [r4, #4]
 8025d2e:	bf04      	itt	eq
 8025d30:	1949      	addeq	r1, r1, r5
 8025d32:	6021      	streq	r1, [r4, #0]
 8025d34:	6054      	str	r4, [r2, #4]
 8025d36:	e7c7      	b.n	8025cc8 <_free_r+0x28>
 8025d38:	b003      	add	sp, #12
 8025d3a:	bd30      	pop	{r4, r5, pc}
 8025d3c:	2400c9a0 	.word	0x2400c9a0

08025d40 <_malloc_r>:
 8025d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d42:	1ccd      	adds	r5, r1, #3
 8025d44:	f025 0503 	bic.w	r5, r5, #3
 8025d48:	3508      	adds	r5, #8
 8025d4a:	2d0c      	cmp	r5, #12
 8025d4c:	bf38      	it	cc
 8025d4e:	250c      	movcc	r5, #12
 8025d50:	2d00      	cmp	r5, #0
 8025d52:	4606      	mov	r6, r0
 8025d54:	db01      	blt.n	8025d5a <_malloc_r+0x1a>
 8025d56:	42a9      	cmp	r1, r5
 8025d58:	d903      	bls.n	8025d62 <_malloc_r+0x22>
 8025d5a:	230c      	movs	r3, #12
 8025d5c:	6033      	str	r3, [r6, #0]
 8025d5e:	2000      	movs	r0, #0
 8025d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d62:	f000 fecb 	bl	8026afc <__malloc_lock>
 8025d66:	4921      	ldr	r1, [pc, #132]	; (8025dec <_malloc_r+0xac>)
 8025d68:	680a      	ldr	r2, [r1, #0]
 8025d6a:	4614      	mov	r4, r2
 8025d6c:	b99c      	cbnz	r4, 8025d96 <_malloc_r+0x56>
 8025d6e:	4f20      	ldr	r7, [pc, #128]	; (8025df0 <_malloc_r+0xb0>)
 8025d70:	683b      	ldr	r3, [r7, #0]
 8025d72:	b923      	cbnz	r3, 8025d7e <_malloc_r+0x3e>
 8025d74:	4621      	mov	r1, r4
 8025d76:	4630      	mov	r0, r6
 8025d78:	f000 fb2a 	bl	80263d0 <_sbrk_r>
 8025d7c:	6038      	str	r0, [r7, #0]
 8025d7e:	4629      	mov	r1, r5
 8025d80:	4630      	mov	r0, r6
 8025d82:	f000 fb25 	bl	80263d0 <_sbrk_r>
 8025d86:	1c43      	adds	r3, r0, #1
 8025d88:	d123      	bne.n	8025dd2 <_malloc_r+0x92>
 8025d8a:	230c      	movs	r3, #12
 8025d8c:	6033      	str	r3, [r6, #0]
 8025d8e:	4630      	mov	r0, r6
 8025d90:	f000 feba 	bl	8026b08 <__malloc_unlock>
 8025d94:	e7e3      	b.n	8025d5e <_malloc_r+0x1e>
 8025d96:	6823      	ldr	r3, [r4, #0]
 8025d98:	1b5b      	subs	r3, r3, r5
 8025d9a:	d417      	bmi.n	8025dcc <_malloc_r+0x8c>
 8025d9c:	2b0b      	cmp	r3, #11
 8025d9e:	d903      	bls.n	8025da8 <_malloc_r+0x68>
 8025da0:	6023      	str	r3, [r4, #0]
 8025da2:	441c      	add	r4, r3
 8025da4:	6025      	str	r5, [r4, #0]
 8025da6:	e004      	b.n	8025db2 <_malloc_r+0x72>
 8025da8:	6863      	ldr	r3, [r4, #4]
 8025daa:	42a2      	cmp	r2, r4
 8025dac:	bf0c      	ite	eq
 8025dae:	600b      	streq	r3, [r1, #0]
 8025db0:	6053      	strne	r3, [r2, #4]
 8025db2:	4630      	mov	r0, r6
 8025db4:	f000 fea8 	bl	8026b08 <__malloc_unlock>
 8025db8:	f104 000b 	add.w	r0, r4, #11
 8025dbc:	1d23      	adds	r3, r4, #4
 8025dbe:	f020 0007 	bic.w	r0, r0, #7
 8025dc2:	1ac2      	subs	r2, r0, r3
 8025dc4:	d0cc      	beq.n	8025d60 <_malloc_r+0x20>
 8025dc6:	1a1b      	subs	r3, r3, r0
 8025dc8:	50a3      	str	r3, [r4, r2]
 8025dca:	e7c9      	b.n	8025d60 <_malloc_r+0x20>
 8025dcc:	4622      	mov	r2, r4
 8025dce:	6864      	ldr	r4, [r4, #4]
 8025dd0:	e7cc      	b.n	8025d6c <_malloc_r+0x2c>
 8025dd2:	1cc4      	adds	r4, r0, #3
 8025dd4:	f024 0403 	bic.w	r4, r4, #3
 8025dd8:	42a0      	cmp	r0, r4
 8025dda:	d0e3      	beq.n	8025da4 <_malloc_r+0x64>
 8025ddc:	1a21      	subs	r1, r4, r0
 8025dde:	4630      	mov	r0, r6
 8025de0:	f000 faf6 	bl	80263d0 <_sbrk_r>
 8025de4:	3001      	adds	r0, #1
 8025de6:	d1dd      	bne.n	8025da4 <_malloc_r+0x64>
 8025de8:	e7cf      	b.n	8025d8a <_malloc_r+0x4a>
 8025dea:	bf00      	nop
 8025dec:	2400c9a0 	.word	0x2400c9a0
 8025df0:	2400c9a4 	.word	0x2400c9a4

08025df4 <__sfputc_r>:
 8025df4:	6893      	ldr	r3, [r2, #8]
 8025df6:	3b01      	subs	r3, #1
 8025df8:	2b00      	cmp	r3, #0
 8025dfa:	b410      	push	{r4}
 8025dfc:	6093      	str	r3, [r2, #8]
 8025dfe:	da08      	bge.n	8025e12 <__sfputc_r+0x1e>
 8025e00:	6994      	ldr	r4, [r2, #24]
 8025e02:	42a3      	cmp	r3, r4
 8025e04:	db01      	blt.n	8025e0a <__sfputc_r+0x16>
 8025e06:	290a      	cmp	r1, #10
 8025e08:	d103      	bne.n	8025e12 <__sfputc_r+0x1e>
 8025e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025e0e:	f000 bb33 	b.w	8026478 <__swbuf_r>
 8025e12:	6813      	ldr	r3, [r2, #0]
 8025e14:	1c58      	adds	r0, r3, #1
 8025e16:	6010      	str	r0, [r2, #0]
 8025e18:	7019      	strb	r1, [r3, #0]
 8025e1a:	4608      	mov	r0, r1
 8025e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025e20:	4770      	bx	lr

08025e22 <__sfputs_r>:
 8025e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025e24:	4606      	mov	r6, r0
 8025e26:	460f      	mov	r7, r1
 8025e28:	4614      	mov	r4, r2
 8025e2a:	18d5      	adds	r5, r2, r3
 8025e2c:	42ac      	cmp	r4, r5
 8025e2e:	d101      	bne.n	8025e34 <__sfputs_r+0x12>
 8025e30:	2000      	movs	r0, #0
 8025e32:	e007      	b.n	8025e44 <__sfputs_r+0x22>
 8025e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025e38:	463a      	mov	r2, r7
 8025e3a:	4630      	mov	r0, r6
 8025e3c:	f7ff ffda 	bl	8025df4 <__sfputc_r>
 8025e40:	1c43      	adds	r3, r0, #1
 8025e42:	d1f3      	bne.n	8025e2c <__sfputs_r+0xa>
 8025e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025e48 <_vfiprintf_r>:
 8025e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e4c:	460d      	mov	r5, r1
 8025e4e:	b09d      	sub	sp, #116	; 0x74
 8025e50:	4614      	mov	r4, r2
 8025e52:	4698      	mov	r8, r3
 8025e54:	4606      	mov	r6, r0
 8025e56:	b118      	cbz	r0, 8025e60 <_vfiprintf_r+0x18>
 8025e58:	6983      	ldr	r3, [r0, #24]
 8025e5a:	b90b      	cbnz	r3, 8025e60 <_vfiprintf_r+0x18>
 8025e5c:	f000 fd48 	bl	80268f0 <__sinit>
 8025e60:	4b89      	ldr	r3, [pc, #548]	; (8026088 <_vfiprintf_r+0x240>)
 8025e62:	429d      	cmp	r5, r3
 8025e64:	d11b      	bne.n	8025e9e <_vfiprintf_r+0x56>
 8025e66:	6875      	ldr	r5, [r6, #4]
 8025e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025e6a:	07d9      	lsls	r1, r3, #31
 8025e6c:	d405      	bmi.n	8025e7a <_vfiprintf_r+0x32>
 8025e6e:	89ab      	ldrh	r3, [r5, #12]
 8025e70:	059a      	lsls	r2, r3, #22
 8025e72:	d402      	bmi.n	8025e7a <_vfiprintf_r+0x32>
 8025e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025e76:	f000 fdd9 	bl	8026a2c <__retarget_lock_acquire_recursive>
 8025e7a:	89ab      	ldrh	r3, [r5, #12]
 8025e7c:	071b      	lsls	r3, r3, #28
 8025e7e:	d501      	bpl.n	8025e84 <_vfiprintf_r+0x3c>
 8025e80:	692b      	ldr	r3, [r5, #16]
 8025e82:	b9eb      	cbnz	r3, 8025ec0 <_vfiprintf_r+0x78>
 8025e84:	4629      	mov	r1, r5
 8025e86:	4630      	mov	r0, r6
 8025e88:	f000 fb48 	bl	802651c <__swsetup_r>
 8025e8c:	b1c0      	cbz	r0, 8025ec0 <_vfiprintf_r+0x78>
 8025e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025e90:	07dc      	lsls	r4, r3, #31
 8025e92:	d50e      	bpl.n	8025eb2 <_vfiprintf_r+0x6a>
 8025e94:	f04f 30ff 	mov.w	r0, #4294967295
 8025e98:	b01d      	add	sp, #116	; 0x74
 8025e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e9e:	4b7b      	ldr	r3, [pc, #492]	; (802608c <_vfiprintf_r+0x244>)
 8025ea0:	429d      	cmp	r5, r3
 8025ea2:	d101      	bne.n	8025ea8 <_vfiprintf_r+0x60>
 8025ea4:	68b5      	ldr	r5, [r6, #8]
 8025ea6:	e7df      	b.n	8025e68 <_vfiprintf_r+0x20>
 8025ea8:	4b79      	ldr	r3, [pc, #484]	; (8026090 <_vfiprintf_r+0x248>)
 8025eaa:	429d      	cmp	r5, r3
 8025eac:	bf08      	it	eq
 8025eae:	68f5      	ldreq	r5, [r6, #12]
 8025eb0:	e7da      	b.n	8025e68 <_vfiprintf_r+0x20>
 8025eb2:	89ab      	ldrh	r3, [r5, #12]
 8025eb4:	0598      	lsls	r0, r3, #22
 8025eb6:	d4ed      	bmi.n	8025e94 <_vfiprintf_r+0x4c>
 8025eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025eba:	f000 fdb9 	bl	8026a30 <__retarget_lock_release_recursive>
 8025ebe:	e7e9      	b.n	8025e94 <_vfiprintf_r+0x4c>
 8025ec0:	2300      	movs	r3, #0
 8025ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8025ec4:	2320      	movs	r3, #32
 8025ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8025ece:	2330      	movs	r3, #48	; 0x30
 8025ed0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8026094 <_vfiprintf_r+0x24c>
 8025ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025ed8:	f04f 0901 	mov.w	r9, #1
 8025edc:	4623      	mov	r3, r4
 8025ede:	469a      	mov	sl, r3
 8025ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025ee4:	b10a      	cbz	r2, 8025eea <_vfiprintf_r+0xa2>
 8025ee6:	2a25      	cmp	r2, #37	; 0x25
 8025ee8:	d1f9      	bne.n	8025ede <_vfiprintf_r+0x96>
 8025eea:	ebba 0b04 	subs.w	fp, sl, r4
 8025eee:	d00b      	beq.n	8025f08 <_vfiprintf_r+0xc0>
 8025ef0:	465b      	mov	r3, fp
 8025ef2:	4622      	mov	r2, r4
 8025ef4:	4629      	mov	r1, r5
 8025ef6:	4630      	mov	r0, r6
 8025ef8:	f7ff ff93 	bl	8025e22 <__sfputs_r>
 8025efc:	3001      	adds	r0, #1
 8025efe:	f000 80aa 	beq.w	8026056 <_vfiprintf_r+0x20e>
 8025f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025f04:	445a      	add	r2, fp
 8025f06:	9209      	str	r2, [sp, #36]	; 0x24
 8025f08:	f89a 3000 	ldrb.w	r3, [sl]
 8025f0c:	2b00      	cmp	r3, #0
 8025f0e:	f000 80a2 	beq.w	8026056 <_vfiprintf_r+0x20e>
 8025f12:	2300      	movs	r3, #0
 8025f14:	f04f 32ff 	mov.w	r2, #4294967295
 8025f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025f1c:	f10a 0a01 	add.w	sl, sl, #1
 8025f20:	9304      	str	r3, [sp, #16]
 8025f22:	9307      	str	r3, [sp, #28]
 8025f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025f28:	931a      	str	r3, [sp, #104]	; 0x68
 8025f2a:	4654      	mov	r4, sl
 8025f2c:	2205      	movs	r2, #5
 8025f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025f32:	4858      	ldr	r0, [pc, #352]	; (8026094 <_vfiprintf_r+0x24c>)
 8025f34:	f7da f9dc 	bl	80002f0 <memchr>
 8025f38:	9a04      	ldr	r2, [sp, #16]
 8025f3a:	b9d8      	cbnz	r0, 8025f74 <_vfiprintf_r+0x12c>
 8025f3c:	06d1      	lsls	r1, r2, #27
 8025f3e:	bf44      	itt	mi
 8025f40:	2320      	movmi	r3, #32
 8025f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025f46:	0713      	lsls	r3, r2, #28
 8025f48:	bf44      	itt	mi
 8025f4a:	232b      	movmi	r3, #43	; 0x2b
 8025f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025f50:	f89a 3000 	ldrb.w	r3, [sl]
 8025f54:	2b2a      	cmp	r3, #42	; 0x2a
 8025f56:	d015      	beq.n	8025f84 <_vfiprintf_r+0x13c>
 8025f58:	9a07      	ldr	r2, [sp, #28]
 8025f5a:	4654      	mov	r4, sl
 8025f5c:	2000      	movs	r0, #0
 8025f5e:	f04f 0c0a 	mov.w	ip, #10
 8025f62:	4621      	mov	r1, r4
 8025f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025f68:	3b30      	subs	r3, #48	; 0x30
 8025f6a:	2b09      	cmp	r3, #9
 8025f6c:	d94e      	bls.n	802600c <_vfiprintf_r+0x1c4>
 8025f6e:	b1b0      	cbz	r0, 8025f9e <_vfiprintf_r+0x156>
 8025f70:	9207      	str	r2, [sp, #28]
 8025f72:	e014      	b.n	8025f9e <_vfiprintf_r+0x156>
 8025f74:	eba0 0308 	sub.w	r3, r0, r8
 8025f78:	fa09 f303 	lsl.w	r3, r9, r3
 8025f7c:	4313      	orrs	r3, r2
 8025f7e:	9304      	str	r3, [sp, #16]
 8025f80:	46a2      	mov	sl, r4
 8025f82:	e7d2      	b.n	8025f2a <_vfiprintf_r+0xe2>
 8025f84:	9b03      	ldr	r3, [sp, #12]
 8025f86:	1d19      	adds	r1, r3, #4
 8025f88:	681b      	ldr	r3, [r3, #0]
 8025f8a:	9103      	str	r1, [sp, #12]
 8025f8c:	2b00      	cmp	r3, #0
 8025f8e:	bfbb      	ittet	lt
 8025f90:	425b      	neglt	r3, r3
 8025f92:	f042 0202 	orrlt.w	r2, r2, #2
 8025f96:	9307      	strge	r3, [sp, #28]
 8025f98:	9307      	strlt	r3, [sp, #28]
 8025f9a:	bfb8      	it	lt
 8025f9c:	9204      	strlt	r2, [sp, #16]
 8025f9e:	7823      	ldrb	r3, [r4, #0]
 8025fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8025fa2:	d10c      	bne.n	8025fbe <_vfiprintf_r+0x176>
 8025fa4:	7863      	ldrb	r3, [r4, #1]
 8025fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8025fa8:	d135      	bne.n	8026016 <_vfiprintf_r+0x1ce>
 8025faa:	9b03      	ldr	r3, [sp, #12]
 8025fac:	1d1a      	adds	r2, r3, #4
 8025fae:	681b      	ldr	r3, [r3, #0]
 8025fb0:	9203      	str	r2, [sp, #12]
 8025fb2:	2b00      	cmp	r3, #0
 8025fb4:	bfb8      	it	lt
 8025fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8025fba:	3402      	adds	r4, #2
 8025fbc:	9305      	str	r3, [sp, #20]
 8025fbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80260a4 <_vfiprintf_r+0x25c>
 8025fc2:	7821      	ldrb	r1, [r4, #0]
 8025fc4:	2203      	movs	r2, #3
 8025fc6:	4650      	mov	r0, sl
 8025fc8:	f7da f992 	bl	80002f0 <memchr>
 8025fcc:	b140      	cbz	r0, 8025fe0 <_vfiprintf_r+0x198>
 8025fce:	2340      	movs	r3, #64	; 0x40
 8025fd0:	eba0 000a 	sub.w	r0, r0, sl
 8025fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8025fd8:	9b04      	ldr	r3, [sp, #16]
 8025fda:	4303      	orrs	r3, r0
 8025fdc:	3401      	adds	r4, #1
 8025fde:	9304      	str	r3, [sp, #16]
 8025fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025fe4:	482c      	ldr	r0, [pc, #176]	; (8026098 <_vfiprintf_r+0x250>)
 8025fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025fea:	2206      	movs	r2, #6
 8025fec:	f7da f980 	bl	80002f0 <memchr>
 8025ff0:	2800      	cmp	r0, #0
 8025ff2:	d03f      	beq.n	8026074 <_vfiprintf_r+0x22c>
 8025ff4:	4b29      	ldr	r3, [pc, #164]	; (802609c <_vfiprintf_r+0x254>)
 8025ff6:	bb1b      	cbnz	r3, 8026040 <_vfiprintf_r+0x1f8>
 8025ff8:	9b03      	ldr	r3, [sp, #12]
 8025ffa:	3307      	adds	r3, #7
 8025ffc:	f023 0307 	bic.w	r3, r3, #7
 8026000:	3308      	adds	r3, #8
 8026002:	9303      	str	r3, [sp, #12]
 8026004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026006:	443b      	add	r3, r7
 8026008:	9309      	str	r3, [sp, #36]	; 0x24
 802600a:	e767      	b.n	8025edc <_vfiprintf_r+0x94>
 802600c:	fb0c 3202 	mla	r2, ip, r2, r3
 8026010:	460c      	mov	r4, r1
 8026012:	2001      	movs	r0, #1
 8026014:	e7a5      	b.n	8025f62 <_vfiprintf_r+0x11a>
 8026016:	2300      	movs	r3, #0
 8026018:	3401      	adds	r4, #1
 802601a:	9305      	str	r3, [sp, #20]
 802601c:	4619      	mov	r1, r3
 802601e:	f04f 0c0a 	mov.w	ip, #10
 8026022:	4620      	mov	r0, r4
 8026024:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026028:	3a30      	subs	r2, #48	; 0x30
 802602a:	2a09      	cmp	r2, #9
 802602c:	d903      	bls.n	8026036 <_vfiprintf_r+0x1ee>
 802602e:	2b00      	cmp	r3, #0
 8026030:	d0c5      	beq.n	8025fbe <_vfiprintf_r+0x176>
 8026032:	9105      	str	r1, [sp, #20]
 8026034:	e7c3      	b.n	8025fbe <_vfiprintf_r+0x176>
 8026036:	fb0c 2101 	mla	r1, ip, r1, r2
 802603a:	4604      	mov	r4, r0
 802603c:	2301      	movs	r3, #1
 802603e:	e7f0      	b.n	8026022 <_vfiprintf_r+0x1da>
 8026040:	ab03      	add	r3, sp, #12
 8026042:	9300      	str	r3, [sp, #0]
 8026044:	462a      	mov	r2, r5
 8026046:	4b16      	ldr	r3, [pc, #88]	; (80260a0 <_vfiprintf_r+0x258>)
 8026048:	a904      	add	r1, sp, #16
 802604a:	4630      	mov	r0, r6
 802604c:	f3af 8000 	nop.w
 8026050:	4607      	mov	r7, r0
 8026052:	1c78      	adds	r0, r7, #1
 8026054:	d1d6      	bne.n	8026004 <_vfiprintf_r+0x1bc>
 8026056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026058:	07d9      	lsls	r1, r3, #31
 802605a:	d405      	bmi.n	8026068 <_vfiprintf_r+0x220>
 802605c:	89ab      	ldrh	r3, [r5, #12]
 802605e:	059a      	lsls	r2, r3, #22
 8026060:	d402      	bmi.n	8026068 <_vfiprintf_r+0x220>
 8026062:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026064:	f000 fce4 	bl	8026a30 <__retarget_lock_release_recursive>
 8026068:	89ab      	ldrh	r3, [r5, #12]
 802606a:	065b      	lsls	r3, r3, #25
 802606c:	f53f af12 	bmi.w	8025e94 <_vfiprintf_r+0x4c>
 8026070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026072:	e711      	b.n	8025e98 <_vfiprintf_r+0x50>
 8026074:	ab03      	add	r3, sp, #12
 8026076:	9300      	str	r3, [sp, #0]
 8026078:	462a      	mov	r2, r5
 802607a:	4b09      	ldr	r3, [pc, #36]	; (80260a0 <_vfiprintf_r+0x258>)
 802607c:	a904      	add	r1, sp, #16
 802607e:	4630      	mov	r0, r6
 8026080:	f000 f880 	bl	8026184 <_printf_i>
 8026084:	e7e4      	b.n	8026050 <_vfiprintf_r+0x208>
 8026086:	bf00      	nop
 8026088:	0802ba20 	.word	0x0802ba20
 802608c:	0802ba40 	.word	0x0802ba40
 8026090:	0802ba00 	.word	0x0802ba00
 8026094:	0802b9c8 	.word	0x0802b9c8
 8026098:	0802b9d2 	.word	0x0802b9d2
 802609c:	00000000 	.word	0x00000000
 80260a0:	08025e23 	.word	0x08025e23
 80260a4:	0802b9ce 	.word	0x0802b9ce

080260a8 <_printf_common>:
 80260a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80260ac:	4616      	mov	r6, r2
 80260ae:	4699      	mov	r9, r3
 80260b0:	688a      	ldr	r2, [r1, #8]
 80260b2:	690b      	ldr	r3, [r1, #16]
 80260b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80260b8:	4293      	cmp	r3, r2
 80260ba:	bfb8      	it	lt
 80260bc:	4613      	movlt	r3, r2
 80260be:	6033      	str	r3, [r6, #0]
 80260c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80260c4:	4607      	mov	r7, r0
 80260c6:	460c      	mov	r4, r1
 80260c8:	b10a      	cbz	r2, 80260ce <_printf_common+0x26>
 80260ca:	3301      	adds	r3, #1
 80260cc:	6033      	str	r3, [r6, #0]
 80260ce:	6823      	ldr	r3, [r4, #0]
 80260d0:	0699      	lsls	r1, r3, #26
 80260d2:	bf42      	ittt	mi
 80260d4:	6833      	ldrmi	r3, [r6, #0]
 80260d6:	3302      	addmi	r3, #2
 80260d8:	6033      	strmi	r3, [r6, #0]
 80260da:	6825      	ldr	r5, [r4, #0]
 80260dc:	f015 0506 	ands.w	r5, r5, #6
 80260e0:	d106      	bne.n	80260f0 <_printf_common+0x48>
 80260e2:	f104 0a19 	add.w	sl, r4, #25
 80260e6:	68e3      	ldr	r3, [r4, #12]
 80260e8:	6832      	ldr	r2, [r6, #0]
 80260ea:	1a9b      	subs	r3, r3, r2
 80260ec:	42ab      	cmp	r3, r5
 80260ee:	dc26      	bgt.n	802613e <_printf_common+0x96>
 80260f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80260f4:	1e13      	subs	r3, r2, #0
 80260f6:	6822      	ldr	r2, [r4, #0]
 80260f8:	bf18      	it	ne
 80260fa:	2301      	movne	r3, #1
 80260fc:	0692      	lsls	r2, r2, #26
 80260fe:	d42b      	bmi.n	8026158 <_printf_common+0xb0>
 8026100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026104:	4649      	mov	r1, r9
 8026106:	4638      	mov	r0, r7
 8026108:	47c0      	blx	r8
 802610a:	3001      	adds	r0, #1
 802610c:	d01e      	beq.n	802614c <_printf_common+0xa4>
 802610e:	6823      	ldr	r3, [r4, #0]
 8026110:	68e5      	ldr	r5, [r4, #12]
 8026112:	6832      	ldr	r2, [r6, #0]
 8026114:	f003 0306 	and.w	r3, r3, #6
 8026118:	2b04      	cmp	r3, #4
 802611a:	bf08      	it	eq
 802611c:	1aad      	subeq	r5, r5, r2
 802611e:	68a3      	ldr	r3, [r4, #8]
 8026120:	6922      	ldr	r2, [r4, #16]
 8026122:	bf0c      	ite	eq
 8026124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026128:	2500      	movne	r5, #0
 802612a:	4293      	cmp	r3, r2
 802612c:	bfc4      	itt	gt
 802612e:	1a9b      	subgt	r3, r3, r2
 8026130:	18ed      	addgt	r5, r5, r3
 8026132:	2600      	movs	r6, #0
 8026134:	341a      	adds	r4, #26
 8026136:	42b5      	cmp	r5, r6
 8026138:	d11a      	bne.n	8026170 <_printf_common+0xc8>
 802613a:	2000      	movs	r0, #0
 802613c:	e008      	b.n	8026150 <_printf_common+0xa8>
 802613e:	2301      	movs	r3, #1
 8026140:	4652      	mov	r2, sl
 8026142:	4649      	mov	r1, r9
 8026144:	4638      	mov	r0, r7
 8026146:	47c0      	blx	r8
 8026148:	3001      	adds	r0, #1
 802614a:	d103      	bne.n	8026154 <_printf_common+0xac>
 802614c:	f04f 30ff 	mov.w	r0, #4294967295
 8026150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026154:	3501      	adds	r5, #1
 8026156:	e7c6      	b.n	80260e6 <_printf_common+0x3e>
 8026158:	18e1      	adds	r1, r4, r3
 802615a:	1c5a      	adds	r2, r3, #1
 802615c:	2030      	movs	r0, #48	; 0x30
 802615e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026162:	4422      	add	r2, r4
 8026164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802616c:	3302      	adds	r3, #2
 802616e:	e7c7      	b.n	8026100 <_printf_common+0x58>
 8026170:	2301      	movs	r3, #1
 8026172:	4622      	mov	r2, r4
 8026174:	4649      	mov	r1, r9
 8026176:	4638      	mov	r0, r7
 8026178:	47c0      	blx	r8
 802617a:	3001      	adds	r0, #1
 802617c:	d0e6      	beq.n	802614c <_printf_common+0xa4>
 802617e:	3601      	adds	r6, #1
 8026180:	e7d9      	b.n	8026136 <_printf_common+0x8e>
	...

08026184 <_printf_i>:
 8026184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026188:	460c      	mov	r4, r1
 802618a:	4691      	mov	r9, r2
 802618c:	7e27      	ldrb	r7, [r4, #24]
 802618e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026190:	2f78      	cmp	r7, #120	; 0x78
 8026192:	4680      	mov	r8, r0
 8026194:	469a      	mov	sl, r3
 8026196:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802619a:	d807      	bhi.n	80261ac <_printf_i+0x28>
 802619c:	2f62      	cmp	r7, #98	; 0x62
 802619e:	d80a      	bhi.n	80261b6 <_printf_i+0x32>
 80261a0:	2f00      	cmp	r7, #0
 80261a2:	f000 80d8 	beq.w	8026356 <_printf_i+0x1d2>
 80261a6:	2f58      	cmp	r7, #88	; 0x58
 80261a8:	f000 80a3 	beq.w	80262f2 <_printf_i+0x16e>
 80261ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80261b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80261b4:	e03a      	b.n	802622c <_printf_i+0xa8>
 80261b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80261ba:	2b15      	cmp	r3, #21
 80261bc:	d8f6      	bhi.n	80261ac <_printf_i+0x28>
 80261be:	a001      	add	r0, pc, #4	; (adr r0, 80261c4 <_printf_i+0x40>)
 80261c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80261c4:	0802621d 	.word	0x0802621d
 80261c8:	08026231 	.word	0x08026231
 80261cc:	080261ad 	.word	0x080261ad
 80261d0:	080261ad 	.word	0x080261ad
 80261d4:	080261ad 	.word	0x080261ad
 80261d8:	080261ad 	.word	0x080261ad
 80261dc:	08026231 	.word	0x08026231
 80261e0:	080261ad 	.word	0x080261ad
 80261e4:	080261ad 	.word	0x080261ad
 80261e8:	080261ad 	.word	0x080261ad
 80261ec:	080261ad 	.word	0x080261ad
 80261f0:	0802633d 	.word	0x0802633d
 80261f4:	08026261 	.word	0x08026261
 80261f8:	0802631f 	.word	0x0802631f
 80261fc:	080261ad 	.word	0x080261ad
 8026200:	080261ad 	.word	0x080261ad
 8026204:	0802635f 	.word	0x0802635f
 8026208:	080261ad 	.word	0x080261ad
 802620c:	08026261 	.word	0x08026261
 8026210:	080261ad 	.word	0x080261ad
 8026214:	080261ad 	.word	0x080261ad
 8026218:	08026327 	.word	0x08026327
 802621c:	680b      	ldr	r3, [r1, #0]
 802621e:	1d1a      	adds	r2, r3, #4
 8026220:	681b      	ldr	r3, [r3, #0]
 8026222:	600a      	str	r2, [r1, #0]
 8026224:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8026228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802622c:	2301      	movs	r3, #1
 802622e:	e0a3      	b.n	8026378 <_printf_i+0x1f4>
 8026230:	6825      	ldr	r5, [r4, #0]
 8026232:	6808      	ldr	r0, [r1, #0]
 8026234:	062e      	lsls	r6, r5, #24
 8026236:	f100 0304 	add.w	r3, r0, #4
 802623a:	d50a      	bpl.n	8026252 <_printf_i+0xce>
 802623c:	6805      	ldr	r5, [r0, #0]
 802623e:	600b      	str	r3, [r1, #0]
 8026240:	2d00      	cmp	r5, #0
 8026242:	da03      	bge.n	802624c <_printf_i+0xc8>
 8026244:	232d      	movs	r3, #45	; 0x2d
 8026246:	426d      	negs	r5, r5
 8026248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802624c:	485e      	ldr	r0, [pc, #376]	; (80263c8 <_printf_i+0x244>)
 802624e:	230a      	movs	r3, #10
 8026250:	e019      	b.n	8026286 <_printf_i+0x102>
 8026252:	f015 0f40 	tst.w	r5, #64	; 0x40
 8026256:	6805      	ldr	r5, [r0, #0]
 8026258:	600b      	str	r3, [r1, #0]
 802625a:	bf18      	it	ne
 802625c:	b22d      	sxthne	r5, r5
 802625e:	e7ef      	b.n	8026240 <_printf_i+0xbc>
 8026260:	680b      	ldr	r3, [r1, #0]
 8026262:	6825      	ldr	r5, [r4, #0]
 8026264:	1d18      	adds	r0, r3, #4
 8026266:	6008      	str	r0, [r1, #0]
 8026268:	0628      	lsls	r0, r5, #24
 802626a:	d501      	bpl.n	8026270 <_printf_i+0xec>
 802626c:	681d      	ldr	r5, [r3, #0]
 802626e:	e002      	b.n	8026276 <_printf_i+0xf2>
 8026270:	0669      	lsls	r1, r5, #25
 8026272:	d5fb      	bpl.n	802626c <_printf_i+0xe8>
 8026274:	881d      	ldrh	r5, [r3, #0]
 8026276:	4854      	ldr	r0, [pc, #336]	; (80263c8 <_printf_i+0x244>)
 8026278:	2f6f      	cmp	r7, #111	; 0x6f
 802627a:	bf0c      	ite	eq
 802627c:	2308      	moveq	r3, #8
 802627e:	230a      	movne	r3, #10
 8026280:	2100      	movs	r1, #0
 8026282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026286:	6866      	ldr	r6, [r4, #4]
 8026288:	60a6      	str	r6, [r4, #8]
 802628a:	2e00      	cmp	r6, #0
 802628c:	bfa2      	ittt	ge
 802628e:	6821      	ldrge	r1, [r4, #0]
 8026290:	f021 0104 	bicge.w	r1, r1, #4
 8026294:	6021      	strge	r1, [r4, #0]
 8026296:	b90d      	cbnz	r5, 802629c <_printf_i+0x118>
 8026298:	2e00      	cmp	r6, #0
 802629a:	d04d      	beq.n	8026338 <_printf_i+0x1b4>
 802629c:	4616      	mov	r6, r2
 802629e:	fbb5 f1f3 	udiv	r1, r5, r3
 80262a2:	fb03 5711 	mls	r7, r3, r1, r5
 80262a6:	5dc7      	ldrb	r7, [r0, r7]
 80262a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80262ac:	462f      	mov	r7, r5
 80262ae:	42bb      	cmp	r3, r7
 80262b0:	460d      	mov	r5, r1
 80262b2:	d9f4      	bls.n	802629e <_printf_i+0x11a>
 80262b4:	2b08      	cmp	r3, #8
 80262b6:	d10b      	bne.n	80262d0 <_printf_i+0x14c>
 80262b8:	6823      	ldr	r3, [r4, #0]
 80262ba:	07df      	lsls	r7, r3, #31
 80262bc:	d508      	bpl.n	80262d0 <_printf_i+0x14c>
 80262be:	6923      	ldr	r3, [r4, #16]
 80262c0:	6861      	ldr	r1, [r4, #4]
 80262c2:	4299      	cmp	r1, r3
 80262c4:	bfde      	ittt	le
 80262c6:	2330      	movle	r3, #48	; 0x30
 80262c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80262cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80262d0:	1b92      	subs	r2, r2, r6
 80262d2:	6122      	str	r2, [r4, #16]
 80262d4:	f8cd a000 	str.w	sl, [sp]
 80262d8:	464b      	mov	r3, r9
 80262da:	aa03      	add	r2, sp, #12
 80262dc:	4621      	mov	r1, r4
 80262de:	4640      	mov	r0, r8
 80262e0:	f7ff fee2 	bl	80260a8 <_printf_common>
 80262e4:	3001      	adds	r0, #1
 80262e6:	d14c      	bne.n	8026382 <_printf_i+0x1fe>
 80262e8:	f04f 30ff 	mov.w	r0, #4294967295
 80262ec:	b004      	add	sp, #16
 80262ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80262f2:	4835      	ldr	r0, [pc, #212]	; (80263c8 <_printf_i+0x244>)
 80262f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80262f8:	6823      	ldr	r3, [r4, #0]
 80262fa:	680e      	ldr	r6, [r1, #0]
 80262fc:	061f      	lsls	r7, r3, #24
 80262fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8026302:	600e      	str	r6, [r1, #0]
 8026304:	d514      	bpl.n	8026330 <_printf_i+0x1ac>
 8026306:	07d9      	lsls	r1, r3, #31
 8026308:	bf44      	itt	mi
 802630a:	f043 0320 	orrmi.w	r3, r3, #32
 802630e:	6023      	strmi	r3, [r4, #0]
 8026310:	b91d      	cbnz	r5, 802631a <_printf_i+0x196>
 8026312:	6823      	ldr	r3, [r4, #0]
 8026314:	f023 0320 	bic.w	r3, r3, #32
 8026318:	6023      	str	r3, [r4, #0]
 802631a:	2310      	movs	r3, #16
 802631c:	e7b0      	b.n	8026280 <_printf_i+0xfc>
 802631e:	6823      	ldr	r3, [r4, #0]
 8026320:	f043 0320 	orr.w	r3, r3, #32
 8026324:	6023      	str	r3, [r4, #0]
 8026326:	2378      	movs	r3, #120	; 0x78
 8026328:	4828      	ldr	r0, [pc, #160]	; (80263cc <_printf_i+0x248>)
 802632a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802632e:	e7e3      	b.n	80262f8 <_printf_i+0x174>
 8026330:	065e      	lsls	r6, r3, #25
 8026332:	bf48      	it	mi
 8026334:	b2ad      	uxthmi	r5, r5
 8026336:	e7e6      	b.n	8026306 <_printf_i+0x182>
 8026338:	4616      	mov	r6, r2
 802633a:	e7bb      	b.n	80262b4 <_printf_i+0x130>
 802633c:	680b      	ldr	r3, [r1, #0]
 802633e:	6826      	ldr	r6, [r4, #0]
 8026340:	6960      	ldr	r0, [r4, #20]
 8026342:	1d1d      	adds	r5, r3, #4
 8026344:	600d      	str	r5, [r1, #0]
 8026346:	0635      	lsls	r5, r6, #24
 8026348:	681b      	ldr	r3, [r3, #0]
 802634a:	d501      	bpl.n	8026350 <_printf_i+0x1cc>
 802634c:	6018      	str	r0, [r3, #0]
 802634e:	e002      	b.n	8026356 <_printf_i+0x1d2>
 8026350:	0671      	lsls	r1, r6, #25
 8026352:	d5fb      	bpl.n	802634c <_printf_i+0x1c8>
 8026354:	8018      	strh	r0, [r3, #0]
 8026356:	2300      	movs	r3, #0
 8026358:	6123      	str	r3, [r4, #16]
 802635a:	4616      	mov	r6, r2
 802635c:	e7ba      	b.n	80262d4 <_printf_i+0x150>
 802635e:	680b      	ldr	r3, [r1, #0]
 8026360:	1d1a      	adds	r2, r3, #4
 8026362:	600a      	str	r2, [r1, #0]
 8026364:	681e      	ldr	r6, [r3, #0]
 8026366:	6862      	ldr	r2, [r4, #4]
 8026368:	2100      	movs	r1, #0
 802636a:	4630      	mov	r0, r6
 802636c:	f7d9 ffc0 	bl	80002f0 <memchr>
 8026370:	b108      	cbz	r0, 8026376 <_printf_i+0x1f2>
 8026372:	1b80      	subs	r0, r0, r6
 8026374:	6060      	str	r0, [r4, #4]
 8026376:	6863      	ldr	r3, [r4, #4]
 8026378:	6123      	str	r3, [r4, #16]
 802637a:	2300      	movs	r3, #0
 802637c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026380:	e7a8      	b.n	80262d4 <_printf_i+0x150>
 8026382:	6923      	ldr	r3, [r4, #16]
 8026384:	4632      	mov	r2, r6
 8026386:	4649      	mov	r1, r9
 8026388:	4640      	mov	r0, r8
 802638a:	47d0      	blx	sl
 802638c:	3001      	adds	r0, #1
 802638e:	d0ab      	beq.n	80262e8 <_printf_i+0x164>
 8026390:	6823      	ldr	r3, [r4, #0]
 8026392:	079b      	lsls	r3, r3, #30
 8026394:	d413      	bmi.n	80263be <_printf_i+0x23a>
 8026396:	68e0      	ldr	r0, [r4, #12]
 8026398:	9b03      	ldr	r3, [sp, #12]
 802639a:	4298      	cmp	r0, r3
 802639c:	bfb8      	it	lt
 802639e:	4618      	movlt	r0, r3
 80263a0:	e7a4      	b.n	80262ec <_printf_i+0x168>
 80263a2:	2301      	movs	r3, #1
 80263a4:	4632      	mov	r2, r6
 80263a6:	4649      	mov	r1, r9
 80263a8:	4640      	mov	r0, r8
 80263aa:	47d0      	blx	sl
 80263ac:	3001      	adds	r0, #1
 80263ae:	d09b      	beq.n	80262e8 <_printf_i+0x164>
 80263b0:	3501      	adds	r5, #1
 80263b2:	68e3      	ldr	r3, [r4, #12]
 80263b4:	9903      	ldr	r1, [sp, #12]
 80263b6:	1a5b      	subs	r3, r3, r1
 80263b8:	42ab      	cmp	r3, r5
 80263ba:	dcf2      	bgt.n	80263a2 <_printf_i+0x21e>
 80263bc:	e7eb      	b.n	8026396 <_printf_i+0x212>
 80263be:	2500      	movs	r5, #0
 80263c0:	f104 0619 	add.w	r6, r4, #25
 80263c4:	e7f5      	b.n	80263b2 <_printf_i+0x22e>
 80263c6:	bf00      	nop
 80263c8:	0802b9d9 	.word	0x0802b9d9
 80263cc:	0802b9ea 	.word	0x0802b9ea

080263d0 <_sbrk_r>:
 80263d0:	b538      	push	{r3, r4, r5, lr}
 80263d2:	4d06      	ldr	r5, [pc, #24]	; (80263ec <_sbrk_r+0x1c>)
 80263d4:	2300      	movs	r3, #0
 80263d6:	4604      	mov	r4, r0
 80263d8:	4608      	mov	r0, r1
 80263da:	602b      	str	r3, [r5, #0]
 80263dc:	f7dd f9d4 	bl	8003788 <_sbrk>
 80263e0:	1c43      	adds	r3, r0, #1
 80263e2:	d102      	bne.n	80263ea <_sbrk_r+0x1a>
 80263e4:	682b      	ldr	r3, [r5, #0]
 80263e6:	b103      	cbz	r3, 80263ea <_sbrk_r+0x1a>
 80263e8:	6023      	str	r3, [r4, #0]
 80263ea:	bd38      	pop	{r3, r4, r5, pc}
 80263ec:	2400ce78 	.word	0x2400ce78

080263f0 <_raise_r>:
 80263f0:	291f      	cmp	r1, #31
 80263f2:	b538      	push	{r3, r4, r5, lr}
 80263f4:	4604      	mov	r4, r0
 80263f6:	460d      	mov	r5, r1
 80263f8:	d904      	bls.n	8026404 <_raise_r+0x14>
 80263fa:	2316      	movs	r3, #22
 80263fc:	6003      	str	r3, [r0, #0]
 80263fe:	f04f 30ff 	mov.w	r0, #4294967295
 8026402:	bd38      	pop	{r3, r4, r5, pc}
 8026404:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026406:	b112      	cbz	r2, 802640e <_raise_r+0x1e>
 8026408:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802640c:	b94b      	cbnz	r3, 8026422 <_raise_r+0x32>
 802640e:	4620      	mov	r0, r4
 8026410:	f000 f830 	bl	8026474 <_getpid_r>
 8026414:	462a      	mov	r2, r5
 8026416:	4601      	mov	r1, r0
 8026418:	4620      	mov	r0, r4
 802641a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802641e:	f000 b817 	b.w	8026450 <_kill_r>
 8026422:	2b01      	cmp	r3, #1
 8026424:	d00a      	beq.n	802643c <_raise_r+0x4c>
 8026426:	1c59      	adds	r1, r3, #1
 8026428:	d103      	bne.n	8026432 <_raise_r+0x42>
 802642a:	2316      	movs	r3, #22
 802642c:	6003      	str	r3, [r0, #0]
 802642e:	2001      	movs	r0, #1
 8026430:	e7e7      	b.n	8026402 <_raise_r+0x12>
 8026432:	2400      	movs	r4, #0
 8026434:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026438:	4628      	mov	r0, r5
 802643a:	4798      	blx	r3
 802643c:	2000      	movs	r0, #0
 802643e:	e7e0      	b.n	8026402 <_raise_r+0x12>

08026440 <raise>:
 8026440:	4b02      	ldr	r3, [pc, #8]	; (802644c <raise+0xc>)
 8026442:	4601      	mov	r1, r0
 8026444:	6818      	ldr	r0, [r3, #0]
 8026446:	f7ff bfd3 	b.w	80263f0 <_raise_r>
 802644a:	bf00      	nop
 802644c:	240000a8 	.word	0x240000a8

08026450 <_kill_r>:
 8026450:	b538      	push	{r3, r4, r5, lr}
 8026452:	4d07      	ldr	r5, [pc, #28]	; (8026470 <_kill_r+0x20>)
 8026454:	2300      	movs	r3, #0
 8026456:	4604      	mov	r4, r0
 8026458:	4608      	mov	r0, r1
 802645a:	4611      	mov	r1, r2
 802645c:	602b      	str	r3, [r5, #0]
 802645e:	f7dd f90b 	bl	8003678 <_kill>
 8026462:	1c43      	adds	r3, r0, #1
 8026464:	d102      	bne.n	802646c <_kill_r+0x1c>
 8026466:	682b      	ldr	r3, [r5, #0]
 8026468:	b103      	cbz	r3, 802646c <_kill_r+0x1c>
 802646a:	6023      	str	r3, [r4, #0]
 802646c:	bd38      	pop	{r3, r4, r5, pc}
 802646e:	bf00      	nop
 8026470:	2400ce78 	.word	0x2400ce78

08026474 <_getpid_r>:
 8026474:	f7dd b8f8 	b.w	8003668 <_getpid>

08026478 <__swbuf_r>:
 8026478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802647a:	460e      	mov	r6, r1
 802647c:	4614      	mov	r4, r2
 802647e:	4605      	mov	r5, r0
 8026480:	b118      	cbz	r0, 802648a <__swbuf_r+0x12>
 8026482:	6983      	ldr	r3, [r0, #24]
 8026484:	b90b      	cbnz	r3, 802648a <__swbuf_r+0x12>
 8026486:	f000 fa33 	bl	80268f0 <__sinit>
 802648a:	4b21      	ldr	r3, [pc, #132]	; (8026510 <__swbuf_r+0x98>)
 802648c:	429c      	cmp	r4, r3
 802648e:	d12b      	bne.n	80264e8 <__swbuf_r+0x70>
 8026490:	686c      	ldr	r4, [r5, #4]
 8026492:	69a3      	ldr	r3, [r4, #24]
 8026494:	60a3      	str	r3, [r4, #8]
 8026496:	89a3      	ldrh	r3, [r4, #12]
 8026498:	071a      	lsls	r2, r3, #28
 802649a:	d52f      	bpl.n	80264fc <__swbuf_r+0x84>
 802649c:	6923      	ldr	r3, [r4, #16]
 802649e:	b36b      	cbz	r3, 80264fc <__swbuf_r+0x84>
 80264a0:	6923      	ldr	r3, [r4, #16]
 80264a2:	6820      	ldr	r0, [r4, #0]
 80264a4:	1ac0      	subs	r0, r0, r3
 80264a6:	6963      	ldr	r3, [r4, #20]
 80264a8:	b2f6      	uxtb	r6, r6
 80264aa:	4283      	cmp	r3, r0
 80264ac:	4637      	mov	r7, r6
 80264ae:	dc04      	bgt.n	80264ba <__swbuf_r+0x42>
 80264b0:	4621      	mov	r1, r4
 80264b2:	4628      	mov	r0, r5
 80264b4:	f000 f988 	bl	80267c8 <_fflush_r>
 80264b8:	bb30      	cbnz	r0, 8026508 <__swbuf_r+0x90>
 80264ba:	68a3      	ldr	r3, [r4, #8]
 80264bc:	3b01      	subs	r3, #1
 80264be:	60a3      	str	r3, [r4, #8]
 80264c0:	6823      	ldr	r3, [r4, #0]
 80264c2:	1c5a      	adds	r2, r3, #1
 80264c4:	6022      	str	r2, [r4, #0]
 80264c6:	701e      	strb	r6, [r3, #0]
 80264c8:	6963      	ldr	r3, [r4, #20]
 80264ca:	3001      	adds	r0, #1
 80264cc:	4283      	cmp	r3, r0
 80264ce:	d004      	beq.n	80264da <__swbuf_r+0x62>
 80264d0:	89a3      	ldrh	r3, [r4, #12]
 80264d2:	07db      	lsls	r3, r3, #31
 80264d4:	d506      	bpl.n	80264e4 <__swbuf_r+0x6c>
 80264d6:	2e0a      	cmp	r6, #10
 80264d8:	d104      	bne.n	80264e4 <__swbuf_r+0x6c>
 80264da:	4621      	mov	r1, r4
 80264dc:	4628      	mov	r0, r5
 80264de:	f000 f973 	bl	80267c8 <_fflush_r>
 80264e2:	b988      	cbnz	r0, 8026508 <__swbuf_r+0x90>
 80264e4:	4638      	mov	r0, r7
 80264e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80264e8:	4b0a      	ldr	r3, [pc, #40]	; (8026514 <__swbuf_r+0x9c>)
 80264ea:	429c      	cmp	r4, r3
 80264ec:	d101      	bne.n	80264f2 <__swbuf_r+0x7a>
 80264ee:	68ac      	ldr	r4, [r5, #8]
 80264f0:	e7cf      	b.n	8026492 <__swbuf_r+0x1a>
 80264f2:	4b09      	ldr	r3, [pc, #36]	; (8026518 <__swbuf_r+0xa0>)
 80264f4:	429c      	cmp	r4, r3
 80264f6:	bf08      	it	eq
 80264f8:	68ec      	ldreq	r4, [r5, #12]
 80264fa:	e7ca      	b.n	8026492 <__swbuf_r+0x1a>
 80264fc:	4621      	mov	r1, r4
 80264fe:	4628      	mov	r0, r5
 8026500:	f000 f80c 	bl	802651c <__swsetup_r>
 8026504:	2800      	cmp	r0, #0
 8026506:	d0cb      	beq.n	80264a0 <__swbuf_r+0x28>
 8026508:	f04f 37ff 	mov.w	r7, #4294967295
 802650c:	e7ea      	b.n	80264e4 <__swbuf_r+0x6c>
 802650e:	bf00      	nop
 8026510:	0802ba20 	.word	0x0802ba20
 8026514:	0802ba40 	.word	0x0802ba40
 8026518:	0802ba00 	.word	0x0802ba00

0802651c <__swsetup_r>:
 802651c:	4b32      	ldr	r3, [pc, #200]	; (80265e8 <__swsetup_r+0xcc>)
 802651e:	b570      	push	{r4, r5, r6, lr}
 8026520:	681d      	ldr	r5, [r3, #0]
 8026522:	4606      	mov	r6, r0
 8026524:	460c      	mov	r4, r1
 8026526:	b125      	cbz	r5, 8026532 <__swsetup_r+0x16>
 8026528:	69ab      	ldr	r3, [r5, #24]
 802652a:	b913      	cbnz	r3, 8026532 <__swsetup_r+0x16>
 802652c:	4628      	mov	r0, r5
 802652e:	f000 f9df 	bl	80268f0 <__sinit>
 8026532:	4b2e      	ldr	r3, [pc, #184]	; (80265ec <__swsetup_r+0xd0>)
 8026534:	429c      	cmp	r4, r3
 8026536:	d10f      	bne.n	8026558 <__swsetup_r+0x3c>
 8026538:	686c      	ldr	r4, [r5, #4]
 802653a:	89a3      	ldrh	r3, [r4, #12]
 802653c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026540:	0719      	lsls	r1, r3, #28
 8026542:	d42c      	bmi.n	802659e <__swsetup_r+0x82>
 8026544:	06dd      	lsls	r5, r3, #27
 8026546:	d411      	bmi.n	802656c <__swsetup_r+0x50>
 8026548:	2309      	movs	r3, #9
 802654a:	6033      	str	r3, [r6, #0]
 802654c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026550:	81a3      	strh	r3, [r4, #12]
 8026552:	f04f 30ff 	mov.w	r0, #4294967295
 8026556:	e03e      	b.n	80265d6 <__swsetup_r+0xba>
 8026558:	4b25      	ldr	r3, [pc, #148]	; (80265f0 <__swsetup_r+0xd4>)
 802655a:	429c      	cmp	r4, r3
 802655c:	d101      	bne.n	8026562 <__swsetup_r+0x46>
 802655e:	68ac      	ldr	r4, [r5, #8]
 8026560:	e7eb      	b.n	802653a <__swsetup_r+0x1e>
 8026562:	4b24      	ldr	r3, [pc, #144]	; (80265f4 <__swsetup_r+0xd8>)
 8026564:	429c      	cmp	r4, r3
 8026566:	bf08      	it	eq
 8026568:	68ec      	ldreq	r4, [r5, #12]
 802656a:	e7e6      	b.n	802653a <__swsetup_r+0x1e>
 802656c:	0758      	lsls	r0, r3, #29
 802656e:	d512      	bpl.n	8026596 <__swsetup_r+0x7a>
 8026570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026572:	b141      	cbz	r1, 8026586 <__swsetup_r+0x6a>
 8026574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026578:	4299      	cmp	r1, r3
 802657a:	d002      	beq.n	8026582 <__swsetup_r+0x66>
 802657c:	4630      	mov	r0, r6
 802657e:	f7ff fb8f 	bl	8025ca0 <_free_r>
 8026582:	2300      	movs	r3, #0
 8026584:	6363      	str	r3, [r4, #52]	; 0x34
 8026586:	89a3      	ldrh	r3, [r4, #12]
 8026588:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802658c:	81a3      	strh	r3, [r4, #12]
 802658e:	2300      	movs	r3, #0
 8026590:	6063      	str	r3, [r4, #4]
 8026592:	6923      	ldr	r3, [r4, #16]
 8026594:	6023      	str	r3, [r4, #0]
 8026596:	89a3      	ldrh	r3, [r4, #12]
 8026598:	f043 0308 	orr.w	r3, r3, #8
 802659c:	81a3      	strh	r3, [r4, #12]
 802659e:	6923      	ldr	r3, [r4, #16]
 80265a0:	b94b      	cbnz	r3, 80265b6 <__swsetup_r+0x9a>
 80265a2:	89a3      	ldrh	r3, [r4, #12]
 80265a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80265a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80265ac:	d003      	beq.n	80265b6 <__swsetup_r+0x9a>
 80265ae:	4621      	mov	r1, r4
 80265b0:	4630      	mov	r0, r6
 80265b2:	f000 fa63 	bl	8026a7c <__smakebuf_r>
 80265b6:	89a0      	ldrh	r0, [r4, #12]
 80265b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80265bc:	f010 0301 	ands.w	r3, r0, #1
 80265c0:	d00a      	beq.n	80265d8 <__swsetup_r+0xbc>
 80265c2:	2300      	movs	r3, #0
 80265c4:	60a3      	str	r3, [r4, #8]
 80265c6:	6963      	ldr	r3, [r4, #20]
 80265c8:	425b      	negs	r3, r3
 80265ca:	61a3      	str	r3, [r4, #24]
 80265cc:	6923      	ldr	r3, [r4, #16]
 80265ce:	b943      	cbnz	r3, 80265e2 <__swsetup_r+0xc6>
 80265d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80265d4:	d1ba      	bne.n	802654c <__swsetup_r+0x30>
 80265d6:	bd70      	pop	{r4, r5, r6, pc}
 80265d8:	0781      	lsls	r1, r0, #30
 80265da:	bf58      	it	pl
 80265dc:	6963      	ldrpl	r3, [r4, #20]
 80265de:	60a3      	str	r3, [r4, #8]
 80265e0:	e7f4      	b.n	80265cc <__swsetup_r+0xb0>
 80265e2:	2000      	movs	r0, #0
 80265e4:	e7f7      	b.n	80265d6 <__swsetup_r+0xba>
 80265e6:	bf00      	nop
 80265e8:	240000a8 	.word	0x240000a8
 80265ec:	0802ba20 	.word	0x0802ba20
 80265f0:	0802ba40 	.word	0x0802ba40
 80265f4:	0802ba00 	.word	0x0802ba00

080265f8 <__register_exitproc>:
 80265f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80265fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80266b8 <__register_exitproc+0xc0>
 8026600:	4606      	mov	r6, r0
 8026602:	f8d8 0000 	ldr.w	r0, [r8]
 8026606:	461f      	mov	r7, r3
 8026608:	460d      	mov	r5, r1
 802660a:	4691      	mov	r9, r2
 802660c:	f000 fa0e 	bl	8026a2c <__retarget_lock_acquire_recursive>
 8026610:	4b25      	ldr	r3, [pc, #148]	; (80266a8 <__register_exitproc+0xb0>)
 8026612:	681c      	ldr	r4, [r3, #0]
 8026614:	b934      	cbnz	r4, 8026624 <__register_exitproc+0x2c>
 8026616:	4c25      	ldr	r4, [pc, #148]	; (80266ac <__register_exitproc+0xb4>)
 8026618:	601c      	str	r4, [r3, #0]
 802661a:	4b25      	ldr	r3, [pc, #148]	; (80266b0 <__register_exitproc+0xb8>)
 802661c:	b113      	cbz	r3, 8026624 <__register_exitproc+0x2c>
 802661e:	681b      	ldr	r3, [r3, #0]
 8026620:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8026624:	6863      	ldr	r3, [r4, #4]
 8026626:	2b1f      	cmp	r3, #31
 8026628:	dd07      	ble.n	802663a <__register_exitproc+0x42>
 802662a:	f8d8 0000 	ldr.w	r0, [r8]
 802662e:	f000 f9ff 	bl	8026a30 <__retarget_lock_release_recursive>
 8026632:	f04f 30ff 	mov.w	r0, #4294967295
 8026636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802663a:	b34e      	cbz	r6, 8026690 <__register_exitproc+0x98>
 802663c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8026640:	b988      	cbnz	r0, 8026666 <__register_exitproc+0x6e>
 8026642:	4b1c      	ldr	r3, [pc, #112]	; (80266b4 <__register_exitproc+0xbc>)
 8026644:	b923      	cbnz	r3, 8026650 <__register_exitproc+0x58>
 8026646:	f8d8 0000 	ldr.w	r0, [r8]
 802664a:	f000 f9f0 	bl	8026a2e <__retarget_lock_release>
 802664e:	e7f0      	b.n	8026632 <__register_exitproc+0x3a>
 8026650:	f44f 7084 	mov.w	r0, #264	; 0x108
 8026654:	f7ff fafe 	bl	8025c54 <malloc>
 8026658:	2800      	cmp	r0, #0
 802665a:	d0f4      	beq.n	8026646 <__register_exitproc+0x4e>
 802665c:	2300      	movs	r3, #0
 802665e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8026662:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8026666:	6863      	ldr	r3, [r4, #4]
 8026668:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802666c:	2201      	movs	r2, #1
 802666e:	409a      	lsls	r2, r3
 8026670:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026674:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8026678:	4313      	orrs	r3, r2
 802667a:	2e02      	cmp	r6, #2
 802667c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8026680:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8026684:	bf02      	ittt	eq
 8026686:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802668a:	431a      	orreq	r2, r3
 802668c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8026690:	6863      	ldr	r3, [r4, #4]
 8026692:	f8d8 0000 	ldr.w	r0, [r8]
 8026696:	1c5a      	adds	r2, r3, #1
 8026698:	3302      	adds	r3, #2
 802669a:	6062      	str	r2, [r4, #4]
 802669c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80266a0:	f000 f9c6 	bl	8026a30 <__retarget_lock_release_recursive>
 80266a4:	2000      	movs	r0, #0
 80266a6:	e7c6      	b.n	8026636 <__register_exitproc+0x3e>
 80266a8:	2400cb3c 	.word	0x2400cb3c
 80266ac:	2400cab0 	.word	0x2400cab0
 80266b0:	0802b9fc 	.word	0x0802b9fc
 80266b4:	08025c55 	.word	0x08025c55
 80266b8:	2400010c 	.word	0x2400010c

080266bc <__sflush_r>:
 80266bc:	898a      	ldrh	r2, [r1, #12]
 80266be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80266c2:	4605      	mov	r5, r0
 80266c4:	0710      	lsls	r0, r2, #28
 80266c6:	460c      	mov	r4, r1
 80266c8:	d458      	bmi.n	802677c <__sflush_r+0xc0>
 80266ca:	684b      	ldr	r3, [r1, #4]
 80266cc:	2b00      	cmp	r3, #0
 80266ce:	dc05      	bgt.n	80266dc <__sflush_r+0x20>
 80266d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80266d2:	2b00      	cmp	r3, #0
 80266d4:	dc02      	bgt.n	80266dc <__sflush_r+0x20>
 80266d6:	2000      	movs	r0, #0
 80266d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80266dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80266de:	2e00      	cmp	r6, #0
 80266e0:	d0f9      	beq.n	80266d6 <__sflush_r+0x1a>
 80266e2:	2300      	movs	r3, #0
 80266e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80266e8:	682f      	ldr	r7, [r5, #0]
 80266ea:	602b      	str	r3, [r5, #0]
 80266ec:	d032      	beq.n	8026754 <__sflush_r+0x98>
 80266ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80266f0:	89a3      	ldrh	r3, [r4, #12]
 80266f2:	075a      	lsls	r2, r3, #29
 80266f4:	d505      	bpl.n	8026702 <__sflush_r+0x46>
 80266f6:	6863      	ldr	r3, [r4, #4]
 80266f8:	1ac0      	subs	r0, r0, r3
 80266fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80266fc:	b10b      	cbz	r3, 8026702 <__sflush_r+0x46>
 80266fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026700:	1ac0      	subs	r0, r0, r3
 8026702:	2300      	movs	r3, #0
 8026704:	4602      	mov	r2, r0
 8026706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026708:	6a21      	ldr	r1, [r4, #32]
 802670a:	4628      	mov	r0, r5
 802670c:	47b0      	blx	r6
 802670e:	1c43      	adds	r3, r0, #1
 8026710:	89a3      	ldrh	r3, [r4, #12]
 8026712:	d106      	bne.n	8026722 <__sflush_r+0x66>
 8026714:	6829      	ldr	r1, [r5, #0]
 8026716:	291d      	cmp	r1, #29
 8026718:	d82c      	bhi.n	8026774 <__sflush_r+0xb8>
 802671a:	4a2a      	ldr	r2, [pc, #168]	; (80267c4 <__sflush_r+0x108>)
 802671c:	40ca      	lsrs	r2, r1
 802671e:	07d6      	lsls	r6, r2, #31
 8026720:	d528      	bpl.n	8026774 <__sflush_r+0xb8>
 8026722:	2200      	movs	r2, #0
 8026724:	6062      	str	r2, [r4, #4]
 8026726:	04d9      	lsls	r1, r3, #19
 8026728:	6922      	ldr	r2, [r4, #16]
 802672a:	6022      	str	r2, [r4, #0]
 802672c:	d504      	bpl.n	8026738 <__sflush_r+0x7c>
 802672e:	1c42      	adds	r2, r0, #1
 8026730:	d101      	bne.n	8026736 <__sflush_r+0x7a>
 8026732:	682b      	ldr	r3, [r5, #0]
 8026734:	b903      	cbnz	r3, 8026738 <__sflush_r+0x7c>
 8026736:	6560      	str	r0, [r4, #84]	; 0x54
 8026738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802673a:	602f      	str	r7, [r5, #0]
 802673c:	2900      	cmp	r1, #0
 802673e:	d0ca      	beq.n	80266d6 <__sflush_r+0x1a>
 8026740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026744:	4299      	cmp	r1, r3
 8026746:	d002      	beq.n	802674e <__sflush_r+0x92>
 8026748:	4628      	mov	r0, r5
 802674a:	f7ff faa9 	bl	8025ca0 <_free_r>
 802674e:	2000      	movs	r0, #0
 8026750:	6360      	str	r0, [r4, #52]	; 0x34
 8026752:	e7c1      	b.n	80266d8 <__sflush_r+0x1c>
 8026754:	6a21      	ldr	r1, [r4, #32]
 8026756:	2301      	movs	r3, #1
 8026758:	4628      	mov	r0, r5
 802675a:	47b0      	blx	r6
 802675c:	1c41      	adds	r1, r0, #1
 802675e:	d1c7      	bne.n	80266f0 <__sflush_r+0x34>
 8026760:	682b      	ldr	r3, [r5, #0]
 8026762:	2b00      	cmp	r3, #0
 8026764:	d0c4      	beq.n	80266f0 <__sflush_r+0x34>
 8026766:	2b1d      	cmp	r3, #29
 8026768:	d001      	beq.n	802676e <__sflush_r+0xb2>
 802676a:	2b16      	cmp	r3, #22
 802676c:	d101      	bne.n	8026772 <__sflush_r+0xb6>
 802676e:	602f      	str	r7, [r5, #0]
 8026770:	e7b1      	b.n	80266d6 <__sflush_r+0x1a>
 8026772:	89a3      	ldrh	r3, [r4, #12]
 8026774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026778:	81a3      	strh	r3, [r4, #12]
 802677a:	e7ad      	b.n	80266d8 <__sflush_r+0x1c>
 802677c:	690f      	ldr	r7, [r1, #16]
 802677e:	2f00      	cmp	r7, #0
 8026780:	d0a9      	beq.n	80266d6 <__sflush_r+0x1a>
 8026782:	0793      	lsls	r3, r2, #30
 8026784:	680e      	ldr	r6, [r1, #0]
 8026786:	bf08      	it	eq
 8026788:	694b      	ldreq	r3, [r1, #20]
 802678a:	600f      	str	r7, [r1, #0]
 802678c:	bf18      	it	ne
 802678e:	2300      	movne	r3, #0
 8026790:	eba6 0807 	sub.w	r8, r6, r7
 8026794:	608b      	str	r3, [r1, #8]
 8026796:	f1b8 0f00 	cmp.w	r8, #0
 802679a:	dd9c      	ble.n	80266d6 <__sflush_r+0x1a>
 802679c:	6a21      	ldr	r1, [r4, #32]
 802679e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80267a0:	4643      	mov	r3, r8
 80267a2:	463a      	mov	r2, r7
 80267a4:	4628      	mov	r0, r5
 80267a6:	47b0      	blx	r6
 80267a8:	2800      	cmp	r0, #0
 80267aa:	dc06      	bgt.n	80267ba <__sflush_r+0xfe>
 80267ac:	89a3      	ldrh	r3, [r4, #12]
 80267ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80267b2:	81a3      	strh	r3, [r4, #12]
 80267b4:	f04f 30ff 	mov.w	r0, #4294967295
 80267b8:	e78e      	b.n	80266d8 <__sflush_r+0x1c>
 80267ba:	4407      	add	r7, r0
 80267bc:	eba8 0800 	sub.w	r8, r8, r0
 80267c0:	e7e9      	b.n	8026796 <__sflush_r+0xda>
 80267c2:	bf00      	nop
 80267c4:	20400001 	.word	0x20400001

080267c8 <_fflush_r>:
 80267c8:	b538      	push	{r3, r4, r5, lr}
 80267ca:	690b      	ldr	r3, [r1, #16]
 80267cc:	4605      	mov	r5, r0
 80267ce:	460c      	mov	r4, r1
 80267d0:	b913      	cbnz	r3, 80267d8 <_fflush_r+0x10>
 80267d2:	2500      	movs	r5, #0
 80267d4:	4628      	mov	r0, r5
 80267d6:	bd38      	pop	{r3, r4, r5, pc}
 80267d8:	b118      	cbz	r0, 80267e2 <_fflush_r+0x1a>
 80267da:	6983      	ldr	r3, [r0, #24]
 80267dc:	b90b      	cbnz	r3, 80267e2 <_fflush_r+0x1a>
 80267de:	f000 f887 	bl	80268f0 <__sinit>
 80267e2:	4b14      	ldr	r3, [pc, #80]	; (8026834 <_fflush_r+0x6c>)
 80267e4:	429c      	cmp	r4, r3
 80267e6:	d11b      	bne.n	8026820 <_fflush_r+0x58>
 80267e8:	686c      	ldr	r4, [r5, #4]
 80267ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80267ee:	2b00      	cmp	r3, #0
 80267f0:	d0ef      	beq.n	80267d2 <_fflush_r+0xa>
 80267f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80267f4:	07d0      	lsls	r0, r2, #31
 80267f6:	d404      	bmi.n	8026802 <_fflush_r+0x3a>
 80267f8:	0599      	lsls	r1, r3, #22
 80267fa:	d402      	bmi.n	8026802 <_fflush_r+0x3a>
 80267fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80267fe:	f000 f915 	bl	8026a2c <__retarget_lock_acquire_recursive>
 8026802:	4628      	mov	r0, r5
 8026804:	4621      	mov	r1, r4
 8026806:	f7ff ff59 	bl	80266bc <__sflush_r>
 802680a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802680c:	07da      	lsls	r2, r3, #31
 802680e:	4605      	mov	r5, r0
 8026810:	d4e0      	bmi.n	80267d4 <_fflush_r+0xc>
 8026812:	89a3      	ldrh	r3, [r4, #12]
 8026814:	059b      	lsls	r3, r3, #22
 8026816:	d4dd      	bmi.n	80267d4 <_fflush_r+0xc>
 8026818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802681a:	f000 f909 	bl	8026a30 <__retarget_lock_release_recursive>
 802681e:	e7d9      	b.n	80267d4 <_fflush_r+0xc>
 8026820:	4b05      	ldr	r3, [pc, #20]	; (8026838 <_fflush_r+0x70>)
 8026822:	429c      	cmp	r4, r3
 8026824:	d101      	bne.n	802682a <_fflush_r+0x62>
 8026826:	68ac      	ldr	r4, [r5, #8]
 8026828:	e7df      	b.n	80267ea <_fflush_r+0x22>
 802682a:	4b04      	ldr	r3, [pc, #16]	; (802683c <_fflush_r+0x74>)
 802682c:	429c      	cmp	r4, r3
 802682e:	bf08      	it	eq
 8026830:	68ec      	ldreq	r4, [r5, #12]
 8026832:	e7da      	b.n	80267ea <_fflush_r+0x22>
 8026834:	0802ba20 	.word	0x0802ba20
 8026838:	0802ba40 	.word	0x0802ba40
 802683c:	0802ba00 	.word	0x0802ba00

08026840 <std>:
 8026840:	2300      	movs	r3, #0
 8026842:	b510      	push	{r4, lr}
 8026844:	4604      	mov	r4, r0
 8026846:	e9c0 3300 	strd	r3, r3, [r0]
 802684a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802684e:	6083      	str	r3, [r0, #8]
 8026850:	8181      	strh	r1, [r0, #12]
 8026852:	6643      	str	r3, [r0, #100]	; 0x64
 8026854:	81c2      	strh	r2, [r0, #14]
 8026856:	6183      	str	r3, [r0, #24]
 8026858:	4619      	mov	r1, r3
 802685a:	2208      	movs	r2, #8
 802685c:	305c      	adds	r0, #92	; 0x5c
 802685e:	f7ff fa17 	bl	8025c90 <memset>
 8026862:	4b05      	ldr	r3, [pc, #20]	; (8026878 <std+0x38>)
 8026864:	6263      	str	r3, [r4, #36]	; 0x24
 8026866:	4b05      	ldr	r3, [pc, #20]	; (802687c <std+0x3c>)
 8026868:	62a3      	str	r3, [r4, #40]	; 0x28
 802686a:	4b05      	ldr	r3, [pc, #20]	; (8026880 <std+0x40>)
 802686c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802686e:	4b05      	ldr	r3, [pc, #20]	; (8026884 <std+0x44>)
 8026870:	6224      	str	r4, [r4, #32]
 8026872:	6323      	str	r3, [r4, #48]	; 0x30
 8026874:	bd10      	pop	{r4, pc}
 8026876:	bf00      	nop
 8026878:	08026b15 	.word	0x08026b15
 802687c:	08026b37 	.word	0x08026b37
 8026880:	08026b6f 	.word	0x08026b6f
 8026884:	08026b93 	.word	0x08026b93

08026888 <_cleanup_r>:
 8026888:	4901      	ldr	r1, [pc, #4]	; (8026890 <_cleanup_r+0x8>)
 802688a:	f000 b8af 	b.w	80269ec <_fwalk_reent>
 802688e:	bf00      	nop
 8026890:	080267c9 	.word	0x080267c9

08026894 <__sfmoreglue>:
 8026894:	b570      	push	{r4, r5, r6, lr}
 8026896:	1e4a      	subs	r2, r1, #1
 8026898:	2568      	movs	r5, #104	; 0x68
 802689a:	4355      	muls	r5, r2
 802689c:	460e      	mov	r6, r1
 802689e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80268a2:	f7ff fa4d 	bl	8025d40 <_malloc_r>
 80268a6:	4604      	mov	r4, r0
 80268a8:	b140      	cbz	r0, 80268bc <__sfmoreglue+0x28>
 80268aa:	2100      	movs	r1, #0
 80268ac:	e9c0 1600 	strd	r1, r6, [r0]
 80268b0:	300c      	adds	r0, #12
 80268b2:	60a0      	str	r0, [r4, #8]
 80268b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80268b8:	f7ff f9ea 	bl	8025c90 <memset>
 80268bc:	4620      	mov	r0, r4
 80268be:	bd70      	pop	{r4, r5, r6, pc}

080268c0 <__sfp_lock_acquire>:
 80268c0:	4801      	ldr	r0, [pc, #4]	; (80268c8 <__sfp_lock_acquire+0x8>)
 80268c2:	f000 b8b3 	b.w	8026a2c <__retarget_lock_acquire_recursive>
 80268c6:	bf00      	nop
 80268c8:	2400ce74 	.word	0x2400ce74

080268cc <__sfp_lock_release>:
 80268cc:	4801      	ldr	r0, [pc, #4]	; (80268d4 <__sfp_lock_release+0x8>)
 80268ce:	f000 b8af 	b.w	8026a30 <__retarget_lock_release_recursive>
 80268d2:	bf00      	nop
 80268d4:	2400ce74 	.word	0x2400ce74

080268d8 <__sinit_lock_acquire>:
 80268d8:	4801      	ldr	r0, [pc, #4]	; (80268e0 <__sinit_lock_acquire+0x8>)
 80268da:	f000 b8a7 	b.w	8026a2c <__retarget_lock_acquire_recursive>
 80268de:	bf00      	nop
 80268e0:	2400ce6f 	.word	0x2400ce6f

080268e4 <__sinit_lock_release>:
 80268e4:	4801      	ldr	r0, [pc, #4]	; (80268ec <__sinit_lock_release+0x8>)
 80268e6:	f000 b8a3 	b.w	8026a30 <__retarget_lock_release_recursive>
 80268ea:	bf00      	nop
 80268ec:	2400ce6f 	.word	0x2400ce6f

080268f0 <__sinit>:
 80268f0:	b510      	push	{r4, lr}
 80268f2:	4604      	mov	r4, r0
 80268f4:	f7ff fff0 	bl	80268d8 <__sinit_lock_acquire>
 80268f8:	69a3      	ldr	r3, [r4, #24]
 80268fa:	b11b      	cbz	r3, 8026904 <__sinit+0x14>
 80268fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026900:	f7ff bff0 	b.w	80268e4 <__sinit_lock_release>
 8026904:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026908:	6523      	str	r3, [r4, #80]	; 0x50
 802690a:	4b13      	ldr	r3, [pc, #76]	; (8026958 <__sinit+0x68>)
 802690c:	4a13      	ldr	r2, [pc, #76]	; (802695c <__sinit+0x6c>)
 802690e:	681b      	ldr	r3, [r3, #0]
 8026910:	62a2      	str	r2, [r4, #40]	; 0x28
 8026912:	42a3      	cmp	r3, r4
 8026914:	bf04      	itt	eq
 8026916:	2301      	moveq	r3, #1
 8026918:	61a3      	streq	r3, [r4, #24]
 802691a:	4620      	mov	r0, r4
 802691c:	f000 f820 	bl	8026960 <__sfp>
 8026920:	6060      	str	r0, [r4, #4]
 8026922:	4620      	mov	r0, r4
 8026924:	f000 f81c 	bl	8026960 <__sfp>
 8026928:	60a0      	str	r0, [r4, #8]
 802692a:	4620      	mov	r0, r4
 802692c:	f000 f818 	bl	8026960 <__sfp>
 8026930:	2200      	movs	r2, #0
 8026932:	60e0      	str	r0, [r4, #12]
 8026934:	2104      	movs	r1, #4
 8026936:	6860      	ldr	r0, [r4, #4]
 8026938:	f7ff ff82 	bl	8026840 <std>
 802693c:	68a0      	ldr	r0, [r4, #8]
 802693e:	2201      	movs	r2, #1
 8026940:	2109      	movs	r1, #9
 8026942:	f7ff ff7d 	bl	8026840 <std>
 8026946:	68e0      	ldr	r0, [r4, #12]
 8026948:	2202      	movs	r2, #2
 802694a:	2112      	movs	r1, #18
 802694c:	f7ff ff78 	bl	8026840 <std>
 8026950:	2301      	movs	r3, #1
 8026952:	61a3      	str	r3, [r4, #24]
 8026954:	e7d2      	b.n	80268fc <__sinit+0xc>
 8026956:	bf00      	nop
 8026958:	0802b9c4 	.word	0x0802b9c4
 802695c:	08026889 	.word	0x08026889

08026960 <__sfp>:
 8026960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026962:	4607      	mov	r7, r0
 8026964:	f7ff ffac 	bl	80268c0 <__sfp_lock_acquire>
 8026968:	4b1e      	ldr	r3, [pc, #120]	; (80269e4 <__sfp+0x84>)
 802696a:	681e      	ldr	r6, [r3, #0]
 802696c:	69b3      	ldr	r3, [r6, #24]
 802696e:	b913      	cbnz	r3, 8026976 <__sfp+0x16>
 8026970:	4630      	mov	r0, r6
 8026972:	f7ff ffbd 	bl	80268f0 <__sinit>
 8026976:	3648      	adds	r6, #72	; 0x48
 8026978:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802697c:	3b01      	subs	r3, #1
 802697e:	d503      	bpl.n	8026988 <__sfp+0x28>
 8026980:	6833      	ldr	r3, [r6, #0]
 8026982:	b30b      	cbz	r3, 80269c8 <__sfp+0x68>
 8026984:	6836      	ldr	r6, [r6, #0]
 8026986:	e7f7      	b.n	8026978 <__sfp+0x18>
 8026988:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802698c:	b9d5      	cbnz	r5, 80269c4 <__sfp+0x64>
 802698e:	4b16      	ldr	r3, [pc, #88]	; (80269e8 <__sfp+0x88>)
 8026990:	60e3      	str	r3, [r4, #12]
 8026992:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026996:	6665      	str	r5, [r4, #100]	; 0x64
 8026998:	f000 f847 	bl	8026a2a <__retarget_lock_init_recursive>
 802699c:	f7ff ff96 	bl	80268cc <__sfp_lock_release>
 80269a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80269a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80269a8:	6025      	str	r5, [r4, #0]
 80269aa:	61a5      	str	r5, [r4, #24]
 80269ac:	2208      	movs	r2, #8
 80269ae:	4629      	mov	r1, r5
 80269b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80269b4:	f7ff f96c 	bl	8025c90 <memset>
 80269b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80269bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80269c0:	4620      	mov	r0, r4
 80269c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80269c4:	3468      	adds	r4, #104	; 0x68
 80269c6:	e7d9      	b.n	802697c <__sfp+0x1c>
 80269c8:	2104      	movs	r1, #4
 80269ca:	4638      	mov	r0, r7
 80269cc:	f7ff ff62 	bl	8026894 <__sfmoreglue>
 80269d0:	4604      	mov	r4, r0
 80269d2:	6030      	str	r0, [r6, #0]
 80269d4:	2800      	cmp	r0, #0
 80269d6:	d1d5      	bne.n	8026984 <__sfp+0x24>
 80269d8:	f7ff ff78 	bl	80268cc <__sfp_lock_release>
 80269dc:	230c      	movs	r3, #12
 80269de:	603b      	str	r3, [r7, #0]
 80269e0:	e7ee      	b.n	80269c0 <__sfp+0x60>
 80269e2:	bf00      	nop
 80269e4:	0802b9c4 	.word	0x0802b9c4
 80269e8:	ffff0001 	.word	0xffff0001

080269ec <_fwalk_reent>:
 80269ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80269f0:	4606      	mov	r6, r0
 80269f2:	4688      	mov	r8, r1
 80269f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80269f8:	2700      	movs	r7, #0
 80269fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80269fe:	f1b9 0901 	subs.w	r9, r9, #1
 8026a02:	d505      	bpl.n	8026a10 <_fwalk_reent+0x24>
 8026a04:	6824      	ldr	r4, [r4, #0]
 8026a06:	2c00      	cmp	r4, #0
 8026a08:	d1f7      	bne.n	80269fa <_fwalk_reent+0xe>
 8026a0a:	4638      	mov	r0, r7
 8026a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026a10:	89ab      	ldrh	r3, [r5, #12]
 8026a12:	2b01      	cmp	r3, #1
 8026a14:	d907      	bls.n	8026a26 <_fwalk_reent+0x3a>
 8026a16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026a1a:	3301      	adds	r3, #1
 8026a1c:	d003      	beq.n	8026a26 <_fwalk_reent+0x3a>
 8026a1e:	4629      	mov	r1, r5
 8026a20:	4630      	mov	r0, r6
 8026a22:	47c0      	blx	r8
 8026a24:	4307      	orrs	r7, r0
 8026a26:	3568      	adds	r5, #104	; 0x68
 8026a28:	e7e9      	b.n	80269fe <_fwalk_reent+0x12>

08026a2a <__retarget_lock_init_recursive>:
 8026a2a:	4770      	bx	lr

08026a2c <__retarget_lock_acquire_recursive>:
 8026a2c:	4770      	bx	lr

08026a2e <__retarget_lock_release>:
 8026a2e:	4770      	bx	lr

08026a30 <__retarget_lock_release_recursive>:
 8026a30:	4770      	bx	lr

08026a32 <__swhatbuf_r>:
 8026a32:	b570      	push	{r4, r5, r6, lr}
 8026a34:	460e      	mov	r6, r1
 8026a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026a3a:	2900      	cmp	r1, #0
 8026a3c:	b096      	sub	sp, #88	; 0x58
 8026a3e:	4614      	mov	r4, r2
 8026a40:	461d      	mov	r5, r3
 8026a42:	da07      	bge.n	8026a54 <__swhatbuf_r+0x22>
 8026a44:	2300      	movs	r3, #0
 8026a46:	602b      	str	r3, [r5, #0]
 8026a48:	89b3      	ldrh	r3, [r6, #12]
 8026a4a:	061a      	lsls	r2, r3, #24
 8026a4c:	d410      	bmi.n	8026a70 <__swhatbuf_r+0x3e>
 8026a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026a52:	e00e      	b.n	8026a72 <__swhatbuf_r+0x40>
 8026a54:	466a      	mov	r2, sp
 8026a56:	f000 f8c3 	bl	8026be0 <_fstat_r>
 8026a5a:	2800      	cmp	r0, #0
 8026a5c:	dbf2      	blt.n	8026a44 <__swhatbuf_r+0x12>
 8026a5e:	9a01      	ldr	r2, [sp, #4]
 8026a60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026a64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026a68:	425a      	negs	r2, r3
 8026a6a:	415a      	adcs	r2, r3
 8026a6c:	602a      	str	r2, [r5, #0]
 8026a6e:	e7ee      	b.n	8026a4e <__swhatbuf_r+0x1c>
 8026a70:	2340      	movs	r3, #64	; 0x40
 8026a72:	2000      	movs	r0, #0
 8026a74:	6023      	str	r3, [r4, #0]
 8026a76:	b016      	add	sp, #88	; 0x58
 8026a78:	bd70      	pop	{r4, r5, r6, pc}
	...

08026a7c <__smakebuf_r>:
 8026a7c:	898b      	ldrh	r3, [r1, #12]
 8026a7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026a80:	079d      	lsls	r5, r3, #30
 8026a82:	4606      	mov	r6, r0
 8026a84:	460c      	mov	r4, r1
 8026a86:	d507      	bpl.n	8026a98 <__smakebuf_r+0x1c>
 8026a88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026a8c:	6023      	str	r3, [r4, #0]
 8026a8e:	6123      	str	r3, [r4, #16]
 8026a90:	2301      	movs	r3, #1
 8026a92:	6163      	str	r3, [r4, #20]
 8026a94:	b002      	add	sp, #8
 8026a96:	bd70      	pop	{r4, r5, r6, pc}
 8026a98:	ab01      	add	r3, sp, #4
 8026a9a:	466a      	mov	r2, sp
 8026a9c:	f7ff ffc9 	bl	8026a32 <__swhatbuf_r>
 8026aa0:	9900      	ldr	r1, [sp, #0]
 8026aa2:	4605      	mov	r5, r0
 8026aa4:	4630      	mov	r0, r6
 8026aa6:	f7ff f94b 	bl	8025d40 <_malloc_r>
 8026aaa:	b948      	cbnz	r0, 8026ac0 <__smakebuf_r+0x44>
 8026aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026ab0:	059a      	lsls	r2, r3, #22
 8026ab2:	d4ef      	bmi.n	8026a94 <__smakebuf_r+0x18>
 8026ab4:	f023 0303 	bic.w	r3, r3, #3
 8026ab8:	f043 0302 	orr.w	r3, r3, #2
 8026abc:	81a3      	strh	r3, [r4, #12]
 8026abe:	e7e3      	b.n	8026a88 <__smakebuf_r+0xc>
 8026ac0:	4b0d      	ldr	r3, [pc, #52]	; (8026af8 <__smakebuf_r+0x7c>)
 8026ac2:	62b3      	str	r3, [r6, #40]	; 0x28
 8026ac4:	89a3      	ldrh	r3, [r4, #12]
 8026ac6:	6020      	str	r0, [r4, #0]
 8026ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026acc:	81a3      	strh	r3, [r4, #12]
 8026ace:	9b00      	ldr	r3, [sp, #0]
 8026ad0:	6163      	str	r3, [r4, #20]
 8026ad2:	9b01      	ldr	r3, [sp, #4]
 8026ad4:	6120      	str	r0, [r4, #16]
 8026ad6:	b15b      	cbz	r3, 8026af0 <__smakebuf_r+0x74>
 8026ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026adc:	4630      	mov	r0, r6
 8026ade:	f000 f891 	bl	8026c04 <_isatty_r>
 8026ae2:	b128      	cbz	r0, 8026af0 <__smakebuf_r+0x74>
 8026ae4:	89a3      	ldrh	r3, [r4, #12]
 8026ae6:	f023 0303 	bic.w	r3, r3, #3
 8026aea:	f043 0301 	orr.w	r3, r3, #1
 8026aee:	81a3      	strh	r3, [r4, #12]
 8026af0:	89a0      	ldrh	r0, [r4, #12]
 8026af2:	4305      	orrs	r5, r0
 8026af4:	81a5      	strh	r5, [r4, #12]
 8026af6:	e7cd      	b.n	8026a94 <__smakebuf_r+0x18>
 8026af8:	08026889 	.word	0x08026889

08026afc <__malloc_lock>:
 8026afc:	4801      	ldr	r0, [pc, #4]	; (8026b04 <__malloc_lock+0x8>)
 8026afe:	f7ff bf95 	b.w	8026a2c <__retarget_lock_acquire_recursive>
 8026b02:	bf00      	nop
 8026b04:	2400ce70 	.word	0x2400ce70

08026b08 <__malloc_unlock>:
 8026b08:	4801      	ldr	r0, [pc, #4]	; (8026b10 <__malloc_unlock+0x8>)
 8026b0a:	f7ff bf91 	b.w	8026a30 <__retarget_lock_release_recursive>
 8026b0e:	bf00      	nop
 8026b10:	2400ce70 	.word	0x2400ce70

08026b14 <__sread>:
 8026b14:	b510      	push	{r4, lr}
 8026b16:	460c      	mov	r4, r1
 8026b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b1c:	f000 f894 	bl	8026c48 <_read_r>
 8026b20:	2800      	cmp	r0, #0
 8026b22:	bfab      	itete	ge
 8026b24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026b26:	89a3      	ldrhlt	r3, [r4, #12]
 8026b28:	181b      	addge	r3, r3, r0
 8026b2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026b2e:	bfac      	ite	ge
 8026b30:	6563      	strge	r3, [r4, #84]	; 0x54
 8026b32:	81a3      	strhlt	r3, [r4, #12]
 8026b34:	bd10      	pop	{r4, pc}

08026b36 <__swrite>:
 8026b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026b3a:	461f      	mov	r7, r3
 8026b3c:	898b      	ldrh	r3, [r1, #12]
 8026b3e:	05db      	lsls	r3, r3, #23
 8026b40:	4605      	mov	r5, r0
 8026b42:	460c      	mov	r4, r1
 8026b44:	4616      	mov	r6, r2
 8026b46:	d505      	bpl.n	8026b54 <__swrite+0x1e>
 8026b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b4c:	2302      	movs	r3, #2
 8026b4e:	2200      	movs	r2, #0
 8026b50:	f000 f868 	bl	8026c24 <_lseek_r>
 8026b54:	89a3      	ldrh	r3, [r4, #12]
 8026b56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026b5e:	81a3      	strh	r3, [r4, #12]
 8026b60:	4632      	mov	r2, r6
 8026b62:	463b      	mov	r3, r7
 8026b64:	4628      	mov	r0, r5
 8026b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026b6a:	f000 b817 	b.w	8026b9c <_write_r>

08026b6e <__sseek>:
 8026b6e:	b510      	push	{r4, lr}
 8026b70:	460c      	mov	r4, r1
 8026b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b76:	f000 f855 	bl	8026c24 <_lseek_r>
 8026b7a:	1c43      	adds	r3, r0, #1
 8026b7c:	89a3      	ldrh	r3, [r4, #12]
 8026b7e:	bf15      	itete	ne
 8026b80:	6560      	strne	r0, [r4, #84]	; 0x54
 8026b82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026b86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026b8a:	81a3      	strheq	r3, [r4, #12]
 8026b8c:	bf18      	it	ne
 8026b8e:	81a3      	strhne	r3, [r4, #12]
 8026b90:	bd10      	pop	{r4, pc}

08026b92 <__sclose>:
 8026b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b96:	f000 b813 	b.w	8026bc0 <_close_r>
	...

08026b9c <_write_r>:
 8026b9c:	b538      	push	{r3, r4, r5, lr}
 8026b9e:	4d07      	ldr	r5, [pc, #28]	; (8026bbc <_write_r+0x20>)
 8026ba0:	4604      	mov	r4, r0
 8026ba2:	4608      	mov	r0, r1
 8026ba4:	4611      	mov	r1, r2
 8026ba6:	2200      	movs	r2, #0
 8026ba8:	602a      	str	r2, [r5, #0]
 8026baa:	461a      	mov	r2, r3
 8026bac:	f7dc fd9b 	bl	80036e6 <_write>
 8026bb0:	1c43      	adds	r3, r0, #1
 8026bb2:	d102      	bne.n	8026bba <_write_r+0x1e>
 8026bb4:	682b      	ldr	r3, [r5, #0]
 8026bb6:	b103      	cbz	r3, 8026bba <_write_r+0x1e>
 8026bb8:	6023      	str	r3, [r4, #0]
 8026bba:	bd38      	pop	{r3, r4, r5, pc}
 8026bbc:	2400ce78 	.word	0x2400ce78

08026bc0 <_close_r>:
 8026bc0:	b538      	push	{r3, r4, r5, lr}
 8026bc2:	4d06      	ldr	r5, [pc, #24]	; (8026bdc <_close_r+0x1c>)
 8026bc4:	2300      	movs	r3, #0
 8026bc6:	4604      	mov	r4, r0
 8026bc8:	4608      	mov	r0, r1
 8026bca:	602b      	str	r3, [r5, #0]
 8026bcc:	f7dc fda7 	bl	800371e <_close>
 8026bd0:	1c43      	adds	r3, r0, #1
 8026bd2:	d102      	bne.n	8026bda <_close_r+0x1a>
 8026bd4:	682b      	ldr	r3, [r5, #0]
 8026bd6:	b103      	cbz	r3, 8026bda <_close_r+0x1a>
 8026bd8:	6023      	str	r3, [r4, #0]
 8026bda:	bd38      	pop	{r3, r4, r5, pc}
 8026bdc:	2400ce78 	.word	0x2400ce78

08026be0 <_fstat_r>:
 8026be0:	b538      	push	{r3, r4, r5, lr}
 8026be2:	4d07      	ldr	r5, [pc, #28]	; (8026c00 <_fstat_r+0x20>)
 8026be4:	2300      	movs	r3, #0
 8026be6:	4604      	mov	r4, r0
 8026be8:	4608      	mov	r0, r1
 8026bea:	4611      	mov	r1, r2
 8026bec:	602b      	str	r3, [r5, #0]
 8026bee:	f7dc fda2 	bl	8003736 <_fstat>
 8026bf2:	1c43      	adds	r3, r0, #1
 8026bf4:	d102      	bne.n	8026bfc <_fstat_r+0x1c>
 8026bf6:	682b      	ldr	r3, [r5, #0]
 8026bf8:	b103      	cbz	r3, 8026bfc <_fstat_r+0x1c>
 8026bfa:	6023      	str	r3, [r4, #0]
 8026bfc:	bd38      	pop	{r3, r4, r5, pc}
 8026bfe:	bf00      	nop
 8026c00:	2400ce78 	.word	0x2400ce78

08026c04 <_isatty_r>:
 8026c04:	b538      	push	{r3, r4, r5, lr}
 8026c06:	4d06      	ldr	r5, [pc, #24]	; (8026c20 <_isatty_r+0x1c>)
 8026c08:	2300      	movs	r3, #0
 8026c0a:	4604      	mov	r4, r0
 8026c0c:	4608      	mov	r0, r1
 8026c0e:	602b      	str	r3, [r5, #0]
 8026c10:	f7dc fda1 	bl	8003756 <_isatty>
 8026c14:	1c43      	adds	r3, r0, #1
 8026c16:	d102      	bne.n	8026c1e <_isatty_r+0x1a>
 8026c18:	682b      	ldr	r3, [r5, #0]
 8026c1a:	b103      	cbz	r3, 8026c1e <_isatty_r+0x1a>
 8026c1c:	6023      	str	r3, [r4, #0]
 8026c1e:	bd38      	pop	{r3, r4, r5, pc}
 8026c20:	2400ce78 	.word	0x2400ce78

08026c24 <_lseek_r>:
 8026c24:	b538      	push	{r3, r4, r5, lr}
 8026c26:	4d07      	ldr	r5, [pc, #28]	; (8026c44 <_lseek_r+0x20>)
 8026c28:	4604      	mov	r4, r0
 8026c2a:	4608      	mov	r0, r1
 8026c2c:	4611      	mov	r1, r2
 8026c2e:	2200      	movs	r2, #0
 8026c30:	602a      	str	r2, [r5, #0]
 8026c32:	461a      	mov	r2, r3
 8026c34:	f7dc fd9a 	bl	800376c <_lseek>
 8026c38:	1c43      	adds	r3, r0, #1
 8026c3a:	d102      	bne.n	8026c42 <_lseek_r+0x1e>
 8026c3c:	682b      	ldr	r3, [r5, #0]
 8026c3e:	b103      	cbz	r3, 8026c42 <_lseek_r+0x1e>
 8026c40:	6023      	str	r3, [r4, #0]
 8026c42:	bd38      	pop	{r3, r4, r5, pc}
 8026c44:	2400ce78 	.word	0x2400ce78

08026c48 <_read_r>:
 8026c48:	b538      	push	{r3, r4, r5, lr}
 8026c4a:	4d07      	ldr	r5, [pc, #28]	; (8026c68 <_read_r+0x20>)
 8026c4c:	4604      	mov	r4, r0
 8026c4e:	4608      	mov	r0, r1
 8026c50:	4611      	mov	r1, r2
 8026c52:	2200      	movs	r2, #0
 8026c54:	602a      	str	r2, [r5, #0]
 8026c56:	461a      	mov	r2, r3
 8026c58:	f7dc fd28 	bl	80036ac <_read>
 8026c5c:	1c43      	adds	r3, r0, #1
 8026c5e:	d102      	bne.n	8026c66 <_read_r+0x1e>
 8026c60:	682b      	ldr	r3, [r5, #0]
 8026c62:	b103      	cbz	r3, 8026c66 <_read_r+0x1e>
 8026c64:	6023      	str	r3, [r4, #0]
 8026c66:	bd38      	pop	{r3, r4, r5, pc}
 8026c68:	2400ce78 	.word	0x2400ce78

08026c6c <_init>:
 8026c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c6e:	bf00      	nop
 8026c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026c72:	bc08      	pop	{r3}
 8026c74:	469e      	mov	lr, r3
 8026c76:	4770      	bx	lr

08026c78 <_fini>:
 8026c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c7a:	bf00      	nop
 8026c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026c7e:	bc08      	pop	{r3}
 8026c80:	469e      	mov	lr, r3
 8026c82:	4770      	bx	lr
