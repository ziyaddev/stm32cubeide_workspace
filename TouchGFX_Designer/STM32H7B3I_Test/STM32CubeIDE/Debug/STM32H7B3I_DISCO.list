
STM32H7B3I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c6c4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005488  0802c978  0802c978  0003c978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000001c  08031e00  08031e00  00041e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08031e1c  08031e1c  0017ecf0  2**0
                  CONTENTS
  5 .ARM          00000000  08031e1c  08031e1c  0017ecf0  2**0
                  CONTENTS
  6 .preinit_array 00000000  08031e1c  08031e1c  0017ecf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  08031e1c  08031e1c  00041e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08031e30  08031e30  00041e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000110  24000000  08031e38  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000ce38  24000110  08031f48  00050110  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400cf48  08031f48  0005cf48  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0017ecf0  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 000bf400  24040000  24040000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 FontFlashSection 000003ec  90000000  90000000  00120000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000040  900003ec  900003ec  001203ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 0005e8c4  9000042c  9000042c  0012042c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_line   00050a26  00000000  00000000  0017ed1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_info   000e82d0  00000000  00000000  001cf744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00015151  00000000  00000000  002b7a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00004788  00000000  00000000  002ccb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0018c8f4  00000000  00000000  002d12f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 000042c8  00000000  00000000  0045dbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00042228  00000000  00000000  00461eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000d2  00000000  00000000  004a40d8  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00013c7c  00000000  00000000  004a41ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0802c95c 	.word	0x0802c95c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	0802c95c 	.word	0x0802c95c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000740 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800070c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800070e:	e003      	b.n	8000718 <LoopCopyDataInit>

08000710 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000712:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000714:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000716:	3104      	adds	r1, #4

08000718 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800071c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800071e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000720:	d3f6      	bcc.n	8000710 <CopyDataInit>
  ldr  r2, =_sbss
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000724:	e002      	b.n	800072c <LoopFillZerobss>

08000726 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000726:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000728:	f842 3b04 	str.w	r3, [r2], #4

0800072c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800072e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000730:	d3f9      	bcc.n	8000726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000732:	f00a fe19 	bl	800b368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000736:	f02b f8e1 	bl	802b8fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800073a:	f002 fa49 	bl	8002bd0 <main>
  bx  lr
 800073e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000740:	24040000 	.word	0x24040000
  ldr  r3, =_sidata
 8000744:	08031e38 	.word	0x08031e38
  ldr  r0, =_sdata
 8000748:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800074c:	24000110 	.word	0x24000110
  ldr  r2, =_sbss
 8000750:	24000110 	.word	0x24000110
  ldr  r3, = _ebss
 8000754:	2400cf48 	.word	0x2400cf48

08000758 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <BDMA1_IRQHandler>

0800075a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800075e:	f001 fd0f 	bl	8002180 <touchgfx_init>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}

08000766 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800076e:	f001 fd31 	bl	80021d4 <touchgfx_taskEntry>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    {
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
    }
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	0802d870 	.word	0x0802d870

0800079c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    }
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ffe9 	bl	800077c <_ZN8touchgfx15TouchControllerD1Ev>
 80007aa:	2104      	movs	r1, #4
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f02a fe86 	bl	802b4be <_ZdlPvj>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 80007c4:	2308      	movs	r3, #8
 80007c6:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <_ZN20STM32TouchController4initEv+0x30>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <_ZN20STM32TouchController4initEv+0x34>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	4619      	mov	r1, r3
 80007de:	2000      	movs	r0, #0
 80007e0:	f00a fba4 	bl	800af2c <BSP_TS_Init>
}
 80007e4:	bf00      	nop
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2400c8b6 	.word	0x2400c8b6
 80007f0:	2400c8b8 	.word	0x2400c8b8

080007f4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4619      	mov	r1, r3
 8000812:	2000      	movs	r0, #0
 8000814:	f00a fc30 	bl	800b078 <BSP_TS_GetState>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00a      	beq.n	800083e <_ZN20STM32TouchController11sampleTouchERlS0_+0x4a>
		"	mov %0, %1												\n"	\
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
 8000828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800082c:	f383 8811 	msr	BASEPRI, r3
 8000830:	f3bf 8f6f 	isb	sy
 8000834:	f3bf 8f4f 	dsb	sy
 8000838:	61fb      	str	r3, [r7, #28]
}
 800083a:	bf00      	nop
    {
        configASSERT(0);
 800083c:	e7fe      	b.n	800083c <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d009      	beq.n	8000858 <_ZN20STM32TouchController11sampleTouchERlS0_+0x64>
    {
        x = TS_State.TouchX;
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	461a      	mov	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	461a      	mov	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	601a      	str	r2, [r3, #0]

        return true;
 8000854:	2301      	movs	r3, #1
 8000856:	e000      	b.n	800085a <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    }

    return false;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	4a05      	ldr	r2, [pc, #20]	; (8000884 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff81 	bl	800077c <_ZN8touchgfx15TouchControllerD1Ev>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	0802d858 	.word	0x0802d858

08000888 <_ZN20STM32TouchControllerD0Ev>:
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ffe7 	bl	8000864 <_ZN20STM32TouchControllerD1Ev>
 8000896:	2104      	movs	r1, #4
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f02a fe10 	bl	802b4be <_ZdlPvj>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d831      	bhi.n	800091c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>
 80008b8:	a201      	add	r2, pc, #4	; (adr r2, 80008c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80008ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008be:	bf00      	nop
 80008c0:	080008d1 	.word	0x080008d1
 80008c4:	080008eb 	.word	0x080008eb
 80008c8:	08000903 	.word	0x08000903
 80008cc:	08000911 	.word	0x08000911
    {
    case GPIO::VSYNC_FREQ:
        HAL_GPIO_WritePin(GPIOG, LED3_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d6:	4813      	ldr	r0, [pc, #76]	; (8000924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 80008d8:	f00d f95e 	bl	800db98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 80008e4:	f00d f958 	bl	800db98 <HAL_GPIO_WritePin>
        break;
 80008e8:	e018      	b.n	800091c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>
    case GPIO::RENDER_TIME:
        HAL_GPIO_WritePin(GPIOG, LED2_Pin, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2104      	movs	r1, #4
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 80008f0:	f00d f952 	bl	800db98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, RENDER_TIME_Pin, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fa:	480a      	ldr	r0, [pc, #40]	; (8000924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 80008fc:	f00d f94c 	bl	800db98 <HAL_GPIO_WritePin>
        break;
 8000900:	e00c      	b.n	800091c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>
    case GPIO::FRAME_RATE:
        HAL_GPIO_WritePin(GPIOG, FRAME_RATE_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000908:	4806      	ldr	r0, [pc, #24]	; (8000924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 800090a:	f00d f945 	bl	800db98 <HAL_GPIO_WritePin>
        break;
 800090e:	e005      	b.n	800091c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x74>
    case GPIO::MCU_ACTIVE:
        HAL_GPIO_WritePin(GPIOG, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2101      	movs	r1, #1
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x7c>)
 8000916:	f00d f93f 	bl	800db98 <HAL_GPIO_WritePin>
        break;
 800091a:	bf00      	nop
    }
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	58021800 	.word	0x58021800

08000928 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b03      	cmp	r3, #3
 8000936:	d831      	bhi.n	800099c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
 8000938:	a201      	add	r2, pc, #4	; (adr r2, 8000940 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800093a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093e:	bf00      	nop
 8000940:	08000951 	.word	0x08000951
 8000944:	0800096b 	.word	0x0800096b
 8000948:	08000983 	.word	0x08000983
 800094c:	08000991 	.word	0x08000991
    {
    case GPIO::VSYNC_FREQ:
        HAL_GPIO_WritePin(GPIOG, LED3_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000956:	4813      	ldr	r0, [pc, #76]	; (80009a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 8000958:	f00d f91e 	bl	800db98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000962:	4810      	ldr	r0, [pc, #64]	; (80009a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 8000964:	f00d f918 	bl	800db98 <HAL_GPIO_WritePin>
        break;
 8000968:	e018      	b.n	800099c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
    case GPIO::RENDER_TIME:
        HAL_GPIO_WritePin(GPIOG, LED2_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2104      	movs	r1, #4
 800096e:	480d      	ldr	r0, [pc, #52]	; (80009a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 8000970:	f00d f912 	bl	800db98 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800097a:	480a      	ldr	r0, [pc, #40]	; (80009a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800097c:	f00d f90c 	bl	800db98 <HAL_GPIO_WritePin>
        break;
 8000980:	e00c      	b.n	800099c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
    case GPIO::FRAME_RATE:
        HAL_GPIO_WritePin(GPIOG, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000988:	4806      	ldr	r0, [pc, #24]	; (80009a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 800098a:	f00d f905 	bl	800db98 <HAL_GPIO_WritePin>
        break;
 800098e:	e005      	b.n	800099c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
    case GPIO::MCU_ACTIVE:
        HAL_GPIO_WritePin(GPIOG, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2101      	movs	r1, #1
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x7c>)
 8000996:	f00d f8ff 	bl	800db98 <HAL_GPIO_WritePin>
        break;
 800099a:	bf00      	nop
    }
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	58021800 	.word	0x58021800

080009a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d82b      	bhi.n	8000a10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>
 80009b8:	a201      	add	r2, pc, #4	; (adr r2, 80009c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80009ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009be:	bf00      	nop
 80009c0:	080009d1 	.word	0x080009d1
 80009c4:	080009e7 	.word	0x080009e7
 80009c8:	080009fb 	.word	0x080009fb
 80009cc:	08000a07 	.word	0x08000a07
    {
    case GPIO::VSYNC_FREQ:
        HAL_GPIO_TogglePin(GPIOG, LED3_Pin);
 80009d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d4:	4810      	ldr	r0, [pc, #64]	; (8000a18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 80009d6:	f00d f8f8 	bl	800dbca <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIOG, VSYNC_FREQ_Pin);
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	480e      	ldr	r0, [pc, #56]	; (8000a18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 80009e0:	f00d f8f3 	bl	800dbca <HAL_GPIO_TogglePin>
        break;
 80009e4:	e014      	b.n	8000a10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>
    case GPIO::RENDER_TIME:
        HAL_GPIO_TogglePin(GPIOG, LED2_Pin);
 80009e6:	2104      	movs	r1, #4
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 80009ea:	f00d f8ee 	bl	800dbca <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIOG, RENDER_TIME_Pin);
 80009ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 80009f4:	f00d f8e9 	bl	800dbca <HAL_GPIO_TogglePin>
        break;
 80009f8:	e00a      	b.n	8000a10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>
    case GPIO::FRAME_RATE:
        HAL_GPIO_TogglePin(GPIOG, FRAME_RATE_Pin);
 80009fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 8000a00:	f00d f8e3 	bl	800dbca <HAL_GPIO_TogglePin>
        break;
 8000a04:	e004      	b.n	8000a10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x68>
    case GPIO::MCU_ACTIVE:
        HAL_GPIO_TogglePin(GPIOG, MCU_ACTIVE_Pin);
 8000a06:	2101      	movs	r1, #1
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x70>)
 8000a0a:	f00d f8de 	bl	800dbca <HAL_GPIO_TogglePin>
        break;
 8000a0e:	bf00      	nop
    }
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	58021800 	.word	0x58021800

08000a1c <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    {
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	601a      	str	r2, [r3, #0]
    }
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	0802eb54 	.word	0x0802eb54

08000a3c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
    }
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ffe9 	bl	8000a1c <_ZN8touchgfx3HALD1Ev>
 8000a4a:	217c      	movs	r1, #124	; 0x7c
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f02a fd36 	bl	802b4be <_ZdlPvj>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	78fa      	ldrb	r2, [r7, #3]
 8000a6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2201      	movs	r2, #1
 8000a74:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
 8000a90:	4613      	mov	r3, r2
 8000a92:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	887a      	ldrh	r2, [r7, #2]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d304      	bcc.n	8000aa8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	883a      	ldrh	r2, [r7, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d205      	bcs.n	8000ab4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8000aac:	219e      	movs	r1, #158	; 0x9e
 8000aae:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8000ab0:	f02a feda 	bl	802b868 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000aba:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8000abc:	883b      	ldrh	r3, [r7, #0]
 8000abe:	8013      	strh	r3, [r2, #0]
    }
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2400c8b0 	.word	0x2400c8b0
 8000acc:	2400c8b2 	.word	0x2400c8b2
 8000ad0:	0802c978 	.word	0x0802c978
 8000ad4:	0802c9dc 	.word	0x0802c9dc
 8000ad8:	0802ca20 	.word	0x0802ca20
 8000adc:	2400c8b6 	.word	0x2400c8b6
 8000ae0:	2400c8b8 	.word	0x2400c8b8

08000ae4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d009      	beq.n	8000b0a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4610      	mov	r0, r2
 8000b04:	4798      	blx	r3
 8000b06:	4603      	mov	r3, r0
 8000b08:	e000      	b.n	8000b0c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8000b0a:	2300      	movs	r3, #0
    }
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f018 fb0d 	bl	801913c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	33a4      	adds	r3, #164	; 0xa4
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	4798      	blx	r3
    }
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6039      	str	r1, [r7, #0]
    {
        return false;
 8000b40:	2300      	movs	r3, #0
    }
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
 8000b5c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d106      	bne.n	8000b72 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8000b68:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8000b6e:	f02a fe7b 	bl	802b868 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bf14      	ite	ne
 8000b8a:	2301      	movne	r3, #1
 8000b8c:	2300      	moveq	r3, #0
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8000b92:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bf14      	ite	ne
 8000b9a:	2301      	movne	r3, #1
 8000b9c:	2300      	moveq	r3, #0
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8000ba2:	701a      	strb	r2, [r3, #0]
    }
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	0802ca68 	.word	0x0802ca68
 8000bb0:	0802caa0 	.word	0x0802caa0
 8000bb4:	0802ca20 	.word	0x0802ca20
 8000bb8:	2400c8ba 	.word	0x2400c8ba
 8000bbc:	2400c8bb 	.word	0x2400c8bb

08000bc0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8000bc8:	2300      	movs	r3, #0
    }
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	460b      	mov	r3, r1
 8000be0:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d004      	beq.n	8000bf4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bee:	887a      	ldrh	r2, [r7, #2]
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	4798      	blx	r3
        }
    }
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8000c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3318      	adds	r3, #24
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	4798      	blx	r3
 8000c2e:	4603      	mov	r3, r0
    }
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d011      	beq.n	8000c74 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d11e      	bne.n	8000c96 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000c60:	881a      	ldrh	r2, [r3, #0]
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000c64:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8000c66:	4a11      	ldr	r2, [pc, #68]	; (8000cac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000c68:	89bb      	ldrh	r3, [r7, #12]
 8000c6a:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8000c72:	e010      	b.n	8000c96 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00c      	beq.n	8000c96 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000c84:	881a      	ldrh	r2, [r3, #0]
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8000c88:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
    }
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	2400c8b4 	.word	0x2400c8b4
 8000ca8:	2400c8b2 	.word	0x2400c8b2
 8000cac:	2400c8b0 	.word	0x2400c8b0

08000cb0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f017 fbf4 	bl	80184a8 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fe9f 	bl	8000a1c <_ZN8touchgfx3HALD1Ev>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	0802dbd8 	.word	0x0802dbd8

08000cec <_ZN20TouchGFXGeneratedHALD0Ev>:
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ffe7 	bl	8000cc8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000cfa:	217c      	movs	r1, #124	; 0x7c
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f02a fbde 	bl	802b4be <_ZdlPvj>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ffca 	bl	8000cb0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32h7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fd40 	bl	80027b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	337c      	adds	r3, #124	; 0x7c
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	4798      	blx	r3
    enableInterrupts();
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3374      	adds	r3, #116	; 0x74
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8000d5c:	f000 f956 	bl	800100c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	336c      	adds	r3, #108	; 0x6c
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	480b      	ldr	r0, [pc, #44]	; (8000da0 <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
 8000d74:	f00c ff10 	bl	800db98 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	4809      	ldr	r0, [pc, #36]	; (8000da4 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000d7e:	f00c ff0b 	bl	800db98 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2102      	movs	r1, #2
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8000d88:	f00c ff06 	bl	800db98 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8000d8c:	f000 f93e 	bl	800100c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	336c      	adds	r3, #108	; 0x6c
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	4798      	blx	r3
        OSWrappers::waitForVSync();
 8000d9e:	e7f5      	b.n	8000d8c <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 8000da0:	58022800 	.word	0x58022800
 8000da4:	58020000 	.word	0x58020000

08000da8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 fd96 	bl	80028e4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6839      	ldr	r1, [r7, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fd95 	bl	8002900 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6839      	ldr	r1, [r7, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fd9c 	bl	800292c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000df4:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dfc:	f3bf 8f4f 	dsb	sy
}
 8000e00:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e08:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	0b5b      	lsrs	r3, r3, #13
 8000e0e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e12:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	08db      	lsrs	r3, r3, #3
 8000e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e1c:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	015a      	lsls	r2, r3, #5
 8000e22:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e26:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000e2c:	4912      	ldr	r1, [pc, #72]	; (8000e78 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x98>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	1e5a      	subs	r2, r3, #1
 8000e38:	60fa      	str	r2, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bf14      	ite	ne
 8000e3e:	2301      	movne	r3, #1
 8000e40:	2300      	moveq	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d000      	beq.n	8000e4a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x6a>
      do {
 8000e48:	e7e9      	b.n	8000e1e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1e5a      	subs	r2, r3, #1
 8000e4e:	613a      	str	r2, [r7, #16]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf14      	ite	ne
 8000e54:	2301      	movne	r3, #1
 8000e56:	2300      	moveq	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d000      	beq.n	8000e60 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
    do {
 8000e5e:	e7d9      	b.n	8000e14 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e60:	f3bf 8f4f 	dsb	sy
}
 8000e64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e66:	f3bf 8f6f 	isb	sy
}
 8000e6a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e6c:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 fcb8 	bl	80027fc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 fcbc 	bl	800281c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fcbe 	bl	8002838 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fcc0 	bl	8002854 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	4a05      	ldr	r2, [pc, #20]	; (8000efc <_ZN11TouchGFXHALD1Ev+0x20>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff feeb 	bl	8000cc8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	0802d888 	.word	0x0802d888

08000f00 <_ZN11TouchGFXHALD0Ev>:
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ffe7 	bl	8000edc <_ZN11TouchGFXHALD1Ev>
 8000f0e:	217c      	movs	r1, #124	; 0x7c
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f02a fad4 	bl	802b4be <_ZdlPvj>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000f24:	2200      	movs	r2, #0
 8000f26:	2101      	movs	r1, #1
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f013 faf8 	bl	801451e <osSemaphoreNew>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8000f32:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d105      	bne.n	8000f48 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8000f40:	2129      	movs	r1, #41	; 0x29
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8000f44:	f02a fc90 	bl	802b868 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f013 fc05 	bl	801475c <osMessageQueueNew>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8000f56:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d105      	bne.n	8000f6c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8000f64:	212d      	movs	r1, #45	; 0x2d
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8000f68:	f02a fc7e 	bl	802b868 <__assert_func>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2400012c 	.word	0x2400012c
 8000f74:	0802caf0 	.word	0x0802caf0
 8000f78:	0802cb3c 	.word	0x0802cb3c
 8000f7c:	0802cb6c 	.word	0x0802cb6c
 8000f80:	24000130 	.word	0x24000130
 8000f84:	0802cbe8 	.word	0x0802cbe8

08000f88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	4618      	mov	r0, r3
 8000f96:	f013 fb4b 	bl	8014630 <osSemaphoreAcquire>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2400012c 	.word	0x2400012c

08000fa4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f013 fb91 	bl	80146d4 <osSemaphoreRelease>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2400012c 	.word	0x2400012c

08000fbc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f013 fb32 	bl	8014630 <osSemaphoreAcquire>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2400012c 	.word	0x2400012c

08000fd4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f013 fb79 	bl	80146d4 <osSemaphoreRelease>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2400012c 	.word	0x2400012c

08000fec <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4903      	ldr	r1, [pc, #12]	; (8001008 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8000ffa:	f013 fc23 	bl	8014844 <osMessageQueuePut>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	24000130 	.word	0x24000130
 8001008:	24000004 	.word	0x24000004

0800100c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	1d39      	adds	r1, r7, #4
 8001018:	2300      	movs	r3, #0
 800101a:	2200      	movs	r2, #0
 800101c:	f013 fc72 	bl	8014904 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	1d39      	adds	r1, r7, #4
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	2200      	movs	r2, #0
 800102c:	f013 fc6a 	bl	8014904 <osMessageQueueGet>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	24000130 	.word	0x24000130

0800103c <__NVIC_EnableIRQ>:
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_DisableIRQ>:
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001086:	2b00      	cmp	r3, #0
 8001088:	db12      	blt.n	80010b0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	f003 021f 	and.w	r2, r3, #31
 8001090:	490a      	ldr	r1, [pc, #40]	; (80010bc <__NVIC_DisableIRQ+0x44>)
 8001092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	2001      	movs	r0, #1
 800109a:	fa00 f202 	lsl.w	r2, r0, r2
 800109e:	3320      	adds	r3, #32
 80010a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80010a4:	f3bf 8f4f 	dsb	sy
}
 80010a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010aa:	f3bf 8f6f 	isb	sy
}
 80010ae:	bf00      	nop
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
        : color(0)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
    {
    }
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    {
        return color;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
    }
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    {
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	601a      	str	r2, [r3, #0]
    }
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	0802d9a8 	.word	0x0802d9a8

08001114 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    }
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ffe9 	bl	80010f4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8001122:	2104      	movs	r1, #4
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f02a f9ca 	bl	802b4be <_ZdlPvj>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3344      	adds	r3, #68	; 0x44
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	4798      	blx	r3
    }
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    {
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
    }
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	0802f0ac 	.word	0x0802f0ac

08001170 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    }
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ffe9 	bl	8001150 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800117e:	210c      	movs	r1, #12
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f02a f99c 	bl	802b4be <_ZdlPvj>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	721a      	strb	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	725a      	strb	r2, [r3, #9]
    {
    }
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	0802f0ac 	.word	0x0802f0ac

080011c4 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80011cc:	2301      	movs	r3, #1
    }
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3328      	adds	r3, #40	; 0x28
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4610      	mov	r0, r2
 80011ee:	4798      	blx	r3
    }
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
        return instance;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
    }
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	2400c8bc 	.word	0x2400c8bc

08001210 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3314      	adds	r3, #20
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4610      	mov	r0, r2
 8001228:	4798      	blx	r3
    }
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800123a:	f7ff ffdd 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ffe5 	bl	8001210 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	330c      	adds	r3, #12
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff30 	bl	80010c0 <_ZN8touchgfx9colortypeC1Ev>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 800126c:	b5b0      	push	{r4, r5, r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	330c      	adds	r3, #12
 800127a:	4619      	mov	r1, r3
 800127c:	4610      	mov	r0, r2
 800127e:	f7ff ff87 	bl	8001190 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <_ZN8STM32DMAC1Ev+0x50>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f103 000c 	add.w	r0, r3, #12
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3320      	adds	r3, #32
 8001292:	2260      	movs	r2, #96	; 0x60
 8001294:	4619      	mov	r1, r3
 8001296:	f018 f8b7 	bl	8019408 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3320      	adds	r3, #32
 800129e:	245f      	movs	r4, #95	; 0x5f
 80012a0:	461d      	mov	r5, r3
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	db05      	blt.n	80012b2 <_ZN8STM32DMAC1Ev+0x46>
 80012a6:	4628      	mov	r0, r5
 80012a8:	f7ff ffd1 	bl	800124e <_ZN8touchgfx6BlitOpC1Ev>
 80012ac:	3520      	adds	r5, #32
 80012ae:	3c01      	subs	r4, #1
 80012b0:	e7f7      	b.n	80012a2 <_ZN8STM32DMAC1Ev+0x36>
{
}
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bdb0      	pop	{r4, r5, r7, pc}
 80012bc:	0802d958 	.word	0x0802d958

080012c0 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <_ZN8STM32DMAD1Ev+0x30>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80012ce:	205a      	movs	r0, #90	; 0x5a
 80012d0:	f7ff fed2 	bl	8001078 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	330c      	adds	r3, #12
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fab1 	bl	8001840 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff35 	bl	8001150 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	0802d958 	.word	0x0802d958

080012f4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
}
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ffdf 	bl	80012c0 <_ZN8STM32DMAD1Ev>
 8001302:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f02a f8d9 	bl	802b4be <_ZdlPvj>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 8001322:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001326:	4a11      	ldr	r2, [pc, #68]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 8001328:	f043 0310 	orr.w	r3, r3, #16
 800132c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 8001332:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 8001340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 8001344:	f043 0310 	orr.w	r3, r3, #16
 8001348:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 800134c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <_ZN8STM32DMA10initializeEv+0x54>)
 8001350:	f023 0310 	bic.w	r3, r3, #16
 8001354:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <_ZN8STM32DMA10initializeEv+0x58>)
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <_ZN8STM32DMA10initializeEv+0x5c>)
 800135a:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800135c:	205a      	movs	r0, #90	; 0x5a
 800135e:	f7ff fe6d 	bl	800103c <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	58024400 	.word	0x58024400
 8001370:	2400cc60 	.word	0x2400cc60
 8001374:	08001233 	.word	0x08001233

08001378 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]

    switch (format)
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	2b0b      	cmp	r3, #11
 800138c:	d826      	bhi.n	80013dc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800138e:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8001390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001394:	080013d1 	.word	0x080013d1
 8001398:	080013cb 	.word	0x080013cb
 800139c:	080013c5 	.word	0x080013c5
 80013a0:	080013dd 	.word	0x080013dd
 80013a4:	080013dd 	.word	0x080013dd
 80013a8:	080013dd 	.word	0x080013dd
 80013ac:	080013dd 	.word	0x080013dd
 80013b0:	080013d7 	.word	0x080013d7
 80013b4:	080013d7 	.word	0x080013d7
 80013b8:	080013d7 	.word	0x080013d7
 80013bc:	080013d7 	.word	0x080013d7
 80013c0:	080013d7 	.word	0x080013d7
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
        break;
 80013c8:	e00e      	b.n	80013e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80013ca:	2301      	movs	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
        break;
 80013ce:	e00b      	b.n	80013e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80013d0:	2302      	movs	r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
        break;
 80013d4:	e008      	b.n	80013e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80013d6:	2305      	movs	r3, #5
 80013d8:	60fb      	str	r3, [r7, #12]
        break;
 80013da:	e005      	b.n	80013e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80013de:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80013e0:	2167      	movs	r1, #103	; 0x67
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80013e4:	f02a fa40 	bl	802b868 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80013e8:	68fb      	ldr	r3, [r7, #12]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	0802cc2c 	.word	0x0802cc2c
 80013f8:	0802cc48 	.word	0x0802cc48
 80013fc:	0802cc94 	.word	0x0802cc94

08001400 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	2b0a      	cmp	r3, #10
 8001414:	d821      	bhi.n	800145a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8001416:	a201      	add	r2, pc, #4	; (adr r2, 800141c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	08001455 	.word	0x08001455
 8001420:	0800144f 	.word	0x0800144f
 8001424:	08001449 	.word	0x08001449
 8001428:	0800145b 	.word	0x0800145b
 800142c:	0800145b 	.word	0x0800145b
 8001430:	0800145b 	.word	0x0800145b
 8001434:	0800145b 	.word	0x0800145b
 8001438:	0800144f 	.word	0x0800144f
 800143c:	0800144f 	.word	0x0800144f
 8001440:	0800144f 	.word	0x0800144f
 8001444:	0800144f 	.word	0x0800144f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
        break;
 800144c:	e00b      	b.n	8001466 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800144e:	2301      	movs	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
        break;
 8001452:	e008      	b.n	8001466 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001454:	2302      	movs	r3, #2
 8001456:	60fb      	str	r3, [r7, #12]
        break;
 8001458:	e005      	b.n	8001466 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800145c:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800145e:	2188      	movs	r1, #136	; 0x88
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8001462:	f02a fa01 	bl	802b868 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	0802cc2c 	.word	0x0802cc2c
 8001474:	0802cd0c 	.word	0x0802cd0c
 8001478:	0802cc94 	.word	0x0802cc94

0800147c <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8001484:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	7f5b      	ldrb	r3, [r3, #29]
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff67 	bl	8001378 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80014aa:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	7f9b      	ldrb	r3, [r3, #30]
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff60 	bl	8001378 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80014b8:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	7f9b      	ldrb	r3, [r3, #30]
 80014be:	4619      	mov	r1, r3
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff9d 	bl	8001400 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80014c6:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	8b5b      	ldrh	r3, [r3, #26]
 80014cc:	461a      	mov	r2, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	8a9b      	ldrh	r3, [r3, #20]
 80014d2:	1ad2      	subs	r2, r2, r3
 80014d4:	4b97      	ldr	r3, [pc, #604]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	8b5b      	ldrh	r3, [r3, #26]
 80014dc:	461a      	mov	r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	8a9b      	ldrh	r3, [r3, #20]
 80014e2:	1ad2      	subs	r2, r2, r3
 80014e4:	4b93      	ldr	r3, [pc, #588]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80014e6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	8b1b      	ldrh	r3, [r3, #24]
 80014ec:	461a      	mov	r2, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	8a9b      	ldrh	r3, [r3, #20]
 80014f2:	1ad2      	subs	r2, r2, r3
 80014f4:	4b8f      	ldr	r3, [pc, #572]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80014f6:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80014f8:	4a8e      	ldr	r2, [pc, #568]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	8adb      	ldrh	r3, [r3, #22]
 8001502:	461a      	mov	r2, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	8a9b      	ldrh	r3, [r3, #20]
 8001508:	041b      	lsls	r3, r3, #16
 800150a:	431a      	orrs	r2, r3
 800150c:	4b89      	ldr	r3, [pc, #548]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800150e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	4b87      	ldr	r3, [pc, #540]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001516:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4b85      	ldr	r3, [pc, #532]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800151e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001528:	d037      	beq.n	800159a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 800152a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800152e:	f200 80e3 	bhi.w	80016f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8001532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001536:	d015      	beq.n	8001564 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8001538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800153c:	f200 80dc 	bhi.w	80016f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8001540:	2b80      	cmp	r3, #128	; 0x80
 8001542:	d045      	beq.n	80015d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 8001544:	2b80      	cmp	r3, #128	; 0x80
 8001546:	f200 80d7 	bhi.w	80016f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800154a:	2b40      	cmp	r3, #64	; 0x40
 800154c:	f000 80bf 	beq.w	80016ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8001550:	2b40      	cmp	r3, #64	; 0x40
 8001552:	f200 80d1 	bhi.w	80016f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 8001556:	2b04      	cmp	r3, #4
 8001558:	f000 80a4 	beq.w	80016a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 800155c:	2b20      	cmp	r3, #32
 800155e:	f000 80b6 	beq.w	80016ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 8001562:	e0c9      	b.n	80016f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	7f1b      	ldrb	r3, [r3, #28]
 8001568:	061b      	lsls	r3, r3, #24
 800156a:	4619      	mov	r1, r3
 800156c:	4a71      	ldr	r2, [pc, #452]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800156e:	4b72      	ldr	r3, [pc, #456]	; (8001738 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8001570:	430b      	orrs	r3, r1
 8001572:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	330c      	adds	r3, #12
 8001578:	4c6e      	ldr	r4, [pc, #440]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fdae 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 8001580:	4603      	mov	r3, r0
 8001582:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001584:	4a6b      	ldr	r2, [pc, #428]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	691a      	ldr	r2, [r3, #16]
 800158e:	4b69      	ldr	r3, [pc, #420]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001590:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001592:	4b68      	ldr	r3, [pc, #416]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001594:	4a69      	ldr	r2, [pc, #420]	; (800173c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8001596:	601a      	str	r2, [r3, #0]
        break;
 8001598:	e0c7      	b.n	800172a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	7f1b      	ldrb	r3, [r3, #28]
 800159e:	061b      	lsls	r3, r3, #24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4a64      	ldr	r2, [pc, #400]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015a4:	4b66      	ldr	r3, [pc, #408]	; (8001740 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80015a6:	430b      	orrs	r3, r1
 80015a8:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	330c      	adds	r3, #12
 80015ae:	4c61      	ldr	r4, [pc, #388]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fd93 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 80015b6:	4603      	mov	r3, r0
 80015b8:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80015ba:	4a5e      	ldr	r2, [pc, #376]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	4b5b      	ldr	r3, [pc, #364]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015c6:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80015c8:	4b5a      	ldr	r3, [pc, #360]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015ca:	4a5c      	ldr	r2, [pc, #368]	; (800173c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80015cc:	601a      	str	r2, [r3, #0]
        break;
 80015ce:	e0ac      	b.n	800172a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
  case BLIT_OP_COPY_L8:
      {
        const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	60fb      	str	r3, [r7, #12]
        bool blend = true;
 80015d6:	2301      	movs	r3, #1
 80015d8:	77fb      	strb	r3, [r7, #31]

        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	7f1b      	ldrb	r3, [r3, #28]
 80015de:	061b      	lsls	r3, r3, #24
 80015e0:	461a      	mov	r2, r3
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	4a53      	ldr	r2, [pc, #332]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80015ee:	4a51      	ldr	r2, [pc, #324]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	4b4e      	ldr	r3, [pc, #312]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80015fa:	615a      	str	r2, [r3, #20]

        /* Write foreground CLUT memory address */
        WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1d1a      	adds	r2, r3, #4
 8001600:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c

        switch ((Bitmap::ClutFormat)palette->format)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d00d      	beq.n	800162e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 8001612:	e020      	b.n	8001656 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
        {
        case Bitmap::CLUT_FORMAT_L8_ARGB8888:
            /* Write foreground CLUT size and CLUT color mode */
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001614:	4b47      	ldr	r3, [pc, #284]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001616:	69da      	ldr	r2, [r3, #28]
 8001618:	4b4a      	ldr	r3, [pc, #296]	; (8001744 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800161a:	4013      	ands	r3, r2
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	8852      	ldrh	r2, [r2, #2]
 8001620:	3a01      	subs	r2, #1
 8001622:	0212      	lsls	r2, r2, #8
 8001624:	4611      	mov	r1, r2
 8001626:	4a43      	ldr	r2, [pc, #268]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001628:	430b      	orrs	r3, r1
 800162a:	61d3      	str	r3, [r2, #28]
            break;
 800162c:	e01a      	b.n	8001664 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
        case Bitmap::CLUT_FORMAT_L8_RGB888:
            if(blitOp.alpha == 255)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	7f1b      	ldrb	r3, [r3, #28]
 8001632:	2bff      	cmp	r3, #255	; 0xff
 8001634:	d101      	bne.n	800163a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
            {
                blend = false;
 8001636:	2300      	movs	r3, #0
 8001638:	77fb      	strb	r3, [r7, #31]
            }
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800163a:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800163c:	69da      	ldr	r2, [r3, #28]
 800163e:	4b41      	ldr	r3, [pc, #260]	; (8001744 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8001640:	4013      	ands	r3, r2
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	8852      	ldrh	r2, [r2, #2]
 8001646:	3a01      	subs	r2, #1
 8001648:	0212      	lsls	r2, r2, #8
 800164a:	4313      	orrs	r3, r2
 800164c:	4a39      	ldr	r2, [pc, #228]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	61d3      	str	r3, [r2, #28]
            break;
 8001654:	e006      	b.n	8001664 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
        case Bitmap::CLUT_FORMAT_L8_RGB565:
        default:
            assert(0 && "Unsupported format");
 8001656:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8001658:	4a3c      	ldr	r2, [pc, #240]	; (800174c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 800165a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800165e:	483c      	ldr	r0, [pc, #240]	; (8001750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8001660:	f02a f902 	bl	802b868 <__assert_func>
            break;
        }

        /* Enable the CLUT loading for the foreground */
        SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001664:	4b33      	ldr	r3, [pc, #204]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	4a32      	ldr	r2, [pc, #200]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800166a:	f043 0320 	orr.w	r3, r3, #32
 800166e:	61d3      	str	r3, [r2, #28]

        while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	f003 0320 	and.w	r3, r3, #32
 8001678:	2b00      	cmp	r3, #0
 800167a:	bf14      	ite	ne
 800167c:	2301      	movne	r3, #1
 800167e:	2300      	moveq	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d000      	beq.n	8001688 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f4>
 8001686:	e7f3      	b.n	8001670 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>
        {
        }
        DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800168a:	2210      	movs	r2, #16
 800168c:	609a      	str	r2, [r3, #8]

        /* Set DMA2D mode */
        if(blend)
 800168e:	7ffb      	ldrb	r3, [r7, #31]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001696:	4a29      	ldr	r2, [pc, #164]	; (800173c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8001698:	601a      	str	r2, [r3, #0]
        else
        {
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
      }
      break;
 800169a:	e046      	b.n	800172a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800169e:	4a2d      	ldr	r2, [pc, #180]	; (8001754 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 80016a0:	601a      	str	r2, [r3, #0]
      break;
 80016a2:	e042      	b.n	800172a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	7f1b      	ldrb	r3, [r3, #28]
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	461a      	mov	r2, r3
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	4a20      	ldr	r2, [pc, #128]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80016b8:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016c4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016c8:	4a1c      	ldr	r2, [pc, #112]	; (800173c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80016ca:	601a      	str	r2, [r3, #0]
        break;
 80016cc:	e02d      	b.n	800172a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	7f1b      	ldrb	r3, [r3, #28]
 80016d2:	061b      	lsls	r3, r3, #24
 80016d4:	461a      	mov	r2, r3
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	4a16      	ldr	r2, [pc, #88]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80016e2:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016ee:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80016f4:	601a      	str	r2, [r3, #0]
        break;
 80016f6:	e018      	b.n	800172a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x296>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	7f1b      	ldrb	r3, [r3, #28]
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	461a      	mov	r2, r3
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170a:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	7f5a      	ldrb	r2, [r3, #29]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	7f9b      	ldrb	r3, [r3, #30]
 8001714:	429a      	cmp	r2, r3
 8001716:	d003      	beq.n	8001720 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800171a:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c0>)
 800171c:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 800171e:	e003      	b.n	8001728 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8001722:	f240 2201 	movw	r2, #513	; 0x201
 8001726:	601a      	str	r2, [r3, #0]
        break;
 8001728:	bf00      	nop
    }
}
 800172a:	bf00      	nop
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}
 8001732:	bf00      	nop
 8001734:	52001000 	.word	0x52001000
 8001738:	0002000a 	.word	0x0002000a
 800173c:	00020201 	.word	0x00020201
 8001740:	00020009 	.word	0x00020009
 8001744:	ffff00ef 	.word	0xffff00ef
 8001748:	0802cd58 	.word	0x0802cd58
 800174c:	0802cd74 	.word	0x0802cd74
 8001750:	0802cc94 	.word	0x0802cc94
 8001754:	00010201 	.word	0x00010201

08001758 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	7f9b      	ldrb	r3, [r3, #30]
 8001766:	4619      	mov	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fe49 	bl	8001400 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800176e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001770:	4a2f      	ldr	r2, [pc, #188]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	8adb      	ldrh	r3, [r3, #22]
 800177a:	461a      	mov	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	8a9b      	ldrh	r3, [r3, #20]
 8001780:	041b      	lsls	r3, r3, #16
 8001782:	431a      	orrs	r2, r3
 8001784:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001786:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	691a      	ldr	r2, [r3, #16]
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800178e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	8b5b      	ldrh	r3, [r3, #26]
 8001794:	461a      	mov	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	8a9b      	ldrh	r3, [r3, #20]
 800179a:	1ad2      	subs	r2, r2, r3
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800179e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d12e      	bne.n	8001806 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	8b5b      	ldrh	r3, [r3, #26]
 80017ac:	461a      	mov	r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	8a9b      	ldrh	r3, [r3, #20]
 80017b2:	1ad2      	subs	r2, r2, r3
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017b6:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	8b5b      	ldrh	r3, [r3, #26]
 80017bc:	461a      	mov	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	8a9b      	ldrh	r3, [r3, #20]
 80017c2:	1ad2      	subs	r2, r2, r3
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017c6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	7f1b      	ldrb	r3, [r3, #28]
 80017d2:	061b      	lsls	r3, r3, #24
 80017d4:	4619      	mov	r1, r3
 80017d6:	4a16      	ldr	r2, [pc, #88]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 80017da:	430b      	orrs	r3, r1
 80017dc:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	330c      	adds	r3, #12
 80017e2:	4c13      	ldr	r4, [pc, #76]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fc79 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 80017ea:	4603      	mov	r3, r0
 80017ec:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017f4:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	691a      	ldr	r2, [r3, #16]
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80017fc:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8001802:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8001804:	e010      	b.n	8001828 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	330c      	adds	r3, #12
 8001816:	4c06      	ldr	r4, [pc, #24]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fc5f 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 800181e:	4603      	mov	r3, r0
 8001820:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001822:	4b03      	ldr	r3, [pc, #12]	; (8001830 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8001824:	4a05      	ldr	r2, [pc, #20]	; (800183c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8001826:	601a      	str	r2, [r3, #0]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bd90      	pop	{r4, r7, pc}
 8001830:	52001000 	.word	0x52001000
 8001834:	00010009 	.word	0x00010009
 8001838:	00020201 	.word	0x00020201
 800183c:	00030201 	.word	0x00030201

08001840 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	4a05      	ldr	r2, [pc, #20]	; (8001860 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fc4f 	bl	80010f4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	0802f0fc 	.word	0x0802f0fc

08001864 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ffe7 	bl	8001840 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8001872:	2114      	movs	r1, #20
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f029 fe22 	bl	802b4be <_ZdlPvj>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	801a      	strh	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	805a      	strh	r2, [r3, #2]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	809a      	strh	r2, [r3, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	80da      	strh	r2, [r3, #6]
    {
    }
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
    }
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2400c938 	.word	0x2400c938

080018d4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
    {
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	601a      	str	r2, [r3, #0]
    }
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	0802dbc4 	.word	0x0802dbc4

080018f4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
    }
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ffe9 	bl	80018d4 <_ZN8touchgfx12FontProviderD1Ev>
 8001902:	2104      	movs	r1, #4
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f029 fdda 	bl	802b4be <_ZdlPvj>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	611a      	str	r2, [r3, #16]
    {
    }
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	0802dbb4 	.word	0x0802dbb4

08001954 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    {
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	601a      	str	r2, [r3, #0]
    }
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	0802dbb4 	.word	0x0802dbb4

08001974 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    }
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ffe9 	bl	8001954 <_ZN8touchgfx7MVPHeapD1Ev>
 8001982:	2114      	movs	r1, #20
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f029 fd9a 	bl	802b4be <_ZdlPvj>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
    {
    }
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
    {
    }
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
    {
    }
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	70fb      	strb	r3, [r7, #3]
    {
    }
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
    {
    }
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
    {
    }
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    {
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	601a      	str	r2, [r3, #0]
    }
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	0802db8c 	.word	0x0802db8c

08001a38 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    }
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffe9 	bl	8001a18 <_ZN8touchgfx15UIEventListenerD1Ev>
 8001a46:	2104      	movs	r1, #4
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f029 fd38 	bl	802b4be <_ZdlPvj>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    {
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
    }
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	080302d0 	.word	0x080302d0

08001a78 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    }
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffe9 	bl	8001a58 <_ZN8touchgfx3LCDD1Ev>
 8001a86:	2108      	movs	r1, #8
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f029 fd18 	bl	802b4be <_ZdlPvj>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
    {
    }
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001ac2:	6810      	ldr	r0, [r2, #0]
 8001ac4:	6851      	ldr	r1, [r2, #4]
 8001ac6:	c303      	stmia	r3!, {r0, r1}
    }
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
    {
 8001adc:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	601a      	str	r2, [r3, #0]
    }
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	0802db74 	.word	0x0802db74

08001af4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    }
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe9 	bl	8001ad4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8001b02:	2104      	movs	r1, #4
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f029 fcda 	bl	802b4be <_ZdlPvj>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	801a      	strh	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	805a      	strh	r2, [r3, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	809a      	strh	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	80da      	strh	r2, [r3, #6]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	811a      	strh	r2, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	815a      	strh	r2, [r3, #10]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	819a      	strh	r2, [r3, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	739a      	strb	r2, [r3, #14]
        {
        }
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ffd5 	bl	8001b14 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	829a      	strh	r2, [r3, #20]
    {
    }
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8001b8e:	4a55      	ldr	r2, [pc, #340]	; (8001ce4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	331c      	adds	r3, #28
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ffcc 	bl	8001b5a <_ZN8touchgfx8GesturesC1Ev>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	639a      	str	r2, [r3, #56]	; 0x38
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3350      	adds	r3, #80	; 0x50
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fe39 	bl	8001884 <_ZN8touchgfx4RectC1Ev>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	659a      	str	r2, [r3, #88]	; 0x58
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	661a      	str	r2, [r3, #96]	; 0x60
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	671a      	str	r2, [r3, #112]	; 0x70
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8001c9a:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8001ca2:	8b3b      	ldrh	r3, [r7, #24]
 8001ca4:	8013      	strh	r3, [r2, #0]
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8001ca8:	881a      	ldrh	r2, [r3, #0]
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8001cac:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cae:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8001cb0:	8bbb      	ldrh	r3, [r7, #28]
 8001cb2:	8013      	strh	r3, [r2, #0]
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8001cb6:	881a      	ldrh	r2, [r3, #0]
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8001cba:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cc2:	8b3a      	ldrh	r2, [r7, #24]
 8001cc4:	8bbb      	ldrh	r3, [r7, #28]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	bf34      	ite	cc
 8001cca:	2301      	movcc	r3, #1
 8001ccc:	2300      	movcs	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	0802eb54 	.word	0x0802eb54
 8001ce8:	2400c8bc 	.word	0x2400c8bc
 8001cec:	2400c8b0 	.word	0x2400c8b0
 8001cf0:	2400c8b6 	.word	0x2400c8b6
 8001cf4:	2400c8b2 	.word	0x2400c8b2
 8001cf8:	2400c8b8 	.word	0x2400c8b8
 8001cfc:	2400c8b4 	.word	0x2400c8b4

08001d00 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fe81 	bl	8001a18 <_ZN8touchgfx15UIEventListenerD1Ev>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	080303e4 	.word	0x080303e4

08001d24 <_ZN8touchgfx11ApplicationD0Ev>:
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ffe7 	bl	8001d00 <_ZN8touchgfx11ApplicationD1Ev>
 8001d32:	f44f 719c 	mov.w	r1, #312	; 0x138
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f029 fbc1 	bl	802b4be <_ZdlPvj>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f804 	bl	8001d5c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00f      	beq.n	8001d8e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4610      	mov	r0, r2
 8001d82:	4798      	blx	r3
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00e      	beq.n	8001db2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3308      	adds	r3, #8
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4610      	mov	r0, r2
 8001da8:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff97 	bl	8001d00 <_ZN8touchgfx11ApplicationD1Ev>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	0802db30 	.word	0x0802db30

08001de0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ffe7 	bl	8001dbc <_ZN8touchgfx14MVPApplicationD1Ev>
 8001dee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f029 fb63 	bl	802b4be <_ZdlPvj>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 faf3 	bl	8002404 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ffcb 	bl	8001dbc <_ZN8touchgfx14MVPApplicationD1Ev>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	0802dad4 	.word	0x0802dad4

08001e34 <_ZN23FrontendApplicationBaseD0Ev>:
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ffe1 	bl	8001e04 <_ZN23FrontendApplicationBaseD1Ev>
 8001e42:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f029 fb39 	bl	802b4be <_ZdlPvj>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <_ZN19FrontendApplicationD1Ev+0x20>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ffcb 	bl	8001e04 <_ZN23FrontendApplicationBaseD1Ev>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	0802da90 	.word	0x0802da90

08001e7c <_ZN19FrontendApplicationD0Ev>:
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ffe7 	bl	8001e58 <_ZN19FrontendApplicationD1Ev>
 8001e8a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f029 fb15 	bl	802b4be <_ZdlPvj>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001eac:	4618      	mov	r0, r3
 8001eae:	f006 fb03 	bl	80084b8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f01c fc39 	bl	801e72c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 fc3a 	bl	8004748 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	f7ff fd0d 	bl	8001914 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	601a      	str	r2, [r3, #0]
    {

    }
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	0802da7c 	.word	0x0802da7c

08001f10 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4801      	ldr	r0, [pc, #4]	; (8001f1c <__tcf_0+0xc>)
 8001f16:	f000 f967 	bl	80021e8 <_ZN12FrontendHeapD1Ev>
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	24000134 	.word	0x24000134

08001f20 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	f3bf 8f5b 	dmb	ish
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bf0c      	ite	eq
 8001f36:	2301      	moveq	r3, #1
 8001f38:	2300      	movne	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8001f40:	480b      	ldr	r0, [pc, #44]	; (8001f70 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8001f42:	f029 fabe 	bl	802b4c2 <__cxa_guard_acquire>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bf14      	ite	ne
 8001f4c:	2301      	movne	r3, #1
 8001f4e:	2300      	moveq	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8001f56:	4807      	ldr	r0, [pc, #28]	; (8001f74 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8001f58:	f000 f868 	bl	800202c <_ZN12FrontendHeapC1Ev>
 8001f5c:	4804      	ldr	r0, [pc, #16]	; (8001f70 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8001f5e:	f029 fabc 	bl	802b4da <__cxa_guard_release>
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8001f64:	f029 fc9e 	bl	802b8a4 <atexit>
        return instance;
 8001f68:	4b02      	ldr	r3, [pc, #8]	; (8001f74 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	240023a0 	.word	0x240023a0
 8001f74:	24000134 	.word	0x24000134
 8001f78:	08001f11 	.word	0x08001f11

08001f7c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fce1 	bl	8001954 <_ZN8touchgfx7MVPHeapD1Ev>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	0802da7c 	.word	0x0802da7c

08001fa0 <_ZN16FrontendHeapBaseD0Ev>:
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ffe7 	bl	8001f7c <_ZN16FrontendHeapBaseD1Ev>
 8001fae:	2114      	movs	r1, #20
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f029 fa84 	bl	802b4be <_ZdlPvj>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f015 fdfa 	bl	8017bc4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001fd0:	4a03      	ldr	r2, [pc, #12]	; (8001fe0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	0802da48 	.word	0x0802da48

08001fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f015 fde8 	bl	8017bc4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001ff4:	4a03      	ldr	r2, [pc, #12]	; (8002004 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	0802da14 	.word	0x0802da14

08002008 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	f015 fdd6 	bl	8017bc4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002018:	4a03      	ldr	r2, [pc, #12]	; (8002028 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	0802d9e0 	.word	0x0802d9e0

0800202c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af02      	add	r7, sp, #8
 8002032:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f103 0414 	add.w	r4, r3, #20
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f242 02b4 	movw	r2, #8372	; 0x20b4
 8002048:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	f242 1314 	movw	r3, #8468	; 0x2114
 8002050:	440b      	add	r3, r1
                     app(model, *this)
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	462a      	mov	r2, r5
 8002058:	4621      	mov	r1, r4
 800205a:	f7ff ff3f 	bl	8001edc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800205e:	4a1a      	ldr	r2, [pc, #104]	; (80020c8 <_ZN12FrontendHeapC1Ev+0x9c>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3314      	adds	r3, #20
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ffa9 	bl	8001fc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	332c      	adds	r3, #44	; 0x2c
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ffb6 	bl	8001fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	f242 03b4 	movw	r3, #8372	; 0x20b4
 800207e:	4413      	add	r3, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ffc1 	bl	8002008 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	f242 1310 	movw	r3, #8464	; 0x2110
 800208c:	4413      	add	r3, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f006 fa04 	bl	800849c <_ZN5ModelC1Ev>
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	f242 1314 	movw	r3, #8468	; 0x2114
 800209a:	4413      	add	r3, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	f242 1110 	movw	r1, #8464	; 0x2110
 80020a2:	4411      	add	r1, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f006 f9e2 	bl	8008470 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	f242 1314 	movw	r3, #8468	; 0x2114
 80020b4:	4413      	add	r3, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f7ff ff03 	bl	8001ec2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bdb0      	pop	{r4, r5, r7, pc}
 80020c6:	bf00      	nop
 80020c8:	0802d9cc 	.word	0x0802d9cc

080020cc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	8bbb      	ldrh	r3, [r7, #28]
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	8b3b      	ldrh	r3, [r7, #24]
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	f7ff fd49 	bl	8001b80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]
    }
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	0802dbd8 	.word	0x0802dbd8

08002104 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af02      	add	r7, sp, #8
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	8bbb      	ldrh	r3, [r7, #28]
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	8b3b      	ldrh	r3, [r7, #24]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	f7ff ffd3 	bl	80020cc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]
    }
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	0802d888 	.word	0x0802d888

0800213c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	4a04      	ldr	r2, [pc, #16]	; (8002158 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	0802d870 	.word	0x0802d870

0800215c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ffe8 	bl	800213c <_ZN8touchgfx15TouchControllerC1Ev>
 800216c:	4a03      	ldr	r2, [pc, #12]	; (800217c <_ZN20STM32TouchControllerC1Ev+0x20>)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	0802d858 	.word	0x0802d858

08002180 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002186:	f001 fee3 	bl	8003f50 <_ZN14BitmapDatabase11getInstanceEv>
 800218a:	4604      	mov	r4, r0
 800218c:	f001 feea 	bl	8003f64 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002190:	4603      	mov	r3, r0
 8002192:	4619      	mov	r1, r3
 8002194:	2300      	movs	r3, #0
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2300      	movs	r3, #0
 800219a:	2200      	movs	r2, #0
 800219c:	4620      	mov	r0, r4
 800219e:	f01f fa8f 	bl	80216c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80021a2:	4809      	ldr	r0, [pc, #36]	; (80021c8 <touchgfx_init+0x48>)
 80021a4:	f7ff fb86 	bl	80018b4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f006 f8b5 	bl	8008318 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80021ae:	4807      	ldr	r0, [pc, #28]	; (80021cc <touchgfx_init+0x4c>)
 80021b0:	f01f f9c8 	bl	8021544 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80021b4:	f7ff feb4 	bl	8001f20 <_ZN12FrontendHeap11getInstanceEv>
 80021b8:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <touchgfx_init+0x50>)
 80021bc:	f7fe fdb2 	bl	8000d24 <_ZN11TouchGFXHAL10initializeEv>
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd90      	pop	{r4, r7, pc}
 80021c8:	24003020 	.word	0x24003020
 80021cc:	24000008 	.word	0x24000008
 80021d0:	24003024 	.word	0x24003024

080021d4 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <touchgfx_taskEntry+0x10>)
 80021da:	f7fe fdaf 	bl	8000d3c <_ZN11TouchGFXHAL9taskEntryEv>
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	24003024 	.word	0x24003024

080021e8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <_ZN12FrontendHeapD1Ev+0x50>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	f242 1314 	movw	r3, #8468	; 0x2114
 80021fc:	4413      	add	r3, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fe2a 	bl	8001e58 <_ZN19FrontendApplicationD1Ev>
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	f242 03b4 	movw	r3, #8372	; 0x20b4
 800220a:	4413      	add	r3, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f827 	bl	8002260 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	332c      	adds	r3, #44	; 0x2c
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f844 	bl	80022a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3314      	adds	r3, #20
 8002220:	4618      	mov	r0, r3
 8002222:	f000 f863 	bl	80022ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fea7 	bl	8001f7c <_ZN16FrontendHeapBaseD1Ev>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	0802d9cc 	.word	0x0802d9cc

0800223c <_ZN12FrontendHeapD0Ev>:
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ffcf 	bl	80021e8 <_ZN12FrontendHeapD1Ev>
 800224a:	f242 216c 	movw	r1, #8812	; 0x226c
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f029 f935 	bl	802b4be <_ZdlPvj>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	4a05      	ldr	r2, [pc, #20]	; (8002280 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f015 fca5 	bl	8017bc0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	0802d9e0 	.word	0x0802d9e0

08002284 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffe7 	bl	8002260 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8002292:	215c      	movs	r1, #92	; 0x5c
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f029 f912 	bl	802b4be <_ZdlPvj>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f015 fc83 	bl	8017bc0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	0802da14 	.word	0x0802da14

080022c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ffe7 	bl	80022a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80022d6:	f242 0188 	movw	r1, #8328	; 0x2088
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f029 f8ef 	bl	802b4be <_ZdlPvj>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	4a05      	ldr	r2, [pc, #20]	; (800230c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f015 fc5f 	bl	8017bc0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	0802da48 	.word	0x0802da48

08002310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ffe7 	bl	80022ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800231e:	2118      	movs	r1, #24
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f029 f8cc 	bl	802b4be <_ZdlPvj>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	4a05      	ldr	r2, [pc, #20]	; (8002350 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fb89 	bl	8001a58 <_ZN8touchgfx3LCDD1Ev>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	08031534 	.word	0x08031534

08002354 <_ZN8touchgfx8LCD24bppD0Ev>:
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ffe7 	bl	8002330 <_ZN8touchgfx8LCD24bppD1Ev>
 8002362:	2158      	movs	r1, #88	; 0x58
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f029 f8aa 	bl	802b4be <_ZdlPvj>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_Z41__static_initialization_and_destruction_0ii>:
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af02      	add	r7, sp, #8
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d119      	bne.n	80023b8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800238a:	4293      	cmp	r3, r2
 800238c:	d114      	bne.n	80023b8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800238e:	4818      	ldr	r0, [pc, #96]	; (80023f0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002390:	f7ff fee4 	bl	800215c <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8002394:	4817      	ldr	r0, [pc, #92]	; (80023f4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002396:	f7fe ff69 	bl	800126c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800239a:	4817      	ldr	r0, [pc, #92]	; (80023f8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800239c:	f021 fbda 	bl	8023b54 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80023a0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80023ae:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80023b0:	4910      	ldr	r1, [pc, #64]	; (80023f4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80023b2:	4812      	ldr	r0, [pc, #72]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80023b4:	f7ff fea6 	bl	8002104 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d113      	bne.n	80023e6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d10e      	bne.n	80023e6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80023c8:	480c      	ldr	r0, [pc, #48]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80023ca:	f7fe fd87 	bl	8000edc <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80023ce:	480c      	ldr	r0, [pc, #48]	; (8002400 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80023d0:	f000 f83a 	bl	8002448 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80023d4:	4808      	ldr	r0, [pc, #32]	; (80023f8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80023d6:	f7ff ffab 	bl	8002330 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 80023da:	4806      	ldr	r0, [pc, #24]	; (80023f4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80023dc:	f7fe ff70 	bl	80012c0 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80023e0:	4803      	ldr	r0, [pc, #12]	; (80023f0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80023e2:	f7fe fa3f 	bl	8000864 <_ZN20STM32TouchControllerD1Ev>
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	240023a4 	.word	0x240023a4
 80023f4:	240023a8 	.word	0x240023a8
 80023f8:	24002fc8 	.word	0x24002fc8
 80023fc:	24003024 	.word	0x24003024
 8002400:	24000008 	.word	0x24000008

08002404 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	4a05      	ldr	r2, [pc, #20]	; (8002424 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fb5d 	bl	8001ad4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	0802db18 	.word	0x0802db18

08002428 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ffe7 	bl	8002404 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002436:	2110      	movs	r1, #16
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f029 f840 	bl	802b4be <_ZdlPvj>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	4a05      	ldr	r2, [pc, #20]	; (8002468 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fa3b 	bl	80018d4 <_ZN8touchgfx12FontProviderD1Ev>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	0802dcf0 	.word	0x0802dcf0

0800246c <_ZN23ApplicationFontProviderD0Ev>:
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ffe7 	bl	8002448 <_ZN23ApplicationFontProviderD1Ev>
 800247a:	2104      	movs	r1, #4
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f029 f81e 	bl	802b4be <_ZdlPvj>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8002494:	2301      	movs	r3, #1
    }
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80024aa:	2354      	movs	r3, #84	; 0x54
    }
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	2254      	movs	r2, #84	; 0x54
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	3308      	adds	r3, #8
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
    }
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	2254      	movs	r2, #84	; 0x54
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	3308      	adds	r3, #8
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
    }
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800250c:	2301      	movs	r3, #1
    }
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8002522:	f44f 5302 	mov.w	r3, #8320	; 0x2080
    }
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	019b      	lsls	r3, r3, #6
 8002544:	4413      	add	r3, r2
 8002546:	01db      	lsls	r3, r3, #7
 8002548:	3308      	adds	r3, #8
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
    }
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	4613      	mov	r3, r2
 800256a:	019b      	lsls	r3, r3, #6
 800256c:	4413      	add	r3, r2
 800256e:	01db      	lsls	r3, r3, #7
 8002570:	3308      	adds	r3, #8
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4413      	add	r3, r2
    }
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800258a:	2301      	movs	r3, #1
    }
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80025a0:	2310      	movs	r3, #16
    }
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	460b      	mov	r3, r1
 80025b8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80025ba:	887b      	ldrh	r3, [r7, #2]
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	3308      	adds	r3, #8
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4413      	add	r3, r2
    }
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80025dc:	887b      	ldrh	r3, [r7, #2]
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	3308      	adds	r3, #8
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4413      	add	r3, r2
    }
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68d2      	ldr	r2, [r2, #12]
 8002602:	1052      	asrs	r2, r2, #1
 8002604:	1899      	adds	r1, r3, r2
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	e00a      	b.n	800262e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68d2      	ldr	r2, [r2, #12]
 8002620:	1052      	asrs	r2, r2, #1
 8002622:	4413      	add	r3, r2
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6892      	ldr	r2, [r2, #8]
 800262a:	4413      	add	r3, r2
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4608      	mov	r0, r1
 8002630:	4798      	blx	r3
    }
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d010      	beq.n	800266c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8002662:	2300      	movs	r3, #0
 8002664:	2b01      	cmp	r3, #1
 8002666:	d001      	beq.n	800266c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800266c:	2300      	movs	r3, #0
    }
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_GLOBAL__sub_I_touchgfx_init>:
 800267a:	b580      	push	{r7, lr}
 800267c:	af00      	add	r7, sp, #0
 800267e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002682:	2001      	movs	r0, #1
 8002684:	f7ff fe76 	bl	8002374 <_Z41__static_initialization_and_destruction_0ii>
 8002688:	bd80      	pop	{r7, pc}

0800268a <_GLOBAL__sub_D_touchgfx_init>:
 800268a:	b580      	push	{r7, lr}
 800268c:	af00      	add	r7, sp, #0
 800268e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002692:	2000      	movs	r0, #0
 8002694:	f7ff fe6e 	bl	8002374 <_Z41__static_initialization_and_destruction_0ii>
 8002698:	bd80      	pop	{r7, pc}

0800269a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3320      	adds	r3, #32
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
    }
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80026c4:	3301      	adds	r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <__NVIC_EnableIRQ>:
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <__NVIC_EnableIRQ+0x38>)
 80026f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_DisableIRQ>:
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002726:	2b00      	cmp	r3, #0
 8002728:	db12      	blt.n	8002750 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	f003 021f 	and.w	r2, r3, #31
 8002730:	490a      	ldr	r1, [pc, #40]	; (800275c <__NVIC_DisableIRQ+0x44>)
 8002732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	2001      	movs	r0, #1
 800273a:	fa00 f202 	lsl.w	r2, r0, r2
 800273e:	3320      	adds	r3, #32
 8002740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002744:	f3bf 8f4f 	dsb	sy
}
 8002748:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800274a:	f3bf 8f6f 	isb	sy
}
 800274e:	bf00      	nop
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000e100 	.word	0xe000e100

08002760 <__NVIC_SetPriority>:
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	; (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	; (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80027b4:	b5b0      	push	{r4, r5, r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4618      	mov	r0, r3
 80027c0:	f015 fec7 	bl	8018552 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80027c4:	687d      	ldr	r5, [r7, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3360      	adds	r3, #96	; 0x60
 80027cc:	681c      	ldr	r4, [r3, #0]
 80027ce:	f01c f871 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 80027d2:	4603      	mov	r3, r0
 80027d4:	4619      	mov	r1, r3
 80027d6:	4628      	mov	r0, r5
 80027d8:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3384      	adds	r3, #132	; 0x84
 80027e2:	681c      	ldr	r4, [r3, #0]
 80027e4:	4a03      	ldr	r2, [pc, #12]	; (80027f4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80027e6:	2300      	movs	r3, #0
 80027e8:	4903      	ldr	r1, [pc, #12]	; (80027f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80027ea:	47a0      	blx	r4
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bdb0      	pop	{r4, r5, r7, pc}
 80027f4:	2409fa00 	.word	0x2409fa00
 80027f8:	24040000 	.word	0x24040000

080027fc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8002804:	2109      	movs	r1, #9
 8002806:	205a      	movs	r0, #90	; 0x5a
 8002808:	f7ff ffaa 	bl	8002760 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800280c:	2109      	movs	r1, #9
 800280e:	2058      	movs	r0, #88	; 0x58
 8002810:	f7ff ffa6 	bl	8002760 <__NVIC_SetPriority>
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002824:	205a      	movs	r0, #90	; 0x5a
 8002826:	f7ff ff59 	bl	80026dc <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800282a:	2058      	movs	r0, #88	; 0x58
 800282c:	f7ff ff56 	bl	80026dc <__NVIC_EnableIRQ>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8002840:	205a      	movs	r0, #90	; 0x5a
 8002842:	f7ff ff69 	bl	8002718 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8002846:	2058      	movs	r0, #88	; 0x58
 8002848:	f7ff ff66 	bl	8002718 <__NVIC_DisableIRQ>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	b29b      	uxth	r3, r3
 8002862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800286e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	b29b      	uxth	r3, r3
 8002876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8002882:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8002886:	881a      	ldrh	r2, [r3, #0]
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	50001000 	.word	0x50001000
 80028a8:	240030a0 	.word	0x240030a0
 80028ac:	240030a2 	.word	0x240030a2

080028b0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f015 fe30 	bl	8018520 <_ZN8touchgfx3HAL10beginFrameEv>
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f015 fe2f 	bl	8018538 <_ZN8touchgfx3HAL8endFrameEv>

}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	50001084 	.word	0x50001084

08002900 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800290a:	4a06      	ldr	r2, [pc, #24]	; (8002924 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8002912:	2201      	movs	r2, #1
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	50001084 	.word	0x50001084
 8002928:	50001000 	.word	0x50001000

0800292c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6839      	ldr	r1, [r7, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f015 fdba 	bl	80184b4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d03c      	beq.n	80029d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002956:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8002958:	2200      	movs	r2, #0
 800295a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800295e:	f3bf 8f4f 	dsb	sy
}
 8002962:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8002964:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8002966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800296a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	0b5b      	lsrs	r3, r3, #13
 8002970:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002974:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	08db      	lsrs	r3, r3, #3
 800297a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800297e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002988:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800298e:	4912      	ldr	r1, [pc, #72]	; (80029d8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1e5a      	subs	r2, r3, #1
 800299a:	60fa      	str	r2, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d000      	beq.n	80029ac <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 80029aa:	e7e9      	b.n	8002980 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	613a      	str	r2, [r7, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf14      	ite	ne
 80029b6:	2301      	movne	r3, #1
 80029b8:	2300      	moveq	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d000      	beq.n	80029c2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 80029c0:	e7d9      	b.n	8002976 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80029c2:	f3bf 8f4f 	dsb	sy
}
 80029c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029c8:	f3bf 8f6f 	isb	sy
}
 80029cc:	bf00      	nop
}
 80029ce:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80029d0:	bf00      	nop
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	f015 feca 	bl	801878a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80029f6:	4603      	mov	r3, r0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002a08:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d03c      	beq.n	8002a98 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002a26:	f3bf 8f4f 	dsb	sy
}
 8002a2a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8002a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a32:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	0b5b      	lsrs	r3, r3, #13
 8002a38:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002a3c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a46:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002a50:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002a56:	4913      	ldr	r1, [pc, #76]	; (8002aa4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e5a      	subs	r2, r3, #1
 8002a62:	60fa      	str	r2, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d000      	beq.n	8002a74 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8002a72:	e7e9      	b.n	8002a48 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1e5a      	subs	r2, r3, #1
 8002a78:	613a      	str	r2, [r7, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d000      	beq.n	8002a8a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8002a88:	e7d9      	b.n	8002a3e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8002a8a:	f3bf 8f4f 	dsb	sy
}
 8002a8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a90:	f3bf 8f6f 	isb	sy
}
 8002a94:	bf00      	nop
}
 8002a96:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002ab0:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d03c      	beq.n	8002b40 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002ac6:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002ace:	f3bf 8f4f 	dsb	sy
}
 8002ad2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8002ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ada:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	0b5b      	lsrs	r3, r3, #13
 8002ae0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002ae4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	08db      	lsrs	r3, r3, #3
 8002aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aee:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002af8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002afe:	4913      	ldr	r1, [pc, #76]	; (8002b4c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e5a      	subs	r2, r3, #1
 8002b0a:	60fa      	str	r2, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf14      	ite	ne
 8002b10:	2301      	movne	r3, #1
 8002b12:	2300      	moveq	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d000      	beq.n	8002b1c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8002b1a:	e7e9      	b.n	8002af0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	613a      	str	r2, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d000      	beq.n	8002b32 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8002b30:	e7d9      	b.n	8002ae6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8002b32:	f3bf 8f4f 	dsb	sy
}
 8002b36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b38:	f3bf 8f6f 	isb	sy
}
 8002b3c:	bf00      	nop
}
 8002b3e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8002b58:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <HAL_LTDC_LineEventCallback+0x74>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	4a1a      	ldr	r2, [pc, #104]	; (8002bc8 <HAL_LTDC_LineEventCallback+0x78>)
 8002b5e:	8812      	ldrh	r2, [r2, #0]
 8002b60:	4293      	cmp	r3, r2
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d017      	beq.n	8002b9e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002b6e:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <HAL_LTDC_LineEventCallback+0x7c>)
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f00b ffe9 	bl	800eb4c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8002b7a:	f7fe fb3d 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fd98 	bl	80026b6 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8002b86:	f7fe fa31 	bl	8000fec <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002b8a:	f7fe fb35 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f016 fad3 	bl	801913c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7fd fe86 	bl	80008a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8002b9c:	e00e      	b.n	8002bbc <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_LTDC_LineEventCallback+0x78>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f00b ffd1 	bl	800eb4c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fd febc 	bl	8000928 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8002bb0:	f7fe fb22 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fd6f 	bl	800269a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	50001000 	.word	0x50001000
 8002bc8:	240030a0 	.word	0x240030a0
 8002bcc:	240030a2 	.word	0x240030a2

08002bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002bd6:	f000 fceb 	bl	80035b0 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002bda:	4b48      	ldr	r3, [pc, #288]	; (8002cfc <main+0x12c>)
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11b      	bne.n	8002c1e <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8002be6:	f3bf 8f4f 	dsb	sy
}
 8002bea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bec:	f3bf 8f6f 	isb	sy
}
 8002bf0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002bf2:	4b42      	ldr	r3, [pc, #264]	; (8002cfc <main+0x12c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002bfa:	f3bf 8f4f 	dsb	sy
}
 8002bfe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c00:	f3bf 8f6f 	isb	sy
}
 8002c04:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002c06:	4b3d      	ldr	r3, [pc, #244]	; (8002cfc <main+0x12c>)
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4a3c      	ldr	r2, [pc, #240]	; (8002cfc <main+0x12c>)
 8002c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c10:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c12:	f3bf 8f4f 	dsb	sy
}
 8002c16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c18:	f3bf 8f6f 	isb	sy
}
 8002c1c:	e000      	b.n	8002c20 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002c1e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002c20:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <main+0x12c>)
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d138      	bne.n	8002c9e <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002c2c:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <main+0x12c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002c34:	f3bf 8f4f 	dsb	sy
}
 8002c38:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8002c3a:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <main+0x12c>)
 8002c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c40:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	0b5b      	lsrs	r3, r3, #13
 8002c46:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002c4a:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	08db      	lsrs	r3, r3, #3
 8002c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c54:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002c5e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002c64:	4925      	ldr	r1, [pc, #148]	; (8002cfc <main+0x12c>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	1e5a      	subs	r2, r3, #1
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1ef      	bne.n	8002c56 <main+0x86>
    } while(sets-- != 0U);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1e5a      	subs	r2, r3, #1
 8002c7a:	60ba      	str	r2, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e5      	bne.n	8002c4c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002c80:	f3bf 8f4f 	dsb	sy
}
 8002c84:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002c86:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <main+0x12c>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <main+0x12c>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c90:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c92:	f3bf 8f4f 	dsb	sy
}
 8002c96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c98:	f3bf 8f6f 	isb	sy
}
 8002c9c:	e000      	b.n	8002ca0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002c9e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ca0:	f008 fbc4 	bl	800b42c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ca4:	f000 f838 	bl	8002d18 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002ca8:	f000 f8ae 	bl	8002e08 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_CRC_Init();
 8002cac:	f000 f95a 	bl	8002f64 <MX_CRC_Init>
  MX_GPIO_Init();
 8002cb0:	f000 fb6c 	bl	800338c <MX_GPIO_Init>
  MX_DMA2D_Init();
 8002cb4:	f000 f978 	bl	8002fa8 <MX_DMA2D_Init>
  MX_LTDC_Init();
 8002cb8:	f000 f9f0 	bl	800309c <MX_LTDC_Init>
  MX_I2C4_Init();
 8002cbc:	f000 f9ae 	bl	800301c <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8002cc0:	f000 fa6e 	bl	80031a0 <MX_OCTOSPI1_Init>
  MX_ADC1_Init();
 8002cc4:	f000 f8d0 	bl	8002e68 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002cc8:	f000 facc 	bl	8003264 <MX_TIM1_Init>
  MX_TouchGFX_Init();
 8002ccc:	f7fd fd45 	bl	800075a <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002cd0:	f011 fb2e 	bl	8014330 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <main+0x130>)
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	480a      	ldr	r0, [pc, #40]	; (8002d04 <main+0x134>)
 8002cda:	f011 fb73 	bl	80143c4 <osThreadNew>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <main+0x138>)
 8002ce2:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8002ce4:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <main+0x13c>)
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4809      	ldr	r0, [pc, #36]	; (8002d10 <main+0x140>)
 8002cea:	f011 fb6b 	bl	80143c4 <osThreadNew>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <main+0x144>)
 8002cf2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002cf4:	f011 fb40 	bl	8014378 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <main+0x128>
 8002cfa:	bf00      	nop
 8002cfc:	e000ed00 	.word	0xe000ed00
 8002d00:	0802dca0 	.word	0x0802dca0
 8002d04:	080035a1 	.word	0x080035a1
 8002d08:	2400cda4 	.word	0x2400cda4
 8002d0c:	0802dcc4 	.word	0x0802dcc4
 8002d10:	08000767 	.word	0x08000767
 8002d14:	2400cda0 	.word	0x2400cda0

08002d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b09c      	sub	sp, #112	; 0x70
 8002d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d22:	224c      	movs	r2, #76	; 0x4c
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f028 fe2a 	bl	802b980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	2220      	movs	r2, #32
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f028 fe24 	bl	802b980 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002d38:	2004      	movs	r0, #4
 8002d3a:	f00d f8bf 	bl	800febc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <SystemClock_Config+0xe8>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	4a2e      	ldr	r2, [pc, #184]	; (8002e00 <SystemClock_Config+0xe8>)
 8002d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d4c:	6193      	str	r3, [r2, #24]
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <SystemClock_Config+0xe8>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002d5a:	bf00      	nop
 8002d5c:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <SystemClock_Config+0xe8>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d68:	d1f8      	bne.n	8002d5c <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <SystemClock_Config+0xec>)
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	f023 0303 	bic.w	r3, r3, #3
 8002d72:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <SystemClock_Config+0xec>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d84:	2302      	movs	r3, #2
 8002d86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8002d90:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002d94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002d96:	2302      	movs	r3, #2
 8002d98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002da2:	2304      	movs	r3, #4
 8002da4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f00d f8dc 	bl	800ff70 <HAL_RCC_OscConfig>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002dbe:	f000 fc57 	bl	8003670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dc2:	233f      	movs	r3, #63	; 0x3f
 8002dc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002dce:	2308      	movs	r3, #8
 8002dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	2103      	movs	r1, #3
 8002de6:	4618      	mov	r0, r3
 8002de8:	f00d fcaa 	bl	8010740 <HAL_RCC_ClockConfig>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8002df2:	f000 fc3d 	bl	8003670 <Error_Handler>
  }
}
 8002df6:	bf00      	nop
 8002df8:	3770      	adds	r7, #112	; 0x70
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	58024800 	.word	0x58024800
 8002e04:	58024400 	.word	0x58024400

08002e08 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b0ae      	sub	sp, #184	; 0xb8
 8002e0c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e0e:	463b      	mov	r3, r7
 8002e10:	22b8      	movs	r2, #184	; 0xb8
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f028 fdb3 	bl	802b980 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI|RCC_PERIPHCLK_ADC;
 8002e1a:	f04f 7302 	mov.w	r3, #34078720	; 0x2080000
 8002e1e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 24;
 8002e20:	2318      	movs	r3, #24
 8002e22:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 266;
 8002e24:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8002e28:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002e32:	2302      	movs	r3, #2
 8002e34:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8002e42:	2320      	movs	r3, #32
 8002e44:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002e46:	2300      	movs	r3, #0
 8002e48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e4c:	463b      	mov	r3, r7
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f00e f844 	bl	8010edc <HAL_RCCEx_PeriphCLKConfig>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002e5a:	f000 fc09 	bl	8003670 <Error_Handler>
  }
}
 8002e5e:	bf00      	nop
 8002e60:	37b8      	adds	r7, #184	; 0xb8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002e6e:	f107 031c 	add.w	r3, r7, #28
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
 8002e88:	615a      	str	r2, [r3, #20]
 8002e8a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002e8c:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002e8e:	4a33      	ldr	r2, [pc, #204]	; (8002f5c <MX_ADC1_Init+0xf4>)
 8002e90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002e92:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e9e:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002eb0:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8002eb6:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ebc:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8002ec2:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002eca:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002ed2:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ed8:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002ede:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002ee4:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002eec:	481a      	ldr	r0, [pc, #104]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002eee:	f008 fd13 	bl	800b918 <HAL_ADC_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002ef8:	f000 fbba 	bl	8003670 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	4619      	mov	r1, r3
 8002f06:	4814      	ldr	r0, [pc, #80]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002f08:	f009 fe50 	bl	800cbac <HAL_ADCEx_MultiModeConfigChannel>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8002f12:	f000 fbad 	bl	8003670 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <MX_ADC1_Init+0xf8>)
 8002f18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f1a:	2306      	movs	r3, #6
 8002f1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002f22:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002f26:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002f28:	2304      	movs	r3, #4
 8002f2a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f34:	463b      	mov	r3, r7
 8002f36:	4619      	mov	r1, r3
 8002f38:	4807      	ldr	r0, [pc, #28]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002f3a:	f009 f9b1 	bl	800c2a0 <HAL_ADC_ConfigChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8002f44:	f000 fb94 	bl	8003670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start_IT(&hadc1);
 8002f48:	4803      	ldr	r0, [pc, #12]	; (8002f58 <MX_ADC1_Init+0xf0>)
 8002f4a:	f008 fe3f 	bl	800bbcc <HAL_ADC_Start_IT>
  /* USER CODE END ADC1_Init 2 */

}
 8002f4e:	bf00      	nop
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	2400cd38 	.word	0x2400cd38
 8002f5c:	40022000 	.word	0x40022000
 8002f60:	4b840000 	.word	0x4b840000

08002f64 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <MX_CRC_Init+0x40>)
 8002f6c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002f8c:	4804      	ldr	r0, [pc, #16]	; (8002fa0 <MX_CRC_Init+0x3c>)
 8002f8e:	f00a f837 	bl	800d000 <HAL_CRC_Init>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002f98:	f000 fb6a 	bl	8003670 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002f9c:	bf00      	nop
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	2400cd14 	.word	0x2400cd14
 8002fa4:	40023000 	.word	0x40023000

08002fa8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002fac:	4b19      	ldr	r3, [pc, #100]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fae:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <MX_DMA2D_Init+0x70>)
 8002fb0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8002fb8:	4b16      	ldr	r3, [pc, #88]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fba:	2202      	movs	r2, #2
 8002fbc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fcc:	2202      	movs	r2, #2
 8002fce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002fd0:	4b10      	ldr	r3, [pc, #64]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002fee:	4809      	ldr	r0, [pc, #36]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8002ff0:	f00a f8f0 	bl	800d1d4 <HAL_DMA2D_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002ffa:	f000 fb39 	bl	8003670 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002ffe:	2101      	movs	r1, #1
 8003000:	4804      	ldr	r0, [pc, #16]	; (8003014 <MX_DMA2D_Init+0x6c>)
 8003002:	f00a fa5b 	bl	800d4bc <HAL_DMA2D_ConfigLayer>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 800300c:	f000 fb30 	bl	8003670 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}
 8003014:	2400cc60 	.word	0x2400cc60
 8003018:	52001000 	.word	0x52001000

0800301c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8003020:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <MX_I2C4_Init+0x74>)
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <MX_I2C4_Init+0x78>)
 8003024:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <MX_I2C4_Init+0x74>)
 8003028:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <MX_I2C4_Init+0x7c>)
 800302a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <MX_I2C4_Init+0x74>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <MX_I2C4_Init+0x74>)
 8003034:	2201      	movs	r2, #1
 8003036:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <MX_I2C4_Init+0x74>)
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800303e:	4b14      	ldr	r3, [pc, #80]	; (8003090 <MX_I2C4_Init+0x74>)
 8003040:	2200      	movs	r2, #0
 8003042:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <MX_I2C4_Init+0x74>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <MX_I2C4_Init+0x74>)
 800304c:	2200      	movs	r2, #0
 800304e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <MX_I2C4_Init+0x74>)
 8003052:	2200      	movs	r2, #0
 8003054:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8003056:	480e      	ldr	r0, [pc, #56]	; (8003090 <MX_I2C4_Init+0x74>)
 8003058:	f00a fdf6 	bl	800dc48 <HAL_I2C_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8003062:	f000 fb05 	bl	8003670 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8003066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800306a:	4809      	ldr	r0, [pc, #36]	; (8003090 <MX_I2C4_Init+0x74>)
 800306c:	f00b fb10 	bl	800e690 <HAL_I2CEx_ConfigAnalogFilter>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8003076:	f000 fafb 	bl	8003670 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800307a:	2100      	movs	r1, #0
 800307c:	4804      	ldr	r0, [pc, #16]	; (8003090 <MX_I2C4_Init+0x74>)
 800307e:	f00b fb52 	bl	800e726 <HAL_I2CEx_ConfigDigitalFilter>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8003088:	f000 faf2 	bl	8003670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}
 8003090:	2400ccc8 	.word	0x2400ccc8
 8003094:	58001c00 	.word	0x58001c00
 8003098:	30808bd0 	.word	0x30808bd0

0800309c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08e      	sub	sp, #56	; 0x38
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	2234      	movs	r2, #52	; 0x34
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f028 fc69 	bl	802b980 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80030ae:	4b3a      	ldr	r3, [pc, #232]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030b0:	4a3a      	ldr	r2, [pc, #232]	; (800319c <MX_LTDC_Init+0x100>)
 80030b2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80030b4:	4b38      	ldr	r3, [pc, #224]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80030ba:	4b37      	ldr	r3, [pc, #220]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80030c0:	4b35      	ldr	r3, [pc, #212]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80030c6:	4b34      	ldr	r3, [pc, #208]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80030cc:	4b32      	ldr	r3, [pc, #200]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030ce:	2228      	movs	r2, #40	; 0x28
 80030d0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030d4:	2209      	movs	r2, #9
 80030d6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 80030d8:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030da:	222a      	movs	r2, #42	; 0x2a
 80030dc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80030de:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030e0:	220b      	movs	r2, #11
 80030e2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 80030e4:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030e6:	f240 220a 	movw	r2, #522	; 0x20a
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030ee:	f240 121b 	movw	r2, #283	; 0x11b
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030f6:	f240 222a 	movw	r2, #554	; 0x22a
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80030fc:	4b26      	ldr	r3, [pc, #152]	; (8003198 <MX_LTDC_Init+0xfc>)
 80030fe:	f240 121d 	movw	r2, #285	; 0x11d
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003104:	4b24      	ldr	r3, [pc, #144]	; (8003198 <MX_LTDC_Init+0xfc>)
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800310c:	4b22      	ldr	r3, [pc, #136]	; (8003198 <MX_LTDC_Init+0xfc>)
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003114:	4b20      	ldr	r3, [pc, #128]	; (8003198 <MX_LTDC_Init+0xfc>)
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800311c:	481e      	ldr	r0, [pc, #120]	; (8003198 <MX_LTDC_Init+0xfc>)
 800311e:	f00b fb4f 	bl	800e7c0 <HAL_LTDC_Init>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003128:	f000 faa2 	bl	8003670 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8003130:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003134:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800313a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800313e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8003140:	2301      	movs	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003144:	23ff      	movs	r3, #255	; 0xff
 8003146:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800314c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003150:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003152:	2305      	movs	r3, #5
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800315a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8003160:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003164:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8003166:	23ff      	movs	r3, #255	; 0xff
 8003168:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	2200      	movs	r2, #0
 800317c:	4619      	mov	r1, r3
 800317e:	4806      	ldr	r0, [pc, #24]	; (8003198 <MX_LTDC_Init+0xfc>)
 8003180:	f00b fca6 	bl	800ead0 <HAL_LTDC_ConfigLayer>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 800318a:	f000 fa71 	bl	8003670 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800318e:	bf00      	nop
 8003190:	3738      	adds	r7, #56	; 0x38
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2400cbb8 	.word	0x2400cbb8
 800319c:	50001000 	.word	0x50001000

080031a0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80031a6:	4b2d      	ldr	r3, [pc, #180]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031a8:	4a2d      	ldr	r2, [pc, #180]	; (8003260 <MX_OCTOSPI1_Init+0xc0>)
 80031aa:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80031ac:	4b2b      	ldr	r3, [pc, #172]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80031b2:	4b2a      	ldr	r3, [pc, #168]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80031b8:	4b28      	ldr	r3, [pc, #160]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 80031be:	4b27      	ldr	r3, [pc, #156]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031c0:	221a      	movs	r2, #26
 80031c2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80031c4:	4b25      	ldr	r3, [pc, #148]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031c6:	2202      	movs	r2, #2
 80031c8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80031d0:	4b22      	ldr	r3, [pc, #136]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80031d6:	4b21      	ldr	r3, [pc, #132]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031d8:	2200      	movs	r2, #0
 80031da:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 80031dc:	4b1f      	ldr	r3, [pc, #124]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031de:	2203      	movs	r2, #3
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80031e2:	4b1e      	ldr	r3, [pc, #120]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80031e8:	4b1c      	ldr	r3, [pc, #112]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80031ee:	4b1b      	ldr	r3, [pc, #108]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80031fa:	4b18      	ldr	r3, [pc, #96]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 80031fc:	2208      	movs	r2, #8
 80031fe:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8003200:	4b16      	ldr	r3, [pc, #88]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 8003202:	2200      	movs	r2, #0
 8003204:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 8003206:	4b15      	ldr	r3, [pc, #84]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 8003208:	2200      	movs	r2, #0
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800320c:	4813      	ldr	r0, [pc, #76]	; (800325c <MX_OCTOSPI1_Init+0xbc>)
 800320e:	f00b fef1 	bl	800eff4 <HAL_OSPI_Init>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_OCTOSPI1_Init+0x7c>
  {
    Error_Handler();
 8003218:	f000 fa2a 	bl	8003670 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 800321c:	2301      	movs	r3, #1
 800321e:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8003220:	2301      	movs	r3, #1
 8003222:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 8003224:	2000      	movs	r0, #0
 8003226:	f007 f86d 	bl	800a304 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 800322a:	463b      	mov	r3, r7
 800322c:	4619      	mov	r1, r3
 800322e:	2000      	movs	r0, #0
 8003230:	f006 ffdc 	bl	800a1ec <BSP_OSPI_NOR_Init>
 8003234:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_OCTOSPI1_Init+0xa0>
  {
    Error_Handler();
 800323c:	f000 fa18 	bl	8003670 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 8003240:	2000      	movs	r0, #0
 8003242:	f007 f8fd 	bl	800a440 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 8003246:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <MX_OCTOSPI1_Init+0xb2>
  {
    Error_Handler();
 800324e:	f000 fa0f 	bl	8003670 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	2400cb58 	.word	0x2400cb58
 8003260:	52005000 	.word	0x52005000

08003264 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b096      	sub	sp, #88	; 0x58
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800326a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003276:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	60da      	str	r2, [r3, #12]
 8003284:	611a      	str	r2, [r3, #16]
 8003286:	615a      	str	r2, [r3, #20]
 8003288:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800328a:	1d3b      	adds	r3, r7, #4
 800328c:	222c      	movs	r2, #44	; 0x2c
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f028 fb75 	bl	802b980 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003296:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <MX_TIM1_Init+0x120>)
 8003298:	4a3b      	ldr	r2, [pc, #236]	; (8003388 <MX_TIM1_Init+0x124>)
 800329a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 140-1;
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <MX_TIM1_Init+0x120>)
 800329e:	228b      	movs	r2, #139	; 0x8b
 80032a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a2:	4b38      	ldr	r3, [pc, #224]	; (8003384 <MX_TIM1_Init+0x120>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16000-1;
 80032a8:	4b36      	ldr	r3, [pc, #216]	; (8003384 <MX_TIM1_Init+0x120>)
 80032aa:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80032ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032b0:	4b34      	ldr	r3, [pc, #208]	; (8003384 <MX_TIM1_Init+0x120>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032b6:	4b33      	ldr	r3, [pc, #204]	; (8003384 <MX_TIM1_Init+0x120>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032bc:	4b31      	ldr	r3, [pc, #196]	; (8003384 <MX_TIM1_Init+0x120>)
 80032be:	2200      	movs	r2, #0
 80032c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80032c2:	4830      	ldr	r0, [pc, #192]	; (8003384 <MX_TIM1_Init+0x120>)
 80032c4:	f00f ff86 	bl	80131d4 <HAL_TIM_PWM_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80032ce:	f000 f9cf 	bl	8003670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80032d6:	2300      	movs	r3, #0
 80032d8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032da:	2300      	movs	r3, #0
 80032dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032e2:	4619      	mov	r1, r3
 80032e4:	4827      	ldr	r0, [pc, #156]	; (8003384 <MX_TIM1_Init+0x120>)
 80032e6:	f010 febb 	bl	8014060 <HAL_TIMEx_MasterConfigSynchronization>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80032f0:	f000 f9be 	bl	8003670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032f4:	2360      	movs	r3, #96	; 0x60
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 16000/2;
 80032f8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032fe:	2300      	movs	r3, #0
 8003300:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003302:	2300      	movs	r3, #0
 8003304:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800330e:	2300      	movs	r3, #0
 8003310:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003312:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003316:	2200      	movs	r2, #0
 8003318:	4619      	mov	r1, r3
 800331a:	481a      	ldr	r0, [pc, #104]	; (8003384 <MX_TIM1_Init+0x120>)
 800331c:	f010 f9da 	bl	80136d4 <HAL_TIM_PWM_ConfigChannel>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003326:	f000 f9a3 	bl	8003670 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800333e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003342:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003348:	2300      	movs	r3, #0
 800334a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800334c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003356:	2300      	movs	r3, #0
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	4619      	mov	r1, r3
 800335e:	4809      	ldr	r0, [pc, #36]	; (8003384 <MX_TIM1_Init+0x120>)
 8003360:	f010 ff06 	bl	8014170 <HAL_TIMEx_ConfigBreakDeadTime>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800336a:	f000 f981 	bl	8003670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800336e:	2100      	movs	r1, #0
 8003370:	4804      	ldr	r0, [pc, #16]	; (8003384 <MX_TIM1_Init+0x120>)
 8003372:	f00f ff87 	bl	8013284 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003376:	4803      	ldr	r0, [pc, #12]	; (8003384 <MX_TIM1_Init+0x120>)
 8003378:	f000 fc0e 	bl	8003b98 <HAL_TIM_MspPostInit>

}
 800337c:	bf00      	nop
 800337e:	3758      	adds	r7, #88	; 0x58
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	2400cda8 	.word	0x2400cda8
 8003388:	40010000 	.word	0x40010000

0800338c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08e      	sub	sp, #56	; 0x38
 8003390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80033a2:	4b78      	ldr	r3, [pc, #480]	; (8003584 <MX_GPIO_Init+0x1f8>)
 80033a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033a8:	4a76      	ldr	r2, [pc, #472]	; (8003584 <MX_GPIO_Init+0x1f8>)
 80033aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80033b2:	4b74      	ldr	r3, [pc, #464]	; (8003584 <MX_GPIO_Init+0x1f8>)
 80033b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033c0:	4b70      	ldr	r3, [pc, #448]	; (8003584 <MX_GPIO_Init+0x1f8>)
 80033c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033c6:	4a6f      	ldr	r2, [pc, #444]	; (8003584 <MX_GPIO_Init+0x1f8>)
 80033c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80033d0:	4b6c      	ldr	r3, [pc, #432]	; (8003584 <MX_GPIO_Init+0x1f8>)
 80033d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033de:	4b69      	ldr	r3, [pc, #420]	; (8003584 <MX_GPIO_Init+0x1f8>)
 80033e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033e4:	4a67      	ldr	r2, [pc, #412]	; (8003584 <MX_GPIO_Init+0x1f8>)
 80033e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80033ee:	4b65      	ldr	r3, [pc, #404]	; (8003584 <MX_GPIO_Init+0x1f8>)
 80033f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80033fc:	4b61      	ldr	r3, [pc, #388]	; (8003584 <MX_GPIO_Init+0x1f8>)
 80033fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003402:	4a60      	ldr	r2, [pc, #384]	; (8003584 <MX_GPIO_Init+0x1f8>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003408:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800340c:	4b5d      	ldr	r3, [pc, #372]	; (8003584 <MX_GPIO_Init+0x1f8>)
 800340e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800341a:	4b5a      	ldr	r3, [pc, #360]	; (8003584 <MX_GPIO_Init+0x1f8>)
 800341c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003420:	4a58      	ldr	r2, [pc, #352]	; (8003584 <MX_GPIO_Init+0x1f8>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800342a:	4b56      	ldr	r3, [pc, #344]	; (8003584 <MX_GPIO_Init+0x1f8>)
 800342c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003438:	4b52      	ldr	r3, [pc, #328]	; (8003584 <MX_GPIO_Init+0x1f8>)
 800343a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800343e:	4a51      	ldr	r2, [pc, #324]	; (8003584 <MX_GPIO_Init+0x1f8>)
 8003440:	f043 0308 	orr.w	r3, r3, #8
 8003444:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003448:	4b4e      	ldr	r3, [pc, #312]	; (8003584 <MX_GPIO_Init+0x1f8>)
 800344a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003456:	4b4b      	ldr	r3, [pc, #300]	; (8003584 <MX_GPIO_Init+0x1f8>)
 8003458:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800345c:	4a49      	ldr	r2, [pc, #292]	; (8003584 <MX_GPIO_Init+0x1f8>)
 800345e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003462:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003466:	4b47      	ldr	r3, [pc, #284]	; (8003584 <MX_GPIO_Init+0x1f8>)
 8003468:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003474:	4b43      	ldr	r3, [pc, #268]	; (8003584 <MX_GPIO_Init+0x1f8>)
 8003476:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800347a:	4a42      	ldr	r2, [pc, #264]	; (8003584 <MX_GPIO_Init+0x1f8>)
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003484:	4b3f      	ldr	r3, [pc, #252]	; (8003584 <MX_GPIO_Init+0x1f8>)
 8003486:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003492:	2200      	movs	r2, #0
 8003494:	f640 0104 	movw	r1, #2052	; 0x804
 8003498:	483b      	ldr	r0, [pc, #236]	; (8003588 <MX_GPIO_Init+0x1fc>)
 800349a:	f00a fb7d 	bl	800db98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800349e:	2200      	movs	r2, #0
 80034a0:	2101      	movs	r1, #1
 80034a2:	483a      	ldr	r0, [pc, #232]	; (800358c <MX_GPIO_Init+0x200>)
 80034a4:	f00a fb78 	bl	800db98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 80034a8:	2200      	movs	r2, #0
 80034aa:	f241 0106 	movw	r1, #4102	; 0x1006
 80034ae:	4838      	ldr	r0, [pc, #224]	; (8003590 <MX_GPIO_Init+0x204>)
 80034b0:	f00a fb72 	bl	800db98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RENDER_TIME_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 80034b4:	2200      	movs	r2, #0
 80034b6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80034ba:	4836      	ldr	r0, [pc, #216]	; (8003594 <MX_GPIO_Init+0x208>)
 80034bc:	f00a fb6c 	bl	800db98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80034c0:	f640 0304 	movw	r3, #2052	; 0x804
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c6:	2301      	movs	r3, #1
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ce:	2300      	movs	r3, #0
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d6:	4619      	mov	r1, r3
 80034d8:	482b      	ldr	r0, [pc, #172]	; (8003588 <MX_GPIO_Init+0x1fc>)
 80034da:	f00a f8a3 	bl	800d624 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80034de:	2301      	movs	r3, #1
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e2:	2301      	movs	r3, #1
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80034ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f2:	4619      	mov	r1, r3
 80034f4:	4825      	ldr	r0, [pc, #148]	; (800358c <MX_GPIO_Init+0x200>)
 80034f6:	f00a f895 	bl	800d624 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|LCD_BL_CTRL_Pin;
 80034fa:	f241 0302 	movw	r3, #4098	; 0x1002
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003500:	2301      	movs	r3, #1
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003504:	2300      	movs	r3, #0
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003508:	2300      	movs	r3, #0
 800350a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003510:	4619      	mov	r1, r3
 8003512:	481f      	ldr	r0, [pc, #124]	; (8003590 <MX_GPIO_Init+0x204>)
 8003514:	f00a f886 	bl	800d624 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003518:	2304      	movs	r3, #4
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800351c:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <MX_GPIO_Init+0x20c>)
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003520:	2301      	movs	r3, #1
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003528:	4619      	mov	r1, r3
 800352a:	481c      	ldr	r0, [pc, #112]	; (800359c <MX_GPIO_Init+0x210>)
 800352c:	f00a f87a 	bl	800d624 <HAL_GPIO_Init>

  /*Configure GPIO pins : RENDER_TIME_Pin FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|FRAME_RATE_Pin;
 8003530:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003536:	2301      	movs	r3, #1
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	2300      	movs	r3, #0
 8003540:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003546:	4619      	mov	r1, r3
 8003548:	4812      	ldr	r0, [pc, #72]	; (8003594 <MX_GPIO_Init+0x208>)
 800354a:	f00a f86b 	bl	800d624 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 800354e:	2304      	movs	r3, #4
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003552:	2301      	movs	r3, #1
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003556:	2301      	movs	r3, #1
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355a:	2300      	movs	r3, #0
 800355c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 800355e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003562:	4619      	mov	r1, r3
 8003564:	480a      	ldr	r0, [pc, #40]	; (8003590 <MX_GPIO_Init+0x204>)
 8003566:	f00a f85d 	bl	800d624 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800356a:	2200      	movs	r2, #0
 800356c:	2105      	movs	r1, #5
 800356e:	2008      	movs	r0, #8
 8003570:	f009 fc94 	bl	800ce9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003574:	2008      	movs	r0, #8
 8003576:	f009 fcab 	bl	800ced0 <HAL_NVIC_EnableIRQ>

}
 800357a:	bf00      	nop
 800357c:	3738      	adds	r7, #56	; 0x38
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	58024400 	.word	0x58024400
 8003588:	58021800 	.word	0x58021800
 800358c:	58022000 	.word	0x58022000
 8003590:	58020000 	.word	0x58020000
 8003594:	58020400 	.word	0x58020400
 8003598:	11110000 	.word	0x11110000
 800359c:	58021c00 	.word	0x58021c00

080035a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80035a8:	2064      	movs	r0, #100	; 0x64
 80035aa:	f010 ff9d 	bl	80144e8 <osDelay>
 80035ae:	e7fb      	b.n	80035a8 <StartDefaultTask+0x8>

080035b0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80035b6:	463b      	mov	r3, r7
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80035c2:	f009 fca1 	bl	800cf08 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80035c6:	2301      	movs	r3, #1
 80035c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80035ce:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80035d2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80035d4:	231b      	movs	r3, #27
 80035d6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80035d8:	2300      	movs	r3, #0
 80035da:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80035dc:	2300      	movs	r3, #0
 80035de:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80035e0:	2300      	movs	r3, #0
 80035e2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80035e4:	2301      	movs	r3, #1
 80035e6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80035f4:	463b      	mov	r3, r7
 80035f6:	4618      	mov	r0, r3
 80035f8:	f009 fcbe 	bl	800cf78 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80035fc:	2301      	movs	r3, #1
 80035fe:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8003600:	2319      	movs	r3, #25
 8003602:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8003604:	2303      	movs	r3, #3
 8003606:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8003608:	2301      	movs	r3, #1
 800360a:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800360c:	463b      	mov	r3, r7
 800360e:	4618      	mov	r0, r3
 8003610:	f009 fcb2 	bl	800cf78 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003614:	2302      	movs	r3, #2
 8003616:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8003618:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 800361c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 800361e:	2313      	movs	r3, #19
 8003620:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003622:	463b      	mov	r3, r7
 8003624:	4618      	mov	r0, r3
 8003626:	f009 fca7 	bl	800cf78 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800362a:	2303      	movs	r3, #3
 800362c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800362e:	2311      	movs	r3, #17
 8003630:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003636:	463b      	mov	r3, r7
 8003638:	4618      	mov	r0, r3
 800363a:	f009 fc9d 	bl	800cf78 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800363e:	2004      	movs	r0, #4
 8003640:	f009 fc7a 	bl	800cf38 <HAL_MPU_Enable>

}
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a04      	ldr	r2, [pc, #16]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800365e:	f007 ff21 	bl	800b4a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40001000 	.word	0x40001000

08003670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003674:	bf00      	nop
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <HAL_MspInit+0x38>)
 8003688:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800368c:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <HAL_MspInit+0x38>)
 800368e:	f043 0302 	orr.w	r3, r3, #2
 8003692:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003696:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <HAL_MspInit+0x38>)
 8003698:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	607b      	str	r3, [r7, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036a4:	2200      	movs	r2, #0
 80036a6:	210f      	movs	r1, #15
 80036a8:	f06f 0001 	mvn.w	r0, #1
 80036ac:	f009 fbf6 	bl	800ce9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	58024400 	.word	0x58024400

080036bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1c      	ldr	r2, [pc, #112]	; (800374c <HAL_ADC_MspInit+0x90>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d131      	bne.n	8003742 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80036de:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <HAL_ADC_MspInit+0x94>)
 80036e0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80036e4:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <HAL_ADC_MspInit+0x94>)
 80036e6:	f043 0320 	orr.w	r3, r3, #32
 80036ea:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80036ee:	4b18      	ldr	r3, [pc, #96]	; (8003750 <HAL_ADC_MspInit+0x94>)
 80036f0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_ADC_MspInit+0x94>)
 80036fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <HAL_ADC_MspInit+0x94>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_ADC_MspInit+0x94>)
 800370e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800371a:	2310      	movs	r3, #16
 800371c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800371e:	2303      	movs	r3, #3
 8003720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	4619      	mov	r1, r3
 800372c:	4809      	ldr	r0, [pc, #36]	; (8003754 <HAL_ADC_MspInit+0x98>)
 800372e:	f009 ff79 	bl	800d624 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003732:	2200      	movs	r2, #0
 8003734:	2105      	movs	r1, #5
 8003736:	2012      	movs	r0, #18
 8003738:	f009 fbb0 	bl	800ce9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800373c:	2012      	movs	r0, #18
 800373e:	f009 fbc7 	bl	800ced0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003742:	bf00      	nop
 8003744:	3728      	adds	r7, #40	; 0x28
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40022000 	.word	0x40022000
 8003750:	58024400 	.word	0x58024400
 8003754:	58020000 	.word	0x58020000

08003758 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <HAL_CRC_MspInit+0x3c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10e      	bne.n	8003788 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_CRC_MspInit+0x40>)
 800376c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003770:	4a09      	ldr	r2, [pc, #36]	; (8003798 <HAL_CRC_MspInit+0x40>)
 8003772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003776:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800377a:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_CRC_MspInit+0x40>)
 800377c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40023000 	.word	0x40023000
 8003798:	58024400 	.word	0x58024400

0800379c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <HAL_DMA2D_MspInit+0x48>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d116      	bne.n	80037dc <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80037ae:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <HAL_DMA2D_MspInit+0x4c>)
 80037b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80037b4:	4a0c      	ldr	r2, [pc, #48]	; (80037e8 <HAL_DMA2D_MspInit+0x4c>)
 80037b6:	f043 0310 	orr.w	r3, r3, #16
 80037ba:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_DMA2D_MspInit+0x4c>)
 80037c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80037cc:	2200      	movs	r2, #0
 80037ce:	2105      	movs	r1, #5
 80037d0:	205a      	movs	r0, #90	; 0x5a
 80037d2:	f009 fb63 	bl	800ce9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80037d6:	205a      	movs	r0, #90	; 0x5a
 80037d8:	f009 fb7a 	bl	800ced0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	52001000 	.word	0x52001000
 80037e8:	58024400 	.word	0x58024400

080037ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b0b8      	sub	sp, #224	; 0xe0
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	22b8      	movs	r2, #184	; 0xb8
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f028 f8b7 	bl	802b980 <memset>
  if(hi2c->Instance==I2C4)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a25      	ldr	r2, [pc, #148]	; (80038ac <HAL_I2C_MspInit+0xc0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d142      	bne.n	80038a2 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800381c:	2310      	movs	r3, #16
 800381e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8003820:	2300      	movs	r3, #0
 8003822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003826:	f107 0314 	add.w	r3, r7, #20
 800382a:	4618      	mov	r0, r3
 800382c:	f00d fb56 	bl	8010edc <HAL_RCCEx_PeriphCLKConfig>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003836:	f7ff ff1b 	bl	8003670 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <HAL_I2C_MspInit+0xc4>)
 800383c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003840:	4a1b      	ldr	r2, [pc, #108]	; (80038b0 <HAL_I2C_MspInit+0xc4>)
 8003842:	f043 0308 	orr.w	r3, r3, #8
 8003846:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800384a:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <HAL_I2C_MspInit+0xc4>)
 800384c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8003858:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800385c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003860:	2312      	movs	r3, #18
 8003862:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003866:	2301      	movs	r3, #1
 8003868:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800386c:	2302      	movs	r3, #2
 800386e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003872:	2304      	movs	r3, #4
 8003874:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003878:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800387c:	4619      	mov	r1, r3
 800387e:	480d      	ldr	r0, [pc, #52]	; (80038b4 <HAL_I2C_MspInit+0xc8>)
 8003880:	f009 fed0 	bl	800d624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003884:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_I2C_MspInit+0xc4>)
 8003886:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <HAL_I2C_MspInit+0xc4>)
 800388c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003890:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_I2C_MspInit+0xc4>)
 8003896:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80038a2:	bf00      	nop
 80038a4:	37e0      	adds	r7, #224	; 0xe0
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	58001c00 	.word	0x58001c00
 80038b0:	58024400 	.word	0x58024400
 80038b4:	58020c00 	.word	0x58020c00

080038b8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0c      	ldr	r2, [pc, #48]	; (80038f8 <HAL_I2C_MspDeInit+0x40>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d111      	bne.n	80038ee <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <HAL_I2C_MspDeInit+0x44>)
 80038cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80038d0:	4a0a      	ldr	r2, [pc, #40]	; (80038fc <HAL_I2C_MspDeInit+0x44>)
 80038d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 80038da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038de:	4808      	ldr	r0, [pc, #32]	; (8003900 <HAL_I2C_MspDeInit+0x48>)
 80038e0:	f00a f850 	bl	800d984 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 80038e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038e8:	4805      	ldr	r0, [pc, #20]	; (8003900 <HAL_I2C_MspDeInit+0x48>)
 80038ea:	f00a f84b 	bl	800d984 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	58001c00 	.word	0x58001c00
 80038fc:	58024400 	.word	0x58024400
 8003900:	58020c00 	.word	0x58020c00

08003904 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b0ba      	sub	sp, #232	; 0xe8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800391c:	f107 031c 	add.w	r3, r7, #28
 8003920:	22b8      	movs	r2, #184	; 0xb8
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f028 f82b 	bl	802b980 <memset>
  if(hltdc->Instance==LTDC)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a56      	ldr	r2, [pc, #344]	; (8003a88 <HAL_LTDC_MspInit+0x184>)
 8003930:	4293      	cmp	r3, r2
 8003932:	f040 80a4 	bne.w	8003a7e <HAL_LTDC_MspInit+0x17a>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003936:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800393a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 800393c:	2318      	movs	r3, #24
 800393e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8003940:	23c9      	movs	r3, #201	; 0xc9
 8003942:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003944:	2302      	movs	r3, #2
 8003946:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003948:	2302      	movs	r3, #2
 800394a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 800394c:	2315      	movs	r3, #21
 800394e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8003950:	2300      	movs	r3, #0
 8003952:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8003954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003958:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 800395a:	f241 5356 	movw	r3, #5462	; 0x1556
 800395e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003960:	f107 031c 	add.w	r3, r7, #28
 8003964:	4618      	mov	r0, r3
 8003966:	f00d fab9 	bl	8010edc <HAL_RCCEx_PeriphCLKConfig>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_LTDC_MspInit+0x70>
    {
      Error_Handler();
 8003970:	f7ff fe7e 	bl	8003670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003974:	4b45      	ldr	r3, [pc, #276]	; (8003a8c <HAL_LTDC_MspInit+0x188>)
 8003976:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800397a:	4a44      	ldr	r2, [pc, #272]	; (8003a8c <HAL_LTDC_MspInit+0x188>)
 800397c:	f043 0308 	orr.w	r3, r3, #8
 8003980:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8003984:	4b41      	ldr	r3, [pc, #260]	; (8003a8c <HAL_LTDC_MspInit+0x188>)
 8003986:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003992:	4b3e      	ldr	r3, [pc, #248]	; (8003a8c <HAL_LTDC_MspInit+0x188>)
 8003994:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003998:	4a3c      	ldr	r2, [pc, #240]	; (8003a8c <HAL_LTDC_MspInit+0x188>)
 800399a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800399e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80039a2:	4b3a      	ldr	r3, [pc, #232]	; (8003a8c <HAL_LTDC_MspInit+0x188>)
 80039a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80039b0:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <HAL_LTDC_MspInit+0x188>)
 80039b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039b6:	4a35      	ldr	r2, [pc, #212]	; (8003a8c <HAL_LTDC_MspInit+0x188>)
 80039b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80039c0:	4b32      	ldr	r3, [pc, #200]	; (8003a8c <HAL_LTDC_MspInit+0x188>)
 80039c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80039ce:	4b2f      	ldr	r3, [pc, #188]	; (8003a8c <HAL_LTDC_MspInit+0x188>)
 80039d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039d4:	4a2d      	ldr	r2, [pc, #180]	; (8003a8c <HAL_LTDC_MspInit+0x188>)
 80039d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039da:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80039de:	4b2b      	ldr	r3, [pc, #172]	; (8003a8c <HAL_LTDC_MspInit+0x188>)
 80039e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 80039ec:	23ff      	movs	r3, #255	; 0xff
 80039ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f2:	2302      	movs	r3, #2
 80039f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a04:	230e      	movs	r3, #14
 8003a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003a0a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a0e:	4619      	mov	r1, r3
 8003a10:	481f      	ldr	r0, [pc, #124]	; (8003a90 <HAL_LTDC_MspInit+0x18c>)
 8003a12:	f009 fe07 	bl	800d624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8003a16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a30:	230e      	movs	r3, #14
 8003a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003a36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4815      	ldr	r0, [pc, #84]	; (8003a94 <HAL_LTDC_MspInit+0x190>)
 8003a3e:	f009 fdf1 	bl	800d624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8003a42:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a56:	2300      	movs	r3, #0
 8003a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003a5c:	230e      	movs	r3, #14
 8003a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a62:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a66:	4619      	mov	r1, r3
 8003a68:	480b      	ldr	r0, [pc, #44]	; (8003a98 <HAL_LTDC_MspInit+0x194>)
 8003a6a:	f009 fddb 	bl	800d624 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2105      	movs	r1, #5
 8003a72:	2058      	movs	r0, #88	; 0x58
 8003a74:	f009 fa12 	bl	800ce9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003a78:	2058      	movs	r0, #88	; 0x58
 8003a7a:	f009 fa29 	bl	800ced0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003a7e:	bf00      	nop
 8003a80:	37e8      	adds	r7, #232	; 0xe8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	50001000 	.word	0x50001000
 8003a8c:	58024400 	.word	0x58024400
 8003a90:	58022800 	.word	0x58022800
 8003a94:	58022400 	.word	0x58022400
 8003a98:	58022000 	.word	0x58022000

08003a9c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <HAL_OSPI_MspInit+0x68>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d125      	bne.n	8003afa <HAL_OSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8003aae:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <HAL_OSPI_MspInit+0x6c>)
 8003ab0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003ab4:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <HAL_OSPI_MspInit+0x6c>)
 8003ab6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003aba:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_OSPI_MspInit+0x6c>)
 8003ac0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003acc:	4b0e      	ldr	r3, [pc, #56]	; (8003b08 <HAL_OSPI_MspInit+0x6c>)
 8003ace:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003ad2:	4a0d      	ldr	r2, [pc, #52]	; (8003b08 <HAL_OSPI_MspInit+0x6c>)
 8003ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <HAL_OSPI_MspInit+0x6c>)
 8003ade:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8003aea:	2200      	movs	r2, #0
 8003aec:	2105      	movs	r1, #5
 8003aee:	205c      	movs	r0, #92	; 0x5c
 8003af0:	f009 f9d4 	bl	800ce9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8003af4:	205c      	movs	r0, #92	; 0x5c
 8003af6:	f009 f9eb 	bl	800ced0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	52005000 	.word	0x52005000
 8003b08:	58024400 	.word	0x58024400

08003b0c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0c      	ldr	r2, [pc, #48]	; (8003b4c <HAL_OSPI_MspDeInit+0x40>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d112      	bne.n	8003b44 <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <HAL_OSPI_MspDeInit+0x44>)
 8003b20:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003b24:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <HAL_OSPI_MspDeInit+0x44>)
 8003b26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b2a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8003b2e:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_OSPI_MspDeInit+0x44>)
 8003b30:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003b34:	4a06      	ldr	r2, [pc, #24]	; (8003b50 <HAL_OSPI_MspDeInit+0x44>)
 8003b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b3a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8003b3e:	205c      	movs	r0, #92	; 0x5c
 8003b40:	f009 f9d4 	bl	800ceec <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	52005000 	.word	0x52005000
 8003b50:	58024400 	.word	0x58024400

08003b54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <HAL_TIM_PWM_MspInit+0x3c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d10e      	bne.n	8003b84 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_TIM_PWM_MspInit+0x40>)
 8003b68:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003b6c:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <HAL_TIM_PWM_MspInit+0x40>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <HAL_TIM_PWM_MspInit+0x40>)
 8003b78:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	40010000 	.word	0x40010000
 8003b94:	58024400 	.word	0x58024400

08003b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba0:	f107 030c 	add.w	r3, r7, #12
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	60da      	str	r2, [r3, #12]
 8003bae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <HAL_TIM_MspPostInit+0x6c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d11f      	bne.n	8003bfa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <HAL_TIM_MspPostInit+0x70>)
 8003bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003bc0:	4a11      	ldr	r2, [pc, #68]	; (8003c08 <HAL_TIM_MspPostInit+0x70>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003bca:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <HAL_TIM_MspPostInit+0x70>)
 8003bcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bde:	2302      	movs	r3, #2
 8003be0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003bea:	2301      	movs	r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bee:	f107 030c 	add.w	r3, r7, #12
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4805      	ldr	r0, [pc, #20]	; (8003c0c <HAL_TIM_MspPostInit+0x74>)
 8003bf6:	f009 fd15 	bl	800d624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003bfa:	bf00      	nop
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40010000 	.word	0x40010000
 8003c08:	58024400 	.word	0x58024400
 8003c0c:	58020000 	.word	0x58020000

08003c10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b090      	sub	sp, #64	; 0x40
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b0f      	cmp	r3, #15
 8003c1c:	d827      	bhi.n	8003c6e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	2036      	movs	r0, #54	; 0x36
 8003c24:	f009 f93a 	bl	800ce9c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c28:	2036      	movs	r0, #54	; 0x36
 8003c2a:	f009 f951 	bl	800ced0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003c2e:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <HAL_InitTick+0xc4>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c34:	4b28      	ldr	r3, [pc, #160]	; (8003cd8 <HAL_InitTick+0xc8>)
 8003c36:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003c3a:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <HAL_InitTick+0xc8>)
 8003c3c:	f043 0310 	orr.w	r3, r3, #16
 8003c40:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003c44:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <HAL_InitTick+0xc8>)
 8003c46:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c52:	f107 0210 	add.w	r2, r7, #16
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f00d f8fb 	bl	8010e58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <HAL_InitTick+0x6a>
 8003c6c:	e001      	b.n	8003c72 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e02b      	b.n	8003cca <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003c72:	f00d f8c5 	bl	8010e00 <HAL_RCC_GetPCLK1Freq>
 8003c76:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003c78:	e004      	b.n	8003c84 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003c7a:	f00d f8c1 	bl	8010e00 <HAL_RCC_GetPCLK1Freq>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c86:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <HAL_InitTick+0xcc>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	0c9b      	lsrs	r3, r3, #18
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <HAL_InitTick+0xd0>)
 8003c94:	4a13      	ldr	r2, [pc, #76]	; (8003ce4 <HAL_InitTick+0xd4>)
 8003c96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_InitTick+0xd0>)
 8003c9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003ca0:	4a0f      	ldr	r2, [pc, #60]	; (8003ce0 <HAL_InitTick+0xd0>)
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <HAL_InitTick+0xd0>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <HAL_InitTick+0xd0>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003cb2:	480b      	ldr	r0, [pc, #44]	; (8003ce0 <HAL_InitTick+0xd0>)
 8003cb4:	f00f f9bc 	bl	8013030 <HAL_TIM_Base_Init>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d104      	bne.n	8003cc8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003cbe:	4808      	ldr	r0, [pc, #32]	; (8003ce0 <HAL_InitTick+0xd0>)
 8003cc0:	f00f fa18 	bl	80130f4 <HAL_TIM_Base_Start_IT>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	e000      	b.n	8003cca <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3740      	adds	r7, #64	; 0x40
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	24000044 	.word	0x24000044
 8003cd8:	58024400 	.word	0x58024400
 8003cdc:	431bde83 	.word	0x431bde83
 8003ce0:	2400cdf4 	.word	0x2400cdf4
 8003ce4:	40001000 	.word	0x40001000

08003ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cfa:	e7fe      	b.n	8003cfa <HardFault_Handler+0x4>

08003cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d00:	e7fe      	b.n	8003d00 <MemManage_Handler+0x4>

08003d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d02:	b480      	push	{r7}
 8003d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d06:	e7fe      	b.n	8003d06 <BusFault_Handler+0x4>

08003d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <UsageFault_Handler+0x4>

08003d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003d20:	2004      	movs	r0, #4
 8003d22:	f009 ff6c 	bl	800dbfe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003d30:	4802      	ldr	r0, [pc, #8]	; (8003d3c <ADC_IRQHandler+0x10>)
 8003d32:	f008 f87d 	bl	800be30 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	2400cd38 	.word	0x2400cd38

08003d40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d44:	4802      	ldr	r0, [pc, #8]	; (8003d50 <TIM6_DAC_IRQHandler+0x10>)
 8003d46:	f00f fba5 	bl	8013494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	2400cdf4 	.word	0x2400cdf4

08003d54 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003d58:	4802      	ldr	r0, [pc, #8]	; (8003d64 <LTDC_IRQHandler+0x10>)
 8003d5a:	f00a fe01 	bl	800e960 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	2400cbb8 	.word	0x2400cbb8

08003d68 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003d6c:	4802      	ldr	r0, [pc, #8]	; (8003d78 <DMA2D_IRQHandler+0x10>)
 8003d6e:	f009 fa95 	bl	800d29c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	2400cc60 	.word	0x2400cc60

08003d7c <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8003d80:	4802      	ldr	r0, [pc, #8]	; (8003d8c <OCTOSPI1_IRQHandler+0x10>)
 8003d82:	f00b fa1f 	bl	800f1c4 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2400cb58 	.word	0x2400cb58

08003d90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
	return 1;
 8003d94:	2301      	movs	r3, #1
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <_kill>:

int _kill(int pid, int sig)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003daa:	f027 fd8f 	bl	802b8cc <__errno>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2216      	movs	r2, #22
 8003db2:	601a      	str	r2, [r3, #0]
	return -1;
 8003db4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <_exit>:

void _exit (int status)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ffe7 	bl	8003da0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dd2:	e7fe      	b.n	8003dd2 <_exit+0x12>

08003dd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	e00a      	b.n	8003dfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003de6:	f3af 8000 	nop.w
 8003dea:	4601      	mov	r1, r0
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	60ba      	str	r2, [r7, #8]
 8003df2:	b2ca      	uxtb	r2, r1
 8003df4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	dbf0      	blt.n	8003de6 <_read+0x12>
	}

return len;
 8003e04:	687b      	ldr	r3, [r7, #4]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b086      	sub	sp, #24
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	e009      	b.n	8003e34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	60ba      	str	r2, [r7, #8]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	3301      	adds	r3, #1
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	dbf1      	blt.n	8003e20 <_write+0x12>
	}
	return len;
 8003e3c:	687b      	ldr	r3, [r7, #4]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <_close>:

int _close(int file)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
	return -1;
 8003e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e6e:	605a      	str	r2, [r3, #4]
	return 0;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <_isatty>:

int _isatty(int file)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
	return 1;
 8003e86:	2301      	movs	r3, #1
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
	return 0;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <_sbrk+0x50>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <_sbrk+0x16>
		heap_end = &end;
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <_sbrk+0x50>)
 8003ec2:	4a10      	ldr	r2, [pc, #64]	; (8003f04 <_sbrk+0x54>)
 8003ec4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003ec6:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <_sbrk+0x50>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <_sbrk+0x50>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	466a      	mov	r2, sp
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d907      	bls.n	8003eea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003eda:	f027 fcf7 	bl	802b8cc <__errno>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	220c      	movs	r2, #12
 8003ee2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	e006      	b.n	8003ef8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <_sbrk+0x50>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	4a03      	ldr	r2, [pc, #12]	; (8003f00 <_sbrk+0x50>)
 8003ef4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	240030a4 	.word	0x240030a4
 8003f04:	2400cf48 	.word	0x2400cf48

08003f08 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003f14:	887b      	ldrh	r3, [r7, #2]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d010      	beq.n	8003f3c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	dc13      	bgt.n	8003f46 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d005      	beq.n	8003f32 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8003f26:	e00e      	b.n	8003f46 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003f28:	f004 fa6e 	bl	8008408 <_ZN17TypedTextDatabase8getFontsEv>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	e00a      	b.n	8003f48 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003f32:	f004 fa69 	bl	8008408 <_ZN17TypedTextDatabase8getFontsEv>
 8003f36:	4603      	mov	r3, r0
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	e005      	b.n	8003f48 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003f3c:	f004 fa64 	bl	8008408 <_ZN17TypedTextDatabase8getFontsEv>
 8003f40:	4603      	mov	r3, r0
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	e000      	b.n	8003f48 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8003f46:	2300      	movs	r3, #0
    }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003f54:	4b02      	ldr	r3, [pc, #8]	; (8003f60 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	0802dcfc 	.word	0x0802dcfc

08003f64 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003f68:	2305      	movs	r3, #5
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
    {
 8003f7c:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	601a      	str	r2, [r3, #0]
    }
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	0802e1f4 	.word	0x0802e1f4

08003f94 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
    }
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ffe9 	bl	8003f74 <_ZN8touchgfx4FontD1Ev>
 8003fa2:	2110      	movs	r1, #16
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f027 fa8a 	bl	802b4be <_ZdlPvj>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003fb4:	b590      	push	{r4, r7, lr}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003fc0:	887b      	ldrh	r3, [r7, #2]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e010      	b.n	8003fec <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	681c      	ldr	r4, [r3, #0]
 8003fda:	f107 030f 	add.w	r3, r7, #15
 8003fde:	f107 0210 	add.w	r2, r7, #16
 8003fe2:	8879      	ldrh	r1, [r7, #2]
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	47a0      	blx	r4
 8003fe8:	6178      	str	r0, [r7, #20]
        return glyph;
 8003fea:	697b      	ldr	r3, [r7, #20]
    }
 8003fec:	4618      	mov	r0, r3
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd90      	pop	{r4, r7, pc}

08003ff4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	895b      	ldrh	r3, [r3, #10]
    }
 8004000:	4618      	mov	r0, r3
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	899b      	ldrh	r3, [r3, #12]
    }
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	889b      	ldrh	r3, [r3, #4]
    }
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	889a      	ldrh	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	799b      	ldrb	r3, [r3, #6]
 800404c:	b29b      	uxth	r3, r3
 800404e:	4413      	add	r3, r2
 8004050:	b29b      	uxth	r3, r3
    }
 8004052:	4618      	mov	r0, r3
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	79db      	ldrb	r3, [r3, #7]
 800406a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800406e:	b2db      	uxtb	r3, r3
    }
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	79db      	ldrb	r3, [r3, #7]
 8004088:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800408c:	b2db      	uxtb	r3, r3
    }
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	4a05      	ldr	r2, [pc, #20]	; (80040bc <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ff61 	bl	8003f74 <_ZN8touchgfx4FontD1Ev>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	080306a8 	.word	0x080306a8

080040c0 <_ZN8touchgfx9ConstFontD0Ev>:
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ffe7 	bl	800409c <_ZN8touchgfx9ConstFontD1Ev>
 80040ce:	2118      	movs	r1, #24
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f027 f9f4 	bl	802b4be <_ZdlPvj>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	4a05      	ldr	r2, [pc, #20]	; (8004100 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff ffd3 	bl	800409c <_ZN8touchgfx9ConstFontD1Ev>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	0802dec4 	.word	0x0802dec4

08004104 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff ffe7 	bl	80040e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8004112:	2128      	movs	r1, #40	; 0x28
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f027 f9d2 	bl	802b4be <_ZdlPvj>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
    {
 800412c:	4a04      	ldr	r2, [pc, #16]	; (8004140 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	601a      	str	r2, [r3, #0]
    }
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	0802dd68 	.word	0x0802dd68

08004144 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
    }
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff ffe9 	bl	8004124 <_ZN8touchgfx9TypedTextD1Ev>
 8004152:	2108      	movs	r1, #8
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f027 f9b2 	bl	802b4be <_ZdlPvj>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <_ZN8touchgfx8DrawableD1Ev>:
          visible(true)
    {
    }

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
    {
 8004184:	4a04      	ldr	r2, [pc, #16]	; (8004198 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	601a      	str	r2, [r3, #0]
    }
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	08030644 	.word	0x08030644

0800419c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
    }
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ffe9 	bl	800417c <_ZN8touchgfx8DrawableD1Ev>
 80041aa:	2128      	movs	r1, #40	; 0x28
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f027 f986 	bl	802b4be <_ZdlPvj>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80041c4:	2300      	movs	r3, #0
    }
 80041c6:	4618      	mov	r0, r3
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	4608      	mov	r0, r1
 80041dc:	4611      	mov	r1, r2
 80041de:	461a      	mov	r2, r3
 80041e0:	4603      	mov	r3, r0
 80041e2:	817b      	strh	r3, [r7, #10]
 80041e4:	460b      	mov	r3, r1
 80041e6:	813b      	strh	r3, [r7, #8]
 80041e8:	4613      	mov	r3, r2
 80041ea:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80041ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80041f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80041f4:	4619      	mov	r1, r3
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f837 	bl	800426a <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80041fc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004204:	4619      	mov	r1, r3
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 f88b 	bl	8004322 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	460b      	mov	r3, r1
 8004238:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	887a      	ldrh	r2, [r7, #2]
 800423e:	809a      	strh	r2, [r3, #4]
    }
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	887a      	ldrh	r2, [r7, #2]
 800425c:	80da      	strh	r2, [r3, #6]
    }
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	807b      	strh	r3, [r7, #2]
 8004276:	4613      	mov	r3, r2
 8004278:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	332c      	adds	r3, #44	; 0x2c
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004286:	4611      	mov	r1, r2
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
        setY(y);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3330      	adds	r3, #48	; 0x30
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004298:	4611      	mov	r1, r2
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
    }
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	460b      	mov	r3, r1
 80042b0:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	887a      	ldrh	r2, [r7, #2]
 80042b6:	811a      	strh	r2, [r3, #8]
    }
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	887a      	ldrh	r2, [r7, #2]
 80042d4:	815a      	strh	r2, [r3, #10]
    }
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
    {
    }
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
    {
    }
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
    {
    }
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	460b      	mov	r3, r1
 800432c:	807b      	strh	r3, [r7, #2]
 800432e:	4613      	mov	r3, r2
 8004330:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3334      	adds	r3, #52	; 0x34
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800433e:	4611      	mov	r1, r2
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
        setHeight(height);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3338      	adds	r3, #56	; 0x38
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004350:	4611      	mov	r1, r2
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4798      	blx	r3
    }
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
    {
    }
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
    {
    }
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	807b      	strh	r3, [r7, #2]
 80043c8:	4613      	mov	r3, r2
 80043ca:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3350      	adds	r3, #80	; 0x50
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	8879      	ldrh	r1, [r7, #2]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80043dc:	b292      	uxth	r2, r2
 80043de:	1a8a      	subs	r2, r1, r2
 80043e0:	b292      	uxth	r2, r2
 80043e2:	b210      	sxth	r0, r2
 80043e4:	8839      	ldrh	r1, [r7, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80043ec:	b292      	uxth	r2, r2
 80043ee:	1a8a      	subs	r2, r1, r2
 80043f0:	b292      	uxth	r2, r2
 80043f2:	b212      	sxth	r2, r2
 80043f4:	4601      	mov	r1, r0
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	4798      	blx	r3
    }
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004410:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004418:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004420:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f7ff ffe1 	bl	8004402 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	601a      	str	r2, [r3, #0]
    }
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <_ZN8touchgfx3HAL3lcdEv+0x22>
 8004468:	4b08      	ldr	r3, [pc, #32]	; (800448c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004478:	e002      	b.n	8004480 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 800447a:	4b04      	ldr	r3, [pc, #16]	; (800448c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
    }
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	2400c8bc 	.word	0x2400c8bc

08004490 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8004498:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	605a      	str	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	721a      	strb	r2, [r3, #8]
    {
    }
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	0802dea0 	.word	0x0802dea0

080044bc <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
    {
 80044c4:	4a04      	ldr	r2, [pc, #16]	; (80044d8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	601a      	str	r2, [r3, #0]
    }
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	0802dea0 	.word	0x0802dea0

080044dc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
    }
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ffe9 	bl	80044bc <_ZN8touchgfx10TransitionD1Ev>
 80044ea:	210c      	movs	r1, #12
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f026 ffe6 	bl	802b4be <_ZdlPvj>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
    {
    }
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
    {
    }
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
    {
    }
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8004540:	f01a f9b8 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 8004544:	4603      	mov	r3, r0
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	3230      	adds	r2, #48	; 0x30
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	4790      	blx	r2
    }
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	605a      	str	r2, [r3, #4]
    }
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4618      	mov	r0, r3
 8004580:	f01a fa02 	bl	801e988 <_ZN8touchgfx11ApplicationC1Ev>
 8004584:	4a09      	ldr	r2, [pc, #36]	; (80045ac <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800459e:	6013      	str	r3, [r2, #0]
    }
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	0802db30 	.word	0x0802db30
 80045b0:	2400c928 	.word	0x2400c928

080045b4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	601a      	str	r2, [r3, #0]
    }
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	721a      	strb	r2, [r3, #8]
    }
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	607b      	str	r3, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	817b      	strh	r3, [r7, #10]
 80045f8:	4613      	mov	r3, r2
 80045fa:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fec2 	bl	8004388 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fec8 	bl	80043a2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800461c:	2300      	movs	r3, #0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	601a      	str	r2, [r3, #0]
        }
    }
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	605a      	str	r2, [r3, #4]
    }
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <_ZN8touchgfx6WidgetD1Ev>:
class Widget : public Drawable
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	4a05      	ldr	r2, [pc, #20]	; (800466c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff fd8d 	bl	800417c <_ZN8touchgfx8DrawableD1Ev>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4618      	mov	r0, r3
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	0802de18 	.word	0x0802de18

08004670 <_ZN8touchgfx6WidgetD0Ev>:
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff ffe7 	bl	800464c <_ZN8touchgfx6WidgetD1Ev>
 800467e:	2128      	movs	r1, #40	; 0x28
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f026 ff1c 	bl	802b4be <_ZdlPvj>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4618      	mov	r0, r3
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ff68 	bl	8004574 <_ZN8touchgfx14MVPApplicationC1Ev>
 80046a4:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 f92b 	bl	800490c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80046c6:	f7fc fd97 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 80046ca:	4603      	mov	r3, r0
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	3208      	adds	r2, #8
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	2100      	movs	r1, #0
 80046d4:	4618      	mov	r0, r3
 80046d6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 80046d8:	2000      	movs	r0, #0
 80046da:	f003 fe1d 	bl	8008318 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80046de:	f7ff febb 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 80046e2:	4603      	mov	r3, r0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f020 fb22 	bl	8024d2e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	0802dad4 	.word	0x0802dad4

080046f8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	4611      	mov	r1, r2
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff ffe9 	bl	80046f8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	3308      	adds	r3, #8
 8004734:	3208      	adds	r2, #8
 8004736:	e892 0003 	ldmia.w	r2, {r0, r1}
 800473a:	e883 0003 	stmia.w	r3, {r0, r1}
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b089      	sub	sp, #36	; 0x24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8004756:	4b10      	ldr	r3, [pc, #64]	; (8004798 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	f107 0008 	add.w	r0, r7, #8
 8004762:	f107 0318 	add.w	r3, r7, #24
 8004766:	cb0c      	ldmia	r3, {r2, r3}
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	f000 f8eb 	bl	8004944 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800476e:	f107 0308 	add.w	r3, r7, #8
 8004772:	4619      	mov	r1, r3
 8004774:	4620      	mov	r0, r4
 8004776:	f7ff ffcb 	bl	8004710 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800477a:	f107 0308 	add.w	r3, r7, #8
 800477e:	4618      	mov	r0, r3
 8004780:	f7fd fe40 	bl	8002404 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8004790:	bf00      	nop
 8004792:	3724      	adds	r7, #36	; 0x24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd90      	pop	{r4, r7, pc}
 8004798:	0800479d 	.word	0x0800479d

0800479c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80047b0:	461a      	mov	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	4b04      	ldr	r3, [pc, #16]	; (80047cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80047bc:	4804      	ldr	r0, [pc, #16]	; (80047d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80047be:	f000 f8f3 	bl	80049a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	2400c91c 	.word	0x2400c91c
 80047d0:	2400c918 	.word	0x2400c918

080047d4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest()
{
 80047d4:	b590      	push	{r4, r7, lr}
 80047d6:	b089      	sub	sp, #36	; 0x24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionWestImpl);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv+0x50>)
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	2300      	movs	r3, #0
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	f107 0008 	add.w	r0, r7, #8
 80047ee:	f107 0318 	add.w	r3, r7, #24
 80047f2:	cb0c      	ldmia	r3, {r2, r3}
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	f000 f8a5 	bl	8004944 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80047fa:	f107 0308 	add.w	r3, r7, #8
 80047fe:	4619      	mov	r1, r3
 8004800:	4620      	mov	r0, r4
 8004802:	f7ff ff85 	bl	8004710 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004806:	f107 0308 	add.w	r3, r7, #8
 800480a:	4618      	mov	r0, r3
 800480c:	f7fd fdfa 	bl	8002404 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800481c:	bf00      	nop
 800481e:	3724      	adds	r7, #36	; 0x24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd90      	pop	{r4, r7, pc}
 8004824:	08004829 	.word	0x08004829

08004828 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af02      	add	r7, sp, #8
 800482e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800483c:	461a      	mov	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	4b04      	ldr	r3, [pc, #16]	; (8004858 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x30>)
 8004848:	4804      	ldr	r0, [pc, #16]	; (800485c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x34>)
 800484a:	f000 f9c9 	bl	8004be0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	2400c91c 	.word	0x2400c91c
 800485c:	2400c918 	.word	0x2400c918

08004860 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEast()
{
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b089      	sub	sp, #36	; 0x24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionEastImpl);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x50>)
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
 8004876:	f107 0008 	add.w	r0, r7, #8
 800487a:	f107 0318 	add.w	r3, r7, #24
 800487e:	cb0c      	ldmia	r3, {r2, r3}
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	f000 f85f 	bl	8004944 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004886:	f107 0308 	add.w	r3, r7, #8
 800488a:	4619      	mov	r1, r3
 800488c:	4620      	mov	r0, r4
 800488e:	f7ff ff3f 	bl	8004710 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004892:	f107 0308 	add.w	r3, r7, #8
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd fdb4 	bl	8002404 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80048a8:	bf00      	nop
 80048aa:	3724      	adds	r7, #36	; 0x24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd90      	pop	{r4, r7, pc}
 80048b0:	080048b5 	.word	0x080048b5

080048b4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEastImpl()
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80048c8:	461a      	mov	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x30>)
 80048d4:	4804      	ldr	r0, [pc, #16]	; (80048e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x34>)
 80048d6:	f000 faa1 	bl	8004e1c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	2400c91c 	.word	0x2400c91c
 80048e8:	2400c918 	.word	0x2400c918

080048ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	4a04      	ldr	r2, [pc, #16]	; (8004908 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	0802db74 	.word	0x0802db74

0800490c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff ffe8 	bl	80048ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800491c:	4a08      	ldr	r2, [pc, #32]	; (8004940 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	605a      	str	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	609a      	str	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	60da      	str	r2, [r3, #12]
    }
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	0802db18 	.word	0x0802db18

08004944 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	4639      	mov	r1, r7
 8004950:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff ffc8 	bl	80048ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800495c:	4a08      	ldr	r2, [pc, #32]	; (8004980 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	605a      	str	r2, [r3, #4]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3308      	adds	r3, #8
 800496c:	463a      	mov	r2, r7
 800496e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004972:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	0802db18 	.word	0x0802db18

08004984 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff fd7e 	bl	8004490 <_ZN8touchgfx10TransitionC1Ev>
 8004994:	4a03      	ldr	r2, [pc, #12]	; (80049a4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	0802de7c 	.word	0x0802de7c

080049a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b08f      	sub	sp, #60	; 0x3c
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3320      	adds	r3, #32
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4610      	mov	r0, r2
 80049c6:	4798      	blx	r3
 80049c8:	4603      	mov	r3, r0
 80049ca:	f5b3 5f02 	cmp.w	r3, #8320	; 0x2080
 80049ce:	d205      	bcs.n	80049dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80049d0:	4b7e      	ldr	r3, [pc, #504]	; (8004bcc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80049d2:	4a7f      	ldr	r2, [pc, #508]	; (8004bd0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80049d4:	21a3      	movs	r1, #163	; 0xa3
 80049d6:	487f      	ldr	r0, [pc, #508]	; (8004bd4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80049d8:	f026 ff46 	bl	802b868 <__assert_func>
 80049dc:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3320      	adds	r3, #32
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4610      	mov	r0, r2
 80049ee:	4798      	blx	r3
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b0f      	cmp	r3, #15
 80049f4:	d805      	bhi.n	8004a02 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80049f6:	4b78      	ldr	r3, [pc, #480]	; (8004bd8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80049f8:	4a75      	ldr	r2, [pc, #468]	; (8004bd0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80049fa:	21a4      	movs	r1, #164	; 0xa4
 80049fc:	4875      	ldr	r0, [pc, #468]	; (8004bd4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80049fe:	f026 ff33 	bl	802b868 <__assert_func>
 8004a02:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3320      	adds	r3, #32
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4610      	mov	r0, r2
 8004a14:	4798      	blx	r3
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b0b      	cmp	r3, #11
 8004a1a:	d805      	bhi.n	8004a28 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004a1c:	4b6f      	ldr	r3, [pc, #444]	; (8004bdc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004a1e:	4a6c      	ldr	r2, [pc, #432]	; (8004bd0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004a20:	21a5      	movs	r1, #165	; 0xa5
 8004a22:	486c      	ldr	r0, [pc, #432]	; (8004bd4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004a24:	f026 ff20 	bl	802b868 <__assert_func>
 8004a28:	bf00      	nop
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004a36:	f019 ff3d 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f019 ff87 	bl	801e950 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d008      	beq.n	8004a5c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4798      	blx	r3
    if (*currentTrans)
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d007      	beq.n	8004a74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4610      	mov	r0, r2
 8004a72:	4798      	blx	r3
    if (*currentScreen)
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3314      	adds	r3, #20
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4798      	blx	r3
    if (*currentPresenter)
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4798      	blx	r3
    if (*currentScreen)
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4610      	mov	r0, r2
 8004abe:	4798      	blx	r3
    if (*currentPresenter)
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	3308      	adds	r3, #8
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	4798      	blx	r3
}
 8004ada:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fab8 	bl	8005058 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	4619      	mov	r1, r3
 8004aec:	200c      	movs	r0, #12
 8004aee:	f7ff fb39 	bl	8004164 <_ZnwjPv>
 8004af2:	4604      	mov	r4, r0
 8004af4:	4620      	mov	r0, r4
 8004af6:	f7ff ff45 	bl	8004984 <_ZN8touchgfx12NoTransitionC1Ev>
 8004afa:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fabb 	bl	800507e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	f44f 5002 	mov.w	r0, #8320	; 0x2080
 8004b10:	f7ff fb28 	bl	8004164 <_ZnwjPv>
 8004b14:	4604      	mov	r4, r0
 8004b16:	4620      	mov	r0, r4
 8004b18:	f003 fe1a 	bl	8008750 <_ZN11Screen1ViewC1Ev>
 8004b1c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2100      	movs	r1, #0
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fabd 	bl	80050a4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	2010      	movs	r0, #16
 8004b30:	f7ff fb18 	bl	8004164 <_ZnwjPv>
 8004b34:	4604      	mov	r4, r0
 8004b36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f003 fd9b 	bl	8008674 <_ZN16Screen1PresenterC1ER11Screen1View>
 8004b3e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b44:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b4a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b50:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8004b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	e000      	b.n	8004b60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	4619      	mov	r1, r3
 8004b62:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004b64:	f7ff fd26 	bl	80045b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fd5e 	bl	8004630 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 faa6 	bl	80050ca <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b84:	61bb      	str	r3, [r7, #24]
 8004b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b88:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	330c      	adds	r3, #12
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69f8      	ldr	r0, [r7, #28]
 8004b94:	4798      	blx	r3
    newPresenter->activate();
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69b8      	ldr	r0, [r7, #24]
 8004b9e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004ba0:	6979      	ldr	r1, [r7, #20]
 8004ba2:	69f8      	ldr	r0, [r7, #28]
 8004ba4:	f01b fb64 	bl	8020270 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3310      	adds	r3, #16
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6978      	ldr	r0, [r7, #20]
 8004bb2:	4798      	blx	r3
    newTransition->invalidate();
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3314      	adds	r3, #20
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6978      	ldr	r0, [r7, #20]
 8004bbe:	4798      	blx	r3
}
 8004bc0:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	373c      	adds	r7, #60	; 0x3c
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd90      	pop	{r4, r7, pc}
 8004bcc:	0802cdcc 	.word	0x0802cdcc
 8004bd0:	0802ce5c 	.word	0x0802ce5c
 8004bd4:	0802cf60 	.word	0x0802cf60
 8004bd8:	0802cfa8 	.word	0x0802cfa8
 8004bdc:	0802d04c 	.word	0x0802d04c

08004be0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004be0:	b590      	push	{r4, r7, lr}
 8004be2:	b08f      	sub	sp, #60	; 0x3c
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3320      	adds	r3, #32
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4798      	blx	r3
 8004c00:	4603      	mov	r3, r0
 8004c02:	f5b3 5f02 	cmp.w	r3, #8320	; 0x2080
 8004c06:	d205      	bcs.n	8004c14 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004c08:	4b7f      	ldr	r3, [pc, #508]	; (8004e08 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004c0a:	4a80      	ldr	r2, [pc, #512]	; (8004e0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004c0c:	21a3      	movs	r1, #163	; 0xa3
 8004c0e:	4880      	ldr	r0, [pc, #512]	; (8004e10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004c10:	f026 fe2a 	bl	802b868 <__assert_func>
 8004c14:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3320      	adds	r3, #32
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4610      	mov	r0, r2
 8004c26:	4798      	blx	r3
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b0f      	cmp	r3, #15
 8004c2c:	d805      	bhi.n	8004c3a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004c2e:	4b79      	ldr	r3, [pc, #484]	; (8004e14 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004c30:	4a76      	ldr	r2, [pc, #472]	; (8004e0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004c32:	21a4      	movs	r1, #164	; 0xa4
 8004c34:	4876      	ldr	r0, [pc, #472]	; (8004e10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004c36:	f026 fe17 	bl	802b868 <__assert_func>
 8004c3a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3320      	adds	r3, #32
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4798      	blx	r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b53      	cmp	r3, #83	; 0x53
 8004c52:	d805      	bhi.n	8004c60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004c54:	4b70      	ldr	r3, [pc, #448]	; (8004e18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8004c56:	4a6d      	ldr	r2, [pc, #436]	; (8004e0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004c58:	21a5      	movs	r1, #165	; 0xa5
 8004c5a:	486d      	ldr	r0, [pc, #436]	; (8004e10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004c5c:	f026 fe04 	bl	802b868 <__assert_func>
 8004c60:	bf00      	nop
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004c6e:	f019 fe21 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 8004c72:	4603      	mov	r3, r0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f019 fe6b 	bl	801e950 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4610      	mov	r0, r2
 8004c92:	4798      	blx	r3
    if (*currentTrans)
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4798      	blx	r3
    if (*currentScreen)
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3314      	adds	r3, #20
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	4798      	blx	r3
    if (*currentPresenter)
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4798      	blx	r3
    if (*currentScreen)
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d007      	beq.n	8004cf8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4798      	blx	r3
    if (*currentPresenter)
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4610      	mov	r0, r2
 8004d10:	4798      	blx	r3
}
 8004d12:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f9e3 	bl	80050e6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 8004d20:	4603      	mov	r3, r0
 8004d22:	4619      	mov	r1, r3
 8004d24:	2054      	movs	r0, #84	; 0x54
 8004d26:	f7ff fa1d 	bl	8004164 <_ZnwjPv>
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	2114      	movs	r1, #20
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f000 fa30 	bl	8005194 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 8004d34:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 f99e 	bl	800507e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8004d42:	4603      	mov	r3, r0
 8004d44:	4619      	mov	r1, r3
 8004d46:	f44f 5002 	mov.w	r0, #8320	; 0x2080
 8004d4a:	f7ff fa0b 	bl	8004164 <_ZnwjPv>
 8004d4e:	4604      	mov	r4, r0
 8004d50:	4620      	mov	r0, r4
 8004d52:	f003 fcfd 	bl	8008750 <_ZN11Screen1ViewC1Ev>
 8004d56:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 f9a0 	bl	80050a4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004d64:	4603      	mov	r3, r0
 8004d66:	4619      	mov	r1, r3
 8004d68:	2010      	movs	r0, #16
 8004d6a:	f7ff f9fb 	bl	8004164 <_ZnwjPv>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d72:	4620      	mov	r0, r4
 8004d74:	f003 fc7e 	bl	8008674 <_ZN16Screen1PresenterC1ER11Screen1View>
 8004d78:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d7e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d84:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d8a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	3304      	adds	r3, #4
 8004d96:	e000      	b.n	8004d9a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004d9e:	f7ff fc09 	bl	80045b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	3304      	adds	r3, #4
 8004da6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fc41 	bl	8004630 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 f989 	bl	80050ca <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69f8      	ldr	r0, [r7, #28]
 8004dce:	4798      	blx	r3
    newPresenter->activate();
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69b8      	ldr	r0, [r7, #24]
 8004dd8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004dda:	6979      	ldr	r1, [r7, #20]
 8004ddc:	69f8      	ldr	r0, [r7, #28]
 8004dde:	f01b fa47 	bl	8020270 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3310      	adds	r3, #16
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6978      	ldr	r0, [r7, #20]
 8004dec:	4798      	blx	r3
    newTransition->invalidate();
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3314      	adds	r3, #20
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6978      	ldr	r0, [r7, #20]
 8004df8:	4798      	blx	r3
}
 8004dfa:	bf00      	nop
    return newPresenter;
 8004dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	373c      	adds	r7, #60	; 0x3c
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd90      	pop	{r4, r7, pc}
 8004e06:	bf00      	nop
 8004e08:	0802cdcc 	.word	0x0802cdcc
 8004e0c:	0802d0f0 	.word	0x0802d0f0
 8004e10:	0802cf60 	.word	0x0802cf60
 8004e14:	0802cfa8 	.word	0x0802cfa8
 8004e18:	0802d04c 	.word	0x0802d04c

08004e1c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b08f      	sub	sp, #60	; 0x3c
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3320      	adds	r3, #32
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4798      	blx	r3
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f5b3 7f26 	cmp.w	r3, #664	; 0x298
 8004e42:	d205      	bcs.n	8004e50 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004e44:	4b7f      	ldr	r3, [pc, #508]	; (8005044 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004e46:	4a80      	ldr	r2, [pc, #512]	; (8005048 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004e48:	21a3      	movs	r1, #163	; 0xa3
 8004e4a:	4880      	ldr	r0, [pc, #512]	; (800504c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004e4c:	f026 fd0c 	bl	802b868 <__assert_func>
 8004e50:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3320      	adds	r3, #32
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4610      	mov	r0, r2
 8004e62:	4798      	blx	r3
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b0f      	cmp	r3, #15
 8004e68:	d805      	bhi.n	8004e76 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004e6a:	4b79      	ldr	r3, [pc, #484]	; (8005050 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004e6c:	4a76      	ldr	r2, [pc, #472]	; (8005048 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004e6e:	21a4      	movs	r1, #164	; 0xa4
 8004e70:	4876      	ldr	r0, [pc, #472]	; (800504c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004e72:	f026 fcf9 	bl	802b868 <__assert_func>
 8004e76:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3320      	adds	r3, #32
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4610      	mov	r0, r2
 8004e88:	4798      	blx	r3
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b53      	cmp	r3, #83	; 0x53
 8004e8e:	d805      	bhi.n	8004e9c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004e90:	4b70      	ldr	r3, [pc, #448]	; (8005054 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8004e92:	4a6d      	ldr	r2, [pc, #436]	; (8005048 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004e94:	21a5      	movs	r1, #165	; 0xa5
 8004e96:	486d      	ldr	r0, [pc, #436]	; (800504c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004e98:	f026 fce6 	bl	802b868 <__assert_func>
 8004e9c:	bf00      	nop
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004eaa:	f019 fd03 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f019 fd4d 	bl	801e950 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4798      	blx	r3
    if (*currentTrans)
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	4798      	blx	r3
    if (*currentScreen)
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3314      	adds	r3, #20
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4610      	mov	r0, r2
 8004f00:	4798      	blx	r3
    if (*currentPresenter)
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3304      	adds	r3, #4
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4798      	blx	r3
    if (*currentScreen)
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d007      	beq.n	8004f34 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4610      	mov	r0, r2
 8004f32:	4798      	blx	r3
    if (*currentPresenter)
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3308      	adds	r3, #8
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4798      	blx	r3
}
 8004f4e:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	2100      	movs	r1, #0
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f97e 	bl	8005258 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4619      	mov	r1, r3
 8004f60:	2054      	movs	r0, #84	; 0x54
 8004f62:	f7ff f8ff 	bl	8004164 <_ZnwjPv>
 8004f66:	4604      	mov	r4, r0
 8004f68:	2114      	movs	r1, #20
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f000 f9aa 	bl	80052c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 8004f70:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fa07 	bl	800538c <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4619      	mov	r1, r3
 8004f82:	f44f 7026 	mov.w	r0, #664	; 0x298
 8004f86:	f7ff f8ed 	bl	8004164 <_ZnwjPv>
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f003 fca7 	bl	80088e0 <_ZN11Screen2ViewC1Ev>
 8004f92:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fa09 	bl	80053b2 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	2010      	movs	r0, #16
 8004fa6:	f7ff f8dd 	bl	8004164 <_ZnwjPv>
 8004faa:	4604      	mov	r4, r0
 8004fac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f003 fc3e 	bl	8008830 <_ZN16Screen2PresenterC1ER11Screen2View>
 8004fb4:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fba:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	e000      	b.n	8004fd6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004fda:	f7ff faeb 	bl	80045b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff fb23 	bl	8004630 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f9f2 	bl	80053d8 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	61fb      	str	r3, [r7, #28]
 8004ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69f8      	ldr	r0, [r7, #28]
 800500a:	4798      	blx	r3
    newPresenter->activate();
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69b8      	ldr	r0, [r7, #24]
 8005014:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8005016:	6979      	ldr	r1, [r7, #20]
 8005018:	69f8      	ldr	r0, [r7, #28]
 800501a:	f01b f929 	bl	8020270 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3310      	adds	r3, #16
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6978      	ldr	r0, [r7, #20]
 8005028:	4798      	blx	r3
    newTransition->invalidate();
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3314      	adds	r3, #20
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6978      	ldr	r0, [r7, #20]
 8005034:	4798      	blx	r3
}
 8005036:	bf00      	nop
    return newPresenter;
 8005038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800503a:	4618      	mov	r0, r3
 800503c:	373c      	adds	r7, #60	; 0x3c
 800503e:	46bd      	mov	sp, r7
 8005040:	bd90      	pop	{r4, r7, pc}
 8005042:	bf00      	nop
 8005044:	0802cdcc 	.word	0x0802cdcc
 8005048:	0802d208 	.word	0x0802d208
 800504c:	0802cf60 	.word	0x0802cf60
 8005050:	0802cfa8 	.word	0x0802cfa8
 8005054:	0802d04c 	.word	0x0802d04c

08005058 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3324      	adds	r3, #36	; 0x24
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	887a      	ldrh	r2, [r7, #2]
 800506e:	4611      	mov	r1, r2
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4798      	blx	r3
 8005074:	4603      	mov	r3, r0
    }
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3324      	adds	r3, #36	; 0x24
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	887a      	ldrh	r2, [r7, #2]
 8005094:	4611      	mov	r1, r2
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	4798      	blx	r3
 800509a:	4603      	mov	r3, r0
    }
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3324      	adds	r3, #36	; 0x24
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	887a      	ldrh	r2, [r7, #2]
 80050ba:	4611      	mov	r1, r2
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	4798      	blx	r3
 80050c0:	4603      	mov	r3, r0
    }
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	460b      	mov	r3, r1
 80050f0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3324      	adds	r3, #36	; 0x24
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	887a      	ldrh	r2, [r7, #2]
 80050fc:	4611      	mov	r1, r2
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	4798      	blx	r3
 8005102:	4603      	mov	r3, r0
    }
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 * A widget that is able to make a snapshot of the area the SnapshotWidget covers into either a
 * Bitmap or into animation storage (if this available). Once the snapshot has been
 * taken using SnapshowWidget::makeSnapshot(), the SnapshotWidget will show the captured
 * snapshot when it is subsequently drawn.
 */
class SnapshotWidget : public Widget
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	4a05      	ldr	r2, [pc, #20]	; (800512c <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff fa95 	bl	800464c <_ZN8touchgfx6WidgetD1Ev>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	0802faec 	.word	0x0802faec

08005130 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff ffe7 	bl	800510c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800513e:	212c      	movs	r1, #44	; 0x2c
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f026 f9bc 	bl	802b4be <_ZdlPvj>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	4a05      	ldr	r2, [pc, #20]	; (8005170 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 f991 	bl	8005488 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	0802dda4 	.word	0x0802dda4

08005174 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff ffe7 	bl	8005150 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 8005182:	2110      	movs	r1, #16
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f026 f99a 	bl	802b4be <_ZdlPvj>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
    /**
     * Initializes a new instance of the SlideTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps (ticks) in the transition animation, default is 20.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b087      	sub	sp, #28
 8005198:	af02      	add	r7, sp, #8
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
          snapshot(),
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff f974 	bl	8004490 <_ZN8touchgfx10TransitionC1Ev>
 80051a8:	4a26      	ldr	r2, [pc, #152]	; (8005244 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb0>)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	330c      	adds	r3, #12
 80051b2:	4618      	mov	r0, r3
 80051b4:	f016 fde6 	bl	801bd84 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	639a      	str	r2, [r3, #56]	; 0x38
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80051c8:	4a1f      	ldr	r2, [pc, #124]	; (8005248 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb4>)
 80051ca:	f107 0308 	add.w	r3, r7, #8
 80051ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80051d6:	f107 0308 	add.w	r3, r7, #8
 80051da:	cb0c      	ldmia	r3, {r2, r3}
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	4620      	mov	r0, r4
 80051e0:	f000 f932 	bl	8005448 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	78fa      	ldrb	r2, [r7, #3]
 80051e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    {
        if (HAL::USE_ANIMATION_STORAGE)
 80051fc:	4b13      	ldr	r3, [pc, #76]	; (800524c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb8>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01a      	beq.n	800523a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xa6>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f103 000c 	add.w	r0, r3, #12
 800520a:	4b11      	ldr	r3, [pc, #68]	; (8005250 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xbc>)
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b21a      	sxth	r2, r3
 8005210:	4b10      	ldr	r3, [pc, #64]	; (8005254 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xc0>)
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b21b      	sxth	r3, r3
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	2200      	movs	r2, #0
 800521c:	2100      	movs	r1, #0
 800521e:	f7fe ffd8 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	330c      	adds	r3, #12
 8005226:	4618      	mov	r0, r3
 8005228:	f016 fd30 	bl	801bc8c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
                break;
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 800522c:	4b08      	ldr	r3, [pc, #32]	; (8005250 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xbc>)
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	b21a      	sxth	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 8005238:	bf00      	nop
                done = true;
                // Nothing to do here
                break;
            }
        }
    }
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	bd90      	pop	{r4, r7, pc}
 8005244:	0802dd78 	.word	0x0802dd78
 8005248:	0802d320 	.word	0x0802d320
 800524c:	2400c8bb 	.word	0x2400c8bb
 8005250:	2400c8b0 	.word	0x2400c8b0
 8005254:	2400c8b2 	.word	0x2400c8b2

08005258 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3324      	adds	r3, #36	; 0x24
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	887a      	ldrh	r2, [r7, #2]
 800526e:	4611      	mov	r1, r2
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4798      	blx	r3
 8005274:	4603      	mov	r3, r0
    }
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	4a05      	ldr	r2, [pc, #20]	; (80052a0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4618      	mov	r0, r3
 8005292:	f000 f8f9 	bl	8005488 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	0802dde8 	.word	0x0802dde8

080052a4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff ffe7 	bl	8005280 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80052b2:	2110      	movs	r1, #16
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f026 f902 	bl	802b4be <_ZdlPvj>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	70fb      	strb	r3, [r7, #3]
          calculatedValue(0)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff f8dc 	bl	8004490 <_ZN8touchgfx10TransitionC1Ev>
 80052d8:	4a27      	ldr	r2, [pc, #156]	; (8005378 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb4>)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	330c      	adds	r3, #12
 80052e2:	4618      	mov	r0, r3
 80052e4:	f016 fd4e 	bl	801bd84 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	639a      	str	r2, [r3, #56]	; 0x38
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80052f8:	4a20      	ldr	r2, [pc, #128]	; (800537c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb8>)
 80052fa:	f107 0308 	add.w	r3, r7, #8
 80052fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005302:	e883 0003 	stmia.w	r3, {r0, r1}
 8005306:	f107 0308 	add.w	r3, r7, #8
 800530a:	cb0c      	ldmia	r3, {r2, r3}
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	4620      	mov	r0, r4
 8005310:	f000 f8f4 	bl	80054fc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	78fa      	ldrb	r2, [r7, #3]
 8005318:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        if (HAL::USE_ANIMATION_STORAGE)
 800532c:	4b14      	ldr	r3, [pc, #80]	; (8005380 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xbc>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01c      	beq.n	800536e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xaa>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f103 000c 	add.w	r0, r3, #12
 800533a:	4b12      	ldr	r3, [pc, #72]	; (8005384 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b21a      	sxth	r2, r3
 8005340:	4b11      	ldr	r3, [pc, #68]	; (8005388 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc4>)
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b21b      	sxth	r3, r3
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	4613      	mov	r3, r2
 800534a:	2200      	movs	r2, #0
 800534c:	2100      	movs	r1, #0
 800534e:	f7fe ff40 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	330c      	adds	r3, #12
 8005356:	4618      	mov	r0, r3
 8005358:	f016 fc98 	bl	801bc8c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
                targetValue = -HAL::DISPLAY_WIDTH;
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xc0>)
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	425b      	negs	r3, r3
 8005362:	b29b      	uxth	r3, r3
 8005364:	b21a      	sxth	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
                break;
 800536c:	bf00      	nop
    }
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	bd90      	pop	{r4, r7, pc}
 8005378:	0802ddbc 	.word	0x0802ddbc
 800537c:	0802d328 	.word	0x0802d328
 8005380:	2400c8bb 	.word	0x2400c8bb
 8005384:	2400c8b0 	.word	0x2400c8b0
 8005388:	2400c8b2 	.word	0x2400c8b2

0800538c <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3324      	adds	r3, #36	; 0x24
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	887a      	ldrh	r2, [r7, #2]
 80053a2:	4611      	mov	r1, r2
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	4798      	blx	r3
 80053a8:	4603      	mov	r3, r0
    }
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	460b      	mov	r3, r1
 80053bc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3324      	adds	r3, #36	; 0x24
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	887a      	ldrh	r2, [r7, #2]
 80053c8:	4611      	mov	r1, r2
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	4798      	blx	r3
 80053ce:	4603      	mov	r3, r0
    }
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& presenter)
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
    /**
     * Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d00a      	beq.n	800541e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x2a>

        switch (templateDirection)
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3350      	adds	r3, #80	; 0x50
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	f9b2 1050 	ldrsh.w	r1, [r2, #80]	; 0x50
 8005416:	2200      	movs	r2, #0
 8005418:	6838      	ldr	r0, [r7, #0]
 800541a:	4798      	blx	r3
            break;
 800541c:	e000      	b.n	8005420 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 800541e:	bf00      	nop
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
            break;
        }
    }
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	4a04      	ldr	r2, [pc, #16]	; (8005444 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	0802de00 	.word	0x0802de00

08005448 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	4639      	mov	r1, r7
 8005454:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff ffe4 	bl	8005428 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8005460:	4a08      	ldr	r2, [pc, #32]	; (8005484 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	605a      	str	r2, [r3, #4]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	3308      	adds	r3, #8
 8005470:	463a      	mov	r2, r7
 8005472:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005476:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	0802dda4 	.word	0x0802dda4

08005488 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
    }
 8005490:	4a04      	ldr	r2, [pc, #16]	; (80054a4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	0802de00 	.word	0x0802de00

080054a8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
    }
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff ffe9 	bl	8005488 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 80054b6:	2104      	movs	r1, #4
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f026 f800 	bl	802b4be <_ZdlPvj>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
        if (&d == snapshotPtr)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d00a      	beq.n	80054f2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2a>
            d.moveRelative(calculatedValue, 0);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3350      	adds	r3, #80	; 0x50
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	f9b2 1050 	ldrsh.w	r1, [r2, #80]	; 0x50
 80054ea:	2200      	movs	r2, #0
 80054ec:	6838      	ldr	r0, [r7, #0]
 80054ee:	4798      	blx	r3
            break;
 80054f0:	e000      	b.n	80054f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x2c>
            return;
 80054f2:	bf00      	nop
    }
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	4639      	mov	r1, r7
 8005508:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff ff8a 	bl	8005428 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8005514:	4a08      	ldr	r2, [pc, #32]	; (8005538 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	605a      	str	r2, [r3, #4]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3308      	adds	r3, #8
 8005524:	463a      	mov	r2, r7
 8005526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800552a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	0802dde8 	.word	0x0802dde8

0800553c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
class SlideTransition : public Transition
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	4a0a      	ldr	r2, [pc, #40]	; (8005570 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x34>)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	333c      	adds	r3, #60	; 0x3c
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fdfe 	bl	8005150 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	330c      	adds	r3, #12
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff fdd7 	bl	800510c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4618      	mov	r0, r3
 8005562:	f7fe ffab 	bl	80044bc <_ZN8touchgfx10TransitionD1Ev>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4618      	mov	r0, r3
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	0802dd78 	.word	0x0802dd78

08005574 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff ffdd 	bl	800553c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 8005582:	2154      	movs	r1, #84	; 0x54
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f025 ff9a 	bl	802b4be <_ZdlPvj>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	333c      	adds	r3, #60	; 0x3c
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fe6a 	bl	8005280 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	330c      	adds	r3, #12
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff fdab 	bl	800510c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fe ff7f 	bl	80044bc <_ZN8touchgfx10TransitionD1Ev>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	0802ddbc 	.word	0x0802ddbc

080055cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff ffdd 	bl	8005594 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 80055da:	2154      	movs	r1, #84	; 0x54
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f025 ff6e 	bl	802b4be <_ZdlPvj>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <_ZN8touchgfx12NoTransitionD1Ev>:
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	4a05      	ldr	r2, [pc, #20]	; (800560c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe ff5d 	bl	80044bc <_ZN8touchgfx10TransitionD1Ev>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	0802de7c 	.word	0x0802de7c

08005610 <_ZN8touchgfx12NoTransitionD0Ev>:
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff ffe7 	bl	80055ec <_ZN8touchgfx12NoTransitionD1Ev>
 800561e:	210c      	movs	r1, #12
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f025 ff4c 	bl	802b4be <_ZdlPvj>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8005638:	4b40      	ldr	r3, [pc, #256]	; (800573c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x10c>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	f083 0301 	eor.w	r3, r3, #1
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	721a      	strb	r2, [r3, #8]
            return;
 800564c:	e073      	b.n	8005736 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4618      	mov	r0, r3
 8005652:	f7fe ff53 	bl	80044fc <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800565c:	3301      	adds	r3, #1
 800565e:	b2da      	uxtb	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005672:	429a      	cmp	r2, r3
 8005674:	d82f      	bhi.n	80056d6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800567c:	b298      	uxth	r0, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800568a:	b29b      	uxth	r3, r3
 800568c:	2100      	movs	r1, #0
 800568e:	f01a fdf5 	bl	802027c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01b      	beq.n	80056e6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 80056bc:	2a00      	cmp	r2, #0
 80056be:	dd01      	ble.n	80056c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>
 80056c0:	2201      	movs	r2, #1
 80056c2:	e001      	b.n	80056c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>
 80056c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056c8:	4413      	add	r3, r2
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	b21a      	sxth	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80056d4:	e007      	b.n	80056e6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
            done = true;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 80056e4:	e027      	b.n	8005736 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getX();
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	330c      	adds	r3, #12
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe fd92 	bl	8004214 <_ZNK8touchgfx8Drawable4getXEv>
 80056f0:	4603      	mov	r3, r0
 80056f2:	4619      	mov	r1, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	b28b      	uxth	r3, r1
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	b29b      	uxth	r3, r3
 8005702:	b21a      	sxth	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(calculatedValue, 0);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f103 000c 	add.w	r0, r3, #12
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8005716:	2200      	movs	r2, #0
 8005718:	4619      	mov	r1, r3
 800571a:	f01a f913 	bl	801f944 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800571e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6858      	ldr	r0, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3378      	adds	r3, #120	; 0x78
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	323c      	adds	r2, #60	; 0x3c
 8005732:	4611      	mov	r1, r2
 8005734:	4798      	blx	r3
    }
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	2400c8bb 	.word	0x2400c8bb

08005740 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8005748:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00e      	beq.n	800576e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6858      	ldr	r0, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3360      	adds	r3, #96	; 0x60
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	320c      	adds	r2, #12
 800576a:	4611      	mov	r1, r2
 800576c:	4798      	blx	r3
    }
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	2400c8bb 	.word	0x2400c8bb

0800577c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8005784:	4b1a      	ldr	r3, [pc, #104]	; (80057f0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x74>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d02d      	beq.n	80057e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x6c>
            Transition::init();
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4618      	mov	r0, r3
 8005790:	f7fe fec8 	bl	8004524 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8005794:	4a17      	ldr	r2, [pc, #92]	; (80057f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x78>)
 8005796:	f107 0318 	add.w	r3, r7, #24
 800579a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800579e:	e883 0003 	stmia.w	r3, {r0, r1}
 80057a2:	f107 0008 	add.w	r0, r7, #8
 80057a6:	f107 0318 	add.w	r3, r7, #24
 80057aa:	cb0c      	ldmia	r3, {r2, r3}
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	f7ff fe4b 	bl	8005448 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3378      	adds	r3, #120	; 0x78
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f107 0108 	add.w	r1, r7, #8
 80057c4:	4610      	mov	r0, r2
 80057c6:	4798      	blx	r3
            screenContainer->add(snapshot);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6858      	ldr	r0, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	335c      	adds	r3, #92	; 0x5c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	320c      	adds	r2, #12
 80057da:	4611      	mov	r1, r2
 80057dc:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80057de:	f107 0308 	add.w	r3, r7, #8
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fcb4 	bl	8005150 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 80057e8:	bf00      	nop
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	2400c8bb 	.word	0x2400c8bb
 80057f4:	0802d330 	.word	0x0802d330

080057f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3350      	adds	r3, #80	; 0x50
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a06      	ldr	r2, [pc, #24]	; (8005824 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x2c>)
 800580c:	8812      	ldrh	r2, [r2, #0]
 800580e:	4252      	negs	r2, r2
 8005810:	b292      	uxth	r2, r2
 8005812:	b211      	sxth	r1, r2
 8005814:	2200      	movs	r2, #0
 8005816:	6838      	ldr	r0, [r7, #0]
 8005818:	4798      	blx	r3
            break;
 800581a:	bf00      	nop
    }
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	2400c8b0 	.word	0x2400c8b0

08005828 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	68d2      	ldr	r2, [r2, #12]
 800583a:	1052      	asrs	r2, r2, #1
 800583c:	1898      	adds	r0, r3, r2
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	e00a      	b.n	8005866 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	68d2      	ldr	r2, [r2, #12]
 8005858:	1052      	asrs	r2, r2, #1
 800585a:	4413      	add	r3, r2
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6892      	ldr	r2, [r2, #8]
 8005862:	4413      	add	r3, r2
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	4798      	blx	r3
    }
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d010      	beq.n	80058a4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d107      	bne.n	800589a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800589a:	2300      	movs	r3, #0
 800589c:	2b01      	cmp	r3, #1
 800589e:	d001      	beq.n	80058a4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 80058a4:	2300      	movs	r3, #0
    }
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 80058bc:	4b40      	ldr	r3, [pc, #256]	; (80059c0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x10c>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f083 0301 	eor.w	r3, r3, #1
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	721a      	strb	r2, [r3, #8]
            return;
 80058d0:	e073      	b.n	80059ba <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
        Transition::handleTickEvent();
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fe fe11 	bl	80044fc <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80058e0:	3301      	adds	r3, #1
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (animationCounter <= animationSteps)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d82f      	bhi.n	800595a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005900:	b298      	uxth	r0, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800590e:	b29b      	uxth	r3, r3
 8005910:	2100      	movs	r1, #0
 8005912:	f01a fcb3 	bl	802027c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            if (calculatedValue % 2)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8005926:	b29b      	uxth	r3, r3
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d01b      	beq.n	800596a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8005938:	b29b      	uxth	r3, r3
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	f9b2 2050 	ldrsh.w	r2, [r2, #80]	; 0x50
 8005940:	2a00      	cmp	r2, #0
 8005942:	dd01      	ble.n	8005948 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8005944:	2201      	movs	r2, #1
 8005946:	e001      	b.n	800594c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8005948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800594c:	4413      	add	r3, r2
 800594e:	b29b      	uxth	r3, r3
 8005950:	b21a      	sxth	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005958:	e007      	b.n	800596a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            return;
 8005968:	e027      	b.n	80059ba <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x106>
            calculatedValue -= snapshot.getX();
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	330c      	adds	r3, #12
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe fc50 	bl	8004214 <_ZNK8touchgfx8Drawable4getXEv>
 8005974:	4603      	mov	r3, r0
 8005976:	4619      	mov	r1, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800597e:	b29a      	uxth	r2, r3
 8005980:	b28b      	uxth	r3, r1
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	b29b      	uxth	r3, r3
 8005986:	b21a      	sxth	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            snapshot.moveRelative(calculatedValue, 0);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f103 000c 	add.w	r0, r3, #12
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800599a:	2200      	movs	r2, #0
 800599c:	4619      	mov	r1, r3
 800599e:	f019 ffd1 	bl	801f944 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 80059a2:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6858      	ldr	r0, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3378      	adds	r3, #120	; 0x78
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	323c      	adds	r2, #60	; 0x3c
 80059b6:	4611      	mov	r1, r2
 80059b8:	4798      	blx	r3
    }
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	2400c8bb 	.word	0x2400c8bb

080059c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 80059cc:	4b0b      	ldr	r3, [pc, #44]	; (80059fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00e      	beq.n	80059f2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6858      	ldr	r0, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3360      	adds	r3, #96	; 0x60
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	320c      	adds	r2, #12
 80059ee:	4611      	mov	r1, r2
 80059f0:	4798      	blx	r3
    }
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	2400c8bb 	.word	0x2400c8bb

08005a00 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8005a08:	4b1a      	ldr	r3, [pc, #104]	; (8005a74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d02d      	beq.n	8005a6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe fd86 	bl	8004524 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8005a18:	4a17      	ldr	r2, [pc, #92]	; (8005a78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 8005a1a:	f107 0318 	add.w	r3, r7, #24
 8005a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a22:	e883 0003 	stmia.w	r3, {r0, r1}
 8005a26:	f107 0008 	add.w	r0, r7, #8
 8005a2a:	f107 0318 	add.w	r3, r7, #24
 8005a2e:	cb0c      	ldmia	r3, {r2, r3}
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	f7ff fd63 	bl	80054fc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3378      	adds	r3, #120	; 0x78
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f107 0108 	add.w	r1, r7, #8
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4798      	blx	r3
            screenContainer->add(snapshot);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6858      	ldr	r0, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	335c      	adds	r3, #92	; 0x5c
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	320c      	adds	r2, #12
 8005a5e:	4611      	mov	r1, r2
 8005a60:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8005a62:	f107 0308 	add.w	r3, r7, #8
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff fc0a 	bl	8005280 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8005a6c:	bf00      	nop
 8005a6e:	3720      	adds	r7, #32
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	2400c8bb 	.word	0x2400c8bb
 8005a78:	0802d338 	.word	0x0802d338

08005a7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3350      	adds	r3, #80	; 0x50
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a05      	ldr	r2, [pc, #20]	; (8005aa4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x28>)
 8005a90:	8812      	ldrh	r2, [r2, #0]
 8005a92:	b211      	sxth	r1, r2
 8005a94:	2200      	movs	r2, #0
 8005a96:	6838      	ldr	r0, [r7, #0]
 8005a98:	4798      	blx	r3
            break;
 8005a9a:	bf00      	nop
    }
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	2400c8b0 	.word	0x2400c8b0

08005aa8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	68d2      	ldr	r2, [r2, #12]
 8005aba:	1052      	asrs	r2, r2, #1
 8005abc:	1898      	adds	r0, r3, r2
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	e00a      	b.n	8005ae6 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	68d2      	ldr	r2, [r2, #12]
 8005ad8:	1052      	asrs	r2, r2, #1
 8005ada:	4413      	add	r3, r2
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6892      	ldr	r2, [r2, #8]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	4798      	blx	r3
    }
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d010      	beq.n	8005b24 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d107      	bne.n	8005b1a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d001      	beq.n	8005b24 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8005b24:	2300      	movs	r3, #0
    }
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
    }
 8005b3e:	4618      	mov	r0, r3
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08c      	sub	sp, #48	; 0x30
 8005b68:	af08      	add	r7, sp, #32
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	4611      	mov	r1, r2
 8005b70:	461a      	mov	r2, r3
 8005b72:	460b      	mov	r3, r1
 8005b74:	80fb      	strh	r3, [r7, #6]
 8005b76:	4613      	mov	r3, r2
 8005b78:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	88b9      	ldrh	r1, [r7, #4]
 8005b7e:	88fa      	ldrh	r2, [r7, #6]
 8005b80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b82:	9306      	str	r3, [sp, #24]
 8005b84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005b86:	9305      	str	r3, [sp, #20]
 8005b88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b8c:	9304      	str	r3, [sp, #16]
 8005b8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b92:	9303      	str	r3, [sp, #12]
 8005b94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b98:	9302      	str	r3, [sp, #8]
 8005b9a:	7f3b      	ldrb	r3, [r7, #28]
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	7e3b      	ldrb	r3, [r7, #24]
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	f019 fef9 	bl	801f99c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8005baa:	4a0a      	ldr	r2, [pc, #40]	; (8005bd4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb4:	619a      	str	r2, [r3, #24]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bba:	61da      	str	r2, [r3, #28]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bc0:	621a      	str	r2, [r3, #32]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	0802dec4 	.word	0x0802dec4

08005bd8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	889b      	ldrh	r3, [r3, #4]
 8005bec:	0adb      	lsrs	r3, r3, #11
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4413      	add	r3, r2
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b089      	sub	sp, #36	; 0x24
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	460b      	mov	r3, r1
 8005c14:	607a      	str	r2, [r7, #4]
 8005c16:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	7b1b      	ldrb	r3, [r3, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e030      	b.n	8005c8c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	69da      	ldr	r2, [r3, #28]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	7b5b      	ldrb	r3, [r3, #13]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	b21b      	sxth	r3, r3
 8005c3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c3e:	b219      	sxth	r1, r3
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	7adb      	ldrb	r3, [r3, #11]
 8005c44:	b21b      	sxth	r3, r3
 8005c46:	430b      	orrs	r3, r1
 8005c48:	b21b      	sxth	r3, r3
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	7b1b      	ldrb	r3, [r3, #12]
 8005c56:	837b      	strh	r3, [r7, #26]
 8005c58:	8b7b      	ldrh	r3, [r7, #26]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d015      	beq.n	8005c8a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	897a      	ldrh	r2, [r7, #10]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d103      	bne.n	8005c70 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005c6e:	e00d      	b.n	8005c8c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	897a      	ldrh	r2, [r7, #10]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d306      	bcc.n	8005c88 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005c7a:	8b7b      	ldrh	r3, [r7, #26]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	837b      	strh	r3, [r7, #26]
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	3304      	adds	r3, #4
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	e7e7      	b.n	8005c58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8005c88:	bf00      	nop
        }
    }
    return 0;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3724      	adds	r7, #36	; 0x24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
        : color(col)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	601a      	str	r2, [r3, #0]
    }
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	887a      	ldrh	r2, [r7, #2]
 8005cc6:	801a      	strh	r2, [r3, #0]
    {
    }
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable()
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
          visible(true)
 8005ce0:	4a14      	ldr	r2, [pc, #80]	; (8005d34 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fb fdca 	bl	8001884 <_ZN8touchgfx4RectC1Ev>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	330c      	adds	r3, #12
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fb fdc5 	bl	8001884 <_ZN8touchgfx4RectC1Ev>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	615a      	str	r2, [r3, #20]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	619a      	str	r2, [r3, #24]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	61da      	str	r2, [r3, #28]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	841a      	strh	r2, [r3, #32]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	845a      	strh	r2, [r3, #34]	; 0x22
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	08030644 	.word	0x08030644

08005d38 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    LCD* getAuxiliaryLCD()
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
        return auxiliaryLCD;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
    {
 8005d70:	4a06      	ldr	r2, [pc, #24]	; (8005d8c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 fa70 	bl	8007260 <_ZN8touchgfx9ContainerD1Ev>
    }
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	0803073c 	.word	0x0803073c

08005d90 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
    }
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff ffe5 	bl	8005d68 <_ZN8touchgfx6ScreenD1Ev>
 8005d9e:	213c      	movs	r1, #60	; 0x3c
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f025 fb8c 	bl	802b4be <_ZdlPvj>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
    {
    }
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
    {
    }
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
    {
    }
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
    {
    }
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3304      	adds	r3, #4
 8005e26:	6839      	ldr	r1, [r7, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f012 f8e9 	bl	8018000 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <_ZN8touchgfx6WidgetC1Ev>:
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff ff48 	bl	8005cd8 <_ZN8touchgfx8DrawableC1Ev>
 8005e48:	4a03      	ldr	r2, [pc, #12]	; (8005e58 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4618      	mov	r0, r3
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	0802de18 	.word	0x0802de18

08005e5c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4618      	mov	r0, r3
 8005e68:	2326      	movs	r3, #38	; 0x26
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	f025 fd87 	bl	802b980 <memset>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff ffdf 	bl	8005e38 <_ZN8touchgfx6WidgetC1Ev>
 8005e7a:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	22ff      	movs	r2, #255	; 0xff
 8005e84:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3328      	adds	r3, #40	; 0x28
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff ff02 	bl	8005c98 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	0802fcc0 	.word	0x0802fcc0

08005ea4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	2326      	movs	r3, #38	; 0x26
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	f025 fd54 	bl	802b980 <memset>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff ffac 	bl	8005e38 <_ZN8touchgfx6WidgetC1Ev>
 8005ee0:	4a09      	ldr	r2, [pc, #36]	; (8005f08 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	8812      	ldrh	r2, [r2, #0]
 8005eec:	84da      	strh	r2, [r3, #38]	; 0x26
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	22ff      	movs	r2, #255	; 0xff
 8005ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f016 fe75 	bl	801cbe8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	080300b4 	.word	0x080300b4

08005f0c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	4a05      	ldr	r2, [pc, #20]	; (8005f2c <_ZN8touchgfx5ImageD1Ev+0x20>)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fe fb95 	bl	800464c <_ZN8touchgfx6WidgetD1Ev>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4618      	mov	r0, r3
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	080300b4 	.word	0x080300b4

08005f30 <_ZN8touchgfx5ImageD0Ev>:
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff ffe7 	bl	8005f0c <_ZN8touchgfx5ImageD1Ev>
 8005f3e:	212c      	movs	r1, #44	; 0x2c
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f025 fabc 	bl	802b4be <_ZdlPvj>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>:
     *
     * @param  bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    TiledImage(const Bitmap& bmp = Bitmap())
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
        : Image(bmp), xOffset(0), yOffset(0)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff ffae 	bl	8005ec0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005f64:	4a06      	ldr	r2, [pc, #24]	; (8005f80 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE+0x30>)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	859a      	strh	r2, [r3, #44]	; 0x2c
    {
    }
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	0802fd24 	.word	0x0802fd24

08005f84 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005f90:	4a06      	ldr	r2, [pc, #24]	; (8005fac <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	887a      	ldrh	r2, [r7, #2]
 8005f9a:	809a      	strh	r2, [r3, #4]
    }
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	0802dd68 	.word	0x0802dd68

08005fb0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	4a05      	ldr	r2, [pc, #20]	; (8005fec <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe fb35 	bl	800464c <_ZN8touchgfx6WidgetD1Ev>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	0802f970 	.word	0x0802f970

08005ff0 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff ffe7 	bl	8005fcc <_ZN8touchgfx14AbstractButtonD1Ev>
 8005ffe:	2130      	movs	r1, #48	; 0x30
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f025 fa5c 	bl	802b4be <_ZdlPvj>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	889a      	ldrh	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	809a      	strh	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3334      	adds	r3, #52	; 0x34
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff ffe5 	bl	8006010 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f820 	bl	800608c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b08b      	sub	sp, #44	; 0x2c
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3334      	adds	r3, #52	; 0x34
 8006098:	61fb      	str	r3, [r7, #28]
        return typedTextId != TYPED_TEXT_INVALID;
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	889b      	ldrh	r3, [r3, #4]
 800609e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060a2:	4293      	cmp	r3, r2
 80060a4:	bf14      	ite	ne
 80060a6:	2301      	movne	r3, #1
 80060a8:	2300      	moveq	r3, #0
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d072      	beq.n	8006196 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x10a>
        {
            const Font* f = typedText.getFont();
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3334      	adds	r3, #52	; 0x34
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	60fb      	str	r3, [r7, #12]

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80060ba:	4b3b      	ldr	r3, [pc, #236]	; (80061a8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d105      	bne.n	80060ce <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x42>
 80060c2:	4b3a      	ldr	r3, [pc, #232]	; (80061ac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 80060c4:	4a3a      	ldr	r2, [pc, #232]	; (80061b0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 80060c6:	21ae      	movs	r1, #174	; 0xae
 80060c8:	483a      	ldr	r0, [pc, #232]	; (80061b4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 80060ca:	f025 fbcd 	bl	802b868 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	889a      	ldrh	r2, [r3, #4]
 80060d2:	4b39      	ldr	r3, [pc, #228]	; (80061b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d305      	bcc.n	80060e6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5a>
 80060da:	4b38      	ldr	r3, [pc, #224]	; (80061bc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 80060dc:	4a34      	ldr	r2, [pc, #208]	; (80061b0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 80060de:	21af      	movs	r1, #175	; 0xaf
 80060e0:	4834      	ldr	r0, [pc, #208]	; (80061b4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 80060e2:	f025 fbc1 	bl	802b868 <__assert_func>
    }
 80060e6:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 80060e8:	4b35      	ldr	r3, [pc, #212]	; (80061c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	4b2e      	ldr	r3, [pc, #184]	; (80061a8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 80060ee:	6819      	ldr	r1, [r3, #0]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	889b      	ldrh	r3, [r3, #4]
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	440b      	add	r3, r1
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3334      	adds	r3, #52	; 0x34
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	617b      	str	r3, [r7, #20]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800610c:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d105      	bne.n	8006120 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>
 8006114:	4b25      	ldr	r3, [pc, #148]	; (80061ac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x120>)
 8006116:	4a26      	ldr	r2, [pc, #152]	; (80061b0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8006118:	21ae      	movs	r1, #174	; 0xae
 800611a:	4826      	ldr	r0, [pc, #152]	; (80061b4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 800611c:	f025 fba4 	bl	802b868 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	889a      	ldrh	r2, [r3, #4]
 8006124:	4b24      	ldr	r3, [pc, #144]	; (80061b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x12c>)
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d305      	bcc.n	8006138 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xac>
 800612c:	4b23      	ldr	r3, [pc, #140]	; (80061bc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 800612e:	4a20      	ldr	r2, [pc, #128]	; (80061b0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x124>)
 8006130:	21af      	movs	r1, #175	; 0xaf
 8006132:	4820      	ldr	r0, [pc, #128]	; (80061b4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x128>)
 8006134:	f025 fb98 	bl	802b868 <__assert_func>
    }
 8006138:	bf00      	nop
        return texts->getText(typedTextId);
 800613a:	4b22      	ldr	r3, [pc, #136]	; (80061c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	889b      	ldrh	r3, [r3, #4]
 8006142:	4619      	mov	r1, r3
 8006144:	4610      	mov	r0, r2
 8006146:	f002 f93d 	bl	80083c4 <_ZNK8touchgfx5Texts7getTextEt>
 800614a:	4603      	mov	r3, r0
 800614c:	bf00      	nop
 800614e:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3328      	adds	r3, #40	; 0x28
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6a39      	ldr	r1, [r7, #32]
 800615a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800615c:	4798      	blx	r3
 800615e:	4603      	mov	r3, r0
 8006160:	b2dc      	uxtb	r4, r3
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3340      	adds	r3, #64	; 0x40
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a39      	ldr	r1, [r7, #32]
 800616c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800616e:	4798      	blx	r3
 8006170:	4603      	mov	r3, r0
 8006172:	b2db      	uxtb	r3, r3
 8006174:	fb14 f303 	smulbb	r3, r4, r3
 8006178:	b2dc      	uxtb	r4, r3
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3324      	adds	r3, #36	; 0x24
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6a39      	ldr	r1, [r7, #32]
 8006184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006186:	4798      	blx	r3
 8006188:	4603      	mov	r3, r0
 800618a:	4423      	add	r3, r4
 800618c:	b2da      	uxtb	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8006194:	e003      	b.n	800619e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x112>
            textHeightIncludingSpacing = 0;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 800619e:	bf00      	nop
 80061a0:	372c      	adds	r7, #44	; 0x2c
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd90      	pop	{r4, r7, pc}
 80061a6:	bf00      	nop
 80061a8:	2400c92c 	.word	0x2400c92c
 80061ac:	0802d340 	.word	0x0802d340
 80061b0:	0802d384 	.word	0x0802d384
 80061b4:	0802d3b4 	.word	0x0802d3b4
 80061b8:	2400c930 	.word	0x2400c930
 80061bc:	0802d3fc 	.word	0x0802d3fc
 80061c0:	2400c934 	.word	0x2400c934
 80061c4:	2400c938 	.word	0x2400c938

080061c8 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 80061d0:	4a09      	ldr	r2, [pc, #36]	; (80061f8 <_ZN8touchgfx15AbstractPainterC1Ev+0x30>)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	809a      	strh	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	80da      	strh	r2, [r3, #6]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	22ff      	movs	r2, #255	; 0xff
 80061e6:	721a      	strb	r2, [r3, #8]
    {
    }
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4618      	mov	r0, r3
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	0802e148 	.word	0x0802e148

080061fc <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
    {
 8006204:	4a04      	ldr	r2, [pc, #16]	; (8006218 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	601a      	str	r2, [r3, #0]
    }
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	0802e148 	.word	0x0802e148

0800621c <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
    }
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff ffe9 	bl	80061fc <_ZN8touchgfx15AbstractPainterD1Ev>
 800622a:	210c      	movs	r1, #12
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f025 f946 	bl	802b4be <_ZdlPvj>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     * @see setPainter
     */
    virtual AbstractPainter& getPainter() const;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	78fa      	ldrb	r2, [r7, #3]
 800624c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
	...

08006278 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff ffa0 	bl	80061c8 <_ZN8touchgfx15AbstractPainterC1Ev>
 8006288:	4a29      	ldr	r2, [pc, #164]	; (8006330 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xb8>)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	60da      	str	r2, [r3, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	611a      	str	r2, [r3, #16]
 800629a:	2301      	movs	r3, #1
 800629c:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800629e:	f7fe f8db 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 80062a2:	4603      	mov	r3, r0
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	3224      	adds	r2, #36	; 0x24
 80062a8:	6812      	ldr	r2, [r2, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	4790      	blx	r2
 80062ae:	4603      	mov	r3, r0
 80062b0:	461a      	mov	r2, r3
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	4293      	cmp	r3, r2
 80062b6:	bf0c      	ite	eq
 80062b8:	2301      	moveq	r3, #1
 80062ba:	2300      	movne	r3, #0
 80062bc:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80062be:	f7fa ff9b 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 80062c2:	4603      	mov	r3, r0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fd43 	bl	8005d50 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01b      	beq.n	8006312 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x9a>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80062da:	f7fa ff8d 	bl	80011f8 <_ZN8touchgfx3HAL11getInstanceEv>
 80062de:	4603      	mov	r3, r0
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff fd35 	bl	8005d50 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80062e6:	4603      	mov	r3, r0
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	3224      	adds	r2, #36	; 0x24
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	4618      	mov	r0, r3
 80062f0:	4790      	blx	r2
 80062f2:	4603      	mov	r3, r0
 80062f4:	461a      	mov	r2, r3
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	4293      	cmp	r3, r2
 80062fa:	bf0c      	ite	eq
 80062fc:	2301      	moveq	r3, #1
 80062fe:	2300      	movne	r3, #0
 8006300:	b2da      	uxtb	r2, r3
 8006302:	7bbb      	ldrb	r3, [r7, #14]
 8006304:	4313      	orrs	r3, r2
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	bf14      	ite	ne
 800630c:	2301      	movne	r3, #1
 800630e:	2300      	moveq	r3, #0
 8006310:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8006312:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8006314:	2b00      	cmp	r3, #0
 8006316:	d105      	bne.n	8006324 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xac>
 8006318:	4b06      	ldr	r3, [pc, #24]	; (8006334 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xbc>)
 800631a:	4a07      	ldr	r2, [pc, #28]	; (8006338 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc0>)
 800631c:	2128      	movs	r1, #40	; 0x28
 800631e:	4807      	ldr	r0, [pc, #28]	; (800633c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0xc4>)
 8006320:	f025 faa2 	bl	802b868 <__assert_func>
 8006324:	bf00      	nop
    }
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	0802f1d0 	.word	0x0802f1d0
 8006334:	0802d450 	.word	0x0802d450
 8006338:	0802d4b0 	.word	0x0802d4b0
 800633c:	0802d4ec 	.word	0x0802d4ec

08006340 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
class AbstractPainterRGB888 : public AbstractPainter
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	4a05      	ldr	r2, [pc, #20]	; (8006360 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff ff53 	bl	80061fc <_ZN8touchgfx15AbstractPainterD1Ev>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	0802f1d0 	.word	0x0802f1d0

08006364 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff ffe7 	bl	8006340 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8006372:	2114      	movs	r1, #20
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f025 f8a2 	bl	802b4be <_ZdlPvj>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4618      	mov	r0, r3
 8006392:	f7ff ff71 	bl	8006278 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8006396:	4a0a      	ldr	r2, [pc, #40]	; (80063c0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE+0x3c>)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	751a      	strb	r2, [r3, #20]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	755a      	strb	r2, [r3, #21]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	759a      	strb	r2, [r3, #22]
    {
        setColor(color);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f807 	bl	80063c4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    }
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	0802f324 	.word	0x0802f324

080063c4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    void setColor(colortype color)
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 80063d2:	f107 0314 	add.w	r3, r7, #20
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fa fe80 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 80063dc:	4603      	mov	r3, r0
 80063de:	0c1b      	lsrs	r3, r3, #16
 80063e0:	b2da      	uxtb	r2, r3
    {
        painterRed = Color::getRed(color);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	751a      	strb	r2, [r3, #20]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 80063ea:	f107 0310 	add.w	r3, r7, #16
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fa fe74 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 80063f4:	4603      	mov	r3, r0
 80063f6:	0a1b      	lsrs	r3, r3, #8
 80063f8:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	755a      	strb	r2, [r3, #21]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 8006402:	f107 030c 	add.w	r3, r7, #12
 8006406:	4618      	mov	r0, r3
 8006408:	f7fa fe68 	bl	80010dc <_ZNK8touchgfx9colortypecvmEv>
 800640c:	4603      	mov	r3, r0
 800640e:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	759a      	strb	r2, [r3, #22]
    }
 8006414:	bf00      	nop
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4618      	mov	r0, r3
 8006428:	2326      	movs	r3, #38	; 0x26
 800642a:	461a      	mov	r2, r3
 800642c:	2100      	movs	r1, #0
 800642e:	f025 faa7 	bl	802b980 <memset>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff fcff 	bl	8005e38 <_ZN8touchgfx6WidgetC1Ev>
 800643a:	4a14      	ldr	r2, [pc, #80]	; (800648c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3328      	adds	r3, #40	; 0x28
 8006444:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff fd9b 	bl	8005f84 <_ZN8touchgfx9TypedTextC1Et>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	3330      	adds	r3, #48	; 0x30
 8006452:	2100      	movs	r1, #0
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff fc1f 	bl	8005c98 <_ZN8touchgfx9colortypeC1Em>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	869a      	strh	r2, [r3, #52]	; 0x34
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	22ff      	movs	r2, #255	; 0xff
 8006464:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	0802fc18 	.word	0x0802fc18

08006490 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	4a08      	ldr	r2, [pc, #32]	; (80064bc <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3328      	adds	r3, #40	; 0x28
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fd fe3e 	bl	8004124 <_ZN8touchgfx9TypedTextD1Ev>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe f8ce 	bl	800464c <_ZN8touchgfx6WidgetD1Ev>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	0802fc18 	.word	0x0802fc18

080064c0 <_ZN8touchgfx8TextAreaD0Ev>:
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff ffe1 	bl	8006490 <_ZN8touchgfx8TextAreaD1Ev>
 80064ce:	213c      	movs	r1, #60	; 0x3c
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f024 fff4 	bl	802b4be <_ZdlPvj>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
{
public:
    TextAreaWithOneWildcard()
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
        : TextArea(), wildcard(0)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff ff96 	bl	800641c <_ZN8touchgfx8TextAreaC1Ev>
 80064f0:	4a05      	ldr	r2, [pc, #20]	; (8006508 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	0803000c 	.word	0x0803000c

0800650c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	4a05      	ldr	r2, [pc, #20]	; (8006548 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff fc15 	bl	8005d68 <_ZN8touchgfx6ScreenD1Ev>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4618      	mov	r0, r3
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	0802e094 	.word	0x0802e094

0800654c <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff ffe7 	bl	8006528 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800655a:	2140      	movs	r1, #64	; 0x40
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f024 ffae 	bl	802b4be <_ZdlPvj>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	4a1b      	ldr	r2, [pc, #108]	; (80065e4 <_ZN15Screen1ViewBaseD1Ev+0x78>)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8006580:	4618      	mov	r0, r3
 8006582:	f000 ff7b 	bl	800747c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800658c:	4618      	mov	r0, r3
 800658e:	f001 f8d1 	bl	8007734 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8006598:	4618      	mov	r0, r3
 800659a:	f001 f8a9 	bl	80076f0 <_ZN8touchgfx13PainterRGB888D1Ev>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 f881 	bl	80076ac <_ZN8touchgfx16GraphElementLineD1Ev>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	33e4      	adds	r3, #228	; 0xe4
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 ff86 	bl	80074c0 <_ZN8touchgfx11GraphScrollILs100EED1Ev>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	339c      	adds	r3, #156	; 0x9c
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 f80b 	bl	80075d4 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	336c      	adds	r3, #108	; 0x6c
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 ffc2 	bl	800754c <_ZN8touchgfx10TiledImageD1Ev>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3340      	adds	r3, #64	; 0x40
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 ff9b 	bl	8007508 <_ZN8touchgfx3BoxD1Ev>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff ffa7 	bl	8006528 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	0802df1c 	.word	0x0802df1c

080065e8 <_ZN15Screen1ViewBaseD0Ev>:
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff ffbb 	bl	800656c <_ZN15Screen1ViewBaseD1Ev>
 80065f6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f024 ff5f 	bl	802b4be <_ZdlPvj>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006612:	f018 f94f 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 8006616:	4603      	mov	r3, r0
    }
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <_ZN15Screen1ViewBaseC1Ev>:
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen1ViewBase::Screen1ViewBase() :
 8006620:	b590      	push	{r4, r7, lr}
 8006622:	b0a1      	sub	sp, #132	; 0x84
 8006624:	af02      	add	r7, sp, #8
 8006626:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fe02 	bl	8007234 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8006630:	4ae1      	ldr	r2, [pc, #900]	; (80069b8 <_ZN15Screen1ViewBaseC1Ev+0x398>)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3340      	adds	r3, #64	; 0x40
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff fc0e 	bl	8005e5c <_ZN8touchgfx3BoxC1Ev>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8006646:	f107 0310 	add.w	r3, r7, #16
 800664a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff fb31 	bl	8005cb6 <_ZN8touchgfx6BitmapC1Et>
 8006654:	f107 0310 	add.w	r3, r7, #16
 8006658:	4619      	mov	r1, r3
 800665a:	4620      	mov	r0, r4
 800665c:	f7ff fc78 	bl	8005f50 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	339c      	adds	r3, #156	; 0x9c
 8006664:	4618      	mov	r0, r3
 8006666:	f016 fbf5 	bl	801ce54 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	33e4      	adds	r3, #228	; 0xe4
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fe9e 	bl	80073b0 <_ZN8touchgfx11GraphScrollILs100EEC1Ev>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800667a:	4618      	mov	r0, r3
 800667c:	f014 fbfe 	bl	801ae7c <_ZN8touchgfx16GraphElementLineC1Ev>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f503 747e 	add.w	r4, r3, #1016	; 0x3f8
 8006686:	f107 0314 	add.w	r3, r7, #20
 800668a:	2100      	movs	r1, #0
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff fb03 	bl	8005c98 <_ZN8touchgfx9colortypeC1Em>
 8006692:	6979      	ldr	r1, [r7, #20]
 8006694:	4620      	mov	r0, r4
 8006696:	f7ff fe75 	bl	8006384 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeE>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff ff1d 	bl	80064e0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f503 608a 	add.w	r0, r3, #1104	; 0x450
 80066ac:	4bc3      	ldr	r3, [pc, #780]	; (80069bc <_ZN15Screen1ViewBaseC1Ev+0x39c>)
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	2300      	movs	r3, #0
 80066b2:	61fb      	str	r3, [r7, #28]
 80066b4:	f107 0318 	add.w	r3, r7, #24
 80066b8:	cb0c      	ldmia	r3, {r2, r3}
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	f000 fe9e 	bl	80073fc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80066c6:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80066ca:	4618      	mov	r0, r3
 80066cc:	f016 fbf0 	bl	801ceb0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 480, 272);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80066d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80066e0:	2200      	movs	r2, #0
 80066e2:	2100      	movs	r1, #0
 80066e4:	f7fd fd75 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80066ee:	2300      	movs	r3, #0
 80066f0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80066f4:	2300      	movs	r3, #0
 80066f6:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 80066fa:	2300      	movs	r3, #0
 80066fc:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8006700:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006704:	041b      	lsls	r3, r3, #16
 8006706:	461a      	mov	r2, r3
 8006708:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	431a      	orrs	r2, r3
 8006710:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8006714:	4313      	orrs	r3, r2
 8006716:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800671a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800671e:	4611      	mov	r1, r2
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff fab9 	bl	8005c98 <_ZN8touchgfx9colortypeC1Em>
 8006726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006728:	4619      	mov	r1, r3
 800672a:	4620      	mov	r0, r4
 800672c:	f7ff fbba 	bl	8005ea4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    tiledImage1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_TEXTURES_GPLAYPATTERN_ID));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8006736:	f107 0320 	add.w	r3, r7, #32
 800673a:	2104      	movs	r1, #4
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff faba 	bl	8005cb6 <_ZN8touchgfx6BitmapC1Et>
 8006742:	f107 0320 	add.w	r3, r7, #32
 8006746:	4619      	mov	r1, r3
 8006748:	4620      	mov	r0, r4
 800674a:	f015 fd76 	bl	801c23a <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
    tiledImage1.setPosition(0, 0, 480, 272);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8006754:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800675e:	2200      	movs	r2, #0
 8006760:	2100      	movs	r1, #0
 8006762:	f7fd fd36 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
    tiledImage1.setOffset(0, 0);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	336c      	adds	r3, #108	; 0x6c
 800676a:	2200      	movs	r2, #0
 800676c:	2100      	movs	r1, #0
 800676e:	4618      	mov	r0, r3
 8006770:	f015 fd42 	bl	801c1f8 <_ZN8touchgfx10TiledImage9setOffsetEss>

    buttonWithLabel1.setXY(0, 0);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	339c      	adds	r3, #156	; 0x9c
 8006778:	2200      	movs	r2, #0
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f7fd fd74 	bl	800426a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800678c:	2100      	movs	r1, #0
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff fa91 	bl	8005cb6 <_ZN8touchgfx6BitmapC1Et>
 8006794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006798:	2101      	movs	r1, #1
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fa8b 	bl	8005cb6 <_ZN8touchgfx6BitmapC1Et>
 80067a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80067a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067a8:	4619      	mov	r1, r3
 80067aa:	4620      	mov	r0, r4
 80067ac:	f016 f866 	bl	801c87c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_XBFX));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80067b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067ba:	2100      	movs	r1, #0
 80067bc:	4618      	mov	r0, r3
 80067be:	f7ff fbe1 	bl	8005f84 <_ZN8touchgfx9TypedTextC1Et>
 80067c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067c6:	4619      	mov	r1, r3
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7ff fc31 	bl	8006030 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 80067ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fd fca6 	bl	8004124 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80067de:	23ff      	movs	r3, #255	; 0xff
 80067e0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80067e4:	23ff      	movs	r3, #255	; 0xff
 80067e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 80067ea:	23ff      	movs	r3, #255	; 0xff
 80067ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80067f0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80067f4:	041b      	lsls	r3, r3, #16
 80067f6:	461a      	mov	r2, r3
 80067f8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80067fc:	021b      	lsls	r3, r3, #8
 80067fe:	431a      	orrs	r2, r3
 8006800:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8006804:	4313      	orrs	r3, r2
 8006806:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800680a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff fa41 	bl	8005c98 <_ZN8touchgfx9colortypeC1Em>
 8006816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006818:	4619      	mov	r1, r3
 800681a:	4620      	mov	r0, r4
 800681c:	f7ff fc1a 	bl	8006054 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8006826:	23ff      	movs	r3, #255	; 0xff
 8006828:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 800682c:	23ff      	movs	r3, #255	; 0xff
 800682e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8006832:	23ff      	movs	r3, #255	; 0xff
 8006834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006838:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	461a      	mov	r2, r3
 8006840:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	431a      	orrs	r2, r3
 8006848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800684c:	4313      	orrs	r3, r2
 800684e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006852:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006856:	4611      	mov	r1, r2
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff fa1d 	bl	8005c98 <_ZN8touchgfx9colortypeC1Em>
 800685e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006860:	4619      	mov	r1, r3
 8006862:	4620      	mov	r0, r4
 8006864:	f7ff fc04 	bl	8006070 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f7ff fb9a 	bl	8005fb0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    dynamicGraph1.setScale(1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	33e4      	adds	r3, #228	; 0xe4
 8006880:	2101      	movs	r1, #1
 8006882:	4618      	mov	r0, r3
 8006884:	f014 f938 	bl	801aaf8 <_ZN8touchgfx22AbstractDataGraphWithY8setScaleEi>
    dynamicGraph1.setPosition(125, 16, 355, 240);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 800688e:	23f0      	movs	r3, #240	; 0xf0
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	f240 1363 	movw	r3, #355	; 0x163
 8006896:	2210      	movs	r2, #16
 8006898:	217d      	movs	r1, #125	; 0x7d
 800689a:	f7fd fc9a 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 80068a4:	2300      	movs	r3, #0
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	2300      	movs	r3, #0
 80068aa:	2200      	movs	r2, #0
 80068ac:	2100      	movs	r1, #0
 80068ae:	f014 f85b 	bl	801a968 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 80068b8:	2300      	movs	r3, #0
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	2300      	movs	r3, #0
 80068be:	2200      	movs	r2, #0
 80068c0:	2100      	movs	r1, #0
 80068c2:	f013 fe42 	bl	801a54a <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	33e4      	adds	r3, #228	; 0xe4
 80068ca:	2264      	movs	r2, #100	; 0x64
 80068cc:	2100      	movs	r1, #0
 80068ce:	4618      	mov	r0, r3
 80068d0:	f013 fc5a 	bl	801a188 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEii>

    dynamicGraph1Line1.setScale(1);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 80068da:	2101      	movs	r1, #1
 80068dc:	4618      	mov	r0, r3
 80068de:	f014 fa0f 	bl	801ad00 <_ZN8touchgfx20AbstractGraphElement8setScaleEi>
    dynamicGraph1Line1Painter.setColor(touchgfx::Color::getColorFromRGB(20, 151, 197));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f503 747e 	add.w	r4, r3, #1016	; 0x3f8
 80068e8:	2314      	movs	r3, #20
 80068ea:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80068ee:	2397      	movs	r3, #151	; 0x97
 80068f0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 80068f4:	23c5      	movs	r3, #197	; 0xc5
 80068f6:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 80068fa:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80068fe:	041b      	lsls	r3, r3, #16
 8006900:	461a      	mov	r2, r3
 8006902:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006906:	021b      	lsls	r3, r3, #8
 8006908:	431a      	orrs	r2, r3
 800690a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800690e:	4313      	orrs	r3, r2
 8006910:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006914:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006918:	4611      	mov	r1, r2
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff f9bc 	bl	8005c98 <_ZN8touchgfx9colortypeC1Em>
 8006920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006922:	4619      	mov	r1, r3
 8006924:	4620      	mov	r0, r4
 8006926:	f7ff fd4d 	bl	80063c4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
    dynamicGraph1Line1.setPainter(dynamicGraph1Line1Painter);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f013 fad0 	bl	8019ede <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    dynamicGraph1Line1.setLineWidth(2);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8006944:	2102      	movs	r1, #2
 8006946:	4618      	mov	r0, r3
 8006948:	f014 faa6 	bl	801ae98 <_ZN8touchgfx16GraphElementLine12setLineWidthEh>
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f103 02e4 	add.w	r2, r3, #228	; 0xe4
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f013 feac 	bl	801a6b8 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1.addDataPoint(61.618218271131035f);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	33e4      	adds	r3, #228	; 0xe4
 8006964:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80069c0 <_ZN15Screen1ViewBaseC1Ev+0x3a0>
 8006968:	4618      	mov	r0, r3
 800696a:	f014 f923 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(58.1106792462638f);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	33e4      	adds	r3, #228	; 0xe4
 8006972:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80069c4 <_ZN15Screen1ViewBaseC1Ev+0x3a4>
 8006976:	4618      	mov	r0, r3
 8006978:	f014 f91c 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.41074367587624f);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	33e4      	adds	r3, #228	; 0xe4
 8006980:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80069c8 <_ZN15Screen1ViewBaseC1Ev+0x3a8>
 8006984:	4618      	mov	r0, r3
 8006986:	f014 f915 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(44.17223675024299f);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	33e4      	adds	r3, #228	; 0xe4
 800698e:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80069cc <_ZN15Screen1ViewBaseC1Ev+0x3ac>
 8006992:	4618      	mov	r0, r3
 8006994:	f014 f90e 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(39.18854726532441f);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	33e4      	adds	r3, #228	; 0xe4
 800699c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80069d0 <_ZN15Screen1ViewBaseC1Ev+0x3b0>
 80069a0:	4618      	mov	r0, r3
 80069a2:	f014 f907 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(38.667993295916965f);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	33e4      	adds	r3, #228	; 0xe4
 80069aa:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80069d4 <_ZN15Screen1ViewBaseC1Ev+0x3b4>
 80069ae:	4618      	mov	r0, r3
 80069b0:	f014 f900 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
 80069b4:	e08e      	b.n	8006ad4 <_ZN15Screen1ViewBaseC1Ev+0x4b4>
 80069b6:	bf00      	nop
 80069b8:	0802df1c 	.word	0x0802df1c
 80069bc:	08007209 	.word	0x08007209
 80069c0:	4276790e 	.word	0x4276790e
 80069c4:	42687156 	.word	0x42687156
 80069c8:	424da49a 	.word	0x424da49a
 80069cc:	4230b05f 	.word	0x4230b05f
 80069d0:	421cc113 	.word	0x421cc113
 80069d4:	421aac06 	.word	0x421aac06
 80069d8:	422e9d74 	.word	0x422e9d74
 80069dc:	4256ed8f 	.word	0x4256ed8f
 80069e0:	428633ad 	.word	0x428633ad
 80069e4:	42a1f897 	.word	0x42a1f897
 80069e8:	42b89811 	.word	0x42b89811
 80069ec:	42c4c0e1 	.word	0x42c4c0e1
 80069f0:	42c3490a 	.word	0x42c3490a
 80069f4:	42b3f605 	.word	0x42b3f605
 80069f8:	42999116 	.word	0x42999116
 80069fc:	4272850b 	.word	0x4272850b
 8006a00:	4232b762 	.word	0x4232b762
 8006a04:	41ff6d36 	.word	0x41ff6d36
 8006a08:	41c420c3 	.word	0x41c420c3
 8006a0c:	41b9e552 	.word	0x41b9e552
 8006a10:	41db1c18 	.word	0x41db1c18
 8006a14:	420bef61 	.word	0x420bef61
 8006a18:	422d19a9 	.word	0x422d19a9
 8006a1c:	4245dafe 	.word	0x4245dafe
 8006a20:	424da9a8 	.word	0x424da9a8
 8006a24:	4240d481 	.word	0x4240d481
 8006a28:	42217c8f 	.word	0x42217c8f
 8006a2c:	41ee33ce 	.word	0x41ee33ce
 8006a30:	4199533a 	.word	0x4199533a
 8006a34:	4137db3d 	.word	0x4137db3d
 8006a38:	4112a47f 	.word	0x4112a47f
 8006a3c:	415746ff 	.word	0x415746ff
 8006a40:	41c122ba 	.word	0x41c122ba
 8006a44:	421e2cd7 	.word	0x421e2cd7
 8006a48:	42638d02 	.word	0x42638d02
 8006a4c:	4291e681 	.word	0x4291e681
 8006a50:	42a99c5e 	.word	0x42a99c5e
 8006a54:	42b500a0 	.word	0x42b500a0
 8006a58:	42b2ffb5 	.word	0x42b2ffb5
 8006a5c:	42a58bef 	.word	0x42a58bef
 8006a60:	429114a4 	.word	0x429114a4
 8006a64:	4276c920 	.word	0x4276c920
 8006a68:	42545db2 	.word	0x42545db2
 8006a6c:	42434ba1 	.word	0x42434ba1
 8006a70:	4246e831 	.word	0x4246e831
 8006a74:	425cb109 	.word	0x425cb109
 8006a78:	427cfa02 	.word	0x427cfa02
 8006a7c:	428e72fa 	.word	0x428e72fa
 8006a80:	429896ea 	.word	0x429896ea
 8006a84:	4298836e 	.word	0x4298836e
 8006a88:	428c385a 	.word	0x428c385a
 8006a8c:	42695973 	.word	0x42695973
 8006a90:	422b4e5b 	.word	0x422b4e5b
 8006a94:	41d39651 	.word	0x41d39651
 8006a98:	41464088 	.word	0x41464088
 8006a9c:	405a474d 	.word	0x405a474d
 8006aa0:	3f97de3b 	.word	0x3f97de3b
 8006aa4:	40bdb3ba 	.word	0x40bdb3ba
 8006aa8:	4182b5fd 	.word	0x4182b5fd
 8006aac:	41ef80a0 	.word	0x41ef80a0
 8006ab0:	422ea926 	.word	0x422ea926
 8006ab4:	425a7b52 	.word	0x425a7b52
 8006ab8:	42730420 	.word	0x42730420
 8006abc:	4275605d 	.word	0x4275605d
 8006ac0:	42649179 	.word	0x42649179
 8006ac4:	42489c93 	.word	0x42489c93
 8006ac8:	422c6bf2 	.word	0x422c6bf2
 8006acc:	421af957 	.word	0x421af957
 8006ad0:	421c747d 	.word	0x421c747d
    dynamicGraph1.addDataPoint(43.653762901418965f);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	33e4      	adds	r3, #228	; 0xe4
 8006ad8:	ed1f 0a41 	vldr	s0, [pc, #-260]	; 80069d8 <_ZN15Screen1ViewBaseC1Ev+0x3b8>
 8006adc:	4618      	mov	r0, r3
 8006ade:	f014 f869 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(53.73199226986557f);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	33e4      	adds	r3, #228	; 0xe4
 8006ae6:	ed1f 0a43 	vldr	s0, [pc, #-268]	; 80069dc <_ZN15Screen1ViewBaseC1Ev+0x3bc>
 8006aea:	4618      	mov	r0, r3
 8006aec:	f014 f862 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(67.10092986209878f);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	33e4      	adds	r3, #228	; 0xe4
 8006af4:	ed1f 0a46 	vldr	s0, [pc, #-280]	; 80069e0 <_ZN15Screen1ViewBaseC1Ev+0x3c0>
 8006af8:	4618      	mov	r0, r3
 8006afa:	f014 f85b 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(80.98552696686758f);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	33e4      	adds	r3, #228	; 0xe4
 8006b02:	ed1f 0a48 	vldr	s0, [pc, #-288]	; 80069e4 <_ZN15Screen1ViewBaseC1Ev+0x3c4>
 8006b06:	4618      	mov	r0, r3
 8006b08:	f014 f854 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(92.29700595968538f);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	33e4      	adds	r3, #228	; 0xe4
 8006b10:	ed1f 0a4b 	vldr	s0, [pc, #-300]	; 80069e8 <_ZN15Screen1ViewBaseC1Ev+0x3c8>
 8006b14:	4618      	mov	r0, r3
 8006b16:	f014 f84d 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(98.37671839839517f);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	33e4      	adds	r3, #228	; 0xe4
 8006b1e:	ed1f 0a4d 	vldr	s0, [pc, #-308]	; 80069ec <_ZN15Screen1ViewBaseC1Ev+0x3cc>
 8006b22:	4618      	mov	r0, r3
 8006b24:	f014 f846 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(97.6426558550894f);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	33e4      	adds	r3, #228	; 0xe4
 8006b2c:	ed1f 0a50 	vldr	s0, [pc, #-320]	; 80069f0 <_ZN15Screen1ViewBaseC1Ev+0x3d0>
 8006b30:	4618      	mov	r0, r3
 8006b32:	f014 f83f 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(89.98050820887681f);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	33e4      	adds	r3, #228	; 0xe4
 8006b3a:	ed1f 0a52 	vldr	s0, [pc, #-328]	; 80069f4 <_ZN15Screen1ViewBaseC1Ev+0x3d4>
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f014 f838 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(76.78337190569503f);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	33e4      	adds	r3, #228	; 0xe4
 8006b48:	ed1f 0a55 	vldr	s0, [pc, #-340]	; 80069f8 <_ZN15Screen1ViewBaseC1Ev+0x3d8>
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f014 f831 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(60.62992539653267f);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	33e4      	adds	r3, #228	; 0xe4
 8006b56:	ed1f 0a57 	vldr	s0, [pc, #-348]	; 80069fc <_ZN15Screen1ViewBaseC1Ev+0x3dc>
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f014 f82a 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(44.67908426013318f);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	33e4      	adds	r3, #228	; 0xe4
 8006b64:	ed1f 0a5a 	vldr	s0, [pc, #-360]	; 8006a00 <_ZN15Screen1ViewBaseC1Ev+0x3e0>
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f014 f823 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(31.928326310305152f);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	33e4      	adds	r3, #228	; 0xe4
 8006b72:	ed1f 0a5c 	vldr	s0, [pc, #-368]	; 8006a04 <_ZN15Screen1ViewBaseC1Ev+0x3e4>
 8006b76:	4618      	mov	r0, r3
 8006b78:	f014 f81c 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(24.51599654262927f);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	33e4      	adds	r3, #228	; 0xe4
 8006b80:	ed1f 0a5f 	vldr	s0, [pc, #-380]	; 8006a08 <_ZN15Screen1ViewBaseC1Ev+0x3e8>
 8006b84:	4618      	mov	r0, r3
 8006b86:	f014 f815 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(23.236972696821596f);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	33e4      	adds	r3, #228	; 0xe4
 8006b8e:	ed1f 0a61 	vldr	s0, [pc, #-388]	; 8006a0c <_ZN15Screen1ViewBaseC1Ev+0x3ec>
 8006b92:	4618      	mov	r0, r3
 8006b94:	f014 f80e 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(27.388717910654563f);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	33e4      	adds	r3, #228	; 0xe4
 8006b9c:	ed1f 0a64 	vldr	s0, [pc, #-400]	; 8006a10 <_ZN15Screen1ViewBaseC1Ev+0x3f0>
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f014 f807 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(34.98377034613647f);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	33e4      	adds	r3, #228	; 0xe4
 8006baa:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8006a14 <_ZN15Screen1ViewBaseC1Ev+0x3f4>
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f014 f800 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(43.27505821896695f);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	33e4      	adds	r3, #228	; 0xe4
 8006bb8:	ed1f 0a69 	vldr	s0, [pc, #-420]	; 8006a18 <_ZN15Screen1ViewBaseC1Ev+0x3f8>
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f013 fff9 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(49.46386062652968f);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	33e4      	adds	r3, #228	; 0xe4
 8006bc6:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 8006a1c <_ZN15Screen1ViewBaseC1Ev+0x3fc>
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f013 fff2 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.41567813739625f);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	33e4      	adds	r3, #228	; 0xe4
 8006bd4:	ed1f 0a6e 	vldr	s0, [pc, #-440]	; 8006a20 <_ZN15Screen1ViewBaseC1Ev+0x400>
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f013 ffeb 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(48.207523011384794f);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	33e4      	adds	r3, #228	; 0xe4
 8006be2:	ed1f 0a70 	vldr	s0, [pc, #-448]	; 8006a24 <_ZN15Screen1ViewBaseC1Ev+0x404>
 8006be6:	4618      	mov	r0, r3
 8006be8:	f013 ffe4 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(40.37164055229543f);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	33e4      	adds	r3, #228	; 0xe4
 8006bf0:	ed1f 0a73 	vldr	s0, [pc, #-460]	; 8006a28 <_ZN15Screen1ViewBaseC1Ev+0x408>
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f013 ffdd 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(29.77529475126354f);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	33e4      	adds	r3, #228	; 0xe4
 8006bfe:	ed1f 0a75 	vldr	s0, [pc, #-468]	; 8006a2c <_ZN15Screen1ViewBaseC1Ev+0x40c>
 8006c02:	4618      	mov	r0, r3
 8006c04:	f013 ffd6 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(19.165638670216758f);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	33e4      	adds	r3, #228	; 0xe4
 8006c0c:	ed1f 0a78 	vldr	s0, [pc, #-480]	; 8006a30 <_ZN15Screen1ViewBaseC1Ev+0x410>
 8006c10:	4618      	mov	r0, r3
 8006c12:	f013 ffcf 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(11.491024888364834f);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	33e4      	adds	r3, #228	; 0xe4
 8006c1a:	ed1f 0a7a 	vldr	s0, [pc, #-488]	; 8006a34 <_ZN15Screen1ViewBaseC1Ev+0x414>
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f013 ffc8 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(9.165159985791963f);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	33e4      	adds	r3, #228	; 0xe4
 8006c28:	ed1f 0a7d 	vldr	s0, [pc, #-500]	; 8006a38 <_ZN15Screen1ViewBaseC1Ev+0x418>
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f013 ffc1 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(13.45483272279958f);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	33e4      	adds	r3, #228	; 0xe4
 8006c36:	ed1f 0a7f 	vldr	s0, [pc, #-508]	; 8006a3c <_ZN15Screen1ViewBaseC1Ev+0x41c>
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f013 ffba 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(24.141956704445953f);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	33e4      	adds	r3, #228	; 0xe4
 8006c44:	ed1f 0a82 	vldr	s0, [pc, #-520]	; 8006a40 <_ZN15Screen1ViewBaseC1Ev+0x420>
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f013 ffb3 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(39.54378999291643f);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	33e4      	adds	r3, #228	; 0xe4
 8006c52:	ed1f 0a84 	vldr	s0, [pc, #-528]	; 8006a44 <_ZN15Screen1ViewBaseC1Ev+0x424>
 8006c56:	4618      	mov	r0, r3
 8006c58:	f013 ffac 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(56.8877013078163f);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	33e4      	adds	r3, #228	; 0xe4
 8006c60:	ed1f 0a87 	vldr	s0, [pc, #-540]	; 8006a48 <_ZN15Screen1ViewBaseC1Ev+0x428>
 8006c64:	4618      	mov	r0, r3
 8006c66:	f013 ffa5 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(72.9502032346105f);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	33e4      	adds	r3, #228	; 0xe4
 8006c6e:	ed1f 0a89 	vldr	s0, [pc, #-548]	; 8006a4c <_ZN15Screen1ViewBaseC1Ev+0x42c>
 8006c72:	4618      	mov	r0, r3
 8006c74:	f013 ff9e 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(84.8054024670876f);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	33e4      	adds	r3, #228	; 0xe4
 8006c7c:	ed1f 0a8c 	vldr	s0, [pc, #-560]	; 8006a50 <_ZN15Screen1ViewBaseC1Ev+0x430>
 8006c80:	4618      	mov	r0, r3
 8006c82:	f013 ff97 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(90.50121833878133f);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	33e4      	adds	r3, #228	; 0xe4
 8006c8a:	ed1f 0a8e 	vldr	s0, [pc, #-568]	; 8006a54 <_ZN15Screen1ViewBaseC1Ev+0x434>
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f013 ff90 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(89.49942887480523f);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	33e4      	adds	r3, #228	; 0xe4
 8006c98:	ed1f 0a91 	vldr	s0, [pc, #-580]	; 8006a58 <_ZN15Screen1ViewBaseC1Ev+0x438>
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f013 ff89 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(82.77330853691569f);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	33e4      	adds	r3, #228	; 0xe4
 8006ca6:	ed1f 0a93 	vldr	s0, [pc, #-588]	; 8006a5c <_ZN15Screen1ViewBaseC1Ev+0x43c>
 8006caa:	4618      	mov	r0, r3
 8006cac:	f013 ff82 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(72.5403106848969f);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	33e4      	adds	r3, #228	; 0xe4
 8006cb4:	ed1f 0a96 	vldr	s0, [pc, #-600]	; 8006a60 <_ZN15Screen1ViewBaseC1Ev+0x440>
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f013 ff7b 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(61.69641162377825f);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	33e4      	adds	r3, #228	; 0xe4
 8006cc2:	ed1f 0a98 	vldr	s0, [pc, #-608]	; 8006a64 <_ZN15Screen1ViewBaseC1Ev+0x444>
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f013 ff74 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(53.09150002979467f);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	33e4      	adds	r3, #228	; 0xe4
 8006cd0:	ed1f 0a9b 	vldr	s0, [pc, #-620]	; 8006a68 <_ZN15Screen1ViewBaseC1Ev+0x448>
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f013 ff6d 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(48.82385475604111f);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	33e4      	adds	r3, #228	; 0xe4
 8006cde:	ed1f 0a9d 	vldr	s0, [pc, #-628]	; 8006a6c <_ZN15Screen1ViewBaseC1Ev+0x44c>
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f013 ff66 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(49.72675127608904f);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	33e4      	adds	r3, #228	; 0xe4
 8006cec:	ed1f 0aa0 	vldr	s0, [pc, #-640]	; 8006a70 <_ZN15Screen1ViewBaseC1Ev+0x450>
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f013 ff5f 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(55.17288477824837f);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	33e4      	adds	r3, #228	; 0xe4
 8006cfa:	ed1f 0aa2 	vldr	s0, [pc, #-648]	; 8006a74 <_ZN15Screen1ViewBaseC1Ev+0x454>
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f013 ff58 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(63.24414869200697f);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	33e4      	adds	r3, #228	; 0xe4
 8006d08:	ed1f 0aa5 	vldr	s0, [pc, #-660]	; 8006a78 <_ZN15Screen1ViewBaseC1Ev+0x458>
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f013 ff51 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(71.22456631048976f);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	33e4      	adds	r3, #228	; 0xe4
 8006d16:	ed1f 0aa7 	vldr	s0, [pc, #-668]	; 8006a7c <_ZN15Screen1ViewBaseC1Ev+0x45c>
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f013 ff4a 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(76.2947516326393f);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	33e4      	adds	r3, #228	; 0xe4
 8006d24:	ed1f 0aaa 	vldr	s0, [pc, #-680]	; 8006a80 <_ZN15Screen1ViewBaseC1Ev+0x460>
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f013 ff43 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(76.25669670570666f);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	33e4      	adds	r3, #228	; 0xe4
 8006d32:	ed1f 0aac 	vldr	s0, [pc, #-688]	; 8006a84 <_ZN15Screen1ViewBaseC1Ev+0x464>
 8006d36:	4618      	mov	r0, r3
 8006d38:	f013 ff3c 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(70.11006476926936f);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	33e4      	adds	r3, #228	; 0xe4
 8006d40:	ed1f 0aaf 	vldr	s0, [pc, #-700]	; 8006a88 <_ZN15Screen1ViewBaseC1Ev+0x468>
 8006d44:	4618      	mov	r0, r3
 8006d46:	f013 ff35 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(58.337351231157584f);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	33e4      	adds	r3, #228	; 0xe4
 8006d4e:	ed1f 0ab1 	vldr	s0, [pc, #-708]	; 8006a8c <_ZN15Screen1ViewBaseC1Ev+0x46c>
 8006d52:	4618      	mov	r0, r3
 8006d54:	f013 ff2e 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(42.82651784942582f);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	33e4      	adds	r3, #228	; 0xe4
 8006d5c:	ed1f 0ab4 	vldr	s0, [pc, #-720]	; 8006a90 <_ZN15Screen1ViewBaseC1Ev+0x470>
 8006d60:	4618      	mov	r0, r3
 8006d62:	f013 ff27 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(26.448396358155456f);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	33e4      	adds	r3, #228	; 0xe4
 8006d6a:	ed1f 0ab6 	vldr	s0, [pc, #-728]	; 8006a94 <_ZN15Screen1ViewBaseC1Ev+0x474>
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f013 ff20 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(12.390754894919514f);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	33e4      	adds	r3, #228	; 0xe4
 8006d78:	ed1f 0ab9 	vldr	s0, [pc, #-740]	; 8006a98 <_ZN15Screen1ViewBaseC1Ev+0x478>
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f013 ff19 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(3.410601924204144f);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	33e4      	adds	r3, #228	; 0xe4
 8006d86:	ed1f 0abb 	vldr	s0, [pc, #-748]	; 8006a9c <_ZN15Screen1ViewBaseC1Ev+0x47c>
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f013 ff12 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(1.1864694534668594f);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	33e4      	adds	r3, #228	; 0xe4
 8006d94:	ed1f 0abe 	vldr	s0, [pc, #-760]	; 8006aa0 <_ZN15Screen1ViewBaseC1Ev+0x480>
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f013 ff0b 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(5.928189422959122f);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	33e4      	adds	r3, #228	; 0xe4
 8006da2:	ed1f 0ac0 	vldr	s0, [pc, #-768]	; 8006aa4 <_ZN15Screen1ViewBaseC1Ev+0x484>
 8006da6:	4618      	mov	r0, r3
 8006da8:	f013 ff04 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(16.33886238546977f);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	33e4      	adds	r3, #228	; 0xe4
 8006db0:	ed1f 0ac3 	vldr	s0, [pc, #-780]	; 8006aa8 <_ZN15Screen1ViewBaseC1Ev+0x488>
 8006db4:	4618      	mov	r0, r3
 8006db6:	f013 fefd 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(29.93780459262879f);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	33e4      	adds	r3, #228	; 0xe4
 8006dbe:	ed1f 0ac5 	vldr	s0, [pc, #-788]	; 8006aac <_ZN15Screen1ViewBaseC1Ev+0x48c>
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f013 fef6 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(43.66518477408525f);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	33e4      	adds	r3, #228	; 0xe4
 8006dcc:	ed1f 0ac8 	vldr	s0, [pc, #-800]	; 8006ab0 <_ZN15Screen1ViewBaseC1Ev+0x490>
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f013 feef 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(54.620429047299666f);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	33e4      	adds	r3, #228	; 0xe4
 8006dda:	ed1f 0aca 	vldr	s0, [pc, #-808]	; 8006ab4 <_ZN15Screen1ViewBaseC1Ev+0x494>
 8006dde:	4618      	mov	r0, r3
 8006de0:	f013 fee8 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(60.754027950387666f);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	33e4      	adds	r3, #228	; 0xe4
 8006de8:	ed1f 0acd 	vldr	s0, [pc, #-820]	; 8006ab8 <_ZN15Screen1ViewBaseC1Ev+0x498>
 8006dec:	4618      	mov	r0, r3
 8006dee:	f013 fee1 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(61.34410368104659f);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	33e4      	adds	r3, #228	; 0xe4
 8006df6:	ed1f 0acf 	vldr	s0, [pc, #-828]	; 8006abc <_ZN15Screen1ViewBaseC1Ev+0x49c>
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f013 feda 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(57.14206261705607f);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	33e4      	adds	r3, #228	; 0xe4
 8006e04:	ed1f 0ad2 	vldr	s0, [pc, #-840]	; 8006ac0 <_ZN15Screen1ViewBaseC1Ev+0x4a0>
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f013 fed3 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(50.15290363392664f);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	33e4      	adds	r3, #228	; 0xe4
 8006e12:	ed1f 0ad4 	vldr	s0, [pc, #-848]	; 8006ac4 <_ZN15Screen1ViewBaseC1Ev+0x4a4>
 8006e16:	4618      	mov	r0, r3
 8006e18:	f013 fecc 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(43.105414531949975f);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	33e4      	adds	r3, #228	; 0xe4
 8006e20:	ed1f 0ad7 	vldr	s0, [pc, #-860]	; 8006ac8 <_ZN15Screen1ViewBaseC1Ev+0x4a8>
 8006e24:	4618      	mov	r0, r3
 8006e26:	f013 fec5 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(38.74349596554701f);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	33e4      	adds	r3, #228	; 0xe4
 8006e2e:	ed1f 0ad9 	vldr	s0, [pc, #-868]	; 8006acc <_ZN15Screen1ViewBaseC1Ev+0x4ac>
 8006e32:	4618      	mov	r0, r3
 8006e34:	f013 febe 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(39.11375866949934f);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	33e4      	adds	r3, #228	; 0xe4
 8006e3c:	ed1f 0adc 	vldr	s0, [pc, #-880]	; 8006ad0 <_ZN15Screen1ViewBaseC1Ev+0x4b0>
 8006e40:	4618      	mov	r0, r3
 8006e42:	f013 feb7 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(45.0254266967552f);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	33e4      	adds	r3, #228	; 0xe4
 8006e4a:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 800715c <_ZN15Screen1ViewBaseC1Ev+0xb3c>
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f013 feb0 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(55.81633177898603f);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	33e4      	adds	r3, #228	; 0xe4
 8006e58:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8007160 <_ZN15Screen1ViewBaseC1Ev+0xb40>
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f013 fea9 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(69.48373747257975f);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	33e4      	adds	r3, #228	; 0xe4
 8006e66:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8007164 <_ZN15Screen1ViewBaseC1Ev+0xb44>
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f013 fea2 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(83.14918943213563f);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	33e4      	adds	r3, #228	; 0xe4
 8006e74:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8007168 <_ZN15Screen1ViewBaseC1Ev+0xb48>
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f013 fe9b 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(93.74461282053153f);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	33e4      	adds	r3, #228	; 0xe4
 8006e82:	ed9f 0aba 	vldr	s0, [pc, #744]	; 800716c <_ZN15Screen1ViewBaseC1Ev+0xb4c>
 8006e86:	4618      	mov	r0, r3
 8006e88:	f013 fe94 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(98.75241250242402f);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	33e4      	adds	r3, #228	; 0xe4
 8006e90:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8007170 <_ZN15Screen1ViewBaseC1Ev+0xb50>
 8006e94:	4618      	mov	r0, r3
 8006e96:	f013 fe8d 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(96.81881792125564f);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	33e4      	adds	r3, #228	; 0xe4
 8006e9e:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8007174 <_ZN15Screen1ViewBaseC1Ev+0xb54>
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f013 fe86 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(88.09042278514157f);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	33e4      	adds	r3, #228	; 0xe4
 8006eac:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8007178 <_ZN15Screen1ViewBaseC1Ev+0xb58>
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f013 fe7f 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(74.19132343836466f);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	33e4      	adds	r3, #228	; 0xe4
 8006eba:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800717c <_ZN15Screen1ViewBaseC1Ev+0xb5c>
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f013 fe78 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(57.84593186392091f);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	33e4      	adds	r3, #228	; 0xe4
 8006ec8:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8007180 <_ZN15Screen1ViewBaseC1Ev+0xb60>
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f013 fe71 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(42.23899574335398f);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	33e4      	adds	r3, #228	; 0xe4
 8006ed6:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8007184 <_ZN15Screen1ViewBaseC1Ev+0xb64>
 8006eda:	4618      	mov	r0, r3
 8006edc:	f013 fe6a 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(30.268444443133994f);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	33e4      	adds	r3, #228	; 0xe4
 8006ee4:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8007188 <_ZN15Screen1ViewBaseC1Ev+0xb68>
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f013 fe63 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(23.872672248461583f);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	33e4      	adds	r3, #228	; 0xe4
 8006ef2:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 800718c <_ZN15Screen1ViewBaseC1Ev+0xb6c>
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f013 fe5c 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(23.595521165812947f);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	33e4      	adds	r3, #228	; 0xe4
 8006f00:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8007190 <_ZN15Screen1ViewBaseC1Ev+0xb70>
 8006f04:	4618      	mov	r0, r3
 8006f06:	f013 fe55 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(28.493874703617216f);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	33e4      	adds	r3, #228	; 0xe4
 8006f0e:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8007194 <_ZN15Screen1ViewBaseC1Ev+0xb74>
 8006f12:	4618      	mov	r0, r3
 8006f14:	f013 fe4e 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(36.40886878753824f);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	33e4      	adds	r3, #228	; 0xe4
 8006f1c:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8007198 <_ZN15Screen1ViewBaseC1Ev+0xb78>
 8006f20:	4618      	mov	r0, r3
 8006f22:	f013 fe47 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(44.532716849494896f);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	33e4      	adds	r3, #228	; 0xe4
 8006f2a:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 800719c <_ZN15Screen1ViewBaseC1Ev+0xb7c>
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f013 fe40 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(50.13082791787049f);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	33e4      	adds	r3, #228	; 0xe4
 8006f38:	ed9f 0a99 	vldr	s0, [pc, #612]	; 80071a0 <_ZN15Screen1ViewBaseC1Ev+0xb80>
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f013 fe39 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(51.24105903338284f);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	33e4      	adds	r3, #228	; 0xe4
 8006f46:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80071a4 <_ZN15Screen1ViewBaseC1Ev+0xb84>
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f013 fe32 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(47.17769737544478f);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	33e4      	adds	r3, #228	; 0xe4
 8006f54:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80071a8 <_ZN15Screen1ViewBaseC1Ev+0xb88>
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f013 fe2b 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(38.715847267255924f);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	33e4      	adds	r3, #228	; 0xe4
 8006f62:	ed9f 0a92 	vldr	s0, [pc, #584]	; 80071ac <_ZN15Screen1ViewBaseC1Ev+0xb8c>
 8006f66:	4618      	mov	r0, r3
 8006f68:	f013 fe24 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(27.910418106617403f);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	33e4      	adds	r3, #228	; 0xe4
 8006f70:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 80071b0 <_ZN15Screen1ViewBaseC1Ev+0xb90>
 8006f74:	4618      	mov	r0, r3
 8006f76:	f013 fe1d 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(17.593682365091077f);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	33e4      	adds	r3, #228	; 0xe4
 8006f7e:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80071b4 <_ZN15Screen1ViewBaseC1Ev+0xb94>
 8006f82:	4618      	mov	r0, r3
 8006f84:	f013 fe16 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(10.67439266291668f);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	33e4      	adds	r3, #228	; 0xe4
 8006f8c:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 80071b8 <_ZN15Screen1ViewBaseC1Ev+0xb98>
 8006f90:	4618      	mov	r0, r3
 8006f92:	f013 fe0f 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(9.410354253299769f);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	33e4      	adds	r3, #228	; 0xe4
 8006f9a:	ed9f 0a88 	vldr	s0, [pc, #544]	; 80071bc <_ZN15Screen1ViewBaseC1Ev+0xb9c>
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f013 fe08 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(14.833163062224273f);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	33e4      	adds	r3, #228	; 0xe4
 8006fa8:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80071c0 <_ZN15Screen1ViewBaseC1Ev+0xba0>
 8006fac:	4618      	mov	r0, r3
 8006fae:	f013 fe01 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(26.46684179569181f);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	33e4      	adds	r3, #228	; 0xe4
 8006fb6:	ed9f 0a83 	vldr	s0, [pc, #524]	; 80071c4 <_ZN15Screen1ViewBaseC1Ev+0xba4>
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f013 fdfa 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(42.41042738039546f);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	33e4      	adds	r3, #228	; 0xe4
 8006fc4:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80071c8 <_ZN15Screen1ViewBaseC1Ev+0xba8>
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f013 fdf3 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(59.76561999531412f);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	33e4      	adds	r3, #228	; 0xe4
 8006fd2:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80071cc <_ZN15Screen1ViewBaseC1Ev+0xbac>
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f013 fdec 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(75.30631312116884f);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	33e4      	adds	r3, #228	; 0xe4
 8006fe0:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 80071d0 <_ZN15Screen1ViewBaseC1Ev+0xbb0>
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f013 fde5 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>
    dynamicGraph1.addDataPoint(86.22767246233667f);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	33e4      	adds	r3, #228	; 0xe4
 8006fee:	ed9f 0a79 	vldr	s0, [pc, #484]	; 80071d4 <_ZN15Screen1ViewBaseC1Ev+0xbb4>
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f013 fdde 	bl	801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>

    textArea1.setXY(14, 124);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8006ffe:	227c      	movs	r2, #124	; 0x7c
 8007000:	210e      	movs	r1, #14
 8007002:	4618      	mov	r0, r3
 8007004:	f7fd f931 	bl	800426a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 800700e:	2300      	movs	r3, #0
 8007010:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007014:	2300      	movs	r3, #0
 8007016:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800701a:	2300      	movs	r3, #0
 800701c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8007020:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007024:	041b      	lsls	r3, r3, #16
 8007026:	461a      	mov	r2, r3
 8007028:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800702c:	021b      	lsls	r3, r3, #8
 800702e:	431a      	orrs	r2, r3
 8007030:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8007034:	4313      	orrs	r3, r2
 8007036:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800703a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800703e:	4611      	mov	r1, r2
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe fe29 	bl	8005c98 <_ZN8touchgfx9colortypeC1Em>
 8007046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007048:	66bc      	str	r4, [r7, #104]	; 0x68
 800704a:	60fb      	str	r3, [r7, #12]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800704c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007052:	bf00      	nop
    textArea1.setLinespacing(0);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800705a:	673b      	str	r3, [r7, #112]	; 0x70
 800705c:	2300      	movs	r3, #0
 800705e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8007062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007064:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8007068:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800706a:	bf00      	nop
    textArea1.setWildcard(touchgfx::TypedText(T___SINGLEUSE_13EO).getText());
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8007072:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007076:	2103      	movs	r1, #3
 8007078:	4618      	mov	r0, r3
 800707a:	f7fe ff83 	bl	8005f84 <_ZN8touchgfx9TypedTextC1Et>
 800707e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007082:	677b      	str	r3, [r7, #116]	; 0x74
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8007084:	4b54      	ldr	r3, [pc, #336]	; (80071d8 <_ZN15Screen1ViewBaseC1Ev+0xbb8>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d105      	bne.n	8007098 <_ZN15Screen1ViewBaseC1Ev+0xa78>
 800708c:	4b53      	ldr	r3, [pc, #332]	; (80071dc <_ZN15Screen1ViewBaseC1Ev+0xbbc>)
 800708e:	4a54      	ldr	r2, [pc, #336]	; (80071e0 <_ZN15Screen1ViewBaseC1Ev+0xbc0>)
 8007090:	21ae      	movs	r1, #174	; 0xae
 8007092:	4854      	ldr	r0, [pc, #336]	; (80071e4 <_ZN15Screen1ViewBaseC1Ev+0xbc4>)
 8007094:	f024 fbe8 	bl	802b868 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8007098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800709a:	889a      	ldrh	r2, [r3, #4]
 800709c:	4b52      	ldr	r3, [pc, #328]	; (80071e8 <_ZN15Screen1ViewBaseC1Ev+0xbc8>)
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d305      	bcc.n	80070b0 <_ZN15Screen1ViewBaseC1Ev+0xa90>
 80070a4:	4b51      	ldr	r3, [pc, #324]	; (80071ec <_ZN15Screen1ViewBaseC1Ev+0xbcc>)
 80070a6:	4a4e      	ldr	r2, [pc, #312]	; (80071e0 <_ZN15Screen1ViewBaseC1Ev+0xbc0>)
 80070a8:	21af      	movs	r1, #175	; 0xaf
 80070aa:	484e      	ldr	r0, [pc, #312]	; (80071e4 <_ZN15Screen1ViewBaseC1Ev+0xbc4>)
 80070ac:	f024 fbdc 	bl	802b868 <__assert_func>
    }
 80070b0:	bf00      	nop
        return texts->getText(typedTextId);
 80070b2:	4b4f      	ldr	r3, [pc, #316]	; (80071f0 <_ZN15Screen1ViewBaseC1Ev+0xbd0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80070b8:	4611      	mov	r1, r2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f001 f982 	bl	80083c4 <_ZNK8touchgfx5Texts7getTextEt>
 80070c0:	4603      	mov	r3, r0
 80070c2:	bf00      	nop
 80070c4:	4619      	mov	r1, r3
 80070c6:	4620      	mov	r0, r4
 80070c8:	f7ff fa20 	bl	800650c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
 80070cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fd f827 	bl	8004124 <_ZN8touchgfx9TypedTextD1Ev>
    textArea1.resizeToCurrentText();
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80070dc:	4618      	mov	r0, r3
 80070de:	f015 f837 	bl	801c150 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IY4I));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 80070e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070ec:	2102      	movs	r1, #2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe ff48 	bl	8005f84 <_ZN8touchgfx9TypedTextC1Et>
 80070f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070f8:	4619      	mov	r1, r3
 80070fa:	4620      	mov	r0, r4
 80070fc:	f015 f845 	bl	801c18a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007100:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007104:	4618      	mov	r0, r3
 8007106:	f7fd f80d 	bl	8004124 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3340      	adds	r3, #64	; 0x40
 8007110:	4619      	mov	r1, r3
 8007112:	4610      	mov	r0, r2
 8007114:	f7fe fe80 	bl	8005e18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tiledImage1);
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	336c      	adds	r3, #108	; 0x6c
 800711e:	4619      	mov	r1, r3
 8007120:	4610      	mov	r0, r2
 8007122:	f7fe fe79 	bl	8005e18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	339c      	adds	r3, #156	; 0x9c
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f7fe fe72 	bl	8005e18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(dynamicGraph1);
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	33e4      	adds	r3, #228	; 0xe4
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f7fe fe6b 	bl	8005e18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800714a:	4619      	mov	r1, r3
 800714c:	4610      	mov	r0, r2
 800714e:	f7fe fe63 	bl	8005e18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4618      	mov	r0, r3
 8007156:	377c      	adds	r7, #124	; 0x7c
 8007158:	46bd      	mov	sp, r7
 800715a:	bd90      	pop	{r4, r7, pc}
 800715c:	42341a09 	.word	0x42341a09
 8007160:	425f43ec 	.word	0x425f43ec
 8007164:	428af7ac 	.word	0x428af7ac
 8007168:	42a64c63 	.word	0x42a64c63
 800716c:	42bb7d3e 	.word	0x42bb7d3e
 8007170:	42c5813c 	.word	0x42c5813c
 8007174:	42c1a33c 	.word	0x42c1a33c
 8007178:	42b02e4c 	.word	0x42b02e4c
 800717c:	429461f5 	.word	0x429461f5
 8007180:	4267623c 	.word	0x4267623c
 8007184:	4228f4bb 	.word	0x4228f4bb
 8007188:	41f225c6 	.word	0x41f225c6
 800718c:	41befb3c 	.word	0x41befb3c
 8007190:	41bcc3a1 	.word	0x41bcc3a1
 8007194:	41e3f375 	.word	0x41e3f375
 8007198:	4211a2ae 	.word	0x4211a2ae
 800719c:	42322181 	.word	0x42322181
 80071a0:	424885f8 	.word	0x424885f8
 80071a4:	424cf6d8 	.word	0x424cf6d8
 80071a8:	423cb5f6 	.word	0x423cb5f6
 80071ac:	421add07 	.word	0x421add07
 80071b0:	41df4889 	.word	0x41df4889
 80071b4:	418cbfdd 	.word	0x418cbfdd
 80071b8:	412aca50 	.word	0x412aca50
 80071bc:	411690d0 	.word	0x411690d0
 80071c0:	416d54a3 	.word	0x416d54a3
 80071c4:	41d3bc18 	.word	0x41d3bc18
 80071c8:	4229a447 	.word	0x4229a447
 80071cc:	426f0fff 	.word	0x426f0fff
 80071d0:	42969cd5 	.word	0x42969cd5
 80071d4:	42ac7491 	.word	0x42ac7491
 80071d8:	2400c92c 	.word	0x2400c92c
 80071dc:	0802d340 	.word	0x0802d340
 80071e0:	0802d384 	.word	0x0802d384
 80071e4:	0802d3b4 	.word	0x0802d3b4
 80071e8:	2400c930 	.word	0x2400c930
 80071ec:	0802d3fc 	.word	0x0802d3fc
 80071f0:	2400c938 	.word	0x2400c938

080071f4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]

}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	339c      	adds	r3, #156	; 0x9c
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	429a      	cmp	r2, r3
 800721a:	d106      	bne.n	800722a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff f9f4 	bl	800660a <_ZN15Screen1ViewBase11applicationEv>
 8007222:	4603      	mov	r3, r0
 8007224:	4618      	mov	r0, r3
 8007226:	f7fd fb1b 	bl	8004860 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
    }
}
 800722a:	bf00      	nop
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4618      	mov	r0, r3
 8007240:	f018 fe6a 	bl	801ff18 <_ZN8touchgfx6ScreenC1Ev>
 8007244:	4a05      	ldr	r2, [pc, #20]	; (800725c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	0802e094 	.word	0x0802e094

08007260 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	4a05      	ldr	r2, [pc, #20]	; (8007280 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4618      	mov	r0, r3
 8007272:	f7fc ff83 	bl	800417c <_ZN8touchgfx8DrawableD1Ev>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	0802e82c 	.word	0x0802e82c

08007284 <_ZN8touchgfx9ContainerD0Ev>:
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7ff ffe7 	bl	8007260 <_ZN8touchgfx9ContainerD1Ev>
 8007292:	212c      	movs	r1, #44	; 0x2c
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f024 f912 	bl	802b4be <_ZdlPvj>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <_ZN8touchgfx17AbstractDataGraphD1Ev>:
{
class AbstractGraphElement;
class AbstractGraphDecoration;

/** An abstract data graph. */
class AbstractDataGraph : public Container
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <_ZN8touchgfx17AbstractDataGraphD1Ev+0x54>)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	33e4      	adds	r3, #228	; 0xe4
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7ff ffd2 	bl	8007260 <_ZN8touchgfx9ContainerD1Ev>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	33b8      	adds	r3, #184	; 0xb8
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7ff ffcd 	bl	8007260 <_ZN8touchgfx9ContainerD1Ev>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	338c      	adds	r3, #140	; 0x8c
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7ff ffc8 	bl	8007260 <_ZN8touchgfx9ContainerD1Ev>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3360      	adds	r3, #96	; 0x60
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7ff ffc3 	bl	8007260 <_ZN8touchgfx9ContainerD1Ev>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3334      	adds	r3, #52	; 0x34
 80072de:	4618      	mov	r0, r3
 80072e0:	f7ff ffbe 	bl	8007260 <_ZN8touchgfx9ContainerD1Ev>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff ffba 	bl	8007260 <_ZN8touchgfx9ContainerD1Ev>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4618      	mov	r0, r3
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	0802f4c8 	.word	0x0802f4c8

080072fc <_ZN8touchgfx17AbstractDataGraphD0Ev>:
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff ffcd 	bl	80072a4 <_ZN8touchgfx17AbstractDataGraphD1Ev>
 800730a:	f44f 7194 	mov.w	r1, #296	; 0x128
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f024 f8d5 	bl	802b4be <_ZdlPvj>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <_ZN8touchgfx22AbstractDataGraphWithYD1Ev>:
};

/**
 * Abstract helper class used to implement graphs with the same distance between the x values (i.e. x is ignored).
 */
class AbstractDataGraphWithY : public AbstractDataGraph
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	4a05      	ldr	r2, [pc, #20]	; (8007340 <_ZN8touchgfx22AbstractDataGraphWithYD1Ev+0x20>)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff ffb7 	bl	80072a4 <_ZN8touchgfx17AbstractDataGraphD1Ev>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	0802f5bc 	.word	0x0802f5bc

08007344 <_ZN8touchgfx22AbstractDataGraphWithYD0Ev>:
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff ffe7 	bl	8007320 <_ZN8touchgfx22AbstractDataGraphWithYD1Ev>
 8007352:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f024 f8b1 	bl	802b4be <_ZdlPvj>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <_ZN8touchgfx15DataGraphScrollD1Ev>:
 * DataGraphScroll is used to display a graph that continuously scrolls to the left every
 * time a new value is added to the graph. Because the graph is scrolled every time a new value
 * is added, the graph has to be re-drawn which can be quite demanding for the hardware
 * depending on the graph elements used in the graph.
 */
class DataGraphScroll : public AbstractDataGraphWithY
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	4a05      	ldr	r2, [pc, #20]	; (8007388 <_ZN8touchgfx15DataGraphScrollD1Ev+0x20>)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff ffd1 	bl	8007320 <_ZN8touchgfx22AbstractDataGraphWithYD1Ev>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	0802f844 	.word	0x0802f844

0800738c <_ZN8touchgfx15DataGraphScrollD0Ev>:
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff ffe7 	bl	8007368 <_ZN8touchgfx15DataGraphScrollD1Ev>
 800739a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f024 f88d 	bl	802b4be <_ZdlPvj>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
	...

080073b0 <_ZN8touchgfx11GraphScrollILs100EEC1Ev>:
 */
template <int16_t CAPACITY>
class GraphScroll : public DataGraphScroll
{
public:
    GraphScroll()
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
        : DataGraphScroll(CAPACITY, yValues)
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80073c0:	461a      	mov	r2, r3
 80073c2:	2164      	movs	r1, #100	; 0x64
 80073c4:	f013 feaa 	bl	801b11c <_ZN8touchgfx15DataGraphScrollC1EsPi>
 80073c8:	4a03      	ldr	r2, [pc, #12]	; (80073d8 <_ZN8touchgfx11GraphScrollILs100EEC1Ev+0x28>)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	601a      	str	r2, [r3, #0]
    {
    }
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	0802df68 	.word	0x0802df68

080073dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	4a04      	ldr	r2, [pc, #16]	; (80073f8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	0802e15c 	.word	0x0802e15c

080073fc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	4639      	mov	r1, r7
 8007408:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff ffe4 	bl	80073dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8007414:	4a08      	ldr	r2, [pc, #32]	; (8007438 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	605a      	str	r2, [r3, #4]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3308      	adds	r3, #8
 8007424:	463a      	mov	r2, r7
 8007426:	e892 0003 	ldmia.w	r2, {r0, r1}
 800742a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	0802df50 	.word	0x0802df50

0800743c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
    }
 8007444:	4a04      	ldr	r2, [pc, #16]	; (8007458 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4618      	mov	r0, r3
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	0802e15c 	.word	0x0802e15c

0800745c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
    }
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff ffe9 	bl	800743c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800746a:	2104      	movs	r1, #4
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f024 f826 	bl	802b4be <_ZdlPvj>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	4a05      	ldr	r2, [pc, #20]	; (800749c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4618      	mov	r0, r3
 800748e:	f7ff ffd5 	bl	800743c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4618      	mov	r0, r3
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	0802df50 	.word	0x0802df50

080074a0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff ffe7 	bl	800747c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80074ae:	2110      	movs	r1, #16
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f024 f804 	bl	802b4be <_ZdlPvj>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <_ZN8touchgfx11GraphScrollILs100EED1Ev>:
class GraphScroll : public DataGraphScroll
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	4a05      	ldr	r2, [pc, #20]	; (80074e0 <_ZN8touchgfx11GraphScrollILs100EED1Ev+0x20>)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff ff49 	bl	8007368 <_ZN8touchgfx15DataGraphScrollD1Ev>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	0802df68 	.word	0x0802df68

080074e4 <_ZN8touchgfx11GraphScrollILs100EED0Ev>:
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff ffe7 	bl	80074c0 <_ZN8touchgfx11GraphScrollILs100EED1Ev>
 80074f2:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f023 ffe1 	bl	802b4be <_ZdlPvj>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	4a05      	ldr	r2, [pc, #20]	; (8007528 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4618      	mov	r0, r3
 800751a:	f7fd f897 	bl	800464c <_ZN8touchgfx6WidgetD1Ev>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	0802fcc0 	.word	0x0802fcc0

0800752c <_ZN8touchgfx3BoxD0Ev>:
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff ffe7 	bl	8007508 <_ZN8touchgfx3BoxD1Ev>
 800753a:	212c      	movs	r1, #44	; 0x2c
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f023 ffbe 	bl	802b4be <_ZdlPvj>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <_ZN8touchgfx10TiledImageD1Ev>:
class TiledImage : public Image
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	4a05      	ldr	r2, [pc, #20]	; (800756c <_ZN8touchgfx10TiledImageD1Ev+0x20>)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe fcd5 	bl	8005f0c <_ZN8touchgfx5ImageD1Ev>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4618      	mov	r0, r3
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	0802fd24 	.word	0x0802fd24

08007570 <_ZN8touchgfx10TiledImageD0Ev>:
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff ffe7 	bl	800754c <_ZN8touchgfx10TiledImageD1Ev>
 800757e:	2130      	movs	r1, #48	; 0x30
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f023 ff9c 	bl	802b4be <_ZdlPvj>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <_ZN8touchgfx6ButtonD1Ev>:
{
/**
 * A button with two images. One image showing the unpressed button and one image showing the
 * pressed state.
 */
class Button : public AbstractButton
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	4a05      	ldr	r2, [pc, #20]	; (80075b0 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe fd13 	bl	8005fcc <_ZN8touchgfx14AbstractButtonD1Ev>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	0802ff68 	.word	0x0802ff68

080075b4 <_ZN8touchgfx6ButtonD0Ev>:
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff ffe7 	bl	8007590 <_ZN8touchgfx6ButtonD1Ev>
 80075c2:	2134      	movs	r1, #52	; 0x34
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f023 ff7a 	bl	802b4be <_ZdlPvj>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4618      	mov	r0, r3
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	4a08      	ldr	r2, [pc, #32]	; (8007600 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3334      	adds	r3, #52	; 0x34
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fc fd9c 	bl	8004124 <_ZN8touchgfx9TypedTextD1Ev>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff ffce 	bl	8007590 <_ZN8touchgfx6ButtonD1Ev>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	0803011c 	.word	0x0803011c

08007604 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff ffe1 	bl	80075d4 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8007612:	2148      	movs	r1, #72	; 0x48
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f023 ff52 	bl	802b4be <_ZdlPvj>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	4a05      	ldr	r2, [pc, #20]	; (8007644 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4618      	mov	r0, r3
 8007636:	f7fd f809 	bl	800464c <_ZN8touchgfx6WidgetD1Ev>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	0802f3a8 	.word	0x0802f3a8

08007648 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff ffe7 	bl	8007624 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8007656:	2130      	movs	r1, #48	; 0x30
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f023 ff30 	bl	802b4be <_ZdlPvj>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <_ZN8touchgfx20AbstractGraphElementD1Ev>:
#include <touchgfx/widgets/graph/AbstractDataGraph.hpp>

namespace touchgfx
{
/** An abstract graph element. Declares a couple of useful functions to help subclasses which use CWR (Canvas Widget Renderer). */
class AbstractGraphElement : public CanvasWidget
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	4a05      	ldr	r2, [pc, #20]	; (8007688 <_ZN8touchgfx20AbstractGraphElementD1Ev+0x20>)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4618      	mov	r0, r3
 800767a:	f7ff ffd3 	bl	8007624 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	0802e0c8 	.word	0x0802e0c8

0800768c <_ZN8touchgfx20AbstractGraphElementD0Ev>:
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff ffe7 	bl	8007668 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 800769a:	2134      	movs	r1, #52	; 0x34
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f023 ff0e 	bl	802b4be <_ZdlPvj>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <_ZN8touchgfx16GraphElementLineD1Ev>:
 * GraphElementLine will draw a line with a given thickness through the data points in the graph.
 *
 * @note The Line is drawn using Canvas Widget Renderer which is slower but produces much nicer
 *       graphics.
 */
class GraphElementLine : public AbstractGraphElement
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	4a05      	ldr	r2, [pc, #20]	; (80076cc <_ZN8touchgfx16GraphElementLineD1Ev+0x20>)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff ffd3 	bl	8007668 <_ZN8touchgfx20AbstractGraphElementD1Ev>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	0802f7c4 	.word	0x0802f7c4

080076d0 <_ZN8touchgfx16GraphElementLineD0Ev>:
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff ffe7 	bl	80076ac <_ZN8touchgfx16GraphElementLineD1Ev>
 80076de:	2138      	movs	r1, #56	; 0x38
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f023 feec 	bl	802b4be <_ZdlPvj>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <_ZN8touchgfx13PainterRGB888D1Ev>:
class PainterRGB888 : public AbstractPainterRGB888
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	4a05      	ldr	r2, [pc, #20]	; (8007710 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4618      	mov	r0, r3
 8007702:	f7fe fe1d 	bl	8006340 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	0802f324 	.word	0x0802f324

08007714 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff ffe7 	bl	80076f0 <_ZN8touchgfx13PainterRGB888D1Ev>
 8007722:	2118      	movs	r1, #24
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f023 feca 	bl	802b4be <_ZdlPvj>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextArea
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	4a05      	ldr	r2, [pc, #20]	; (8007754 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4618      	mov	r0, r3
 8007746:	f7fe fea3 	bl	8006490 <_ZN8touchgfx8TextAreaD1Ev>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	0803000c 	.word	0x0803000c

08007758 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff ffe7 	bl	8007734 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8007766:	2140      	movs	r1, #64	; 0x40
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f023 fea8 	bl	802b4be <_ZdlPvj>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	68d2      	ldr	r2, [r2, #12]
 800778a:	1052      	asrs	r2, r2, #1
 800778c:	1898      	adds	r0, r3, r2
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d102      	bne.n	80077a0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	e00a      	b.n	80077b6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	68d2      	ldr	r2, [r2, #12]
 80077a8:	1052      	asrs	r2, r2, #1
 80077aa:	4413      	add	r3, r2
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6892      	ldr	r2, [r2, #8]
 80077b2:	4413      	add	r3, r2
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	4798      	blx	r3
    }
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d010      	beq.n	80077f4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d107      	bne.n	80077ea <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80077ea:	2300      	movs	r3, #0
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d001      	beq.n	80077f4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80077f0:	2301      	movs	r3, #1
 80077f2:	e000      	b.n	80077f6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80077f4:	2300      	movs	r3, #0
    }
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
	...

08007804 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	4a05      	ldr	r2, [pc, #20]	; (8007824 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4618      	mov	r0, r3
 8007816:	f7fe faa7 	bl	8005d68 <_ZN8touchgfx6ScreenD1Ev>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	0802e1c0 	.word	0x0802e1c0

08007828 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ffe7 	bl	8007804 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8007836:	2140      	movs	r1, #64	; 0x40
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f023 fe40 	bl	802b4be <_ZdlPvj>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	4a12      	ldr	r2, [pc, #72]	; (800789c <_ZN15Screen2ViewBaseD1Ev+0x54>)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800785c:	4618      	mov	r0, r3
 800785e:	f000 fa17 	bl	8007c90 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	33e4      	adds	r3, #228	; 0xe4
 8007866:	4618      	mov	r0, r3
 8007868:	f000 faa4 	bl	8007db4 <_ZN8touchgfx5GaugeD1Ev>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	339c      	adds	r3, #156	; 0x9c
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff feaf 	bl	80075d4 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	336c      	adds	r3, #108	; 0x6c
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff fe66 	bl	800754c <_ZN8touchgfx10TiledImageD1Ev>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3340      	adds	r3, #64	; 0x40
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff fe3f 	bl	8007508 <_ZN8touchgfx3BoxD1Ev>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff ffb9 	bl	8007804 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	0802e174 	.word	0x0802e174

080078a0 <_ZN15Screen2ViewBaseD0Ev>:
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff ffcd 	bl	8007848 <_ZN15Screen2ViewBaseD1Ev>
 80078ae:	f44f 7126 	mov.w	r1, #664	; 0x298
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f023 fe03 	bl	802b4be <_ZdlPvj>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b082      	sub	sp, #8
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80078ca:	f016 fff3 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 80078ce:	4603      	mov	r3, r0
    }
 80078d0:	4618      	mov	r0, r3
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase() :
 80078d8:	b590      	push	{r4, r7, lr}
 80078da:	b095      	sub	sp, #84	; 0x54
 80078dc:	af02      	add	r7, sp, #8
 80078de:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 f99e 	bl	8007c24 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 80078e8:	4abb      	ldr	r2, [pc, #748]	; (8007bd8 <_ZN15Screen2ViewBaseC1Ev+0x300>)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	3340      	adds	r3, #64	; 0x40
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fab2 	bl	8005e5c <_ZN8touchgfx3BoxC1Ev>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80078fe:	f107 030c 	add.w	r3, r7, #12
 8007902:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe f9d5 	bl	8005cb6 <_ZN8touchgfx6BitmapC1Et>
 800790c:	f107 030c 	add.w	r3, r7, #12
 8007910:	4619      	mov	r1, r3
 8007912:	4620      	mov	r0, r4
 8007914:	f7fe fb1c 	bl	8005f50 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	339c      	adds	r3, #156	; 0x9c
 800791c:	4618      	mov	r0, r3
 800791e:	f015 fa99 	bl	801ce54 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	33e4      	adds	r3, #228	; 0xe4
 8007926:	4618      	mov	r0, r3
 8007928:	f014 fe56 	bl	801c5d8 <_ZN8touchgfx5GaugeC1Ev>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f503 7022 	add.w	r0, r3, #648	; 0x288
 8007932:	4baa      	ldr	r3, [pc, #680]	; (8007bdc <_ZN15Screen2ViewBaseC1Ev+0x304>)
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	f107 0310 	add.w	r3, r7, #16
 800793e:	cb0c      	ldmia	r3, {r2, r3}
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	f000 f985 	bl	8007c50 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800794c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007956:	2200      	movs	r2, #0
 8007958:	2100      	movs	r1, #0
 800795a:	f7fc fc3a 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007964:	2300      	movs	r3, #0
 8007966:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800796a:	2300      	movs	r3, #0
 800796c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8007970:	2300      	movs	r3, #0
 8007972:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007976:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800797a:	041b      	lsls	r3, r3, #16
 800797c:	461a      	mov	r2, r3
 800797e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007982:	021b      	lsls	r3, r3, #8
 8007984:	431a      	orrs	r2, r3
 8007986:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800798a:	4313      	orrs	r3, r2
 800798c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007990:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe f97e 	bl	8005c98 <_ZN8touchgfx9colortypeC1Em>
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	4619      	mov	r1, r3
 80079a0:	4620      	mov	r0, r4
 80079a2:	f7fe fa7f 	bl	8005ea4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    tiledImage1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_TEXTURES_GPLAYPATTERN_ID));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80079ac:	f107 0318 	add.w	r3, r7, #24
 80079b0:	2104      	movs	r1, #4
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe f97f 	bl	8005cb6 <_ZN8touchgfx6BitmapC1Et>
 80079b8:	f107 0318 	add.w	r3, r7, #24
 80079bc:	4619      	mov	r1, r3
 80079be:	4620      	mov	r0, r4
 80079c0:	f014 fc3b 	bl	801c23a <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
    tiledImage1.setPosition(0, 0, 480, 272);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80079ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80079d4:	2200      	movs	r2, #0
 80079d6:	2100      	movs	r1, #0
 80079d8:	f7fc fbfb 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
    tiledImage1.setOffset(0, 0);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	336c      	adds	r3, #108	; 0x6c
 80079e0:	2200      	movs	r2, #0
 80079e2:	2100      	movs	r1, #0
 80079e4:	4618      	mov	r0, r3
 80079e6:	f014 fc07 	bl	801c1f8 <_ZN8touchgfx10TiledImage9setOffsetEss>

    buttonWithLabel1.setXY(0, 0);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	339c      	adds	r3, #156	; 0x9c
 80079ee:	2200      	movs	r2, #0
 80079f0:	2100      	movs	r1, #0
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fc fc39 	bl	800426a <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80079fe:	f107 031c 	add.w	r3, r7, #28
 8007a02:	2100      	movs	r1, #0
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fe f956 	bl	8005cb6 <_ZN8touchgfx6BitmapC1Et>
 8007a0a:	f107 0320 	add.w	r3, r7, #32
 8007a0e:	2101      	movs	r1, #1
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe f950 	bl	8005cb6 <_ZN8touchgfx6BitmapC1Et>
 8007a16:	f107 0220 	add.w	r2, r7, #32
 8007a1a:	f107 031c 	add.w	r3, r7, #28
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4620      	mov	r0, r4
 8007a22:	f014 ff2b 	bl	801c87c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_44ND));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8007a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a30:	2101      	movs	r1, #1
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe faa6 	bl	8005f84 <_ZN8touchgfx9TypedTextC1Et>
 8007a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f7fe faf6 	bl	8006030 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8007a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fc fb6b 	bl	8004124 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8007a54:	23ff      	movs	r3, #255	; 0xff
 8007a56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8007a5a:	23ff      	movs	r3, #255	; 0xff
 8007a5c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a60:	23ff      	movs	r3, #255	; 0xff
 8007a62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a66:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007a6a:	041b      	lsls	r3, r3, #16
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a72:	021b      	lsls	r3, r3, #8
 8007a74:	431a      	orrs	r2, r3
 8007a76:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007a80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007a84:	4611      	mov	r1, r2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe f906 	bl	8005c98 <_ZN8touchgfx9colortypeC1Em>
 8007a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4620      	mov	r0, r4
 8007a92:	f7fe fadf 	bl	8006054 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8007a9c:	23ff      	movs	r3, #255	; 0xff
 8007a9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007aa2:	23ff      	movs	r3, #255	; 0xff
 8007aa4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8007aa8:	23ff      	movs	r3, #255	; 0xff
 8007aaa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8007aae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007ab2:	041b      	lsls	r3, r3, #16
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007aba:	021b      	lsls	r3, r3, #8
 8007abc:	431a      	orrs	r2, r3
 8007abe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007ac8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007acc:	4611      	mov	r1, r2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe f8e2 	bl	8005c98 <_ZN8touchgfx9colortypeC1Em>
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f7fe fac9 	bl	8006070 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>
    buttonWithLabel1.setAction(buttonCallback);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f7fe fa5f 	bl	8005fb0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    gauge1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_GAUGES_ORIGINAL_GAUGE_BACKGROUND_STYLE_00_ID));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f103 04e4 	add.w	r4, r3, #228	; 0xe4
 8007af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007afc:	2102      	movs	r1, #2
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe f8d9 	bl	8005cb6 <_ZN8touchgfx6BitmapC1Et>
 8007b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f010 f9ad 	bl	8017e6a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gauge1.setPosition(115, 11, 251, 251);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 8007b16:	23fb      	movs	r3, #251	; 0xfb
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	23fb      	movs	r3, #251	; 0xfb
 8007b1c:	220b      	movs	r2, #11
 8007b1e:	2173      	movs	r1, #115	; 0x73
 8007b20:	f7fc fb57 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(125, 125);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	33e4      	adds	r3, #228	; 0xe4
 8007b28:	227d      	movs	r2, #125	; 0x7d
 8007b2a:	217d      	movs	r1, #125	; 0x7d
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f014 fdfe 	bl	801c72e <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(-90, 90);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	33e4      	adds	r3, #228	; 0xe4
 8007b36:	225a      	movs	r2, #90	; 0x5a
 8007b38:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f014 fe7b 	bl	801c838 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(0, 100);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 8007b48:	2300      	movs	r3, #0
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	2264      	movs	r2, #100	; 0x64
 8007b50:	2100      	movs	r1, #0
 8007b52:	f010 f8dd 	bl	8017d10 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(50);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	33e4      	adds	r3, #228	; 0xe4
 8007b5a:	2132      	movs	r1, #50	; 0x32
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f014 fe15 	bl	801c78c <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setEasingEquation(touchgfx::EasingEquations::linearEaseIn);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	33e4      	adds	r3, #228	; 0xe4
 8007b66:	491e      	ldr	r1, [pc, #120]	; (8007be0 <_ZN15Screen2ViewBaseC1Ev+0x308>)
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f010 f860 	bl	8017c2e <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>
    gauge1.setNeedle(BITMAP_BLUE_NEEDLES_ORIGINAL_GAUGE_NEEDLE_STYLE_00_ID, 11, 55);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 8007b74:	2337      	movs	r3, #55	; 0x37
 8007b76:	220b      	movs	r2, #11
 8007b78:	2103      	movs	r1, #3
 8007b7a:	f014 fdc3 	bl	801c704 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	33e4      	adds	r3, #228	; 0xe4
 8007b82:	2101      	movs	r1, #1
 8007b84:	4618      	mov	r0, r3
 8007b86:	f014 fd5f 	bl	801c648 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	33e4      	adds	r3, #228	; 0xe4
 8007b8e:	2101      	movs	r1, #1
 8007b90:	4618      	mov	r0, r3
 8007b92:	f014 fd5c 	bl	801c64e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>

    add(__background);
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3340      	adds	r3, #64	; 0x40
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	f7fe f93a 	bl	8005e18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tiledImage1);
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	336c      	adds	r3, #108	; 0x6c
 8007baa:	4619      	mov	r1, r3
 8007bac:	4610      	mov	r0, r2
 8007bae:	f7fe f933 	bl	8005e18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	339c      	adds	r3, #156	; 0x9c
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	f7fe f92c 	bl	8005e18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gauge1);
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	33e4      	adds	r3, #228	; 0xe4
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4610      	mov	r0, r2
 8007bca:	f7fe f925 	bl	8005e18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	374c      	adds	r7, #76	; 0x4c
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd90      	pop	{r4, r7, pc}
 8007bd8:	0802e174 	.word	0x0802e174
 8007bdc:	08007bf9 	.word	0x08007bf9
 8007be0:	0802033d 	.word	0x0802033d

08007be4 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]

}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	339c      	adds	r3, #156	; 0x9c
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d106      	bne.n	8007c1a <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When buttonWithLabel1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenSlideTransitionWest();
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff fe58 	bl	80078c2 <_ZN15Screen2ViewBase11applicationEv>
 8007c12:	4603      	mov	r3, r0
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fc fddd 	bl	80047d4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>
    }
}
 8007c1a:	bf00      	nop
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f018 f972 	bl	801ff18 <_ZN8touchgfx6ScreenC1Ev>
 8007c34:	4a05      	ldr	r2, [pc, #20]	; (8007c4c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	0802e1c0 	.word	0x0802e1c0

08007c50 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	4639      	mov	r1, r7
 8007c5c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff fbba 	bl	80073dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8007c68:	4a08      	ldr	r2, [pc, #32]	; (8007c8c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	605a      	str	r2, [r3, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3308      	adds	r3, #8
 8007c78:	463a      	mov	r2, r7
 8007c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c7e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	0802e1a8 	.word	0x0802e1a8

08007c90 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	4a05      	ldr	r2, [pc, #20]	; (8007cb0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff fbcb 	bl	800743c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	0802e1a8 	.word	0x0802e1a8

08007cb4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff ffe7 	bl	8007c90 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8007cc2:	2110      	movs	r1, #16
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f023 fbfa 	bl	802b4be <_ZdlPvj>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	4a0a      	ldr	r2, [pc, #40]	; (8007d08 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3358      	adds	r3, #88	; 0x58
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff faba 	bl	8007260 <_ZN8touchgfx9ContainerD1Ev>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	332c      	adds	r3, #44	; 0x2c
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe f90b 	bl	8005f0c <_ZN8touchgfx5ImageD1Ev>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff fab1 	bl	8007260 <_ZN8touchgfx9ContainerD1Ev>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	0802e638 	.word	0x0802e638

08007d0c <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff ffdd 	bl	8007cd4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8007d1a:	21b4      	movs	r1, #180	; 0xb4
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f023 fbce 	bl	802b4be <_ZdlPvj>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <_ZN8touchgfx13TextureMapperD1Ev>:
 * @note The drawing of this widget is not trivial and typically has a significant performance
 *       penalty. The number of pixels drawn, the presence of global alpha or per pixel alpha
 *       inflicts the computation and should be considered.
 * @note This widget does not support 1 bit per pixel color depth.
 */
class TextureMapper : public Image
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	4a05      	ldr	r2, [pc, #20]	; (8007d4c <_ZN8touchgfx13TextureMapperD1Ev+0x20>)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fe f8e5 	bl	8005f0c <_ZN8touchgfx5ImageD1Ev>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	0802f9dc 	.word	0x0802f9dc

08007d50 <_ZN8touchgfx13TextureMapperD0Ev>:
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff ffe7 	bl	8007d2c <_ZN8touchgfx13TextureMapperD1Ev>
 8007d5e:	2190      	movs	r1, #144	; 0x90
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f023 fbac 	bl	802b4be <_ZdlPvj>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <_ZN8touchgfx6CircleD1Ev>:
 *            int x, y, r;
 *            circle.getCenter(&amp;x, &amp;y); // Will return (1, 1)
 *            circle.getRadius(&amp;r); // Will return 0
 *       @endcode.
 */
class Circle : public CanvasWidget
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	4a05      	ldr	r2, [pc, #20]	; (8007d90 <_ZN8touchgfx6CircleD1Ev+0x20>)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7ff fc4f 	bl	8007624 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	0802f2a8 	.word	0x0802f2a8

08007d94 <_ZN8touchgfx6CircleD0Ev>:
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7ff ffe7 	bl	8007d70 <_ZN8touchgfx6CircleD1Ev>
 8007da2:	214c      	movs	r1, #76	; 0x4c
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f023 fb8a 	bl	802b4be <_ZdlPvj>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <_ZN8touchgfx5GaugeD1Ev>:
 * Much like a progress indicator, the minimum and maximum value of the Gauge, as well as steps
 * can be set. For more information on this, consult the documentation on ProgressIndicators.
 *
 * A Gauge has a needle and optionally an arc that follows the needle.
 */
class Gauge : public AbstractProgressIndicator
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	4a0b      	ldr	r2, [pc, #44]	; (8007dec <_ZN8touchgfx5GaugeD1Ev+0x38>)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7ff ffd1 	bl	8007d70 <_ZN8touchgfx6CircleD1Ev>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	33b4      	adds	r3, #180	; 0xb4
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff ffaa 	bl	8007d2c <_ZN8touchgfx13TextureMapperD1Ev>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff ff7a 	bl	8007cd4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	0802fde8 	.word	0x0802fde8

08007df0 <_ZN8touchgfx5GaugeD0Ev>:
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7ff ffdb 	bl	8007db4 <_ZN8touchgfx5GaugeD1Ev>
 8007dfe:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f023 fb5b 	bl	802b4be <_ZdlPvj>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	68d2      	ldr	r2, [r2, #12]
 8007e24:	1052      	asrs	r2, r2, #1
 8007e26:	1898      	adds	r0, r3, r2
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d102      	bne.n	8007e3a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	e00a      	b.n	8007e50 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	68d2      	ldr	r2, [r2, #12]
 8007e42:	1052      	asrs	r2, r2, #1
 8007e44:	4413      	add	r3, r2
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6892      	ldr	r2, [r2, #8]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	4798      	blx	r3
    }
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d010      	beq.n	8007e8e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d107      	bne.n	8007e84 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8007e80:	2301      	movs	r3, #1
 8007e82:	e000      	b.n	8007e86 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8007e84:	2300      	movs	r3, #0
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d001      	beq.n	8007e8e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e000      	b.n	8007e90 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8007e8e:	2300      	movs	r3, #0
    }
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 7, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	4801      	ldr	r0, [pc, #4]	; (8007ea8 <__tcf_0+0xc>)
 8007ea2:	f7fc f91d 	bl	80040e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	240030a8 	.word	0x240030a8

08007eac <_Z23getFont_verdana_10_4bppv>:
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08c      	sub	sp, #48	; 0x30
 8007eb0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 7, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8007eb2:	4b1f      	ldr	r3, [pc, #124]	; (8007f30 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	f3bf 8f5b 	dmb	ish
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	bf0c      	ite	eq
 8007ec4:	2301      	moveq	r3, #1
 8007ec6:	2300      	movne	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d02c      	beq.n	8007f28 <_Z23getFont_verdana_10_4bppv+0x7c>
 8007ece:	4818      	ldr	r0, [pc, #96]	; (8007f30 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007ed0:	f023 faf7 	bl	802b4c2 <__cxa_guard_acquire>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bf14      	ite	ne
 8007eda:	2301      	movne	r3, #1
 8007edc:	2300      	moveq	r3, #0
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d021      	beq.n	8007f28 <_Z23getFont_verdana_10_4bppv+0x7c>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ee8:	2300      	movs	r3, #0
 8007eea:	9309      	str	r3, [sp, #36]	; 0x24
 8007eec:	2300      	movs	r3, #0
 8007eee:	9308      	str	r3, [sp, #32]
 8007ef0:	233f      	movs	r3, #63	; 0x3f
 8007ef2:	9307      	str	r3, [sp, #28]
 8007ef4:	4b0f      	ldr	r3, [pc, #60]	; (8007f34 <_Z23getFont_verdana_10_4bppv+0x88>)
 8007ef6:	9306      	str	r3, [sp, #24]
 8007ef8:	4b0f      	ldr	r3, [pc, #60]	; (8007f38 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8007efa:	9305      	str	r3, [sp, #20]
 8007efc:	2300      	movs	r3, #0
 8007efe:	9304      	str	r3, [sp, #16]
 8007f00:	2300      	movs	r3, #0
 8007f02:	9303      	str	r3, [sp, #12]
 8007f04:	2301      	movs	r3, #1
 8007f06:	9302      	str	r3, [sp, #8]
 8007f08:	2304      	movs	r3, #4
 8007f0a:	9301      	str	r3, [sp, #4]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	230a      	movs	r3, #10
 8007f12:	2207      	movs	r2, #7
 8007f14:	4909      	ldr	r1, [pc, #36]	; (8007f3c <_Z23getFont_verdana_10_4bppv+0x90>)
 8007f16:	480a      	ldr	r0, [pc, #40]	; (8007f40 <_Z23getFont_verdana_10_4bppv+0x94>)
 8007f18:	f7fd fe24 	bl	8005b64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007f1c:	4804      	ldr	r0, [pc, #16]	; (8007f30 <_Z23getFont_verdana_10_4bppv+0x84>)
 8007f1e:	f023 fadc 	bl	802b4da <__cxa_guard_release>
 8007f22:	4808      	ldr	r0, [pc, #32]	; (8007f44 <_Z23getFont_verdana_10_4bppv+0x98>)
 8007f24:	f023 fcbe 	bl	802b8a4 <atexit>
    return verdana_10_4bpp;
 8007f28:	4b05      	ldr	r3, [pc, #20]	; (8007f40 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	240030d0 	.word	0x240030d0
 8007f34:	08031e00 	.word	0x08031e00
 8007f38:	08031e10 	.word	0x08031e10
 8007f3c:	90000314 	.word	0x90000314
 8007f40:	240030a8 	.word	0x240030a8
 8007f44:	08007e9d 	.word	0x08007e9d

08007f48 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 7, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	4801      	ldr	r0, [pc, #4]	; (8007f54 <__tcf_0+0xc>)
 8007f4e:	f7fc f8c7 	bl	80040e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	240030d4 	.word	0x240030d4

08007f58 <_Z23getFont_verdana_20_4bppv>:
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08c      	sub	sp, #48	; 0x30
 8007f5c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 7, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007f5e:	4b1f      	ldr	r3, [pc, #124]	; (8007fdc <_Z23getFont_verdana_20_4bppv+0x84>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	f3bf 8f5b 	dmb	ish
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	bf0c      	ite	eq
 8007f70:	2301      	moveq	r3, #1
 8007f72:	2300      	movne	r3, #0
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d02c      	beq.n	8007fd4 <_Z23getFont_verdana_20_4bppv+0x7c>
 8007f7a:	4818      	ldr	r0, [pc, #96]	; (8007fdc <_Z23getFont_verdana_20_4bppv+0x84>)
 8007f7c:	f023 faa1 	bl	802b4c2 <__cxa_guard_acquire>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	bf14      	ite	ne
 8007f86:	2301      	movne	r3, #1
 8007f88:	2300      	moveq	r3, #0
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d021      	beq.n	8007fd4 <_Z23getFont_verdana_20_4bppv+0x7c>
 8007f90:	2300      	movs	r3, #0
 8007f92:	930a      	str	r3, [sp, #40]	; 0x28
 8007f94:	2300      	movs	r3, #0
 8007f96:	9309      	str	r3, [sp, #36]	; 0x24
 8007f98:	2300      	movs	r3, #0
 8007f9a:	9308      	str	r3, [sp, #32]
 8007f9c:	233f      	movs	r3, #63	; 0x3f
 8007f9e:	9307      	str	r3, [sp, #28]
 8007fa0:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <_Z23getFont_verdana_20_4bppv+0x88>)
 8007fa2:	9306      	str	r3, [sp, #24]
 8007fa4:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8007fa6:	9305      	str	r3, [sp, #20]
 8007fa8:	2300      	movs	r3, #0
 8007faa:	9304      	str	r3, [sp, #16]
 8007fac:	2300      	movs	r3, #0
 8007fae:	9303      	str	r3, [sp, #12]
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	9302      	str	r3, [sp, #8]
 8007fb4:	2304      	movs	r3, #4
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	2314      	movs	r3, #20
 8007fbe:	2207      	movs	r2, #7
 8007fc0:	4909      	ldr	r1, [pc, #36]	; (8007fe8 <_Z23getFont_verdana_20_4bppv+0x90>)
 8007fc2:	480a      	ldr	r0, [pc, #40]	; (8007fec <_Z23getFont_verdana_20_4bppv+0x94>)
 8007fc4:	f7fd fdce 	bl	8005b64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007fc8:	4804      	ldr	r0, [pc, #16]	; (8007fdc <_Z23getFont_verdana_20_4bppv+0x84>)
 8007fca:	f023 fa86 	bl	802b4da <__cxa_guard_release>
 8007fce:	4808      	ldr	r0, [pc, #32]	; (8007ff0 <_Z23getFont_verdana_20_4bppv+0x98>)
 8007fd0:	f023 fc68 	bl	802b8a4 <atexit>
    return verdana_20_4bpp;
 8007fd4:	4b05      	ldr	r3, [pc, #20]	; (8007fec <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	240030fc 	.word	0x240030fc
 8007fe0:	08031e04 	.word	0x08031e04
 8007fe4:	08031e14 	.word	0x08031e14
 8007fe8:	90000378 	.word	0x90000378
 8007fec:	240030d4 	.word	0x240030d4
 8007ff0:	08007f49 	.word	0x08007f49

08007ff4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	4801      	ldr	r0, [pc, #4]	; (8008000 <__tcf_0+0xc>)
 8007ffa:	f7fc f871 	bl	80040e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	24003100 	.word	0x24003100

08008004 <_Z23getFont_verdana_40_4bppv>:
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08c      	sub	sp, #48	; 0x30
 8008008:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800800a:	4b1f      	ldr	r3, [pc, #124]	; (8008088 <_Z23getFont_verdana_40_4bppv+0x84>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	f3bf 8f5b 	dmb	ish
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	bf0c      	ite	eq
 800801c:	2301      	moveq	r3, #1
 800801e:	2300      	movne	r3, #0
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d02c      	beq.n	8008080 <_Z23getFont_verdana_40_4bppv+0x7c>
 8008026:	4818      	ldr	r0, [pc, #96]	; (8008088 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008028:	f023 fa4b 	bl	802b4c2 <__cxa_guard_acquire>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	bf14      	ite	ne
 8008032:	2301      	movne	r3, #1
 8008034:	2300      	moveq	r3, #0
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d021      	beq.n	8008080 <_Z23getFont_verdana_40_4bppv+0x7c>
 800803c:	2300      	movs	r3, #0
 800803e:	930a      	str	r3, [sp, #40]	; 0x28
 8008040:	2300      	movs	r3, #0
 8008042:	9309      	str	r3, [sp, #36]	; 0x24
 8008044:	2300      	movs	r3, #0
 8008046:	9308      	str	r3, [sp, #32]
 8008048:	233f      	movs	r3, #63	; 0x3f
 800804a:	9307      	str	r3, [sp, #28]
 800804c:	4b0f      	ldr	r3, [pc, #60]	; (800808c <_Z23getFont_verdana_40_4bppv+0x88>)
 800804e:	9306      	str	r3, [sp, #24]
 8008050:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8008052:	9305      	str	r3, [sp, #20]
 8008054:	2300      	movs	r3, #0
 8008056:	9304      	str	r3, [sp, #16]
 8008058:	2300      	movs	r3, #0
 800805a:	9303      	str	r3, [sp, #12]
 800805c:	2301      	movs	r3, #1
 800805e:	9302      	str	r3, [sp, #8]
 8008060:	2304      	movs	r3, #4
 8008062:	9301      	str	r3, [sp, #4]
 8008064:	2300      	movs	r3, #0
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	2328      	movs	r3, #40	; 0x28
 800806a:	2201      	movs	r2, #1
 800806c:	4909      	ldr	r1, [pc, #36]	; (8008094 <_Z23getFont_verdana_40_4bppv+0x90>)
 800806e:	480a      	ldr	r0, [pc, #40]	; (8008098 <_Z23getFont_verdana_40_4bppv+0x94>)
 8008070:	f7fd fd78 	bl	8005b64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8008074:	4804      	ldr	r0, [pc, #16]	; (8008088 <_Z23getFont_verdana_40_4bppv+0x84>)
 8008076:	f023 fa30 	bl	802b4da <__cxa_guard_release>
 800807a:	4808      	ldr	r0, [pc, #32]	; (800809c <_Z23getFont_verdana_40_4bppv+0x98>)
 800807c:	f023 fc12 	bl	802b8a4 <atexit>
    return verdana_40_4bpp;
 8008080:	4b05      	ldr	r3, [pc, #20]	; (8008098 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8008082:	4618      	mov	r0, r3
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	24003128 	.word	0x24003128
 800808c:	08031e0c 	.word	0x08031e0c
 8008090:	08031e18 	.word	0x08031e18
 8008094:	900003dc 	.word	0x900003dc
 8008098:	24003100 	.word	0x24003100
 800809c:	08007ff5 	.word	0x08007ff5

080080a0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	460b      	mov	r3, r1
 80080aa:	607a      	str	r2, [r7, #4]
 80080ac:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 80080ae:	2300      	movs	r3, #0
    }
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80080c4:	2300      	movs	r3, #0
    }
 80080c6:	4618      	mov	r0, r3
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80080da:	2300      	movs	r3, #0
    }
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	4613      	mov	r3, r2
 80080f4:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80080f6:	4a07      	ldr	r2, [pc, #28]	; (8008114 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6013      	str	r3, [r2, #0]
        fonts = f;
 80080fc:	4a06      	ldr	r2, [pc, #24]	; (8008118 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8008102:	4a06      	ldr	r2, [pc, #24]	; (800811c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8008104:	88fb      	ldrh	r3, [r7, #6]
 8008106:	8013      	strh	r3, [r2, #0]
    }
 8008108:	bf00      	nop
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	2400c92c 	.word	0x2400c92c
 8008118:	2400c934 	.word	0x2400c934
 800811c:	2400c930 	.word	0x2400c930

08008120 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008120:	b40e      	push	{r1, r2, r3}
 8008122:	b580      	push	{r7, lr}
 8008124:	b085      	sub	sp, #20
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800812a:	f107 0320 	add.w	r3, r7, #32
 800812e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	69fa      	ldr	r2, [r7, #28]
 8008134:	2100      	movs	r1, #0
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f017 fa64 	bl	801f604 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800813c:	4603      	mov	r3, r0
 800813e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008140:	89fb      	ldrh	r3, [r7, #14]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800814c:	b003      	add	sp, #12
 800814e:	4770      	bx	lr

08008150 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8008150:	b40c      	push	{r2, r3}
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800815e:	f107 031c 	add.w	r3, r7, #28
 8008162:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8008164:	78f9      	ldrb	r1, [r7, #3]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f017 fa4a 	bl	801f604 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8008170:	4603      	mov	r3, r0
 8008172:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8008174:	89fb      	ldrh	r3, [r7, #14]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008180:	b002      	add	sp, #8
 8008182:	4770      	bx	lr

08008184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08a      	sub	sp, #40	; 0x28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008194:	2b00      	cmp	r3, #0
 8008196:	d016      	beq.n	80081c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3322      	adds	r3, #34	; 0x22
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	8adb      	ldrh	r3, [r3, #22]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d105      	bne.n	80081b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80081a6:	4b43      	ldr	r3, [pc, #268]	; (80082b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80081a8:	4a43      	ldr	r2, [pc, #268]	; (80082b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80081aa:	21c0      	movs	r1, #192	; 0xc0
 80081ac:	4843      	ldr	r0, [pc, #268]	; (80082bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80081ae:	f023 fb5b 	bl	802b868 <__assert_func>
            return buffer[pos];
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	8a9b      	ldrh	r3, [r3, #20]
 80081b6:	461a      	mov	r2, r3
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e000      	b.n	80081c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80081c6:	2300      	movs	r3, #0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d06a      	beq.n	80082a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f018 fe21 	bl	8020e14 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	3322      	adds	r3, #34	; 0x22
 80081d6:	623b      	str	r3, [r7, #32]
 80081d8:	2301      	movs	r3, #1
 80081da:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	8adb      	ldrh	r3, [r3, #22]
 80081e0:	8bfa      	ldrh	r2, [r7, #30]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d305      	bcc.n	80081f2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80081e6:	4b36      	ldr	r3, [pc, #216]	; (80082c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80081e8:	4a36      	ldr	r2, [pc, #216]	; (80082c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80081ea:	21c5      	movs	r1, #197	; 0xc5
 80081ec:	4833      	ldr	r0, [pc, #204]	; (80082bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80081ee:	f023 fb3b 	bl	802b868 <__assert_func>
            const uint16_t index = pos + offset;
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	8a9a      	ldrh	r2, [r3, #20]
 80081f6:	8bfb      	ldrh	r3, [r7, #30]
 80081f8:	4413      	add	r3, r2
 80081fa:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80081fc:	8bbb      	ldrh	r3, [r7, #28]
 80081fe:	2b09      	cmp	r3, #9
 8008200:	d801      	bhi.n	8008206 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8008202:	8bbb      	ldrh	r3, [r7, #28]
 8008204:	e001      	b.n	800820a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8008206:	8bbb      	ldrh	r3, [r7, #28]
 8008208:	3b0a      	subs	r3, #10
 800820a:	6a3a      	ldr	r2, [r7, #32]
 800820c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008210:	f640 123f 	movw	r2, #2367	; 0x93f
 8008214:	4293      	cmp	r3, r2
 8008216:	bf0c      	ite	eq
 8008218:	2301      	moveq	r3, #1
 800821a:	2300      	movne	r3, #0
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d03f      	beq.n	80082a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3322      	adds	r3, #34	; 0x22
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	3222      	adds	r2, #34	; 0x22
 800822a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	8ad2      	ldrh	r2, [r2, #22]
 8008230:	2a00      	cmp	r2, #0
 8008232:	d105      	bne.n	8008240 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8008234:	4b1f      	ldr	r3, [pc, #124]	; (80082b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8008236:	4a20      	ldr	r2, [pc, #128]	; (80082b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8008238:	21c0      	movs	r1, #192	; 0xc0
 800823a:	4820      	ldr	r0, [pc, #128]	; (80082bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800823c:	f023 fb14 	bl	802b868 <__assert_func>
            return buffer[pos];
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	8a92      	ldrh	r2, [r2, #20]
 8008244:	4611      	mov	r1, r2
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800824c:	613b      	str	r3, [r7, #16]
 800824e:	4613      	mov	r3, r2
 8008250:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	8adb      	ldrh	r3, [r3, #22]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d806      	bhi.n	8008268 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800825a:	4b1b      	ldr	r3, [pc, #108]	; (80082c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800825c:	4a1b      	ldr	r2, [pc, #108]	; (80082cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800825e:	f240 110d 	movw	r1, #269	; 0x10d
 8008262:	4816      	ldr	r0, [pc, #88]	; (80082bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8008264:	f023 fb00 	bl	802b868 <__assert_func>
            const uint16_t index = pos + 1;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	8a9b      	ldrh	r3, [r3, #20]
 800826c:	3301      	adds	r3, #1
 800826e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8008270:	89bb      	ldrh	r3, [r7, #12]
 8008272:	2b09      	cmp	r3, #9
 8008274:	d801      	bhi.n	800827a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8008276:	89bb      	ldrh	r3, [r7, #12]
 8008278:	e000      	b.n	800827c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800827a:	2300      	movs	r3, #0
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	89f9      	ldrh	r1, [r7, #14]
 8008280:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8008284:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	3322      	adds	r3, #34	; 0x22
 800828a:	61bb      	str	r3, [r7, #24]
 800828c:	f640 133f 	movw	r3, #2367	; 0x93f
 8008290:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	8a9b      	ldrh	r3, [r3, #20]
 8008296:	4619      	mov	r1, r3
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	8afa      	ldrh	r2, [r7, #22]
 800829c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80082a0:	bf00      	nop
        }
    }
    return getNextChar();
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f018 fc9a 	bl	8020bdc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80082a8:	4603      	mov	r3, r0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3728      	adds	r7, #40	; 0x28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	0802d550 	.word	0x0802d550
 80082b8:	0802d55c 	.word	0x0802d55c
 80082bc:	0802d608 	.word	0x0802d608
 80082c0:	0802d654 	.word	0x0802d654
 80082c4:	0802d664 	.word	0x0802d664
 80082c8:	0802d738 	.word	0x0802d738
 80082cc:	0802d744 	.word	0x0802d744

080082d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f018 fc37 	bl	8020b4c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80082de:	bf00      	nop
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b088      	sub	sp, #32
 80082ea:	af02      	add	r7, sp, #8
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	1d38      	adds	r0, r7, #4
 80082f0:	e880 0006 	stmia.w	r0, {r1, r2}
 80082f4:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80082f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082fa:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80082fc:	1d39      	adds	r1, r7, #4
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f015 fe9e 	bl	801e04c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8008310:	bf00      	nop
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8008318:	b590      	push	{r4, r7, lr}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8008326:	88fb      	ldrh	r3, [r7, #6]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d127      	bne.n	800837c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800832c:	88fb      	ldrh	r3, [r7, #6]
 800832e:	4a1e      	ldr	r2, [pc, #120]	; (80083a8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8008330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d016      	beq.n	8008366 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8008338:	88fb      	ldrh	r3, [r7, #6]
 800833a:	4a1b      	ldr	r2, [pc, #108]	; (80083a8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800833c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008340:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	4413      	add	r3, r2
 800834a:	4a18      	ldr	r2, [pc, #96]	; (80083ac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800834c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	4413      	add	r3, r2
 8008356:	4a16      	ldr	r2, [pc, #88]	; (80083b0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008358:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	4413      	add	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	e00a      	b.n	800837c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8008366:	4b11      	ldr	r3, [pc, #68]	; (80083ac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8008368:	4a12      	ldr	r2, [pc, #72]	; (80083b4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800836a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800836c:	4a12      	ldr	r2, [pc, #72]	; (80083b8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800836e:	4b10      	ldr	r3, [pc, #64]	; (80083b0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8008370:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8008372:	88fb      	ldrh	r3, [r7, #6]
 8008374:	4a11      	ldr	r2, [pc, #68]	; (80083bc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8008376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800837a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00d      	beq.n	800839e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8008382:	4a0f      	ldr	r2, [pc, #60]	; (80083c0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8008388:	f000 f83e 	bl	8008408 <_ZN17TypedTextDatabase8getFontsEv>
 800838c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800838e:	f000 f833 	bl	80083f8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8008392:	4603      	mov	r3, r0
 8008394:	461a      	mov	r2, r3
 8008396:	4621      	mov	r1, r4
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f7ff fea5 	bl	80080e8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800839e:	bf00      	nop
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd90      	pop	{r4, r7, pc}
 80083a6:	bf00      	nop
 80083a8:	2400312c 	.word	0x2400312c
 80083ac:	24003134 	.word	0x24003134
 80083b0:	24003138 	.word	0x24003138
 80083b4:	900003fc 	.word	0x900003fc
 80083b8:	900003ec 	.word	0x900003ec
 80083bc:	90000428 	.word	0x90000428
 80083c0:	24003130 	.word	0x24003130

080083c4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80083d6:	6819      	ldr	r1, [r3, #0]
 80083d8:	887b      	ldrh	r3, [r7, #2]
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	4413      	add	r3, r2
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	24003134 	.word	0x24003134
 80083f4:	24003138 	.word	0x24003138

080083f8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80083f8:	b480      	push	{r7}
 80083fa:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80083fc:	2304      	movs	r3, #4
}
 80083fe:	4618      	mov	r0, r3
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800840c:	4b02      	ldr	r3, [pc, #8]	; (8008418 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800840e:	4618      	mov	r0, r3
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	2400313c 	.word	0x2400313c

0800841c <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d113      	bne.n	8008454 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008432:	4293      	cmp	r3, r2
 8008434:	d10e      	bne.n	8008454 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8008436:	f7ff fd8f 	bl	8007f58 <_Z23getFont_verdana_20_4bppv>
 800843a:	4603      	mov	r3, r0
};
 800843c:	4a07      	ldr	r2, [pc, #28]	; (800845c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800843e:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8008440:	f7ff fde0 	bl	8008004 <_Z23getFont_verdana_40_4bppv>
 8008444:	4603      	mov	r3, r0
};
 8008446:	4a05      	ldr	r2, [pc, #20]	; (800845c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008448:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800844a:	f7ff fd2f 	bl	8007eac <_Z23getFont_verdana_10_4bppv>
 800844e:	4603      	mov	r3, r0
};
 8008450:	4a02      	ldr	r2, [pc, #8]	; (800845c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008452:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	2400313c 	.word	0x2400313c

08008460 <_GLOBAL__sub_I_touchgfx_fonts>:
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
 8008464:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008468:	2001      	movs	r0, #1
 800846a:	f7ff ffd7 	bl	800841c <_Z41__static_initialization_and_destruction_0ii>
 800846e:	bd80      	pop	{r7, pc}

08008470 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	68b9      	ldr	r1, [r7, #8]
 8008482:	4618      	mov	r0, r3
 8008484:	f7fc f904 	bl	8004690 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8008488:	4a03      	ldr	r2, [pc, #12]	; (8008498 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	601a      	str	r2, [r3, #0]
{

}
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	0802da90 	.word	0x0802da90

0800849c <_ZN5ModelC1Ev>:
#include <gui/model/ModelListener.hpp>
#include "stm32h7xx_hal.h"

extern __IO uint16_t uhADCxConvertedData;

Model::Model() : modelListener(0)
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	601a      	str	r2, [r3, #0]
{

}
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <_ZN5Model4tickEv>:

void Model::tick()
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
	modelListener->UpdateGraph(uhADCxConvertedData * 3300 / 65535);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3308      	adds	r3, #8
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	4b0b      	ldr	r3, [pc, #44]	; (80084fc <_ZN5Model4tickEv+0x44>)
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	4619      	mov	r1, r3
 80084d6:	f640 43e4 	movw	r3, #3300	; 0xce4
 80084da:	fb03 f301 	mul.w	r3, r3, r1
 80084de:	4908      	ldr	r1, [pc, #32]	; (8008500 <_ZN5Model4tickEv+0x48>)
 80084e0:	fb81 c103 	smull	ip, r1, r1, r3
 80084e4:	4419      	add	r1, r3
 80084e6:	13c9      	asrs	r1, r1, #15
 80084e8:	17db      	asrs	r3, r3, #31
 80084ea:	1acb      	subs	r3, r1, r3
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4619      	mov	r1, r3
 80084f0:	4790      	blx	r2
}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	2400cd9c 	.word	0x2400cd9c
 8008500:	80008001 	.word	0x80008001

08008504 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
    {
    }
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
    {
    }
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
    {
 8008534:	4a04      	ldr	r2, [pc, #16]	; (8008548 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	601a      	str	r2, [r3, #0]
    }
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4618      	mov	r0, r3
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	0802e28c 	.word	0x0802e28c

0800854c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
    }
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff ffe9 	bl	800852c <_ZN8touchgfx9PresenterD1Ev>
 800855a:	2104      	movs	r1, #4
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f022 ffae 	bl	802b4be <_ZdlPvj>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
    {
 8008574:	4a04      	ldr	r2, [pc, #16]	; (8008588 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	601a      	str	r2, [r3, #0]
    }
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	0802e28c 	.word	0x0802e28c

0800858c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	4a06      	ldr	r2, [pc, #24]	; (80085b0 <_ZN13ModelListenerC1Ev+0x24>)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	605a      	str	r2, [r3, #4]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4618      	mov	r0, r3
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	0802e278 	.word	0x0802e278

080085b4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	4a04      	ldr	r2, [pc, #16]	; (80085d0 <_ZN13ModelListenerD1Ev+0x1c>)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	0802e278 	.word	0x0802e278

080085d4 <_ZN13ModelListenerD0Ev>:
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff ffe9 	bl	80085b4 <_ZN13ModelListenerD1Ev>
 80085e2:	2108      	movs	r1, #8
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f022 ff6a 	bl	802b4be <_ZdlPvj>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <_ZN13ModelListener11UpdateGraphEt>:
    virtual void UpdateGraph(uint16_t value){}
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	807b      	strh	r3, [r7, #2]
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	4a09      	ldr	r2, [pc, #36]	; (800863c <_ZN16Screen1PresenterD1Ev+0x30>)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	4a09      	ldr	r2, [pc, #36]	; (8008640 <_ZN16Screen1PresenterD1Ev+0x34>)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	605a      	str	r2, [r3, #4]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3304      	adds	r3, #4
 8008624:	4618      	mov	r0, r3
 8008626:	f7ff ffc5 	bl	80085b4 <_ZN13ModelListenerD1Ev>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4618      	mov	r0, r3
 800862e:	f7ff ff7d 	bl	800852c <_ZN8touchgfx9PresenterD1Ev>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	0802e248 	.word	0x0802e248
 8008640:	0802e264 	.word	0x0802e264

08008644 <_ZThn4_N16Screen1PresenterD1Ev>:
 8008644:	f1a0 0004 	sub.w	r0, r0, #4
 8008648:	e7e0      	b.n	800860c <_ZN16Screen1PresenterD1Ev>
 800864a:	bf00      	nop

0800864c <_ZN16Screen1PresenterD0Ev>:
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7ff ffd9 	bl	800860c <_ZN16Screen1PresenterD1Ev>
 800865a:	2110      	movs	r1, #16
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f022 ff2e 	bl	802b4be <_ZdlPvj>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <_ZThn4_N16Screen1PresenterD0Ev>:
 800866c:	f1a0 0004 	sub.w	r0, r0, #4
 8008670:	e7ec      	b.n	800864c <_ZN16Screen1PresenterD0Ev>
	...

08008674 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
    : view(v)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff ff73 	bl	800856c <_ZN8touchgfx9PresenterC1Ev>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3304      	adds	r3, #4
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff ff7e 	bl	800858c <_ZN13ModelListenerC1Ev>
 8008690:	4a06      	ldr	r2, [pc, #24]	; (80086ac <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	601a      	str	r2, [r3, #0]
 8008696:	4a06      	ldr	r2, [pc, #24]	; (80086b0 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	605a      	str	r2, [r3, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	60da      	str	r2, [r3, #12]
{

}
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	0802e248 	.word	0x0802e248
 80086b0:	0802e264 	.word	0x0802e264

080086b4 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]

}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]

}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <_ZN16Screen1Presenter11UpdateGraphEt>:
void Screen1Presenter::UpdateGraph(uint16_t value)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	807b      	strh	r3, [r7, #2]
	view.UpdateGraph(value);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	887a      	ldrh	r2, [r7, #2]
 80086ee:	4611      	mov	r1, r2
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 f857 	bl	80087a4 <_ZN11Screen1View11UpdateGraphEt>
}
 80086f6:	bf00      	nop
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <_ZThn4_N16Screen1Presenter11UpdateGraphEt>:
    void UpdateGraph(uint16_t value);
 80086fe:	f1a0 0004 	sub.w	r0, r0, #4
 8008702:	f7ff bfeb 	b.w	80086dc <_ZN16Screen1Presenter11UpdateGraphEt>
	...

08008708 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	4a05      	ldr	r2, [pc, #20]	; (8008728 <_ZN11Screen1ViewD1Ev+0x20>)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4618      	mov	r0, r3
 800871a:	f7fd ff27 	bl	800656c <_ZN15Screen1ViewBaseD1Ev>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	0802e2a4 	.word	0x0802e2a4

0800872c <_ZN11Screen1ViewD0Ev>:
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff ffe7 	bl	8008708 <_ZN11Screen1ViewD1Ev>
 800873a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f022 febd 	bl	802b4be <_ZdlPvj>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4618      	mov	r0, r3
 800875c:	f7fd ff60 	bl	8006620 <_ZN15Screen1ViewBaseC1Ev>
 8008760:	4a03      	ldr	r2, [pc, #12]	; (8008770 <_ZN11Screen1ViewC1Ev+0x20>)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	601a      	str	r2, [r3, #0]
{

}
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4618      	mov	r0, r3
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	0802e2a4 	.word	0x0802e2a4

08008774 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe fd38 	bl	80071f4 <_ZN15Screen1ViewBase11setupScreenEv>
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4618      	mov	r0, r3
 8008798:	f7fd fb1e 	bl	8005dd8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800879c:	bf00      	nop
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <_ZN11Screen1View11UpdateGraphEt>:
void Screen1View::UpdateGraph(uint16_t value)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	807b      	strh	r3, [r7, #2]
	dynamicGraph1.addDataPoint(value);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	33e4      	adds	r3, #228	; 0xe4
 80087b4:	887a      	ldrh	r2, [r7, #2]
 80087b6:	4611      	mov	r1, r2
 80087b8:	4618      	mov	r0, r3
 80087ba:	f012 f9f7 	bl	801abac <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEi>
}
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	4a09      	ldr	r2, [pc, #36]	; (80087f8 <_ZN16Screen2PresenterD1Ev+0x30>)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	4a09      	ldr	r2, [pc, #36]	; (80087fc <_ZN16Screen2PresenterD1Ev+0x34>)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	605a      	str	r2, [r3, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3304      	adds	r3, #4
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff fee7 	bl	80085b4 <_ZN13ModelListenerD1Ev>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7ff fe9f 	bl	800852c <_ZN8touchgfx9PresenterD1Ev>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	0802e2d8 	.word	0x0802e2d8
 80087fc:	0802e2f0 	.word	0x0802e2f0

08008800 <_ZThn4_N16Screen2PresenterD1Ev>:
 8008800:	f1a0 0004 	sub.w	r0, r0, #4
 8008804:	e7e0      	b.n	80087c8 <_ZN16Screen2PresenterD1Ev>
 8008806:	bf00      	nop

08008808 <_ZN16Screen2PresenterD0Ev>:
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff ffd9 	bl	80087c8 <_ZN16Screen2PresenterD1Ev>
 8008816:	2110      	movs	r1, #16
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f022 fe50 	bl	802b4be <_ZdlPvj>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <_ZThn4_N16Screen2PresenterD0Ev>:
 8008828:	f1a0 0004 	sub.w	r0, r0, #4
 800882c:	e7ec      	b.n	8008808 <_ZN16Screen2PresenterD0Ev>
	...

08008830 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
    : view(v)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4618      	mov	r0, r3
 800883e:	f7ff fe95 	bl	800856c <_ZN8touchgfx9PresenterC1Ev>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	3304      	adds	r3, #4
 8008846:	4618      	mov	r0, r3
 8008848:	f7ff fea0 	bl	800858c <_ZN13ModelListenerC1Ev>
 800884c:	4a06      	ldr	r2, [pc, #24]	; (8008868 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	4a06      	ldr	r2, [pc, #24]	; (800886c <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	605a      	str	r2, [r3, #4]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	60da      	str	r2, [r3, #12]
{

}
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	0802e2d8 	.word	0x0802e2d8
 800886c:	0802e2f0 	.word	0x0802e2f0

08008870 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]

}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]

}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	4a05      	ldr	r2, [pc, #20]	; (80088b8 <_ZN11Screen2ViewD1Ev+0x20>)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fe ffcd 	bl	8007848 <_ZN15Screen2ViewBaseD1Ev>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	0802e304 	.word	0x0802e304

080088bc <_ZN11Screen2ViewD0Ev>:
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7ff ffe7 	bl	8008898 <_ZN11Screen2ViewD1Ev>
 80088ca:	f44f 7126 	mov.w	r1, #664	; 0x298
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f022 fdf5 	bl	802b4be <_ZdlPvj>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fff4 	bl	80078d8 <_ZN15Screen2ViewBaseC1Ev>
 80088f0:	4a03      	ldr	r2, [pc, #12]	; (8008900 <_ZN11Screen2ViewC1Ev+0x20>)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	601a      	str	r2, [r3, #0]
{

}
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	0802e304 	.word	0x0802e304

08008904 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4618      	mov	r0, r3
 8008910:	f7ff f968 	bl	8007be4 <_ZN15Screen2ViewBase11setupScreenEv>
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4618      	mov	r0, r3
 8008928:	f7fd fa56 	bl	8005dd8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d103      	bne.n	800894c <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8008944:	f04f 33ff 	mov.w	r3, #4294967295
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	e02c      	b.n	80089a6 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	891a      	ldrh	r2, [r3, #8]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	691a      	ldr	r2, [r3, #16]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	695a      	ldr	r2, [r3, #20]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a0c      	ldr	r2, [pc, #48]	; (80089b0 <FT5336_RegisterBusIO+0x7c>)
 8008980:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a0b      	ldr	r2, [pc, #44]	; (80089b4 <FT5336_RegisterBusIO+0x80>)
 8008986:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d004      	beq.n	80089a0 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4798      	blx	r3
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	e002      	b.n	80089a6 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 80089a0:	f04f 33ff 	mov.w	r3, #4294967295
 80089a4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80089a6:	68fb      	ldr	r3, [r7, #12]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	08008dbb 	.word	0x08008dbb
 80089b4:	08008def 	.word	0x08008def

080089b8 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	2201      	movs	r2, #1
 80089c6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2201      	movs	r2, #1
 80089cc:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2205      	movs	r2, #5
 80089d2:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80089da:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	f44f 7288 	mov.w	r2, #272	; 0x110
 80089e2:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10d      	bne.n	8008a24 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f98e 	bl	8008d30 <FT5336_DisableIT>
 8008a14:	4602      	mov	r2, r0
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4413      	add	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8008a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a2e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008a30:	68fb      	ldr	r3, [r7, #12]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b085      	sub	sp, #20
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d103      	bne.n	8008a58 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 8008a58:	68fb      	ldr	r3, [r7, #12]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f103 0218 	add.w	r2, r3, #24
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4610      	mov	r0, r2
 8008a80:	f000 fa2c 	bl	8008edc <ft5336_radian_value>
 8008a84:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f103 0218 	add.w	r2, r3, #24
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	4619      	mov	r1, r3
 8008a94:	4610      	mov	r0, r2
 8008a96:	f000 fa32 	bl	8008efe <ft5336_offset_left_right>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f103 0218 	add.w	r2, r3, #24
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	4619      	mov	r1, r3
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	f000 fa35 	bl	8008f20 <ft5336_offset_up_down>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4413      	add	r3, r2
 8008abc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f103 0218 	add.w	r2, r3, #24
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	4619      	mov	r1, r3
 8008acc:	4610      	mov	r0, r2
 8008ace:	f000 fa38 	bl	8008f42 <ft5336_disatnce_left_right>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f103 0218 	add.w	r2, r3, #24
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4610      	mov	r0, r2
 8008aea:	f000 fa3b 	bl	8008f64 <ft5336_distance_up_down>
 8008aee:	4602      	mov	r2, r0
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4413      	add	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f103 0218 	add.w	r2, r3, #24
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	4619      	mov	r1, r3
 8008b04:	4610      	mov	r0, r2
 8008b06:	f000 fa3e 	bl	8008f86 <ft5336_distance_zoom>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4413      	add	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d002      	beq.n	8008b1e <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8008b18:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3318      	adds	r3, #24
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 fa46 	bl	8008fca <ft5336_chip_id>
 8008b3e:	4603      	mov	r3, r0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f90f 	bl	8008d7a <FT5336_DetectTouch>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	461a      	mov	r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f103 0018 	add.w	r0, r3, #24
 8008b6a:	f107 0208 	add.w	r2, r7, #8
 8008b6e:	2304      	movs	r3, #4
 8008b70:	2103      	movs	r1, #3
 8008b72:	f000 f956 	bl	8008e22 <ft5336_read_reg>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 8008b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	e00f      	b.n	8008ba4 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8008b84:	7a3b      	ldrb	r3, [r7, #8]
 8008b86:	021b      	lsls	r3, r3, #8
 8008b88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008b8c:	7a7a      	ldrb	r2, [r7, #9]
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8008b94:	7abb      	ldrb	r3, [r7, #10]
 8008b96:	021b      	lsls	r3, r3, #8
 8008b98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008b9c:	7afa      	ldrb	r2, [r7, #11]
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b08c      	sub	sp, #48	; 0x30
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f8dc 	bl	8008d7a <FT5336_DetectTouch>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f103 0018 	add.w	r0, r3, #24
 8008bd0:	f107 0208 	add.w	r2, r7, #8
 8008bd4:	231e      	movs	r3, #30
 8008bd6:	2103      	movs	r1, #3
 8008bd8:	f000 f923 	bl	8008e22 <ft5336_read_reg>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 8008be2:	f04f 33ff 	mov.w	r3, #4294967295
 8008be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008be8:	e07e      	b.n	8008ce8 <FT5336_GetMultiTouchState+0x13a>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8008bea:	2300      	movs	r3, #0
 8008bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bee:	e078      	b.n	8008ce2 <FT5336_GetMultiTouchState+0x134>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8008bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	005b      	lsls	r3, r3, #1
 8008bf6:	4413      	add	r3, r2
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008bfe:	4413      	add	r3, r2
 8008c00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008c04:	021b      	lsls	r3, r3, #8
 8008c06:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8008c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	4413      	add	r3, r2
 8008c12:	005b      	lsls	r3, r3, #1
 8008c14:	3301      	adds	r3, #1
 8008c16:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008c20:	ea41 0203 	orr.w	r2, r1, r3
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	440b      	add	r3, r1
 8008c2c:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8008c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c30:	4613      	mov	r3, r2
 8008c32:	005b      	lsls	r3, r3, #1
 8008c34:	4413      	add	r3, r2
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	3302      	adds	r3, #2
 8008c3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008c3e:	4413      	add	r3, r2
 8008c40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008c44:	021b      	lsls	r3, r3, #8
 8008c46:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8008c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	4413      	add	r3, r2
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	3303      	adds	r3, #3
 8008c56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008c60:	4319      	orrs	r1, r3
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c66:	3206      	adds	r2, #6
 8008c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8008c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c6e:	4613      	mov	r3, r2
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	4413      	add	r3, r2
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008c80:	099b      	lsrs	r3, r3, #6
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	4619      	mov	r1, r3
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c8a:	3210      	adds	r2, #16
 8008c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8008c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c92:	4613      	mov	r3, r2
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	4413      	add	r3, r2
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cac:	330a      	adds	r3, #10
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8008cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	4413      	add	r3, r2
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	3305      	adds	r3, #5
 8008cc0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008cca:	091b      	lsrs	r3, r3, #4
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	4619      	mov	r1, r3
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd4:	3314      	adds	r3, #20
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8008cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cde:	3301      	adds	r3, #1
 8008ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	2b04      	cmp	r3, #4
 8008ce6:	d983      	bls.n	8008bf0 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3730      	adds	r7, #48	; 0x30
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3318      	adds	r3, #24
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 f8bb 	bl	8008e7e <ft5336_gest_id>
 8008d08:	4603      	mov	r3, r0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3318      	adds	r3, #24
 8008d1e:	2101      	movs	r1, #1
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 f941 	bl	8008fa8 <ft5336_g_mode>
 8008d26:	4603      	mov	r3, r0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3318      	adds	r3, #24
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 f932 	bl	8008fa8 <ft5336_g_mode>
 8008d44:	4603      	mov	r3, r0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	3318      	adds	r3, #24
 8008d86:	f107 020b 	add.w	r2, r7, #11
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 f886 	bl	8008e9e <ft5336_td_status>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8008d98:	f04f 33ff 	mov.w	r3, #4294967295
 8008d9c:	60fb      	str	r3, [r7, #12]
 8008d9e:	e007      	b.n	8008db0 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8008da0:	7afb      	ldrb	r3, [r7, #11]
 8008da2:	2b05      	cmp	r3, #5
 8008da4:	d902      	bls.n	8008dac <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8008da6:	2300      	movs	r3, #0
 8008da8:	60fb      	str	r3, [r7, #12]
 8008daa:	e001      	b.n	8008db0 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8008dac:	7afb      	ldrb	r3, [r7, #11]
 8008dae:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8008db0:	68fb      	ldr	r3, [r7, #12]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008dba:	b590      	push	{r4, r7, lr}
 8008dbc:	b087      	sub	sp, #28
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	60f8      	str	r0, [r7, #12]
 8008dc2:	607a      	str	r2, [r7, #4]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	72fb      	strb	r3, [r7, #11]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	691c      	ldr	r4, [r3, #16]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	8918      	ldrh	r0, [r3, #8]
 8008dda:	7afb      	ldrb	r3, [r7, #11]
 8008ddc:	b299      	uxth	r1, r3
 8008dde:	893b      	ldrh	r3, [r7, #8]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	47a0      	blx	r4
 8008de4:	4603      	mov	r3, r0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	371c      	adds	r7, #28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd90      	pop	{r4, r7, pc}

08008dee <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008dee:	b590      	push	{r4, r7, lr}
 8008df0:	b087      	sub	sp, #28
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	72fb      	strb	r3, [r7, #11]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	68dc      	ldr	r4, [r3, #12]
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	8918      	ldrh	r0, [r3, #8]
 8008e0e:	7afb      	ldrb	r3, [r7, #11]
 8008e10:	b299      	uxth	r1, r3
 8008e12:	893b      	ldrh	r3, [r7, #8]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	47a0      	blx	r4
 8008e18:	4603      	mov	r3, r0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	371c      	adds	r7, #28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd90      	pop	{r4, r7, pc}

08008e22 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8008e22:	b590      	push	{r4, r7, lr}
 8008e24:	b085      	sub	sp, #20
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	60f8      	str	r0, [r7, #12]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	460b      	mov	r3, r1
 8008e30:	72fb      	strb	r3, [r7, #11]
 8008e32:	4613      	mov	r3, r2
 8008e34:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	685c      	ldr	r4, [r3, #4]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6898      	ldr	r0, [r3, #8]
 8008e3e:	893b      	ldrh	r3, [r7, #8]
 8008e40:	7af9      	ldrb	r1, [r7, #11]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	47a0      	blx	r4
 8008e46:	4603      	mov	r3, r0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd90      	pop	{r4, r7, pc}

08008e50 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8008e50:	b590      	push	{r4, r7, lr}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	607a      	str	r2, [r7, #4]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	72fb      	strb	r3, [r7, #11]
 8008e60:	4613      	mov	r3, r2
 8008e62:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681c      	ldr	r4, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6898      	ldr	r0, [r3, #8]
 8008e6c:	893b      	ldrh	r3, [r7, #8]
 8008e6e:	7af9      	ldrb	r1, [r7, #11]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	47a0      	blx	r4
 8008e74:	4603      	mov	r3, r0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd90      	pop	{r4, r7, pc}

08008e7e <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8008e88:	2301      	movs	r3, #1
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7ff ffc7 	bl	8008e22 <ft5336_read_reg>
 8008e94:	4603      	mov	r3, r0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	2102      	movs	r1, #2
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff ffb7 	bl	8008e22 <ft5336_read_reg>
 8008eb4:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10a      	bne.n	8008ed2 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	f003 030f 	and.w	r3, r3, #15
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781a      	ldrb	r2, [r3, #0]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8008ee8:	1cfa      	adds	r2, r7, #3
 8008eea:	2301      	movs	r3, #1
 8008eec:	2191      	movs	r1, #145	; 0x91
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff ffae 	bl	8008e50 <ft5336_write_reg>
 8008ef4:	4603      	mov	r3, r0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b082      	sub	sp, #8
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	460b      	mov	r3, r1
 8008f08:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8008f0a:	1cfa      	adds	r2, r7, #3
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	2192      	movs	r1, #146	; 0x92
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7ff ff9d 	bl	8008e50 <ft5336_write_reg>
 8008f16:	4603      	mov	r3, r0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8008f2c:	1cfa      	adds	r2, r7, #3
 8008f2e:	2301      	movs	r3, #1
 8008f30:	2193      	movs	r1, #147	; 0x93
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7ff ff8c 	bl	8008e50 <ft5336_write_reg>
 8008f38:	4603      	mov	r3, r0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8008f4e:	1cfa      	adds	r2, r7, #3
 8008f50:	2301      	movs	r3, #1
 8008f52:	2194      	movs	r1, #148	; 0x94
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff ff7b 	bl	8008e50 <ft5336_write_reg>
 8008f5a:	4603      	mov	r3, r0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8008f70:	1cfa      	adds	r2, r7, #3
 8008f72:	2301      	movs	r3, #1
 8008f74:	2195      	movs	r1, #149	; 0x95
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7ff ff6a 	bl	8008e50 <ft5336_write_reg>
 8008f7c:	4603      	mov	r3, r0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8008f92:	1cfa      	adds	r2, r7, #3
 8008f94:	2301      	movs	r3, #1
 8008f96:	2196      	movs	r1, #150	; 0x96
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7ff ff59 	bl	8008e50 <ft5336_write_reg>
 8008f9e:	4603      	mov	r3, r0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8008fb4:	1cfa      	adds	r2, r7, #3
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	21a4      	movs	r1, #164	; 0xa4
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff ff48 	bl	8008e50 <ft5336_write_reg>
 8008fc0:	4603      	mov	r3, r0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	21a8      	movs	r1, #168	; 0xa8
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff ff21 	bl	8008e22 <ft5336_read_reg>
 8008fe0:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d107      	bne.n	8008ff8 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	781a      	ldrb	r2, [r3, #0]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	781a      	ldrb	r2, [r3, #0]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009010:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009018:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009020:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009028:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009030:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009038:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009040:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009048:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009050:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 8009052:	2300      	movs	r3, #0
};
 8009054:	4618      	mov	r0, r3
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b09c      	sub	sp, #112	; 0x70
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	460b      	mov	r3, r1
 800906a:	70fb      	strb	r3, [r7, #3]
 800906c:	4613      	mov	r3, r2
 800906e:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 8009070:	f107 0320 	add.w	r3, r7, #32
 8009074:	2250      	movs	r2, #80	; 0x50
 8009076:	2100      	movs	r1, #0
 8009078:	4618      	mov	r0, r3
 800907a:	f022 fc81 	bl	802b980 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800907e:	f107 030c 	add.w	r3, r7, #12
 8009082:	2200      	movs	r2, #0
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	605a      	str	r2, [r3, #4]
 8009088:	609a      	str	r2, [r3, #8]
 800908a:	60da      	str	r2, [r3, #12]
 800908c:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d105      	bne.n	80090a0 <MX25LM51245G_AutoPollingMemReady+0x40>
 8009094:	78bb      	ldrb	r3, [r7, #2]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d102      	bne.n	80090a0 <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 800909a:	f04f 33ff 	mov.w	r3, #4294967295
 800909e:	e088      	b.n	80091b2 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80090a0:	2300      	movs	r3, #0
 80090a2:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80090a4:	2300      	movs	r3, #0
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80090a8:	78fb      	ldrb	r3, [r7, #3]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <MX25LM51245G_AutoPollingMemReady+0x52>
 80090ae:	2301      	movs	r3, #1
 80090b0:	e000      	b.n	80090b4 <MX25LM51245G_AutoPollingMemReady+0x54>
 80090b2:	2304      	movs	r3, #4
 80090b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80090b6:	78bb      	ldrb	r3, [r7, #2]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d101      	bne.n	80090c0 <MX25LM51245G_AutoPollingMemReady+0x60>
 80090bc:	2308      	movs	r3, #8
 80090be:	e000      	b.n	80090c2 <MX25LM51245G_AutoPollingMemReady+0x62>
 80090c0:	2300      	movs	r3, #0
 80090c2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <MX25LM51245G_AutoPollingMemReady+0x6e>
 80090ca:	2300      	movs	r3, #0
 80090cc:	e000      	b.n	80090d0 <MX25LM51245G_AutoPollingMemReady+0x70>
 80090ce:	2310      	movs	r3, #16
 80090d0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80090d2:	78fb      	ldrb	r3, [r7, #3]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <MX25LM51245G_AutoPollingMemReady+0x7c>
 80090d8:	2305      	movs	r3, #5
 80090da:	e001      	b.n	80090e0 <MX25LM51245G_AutoPollingMemReady+0x80>
 80090dc:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80090e0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80090e2:	78fb      	ldrb	r3, [r7, #3]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <MX25LM51245G_AutoPollingMemReady+0x8c>
 80090e8:	2300      	movs	r3, #0
 80090ea:	e001      	b.n	80090f0 <MX25LM51245G_AutoPollingMemReady+0x90>
 80090ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80090f2:	78bb      	ldrb	r3, [r7, #2]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d102      	bne.n	80090fe <MX25LM51245G_AutoPollingMemReady+0x9e>
 80090f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090fc:	e000      	b.n	8009100 <MX25LM51245G_AutoPollingMemReady+0xa0>
 80090fe:	2300      	movs	r3, #0
 8009100:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009102:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009106:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address            = 0U;
 8009108:	2300      	movs	r3, #0
 800910a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800910c:	2300      	movs	r3, #0
 800910e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d102      	bne.n	800911c <MX25LM51245G_AutoPollingMemReady+0xbc>
 8009116:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800911a:	e001      	b.n	8009120 <MX25LM51245G_AutoPollingMemReady+0xc0>
 800911c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009120:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009122:	78bb      	ldrb	r3, [r7, #2]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d102      	bne.n	800912e <MX25LM51245G_AutoPollingMemReady+0xce>
 8009128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800912c:	e000      	b.n	8009130 <MX25LM51245G_AutoPollingMemReady+0xd0>
 800912e:	2300      	movs	r3, #0
 8009130:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009132:	78fb      	ldrb	r3, [r7, #3]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <MX25LM51245G_AutoPollingMemReady+0xdc>
 8009138:	2300      	movs	r3, #0
 800913a:	e000      	b.n	800913e <MX25LM51245G_AutoPollingMemReady+0xde>
 800913c:	2305      	movs	r3, #5
 800913e:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009140:	78bb      	ldrb	r3, [r7, #2]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d101      	bne.n	800914a <MX25LM51245G_AutoPollingMemReady+0xea>
 8009146:	2302      	movs	r3, #2
 8009148:	e000      	b.n	800914c <MX25LM51245G_AutoPollingMemReady+0xec>
 800914a:	2301      	movs	r3, #1
 800914c:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800914e:	78bb      	ldrb	r3, [r7, #2]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d102      	bne.n	800915a <MX25LM51245G_AutoPollingMemReady+0xfa>
 8009154:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009158:	e000      	b.n	800915c <MX25LM51245G_AutoPollingMemReady+0xfc>
 800915a:	2300      	movs	r3, #0
 800915c:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800915e:	2300      	movs	r3, #0
 8009160:	66fb      	str	r3, [r7, #108]	; 0x6c

  s_config.Match         = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8009166:	2301      	movs	r3, #1
 8009168:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800916e:	2310      	movs	r3, #16
 8009170:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8009172:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009176:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009178:	f107 0320 	add.w	r3, r7, #32
 800917c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f006 f960 	bl	800f448 <HAL_OSPI_Command>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 800918e:	f04f 33ff 	mov.w	r3, #4294967295
 8009192:	e00e      	b.n	80091b2 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009194:	f107 030c 	add.w	r3, r7, #12
 8009198:	f241 3288 	movw	r2, #5000	; 0x1388
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f006 faf5 	bl	800f78e <HAL_OSPI_AutoPolling>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 80091aa:	f04f 33ff 	mov.w	r3, #4294967295
 80091ae:	e000      	b.n	80091b2 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3770      	adds	r7, #112	; 0x70
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b098      	sub	sp, #96	; 0x60
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	460b      	mov	r3, r1
 80091c4:	70fb      	strb	r3, [r7, #3]
 80091c6:	4613      	mov	r3, r2
 80091c8:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 80091ca:	f107 0310 	add.w	r3, r7, #16
 80091ce:	2250      	movs	r2, #80	; 0x50
 80091d0:	2100      	movs	r1, #0
 80091d2:	4618      	mov	r0, r3
 80091d4:	f022 fbd4 	bl	802b980 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80091d8:	f107 0308 	add.w	r3, r7, #8
 80091dc:	2200      	movs	r2, #0
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80091e2:	78fb      	ldrb	r3, [r7, #3]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d105      	bne.n	80091f4 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 80091e8:	78bb      	ldrb	r3, [r7, #2]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d102      	bne.n	80091f4 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 80091ee:	f04f 33ff 	mov.w	r3, #4294967295
 80091f2:	e088      	b.n	8009306 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80091f4:	2301      	movs	r3, #1
 80091f6:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80091f8:	2300      	movs	r3, #0
 80091fa:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 8009202:	2301      	movs	r3, #1
 8009204:	e000      	b.n	8009208 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 8009206:	2304      	movs	r3, #4
 8009208:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800920a:	2300      	movs	r3, #0
 800920c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800920e:	78fb      	ldrb	r3, [r7, #3]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 8009214:	2300      	movs	r3, #0
 8009216:	e000      	b.n	800921a <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 8009218:	2310      	movs	r3, #16
 800921a:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d106      	bne.n	8009230 <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 8009222:	78bb      	ldrb	r3, [r7, #2]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 8009228:	230b      	movs	r3, #11
 800922a:	e003      	b.n	8009234 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 800922c:	230c      	movs	r3, #12
 800922e:	e001      	b.n	8009234 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8009230:	f64e 4313 	movw	r3, #60435	; 0xec13
 8009234:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d102      	bne.n	8009242 <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 800923c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009240:	e001      	b.n	8009246 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8009242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009246:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009248:	2300      	movs	r3, #0
 800924a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 800924c:	78bb      	ldrb	r3, [r7, #2]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d102      	bne.n	8009258 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 8009252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009256:	e001      	b.n	800925c <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 8009258:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800925c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800925e:	2300      	movs	r3, #0
 8009260:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009262:	78fb      	ldrb	r3, [r7, #3]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d102      	bne.n	800926e <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 8009268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800926c:	e001      	b.n	8009272 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 800926e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009272:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8009274:	2300      	movs	r3, #0
 8009276:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8009278:	78fb      	ldrb	r3, [r7, #3]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 800927e:	2308      	movs	r3, #8
 8009280:	e000      	b.n	8009284 <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 8009282:	2306      	movs	r3, #6
 8009284:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009286:	2300      	movs	r3, #0
 8009288:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800928a:	2300      	movs	r3, #0
 800928c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800928e:	f107 0310 	add.w	r3, r7, #16
 8009292:	f241 3288 	movw	r2, #5000	; 0x1388
 8009296:	4619      	mov	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f006 f8d5 	bl	800f448 <HAL_OSPI_Command>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 80092a4:	f04f 33ff 	mov.w	r3, #4294967295
 80092a8:	e02d      	b.n	8009306 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 80092aa:	2302      	movs	r3, #2
 80092ac:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d106      	bne.n	80092c2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 80092b4:	78bb      	ldrb	r3, [r7, #2]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 80092ba:	2302      	movs	r3, #2
 80092bc:	e003      	b.n	80092c6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 80092be:	2312      	movs	r3, #18
 80092c0:	e001      	b.n	80092c6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 80092c2:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80092c6:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 80092c8:	2300      	movs	r3, #0
 80092ca:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80092cc:	f107 0310 	add.w	r3, r7, #16
 80092d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f006 f8b6 	bl	800f448 <HAL_OSPI_Command>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d002      	beq.n	80092e8 <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 80092e2:	f04f 33ff 	mov.w	r3, #4294967295
 80092e6:	e00e      	b.n	8009306 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80092e8:	2300      	movs	r3, #0
 80092ea:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80092ec:	f107 0308 	add.w	r3, r7, #8
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f006 fad2 	bl	800f89c <HAL_OSPI_MemoryMapped>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d002      	beq.n	8009304 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 80092fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009302:	e000      	b.n	8009306 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3760      	adds	r7, #96	; 0x60
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b098      	sub	sp, #96	; 0x60
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 800931a:	f107 0310 	add.w	r3, r7, #16
 800931e:	2250      	movs	r2, #80	; 0x50
 8009320:	2100      	movs	r1, #0
 8009322:	4618      	mov	r0, r3
 8009324:	f022 fb2c 	bl	802b980 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8009328:	f107 0308 	add.w	r3, r7, #8
 800932c:	2200      	movs	r2, #0
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8009332:	2301      	movs	r3, #1
 8009334:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 800933a:	2304      	movs	r3, #4
 800933c:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 800933e:	2308      	movs	r3, #8
 8009340:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8009342:	2310      	movs	r3, #16
 8009344:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8009346:	f64e 6311 	movw	r3, #60945	; 0xee11
 800934a:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 800934c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009350:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8009352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009356:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009358:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800935c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800935e:	2300      	movs	r3, #0
 8009360:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8009362:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009366:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8009368:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800936c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 800936e:	2306      	movs	r3, #6
 8009370:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8009372:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009376:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009378:	2300      	movs	r3, #0
 800937a:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800937c:	f107 0310 	add.w	r3, r7, #16
 8009380:	f241 3288 	movw	r2, #5000	; 0x1388
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f006 f85e 	bl	800f448 <HAL_OSPI_Command>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 8009392:	f04f 33ff 	mov.w	r3, #4294967295
 8009396:	e025      	b.n	80093e4 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8009398:	2302      	movs	r3, #2
 800939a:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800939c:	f241 23ed 	movw	r3, #4845	; 0x12ed
 80093a0:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 80093a6:	2300      	movs	r3, #0
 80093a8:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80093aa:	f107 0310 	add.w	r3, r7, #16
 80093ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f006 f847 	bl	800f448 <HAL_OSPI_Command>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 80093c0:	f04f 33ff 	mov.w	r3, #4294967295
 80093c4:	e00e      	b.n	80093e4 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80093c6:	2300      	movs	r3, #0
 80093c8:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 80093ca:	f107 0308 	add.w	r3, r7, #8
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f006 fa63 	bl	800f89c <HAL_OSPI_MemoryMapped>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 80093dc:	f04f 33ff 	mov.w	r3, #4294967295
 80093e0:	e000      	b.n	80093e4 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3760      	adds	r7, #96	; 0x60
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b09c      	sub	sp, #112	; 0x70
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	70fb      	strb	r3, [r7, #3]
 80093f8:	4613      	mov	r3, r2
 80093fa:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 80093fc:	f107 0320 	add.w	r3, r7, #32
 8009400:	2250      	movs	r2, #80	; 0x50
 8009402:	2100      	movs	r1, #0
 8009404:	4618      	mov	r0, r3
 8009406:	f022 fabb 	bl	802b980 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 800940a:	f107 030c 	add.w	r3, r7, #12
 800940e:	2200      	movs	r2, #0
 8009410:	601a      	str	r2, [r3, #0]
 8009412:	605a      	str	r2, [r3, #4]
 8009414:	609a      	str	r2, [r3, #8]
 8009416:	60da      	str	r2, [r3, #12]
 8009418:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800941a:	78fb      	ldrb	r3, [r7, #3]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d105      	bne.n	800942c <MX25LM51245G_WriteEnable+0x40>
 8009420:	78bb      	ldrb	r3, [r7, #2]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d102      	bne.n	800942c <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8009426:	f04f 33ff 	mov.w	r3, #4294967295
 800942a:	e0a6      	b.n	800957a <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800942c:	2300      	movs	r3, #0
 800942e:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009430:	2300      	movs	r3, #0
 8009432:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009434:	78fb      	ldrb	r3, [r7, #3]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <MX25LM51245G_WriteEnable+0x52>
 800943a:	2301      	movs	r3, #1
 800943c:	e000      	b.n	8009440 <MX25LM51245G_WriteEnable+0x54>
 800943e:	2304      	movs	r3, #4
 8009440:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009442:	78bb      	ldrb	r3, [r7, #2]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d101      	bne.n	800944c <MX25LM51245G_WriteEnable+0x60>
 8009448:	2308      	movs	r3, #8
 800944a:	e000      	b.n	800944e <MX25LM51245G_WriteEnable+0x62>
 800944c:	2300      	movs	r3, #0
 800944e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <MX25LM51245G_WriteEnable+0x6e>
 8009456:	2300      	movs	r3, #0
 8009458:	e000      	b.n	800945c <MX25LM51245G_WriteEnable+0x70>
 800945a:	2310      	movs	r3, #16
 800945c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 800945e:	78fb      	ldrb	r3, [r7, #3]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <MX25LM51245G_WriteEnable+0x7c>
 8009464:	2306      	movs	r3, #6
 8009466:	e001      	b.n	800946c <MX25LM51245G_WriteEnable+0x80>
 8009468:	f240 63f9 	movw	r3, #1785	; 0x6f9
 800946c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800946e:	2300      	movs	r3, #0
 8009470:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009472:	2300      	movs	r3, #0
 8009474:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8009476:	2300      	movs	r3, #0
 8009478:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DummyCycles        = 0U;
 800947a:	2300      	movs	r3, #0
 800947c:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800947e:	2300      	movs	r3, #0
 8009480:	66bb      	str	r3, [r7, #104]	; 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009482:	2300      	movs	r3, #0
 8009484:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009486:	f107 0320 	add.w	r3, r7, #32
 800948a:	f241 3288 	movw	r2, #5000	; 0x1388
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f005 ffd9 	bl	800f448 <HAL_OSPI_Command>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d002      	beq.n	80094a2 <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 800949c:	f04f 33ff 	mov.w	r3, #4294967295
 80094a0:	e06b      	b.n	800957a <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 80094a2:	78fb      	ldrb	r3, [r7, #3]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d101      	bne.n	80094ac <MX25LM51245G_WriteEnable+0xc0>
 80094a8:	2305      	movs	r3, #5
 80094aa:	e001      	b.n	80094b0 <MX25LM51245G_WriteEnable+0xc4>
 80094ac:	f240 53fa 	movw	r3, #1530	; 0x5fa
 80094b0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80094b2:	78fb      	ldrb	r3, [r7, #3]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <MX25LM51245G_WriteEnable+0xd0>
 80094b8:	2300      	movs	r3, #0
 80094ba:	e001      	b.n	80094c0 <MX25LM51245G_WriteEnable+0xd4>
 80094bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80094c2:	78bb      	ldrb	r3, [r7, #2]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d102      	bne.n	80094ce <MX25LM51245G_WriteEnable+0xe2>
 80094c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094cc:	e000      	b.n	80094d0 <MX25LM51245G_WriteEnable+0xe4>
 80094ce:	2300      	movs	r3, #0
 80094d0:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 80094d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80094d6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Address        = 0U;
 80094d8:	2300      	movs	r3, #0
 80094da:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80094dc:	78fb      	ldrb	r3, [r7, #3]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d102      	bne.n	80094e8 <MX25LM51245G_WriteEnable+0xfc>
 80094e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094e6:	e001      	b.n	80094ec <MX25LM51245G_WriteEnable+0x100>
 80094e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80094ec:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80094ee:	78bb      	ldrb	r3, [r7, #2]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d102      	bne.n	80094fa <MX25LM51245G_WriteEnable+0x10e>
 80094f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094f8:	e000      	b.n	80094fc <MX25LM51245G_WriteEnable+0x110>
 80094fa:	2300      	movs	r3, #0
 80094fc:	663b      	str	r3, [r7, #96]	; 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <MX25LM51245G_WriteEnable+0x11c>
 8009504:	2300      	movs	r3, #0
 8009506:	e000      	b.n	800950a <MX25LM51245G_WriteEnable+0x11e>
 8009508:	2305      	movs	r3, #5
 800950a:	667b      	str	r3, [r7, #100]	; 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800950c:	78bb      	ldrb	r3, [r7, #2]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d101      	bne.n	8009516 <MX25LM51245G_WriteEnable+0x12a>
 8009512:	2302      	movs	r3, #2
 8009514:	e000      	b.n	8009518 <MX25LM51245G_WriteEnable+0x12c>
 8009516:	2301      	movs	r3, #1
 8009518:	65fb      	str	r3, [r7, #92]	; 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800951a:	78bb      	ldrb	r3, [r7, #2]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d102      	bne.n	8009526 <MX25LM51245G_WriteEnable+0x13a>
 8009520:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009524:	e000      	b.n	8009528 <MX25LM51245G_WriteEnable+0x13c>
 8009526:	2300      	movs	r3, #0
 8009528:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800952a:	f107 0320 	add.w	r3, r7, #32
 800952e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f005 ff87 	bl	800f448 <HAL_OSPI_Command>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 8009540:	f04f 33ff 	mov.w	r3, #4294967295
 8009544:	e019      	b.n	800957a <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 8009546:	2302      	movs	r3, #2
 8009548:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 800954a:	2302      	movs	r3, #2
 800954c:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 800954e:	2300      	movs	r3, #0
 8009550:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8009552:	2310      	movs	r3, #16
 8009554:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8009556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800955a:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800955c:	f107 030c 	add.w	r3, r7, #12
 8009560:	f241 3288 	movw	r2, #5000	; 0x1388
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f006 f911 	bl	800f78e <HAL_OSPI_AutoPolling>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 8009572:	f04f 33ff 	mov.w	r3, #4294967295
 8009576:	e000      	b.n	800957a <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3770      	adds	r7, #112	; 0x70
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b098      	sub	sp, #96	; 0x60
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	607b      	str	r3, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	72fb      	strb	r3, [r7, #11]
 8009590:	4613      	mov	r3, r2
 8009592:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8009594:	f107 0310 	add.w	r3, r7, #16
 8009598:	2250      	movs	r2, #80	; 0x50
 800959a:	2100      	movs	r1, #0
 800959c:	4618      	mov	r0, r3
 800959e:	f022 f9ef 	bl	802b980 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80095a2:	7afb      	ldrb	r3, [r7, #11]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d105      	bne.n	80095b4 <MX25LM51245G_WriteCfg2Register+0x32>
 80095a8:	7abb      	ldrb	r3, [r7, #10]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d102      	bne.n	80095b4 <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 80095ae:	f04f 33ff 	mov.w	r3, #4294967295
 80095b2:	e077      	b.n	80096a4 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80095b4:	2300      	movs	r3, #0
 80095b6:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80095b8:	2300      	movs	r3, #0
 80095ba:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80095bc:	7afb      	ldrb	r3, [r7, #11]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <MX25LM51245G_WriteCfg2Register+0x44>
 80095c2:	2301      	movs	r3, #1
 80095c4:	e000      	b.n	80095c8 <MX25LM51245G_WriteCfg2Register+0x46>
 80095c6:	2304      	movs	r3, #4
 80095c8:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80095ca:	7abb      	ldrb	r3, [r7, #10]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d101      	bne.n	80095d4 <MX25LM51245G_WriteCfg2Register+0x52>
 80095d0:	2308      	movs	r3, #8
 80095d2:	e000      	b.n	80095d6 <MX25LM51245G_WriteCfg2Register+0x54>
 80095d4:	2300      	movs	r3, #0
 80095d6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80095d8:	7afb      	ldrb	r3, [r7, #11]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <MX25LM51245G_WriteCfg2Register+0x60>
 80095de:	2300      	movs	r3, #0
 80095e0:	e000      	b.n	80095e4 <MX25LM51245G_WriteCfg2Register+0x62>
 80095e2:	2310      	movs	r3, #16
 80095e4:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80095e6:	7afb      	ldrb	r3, [r7, #11]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d101      	bne.n	80095f0 <MX25LM51245G_WriteCfg2Register+0x6e>
 80095ec:	2372      	movs	r3, #114	; 0x72
 80095ee:	e001      	b.n	80095f4 <MX25LM51245G_WriteCfg2Register+0x72>
 80095f0:	f247 238d 	movw	r3, #29325	; 0x728d
 80095f4:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80095f6:	7afb      	ldrb	r3, [r7, #11]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d102      	bne.n	8009602 <MX25LM51245G_WriteCfg2Register+0x80>
 80095fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009600:	e001      	b.n	8009606 <MX25LM51245G_WriteCfg2Register+0x84>
 8009602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009606:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009608:	7abb      	ldrb	r3, [r7, #10]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d102      	bne.n	8009614 <MX25LM51245G_WriteCfg2Register+0x92>
 800960e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009612:	e000      	b.n	8009616 <MX25LM51245G_WriteCfg2Register+0x94>
 8009614:	2300      	movs	r3, #0
 8009616:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009618:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800961c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = WriteAddr;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009622:	2300      	movs	r3, #0
 8009624:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009626:	7afb      	ldrb	r3, [r7, #11]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d102      	bne.n	8009632 <MX25LM51245G_WriteCfg2Register+0xb0>
 800962c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009630:	e001      	b.n	8009636 <MX25LM51245G_WriteCfg2Register+0xb4>
 8009632:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009636:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009638:	7abb      	ldrb	r3, [r7, #10]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d102      	bne.n	8009644 <MX25LM51245G_WriteCfg2Register+0xc2>
 800963e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009642:	e000      	b.n	8009646 <MX25LM51245G_WriteCfg2Register+0xc4>
 8009644:	2300      	movs	r3, #0
 8009646:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800964c:	7afb      	ldrb	r3, [r7, #11]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d006      	beq.n	8009660 <MX25LM51245G_WriteCfg2Register+0xde>
 8009652:	7abb      	ldrb	r3, [r7, #10]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d101      	bne.n	800965c <MX25LM51245G_WriteCfg2Register+0xda>
 8009658:	2302      	movs	r3, #2
 800965a:	e002      	b.n	8009662 <MX25LM51245G_WriteCfg2Register+0xe0>
 800965c:	2301      	movs	r3, #1
 800965e:	e000      	b.n	8009662 <MX25LM51245G_WriteCfg2Register+0xe0>
 8009660:	2301      	movs	r3, #1
 8009662:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009664:	2300      	movs	r3, #0
 8009666:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009668:	2300      	movs	r3, #0
 800966a:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800966c:	f107 0310 	add.w	r3, r7, #16
 8009670:	f241 3288 	movw	r2, #5000	; 0x1388
 8009674:	4619      	mov	r1, r3
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f005 fee6 	bl	800f448 <HAL_OSPI_Command>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 8009682:	f04f 33ff 	mov.w	r3, #4294967295
 8009686:	e00d      	b.n	80096a4 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009688:	f241 3288 	movw	r2, #5000	; 0x1388
 800968c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f005 ff66 	bl	800f562 <HAL_OSPI_Transmit>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 800969c:	f04f 33ff 	mov.w	r3, #4294967295
 80096a0:	e000      	b.n	80096a4 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3760      	adds	r7, #96	; 0x60
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b098      	sub	sp, #96	; 0x60
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	607b      	str	r3, [r7, #4]
 80096b6:	460b      	mov	r3, r1
 80096b8:	72fb      	strb	r3, [r7, #11]
 80096ba:	4613      	mov	r3, r2
 80096bc:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 80096be:	f107 0310 	add.w	r3, r7, #16
 80096c2:	2250      	movs	r2, #80	; 0x50
 80096c4:	2100      	movs	r1, #0
 80096c6:	4618      	mov	r0, r3
 80096c8:	f022 f95a 	bl	802b980 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80096cc:	7afb      	ldrb	r3, [r7, #11]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d105      	bne.n	80096de <MX25LM51245G_ReadCfg2Register+0x32>
 80096d2:	7abb      	ldrb	r3, [r7, #10]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d102      	bne.n	80096de <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 80096d8:	f04f 33ff 	mov.w	r3, #4294967295
 80096dc:	e07c      	b.n	80097d8 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80096de:	2300      	movs	r3, #0
 80096e0:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80096e2:	2300      	movs	r3, #0
 80096e4:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80096e6:	7afb      	ldrb	r3, [r7, #11]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <MX25LM51245G_ReadCfg2Register+0x44>
 80096ec:	2301      	movs	r3, #1
 80096ee:	e000      	b.n	80096f2 <MX25LM51245G_ReadCfg2Register+0x46>
 80096f0:	2304      	movs	r3, #4
 80096f2:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80096f4:	7abb      	ldrb	r3, [r7, #10]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d101      	bne.n	80096fe <MX25LM51245G_ReadCfg2Register+0x52>
 80096fa:	2308      	movs	r3, #8
 80096fc:	e000      	b.n	8009700 <MX25LM51245G_ReadCfg2Register+0x54>
 80096fe:	2300      	movs	r3, #0
 8009700:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009702:	7afb      	ldrb	r3, [r7, #11]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <MX25LM51245G_ReadCfg2Register+0x60>
 8009708:	2300      	movs	r3, #0
 800970a:	e000      	b.n	800970e <MX25LM51245G_ReadCfg2Register+0x62>
 800970c:	2310      	movs	r3, #16
 800970e:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 8009710:	7afb      	ldrb	r3, [r7, #11]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <MX25LM51245G_ReadCfg2Register+0x6e>
 8009716:	2371      	movs	r3, #113	; 0x71
 8009718:	e001      	b.n	800971e <MX25LM51245G_ReadCfg2Register+0x72>
 800971a:	f247 138e 	movw	r3, #29070	; 0x718e
 800971e:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8009720:	7afb      	ldrb	r3, [r7, #11]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d102      	bne.n	800972c <MX25LM51245G_ReadCfg2Register+0x80>
 8009726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800972a:	e001      	b.n	8009730 <MX25LM51245G_ReadCfg2Register+0x84>
 800972c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009730:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009732:	7abb      	ldrb	r3, [r7, #10]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d102      	bne.n	800973e <MX25LM51245G_ReadCfg2Register+0x92>
 8009738:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800973c:	e000      	b.n	8009740 <MX25LM51245G_ReadCfg2Register+0x94>
 800973e:	2300      	movs	r3, #0
 8009740:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8009742:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009746:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Address            = ReadAddr;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800974c:	2300      	movs	r3, #0
 800974e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <MX25LM51245G_ReadCfg2Register+0xb0>
 8009756:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800975a:	e001      	b.n	8009760 <MX25LM51245G_ReadCfg2Register+0xb4>
 800975c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009760:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8009762:	7abb      	ldrb	r3, [r7, #10]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d102      	bne.n	800976e <MX25LM51245G_ReadCfg2Register+0xc2>
 8009768:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800976c:	e000      	b.n	8009770 <MX25LM51245G_ReadCfg2Register+0xc4>
 800976e:	2300      	movs	r3, #0
 8009770:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8009772:	7afb      	ldrb	r3, [r7, #11]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <MX25LM51245G_ReadCfg2Register+0xd0>
 8009778:	2300      	movs	r3, #0
 800977a:	e000      	b.n	800977e <MX25LM51245G_ReadCfg2Register+0xd2>
 800977c:	2305      	movs	r3, #5
 800977e:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8009780:	7abb      	ldrb	r3, [r7, #10]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d101      	bne.n	800978a <MX25LM51245G_ReadCfg2Register+0xde>
 8009786:	2302      	movs	r3, #2
 8009788:	e000      	b.n	800978c <MX25LM51245G_ReadCfg2Register+0xe0>
 800978a:	2301      	movs	r3, #1
 800978c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800978e:	7abb      	ldrb	r3, [r7, #10]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d102      	bne.n	800979a <MX25LM51245G_ReadCfg2Register+0xee>
 8009794:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009798:	e000      	b.n	800979c <MX25LM51245G_ReadCfg2Register+0xf0>
 800979a:	2300      	movs	r3, #0
 800979c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800979e:	2300      	movs	r3, #0
 80097a0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097a2:	f107 0310 	add.w	r3, r7, #16
 80097a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80097aa:	4619      	mov	r1, r3
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f005 fe4b 	bl	800f448 <HAL_OSPI_Command>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 80097b8:	f04f 33ff 	mov.w	r3, #4294967295
 80097bc:	e00c      	b.n	80097d8 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097be:	f241 3288 	movw	r2, #5000	; 0x1388
 80097c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f005 ff3f 	bl	800f648 <HAL_OSPI_Receive>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 80097d0:	f04f 33ff 	mov.w	r3, #4294967295
 80097d4:	e000      	b.n	80097d8 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3760      	adds	r7, #96	; 0x60
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b096      	sub	sp, #88	; 0x58
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70fb      	strb	r3, [r7, #3]
 80097ec:	4613      	mov	r3, r2
 80097ee:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 80097f0:	f107 0308 	add.w	r3, r7, #8
 80097f4:	2250      	movs	r2, #80	; 0x50
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f022 f8c1 	bl	802b980 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80097fe:	78fb      	ldrb	r3, [r7, #3]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d105      	bne.n	8009810 <MX25LM51245G_ResetEnable+0x30>
 8009804:	78bb      	ldrb	r3, [r7, #2]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d102      	bne.n	8009810 <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 800980a:	f04f 33ff 	mov.w	r3, #4294967295
 800980e:	e03b      	b.n	8009888 <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009810:	2300      	movs	r3, #0
 8009812:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009814:	2300      	movs	r3, #0
 8009816:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8009818:	78fb      	ldrb	r3, [r7, #3]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <MX25LM51245G_ResetEnable+0x42>
 800981e:	2301      	movs	r3, #1
 8009820:	e000      	b.n	8009824 <MX25LM51245G_ResetEnable+0x44>
 8009822:	2304      	movs	r3, #4
 8009824:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009826:	78bb      	ldrb	r3, [r7, #2]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d101      	bne.n	8009830 <MX25LM51245G_ResetEnable+0x50>
 800982c:	2308      	movs	r3, #8
 800982e:	e000      	b.n	8009832 <MX25LM51245G_ResetEnable+0x52>
 8009830:	2300      	movs	r3, #0
 8009832:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8009834:	78fb      	ldrb	r3, [r7, #3]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <MX25LM51245G_ResetEnable+0x5e>
 800983a:	2300      	movs	r3, #0
 800983c:	e000      	b.n	8009840 <MX25LM51245G_ResetEnable+0x60>
 800983e:	2310      	movs	r3, #16
 8009840:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8009842:	78fb      	ldrb	r3, [r7, #3]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <MX25LM51245G_ResetEnable+0x6c>
 8009848:	2366      	movs	r3, #102	; 0x66
 800984a:	e001      	b.n	8009850 <MX25LM51245G_ResetEnable+0x70>
 800984c:	f246 6399 	movw	r3, #26265	; 0x6699
 8009850:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009852:	2300      	movs	r3, #0
 8009854:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009856:	2300      	movs	r3, #0
 8009858:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800985a:	2300      	movs	r3, #0
 800985c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800985e:	2300      	movs	r3, #0
 8009860:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009862:	2300      	movs	r3, #0
 8009864:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009866:	2300      	movs	r3, #0
 8009868:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800986a:	f107 0308 	add.w	r3, r7, #8
 800986e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f005 fde7 	bl	800f448 <HAL_OSPI_Command>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 8009880:	f04f 33ff 	mov.w	r3, #4294967295
 8009884:	e000      	b.n	8009888 <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3758      	adds	r7, #88	; 0x58
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b096      	sub	sp, #88	; 0x58
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
 800989c:	4613      	mov	r3, r2
 800989e:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 80098a0:	f107 0308 	add.w	r3, r7, #8
 80098a4:	2250      	movs	r2, #80	; 0x50
 80098a6:	2100      	movs	r1, #0
 80098a8:	4618      	mov	r0, r3
 80098aa:	f022 f869 	bl	802b980 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80098ae:	78fb      	ldrb	r3, [r7, #3]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d105      	bne.n	80098c0 <MX25LM51245G_ResetMemory+0x30>
 80098b4:	78bb      	ldrb	r3, [r7, #2]
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d102      	bne.n	80098c0 <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 80098ba:	f04f 33ff 	mov.w	r3, #4294967295
 80098be:	e03b      	b.n	8009938 <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80098c0:	2300      	movs	r3, #0
 80098c2:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80098c4:	2300      	movs	r3, #0
 80098c6:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <MX25LM51245G_ResetMemory+0x42>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <MX25LM51245G_ResetMemory+0x44>
 80098d2:	2304      	movs	r3, #4
 80098d4:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80098d6:	78bb      	ldrb	r3, [r7, #2]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d101      	bne.n	80098e0 <MX25LM51245G_ResetMemory+0x50>
 80098dc:	2308      	movs	r3, #8
 80098de:	e000      	b.n	80098e2 <MX25LM51245G_ResetMemory+0x52>
 80098e0:	2300      	movs	r3, #0
 80098e2:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <MX25LM51245G_ResetMemory+0x5e>
 80098ea:	2300      	movs	r3, #0
 80098ec:	e000      	b.n	80098f0 <MX25LM51245G_ResetMemory+0x60>
 80098ee:	2310      	movs	r3, #16
 80098f0:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <MX25LM51245G_ResetMemory+0x6c>
 80098f8:	2399      	movs	r3, #153	; 0x99
 80098fa:	e001      	b.n	8009900 <MX25LM51245G_ResetMemory+0x70>
 80098fc:	f649 1366 	movw	r3, #39270	; 0x9966
 8009900:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009902:	2300      	movs	r3, #0
 8009904:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009906:	2300      	movs	r3, #0
 8009908:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 800990a:	2300      	movs	r3, #0
 800990c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles        = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009912:	2300      	movs	r3, #0
 8009914:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009916:	2300      	movs	r3, #0
 8009918:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800991a:	f107 0308 	add.w	r3, r7, #8
 800991e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f005 fd8f 	bl	800f448 <HAL_OSPI_Command>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 8009930:	f04f 33ff 	mov.w	r3, #4294967295
 8009934:	e000      	b.n	8009938 <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3758      	adds	r7, #88	; 0x58
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8009946:	2300      	movs	r3, #0
 8009948:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800994a:	4b16      	ldr	r3, [pc, #88]	; (80099a4 <BSP_I2C4_Init+0x64>)
 800994c:	4a16      	ldr	r2, [pc, #88]	; (80099a8 <BSP_I2C4_Init+0x68>)
 800994e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8009950:	4b16      	ldr	r3, [pc, #88]	; (80099ac <BSP_I2C4_Init+0x6c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d11f      	bne.n	8009998 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8009958:	4b14      	ldr	r3, [pc, #80]	; (80099ac <BSP_I2C4_Init+0x6c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3301      	adds	r3, #1
 800995e:	4a13      	ldr	r2, [pc, #76]	; (80099ac <BSP_I2C4_Init+0x6c>)
 8009960:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8009962:	4810      	ldr	r0, [pc, #64]	; (80099a4 <BSP_I2C4_Init+0x64>)
 8009964:	f004 fc5e 	bl	800e224 <HAL_I2C_GetState>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d114      	bne.n	8009998 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800996e:	480d      	ldr	r0, [pc, #52]	; (80099a4 <BSP_I2C4_Init+0x64>)
 8009970:	f000 fb60 	bl	800a034 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8009974:	f007 fa5a 	bl	8010e2c <HAL_RCC_GetPCLK2Freq>
 8009978:	4603      	mov	r3, r0
 800997a:	490d      	ldr	r1, [pc, #52]	; (80099b0 <BSP_I2C4_Init+0x70>)
 800997c:	4618      	mov	r0, r3
 800997e:	f000 f8e3 	bl	8009b48 <I2C_GetTiming>
 8009982:	4603      	mov	r3, r0
 8009984:	4619      	mov	r1, r3
 8009986:	4807      	ldr	r0, [pc, #28]	; (80099a4 <BSP_I2C4_Init+0x64>)
 8009988:	f000 f838 	bl	80099fc <MX_I2C4_Init>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d002      	beq.n	8009998 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8009992:	f06f 0307 	mvn.w	r3, #7
 8009996:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8009998:	687b      	ldr	r3, [r7, #4]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	2400ce40 	.word	0x2400ce40
 80099a8:	58001c00 	.word	0x58001c00
 80099ac:	24003148 	.word	0x24003148
 80099b0:	000186a0 	.word	0x000186a0

080099b4 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80099ba:	2300      	movs	r3, #0
 80099bc:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80099be:	4b0d      	ldr	r3, [pc, #52]	; (80099f4 <BSP_I2C4_DeInit+0x40>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3b01      	subs	r3, #1
 80099c4:	4a0b      	ldr	r2, [pc, #44]	; (80099f4 <BSP_I2C4_DeInit+0x40>)
 80099c6:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80099c8:	4b0a      	ldr	r3, [pc, #40]	; (80099f4 <BSP_I2C4_DeInit+0x40>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10b      	bne.n	80099e8 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80099d0:	4809      	ldr	r0, [pc, #36]	; (80099f8 <BSP_I2C4_DeInit+0x44>)
 80099d2:	f000 fb9b 	bl	800a10c <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80099d6:	4808      	ldr	r0, [pc, #32]	; (80099f8 <BSP_I2C4_DeInit+0x44>)
 80099d8:	f004 f9c6 	bl	800dd68 <HAL_I2C_DeInit>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80099e2:	f06f 0307 	mvn.w	r3, #7
 80099e6:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80099e8:	687b      	ldr	r3, [r7, #4]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	24003148 	.word	0x24003148
 80099f8:	2400ce40 	.word	0x2400ce40

080099fc <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f004 f904 	bl	800dc48 <HAL_I2C_Init>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d002      	beq.n	8009a4c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	73fb      	strb	r3, [r7, #15]
 8009a4a:	e014      	b.n	8009a76 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8009a50:	68b9      	ldr	r1, [r7, #8]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f004 fe1c 	bl	800e690 <HAL_I2CEx_ConfigAnalogFilter>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d002      	beq.n	8009a64 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	73fb      	strb	r3, [r7, #15]
 8009a62:	e008      	b.n	8009a76 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8009a64:	2100      	movs	r1, #0
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f004 fe5d 	bl	800e726 <HAL_I2CEx_ConfigDigitalFilter>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8009a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af02      	add	r7, sp, #8
 8009a86:	60ba      	str	r2, [r7, #8]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	81fb      	strh	r3, [r7, #14]
 8009a8e:	460b      	mov	r3, r1
 8009a90:	81bb      	strh	r3, [r7, #12]
 8009a92:	4613      	mov	r3, r2
 8009a94:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8009a96:	89b9      	ldrh	r1, [r7, #12]
 8009a98:	89f8      	ldrh	r0, [r7, #14]
 8009a9a:	88fb      	ldrh	r3, [r7, #6]
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f000 fb57 	bl	800a154 <I2C4_WriteReg>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d102      	bne.n	8009ab2 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8009aac:	2300      	movs	r3, #0
 8009aae:	617b      	str	r3, [r7, #20]
 8009ab0:	e00c      	b.n	8009acc <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009ab2:	4809      	ldr	r0, [pc, #36]	; (8009ad8 <BSP_I2C4_WriteReg+0x58>)
 8009ab4:	f004 fbc4 	bl	800e240 <HAL_I2C_GetError>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	d103      	bne.n	8009ac6 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009abe:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	e002      	b.n	8009acc <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8009ac6:	f06f 0303 	mvn.w	r3, #3
 8009aca:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009acc:	697b      	ldr	r3, [r7, #20]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	2400ce40 	.word	0x2400ce40

08009adc <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b088      	sub	sp, #32
 8009ae0:	af02      	add	r7, sp, #8
 8009ae2:	60ba      	str	r2, [r7, #8]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	81fb      	strh	r3, [r7, #14]
 8009aea:	460b      	mov	r3, r1
 8009aec:	81bb      	strh	r3, [r7, #12]
 8009aee:	4613      	mov	r3, r2
 8009af0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8009af2:	89b9      	ldrh	r1, [r7, #12]
 8009af4:	89f8      	ldrh	r0, [r7, #14]
 8009af6:	88fb      	ldrh	r3, [r7, #6]
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f000 fb4f 	bl	800a1a0 <I2C4_ReadReg>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d102      	bne.n	8009b0e <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	617b      	str	r3, [r7, #20]
 8009b0c:	e00c      	b.n	8009b28 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8009b0e:	4809      	ldr	r0, [pc, #36]	; (8009b34 <BSP_I2C4_ReadReg+0x58>)
 8009b10:	f004 fb96 	bl	800e240 <HAL_I2C_GetError>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b04      	cmp	r3, #4
 8009b18:	d103      	bne.n	8009b22 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8009b1a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	e002      	b.n	8009b28 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8009b22:	f06f 0303 	mvn.w	r3, #3
 8009b26:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009b28:	697b      	ldr	r3, [r7, #20]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	2400ce40 	.word	0x2400ce40

08009b38 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8009b3c:	f001 fcc6 	bl	800b4cc <HAL_GetTick>
 8009b40:	4603      	mov	r3, r0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	bd80      	pop	{r7, pc}
	...

08009b48 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d06b      	beq.n	8009c34 <I2C_GetTiming+0xec>
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d068      	beq.n	8009c34 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8009b62:	2300      	movs	r3, #0
 8009b64:	613b      	str	r3, [r7, #16]
 8009b66:	e060      	b.n	8009c2a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8009b68:	4a35      	ldr	r2, [pc, #212]	; (8009c40 <I2C_GetTiming+0xf8>)
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	212c      	movs	r1, #44	; 0x2c
 8009b6e:	fb01 f303 	mul.w	r3, r1, r3
 8009b72:	4413      	add	r3, r2
 8009b74:	3304      	adds	r3, #4
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d352      	bcc.n	8009c24 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8009b7e:	4a30      	ldr	r2, [pc, #192]	; (8009c40 <I2C_GetTiming+0xf8>)
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	212c      	movs	r1, #44	; 0x2c
 8009b84:	fb01 f303 	mul.w	r3, r1, r3
 8009b88:	4413      	add	r3, r2
 8009b8a:	3308      	adds	r3, #8
 8009b8c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d847      	bhi.n	8009c24 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8009b94:	6939      	ldr	r1, [r7, #16]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f856 	bl	8009c48 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8009b9c:	6939      	ldr	r1, [r7, #16]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f940 	bl	8009e24 <I2C_Compute_SCLL_SCLH>
 8009ba4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8009baa:	d842      	bhi.n	8009c32 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009bac:	4925      	ldr	r1, [pc, #148]	; (8009c44 <I2C_GetTiming+0xfc>)
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	440b      	add	r3, r1
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009bbe:	4821      	ldr	r0, [pc, #132]	; (8009c44 <I2C_GetTiming+0xfc>)
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4403      	add	r3, r0
 8009bcc:	3304      	adds	r3, #4
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	051b      	lsls	r3, r3, #20
 8009bd2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009bd6:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009bd8:	481a      	ldr	r0, [pc, #104]	; (8009c44 <I2C_GetTiming+0xfc>)
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4403      	add	r3, r0
 8009be6:	3308      	adds	r3, #8
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	041b      	lsls	r3, r3, #16
 8009bec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009bf0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8009bf2:	4814      	ldr	r0, [pc, #80]	; (8009c44 <I2C_GetTiming+0xfc>)
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4413      	add	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4403      	add	r3, r0
 8009c00:	330c      	adds	r3, #12
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	021b      	lsls	r3, r3, #8
 8009c06:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8009c08:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8009c0a:	480e      	ldr	r0, [pc, #56]	; (8009c44 <I2C_GetTiming+0xfc>)
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4403      	add	r3, r0
 8009c18:	3310      	adds	r3, #16
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009c1e:	430b      	orrs	r3, r1
 8009c20:	617b      	str	r3, [r7, #20]
        }
        break;
 8009c22:	e006      	b.n	8009c32 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	3301      	adds	r3, #1
 8009c28:	613b      	str	r3, [r7, #16]
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d99b      	bls.n	8009b68 <I2C_GetTiming+0x20>
 8009c30:	e000      	b.n	8009c34 <I2C_GetTiming+0xec>
        break;
 8009c32:	bf00      	nop
      }
    }
  }

  return ret;
 8009c34:	697b      	ldr	r3, [r7, #20]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3718      	adds	r7, #24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	0802e330 	.word	0x0802e330
 8009c44:	2400314c 	.word	0x2400314c

08009c48 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b08f      	sub	sp, #60	; 0x3c
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8009c52:	2310      	movs	r3, #16
 8009c54:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	085a      	lsrs	r2, r3, #1
 8009c5a:	4b6e      	ldr	r3, [pc, #440]	; (8009e14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8009c5c:	4413      	add	r3, r2
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c64:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8009c66:	2332      	movs	r3, #50	; 0x32
 8009c68:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8009c6a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009c6e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009c70:	4a69      	ldr	r2, [pc, #420]	; (8009e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	212c      	movs	r1, #44	; 0x2c
 8009c76:	fb01 f303 	mul.w	r3, r1, r3
 8009c7a:	4413      	add	r3, r2
 8009c7c:	3324      	adds	r3, #36	; 0x24
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4618      	mov	r0, r3
 8009c82:	4a65      	ldr	r2, [pc, #404]	; (8009e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	212c      	movs	r1, #44	; 0x2c
 8009c88:	fb01 f303 	mul.w	r3, r1, r3
 8009c8c:	4413      	add	r3, r2
 8009c8e:	330c      	adds	r3, #12
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009c94:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009c96:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8009c98:	495f      	ldr	r1, [pc, #380]	; (8009e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	202c      	movs	r0, #44	; 0x2c
 8009c9e:	fb00 f303 	mul.w	r3, r0, r3
 8009ca2:	440b      	add	r3, r1
 8009ca4:	3328      	adds	r3, #40	; 0x28
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3303      	adds	r3, #3
 8009caa:	69f9      	ldr	r1, [r7, #28]
 8009cac:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009cb4:	4a58      	ldr	r2, [pc, #352]	; (8009e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	212c      	movs	r1, #44	; 0x2c
 8009cba:	fb01 f303 	mul.w	r3, r1, r3
 8009cbe:	4413      	add	r3, r2
 8009cc0:	3310      	adds	r3, #16
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	4a54      	ldr	r2, [pc, #336]	; (8009e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	212c      	movs	r1, #44	; 0x2c
 8009ccc:	fb01 f303 	mul.w	r3, r1, r3
 8009cd0:	4413      	add	r3, r2
 8009cd2:	3320      	adds	r3, #32
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8009cd8:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009cda:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8009cdc:	494e      	ldr	r1, [pc, #312]	; (8009e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	202c      	movs	r0, #44	; 0x2c
 8009ce2:	fb00 f303 	mul.w	r3, r0, r3
 8009ce6:	440b      	add	r3, r1
 8009ce8:	3328      	adds	r3, #40	; 0x28
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	3304      	adds	r3, #4
 8009cee:	69f9      	ldr	r1, [r7, #28]
 8009cf0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8009cf8:	4a47      	ldr	r2, [pc, #284]	; (8009e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	212c      	movs	r1, #44	; 0x2c
 8009cfe:	fb01 f303 	mul.w	r3, r1, r3
 8009d02:	4413      	add	r3, r2
 8009d04:	3320      	adds	r3, #32
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	4a43      	ldr	r2, [pc, #268]	; (8009e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	212c      	movs	r1, #44	; 0x2c
 8009d10:	fb01 f303 	mul.w	r3, r1, r3
 8009d14:	4413      	add	r3, r2
 8009d16:	3314      	adds	r3, #20
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4403      	add	r3, r0
 8009d1c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	dc01      	bgt.n	8009d28 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8009d24:	2300      	movs	r3, #0
 8009d26:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8009d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	dc01      	bgt.n	8009d32 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009d32:	2300      	movs	r3, #0
 8009d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d36:	e062      	b.n	8009dfe <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009d38:	2300      	movs	r3, #0
 8009d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d3c:	e059      	b.n	8009df2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d40:	3301      	adds	r3, #1
 8009d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d44:	3201      	adds	r2, #1
 8009d46:	fb02 f203 	mul.w	r2, r2, r3
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	fb02 f303 	mul.w	r3, r2, r3
 8009d50:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d348      	bcc.n	8009dec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	623b      	str	r3, [r7, #32]
 8009d5e:	e042      	b.n	8009de6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	3301      	adds	r3, #1
 8009d64:	6a3a      	ldr	r2, [r7, #32]
 8009d66:	fb02 f203 	mul.w	r2, r2, r3
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	fb02 f303 	mul.w	r3, r2, r3
 8009d70:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d332      	bcc.n	8009de0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d82e      	bhi.n	8009de0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8009d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d02a      	beq.n	8009de0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009d8a:	4b24      	ldr	r3, [pc, #144]	; (8009e1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	4924      	ldr	r1, [pc, #144]	; (8009e20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	440b      	add	r3, r1
 8009d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d9c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009d9e:	4b1f      	ldr	r3, [pc, #124]	; (8009e1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	491f      	ldr	r1, [pc, #124]	; (8009e20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	440b      	add	r3, r1
 8009dae:	3304      	adds	r3, #4
 8009db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009db4:	4b19      	ldr	r3, [pc, #100]	; (8009e1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	4919      	ldr	r1, [pc, #100]	; (8009e20 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	440b      	add	r3, r1
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	6a3a      	ldr	r2, [r7, #32]
 8009dc8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8009dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dcc:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8009dce:	4b13      	ldr	r3, [pc, #76]	; (8009e1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	4a11      	ldr	r2, [pc, #68]	; (8009e1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009dd6:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009dd8:	4b10      	ldr	r3, [pc, #64]	; (8009e1c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8009dde:	d812      	bhi.n	8009e06 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	3301      	adds	r3, #1
 8009de4:	623b      	str	r3, [r7, #32]
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	2b0f      	cmp	r3, #15
 8009dea:	d9b9      	bls.n	8009d60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	3301      	adds	r3, #1
 8009df0:	627b      	str	r3, [r7, #36]	; 0x24
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	2b0f      	cmp	r3, #15
 8009df6:	d9a2      	bls.n	8009d3e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e00:	2b0f      	cmp	r3, #15
 8009e02:	d999      	bls.n	8009d38 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8009e04:	e000      	b.n	8009e08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8009e06:	bf00      	nop
          }
        }
      }
    }
  }
}
 8009e08:	373c      	adds	r7, #60	; 0x3c
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	3b9aca00 	.word	0x3b9aca00
 8009e18:	0802e330 	.word	0x0802e330
 8009e1c:	24003b4c 	.word	0x24003b4c
 8009e20:	2400314c 	.word	0x2400314c

08009e24 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b093      	sub	sp, #76	; 0x4c
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8009e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e32:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	085a      	lsrs	r2, r3, #1
 8009e38:	4b7a      	ldr	r3, [pc, #488]	; (800a024 <I2C_Compute_SCLL_SCLH+0x200>)
 8009e3a:	4413      	add	r3, r2
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8009e44:	4a78      	ldr	r2, [pc, #480]	; (800a028 <I2C_Compute_SCLL_SCLH+0x204>)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	212c      	movs	r1, #44	; 0x2c
 8009e4a:	fb01 f303 	mul.w	r3, r1, r3
 8009e4e:	4413      	add	r3, r2
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	085a      	lsrs	r2, r3, #1
 8009e54:	4b73      	ldr	r3, [pc, #460]	; (800a024 <I2C_Compute_SCLL_SCLH+0x200>)
 8009e56:	4413      	add	r3, r2
 8009e58:	4973      	ldr	r1, [pc, #460]	; (800a028 <I2C_Compute_SCLL_SCLH+0x204>)
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	202c      	movs	r0, #44	; 0x2c
 8009e5e:	fb00 f202 	mul.w	r2, r0, r2
 8009e62:	440a      	add	r2, r1
 8009e64:	6812      	ldr	r2, [r2, #0]
 8009e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e6a:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8009e6c:	2332      	movs	r3, #50	; 0x32
 8009e6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8009e70:	4a6d      	ldr	r2, [pc, #436]	; (800a028 <I2C_Compute_SCLL_SCLH+0x204>)
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	212c      	movs	r1, #44	; 0x2c
 8009e76:	fb01 f303 	mul.w	r3, r1, r3
 8009e7a:	4413      	add	r3, r2
 8009e7c:	3328      	adds	r3, #40	; 0x28
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e82:	fb02 f303 	mul.w	r3, r2, r3
 8009e86:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8009e88:	4a67      	ldr	r2, [pc, #412]	; (800a028 <I2C_Compute_SCLL_SCLH+0x204>)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	212c      	movs	r1, #44	; 0x2c
 8009e8e:	fb01 f303 	mul.w	r3, r1, r3
 8009e92:	4413      	add	r3, r2
 8009e94:	3304      	adds	r3, #4
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a62      	ldr	r2, [pc, #392]	; (800a024 <I2C_Compute_SCLL_SCLH+0x200>)
 8009e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e9e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8009ea0:	4a61      	ldr	r2, [pc, #388]	; (800a028 <I2C_Compute_SCLL_SCLH+0x204>)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	212c      	movs	r1, #44	; 0x2c
 8009ea6:	fb01 f303 	mul.w	r3, r1, r3
 8009eaa:	4413      	add	r3, r2
 8009eac:	3308      	adds	r3, #8
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a5c      	ldr	r2, [pc, #368]	; (800a024 <I2C_Compute_SCLL_SCLH+0x200>)
 8009eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8009eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eba:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8009ec0:	e0a3      	b.n	800a00a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8009ec2:	495a      	ldr	r1, [pc, #360]	; (800a02c <I2C_Compute_SCLL_SCLH+0x208>)
 8009ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4413      	add	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	440b      	add	r3, r1
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed6:	fb02 f303 	mul.w	r3, r2, r3
 8009eda:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009edc:	2300      	movs	r3, #0
 8009ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ee0:	e08c      	b.n	8009ffc <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	441a      	add	r2, r3
 8009ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eea:	3301      	adds	r3, #1
 8009eec:	6979      	ldr	r1, [r7, #20]
 8009eee:	fb01 f103 	mul.w	r1, r1, r3
 8009ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	440b      	add	r3, r1
 8009ef8:	4413      	add	r3, r2
 8009efa:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009efc:	4a4a      	ldr	r2, [pc, #296]	; (800a028 <I2C_Compute_SCLL_SCLH+0x204>)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	212c      	movs	r1, #44	; 0x2c
 8009f02:	fb01 f303 	mul.w	r3, r1, r3
 8009f06:	4413      	add	r3, r2
 8009f08:	3318      	adds	r3, #24
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d971      	bls.n	8009ff6 <I2C_Compute_SCLL_SCLH+0x1d2>
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	1ad2      	subs	r2, r2, r3
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	089b      	lsrs	r3, r3, #2
 8009f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d268      	bcs.n	8009ff6 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009f24:	2300      	movs	r3, #0
 8009f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f28:	e062      	b.n	8009ff0 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8009f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	441a      	add	r2, r3
 8009f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f32:	3301      	adds	r3, #1
 8009f34:	6979      	ldr	r1, [r7, #20]
 8009f36:	fb01 f103 	mul.w	r1, r1, r3
 8009f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3c:	005b      	lsls	r3, r3, #1
 8009f3e:	440b      	add	r3, r1
 8009f40:	4413      	add	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	441a      	add	r2, r3
 8009f4a:	4937      	ldr	r1, [pc, #220]	; (800a028 <I2C_Compute_SCLL_SCLH+0x204>)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	202c      	movs	r0, #44	; 0x2c
 8009f50:	fb00 f303 	mul.w	r3, r0, r3
 8009f54:	440b      	add	r3, r1
 8009f56:	3320      	adds	r3, #32
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	441a      	add	r2, r3
 8009f5c:	4932      	ldr	r1, [pc, #200]	; (800a028 <I2C_Compute_SCLL_SCLH+0x204>)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	202c      	movs	r0, #44	; 0x2c
 8009f62:	fb00 f303 	mul.w	r3, r0, r3
 8009f66:	440b      	add	r3, r1
 8009f68:	3324      	adds	r3, #36	; 0x24
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d338      	bcc.n	8009fea <I2C_Compute_SCLL_SCLH+0x1c6>
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d834      	bhi.n	8009fea <I2C_Compute_SCLL_SCLH+0x1c6>
 8009f80:	4a29      	ldr	r2, [pc, #164]	; (800a028 <I2C_Compute_SCLL_SCLH+0x204>)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	212c      	movs	r1, #44	; 0x2c
 8009f86:	fb01 f303 	mul.w	r3, r1, r3
 8009f8a:	4413      	add	r3, r2
 8009f8c:	331c      	adds	r3, #28
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d329      	bcc.n	8009fea <I2C_Compute_SCLL_SCLH+0x1c6>
 8009f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d225      	bcs.n	8009fea <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	da02      	bge.n	8009fb2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8009fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fae:	425b      	negs	r3, r3
 8009fb0:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d917      	bls.n	8009fea <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8009fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbc:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8009fbe:	491b      	ldr	r1, [pc, #108]	; (800a02c <I2C_Compute_SCLL_SCLH+0x208>)
 8009fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	440b      	add	r3, r1
 8009fcc:	3310      	adds	r3, #16
 8009fce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fd0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8009fd2:	4916      	ldr	r1, [pc, #88]	; (800a02c <I2C_Compute_SCLL_SCLH+0x208>)
 8009fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	440b      	add	r3, r1
 8009fe0:	330c      	adds	r3, #12
 8009fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fe4:	601a      	str	r2, [r3, #0]
              ret = count;
 8009fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe8:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	3301      	adds	r3, #1
 8009fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff2:	2bff      	cmp	r3, #255	; 0xff
 8009ff4:	d999      	bls.n	8009f2a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ffe:	2bff      	cmp	r3, #255	; 0xff
 800a000:	f67f af6f 	bls.w	8009ee2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a006:	3301      	adds	r3, #1
 800a008:	637b      	str	r3, [r7, #52]	; 0x34
 800a00a:	4b09      	ldr	r3, [pc, #36]	; (800a030 <I2C_Compute_SCLL_SCLH+0x20c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a010:	429a      	cmp	r2, r3
 800a012:	f4ff af56 	bcc.w	8009ec2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800a016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a018:	4618      	mov	r0, r3
 800a01a:	374c      	adds	r7, #76	; 0x4c
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	3b9aca00 	.word	0x3b9aca00
 800a028:	0802e330 	.word	0x0802e330
 800a02c:	2400314c 	.word	0x2400314c
 800a030:	24003b4c 	.word	0x24003b4c

0800a034 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b08a      	sub	sp, #40	; 0x28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a03c:	4b31      	ldr	r3, [pc, #196]	; (800a104 <I2C4_MspInit+0xd0>)
 800a03e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a042:	4a30      	ldr	r2, [pc, #192]	; (800a104 <I2C4_MspInit+0xd0>)
 800a044:	f043 0308 	orr.w	r3, r3, #8
 800a048:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a04c:	4b2d      	ldr	r3, [pc, #180]	; (800a104 <I2C4_MspInit+0xd0>)
 800a04e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a052:	f003 0308 	and.w	r3, r3, #8
 800a056:	613b      	str	r3, [r7, #16]
 800a058:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800a05a:	4b2a      	ldr	r3, [pc, #168]	; (800a104 <I2C4_MspInit+0xd0>)
 800a05c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a060:	4a28      	ldr	r2, [pc, #160]	; (800a104 <I2C4_MspInit+0xd0>)
 800a062:	f043 0308 	orr.w	r3, r3, #8
 800a066:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a06a:	4b26      	ldr	r3, [pc, #152]	; (800a104 <I2C4_MspInit+0xd0>)
 800a06c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a070:	f003 0308 	and.w	r3, r3, #8
 800a074:	60fb      	str	r3, [r7, #12]
 800a076:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800a078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a07c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a07e:	2312      	movs	r3, #18
 800a080:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a082:	2300      	movs	r3, #0
 800a084:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800a086:	2302      	movs	r3, #2
 800a088:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800a08a:	2304      	movs	r3, #4
 800a08c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800a08e:	f107 0314 	add.w	r3, r7, #20
 800a092:	4619      	mov	r1, r3
 800a094:	481c      	ldr	r0, [pc, #112]	; (800a108 <I2C4_MspInit+0xd4>)
 800a096:	f003 fac5 	bl	800d624 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800a09a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a09e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a0a0:	2312      	movs	r3, #18
 800a0a2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800a0ac:	2304      	movs	r3, #4
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800a0b0:	f107 0314 	add.w	r3, r7, #20
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	4814      	ldr	r0, [pc, #80]	; (800a108 <I2C4_MspInit+0xd4>)
 800a0b8:	f003 fab4 	bl	800d624 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800a0bc:	4b11      	ldr	r3, [pc, #68]	; (800a104 <I2C4_MspInit+0xd0>)
 800a0be:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a0c2:	4a10      	ldr	r2, [pc, #64]	; (800a104 <I2C4_MspInit+0xd0>)
 800a0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800a0cc:	4b0d      	ldr	r3, [pc, #52]	; (800a104 <I2C4_MspInit+0xd0>)
 800a0ce:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a0d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0d6:	60bb      	str	r3, [r7, #8]
 800a0d8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800a0da:	4b0a      	ldr	r3, [pc, #40]	; (800a104 <I2C4_MspInit+0xd0>)
 800a0dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0e0:	4a08      	ldr	r2, [pc, #32]	; (800a104 <I2C4_MspInit+0xd0>)
 800a0e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800a0ea:	4b06      	ldr	r3, [pc, #24]	; (800a104 <I2C4_MspInit+0xd0>)
 800a0ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0f0:	4a04      	ldr	r2, [pc, #16]	; (800a104 <I2C4_MspInit+0xd0>)
 800a0f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800a0fa:	bf00      	nop
 800a0fc:	3728      	adds	r7, #40	; 0x28
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	58024400 	.word	0x58024400
 800a108:	58020c00 	.word	0x58020c00

0800a10c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b088      	sub	sp, #32
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800a114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a118:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	4619      	mov	r1, r3
 800a11e:	480b      	ldr	r0, [pc, #44]	; (800a14c <I2C4_MspDeInit+0x40>)
 800a120:	f003 fc30 	bl	800d984 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800a124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a128:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	4619      	mov	r1, r3
 800a12e:	4807      	ldr	r0, [pc, #28]	; (800a14c <I2C4_MspDeInit+0x40>)
 800a130:	f003 fc28 	bl	800d984 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800a134:	4b06      	ldr	r3, [pc, #24]	; (800a150 <I2C4_MspDeInit+0x44>)
 800a136:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a13a:	4a05      	ldr	r2, [pc, #20]	; (800a150 <I2C4_MspDeInit+0x44>)
 800a13c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a140:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 800a144:	bf00      	nop
 800a146:	3720      	adds	r7, #32
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	58020c00 	.word	0x58020c00
 800a150:	58024400 	.word	0x58024400

0800a154 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af04      	add	r7, sp, #16
 800a15a:	607b      	str	r3, [r7, #4]
 800a15c:	4603      	mov	r3, r0
 800a15e:	81fb      	strh	r3, [r7, #14]
 800a160:	460b      	mov	r3, r1
 800a162:	81bb      	strh	r3, [r7, #12]
 800a164:	4613      	mov	r3, r2
 800a166:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a168:	8978      	ldrh	r0, [r7, #10]
 800a16a:	89ba      	ldrh	r2, [r7, #12]
 800a16c:	89f9      	ldrh	r1, [r7, #14]
 800a16e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a172:	9302      	str	r3, [sp, #8]
 800a174:	8b3b      	ldrh	r3, [r7, #24]
 800a176:	9301      	str	r3, [sp, #4]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	4603      	mov	r3, r0
 800a17e:	4807      	ldr	r0, [pc, #28]	; (800a19c <I2C4_WriteReg+0x48>)
 800a180:	f003 fe22 	bl	800ddc8 <HAL_I2C_Mem_Write>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800a18a:	2300      	movs	r3, #0
 800a18c:	e001      	b.n	800a192 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800a18e:	f06f 0307 	mvn.w	r3, #7
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	2400ce40 	.word	0x2400ce40

0800a1a0 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af04      	add	r7, sp, #16
 800a1a6:	607b      	str	r3, [r7, #4]
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	81fb      	strh	r3, [r7, #14]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	81bb      	strh	r3, [r7, #12]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a1b4:	8978      	ldrh	r0, [r7, #10]
 800a1b6:	89ba      	ldrh	r2, [r7, #12]
 800a1b8:	89f9      	ldrh	r1, [r7, #14]
 800a1ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a1be:	9302      	str	r3, [sp, #8]
 800a1c0:	8b3b      	ldrh	r3, [r7, #24]
 800a1c2:	9301      	str	r3, [sp, #4]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	4807      	ldr	r0, [pc, #28]	; (800a1e8 <I2C4_ReadReg+0x48>)
 800a1cc:	f003 ff10 	bl	800dff0 <HAL_I2C_Mem_Read>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e001      	b.n	800a1de <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800a1da:	f06f 0307 	mvn.w	r3, #7
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	2400ce40 	.word	0x2400ce40

0800a1ec <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b094      	sub	sp, #80	; 0x50
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d003      	beq.n	800a208 <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a200:	f06f 0301 	mvn.w	r3, #1
 800a204:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a206:	e074      	b.n	800a2f2 <BSP_OSPI_NOR_Init+0x106>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800a208:	4a3c      	ldr	r2, [pc, #240]	; (800a2fc <BSP_OSPI_NOR_Init+0x110>)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d16e      	bne.n	800a2f2 <BSP_OSPI_NOR_Init+0x106>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	4613      	mov	r3, r2
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	4413      	add	r3, r2
 800a21c:	015b      	lsls	r3, r3, #5
 800a21e:	4a38      	ldr	r2, [pc, #224]	; (800a300 <BSP_OSPI_NOR_Init+0x114>)
 800a220:	4413      	add	r3, r2
 800a222:	4618      	mov	r0, r3
 800a224:	f000 fa0e 	bl	800a644 <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 800a228:	f107 031c 	add.w	r3, r7, #28
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fe fee8 	bl	8009002 <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 800a232:	2303      	movs	r3, #3
 800a234:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a23a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a23c:	fa93 f3a3 	rbit	r3, r3
 800a240:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a244:	64bb      	str	r3, [r7, #72]	; 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d101      	bne.n	800a250 <BSP_OSPI_NOR_Init+0x64>
  {
    return 32U;
 800a24c:	2320      	movs	r3, #32
 800a24e:	e003      	b.n	800a258 <BSP_OSPI_NOR_Init+0x6c>
  }
  return __builtin_clz(value);
 800a250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a252:	fab3 f383 	clz	r3, r3
 800a256:	b2db      	uxtb	r3, r3
 800a258:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800a25a:	2300      	movs	r3, #0
 800a25c:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	785b      	ldrb	r3, [r3, #1]
 800a262:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	4613      	mov	r3, r2
 800a268:	005b      	lsls	r3, r3, #1
 800a26a:	4413      	add	r3, r2
 800a26c:	015b      	lsls	r3, r3, #5
 800a26e:	4a24      	ldr	r2, [pc, #144]	; (800a300 <BSP_OSPI_NOR_Init+0x114>)
 800a270:	4413      	add	r3, r2
 800a272:	f107 020c 	add.w	r2, r7, #12
 800a276:	4611      	mov	r1, r2
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 f897 	bl	800a3ac <MX_OSPI_NOR_Init>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d003      	beq.n	800a28c <BSP_OSPI_NOR_Init+0xa0>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a284:	f06f 0303 	mvn.w	r3, #3
 800a288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a28a:	e032      	b.n	800a2f2 <BSP_OSPI_NOR_Init+0x106>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 fb83 	bl	800a998 <OSPI_NOR_ResetMemory>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d003      	beq.n	800a2a0 <BSP_OSPI_NOR_Init+0xb4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a298:	f06f 0304 	mvn.w	r3, #4
 800a29c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a29e:	e028      	b.n	800a2f2 <BSP_OSPI_NOR_Init+0x106>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	4413      	add	r3, r2
 800a2a8:	015b      	lsls	r3, r3, #5
 800a2aa:	4a15      	ldr	r2, [pc, #84]	; (800a300 <BSP_OSPI_NOR_Init+0x114>)
 800a2ac:	1898      	adds	r0, r3, r2
 800a2ae:	4a13      	ldr	r2, [pc, #76]	; (800a2fc <BSP_OSPI_NOR_Init+0x110>)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	00db      	lsls	r3, r3, #3
 800a2b4:	4413      	add	r3, r2
 800a2b6:	7859      	ldrb	r1, [r3, #1]
 800a2b8:	4a10      	ldr	r2, [pc, #64]	; (800a2fc <BSP_OSPI_NOR_Init+0x110>)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	00db      	lsls	r3, r3, #3
 800a2be:	4413      	add	r3, r2
 800a2c0:	789b      	ldrb	r3, [r3, #2]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	f7fe fecc 	bl	8009060 <MX25LM51245G_AutoPollingMemReady>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <BSP_OSPI_NOR_Init+0xea>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2ce:	f06f 0304 	mvn.w	r3, #4
 800a2d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2d4:	e00d      	b.n	800a2f2 <BSP_OSPI_NOR_Init+0x106>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	7819      	ldrb	r1, [r3, #0]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	785b      	ldrb	r3, [r3, #1]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f939 	bl	800a558 <BSP_OSPI_NOR_ConfigFlash>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <BSP_OSPI_NOR_Init+0x106>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2ec:	f06f 0304 	mvn.w	r3, #4
 800a2f0:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 800a2f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3750      	adds	r7, #80	; 0x50
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	2400ce8c 	.word	0x2400ce8c
 800a300:	2400ce94 	.word	0x2400ce94

0800a304 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a30c:	2300      	movs	r3, #0
 800a30e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d003      	beq.n	800a31e <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a316:	f06f 0301 	mvn.w	r3, #1
 800a31a:	60fb      	str	r3, [r7, #12]
 800a31c:	e03c      	b.n	800a398 <BSP_OSPI_NOR_DeInit+0x94>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800a31e:	4a21      	ldr	r2, [pc, #132]	; (800a3a4 <BSP_OSPI_NOR_DeInit+0xa0>)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800a326:	2b02      	cmp	r3, #2
 800a328:	d108      	bne.n	800a33c <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f8de 	bl	800a4ec <BSP_OSPI_NOR_DisableMemoryMappedMode>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d002      	beq.n	800a33c <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a336:	f06f 0304 	mvn.w	r3, #4
 800a33a:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d12a      	bne.n	800a398 <BSP_OSPI_NOR_DeInit+0x94>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 800a342:	4a18      	ldr	r2, [pc, #96]	; (800a3a4 <BSP_OSPI_NOR_DeInit+0xa0>)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2100      	movs	r1, #0
 800a348:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 800a34c:	4a15      	ldr	r2, [pc, #84]	; (800a3a4 <BSP_OSPI_NOR_DeInit+0xa0>)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	00db      	lsls	r3, r3, #3
 800a352:	4413      	add	r3, r2
 800a354:	2200      	movs	r2, #0
 800a356:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 800a358:	4a12      	ldr	r2, [pc, #72]	; (800a3a4 <BSP_OSPI_NOR_DeInit+0xa0>)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	00db      	lsls	r3, r3, #3
 800a35e:	4413      	add	r3, r2
 800a360:	2200      	movs	r2, #0
 800a362:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	4613      	mov	r3, r2
 800a368:	005b      	lsls	r3, r3, #1
 800a36a:	4413      	add	r3, r2
 800a36c:	015b      	lsls	r3, r3, #5
 800a36e:	4a0e      	ldr	r2, [pc, #56]	; (800a3a8 <BSP_OSPI_NOR_DeInit+0xa4>)
 800a370:	4413      	add	r3, r2
 800a372:	4618      	mov	r0, r3
 800a374:	f000 fab6 	bl	800a8e4 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	4613      	mov	r3, r2
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	4413      	add	r3, r2
 800a380:	015b      	lsls	r3, r3, #5
 800a382:	4a09      	ldr	r2, [pc, #36]	; (800a3a8 <BSP_OSPI_NOR_DeInit+0xa4>)
 800a384:	4413      	add	r3, r2
 800a386:	4618      	mov	r0, r3
 800a388:	f004 fef4 	bl	800f174 <HAL_OSPI_DeInit>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d002      	beq.n	800a398 <BSP_OSPI_NOR_DeInit+0x94>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800a392:	f06f 0303 	mvn.w	r3, #3
 800a396:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800a398:	68fb      	ldr	r3, [r7, #12]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	2400ce8c 	.word	0x2400ce8c
 800a3a8:	2400ce94 	.word	0x2400ce94

0800a3ac <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a20      	ldr	r2, [pc, #128]	; (800a43c <MX_OSPI_NOR_Init+0x90>)
 800a3ba:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2204      	movs	r2, #4
 800a3c0:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	625a      	str	r2, [r3, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	689a      	ldr	r2, [r3, #8]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi->Init.ChipSelectBoundary = 0;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	631a      	str	r2, [r3, #48]	; 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2208      	movs	r2, #8
 800a402:	639a      	str	r2, [r3, #56]	; 0x38

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d108      	bne.n	800a41e <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a412:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a41a:	62da      	str	r2, [r3, #44]	; 0x2c
 800a41c:	e005      	b.n	800a42a <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return HAL_OSPI_Init(hospi);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f004 fde2 	bl	800eff4 <HAL_OSPI_Init>
 800a430:	4603      	mov	r3, r0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	52005000 	.word	0x52005000

0800a440 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a448:	2300      	movs	r3, #0
 800a44a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a452:	f06f 0301 	mvn.w	r3, #1
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	e03f      	b.n	800a4da <BSP_OSPI_NOR_EnableMemoryMappedMode+0x9a>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800a45a:	4a22      	ldr	r2, [pc, #136]	; (800a4e4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	00db      	lsls	r3, r3, #3
 800a460:	4413      	add	r3, r2
 800a462:	789b      	ldrb	r3, [r3, #2]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d11c      	bne.n	800a4a2 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x62>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	4613      	mov	r3, r2
 800a46c:	005b      	lsls	r3, r3, #1
 800a46e:	4413      	add	r3, r2
 800a470:	015b      	lsls	r3, r3, #5
 800a472:	4a1d      	ldr	r2, [pc, #116]	; (800a4e8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa8>)
 800a474:	1898      	adds	r0, r3, r2
 800a476:	4a1b      	ldr	r2, [pc, #108]	; (800a4e4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	00db      	lsls	r3, r3, #3
 800a47c:	4413      	add	r3, r2
 800a47e:	785b      	ldrb	r3, [r3, #1]
 800a480:	2201      	movs	r2, #1
 800a482:	4619      	mov	r1, r3
 800a484:	f7fe fe99 	bl	80091ba <MX25LM51245G_EnableMemoryMappedModeSTR>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d003      	beq.n	800a496 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x56>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a48e:	f06f 0304 	mvn.w	r3, #4
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	e021      	b.n	800a4da <BSP_OSPI_NOR_EnableMemoryMappedMode+0x9a>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800a496:	4a13      	ldr	r2, [pc, #76]	; (800a4e4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2102      	movs	r1, #2
 800a49c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 800a4a0:	e01b      	b.n	800a4da <BSP_OSPI_NOR_EnableMemoryMappedMode+0x9a>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	005b      	lsls	r3, r3, #1
 800a4a8:	4413      	add	r3, r2
 800a4aa:	015b      	lsls	r3, r3, #5
 800a4ac:	4a0e      	ldr	r2, [pc, #56]	; (800a4e8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa8>)
 800a4ae:	441a      	add	r2, r3
 800a4b0:	490c      	ldr	r1, [pc, #48]	; (800a4e4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	00db      	lsls	r3, r3, #3
 800a4b6:	440b      	add	r3, r1
 800a4b8:	785b      	ldrb	r3, [r3, #1]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	4610      	mov	r0, r2
 800a4be:	f7fe ff26 	bl	800930e <MX25LM51245G_EnableMemoryMappedModeDTR>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d003      	beq.n	800a4d0 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x90>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a4c8:	f06f 0304 	mvn.w	r3, #4
 800a4cc:	60fb      	str	r3, [r7, #12]
 800a4ce:	e004      	b.n	800a4da <BSP_OSPI_NOR_EnableMemoryMappedMode+0x9a>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 800a4d0:	4a04      	ldr	r2, [pc, #16]	; (800a4e4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2102      	movs	r1, #2
 800a4d6:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 800a4da:	68fb      	ldr	r3, [r7, #12]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	2400ce8c 	.word	0x2400ce8c
 800a4e8:	2400ce94 	.word	0x2400ce94

0800a4ec <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d003      	beq.n	800a506 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a4fe:	f06f 0301 	mvn.w	r3, #1
 800a502:	60fb      	str	r3, [r7, #12]
 800a504:	e01f      	b.n	800a546 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x5a>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800a506:	4a12      	ldr	r2, [pc, #72]	; (800a550 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d003      	beq.n	800a51a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 800a512:	f06f 031a 	mvn.w	r3, #26
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	e015      	b.n	800a546 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x5a>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	4613      	mov	r3, r2
 800a51e:	005b      	lsls	r3, r3, #1
 800a520:	4413      	add	r3, r2
 800a522:	015b      	lsls	r3, r3, #5
 800a524:	4a0b      	ldr	r2, [pc, #44]	; (800a554 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 800a526:	4413      	add	r3, r2
 800a528:	4618      	mov	r0, r3
 800a52a:	f005 fa55 	bl	800f9d8 <HAL_OSPI_Abort>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <BSP_OSPI_NOR_DisableMemoryMappedMode+0x50>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800a534:	f06f 0303 	mvn.w	r3, #3
 800a538:	60fb      	str	r3, [r7, #12]
 800a53a:	e004      	b.n	800a546 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x5a>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800a53c:	4a04      	ldr	r2, [pc, #16]	; (800a550 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2101      	movs	r1, #1
 800a542:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 800a546:	68fb      	ldr	r3, [r7, #12]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	2400ce8c 	.word	0x2400ce8c
 800a554:	2400ce94 	.word	0x2400ce94

0800a558 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	70fb      	strb	r3, [r7, #3]
 800a564:	4613      	mov	r3, r2
 800a566:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800a568:	2300      	movs	r3, #0
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d003      	beq.n	800a57a <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a572:	f06f 0301 	mvn.w	r3, #1
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	e05d      	b.n	800a636 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800a57a:	4a31      	ldr	r2, [pc, #196]	; (800a640 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800a582:	2b02      	cmp	r3, #2
 800a584:	d103      	bne.n	800a58e <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800a586:	f06f 0319 	mvn.w	r3, #25
 800a58a:	60fb      	str	r3, [r7, #12]
 800a58c:	e053      	b.n	800a636 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 800a58e:	4a2c      	ldr	r2, [pc, #176]	; (800a640 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	00db      	lsls	r3, r3, #3
 800a594:	4413      	add	r3, r2
 800a596:	785b      	ldrb	r3, [r3, #1]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d125      	bne.n	800a5e8 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 800a59c:	78fb      	ldrb	r3, [r7, #3]
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d107      	bne.n	800a5b2 <BSP_OSPI_NOR_ConfigFlash+0x5a>
 800a5a2:	4a27      	ldr	r2, [pc, #156]	; (800a640 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	00db      	lsls	r3, r3, #3
 800a5a8:	4413      	add	r3, r2
 800a5aa:	789b      	ldrb	r3, [r3, #2]
 800a5ac:	78ba      	ldrb	r2, [r7, #2]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d02a      	beq.n	800a608 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fc12 	bl	800addc <OSPI_NOR_ExitOPIMode>
 800a5b8:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d123      	bne.n	800a608 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d120      	bne.n	800a608 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800a5c6:	4a1e      	ldr	r2, [pc, #120]	; (800a640 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	00db      	lsls	r3, r3, #3
 800a5cc:	4413      	add	r3, r2
 800a5ce:	789b      	ldrb	r3, [r3, #2]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d104      	bne.n	800a5de <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fa75 	bl	800aac4 <OSPI_NOR_EnterDOPIMode>
 800a5da:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 800a5dc:	e014      	b.n	800a608 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fb4a 	bl	800ac78 <OSPI_NOR_EnterSOPIMode>
 800a5e4:	60f8      	str	r0, [r7, #12]
      break;
 800a5e6:	e00f      	b.n	800a608 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 800a5e8:	78fb      	ldrb	r3, [r7, #3]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d10e      	bne.n	800a60c <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 800a5ee:	78bb      	ldrb	r3, [r7, #2]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d104      	bne.n	800a5fe <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fb3f 	bl	800ac78 <OSPI_NOR_EnterSOPIMode>
 800a5fa:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 800a5fc:	e006      	b.n	800a60c <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fa60 	bl	800aac4 <OSPI_NOR_EnterDOPIMode>
 800a604:	60f8      	str	r0, [r7, #12]
      break;
 800a606:	e001      	b.n	800a60c <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 800a608:	bf00      	nop
 800a60a:	e000      	b.n	800a60e <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 800a60c:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d110      	bne.n	800a636 <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800a614:	4a0a      	ldr	r2, [pc, #40]	; (800a640 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2101      	movs	r1, #1
 800a61a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 800a61e:	4a08      	ldr	r2, [pc, #32]	; (800a640 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	4413      	add	r3, r2
 800a626:	78fa      	ldrb	r2, [r7, #3]
 800a628:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800a62a:	4a05      	ldr	r2, [pc, #20]	; (800a640 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	00db      	lsls	r3, r3, #3
 800a630:	4413      	add	r3, r2
 800a632:	78ba      	ldrb	r2, [r7, #2]
 800a634:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 800a636:	68fb      	ldr	r3, [r7, #12]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	2400ce8c 	.word	0x2400ce8c

0800a644 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b094      	sub	sp, #80	; 0x50
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800a64c:	4b9e      	ldr	r3, [pc, #632]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a64e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a652:	4a9d      	ldr	r2, [pc, #628]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a658:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800a65c:	4b9a      	ldr	r3, [pc, #616]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a65e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a666:	63bb      	str	r3, [r7, #56]	; 0x38
 800a668:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800a66a:	4b97      	ldr	r3, [pc, #604]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a66c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a66e:	4a96      	ldr	r2, [pc, #600]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a674:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800a676:	4b94      	ldr	r3, [pc, #592]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a67a:	4a93      	ldr	r2, [pc, #588]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a67c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a680:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 800a682:	4b91      	ldr	r3, [pc, #580]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a684:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a688:	4a8f      	ldr	r2, [pc, #572]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a68a:	f043 0302 	orr.w	r3, r3, #2
 800a68e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a692:	4b8d      	ldr	r3, [pc, #564]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a694:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a698:	f003 0302 	and.w	r3, r3, #2
 800a69c:	637b      	str	r3, [r7, #52]	; 0x34
 800a69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 800a6a0:	4b89      	ldr	r3, [pc, #548]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a6a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a6a6:	4a88      	ldr	r2, [pc, #544]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a6a8:	f043 0304 	orr.w	r3, r3, #4
 800a6ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a6b0:	4b85      	ldr	r3, [pc, #532]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a6b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a6b6:	f003 0304 	and.w	r3, r3, #4
 800a6ba:	633b      	str	r3, [r7, #48]	; 0x30
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 800a6be:	4b82      	ldr	r3, [pc, #520]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a6c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a6c4:	4a80      	ldr	r2, [pc, #512]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a6c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a6ce:	4b7e      	ldr	r3, [pc, #504]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a6d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 800a6dc:	4b7a      	ldr	r3, [pc, #488]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a6de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a6e2:	4a79      	ldr	r2, [pc, #484]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a6e4:	f043 0308 	orr.w	r3, r3, #8
 800a6e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a6ec:	4b76      	ldr	r3, [pc, #472]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a6ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a6f2:	f003 0308 	and.w	r3, r3, #8
 800a6f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 800a6fa:	4b73      	ldr	r3, [pc, #460]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a6fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a700:	4a71      	ldr	r2, [pc, #452]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a702:	f043 0320 	orr.w	r3, r3, #32
 800a706:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a70a:	4b6f      	ldr	r3, [pc, #444]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a70c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a710:	f003 0320 	and.w	r3, r3, #32
 800a714:	627b      	str	r3, [r7, #36]	; 0x24
 800a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 800a718:	4b6b      	ldr	r3, [pc, #428]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a71a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a71e:	4a6a      	ldr	r2, [pc, #424]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a720:	f043 0320 	orr.w	r3, r3, #32
 800a724:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a728:	4b67      	ldr	r3, [pc, #412]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a72a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a72e:	f003 0320 	and.w	r3, r3, #32
 800a732:	623b      	str	r3, [r7, #32]
 800a734:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 800a736:	4b64      	ldr	r3, [pc, #400]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a738:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a73c:	4a62      	ldr	r2, [pc, #392]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a73e:	f043 0320 	orr.w	r3, r3, #32
 800a742:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a746:	4b60      	ldr	r3, [pc, #384]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a748:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a74c:	f003 0320 	and.w	r3, r3, #32
 800a750:	61fb      	str	r3, [r7, #28]
 800a752:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 800a754:	4b5c      	ldr	r3, [pc, #368]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a756:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a75a:	4a5b      	ldr	r2, [pc, #364]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a75c:	f043 0304 	orr.w	r3, r3, #4
 800a760:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a764:	4b58      	ldr	r3, [pc, #352]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a766:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a76a:	f003 0304 	and.w	r3, r3, #4
 800a76e:	61bb      	str	r3, [r7, #24]
 800a770:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 800a772:	4b55      	ldr	r3, [pc, #340]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a774:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a778:	4a53      	ldr	r2, [pc, #332]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a77a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a77e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a782:	4b51      	ldr	r3, [pc, #324]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a784:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a78c:	617b      	str	r3, [r7, #20]
 800a78e:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 800a790:	4b4d      	ldr	r3, [pc, #308]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a792:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a796:	4a4c      	ldr	r2, [pc, #304]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a79c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a7a0:	4b49      	ldr	r3, [pc, #292]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a7a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7aa:	613b      	str	r3, [r7, #16]
 800a7ac:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 800a7ae:	4b46      	ldr	r3, [pc, #280]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a7b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a7b4:	4a44      	ldr	r2, [pc, #272]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800a7be:	4b42      	ldr	r3, [pc, #264]	; (800a8c8 <OSPI_NOR_MspInit+0x284>)
 800a7c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800a7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c8:	60fb      	str	r3, [r7, #12]
 800a7ca:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 800a7cc:	2340      	movs	r3, #64	; 0x40
 800a7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 800a7dc:	230a      	movs	r3, #10
 800a7de:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 800a7e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4839      	ldr	r0, [pc, #228]	; (800a8cc <OSPI_NOR_MspInit+0x288>)
 800a7e8:	f002 ff1c 	bl	800d624 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 800a7ec:	2320      	movs	r3, #32
 800a7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 800a7f0:	230a      	movs	r3, #10
 800a7f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 800a7f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4835      	ldr	r0, [pc, #212]	; (800a8d0 <OSPI_NOR_MspInit+0x28c>)
 800a7fc:	f002 ff12 	bl	800d624 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 800a800:	2304      	movs	r3, #4
 800a802:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a804:	2300      	movs	r3, #0
 800a806:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 800a808:	2309      	movs	r3, #9
 800a80a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 800a80c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a810:	4619      	mov	r1, r3
 800a812:	4830      	ldr	r0, [pc, #192]	; (800a8d4 <OSPI_NOR_MspInit+0x290>)
 800a814:	f002 ff06 	bl	800d624 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 800a818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 800a81e:	2309      	movs	r3, #9
 800a820:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 800a822:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a826:	4619      	mov	r1, r3
 800a828:	482b      	ldr	r0, [pc, #172]	; (800a8d8 <OSPI_NOR_MspInit+0x294>)
 800a82a:	f002 fefb 	bl	800d624 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 800a82e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a832:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 800a834:	230a      	movs	r3, #10
 800a836:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 800a838:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a83c:	4619      	mov	r1, r3
 800a83e:	4827      	ldr	r0, [pc, #156]	; (800a8dc <OSPI_NOR_MspInit+0x298>)
 800a840:	f002 fef0 	bl	800d624 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 800a844:	2380      	movs	r3, #128	; 0x80
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 800a848:	230a      	movs	r3, #10
 800a84a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800a84c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a850:	4619      	mov	r1, r3
 800a852:	4822      	ldr	r0, [pc, #136]	; (800a8dc <OSPI_NOR_MspInit+0x298>)
 800a854:	f002 fee6 	bl	800d624 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 800a858:	2340      	movs	r3, #64	; 0x40
 800a85a:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800a85c:	230a      	movs	r3, #10
 800a85e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 800a860:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a864:	4619      	mov	r1, r3
 800a866:	481d      	ldr	r0, [pc, #116]	; (800a8dc <OSPI_NOR_MspInit+0x298>)
 800a868:	f002 fedc 	bl	800d624 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 800a86c:	2302      	movs	r3, #2
 800a86e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 800a870:	230a      	movs	r3, #10
 800a872:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 800a874:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a878:	4619      	mov	r1, r3
 800a87a:	4815      	ldr	r0, [pc, #84]	; (800a8d0 <OSPI_NOR_MspInit+0x28c>)
 800a87c:	f002 fed2 	bl	800d624 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 800a880:	2308      	movs	r3, #8
 800a882:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 800a884:	2309      	movs	r3, #9
 800a886:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800a888:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a88c:	4619      	mov	r1, r3
 800a88e:	4814      	ldr	r0, [pc, #80]	; (800a8e0 <OSPI_NOR_MspInit+0x29c>)
 800a890:	f002 fec8 	bl	800d624 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 800a894:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a898:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 800a89a:	2309      	movs	r3, #9
 800a89c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 800a89e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	4809      	ldr	r0, [pc, #36]	; (800a8cc <OSPI_NOR_MspInit+0x288>)
 800a8a6:	f002 febd 	bl	800d624 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 800a8aa:	2380      	movs	r3, #128	; 0x80
 800a8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 800a8ae:	230a      	movs	r3, #10
 800a8b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 800a8b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4807      	ldr	r0, [pc, #28]	; (800a8d8 <OSPI_NOR_MspInit+0x294>)
 800a8ba:	f002 feb3 	bl	800d624 <HAL_GPIO_Init>
}
 800a8be:	bf00      	nop
 800a8c0:	3750      	adds	r7, #80	; 0x50
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	58024400 	.word	0x58024400
 800a8cc:	58021800 	.word	0x58021800
 800a8d0:	58020800 	.word	0x58020800
 800a8d4:	58020400 	.word	0x58020400
 800a8d8:	58020c00 	.word	0x58020c00
 800a8dc:	58021400 	.word	0x58021400
 800a8e0:	58021c00 	.word	0x58021c00

0800a8e4 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 800a8ec:	2104      	movs	r1, #4
 800a8ee:	4823      	ldr	r0, [pc, #140]	; (800a97c <OSPI_NOR_MspDeInit+0x98>)
 800a8f0:	f003 f848 	bl	800d984 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 800a8f4:	2120      	movs	r1, #32
 800a8f6:	4822      	ldr	r0, [pc, #136]	; (800a980 <OSPI_NOR_MspDeInit+0x9c>)
 800a8f8:	f003 f844 	bl	800d984 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 800a8fc:	2140      	movs	r1, #64	; 0x40
 800a8fe:	4821      	ldr	r0, [pc, #132]	; (800a984 <OSPI_NOR_MspDeInit+0xa0>)
 800a900:	f003 f840 	bl	800d984 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 800a904:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a908:	481f      	ldr	r0, [pc, #124]	; (800a988 <OSPI_NOR_MspDeInit+0xa4>)
 800a90a:	f003 f83b 	bl	800d984 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 800a90e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a912:	481e      	ldr	r0, [pc, #120]	; (800a98c <OSPI_NOR_MspDeInit+0xa8>)
 800a914:	f003 f836 	bl	800d984 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 800a918:	2180      	movs	r1, #128	; 0x80
 800a91a:	481c      	ldr	r0, [pc, #112]	; (800a98c <OSPI_NOR_MspDeInit+0xa8>)
 800a91c:	f003 f832 	bl	800d984 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 800a920:	2140      	movs	r1, #64	; 0x40
 800a922:	481a      	ldr	r0, [pc, #104]	; (800a98c <OSPI_NOR_MspDeInit+0xa8>)
 800a924:	f003 f82e 	bl	800d984 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 800a928:	2102      	movs	r1, #2
 800a92a:	4815      	ldr	r0, [pc, #84]	; (800a980 <OSPI_NOR_MspDeInit+0x9c>)
 800a92c:	f003 f82a 	bl	800d984 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 800a930:	2108      	movs	r1, #8
 800a932:	4817      	ldr	r0, [pc, #92]	; (800a990 <OSPI_NOR_MspDeInit+0xac>)
 800a934:	f003 f826 	bl	800d984 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 800a938:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a93c:	4811      	ldr	r0, [pc, #68]	; (800a984 <OSPI_NOR_MspDeInit+0xa0>)
 800a93e:	f003 f821 	bl	800d984 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 800a942:	2180      	movs	r1, #128	; 0x80
 800a944:	4810      	ldr	r0, [pc, #64]	; (800a988 <OSPI_NOR_MspDeInit+0xa4>)
 800a946:	f003 f81d 	bl	800d984 <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800a94a:	4b12      	ldr	r3, [pc, #72]	; (800a994 <OSPI_NOR_MspDeInit+0xb0>)
 800a94c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a94e:	4a11      	ldr	r2, [pc, #68]	; (800a994 <OSPI_NOR_MspDeInit+0xb0>)
 800a950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a954:	67d3      	str	r3, [r2, #124]	; 0x7c
  OSPI_RELEASE_RESET();
 800a956:	4b0f      	ldr	r3, [pc, #60]	; (800a994 <OSPI_NOR_MspDeInit+0xb0>)
 800a958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a95a:	4a0e      	ldr	r2, [pc, #56]	; (800a994 <OSPI_NOR_MspDeInit+0xb0>)
 800a95c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a960:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 800a962:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <OSPI_NOR_MspDeInit+0xb0>)
 800a964:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a968:	4a0a      	ldr	r2, [pc, #40]	; (800a994 <OSPI_NOR_MspDeInit+0xb0>)
 800a96a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a96e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
}
 800a972:	bf00      	nop
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	58020400 	.word	0x58020400
 800a980:	58020800 	.word	0x58020800
 800a984:	58021800 	.word	0x58021800
 800a988:	58020c00 	.word	0x58020c00
 800a98c:	58021400 	.word	0x58021400
 800a990:	58021c00 	.word	0x58021c00
 800a994:	58024400 	.word	0x58024400

0800a998 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	005b      	lsls	r3, r3, #1
 800a9aa:	4413      	add	r3, r2
 800a9ac:	015b      	lsls	r3, r3, #5
 800a9ae:	4a43      	ldr	r2, [pc, #268]	; (800aabc <OSPI_NOR_ResetMemory+0x124>)
 800a9b0:	4413      	add	r3, r2
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fe ff12 	bl	80097e0 <MX25LM51245G_ResetEnable>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <OSPI_NOR_ResetMemory+0x32>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9c2:	f06f 0304 	mvn.w	r3, #4
 800a9c6:	60fb      	str	r3, [r7, #12]
 800a9c8:	e072      	b.n	800aab0 <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	005b      	lsls	r3, r3, #1
 800a9d0:	4413      	add	r3, r2
 800a9d2:	015b      	lsls	r3, r3, #5
 800a9d4:	4a39      	ldr	r2, [pc, #228]	; (800aabc <OSPI_NOR_ResetMemory+0x124>)
 800a9d6:	4413      	add	r3, r2
 800a9d8:	2200      	movs	r2, #0
 800a9da:	2100      	movs	r1, #0
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fe ff57 	bl	8009890 <MX25LM51245G_ResetMemory>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d003      	beq.n	800a9f0 <OSPI_NOR_ResetMemory+0x58>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9e8:	f06f 0304 	mvn.w	r3, #4
 800a9ec:	60fb      	str	r3, [r7, #12]
 800a9ee:	e05f      	b.n	800aab0 <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	005b      	lsls	r3, r3, #1
 800a9f6:	4413      	add	r3, r2
 800a9f8:	015b      	lsls	r3, r3, #5
 800a9fa:	4a30      	ldr	r2, [pc, #192]	; (800aabc <OSPI_NOR_ResetMemory+0x124>)
 800a9fc:	4413      	add	r3, r2
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2101      	movs	r1, #1
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fe feec 	bl	80097e0 <MX25LM51245G_ResetEnable>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d003      	beq.n	800aa16 <OSPI_NOR_ResetMemory+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa0e:	f06f 0304 	mvn.w	r3, #4
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	e04c      	b.n	800aab0 <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	4613      	mov	r3, r2
 800aa1a:	005b      	lsls	r3, r3, #1
 800aa1c:	4413      	add	r3, r2
 800aa1e:	015b      	lsls	r3, r3, #5
 800aa20:	4a26      	ldr	r2, [pc, #152]	; (800aabc <OSPI_NOR_ResetMemory+0x124>)
 800aa22:	4413      	add	r3, r2
 800aa24:	2200      	movs	r2, #0
 800aa26:	2101      	movs	r1, #1
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7fe ff31 	bl	8009890 <MX25LM51245G_ResetMemory>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d003      	beq.n	800aa3c <OSPI_NOR_ResetMemory+0xa4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa34:	f06f 0304 	mvn.w	r3, #4
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	e039      	b.n	800aab0 <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	4613      	mov	r3, r2
 800aa40:	005b      	lsls	r3, r3, #1
 800aa42:	4413      	add	r3, r2
 800aa44:	015b      	lsls	r3, r3, #5
 800aa46:	4a1d      	ldr	r2, [pc, #116]	; (800aabc <OSPI_NOR_ResetMemory+0x124>)
 800aa48:	4413      	add	r3, r2
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fe fec6 	bl	80097e0 <MX25LM51245G_ResetEnable>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <OSPI_NOR_ResetMemory+0xca>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa5a:	f06f 0304 	mvn.w	r3, #4
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	e026      	b.n	800aab0 <OSPI_NOR_ResetMemory+0x118>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	4613      	mov	r3, r2
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	4413      	add	r3, r2
 800aa6a:	015b      	lsls	r3, r3, #5
 800aa6c:	4a13      	ldr	r2, [pc, #76]	; (800aabc <OSPI_NOR_ResetMemory+0x124>)
 800aa6e:	4413      	add	r3, r2
 800aa70:	2201      	movs	r2, #1
 800aa72:	2101      	movs	r1, #1
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fe ff0b 	bl	8009890 <MX25LM51245G_ResetMemory>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d003      	beq.n	800aa88 <OSPI_NOR_ResetMemory+0xf0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa80:	f06f 0304 	mvn.w	r3, #4
 800aa84:	60fb      	str	r3, [r7, #12]
 800aa86:	e013      	b.n	800aab0 <OSPI_NOR_ResetMemory+0x118>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 800aa88:	4a0d      	ldr	r2, [pc, #52]	; (800aac0 <OSPI_NOR_ResetMemory+0x128>)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2101      	movs	r1, #1
 800aa8e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800aa92:	4a0b      	ldr	r2, [pc, #44]	; (800aac0 <OSPI_NOR_ResetMemory+0x128>)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	4413      	add	r3, r2
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 800aa9e:	4a08      	ldr	r2, [pc, #32]	; (800aac0 <OSPI_NOR_ResetMemory+0x128>)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	4413      	add	r3, r2
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 800aaaa:	2064      	movs	r0, #100	; 0x64
 800aaac:	f000 fd1a 	bl	800b4e4 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 800aab0:	68fb      	ldr	r3, [r7, #12]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	2400ce94 	.word	0x2400ce94
 800aac0:	2400ce8c 	.word	0x2400ce8c

0800aac4 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800aacc:	2300      	movs	r3, #0
 800aace:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	4613      	mov	r3, r2
 800aad4:	005b      	lsls	r3, r3, #1
 800aad6:	4413      	add	r3, r2
 800aad8:	015b      	lsls	r3, r3, #5
 800aada:	4a65      	ldr	r2, [pc, #404]	; (800ac70 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800aadc:	1898      	adds	r0, r3, r2
 800aade:	4a65      	ldr	r2, [pc, #404]	; (800ac74 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	00db      	lsls	r3, r3, #3
 800aae4:	4413      	add	r3, r2
 800aae6:	7859      	ldrb	r1, [r3, #1]
 800aae8:	4a62      	ldr	r2, [pc, #392]	; (800ac74 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	00db      	lsls	r3, r3, #3
 800aaee:	4413      	add	r3, r2
 800aaf0:	789b      	ldrb	r3, [r3, #2]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	f7fe fc7a 	bl	80093ec <MX25LM51245G_WriteEnable>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d003      	beq.n	800ab06 <OSPI_NOR_EnterDOPIMode+0x42>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800aafe:	f06f 0304 	mvn.w	r3, #4
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	e0ae      	b.n	800ac64 <OSPI_NOR_EnterDOPIMode+0x1a0>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	005b      	lsls	r3, r3, #1
 800ab0c:	4413      	add	r3, r2
 800ab0e:	015b      	lsls	r3, r3, #5
 800ab10:	4a57      	ldr	r2, [pc, #348]	; (800ac70 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800ab12:	1898      	adds	r0, r3, r2
 800ab14:	4a57      	ldr	r2, [pc, #348]	; (800ac74 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	00db      	lsls	r3, r3, #3
 800ab1a:	4413      	add	r3, r2
 800ab1c:	7859      	ldrb	r1, [r3, #1]
 800ab1e:	4a55      	ldr	r2, [pc, #340]	; (800ac74 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	00db      	lsls	r3, r3, #3
 800ab24:	4413      	add	r3, r2
 800ab26:	789a      	ldrb	r2, [r3, #2]
 800ab28:	2307      	movs	r3, #7
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab30:	f7fe fd27 	bl	8009582 <MX25LM51245G_WriteCfg2Register>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <OSPI_NOR_EnterDOPIMode+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab3a:	f06f 0304 	mvn.w	r3, #4
 800ab3e:	60fb      	str	r3, [r7, #12]
 800ab40:	e090      	b.n	800ac64 <OSPI_NOR_EnterDOPIMode+0x1a0>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	4613      	mov	r3, r2
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	4413      	add	r3, r2
 800ab4a:	015b      	lsls	r3, r3, #5
 800ab4c:	4a48      	ldr	r2, [pc, #288]	; (800ac70 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800ab4e:	1898      	adds	r0, r3, r2
 800ab50:	4a48      	ldr	r2, [pc, #288]	; (800ac74 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	00db      	lsls	r3, r3, #3
 800ab56:	4413      	add	r3, r2
 800ab58:	7859      	ldrb	r1, [r3, #1]
 800ab5a:	4a46      	ldr	r2, [pc, #280]	; (800ac74 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	00db      	lsls	r3, r3, #3
 800ab60:	4413      	add	r3, r2
 800ab62:	789b      	ldrb	r3, [r3, #2]
 800ab64:	461a      	mov	r2, r3
 800ab66:	f7fe fc41 	bl	80093ec <MX25LM51245G_WriteEnable>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d003      	beq.n	800ab78 <OSPI_NOR_EnterDOPIMode+0xb4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab70:	f06f 0304 	mvn.w	r3, #4
 800ab74:	60fb      	str	r3, [r7, #12]
 800ab76:	e075      	b.n	800ac64 <OSPI_NOR_EnterDOPIMode+0x1a0>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	005b      	lsls	r3, r3, #1
 800ab7e:	4413      	add	r3, r2
 800ab80:	015b      	lsls	r3, r3, #5
 800ab82:	4a3b      	ldr	r2, [pc, #236]	; (800ac70 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800ab84:	1898      	adds	r0, r3, r2
 800ab86:	4a3b      	ldr	r2, [pc, #236]	; (800ac74 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	00db      	lsls	r3, r3, #3
 800ab8c:	4413      	add	r3, r2
 800ab8e:	7859      	ldrb	r1, [r3, #1]
 800ab90:	4a38      	ldr	r2, [pc, #224]	; (800ac74 <OSPI_NOR_EnterDOPIMode+0x1b0>)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	00db      	lsls	r3, r3, #3
 800ab96:	4413      	add	r3, r2
 800ab98:	789a      	ldrb	r2, [r3, #2]
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f7fe fcef 	bl	8009582 <MX25LM51245G_WriteCfg2Register>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <OSPI_NOR_EnterDOPIMode+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800abaa:	f06f 0304 	mvn.w	r3, #4
 800abae:	60fb      	str	r3, [r7, #12]
 800abb0:	e058      	b.n	800ac64 <OSPI_NOR_EnterDOPIMode+0x1a0>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800abb2:	2028      	movs	r0, #40	; 0x28
 800abb4:	f000 fc96 	bl	800b4e4 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800abb8:	492d      	ldr	r1, [pc, #180]	; (800ac70 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	4613      	mov	r3, r2
 800abbe:	005b      	lsls	r3, r3, #1
 800abc0:	4413      	add	r3, r2
 800abc2:	015b      	lsls	r3, r3, #5
 800abc4:	440b      	add	r3, r1
 800abc6:	330c      	adds	r3, #12
 800abc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abcc:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800abce:	4928      	ldr	r1, [pc, #160]	; (800ac70 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	4613      	mov	r3, r2
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	4413      	add	r3, r2
 800abd8:	015b      	lsls	r3, r3, #5
 800abda:	440b      	add	r3, r1
 800abdc:	332c      	adds	r3, #44	; 0x2c
 800abde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe2:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	4613      	mov	r3, r2
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	4413      	add	r3, r2
 800abec:	015b      	lsls	r3, r3, #5
 800abee:	4a20      	ldr	r2, [pc, #128]	; (800ac70 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800abf0:	4413      	add	r3, r2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f004 f9fe 	bl	800eff4 <HAL_OSPI_Init>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d003      	beq.n	800ac06 <OSPI_NOR_EnterDOPIMode+0x142>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800abfe:	f06f 0303 	mvn.w	r3, #3
 800ac02:	60fb      	str	r3, [r7, #12]
 800ac04:	e02e      	b.n	800ac64 <OSPI_NOR_EnterDOPIMode+0x1a0>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	005b      	lsls	r3, r3, #1
 800ac0c:	4413      	add	r3, r2
 800ac0e:	015b      	lsls	r3, r3, #5
 800ac10:	4a17      	ldr	r2, [pc, #92]	; (800ac70 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800ac12:	4413      	add	r3, r2
 800ac14:	2201      	movs	r2, #1
 800ac16:	2101      	movs	r1, #1
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fe fa21 	bl	8009060 <MX25LM51245G_AutoPollingMemReady>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d003      	beq.n	800ac2c <OSPI_NOR_EnterDOPIMode+0x168>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac24:	f06f 0304 	mvn.w	r3, #4
 800ac28:	60fb      	str	r3, [r7, #12]
 800ac2a:	e01b      	b.n	800ac64 <OSPI_NOR_EnterDOPIMode+0x1a0>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	005b      	lsls	r3, r3, #1
 800ac32:	4413      	add	r3, r2
 800ac34:	015b      	lsls	r3, r3, #5
 800ac36:	4a0e      	ldr	r2, [pc, #56]	; (800ac70 <OSPI_NOR_EnterDOPIMode+0x1ac>)
 800ac38:	1898      	adds	r0, r3, r2
 800ac3a:	f107 0308 	add.w	r3, r7, #8
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	2300      	movs	r3, #0
 800ac42:	2201      	movs	r2, #1
 800ac44:	2101      	movs	r1, #1
 800ac46:	f7fe fd31 	bl	80096ac <MX25LM51245G_ReadCfg2Register>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d003      	beq.n	800ac58 <OSPI_NOR_EnterDOPIMode+0x194>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac50:	f06f 0304 	mvn.w	r3, #4
 800ac54:	60fb      	str	r3, [r7, #12]
 800ac56:	e005      	b.n	800ac64 <OSPI_NOR_EnterDOPIMode+0x1a0>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 800ac58:	7a3b      	ldrb	r3, [r7, #8]
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d002      	beq.n	800ac64 <OSPI_NOR_EnterDOPIMode+0x1a0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac5e:	f06f 0304 	mvn.w	r3, #4
 800ac62:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800ac64:	68fb      	ldr	r3, [r7, #12]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	2400ce94 	.word	0x2400ce94
 800ac74:	2400ce8c 	.word	0x2400ce8c

0800ac78 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af02      	add	r7, sp, #8
 800ac7e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ac80:	2300      	movs	r3, #0
 800ac82:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	4613      	mov	r3, r2
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	4413      	add	r3, r2
 800ac8c:	015b      	lsls	r3, r3, #5
 800ac8e:	4a51      	ldr	r2, [pc, #324]	; (800add4 <OSPI_NOR_EnterSOPIMode+0x15c>)
 800ac90:	1898      	adds	r0, r3, r2
 800ac92:	4a51      	ldr	r2, [pc, #324]	; (800add8 <OSPI_NOR_EnterSOPIMode+0x160>)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	4413      	add	r3, r2
 800ac9a:	7859      	ldrb	r1, [r3, #1]
 800ac9c:	4a4e      	ldr	r2, [pc, #312]	; (800add8 <OSPI_NOR_EnterSOPIMode+0x160>)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	00db      	lsls	r3, r3, #3
 800aca2:	4413      	add	r3, r2
 800aca4:	789b      	ldrb	r3, [r3, #2]
 800aca6:	461a      	mov	r2, r3
 800aca8:	f7fe fba0 	bl	80093ec <MX25LM51245G_WriteEnable>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d003      	beq.n	800acba <OSPI_NOR_EnterSOPIMode+0x42>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800acb2:	f06f 0304 	mvn.w	r3, #4
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	e087      	b.n	800adca <OSPI_NOR_EnterSOPIMode+0x152>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	4613      	mov	r3, r2
 800acbe:	005b      	lsls	r3, r3, #1
 800acc0:	4413      	add	r3, r2
 800acc2:	015b      	lsls	r3, r3, #5
 800acc4:	4a43      	ldr	r2, [pc, #268]	; (800add4 <OSPI_NOR_EnterSOPIMode+0x15c>)
 800acc6:	1898      	adds	r0, r3, r2
 800acc8:	4a43      	ldr	r2, [pc, #268]	; (800add8 <OSPI_NOR_EnterSOPIMode+0x160>)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	00db      	lsls	r3, r3, #3
 800acce:	4413      	add	r3, r2
 800acd0:	7859      	ldrb	r1, [r3, #1]
 800acd2:	4a41      	ldr	r2, [pc, #260]	; (800add8 <OSPI_NOR_EnterSOPIMode+0x160>)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	4413      	add	r3, r2
 800acda:	789a      	ldrb	r2, [r3, #2]
 800acdc:	2307      	movs	r3, #7
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ace4:	f7fe fc4d 	bl	8009582 <MX25LM51245G_WriteCfg2Register>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <OSPI_NOR_EnterSOPIMode+0x7e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800acee:	f06f 0304 	mvn.w	r3, #4
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	e069      	b.n	800adca <OSPI_NOR_EnterSOPIMode+0x152>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	4613      	mov	r3, r2
 800acfa:	005b      	lsls	r3, r3, #1
 800acfc:	4413      	add	r3, r2
 800acfe:	015b      	lsls	r3, r3, #5
 800ad00:	4a34      	ldr	r2, [pc, #208]	; (800add4 <OSPI_NOR_EnterSOPIMode+0x15c>)
 800ad02:	1898      	adds	r0, r3, r2
 800ad04:	4a34      	ldr	r2, [pc, #208]	; (800add8 <OSPI_NOR_EnterSOPIMode+0x160>)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	00db      	lsls	r3, r3, #3
 800ad0a:	4413      	add	r3, r2
 800ad0c:	7859      	ldrb	r1, [r3, #1]
 800ad0e:	4a32      	ldr	r2, [pc, #200]	; (800add8 <OSPI_NOR_EnterSOPIMode+0x160>)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	4413      	add	r3, r2
 800ad16:	789b      	ldrb	r3, [r3, #2]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	f7fe fb67 	bl	80093ec <MX25LM51245G_WriteEnable>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d003      	beq.n	800ad2c <OSPI_NOR_EnterSOPIMode+0xb4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad24:	f06f 0304 	mvn.w	r3, #4
 800ad28:	60fb      	str	r3, [r7, #12]
 800ad2a:	e04e      	b.n	800adca <OSPI_NOR_EnterSOPIMode+0x152>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	4413      	add	r3, r2
 800ad34:	015b      	lsls	r3, r3, #5
 800ad36:	4a27      	ldr	r2, [pc, #156]	; (800add4 <OSPI_NOR_EnterSOPIMode+0x15c>)
 800ad38:	1898      	adds	r0, r3, r2
 800ad3a:	4a27      	ldr	r2, [pc, #156]	; (800add8 <OSPI_NOR_EnterSOPIMode+0x160>)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	4413      	add	r3, r2
 800ad42:	7859      	ldrb	r1, [r3, #1]
 800ad44:	4a24      	ldr	r2, [pc, #144]	; (800add8 <OSPI_NOR_EnterSOPIMode+0x160>)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	00db      	lsls	r3, r3, #3
 800ad4a:	4413      	add	r3, r2
 800ad4c:	789a      	ldrb	r2, [r3, #2]
 800ad4e:	2301      	movs	r3, #1
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	2300      	movs	r3, #0
 800ad54:	f7fe fc15 	bl	8009582 <MX25LM51245G_WriteCfg2Register>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d003      	beq.n	800ad66 <OSPI_NOR_EnterSOPIMode+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad5e:	f06f 0304 	mvn.w	r3, #4
 800ad62:	60fb      	str	r3, [r7, #12]
 800ad64:	e031      	b.n	800adca <OSPI_NOR_EnterSOPIMode+0x152>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800ad66:	2028      	movs	r0, #40	; 0x28
 800ad68:	f000 fbbc 	bl	800b4e4 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	005b      	lsls	r3, r3, #1
 800ad72:	4413      	add	r3, r2
 800ad74:	015b      	lsls	r3, r3, #5
 800ad76:	4a17      	ldr	r2, [pc, #92]	; (800add4 <OSPI_NOR_EnterSOPIMode+0x15c>)
 800ad78:	4413      	add	r3, r2
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fe f96e 	bl	8009060 <MX25LM51245G_AutoPollingMemReady>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <OSPI_NOR_EnterSOPIMode+0x11a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad8a:	f06f 0304 	mvn.w	r3, #4
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	e01b      	b.n	800adca <OSPI_NOR_EnterSOPIMode+0x152>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	4613      	mov	r3, r2
 800ad96:	005b      	lsls	r3, r3, #1
 800ad98:	4413      	add	r3, r2
 800ad9a:	015b      	lsls	r3, r3, #5
 800ad9c:	4a0d      	ldr	r2, [pc, #52]	; (800add4 <OSPI_NOR_EnterSOPIMode+0x15c>)
 800ad9e:	1898      	adds	r0, r3, r2
 800ada0:	f107 0308 	add.w	r3, r7, #8
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	2300      	movs	r3, #0
 800ada8:	2200      	movs	r2, #0
 800adaa:	2101      	movs	r1, #1
 800adac:	f7fe fc7e 	bl	80096ac <MX25LM51245G_ReadCfg2Register>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d003      	beq.n	800adbe <OSPI_NOR_EnterSOPIMode+0x146>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800adb6:	f06f 0304 	mvn.w	r3, #4
 800adba:	60fb      	str	r3, [r7, #12]
 800adbc:	e005      	b.n	800adca <OSPI_NOR_EnterSOPIMode+0x152>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 800adbe:	7a3b      	ldrb	r3, [r7, #8]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d002      	beq.n	800adca <OSPI_NOR_EnterSOPIMode+0x152>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800adc4:	f06f 0304 	mvn.w	r3, #4
 800adc8:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800adca:	68fb      	ldr	r3, [r7, #12]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	2400ce94 	.word	0x2400ce94
 800add8:	2400ce8c 	.word	0x2400ce8c

0800addc <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b086      	sub	sp, #24
 800ade0:	af02      	add	r7, sp, #8
 800ade2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ade4:	2300      	movs	r3, #0
 800ade6:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	4613      	mov	r3, r2
 800adec:	005b      	lsls	r3, r3, #1
 800adee:	4413      	add	r3, r2
 800adf0:	015b      	lsls	r3, r3, #5
 800adf2:	4a4c      	ldr	r2, [pc, #304]	; (800af24 <OSPI_NOR_ExitOPIMode+0x148>)
 800adf4:	1898      	adds	r0, r3, r2
 800adf6:	4a4c      	ldr	r2, [pc, #304]	; (800af28 <OSPI_NOR_ExitOPIMode+0x14c>)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	00db      	lsls	r3, r3, #3
 800adfc:	4413      	add	r3, r2
 800adfe:	7859      	ldrb	r1, [r3, #1]
 800ae00:	4a49      	ldr	r2, [pc, #292]	; (800af28 <OSPI_NOR_ExitOPIMode+0x14c>)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	00db      	lsls	r3, r3, #3
 800ae06:	4413      	add	r3, r2
 800ae08:	789b      	ldrb	r3, [r3, #2]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	f7fe faee 	bl	80093ec <MX25LM51245G_WriteEnable>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d003      	beq.n	800ae1e <OSPI_NOR_ExitOPIMode+0x42>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae16:	f06f 0304 	mvn.w	r3, #4
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	e07d      	b.n	800af1a <OSPI_NOR_ExitOPIMode+0x13e>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	005b      	lsls	r3, r3, #1
 800ae2c:	4413      	add	r3, r2
 800ae2e:	015b      	lsls	r3, r3, #5
 800ae30:	4a3c      	ldr	r2, [pc, #240]	; (800af24 <OSPI_NOR_ExitOPIMode+0x148>)
 800ae32:	1898      	adds	r0, r3, r2
 800ae34:	4a3c      	ldr	r2, [pc, #240]	; (800af28 <OSPI_NOR_ExitOPIMode+0x14c>)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	00db      	lsls	r3, r3, #3
 800ae3a:	4413      	add	r3, r2
 800ae3c:	7859      	ldrb	r1, [r3, #1]
 800ae3e:	4a3a      	ldr	r2, [pc, #232]	; (800af28 <OSPI_NOR_ExitOPIMode+0x14c>)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	00db      	lsls	r3, r3, #3
 800ae44:	4413      	add	r3, r2
 800ae46:	789a      	ldrb	r2, [r3, #2]
 800ae48:	7a3b      	ldrb	r3, [r7, #8]
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f7fe fb98 	bl	8009582 <MX25LM51245G_WriteCfg2Register>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d003      	beq.n	800ae60 <OSPI_NOR_ExitOPIMode+0x84>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae58:	f06f 0304 	mvn.w	r3, #4
 800ae5c:	60fb      	str	r3, [r7, #12]
 800ae5e:	e05c      	b.n	800af1a <OSPI_NOR_ExitOPIMode+0x13e>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800ae60:	2028      	movs	r0, #40	; 0x28
 800ae62:	f000 fb3f 	bl	800b4e4 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800ae66:	4a30      	ldr	r2, [pc, #192]	; (800af28 <OSPI_NOR_ExitOPIMode+0x14c>)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	00db      	lsls	r3, r3, #3
 800ae6c:	4413      	add	r3, r2
 800ae6e:	789b      	ldrb	r3, [r3, #2]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d123      	bne.n	800aebc <OSPI_NOR_ExitOPIMode+0xe0>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 800ae74:	492b      	ldr	r1, [pc, #172]	; (800af24 <OSPI_NOR_ExitOPIMode+0x148>)
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	4613      	mov	r3, r2
 800ae7a:	005b      	lsls	r3, r3, #1
 800ae7c:	4413      	add	r3, r2
 800ae7e:	015b      	lsls	r3, r3, #5
 800ae80:	440b      	add	r3, r1
 800ae82:	330c      	adds	r3, #12
 800ae84:	2200      	movs	r2, #0
 800ae86:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800ae88:	4926      	ldr	r1, [pc, #152]	; (800af24 <OSPI_NOR_ExitOPIMode+0x148>)
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	005b      	lsls	r3, r3, #1
 800ae90:	4413      	add	r3, r2
 800ae92:	015b      	lsls	r3, r3, #5
 800ae94:	440b      	add	r3, r1
 800ae96:	332c      	adds	r3, #44	; 0x2c
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	005b      	lsls	r3, r3, #1
 800aea2:	4413      	add	r3, r2
 800aea4:	015b      	lsls	r3, r3, #5
 800aea6:	4a1f      	ldr	r2, [pc, #124]	; (800af24 <OSPI_NOR_ExitOPIMode+0x148>)
 800aea8:	4413      	add	r3, r2
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f004 f8a2 	bl	800eff4 <HAL_OSPI_Init>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d002      	beq.n	800aebc <OSPI_NOR_ExitOPIMode+0xe0>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800aeb6:	f06f 0303 	mvn.w	r3, #3
 800aeba:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	4613      	mov	r3, r2
 800aec0:	005b      	lsls	r3, r3, #1
 800aec2:	4413      	add	r3, r2
 800aec4:	015b      	lsls	r3, r3, #5
 800aec6:	4a17      	ldr	r2, [pc, #92]	; (800af24 <OSPI_NOR_ExitOPIMode+0x148>)
 800aec8:	4413      	add	r3, r2
 800aeca:	2200      	movs	r2, #0
 800aecc:	2100      	movs	r1, #0
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fe f8c6 	bl	8009060 <MX25LM51245G_AutoPollingMemReady>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d003      	beq.n	800aee2 <OSPI_NOR_ExitOPIMode+0x106>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aeda:	f06f 0304 	mvn.w	r3, #4
 800aede:	60fb      	str	r3, [r7, #12]
 800aee0:	e01b      	b.n	800af1a <OSPI_NOR_ExitOPIMode+0x13e>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	4613      	mov	r3, r2
 800aee6:	005b      	lsls	r3, r3, #1
 800aee8:	4413      	add	r3, r2
 800aeea:	015b      	lsls	r3, r3, #5
 800aeec:	4a0d      	ldr	r2, [pc, #52]	; (800af24 <OSPI_NOR_ExitOPIMode+0x148>)
 800aeee:	1898      	adds	r0, r3, r2
 800aef0:	f107 0308 	add.w	r3, r7, #8
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	2300      	movs	r3, #0
 800aef8:	2200      	movs	r2, #0
 800aefa:	2100      	movs	r1, #0
 800aefc:	f7fe fbd6 	bl	80096ac <MX25LM51245G_ReadCfg2Register>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d003      	beq.n	800af0e <OSPI_NOR_ExitOPIMode+0x132>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af06:	f06f 0304 	mvn.w	r3, #4
 800af0a:	60fb      	str	r3, [r7, #12]
 800af0c:	e005      	b.n	800af1a <OSPI_NOR_ExitOPIMode+0x13e>
      }
      else
      {
        if (reg[0] != 0U)
 800af0e:	7a3b      	ldrb	r3, [r7, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d002      	beq.n	800af1a <OSPI_NOR_ExitOPIMode+0x13e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800af14:	f06f 0304 	mvn.w	r3, #4
 800af18:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800af1a:	68fb      	ldr	r3, [r7, #12]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	2400ce94 	.word	0x2400ce94
 800af28:	2400ce8c 	.word	0x2400ce8c

0800af2c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b088      	sub	sp, #32
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800af36:	2300      	movs	r3, #0
 800af38:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d11c      	bne.n	800af7a <BSP_TS_Init+0x4e>
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d018      	beq.n	800af7a <BSP_TS_Init+0x4e>
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800af50:	d813      	bhi.n	800af7a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00f      	beq.n	800af7a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800af62:	d80a      	bhi.n	800af7a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	68da      	ldr	r2, [r3, #12]
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	6819      	ldr	r1, [r3, #0]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	428b      	cmp	r3, r1
 800af72:	bf28      	it	cs
 800af74:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800af76:	429a      	cmp	r2, r3
 800af78:	d903      	bls.n	800af82 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800af7a:	f06f 0301 	mvn.w	r3, #1
 800af7e:	61fb      	str	r3, [r7, #28]
 800af80:	e06e      	b.n	800b060 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 f98c 	bl	800b2a0 <FT5336_Probe>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d003      	beq.n	800af96 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800af8e:	f04f 33ff 	mov.w	r3, #4294967295
 800af92:	61fb      	str	r3, [r7, #28]
 800af94:	e064      	b.n	800b060 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	4934      	ldr	r1, [pc, #208]	; (800b06c <BSP_TS_Init+0x140>)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	015b      	lsls	r3, r3, #5
 800afa0:	440b      	add	r3, r1
 800afa2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	4930      	ldr	r1, [pc, #192]	; (800b06c <BSP_TS_Init+0x140>)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	015b      	lsls	r3, r3, #5
 800afae:	440b      	add	r3, r1
 800afb0:	3304      	adds	r3, #4
 800afb2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	689a      	ldr	r2, [r3, #8]
 800afb8:	492c      	ldr	r1, [pc, #176]	; (800b06c <BSP_TS_Init+0x140>)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	015b      	lsls	r3, r3, #5
 800afbe:	440b      	add	r3, r1
 800afc0:	3308      	adds	r3, #8
 800afc2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	68da      	ldr	r2, [r3, #12]
 800afc8:	4928      	ldr	r1, [pc, #160]	; (800b06c <BSP_TS_Init+0x140>)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	015b      	lsls	r3, r3, #5
 800afce:	440b      	add	r3, r1
 800afd0:	330c      	adds	r3, #12
 800afd2:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800afd4:	4b26      	ldr	r3, [pc, #152]	; (800b070 <BSP_TS_Init+0x144>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	69db      	ldr	r3, [r3, #28]
 800afda:	4926      	ldr	r1, [pc, #152]	; (800b074 <BSP_TS_Init+0x148>)
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800afe2:	f107 010c 	add.w	r1, r7, #12
 800afe6:	4610      	mov	r0, r2
 800afe8:	4798      	blx	r3
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	da03      	bge.n	800aff8 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aff0:	f06f 0304 	mvn.w	r3, #4
 800aff4:	61fb      	str	r3, [r7, #28]
 800aff6:	e033      	b.n	800b060 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	491c      	ldr	r1, [pc, #112]	; (800b06c <BSP_TS_Init+0x140>)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	015b      	lsls	r3, r3, #5
 800b000:	440b      	add	r3, r1
 800b002:	3310      	adds	r3, #16
 800b004:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	4918      	ldr	r1, [pc, #96]	; (800b06c <BSP_TS_Init+0x140>)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	015b      	lsls	r3, r3, #5
 800b00e:	440b      	add	r3, r1
 800b010:	3314      	adds	r3, #20
 800b012:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800b014:	2300      	movs	r3, #0
 800b016:	61bb      	str	r3, [r7, #24]
 800b018:	e01f      	b.n	800b05a <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	4413      	add	r3, r2
 800b024:	1c5a      	adds	r2, r3, #1
 800b026:	4811      	ldr	r0, [pc, #68]	; (800b06c <BSP_TS_Init+0x140>)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	00d9      	lsls	r1, r3, #3
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	440b      	add	r3, r1
 800b030:	3306      	adds	r3, #6
 800b032:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	4413      	add	r3, r2
 800b040:	1c5a      	adds	r2, r3, #1
 800b042:	480a      	ldr	r0, [pc, #40]	; (800b06c <BSP_TS_Init+0x140>)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	00d9      	lsls	r1, r3, #3
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	440b      	add	r3, r1
 800b04c:	3306      	adds	r3, #6
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4403      	add	r3, r0
 800b052:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	3301      	adds	r3, #1
 800b058:	61bb      	str	r3, [r7, #24]
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d0dc      	beq.n	800b01a <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 800b060:	69fb      	ldr	r3, [r7, #28]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3720      	adds	r7, #32
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	24003b58 	.word	0x24003b58
 800b070:	24003b50 	.word	0x24003b50
 800b074:	24003b54 	.word	0x24003b54

0800b078 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b08a      	sub	sp, #40	; 0x28
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b082:	2300      	movs	r3, #0
 800b084:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d003      	beq.n	800b094 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b08c:	f06f 0301 	mvn.w	r3, #1
 800b090:	627b      	str	r3, [r7, #36]	; 0x24
 800b092:	e0f9      	b.n	800b288 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800b094:	4b7f      	ldr	r3, [pc, #508]	; (800b294 <BSP_TS_GetState+0x21c>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	497f      	ldr	r1, [pc, #508]	; (800b298 <BSP_TS_GetState+0x220>)
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b0a2:	f107 0108 	add.w	r1, r7, #8
 800b0a6:	4610      	mov	r0, r2
 800b0a8:	4798      	blx	r3
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	da03      	bge.n	800b0b8 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0b0:	f06f 0304 	mvn.w	r3, #4
 800b0b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0b6:	e0e7      	b.n	800b288 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f000 80d1 	beq.w	800b262 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800b0c8:	4a74      	ldr	r2, [pc, #464]	; (800b29c <BSP_TS_GetState+0x224>)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	015b      	lsls	r3, r3, #5
 800b0ce:	4413      	add	r3, r2
 800b0d0:	3308      	adds	r3, #8
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 0308 	and.w	r3, r3, #8
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800b0e4:	4a6d      	ldr	r2, [pc, #436]	; (800b29c <BSP_TS_GetState+0x224>)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	015b      	lsls	r3, r3, #5
 800b0ea:	4413      	add	r3, r2
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 0302 	and.w	r3, r3, #2
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d009      	beq.n	800b10c <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800b0f8:	4a68      	ldr	r2, [pc, #416]	; (800b29c <BSP_TS_GetState+0x224>)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	015b      	lsls	r3, r3, #5
 800b0fe:	4413      	add	r3, r2
 800b100:	3310      	adds	r3, #16
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	3b01      	subs	r3, #1
 800b10a:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800b10c:	4a63      	ldr	r2, [pc, #396]	; (800b29c <BSP_TS_GetState+0x224>)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	015b      	lsls	r3, r3, #5
 800b112:	4413      	add	r3, r2
 800b114:	3308      	adds	r3, #8
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 0304 	and.w	r3, r3, #4
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d008      	beq.n	800b132 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800b120:	4a5e      	ldr	r2, [pc, #376]	; (800b29c <BSP_TS_GetState+0x224>)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	015b      	lsls	r3, r3, #5
 800b126:	4413      	add	r3, r2
 800b128:	3314      	adds	r3, #20
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800b132:	4a5a      	ldr	r2, [pc, #360]	; (800b29c <BSP_TS_GetState+0x224>)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	015b      	lsls	r3, r3, #5
 800b138:	4413      	add	r3, r2
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6a3a      	ldr	r2, [r7, #32]
 800b13e:	fb02 f203 	mul.w	r2, r2, r3
 800b142:	4956      	ldr	r1, [pc, #344]	; (800b29c <BSP_TS_GetState+0x224>)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	015b      	lsls	r3, r3, #5
 800b148:	440b      	add	r3, r1
 800b14a:	3310      	adds	r3, #16
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800b156:	4a51      	ldr	r2, [pc, #324]	; (800b29c <BSP_TS_GetState+0x224>)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	015b      	lsls	r3, r3, #5
 800b15c:	4413      	add	r3, r2
 800b15e:	3304      	adds	r3, #4
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	69fa      	ldr	r2, [r7, #28]
 800b164:	fb02 f203 	mul.w	r2, r2, r3
 800b168:	494c      	ldr	r1, [pc, #304]	; (800b29c <BSP_TS_GetState+0x224>)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	015b      	lsls	r3, r3, #5
 800b16e:	440b      	add	r3, r1
 800b170:	3314      	adds	r3, #20
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	fbb2 f2f3 	udiv	r2, r2, r3
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	4945      	ldr	r1, [pc, #276]	; (800b29c <BSP_TS_GetState+0x224>)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	015b      	lsls	r3, r3, #5
 800b18c:	440b      	add	r3, r1
 800b18e:	3318      	adds	r3, #24
 800b190:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800b192:	429a      	cmp	r2, r3
 800b194:	d909      	bls.n	800b1aa <BSP_TS_GetState+0x132>
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	685a      	ldr	r2, [r3, #4]
 800b19a:	4940      	ldr	r1, [pc, #256]	; (800b29c <BSP_TS_GetState+0x224>)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	015b      	lsls	r3, r3, #5
 800b1a0:	440b      	add	r3, r1
 800b1a2:	3318      	adds	r3, #24
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	e008      	b.n	800b1bc <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800b1aa:	4a3c      	ldr	r2, [pc, #240]	; (800b29c <BSP_TS_GetState+0x224>)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	015b      	lsls	r3, r3, #5
 800b1b0:	4413      	add	r3, r2
 800b1b2:	3318      	adds	r3, #24
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800b1ba:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800b1bc:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	689a      	ldr	r2, [r3, #8]
 800b1c2:	4936      	ldr	r1, [pc, #216]	; (800b29c <BSP_TS_GetState+0x224>)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	015b      	lsls	r3, r3, #5
 800b1c8:	440b      	add	r3, r1
 800b1ca:	331c      	adds	r3, #28
 800b1cc:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d909      	bls.n	800b1e6 <BSP_TS_GetState+0x16e>
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	689a      	ldr	r2, [r3, #8]
 800b1d6:	4931      	ldr	r1, [pc, #196]	; (800b29c <BSP_TS_GetState+0x224>)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	015b      	lsls	r3, r3, #5
 800b1dc:	440b      	add	r3, r1
 800b1de:	331c      	adds	r3, #28
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	e008      	b.n	800b1f8 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800b1e6:	4a2d      	ldr	r2, [pc, #180]	; (800b29c <BSP_TS_GetState+0x224>)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	015b      	lsls	r3, r3, #5
 800b1ec:	4413      	add	r3, r2
 800b1ee:	331c      	adds	r3, #28
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800b1f6:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800b1f8:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800b1fa:	4a28      	ldr	r2, [pc, #160]	; (800b29c <BSP_TS_GetState+0x224>)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	015b      	lsls	r3, r3, #5
 800b200:	4413      	add	r3, r2
 800b202:	330c      	adds	r3, #12
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d808      	bhi.n	800b21e <BSP_TS_GetState+0x1a6>
 800b20c:	4a23      	ldr	r2, [pc, #140]	; (800b29c <BSP_TS_GetState+0x224>)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	015b      	lsls	r3, r3, #5
 800b212:	4413      	add	r3, r2
 800b214:	330c      	adds	r3, #12
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d910      	bls.n	800b240 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	685a      	ldr	r2, [r3, #4]
 800b222:	491e      	ldr	r1, [pc, #120]	; (800b29c <BSP_TS_GetState+0x224>)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	015b      	lsls	r3, r3, #5
 800b228:	440b      	add	r3, r1
 800b22a:	3318      	adds	r3, #24
 800b22c:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	689a      	ldr	r2, [r3, #8]
 800b232:	491a      	ldr	r1, [pc, #104]	; (800b29c <BSP_TS_GetState+0x224>)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	015b      	lsls	r3, r3, #5
 800b238:	440b      	add	r3, r1
 800b23a:	331c      	adds	r3, #28
 800b23c:	601a      	str	r2, [r3, #0]
 800b23e:	e023      	b.n	800b288 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800b240:	4a16      	ldr	r2, [pc, #88]	; (800b29c <BSP_TS_GetState+0x224>)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	015b      	lsls	r3, r3, #5
 800b246:	4413      	add	r3, r2
 800b248:	3318      	adds	r3, #24
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800b250:	4a12      	ldr	r2, [pc, #72]	; (800b29c <BSP_TS_GetState+0x224>)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	015b      	lsls	r3, r3, #5
 800b256:	4413      	add	r3, r2
 800b258:	331c      	adds	r3, #28
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	609a      	str	r2, [r3, #8]
 800b260:	e012      	b.n	800b288 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2200      	movs	r2, #0
 800b266:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800b268:	4a0c      	ldr	r2, [pc, #48]	; (800b29c <BSP_TS_GetState+0x224>)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	015b      	lsls	r3, r3, #5
 800b26e:	4413      	add	r3, r2
 800b270:	3318      	adds	r3, #24
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800b278:	4a08      	ldr	r2, [pc, #32]	; (800b29c <BSP_TS_GetState+0x224>)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	015b      	lsls	r3, r3, #5
 800b27e:	4413      	add	r3, r2
 800b280:	331c      	adds	r3, #28
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 800b288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3728      	adds	r7, #40	; 0x28
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	24003b50 	.word	0x24003b50
 800b298:	24003b54 	.word	0x24003b54
 800b29c:	24003b58 	.word	0x24003b58

0800b2a0 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b08a      	sub	sp, #40	; 0x28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800b2b0:	2370      	movs	r3, #112	; 0x70
 800b2b2:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800b2b4:	4b23      	ldr	r3, [pc, #140]	; (800b344 <FT5336_Probe+0xa4>)
 800b2b6:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800b2b8:	4b23      	ldr	r3, [pc, #140]	; (800b348 <FT5336_Probe+0xa8>)
 800b2ba:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800b2bc:	4b23      	ldr	r3, [pc, #140]	; (800b34c <FT5336_Probe+0xac>)
 800b2be:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800b2c0:	4b23      	ldr	r3, [pc, #140]	; (800b350 <FT5336_Probe+0xb0>)
 800b2c2:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800b2c4:	4b23      	ldr	r3, [pc, #140]	; (800b354 <FT5336_Probe+0xb4>)
 800b2c6:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800b2c8:	f107 030c 	add.w	r3, r7, #12
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	4822      	ldr	r0, [pc, #136]	; (800b358 <FT5336_Probe+0xb8>)
 800b2d0:	f7fd fb30 	bl	8008934 <FT5336_RegisterBusIO>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d003      	beq.n	800b2e2 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800b2da:	f06f 0307 	mvn.w	r3, #7
 800b2de:	627b      	str	r3, [r7, #36]	; 0x24
 800b2e0:	e02a      	b.n	800b338 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800b2e2:	f107 0308 	add.w	r3, r7, #8
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	481b      	ldr	r0, [pc, #108]	; (800b358 <FT5336_Probe+0xb8>)
 800b2ea:	f7fd fc1d 	bl	8008b28 <FT5336_ReadID>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d003      	beq.n	800b2fc <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800b2f4:	f06f 0304 	mvn.w	r3, #4
 800b2f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b2fa:	e01d      	b.n	800b338 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2b51      	cmp	r3, #81	; 0x51
 800b300:	d003      	beq.n	800b30a <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b302:	f06f 0306 	mvn.w	r3, #6
 800b306:	627b      	str	r3, [r7, #36]	; 0x24
 800b308:	e016      	b.n	800b338 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800b30a:	4a14      	ldr	r2, [pc, #80]	; (800b35c <FT5336_Probe+0xbc>)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4912      	ldr	r1, [pc, #72]	; (800b358 <FT5336_Probe+0xb8>)
 800b310:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800b314:	4b12      	ldr	r3, [pc, #72]	; (800b360 <FT5336_Probe+0xc0>)
 800b316:	4a13      	ldr	r2, [pc, #76]	; (800b364 <FT5336_Probe+0xc4>)
 800b318:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800b31a:	4b11      	ldr	r3, [pc, #68]	; (800b360 <FT5336_Probe+0xc0>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	490e      	ldr	r1, [pc, #56]	; (800b35c <FT5336_Probe+0xbc>)
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b328:	4610      	mov	r0, r2
 800b32a:	4798      	blx	r3
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d002      	beq.n	800b338 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b332:	f06f 0304 	mvn.w	r3, #4
 800b336:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3728      	adds	r7, #40	; 0x28
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	08009941 	.word	0x08009941
 800b348:	080099b5 	.word	0x080099b5
 800b34c:	08009add 	.word	0x08009add
 800b350:	08009a81 	.word	0x08009a81
 800b354:	08009b39 	.word	0x08009b39
 800b358:	24003b78 	.word	0x24003b78
 800b35c:	24003b54 	.word	0x24003b54
 800b360:	24003b50 	.word	0x24003b50
 800b364:	2400000c 	.word	0x2400000c

0800b368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800b368:	b480      	push	{r7}
 800b36a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b36c:	4b29      	ldr	r3, [pc, #164]	; (800b414 <SystemInit+0xac>)
 800b36e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b372:	4a28      	ldr	r2, [pc, #160]	; (800b414 <SystemInit+0xac>)
 800b374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800b37c:	4b26      	ldr	r3, [pc, #152]	; (800b418 <SystemInit+0xb0>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a25      	ldr	r2, [pc, #148]	; (800b418 <SystemInit+0xb0>)
 800b382:	f043 0301 	orr.w	r3, r3, #1
 800b386:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b388:	4b23      	ldr	r3, [pc, #140]	; (800b418 <SystemInit+0xb0>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800b38e:	4b22      	ldr	r3, [pc, #136]	; (800b418 <SystemInit+0xb0>)
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	4921      	ldr	r1, [pc, #132]	; (800b418 <SystemInit+0xb0>)
 800b394:	4b21      	ldr	r3, [pc, #132]	; (800b41c <SystemInit+0xb4>)
 800b396:	4013      	ands	r3, r2
 800b398:	600b      	str	r3, [r1, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800b39a:	4b1f      	ldr	r3, [pc, #124]	; (800b418 <SystemInit+0xb0>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800b3a0:	4b1d      	ldr	r3, [pc, #116]	; (800b418 <SystemInit+0xb0>)
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800b3a6:	4b1c      	ldr	r3, [pc, #112]	; (800b418 <SystemInit+0xb0>)
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800b3ac:	4b1a      	ldr	r3, [pc, #104]	; (800b418 <SystemInit+0xb0>)
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800b3b2:	4b19      	ldr	r3, [pc, #100]	; (800b418 <SystemInit+0xb0>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800b3b8:	4b17      	ldr	r3, [pc, #92]	; (800b418 <SystemInit+0xb0>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800b3be:	4b16      	ldr	r3, [pc, #88]	; (800b418 <SystemInit+0xb0>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800b3c4:	4b14      	ldr	r3, [pc, #80]	; (800b418 <SystemInit+0xb0>)
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800b3ca:	4b13      	ldr	r3, [pc, #76]	; (800b418 <SystemInit+0xb0>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800b3d0:	4b11      	ldr	r3, [pc, #68]	; (800b418 <SystemInit+0xb0>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800b3d6:	4b10      	ldr	r3, [pc, #64]	; (800b418 <SystemInit+0xb0>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b3dc:	4b0e      	ldr	r3, [pc, #56]	; (800b418 <SystemInit+0xb0>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a0d      	ldr	r2, [pc, #52]	; (800b418 <SystemInit+0xb0>)
 800b3e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b3e8:	4b0b      	ldr	r3, [pc, #44]	; (800b418 <SystemInit+0xb0>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <SystemInit+0xb8>)
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	4b0c      	ldr	r3, [pc, #48]	; (800b424 <SystemInit+0xbc>)
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3fa:	d202      	bcs.n	800b402 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	; (800b428 <SystemInit+0xc0>)
 800b3fe:	2201      	movs	r2, #1
 800b400:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b402:	4b04      	ldr	r3, [pc, #16]	; (800b414 <SystemInit+0xac>)
 800b404:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b408:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800b40a:	bf00      	nop
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	e000ed00 	.word	0xe000ed00
 800b418:	58024400 	.word	0x58024400
 800b41c:	eaf6ed7f 	.word	0xeaf6ed7f
 800b420:	5c001000 	.word	0x5c001000
 800b424:	ffff0000 	.word	0xffff0000
 800b428:	51008108 	.word	0x51008108

0800b42c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b432:	2003      	movs	r0, #3
 800b434:	f001 fd27 	bl	800ce86 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b438:	f005 fb38 	bl	8010aac <HAL_RCC_GetSysClockFreq>
 800b43c:	4602      	mov	r2, r0
 800b43e:	4b15      	ldr	r3, [pc, #84]	; (800b494 <HAL_Init+0x68>)
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	0a1b      	lsrs	r3, r3, #8
 800b444:	f003 030f 	and.w	r3, r3, #15
 800b448:	4913      	ldr	r1, [pc, #76]	; (800b498 <HAL_Init+0x6c>)
 800b44a:	5ccb      	ldrb	r3, [r1, r3]
 800b44c:	f003 031f 	and.w	r3, r3, #31
 800b450:	fa22 f303 	lsr.w	r3, r2, r3
 800b454:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b456:	4b0f      	ldr	r3, [pc, #60]	; (800b494 <HAL_Init+0x68>)
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	f003 030f 	and.w	r3, r3, #15
 800b45e:	4a0e      	ldr	r2, [pc, #56]	; (800b498 <HAL_Init+0x6c>)
 800b460:	5cd3      	ldrb	r3, [r2, r3]
 800b462:	f003 031f 	and.w	r3, r3, #31
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	fa22 f303 	lsr.w	r3, r2, r3
 800b46c:	4a0b      	ldr	r2, [pc, #44]	; (800b49c <HAL_Init+0x70>)
 800b46e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b470:	4a0b      	ldr	r2, [pc, #44]	; (800b4a0 <HAL_Init+0x74>)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b476:	2000      	movs	r0, #0
 800b478:	f7f8 fbca 	bl	8003c10 <HAL_InitTick>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e002      	b.n	800b48c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800b486:	f7f8 f8fb 	bl	8003680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	58024400 	.word	0x58024400
 800b498:	0802e3b4 	.word	0x0802e3b4
 800b49c:	24000040 	.word	0x24000040
 800b4a0:	2400003c 	.word	0x2400003c

0800b4a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b4a8:	4b06      	ldr	r3, [pc, #24]	; (800b4c4 <HAL_IncTick+0x20>)
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	4b06      	ldr	r3, [pc, #24]	; (800b4c8 <HAL_IncTick+0x24>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	4a04      	ldr	r2, [pc, #16]	; (800b4c8 <HAL_IncTick+0x24>)
 800b4b6:	6013      	str	r3, [r2, #0]
}
 800b4b8:	bf00      	nop
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	24000048 	.word	0x24000048
 800b4c8:	2400cef4 	.word	0x2400cef4

0800b4cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	af00      	add	r7, sp, #0
  return uwTick;
 800b4d0:	4b03      	ldr	r3, [pc, #12]	; (800b4e0 <HAL_GetTick+0x14>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	2400cef4 	.word	0x2400cef4

0800b4e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b4ec:	f7ff ffee 	bl	800b4cc <HAL_GetTick>
 800b4f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4fc:	d005      	beq.n	800b50a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b4fe:	4b0a      	ldr	r3, [pc, #40]	; (800b528 <HAL_Delay+0x44>)
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	461a      	mov	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	4413      	add	r3, r2
 800b508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b50a:	bf00      	nop
 800b50c:	f7ff ffde 	bl	800b4cc <HAL_GetTick>
 800b510:	4602      	mov	r2, r0
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	1ad3      	subs	r3, r2, r3
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d8f7      	bhi.n	800b50c <HAL_Delay+0x28>
  {
  }
}
 800b51c:	bf00      	nop
 800b51e:	bf00      	nop
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	24000048 	.word	0x24000048

0800b52c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	431a      	orrs	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	609a      	str	r2, [r3, #8]
}
 800b546:	bf00      	nop
 800b548:	370c      	adds	r7, #12
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr

0800b552 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b552:	b480      	push	{r7}
 800b554:	b083      	sub	sp, #12
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	431a      	orrs	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	609a      	str	r2, [r3, #8]
}
 800b56c:	bf00      	nop
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800b588:	4618      	mov	r0, r3
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b594:	b480      	push	{r7}
 800b596:	b087      	sub	sp, #28
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]
 800b5a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	3360      	adds	r3, #96	; 0x60
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4413      	add	r3, r2
 800b5ae:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	430b      	orrs	r3, r1
 800b5c2:	431a      	orrs	r2, r3
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800b5c8:	bf00      	nop
 800b5ca:	371c      	adds	r7, #28
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	f003 031f 	and.w	r3, r3, #31
 800b5ee:	6879      	ldr	r1, [r7, #4]
 800b5f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b5f4:	431a      	orrs	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	611a      	str	r2, [r3, #16]
}
 800b5fa:	bf00      	nop
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800b606:	b480      	push	{r7}
 800b608:	b087      	sub	sp, #28
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	60f8      	str	r0, [r7, #12]
 800b60e:	60b9      	str	r1, [r7, #8]
 800b610:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	3360      	adds	r3, #96	; 0x60
 800b616:	461a      	mov	r2, r3
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4413      	add	r3, r2
 800b61e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	431a      	orrs	r2, r3
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	601a      	str	r2, [r3, #0]
  }
}
 800b630:	bf00      	nop
 800b632:	371c      	adds	r7, #28
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d101      	bne.n	800b654 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b650:	2301      	movs	r3, #1
 800b652:	e000      	b.n	800b656 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b662:	b480      	push	{r7}
 800b664:	b087      	sub	sp, #28
 800b666:	af00      	add	r7, sp, #0
 800b668:	60f8      	str	r0, [r7, #12]
 800b66a:	60b9      	str	r1, [r7, #8]
 800b66c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3330      	adds	r3, #48	; 0x30
 800b672:	461a      	mov	r2, r3
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	0a1b      	lsrs	r3, r3, #8
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	f003 030c 	and.w	r3, r3, #12
 800b67e:	4413      	add	r3, r2
 800b680:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	f003 031f 	and.w	r3, r3, #31
 800b68c:	211f      	movs	r1, #31
 800b68e:	fa01 f303 	lsl.w	r3, r1, r3
 800b692:	43db      	mvns	r3, r3
 800b694:	401a      	ands	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	0e9b      	lsrs	r3, r3, #26
 800b69a:	f003 011f 	and.w	r1, r3, #31
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	f003 031f 	and.w	r3, r3, #31
 800b6a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b6a8:	431a      	orrs	r2, r3
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b6ae:	bf00      	nop
 800b6b0:	371c      	adds	r7, #28
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6c6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e000      	b.n	800b6d4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b087      	sub	sp, #28
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	3314      	adds	r3, #20
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	0e5b      	lsrs	r3, r3, #25
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	f003 0304 	and.w	r3, r3, #4
 800b6fc:	4413      	add	r3, r2
 800b6fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	0d1b      	lsrs	r3, r3, #20
 800b708:	f003 031f 	and.w	r3, r3, #31
 800b70c:	2107      	movs	r1, #7
 800b70e:	fa01 f303 	lsl.w	r3, r1, r3
 800b712:	43db      	mvns	r3, r3
 800b714:	401a      	ands	r2, r3
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	0d1b      	lsrs	r3, r3, #20
 800b71a:	f003 031f 	and.w	r3, r3, #31
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	fa01 f303 	lsl.w	r3, r1, r3
 800b724:	431a      	orrs	r2, r3
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b72a:	bf00      	nop
 800b72c:	371c      	adds	r7, #28
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
	...

0800b738 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b750:	43db      	mvns	r3, r3
 800b752:	401a      	ands	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f003 0318 	and.w	r3, r3, #24
 800b75a:	4908      	ldr	r1, [pc, #32]	; (800b77c <LL_ADC_SetChannelSingleDiff+0x44>)
 800b75c:	40d9      	lsrs	r1, r3
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	400b      	ands	r3, r1
 800b762:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b766:	431a      	orrs	r2, r3
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800b76e:	bf00      	nop
 800b770:	3714      	adds	r7, #20
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	000fffff 	.word	0x000fffff

0800b780 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	f003 031f 	and.w	r3, r3, #31
}
 800b790:	4618      	mov	r0, r3
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	689a      	ldr	r2, [r3, #8]
 800b7c4:	4b04      	ldr	r3, [pc, #16]	; (800b7d8 <LL_ADC_DisableDeepPowerDown+0x20>)
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	6093      	str	r3, [r2, #8]
}
 800b7cc:	bf00      	nop
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	5fffffc0 	.word	0x5fffffc0

0800b7dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7f0:	d101      	bne.n	800b7f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e000      	b.n	800b7f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	689a      	ldr	r2, [r3, #8]
 800b810:	4b05      	ldr	r3, [pc, #20]	; (800b828 <LL_ADC_EnableInternalRegulator+0x24>)
 800b812:	4013      	ands	r3, r2
 800b814:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b81c:	bf00      	nop
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr
 800b828:	6fffffc0 	.word	0x6fffffc0

0800b82c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b83c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b840:	d101      	bne.n	800b846 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b842:	2301      	movs	r3, #1
 800b844:	e000      	b.n	800b848 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	689a      	ldr	r2, [r3, #8]
 800b860:	4b05      	ldr	r3, [pc, #20]	; (800b878 <LL_ADC_Enable+0x24>)
 800b862:	4013      	ands	r3, r2
 800b864:	f043 0201 	orr.w	r2, r3, #1
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b86c:	bf00      	nop
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	7fffffc0 	.word	0x7fffffc0

0800b87c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d101      	bne.n	800b894 <LL_ADC_IsEnabled+0x18>
 800b890:	2301      	movs	r3, #1
 800b892:	e000      	b.n	800b896 <LL_ADC_IsEnabled+0x1a>
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
	...

0800b8a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	689a      	ldr	r2, [r3, #8]
 800b8b0:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <LL_ADC_REG_StartConversion+0x24>)
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	f043 0204 	orr.w	r2, r3, #4
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	7fffffc0 	.word	0x7fffffc0

0800b8cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	f003 0304 	and.w	r3, r3, #4
 800b8dc:	2b04      	cmp	r3, #4
 800b8de:	d101      	bne.n	800b8e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e000      	b.n	800b8e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b8e4:	2300      	movs	r3, #0
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	370c      	adds	r7, #12
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr

0800b8f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b8f2:	b480      	push	{r7}
 800b8f4:	b083      	sub	sp, #12
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	f003 0308 	and.w	r3, r3, #8
 800b902:	2b08      	cmp	r3, #8
 800b904:	d101      	bne.n	800b90a <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b906:	2301      	movs	r3, #1
 800b908:	e000      	b.n	800b90c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b918:	b590      	push	{r4, r7, lr}
 800b91a:	b089      	sub	sp, #36	; 0x24
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b920:	2300      	movs	r3, #0
 800b922:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800b924:	2300      	movs	r3, #0
 800b926:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d101      	bne.n	800b932 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e138      	b.n	800bba4 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d109      	bne.n	800b954 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7f7 febb 	bl	80036bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff ff3f 	bl	800b7dc <LL_ADC_IsDeepPowerDownEnabled>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d004      	beq.n	800b96e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4618      	mov	r0, r3
 800b96a:	f7ff ff25 	bl	800b7b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4618      	mov	r0, r3
 800b974:	f7ff ff5a 	bl	800b82c <LL_ADC_IsInternalRegulatorEnabled>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d114      	bne.n	800b9a8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4618      	mov	r0, r3
 800b984:	f7ff ff3e 	bl	800b804 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b988:	4b88      	ldr	r3, [pc, #544]	; (800bbac <HAL_ADC_Init+0x294>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	099b      	lsrs	r3, r3, #6
 800b98e:	4a88      	ldr	r2, [pc, #544]	; (800bbb0 <HAL_ADC_Init+0x298>)
 800b990:	fba2 2303 	umull	r2, r3, r2, r3
 800b994:	099b      	lsrs	r3, r3, #6
 800b996:	3301      	adds	r3, #1
 800b998:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b99a:	e002      	b.n	800b9a2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1f9      	bne.n	800b99c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff ff3d 	bl	800b82c <LL_ADC_IsInternalRegulatorEnabled>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10d      	bne.n	800b9d4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9bc:	f043 0210 	orr.w	r2, r3, #16
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c8:	f043 0201 	orr.w	r2, r3, #1
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7ff ff77 	bl	800b8cc <LL_ADC_REG_IsConversionOngoing>
 800b9de:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e4:	f003 0310 	and.w	r3, r3, #16
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f040 80d2 	bne.w	800bb92 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f040 80ce 	bne.w	800bb92 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9fa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b9fe:	f043 0202 	orr.w	r2, r3, #2
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7ff ff36 	bl	800b87c <LL_ADC_IsEnabled>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d110      	bne.n	800ba38 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ba16:	4867      	ldr	r0, [pc, #412]	; (800bbb4 <HAL_ADC_Init+0x29c>)
 800ba18:	f7ff ff30 	bl	800b87c <LL_ADC_IsEnabled>
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	4866      	ldr	r0, [pc, #408]	; (800bbb8 <HAL_ADC_Init+0x2a0>)
 800ba20:	f7ff ff2c 	bl	800b87c <LL_ADC_IsEnabled>
 800ba24:	4603      	mov	r3, r0
 800ba26:	4323      	orrs	r3, r4
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d105      	bne.n	800ba38 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	4619      	mov	r1, r3
 800ba32:	4862      	ldr	r0, [pc, #392]	; (800bbbc <HAL_ADC_Init+0x2a4>)
 800ba34:	f7ff fd7a 	bl	800b52c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	7d5b      	ldrb	r3, [r3, #21]
 800ba3c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ba42:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800ba48:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	7f1b      	ldrb	r3, [r3, #28]
 800ba4e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ba50:	4313      	orrs	r3, r2
 800ba52:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	7f1b      	ldrb	r3, [r3, #28]
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d106      	bne.n	800ba6a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a1b      	ldr	r3, [r3, #32]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	045b      	lsls	r3, r3, #17
 800ba64:	69ba      	ldr	r2, [r7, #24]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d009      	beq.n	800ba86 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba76:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba7e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ba80:	69ba      	ldr	r2, [r7, #24]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68da      	ldr	r2, [r3, #12]
 800ba8c:	4b4c      	ldr	r3, [pc, #304]	; (800bbc0 <HAL_ADC_Init+0x2a8>)
 800ba8e:	4013      	ands	r3, r2
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	6812      	ldr	r2, [r2, #0]
 800ba94:	69b9      	ldr	r1, [r7, #24]
 800ba96:	430b      	orrs	r3, r1
 800ba98:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7ff ff14 	bl	800b8cc <LL_ADC_REG_IsConversionOngoing>
 800baa4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff ff21 	bl	800b8f2 <LL_ADC_INJ_IsConversionOngoing>
 800bab0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d14a      	bne.n	800bb4e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d147      	bne.n	800bb4e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	7d1b      	ldrb	r3, [r3, #20]
 800bac2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800bac8:	4313      	orrs	r3, r2
 800baca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68da      	ldr	r2, [r3, #12]
 800bad2:	4b3c      	ldr	r3, [pc, #240]	; (800bbc4 <HAL_ADC_Init+0x2ac>)
 800bad4:	4013      	ands	r3, r2
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	6812      	ldr	r2, [r2, #0]
 800bada:	69b9      	ldr	r1, [r7, #24]
 800badc:	430b      	orrs	r3, r1
 800bade:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d11b      	bne.n	800bb22 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	691a      	ldr	r2, [r3, #16]
 800baf6:	4b34      	ldr	r3, [pc, #208]	; (800bbc8 <HAL_ADC_Init+0x2b0>)
 800baf8:	4013      	ands	r3, r2
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bafe:	3a01      	subs	r2, #1
 800bb00:	0411      	lsls	r1, r2, #16
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bb06:	4311      	orrs	r1, r2
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bb0c:	4311      	orrs	r1, r2
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bb12:	430a      	orrs	r2, r1
 800bb14:	431a      	orrs	r2, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f042 0201 	orr.w	r2, r2, #1
 800bb1e:	611a      	str	r2, [r3, #16]
 800bb20:	e007      	b.n	800bb32 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	691a      	ldr	r2, [r3, #16]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f022 0201 	bic.w	r2, r2, #1
 800bb30:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	430a      	orrs	r2, r1
 800bb46:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 ff0b 	bl	800c964 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d10c      	bne.n	800bb70 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5c:	f023 010f 	bic.w	r1, r3, #15
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	699b      	ldr	r3, [r3, #24]
 800bb64:	1e5a      	subs	r2, r3, #1
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	631a      	str	r2, [r3, #48]	; 0x30
 800bb6e:	e007      	b.n	800bb80 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f022 020f 	bic.w	r2, r2, #15
 800bb7e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb84:	f023 0303 	bic.w	r3, r3, #3
 800bb88:	f043 0201 	orr.w	r2, r3, #1
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	655a      	str	r2, [r3, #84]	; 0x54
 800bb90:	e007      	b.n	800bba2 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb96:	f043 0210 	orr.w	r2, r3, #16
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800bba2:	7ffb      	ldrb	r3, [r7, #31]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3724      	adds	r7, #36	; 0x24
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd90      	pop	{r4, r7, pc}
 800bbac:	2400003c 	.word	0x2400003c
 800bbb0:	053e2d63 	.word	0x053e2d63
 800bbb4:	40022000 	.word	0x40022000
 800bbb8:	40022100 	.word	0x40022100
 800bbbc:	40022300 	.word	0x40022300
 800bbc0:	fff0c003 	.word	0xfff0c003
 800bbc4:	ffffbffc 	.word	0xffffbffc
 800bbc8:	fc00f81e 	.word	0xfc00f81e

0800bbcc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bbd4:	4892      	ldr	r0, [pc, #584]	; (800be20 <HAL_ADC_Start_IT+0x254>)
 800bbd6:	f7ff fdd3 	bl	800b780 <LL_ADC_GetMultimode>
 800bbda:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7ff fe73 	bl	800b8cc <LL_ADC_REG_IsConversionOngoing>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f040 810f 	bne.w	800be0c <HAL_ADC_Start_IT+0x240>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d101      	bne.n	800bbfc <HAL_ADC_Start_IT+0x30>
 800bbf8:	2302      	movs	r3, #2
 800bbfa:	e10c      	b.n	800be16 <HAL_ADC_Start_IT+0x24a>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fe31 	bl	800c86c <ADC_Enable>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800bc0e:	7dfb      	ldrb	r3, [r7, #23]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f040 80f6 	bne.w	800be02 <HAL_ADC_Start_IT+0x236>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc1a:	4b82      	ldr	r3, [pc, #520]	; (800be24 <HAL_ADC_Start_IT+0x258>)
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a7f      	ldr	r2, [pc, #508]	; (800be28 <HAL_ADC_Start_IT+0x25c>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d002      	beq.n	800bc36 <HAL_ADC_Start_IT+0x6a>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	e000      	b.n	800bc38 <HAL_ADC_Start_IT+0x6c>
 800bc36:	4b7d      	ldr	r3, [pc, #500]	; (800be2c <HAL_ADC_Start_IT+0x260>)
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	6812      	ldr	r2, [r2, #0]
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d002      	beq.n	800bc46 <HAL_ADC_Start_IT+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d105      	bne.n	800bc52 <HAL_ADC_Start_IT+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d006      	beq.n	800bc6c <HAL_ADC_Start_IT+0xa0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc62:	f023 0206 	bic.w	r2, r3, #6
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	659a      	str	r2, [r3, #88]	; 0x58
 800bc6a:	e002      	b.n	800bc72 <HAL_ADC_Start_IT+0xa6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	221c      	movs	r2, #28
 800bc78:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	685a      	ldr	r2, [r3, #4]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f022 021c 	bic.w	r2, r2, #28
 800bc90:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	691b      	ldr	r3, [r3, #16]
 800bc96:	2b08      	cmp	r3, #8
 800bc98:	d108      	bne.n	800bcac <HAL_ADC_Start_IT+0xe0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f042 0208 	orr.w	r2, r2, #8
 800bca8:	605a      	str	r2, [r3, #4]
          break;
 800bcaa:	e008      	b.n	800bcbe <HAL_ADC_Start_IT+0xf2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	685a      	ldr	r2, [r3, #4]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f042 0204 	orr.w	r2, r2, #4
 800bcba:	605a      	str	r2, [r3, #4]
          break;
 800bcbc:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d107      	bne.n	800bcd6 <HAL_ADC_Start_IT+0x10a>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f042 0210 	orr.w	r2, r2, #16
 800bcd4:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a53      	ldr	r2, [pc, #332]	; (800be28 <HAL_ADC_Start_IT+0x25c>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d002      	beq.n	800bce6 <HAL_ADC_Start_IT+0x11a>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	e000      	b.n	800bce8 <HAL_ADC_Start_IT+0x11c>
 800bce6:	4b51      	ldr	r3, [pc, #324]	; (800be2c <HAL_ADC_Start_IT+0x260>)
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	6812      	ldr	r2, [r2, #0]
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d008      	beq.n	800bd02 <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d005      	beq.n	800bd02 <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	2b05      	cmp	r3, #5
 800bcfa:	d002      	beq.n	800bd02 <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	2b09      	cmp	r3, #9
 800bd00:	d13b      	bne.n	800bd7a <HAL_ADC_Start_IT+0x1ae>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d02d      	beq.n	800bd6c <HAL_ADC_Start_IT+0x1a0>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bd18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	2b08      	cmp	r3, #8
 800bd26:	d110      	bne.n	800bd4a <HAL_ADC_Start_IT+0x17e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	685a      	ldr	r2, [r3, #4]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f022 0220 	bic.w	r2, r2, #32
 800bd36:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	685a      	ldr	r2, [r3, #4]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd46:	605a      	str	r2, [r3, #4]
              break;
 800bd48:	e011      	b.n	800bd6e <HAL_ADC_Start_IT+0x1a2>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	685a      	ldr	r2, [r3, #4]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd58:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	685a      	ldr	r2, [r3, #4]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f042 0220 	orr.w	r2, r2, #32
 800bd68:	605a      	str	r2, [r3, #4]
              break;
 800bd6a:	e000      	b.n	800bd6e <HAL_ADC_Start_IT+0x1a2>
          }
        }
 800bd6c:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7ff fd96 	bl	800b8a4 <LL_ADC_REG_StartConversion>
 800bd78:	e04c      	b.n	800be14 <HAL_ADC_Start_IT+0x248>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a27      	ldr	r2, [pc, #156]	; (800be28 <HAL_ADC_Start_IT+0x25c>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d002      	beq.n	800bd96 <HAL_ADC_Start_IT+0x1ca>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	e000      	b.n	800bd98 <HAL_ADC_Start_IT+0x1cc>
 800bd96:	4b25      	ldr	r3, [pc, #148]	; (800be2c <HAL_ADC_Start_IT+0x260>)
 800bd98:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d035      	beq.n	800be12 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bdae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	2b08      	cmp	r3, #8
 800bdbc:	d110      	bne.n	800bde0 <HAL_ADC_Start_IT+0x214>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	685a      	ldr	r2, [r3, #4]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f022 0220 	bic.w	r2, r2, #32
 800bdcc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bddc:	605a      	str	r2, [r3, #4]
              break;
 800bdde:	e019      	b.n	800be14 <HAL_ADC_Start_IT+0x248>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdee:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	685a      	ldr	r2, [r3, #4]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f042 0220 	orr.w	r2, r2, #32
 800bdfe:	605a      	str	r2, [r3, #4]
              break;
 800be00:	e008      	b.n	800be14 <HAL_ADC_Start_IT+0x248>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800be0a:	e003      	b.n	800be14 <HAL_ADC_Start_IT+0x248>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800be0c:	2302      	movs	r3, #2
 800be0e:	75fb      	strb	r3, [r7, #23]
 800be10:	e000      	b.n	800be14 <HAL_ADC_Start_IT+0x248>
        }
 800be12:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800be14:	7dfb      	ldrb	r3, [r7, #23]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3718      	adds	r7, #24
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	40022300 	.word	0x40022300
 800be24:	fffff0fe 	.word	0xfffff0fe
 800be28:	40022100 	.word	0x40022100
 800be2c:	40022000 	.word	0x40022000

0800be30 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b08a      	sub	sp, #40	; 0x28
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800be38:	2300      	movs	r3, #0
 800be3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800be4c:	4882      	ldr	r0, [pc, #520]	; (800c058 <HAL_ADC_IRQHandler+0x228>)
 800be4e:	f7ff fc97 	bl	800b780 <LL_ADC_GetMultimode>
 800be52:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	f003 0302 	and.w	r3, r3, #2
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d017      	beq.n	800be8e <HAL_ADC_IRQHandler+0x5e>
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	f003 0302 	and.w	r3, r3, #2
 800be64:	2b00      	cmp	r3, #0
 800be66:	d012      	beq.n	800be8e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be6c:	f003 0310 	and.w	r3, r3, #16
 800be70:	2b00      	cmp	r3, #0
 800be72:	d105      	bne.n	800be80 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be78:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 fe89 	bl	800cb98 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2202      	movs	r2, #2
 800be8c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	f003 0304 	and.w	r3, r3, #4
 800be94:	2b00      	cmp	r3, #0
 800be96:	d004      	beq.n	800bea2 <HAL_ADC_IRQHandler+0x72>
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	f003 0304 	and.w	r3, r3, #4
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10a      	bne.n	800beb8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 8083 	beq.w	800bfb4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	f003 0308 	and.w	r3, r3, #8
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d07d      	beq.n	800bfb4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bebc:	f003 0310 	and.w	r3, r3, #16
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d105      	bne.n	800bed0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7ff fbb1 	bl	800b63c <LL_ADC_REG_IsTriggerSourceSWStart>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d062      	beq.n	800bfa6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a5d      	ldr	r2, [pc, #372]	; (800c05c <HAL_ADC_IRQHandler+0x22c>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d002      	beq.n	800bef0 <HAL_ADC_IRQHandler+0xc0>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	e000      	b.n	800bef2 <HAL_ADC_IRQHandler+0xc2>
 800bef0:	4b5b      	ldr	r3, [pc, #364]	; (800c060 <HAL_ADC_IRQHandler+0x230>)
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	6812      	ldr	r2, [r2, #0]
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d008      	beq.n	800bf0c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d005      	beq.n	800bf0c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	2b05      	cmp	r3, #5
 800bf04:	d002      	beq.n	800bf0c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2b09      	cmp	r3, #9
 800bf0a:	d104      	bne.n	800bf16 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	623b      	str	r3, [r7, #32]
 800bf14:	e00c      	b.n	800bf30 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a50      	ldr	r2, [pc, #320]	; (800c05c <HAL_ADC_IRQHandler+0x22c>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d002      	beq.n	800bf26 <HAL_ADC_IRQHandler+0xf6>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	e000      	b.n	800bf28 <HAL_ADC_IRQHandler+0xf8>
 800bf26:	4b4e      	ldr	r3, [pc, #312]	; (800c060 <HAL_ADC_IRQHandler+0x230>)
 800bf28:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800bf30:	6a3b      	ldr	r3, [r7, #32]
 800bf32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d135      	bne.n	800bfa6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 0308 	and.w	r3, r3, #8
 800bf44:	2b08      	cmp	r3, #8
 800bf46:	d12e      	bne.n	800bfa6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7ff fcbd 	bl	800b8cc <LL_ADC_REG_IsConversionOngoing>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d11a      	bne.n	800bf8e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	685a      	ldr	r2, [r3, #4]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f022 020c 	bic.w	r2, r2, #12
 800bf66:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d112      	bne.n	800bfa6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf84:	f043 0201 	orr.w	r2, r3, #1
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	655a      	str	r2, [r3, #84]	; 0x54
 800bf8c:	e00b      	b.n	800bfa6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf92:	f043 0210 	orr.w	r2, r3, #16
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf9e:	f043 0201 	orr.w	r2, r3, #1
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 f95c 	bl	800c264 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	220c      	movs	r2, #12
 800bfb2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	f003 0320 	and.w	r3, r3, #32
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d004      	beq.n	800bfc8 <HAL_ADC_IRQHandler+0x198>
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	f003 0320 	and.w	r3, r3, #32
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d10b      	bne.n	800bfe0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	f000 809f 	beq.w	800c112 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f000 8099 	beq.w	800c112 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfe4:	f003 0310 	and.w	r3, r3, #16
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d105      	bne.n	800bff8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7ff fb5c 	bl	800b6ba <LL_ADC_INJ_IsTriggerSourceSWStart>
 800c002:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4618      	mov	r0, r3
 800c00a:	f7ff fb17 	bl	800b63c <LL_ADC_REG_IsTriggerSourceSWStart>
 800c00e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a11      	ldr	r2, [pc, #68]	; (800c05c <HAL_ADC_IRQHandler+0x22c>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d002      	beq.n	800c020 <HAL_ADC_IRQHandler+0x1f0>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	e000      	b.n	800c022 <HAL_ADC_IRQHandler+0x1f2>
 800c020:	4b0f      	ldr	r3, [pc, #60]	; (800c060 <HAL_ADC_IRQHandler+0x230>)
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	6812      	ldr	r2, [r2, #0]
 800c026:	4293      	cmp	r3, r2
 800c028:	d008      	beq.n	800c03c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d005      	beq.n	800c03c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	2b06      	cmp	r3, #6
 800c034:	d002      	beq.n	800c03c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	2b07      	cmp	r3, #7
 800c03a:	d104      	bne.n	800c046 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	623b      	str	r3, [r7, #32]
 800c044:	e013      	b.n	800c06e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a04      	ldr	r2, [pc, #16]	; (800c05c <HAL_ADC_IRQHandler+0x22c>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d009      	beq.n	800c064 <HAL_ADC_IRQHandler+0x234>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	e007      	b.n	800c066 <HAL_ADC_IRQHandler+0x236>
 800c056:	bf00      	nop
 800c058:	40022300 	.word	0x40022300
 800c05c:	40022100 	.word	0x40022100
 800c060:	40022000 	.word	0x40022000
 800c064:	4b7d      	ldr	r3, [pc, #500]	; (800c25c <HAL_ADC_IRQHandler+0x42c>)
 800c066:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10c      	bne.n	800c08e <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800c074:	6a3b      	ldr	r3, [r7, #32]
 800c076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d142      	bne.n	800c104 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d03f      	beq.n	800c104 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800c084:	6a3b      	ldr	r3, [r7, #32]
 800c086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d13a      	bne.n	800c104 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c098:	2b40      	cmp	r3, #64	; 0x40
 800c09a:	d133      	bne.n	800c104 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800c09c:	6a3b      	ldr	r3, [r7, #32]
 800c09e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d12e      	bne.n	800c104 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7ff fc21 	bl	800b8f2 <LL_ADC_INJ_IsConversionOngoing>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d11a      	bne.n	800c0ec <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	685a      	ldr	r2, [r3, #4]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c0c4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d112      	bne.n	800c104 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0e2:	f043 0201 	orr.w	r2, r3, #1
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	655a      	str	r2, [r3, #84]	; 0x54
 800c0ea:	e00b      	b.n	800c104 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0f0:	f043 0210 	orr.w	r2, r3, #16
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0fc:	f043 0201 	orr.w	r2, r3, #1
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fd1f 	bl	800cb48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2260      	movs	r2, #96	; 0x60
 800c110:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d011      	beq.n	800c140 <HAL_ADC_IRQHandler+0x310>
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00c      	beq.n	800c140 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c12a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f8a0 	bl	800c278 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2280      	movs	r2, #128	; 0x80
 800c13e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c146:	2b00      	cmp	r3, #0
 800c148:	d012      	beq.n	800c170 <HAL_ADC_IRQHandler+0x340>
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00d      	beq.n	800c170 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c158:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fd05 	bl	800cb70 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c16e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c176:	2b00      	cmp	r3, #0
 800c178:	d012      	beq.n	800c1a0 <HAL_ADC_IRQHandler+0x370>
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00d      	beq.n	800c1a0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c188:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 fcf7 	bl	800cb84 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c19e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	f003 0310 	and.w	r3, r3, #16
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d036      	beq.n	800c218 <HAL_ADC_IRQHandler+0x3e8>
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	f003 0310 	and.w	r3, r3, #16
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d031      	beq.n	800c218 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d102      	bne.n	800c1c2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	627b      	str	r3, [r7, #36]	; 0x24
 800c1c0:	e014      	b.n	800c1ec <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d008      	beq.n	800c1da <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800c1c8:	4825      	ldr	r0, [pc, #148]	; (800c260 <HAL_ADC_IRQHandler+0x430>)
 800c1ca:	f7ff fae7 	bl	800b79c <LL_ADC_GetMultiDMATransfer>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00b      	beq.n	800c1ec <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	627b      	str	r3, [r7, #36]	; 0x24
 800c1d8:	e008      	b.n	800c1ec <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	f003 0303 	and.w	r3, r3, #3
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d10e      	bne.n	800c210 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c202:	f043 0202 	orr.w	r2, r3, #2
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 f83e 	bl	800c28c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2210      	movs	r2, #16
 800c216:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d018      	beq.n	800c254 <HAL_ADC_IRQHandler+0x424>
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d013      	beq.n	800c254 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c230:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c23c:	f043 0208 	orr.w	r2, r3, #8
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c24c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fc84 	bl	800cb5c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800c254:	bf00      	nop
 800c256:	3728      	adds	r7, #40	; 0x28
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	40022000 	.word	0x40022000
 800c260:	40022300 	.word	0x40022300

0800c264 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800c26c:	bf00      	nop
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800c294:	bf00      	nop
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c2a0:	b590      	push	{r4, r7, lr}
 800c2a2:	b0a1      	sub	sp, #132	; 0x84
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	4a9a      	ldr	r2, [pc, #616]	; (800c524 <HAL_ADC_ConfigChannel+0x284>)
 800c2ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d101      	bne.n	800c2ca <HAL_ADC_ConfigChannel+0x2a>
 800c2c6:	2302      	movs	r3, #2
 800c2c8:	e2bc      	b.n	800c844 <HAL_ADC_ConfigChannel+0x5a4>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7ff faf8 	bl	800b8cc <LL_ADC_REG_IsConversionOngoing>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	f040 82a1 	bne.w	800c826 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d108      	bne.n	800c302 <HAL_ADC_ConfigChannel+0x62>
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	0e9b      	lsrs	r3, r3, #26
 800c2f6:	f003 031f 	and.w	r3, r3, #31
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c300:	e016      	b.n	800c330 <HAL_ADC_ConfigChannel+0x90>
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c30a:	fa93 f3a3 	rbit	r3, r3
 800c30e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800c310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c312:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800c314:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c316:	2b00      	cmp	r3, #0
 800c318:	d101      	bne.n	800c31e <HAL_ADC_ConfigChannel+0x7e>
    return 32U;
 800c31a:	2320      	movs	r3, #32
 800c31c:	e003      	b.n	800c326 <HAL_ADC_ConfigChannel+0x86>
  return __builtin_clz(value);
 800c31e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c320:	fab3 f383 	clz	r3, r3
 800c324:	b2db      	uxtb	r3, r3
 800c326:	f003 031f 	and.w	r3, r3, #31
 800c32a:	2201      	movs	r2, #1
 800c32c:	fa02 f303 	lsl.w	r3, r2, r3
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	6812      	ldr	r2, [r2, #0]
 800c334:	69d1      	ldr	r1, [r2, #28]
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	6812      	ldr	r2, [r2, #0]
 800c33a:	430b      	orrs	r3, r1
 800c33c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6818      	ldr	r0, [r3, #0]
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	6859      	ldr	r1, [r3, #4]
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	461a      	mov	r2, r3
 800c34c:	f7ff f989 	bl	800b662 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4618      	mov	r0, r3
 800c356:	f7ff fab9 	bl	800b8cc <LL_ADC_REG_IsConversionOngoing>
 800c35a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff fac6 	bl	800b8f2 <LL_ADC_INJ_IsConversionOngoing>
 800c366:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f040 80a0 	bne.w	800c4b0 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c372:	2b00      	cmp	r3, #0
 800c374:	f040 809c 	bne.w	800c4b0 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6818      	ldr	r0, [r3, #0]
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	6819      	ldr	r1, [r3, #0]
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	461a      	mov	r2, r3
 800c386:	f7ff f9ab 	bl	800b6e0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	f003 0310 	and.w	r3, r3, #16
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10b      	bne.n	800c3b0 <HAL_ADC_ConfigChannel+0x110>
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	695a      	ldr	r2, [r3, #20]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	089b      	lsrs	r3, r3, #2
 800c3a4:	f003 0307 	and.w	r3, r3, #7
 800c3a8:	005b      	lsls	r3, r3, #1
 800c3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ae:	e00a      	b.n	800c3c6 <HAL_ADC_ConfigChannel+0x126>
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	695a      	ldr	r2, [r3, #20]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	089b      	lsrs	r3, r3, #2
 800c3bc:	f003 0304 	and.w	r3, r3, #4
 800c3c0:	005b      	lsls	r3, r3, #1
 800c3c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c6:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	2b04      	cmp	r3, #4
 800c3ce:	d027      	beq.n	800c420 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6818      	ldr	r0, [r3, #0]
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	6919      	ldr	r1, [r3, #16]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3de:	f7ff f8d9 	bl	800b594 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6818      	ldr	r0, [r3, #0]
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	6919      	ldr	r1, [r3, #16]
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	7e5b      	ldrb	r3, [r3, #25]
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d102      	bne.n	800c3f8 <HAL_ADC_ConfigChannel+0x158>
 800c3f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c3f6:	e000      	b.n	800c3fa <HAL_ADC_ConfigChannel+0x15a>
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	f7ff f903 	bl	800b606 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6818      	ldr	r0, [r3, #0]
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	6919      	ldr	r1, [r3, #16]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	7e1b      	ldrb	r3, [r3, #24]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d102      	bne.n	800c416 <HAL_ADC_ConfigChannel+0x176>
 800c410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c414:	e000      	b.n	800c418 <HAL_ADC_ConfigChannel+0x178>
 800c416:	2300      	movs	r3, #0
 800c418:	461a      	mov	r2, r3
 800c41a:	f7ff f8db 	bl	800b5d4 <LL_ADC_SetDataRightShift>
 800c41e:	e047      	b.n	800c4b0 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c426:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	069b      	lsls	r3, r3, #26
 800c430:	429a      	cmp	r2, r3
 800c432:	d107      	bne.n	800c444 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c442:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c44a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	069b      	lsls	r3, r3, #26
 800c454:	429a      	cmp	r2, r3
 800c456:	d107      	bne.n	800c468 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c466:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c46e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	069b      	lsls	r3, r3, #26
 800c478:	429a      	cmp	r2, r3
 800c47a:	d107      	bne.n	800c48c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c48a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c492:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	069b      	lsls	r3, r3, #26
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d107      	bne.n	800c4b0 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c4ae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7ff f9e1 	bl	800b87c <LL_ADC_IsEnabled>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f040 81bb 	bne.w	800c838 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6818      	ldr	r0, [r3, #0]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	6819      	ldr	r1, [r3, #0]
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	f7ff f932 	bl	800b738 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	4a12      	ldr	r2, [pc, #72]	; (800c524 <HAL_ADC_ConfigChannel+0x284>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	f040 8130 	bne.w	800c740 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10b      	bne.n	800c508 <HAL_ADC_ConfigChannel+0x268>
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	0e9b      	lsrs	r3, r3, #26
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	f003 031f 	and.w	r3, r3, #31
 800c4fc:	2b09      	cmp	r3, #9
 800c4fe:	bf94      	ite	ls
 800c500:	2301      	movls	r3, #1
 800c502:	2300      	movhi	r3, #0
 800c504:	b2db      	uxtb	r3, r3
 800c506:	e01b      	b.n	800c540 <HAL_ADC_ConfigChannel+0x2a0>
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c50e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c510:	fa93 f3a3 	rbit	r3, r3
 800c514:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800c516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c518:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800c51a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d103      	bne.n	800c528 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 800c520:	2320      	movs	r3, #32
 800c522:	e005      	b.n	800c530 <HAL_ADC_ConfigChannel+0x290>
 800c524:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 800c528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c52a:	fab3 f383 	clz	r3, r3
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	3301      	adds	r3, #1
 800c532:	f003 031f 	and.w	r3, r3, #31
 800c536:	2b09      	cmp	r3, #9
 800c538:	bf94      	ite	ls
 800c53a:	2301      	movls	r3, #1
 800c53c:	2300      	movhi	r3, #0
 800c53e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c540:	2b00      	cmp	r3, #0
 800c542:	d079      	beq.n	800c638 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d107      	bne.n	800c560 <HAL_ADC_ConfigChannel+0x2c0>
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	0e9b      	lsrs	r3, r3, #26
 800c556:	3301      	adds	r3, #1
 800c558:	069b      	lsls	r3, r3, #26
 800c55a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c55e:	e015      	b.n	800c58c <HAL_ADC_ConfigChannel+0x2ec>
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c568:	fa93 f3a3 	rbit	r3, r3
 800c56c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800c56e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c570:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800c572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c574:	2b00      	cmp	r3, #0
 800c576:	d101      	bne.n	800c57c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800c578:	2320      	movs	r3, #32
 800c57a:	e003      	b.n	800c584 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800c57c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c57e:	fab3 f383 	clz	r3, r3
 800c582:	b2db      	uxtb	r3, r3
 800c584:	3301      	adds	r3, #1
 800c586:	069b      	lsls	r3, r3, #26
 800c588:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c594:	2b00      	cmp	r3, #0
 800c596:	d109      	bne.n	800c5ac <HAL_ADC_ConfigChannel+0x30c>
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	0e9b      	lsrs	r3, r3, #26
 800c59e:	3301      	adds	r3, #1
 800c5a0:	f003 031f 	and.w	r3, r3, #31
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c5aa:	e017      	b.n	800c5dc <HAL_ADC_ConfigChannel+0x33c>
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b4:	fa93 f3a3 	rbit	r3, r3
 800c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800c5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800c5be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 800c5c4:	2320      	movs	r3, #32
 800c5c6:	e003      	b.n	800c5d0 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 800c5c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5ca:	fab3 f383 	clz	r3, r3
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	f003 031f 	and.w	r3, r3, #31
 800c5d6:	2101      	movs	r1, #1
 800c5d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c5dc:	ea42 0103 	orr.w	r1, r2, r3
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10a      	bne.n	800c602 <HAL_ADC_ConfigChannel+0x362>
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	0e9b      	lsrs	r3, r3, #26
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	f003 021f 	and.w	r2, r3, #31
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	4413      	add	r3, r2
 800c5fe:	051b      	lsls	r3, r3, #20
 800c600:	e018      	b.n	800c634 <HAL_ADC_ConfigChannel+0x394>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60a:	fa93 f3a3 	rbit	r3, r3
 800c60e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800c610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c612:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800c614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c616:	2b00      	cmp	r3, #0
 800c618:	d101      	bne.n	800c61e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800c61a:	2320      	movs	r3, #32
 800c61c:	e003      	b.n	800c626 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800c61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c620:	fab3 f383 	clz	r3, r3
 800c624:	b2db      	uxtb	r3, r3
 800c626:	3301      	adds	r3, #1
 800c628:	f003 021f 	and.w	r2, r3, #31
 800c62c:	4613      	mov	r3, r2
 800c62e:	005b      	lsls	r3, r3, #1
 800c630:	4413      	add	r3, r2
 800c632:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c634:	430b      	orrs	r3, r1
 800c636:	e07e      	b.n	800c736 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c640:	2b00      	cmp	r3, #0
 800c642:	d107      	bne.n	800c654 <HAL_ADC_ConfigChannel+0x3b4>
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	0e9b      	lsrs	r3, r3, #26
 800c64a:	3301      	adds	r3, #1
 800c64c:	069b      	lsls	r3, r3, #26
 800c64e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c652:	e015      	b.n	800c680 <HAL_ADC_ConfigChannel+0x3e0>
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	fa93 f3a3 	rbit	r3, r3
 800c660:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800c662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c664:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800c666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800c66c:	2320      	movs	r3, #32
 800c66e:	e003      	b.n	800c678 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800c670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c672:	fab3 f383 	clz	r3, r3
 800c676:	b2db      	uxtb	r3, r3
 800c678:	3301      	adds	r3, #1
 800c67a:	069b      	lsls	r3, r3, #26
 800c67c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d109      	bne.n	800c6a0 <HAL_ADC_ConfigChannel+0x400>
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	0e9b      	lsrs	r3, r3, #26
 800c692:	3301      	adds	r3, #1
 800c694:	f003 031f 	and.w	r3, r3, #31
 800c698:	2101      	movs	r1, #1
 800c69a:	fa01 f303 	lsl.w	r3, r1, r3
 800c69e:	e017      	b.n	800c6d0 <HAL_ADC_ConfigChannel+0x430>
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	fa93 f3a3 	rbit	r3, r3
 800c6ac:	61bb      	str	r3, [r7, #24]
  return result;
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800c6b2:	6a3b      	ldr	r3, [r7, #32]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d101      	bne.n	800c6bc <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 800c6b8:	2320      	movs	r3, #32
 800c6ba:	e003      	b.n	800c6c4 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 800c6bc:	6a3b      	ldr	r3, [r7, #32]
 800c6be:	fab3 f383 	clz	r3, r3
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	f003 031f 	and.w	r3, r3, #31
 800c6ca:	2101      	movs	r1, #1
 800c6cc:	fa01 f303 	lsl.w	r3, r1, r3
 800c6d0:	ea42 0103 	orr.w	r1, r2, r3
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d10d      	bne.n	800c6fc <HAL_ADC_ConfigChannel+0x45c>
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	0e9b      	lsrs	r3, r3, #26
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	f003 021f 	and.w	r2, r3, #31
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	005b      	lsls	r3, r3, #1
 800c6f0:	4413      	add	r3, r2
 800c6f2:	3b1e      	subs	r3, #30
 800c6f4:	051b      	lsls	r3, r3, #20
 800c6f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c6fa:	e01b      	b.n	800c734 <HAL_ADC_ConfigChannel+0x494>
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	fa93 f3a3 	rbit	r3, r3
 800c708:	60fb      	str	r3, [r7, #12]
  return result;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d101      	bne.n	800c718 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 800c714:	2320      	movs	r3, #32
 800c716:	e003      	b.n	800c720 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	fab3 f383 	clz	r3, r3
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	3301      	adds	r3, #1
 800c722:	f003 021f 	and.w	r2, r3, #31
 800c726:	4613      	mov	r3, r2
 800c728:	005b      	lsls	r3, r3, #1
 800c72a:	4413      	add	r3, r2
 800c72c:	3b1e      	subs	r3, #30
 800c72e:	051b      	lsls	r3, r3, #20
 800c730:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c734:	430b      	orrs	r3, r1
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	6892      	ldr	r2, [r2, #8]
 800c73a:	4619      	mov	r1, r3
 800c73c:	f7fe ffd0 	bl	800b6e0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	da77      	bge.n	800c838 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c748:	4840      	ldr	r0, [pc, #256]	; (800c84c <HAL_ADC_ConfigChannel+0x5ac>)
 800c74a:	f7fe ff15 	bl	800b578 <LL_ADC_GetCommonPathInternalCh>
 800c74e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c750:	483f      	ldr	r0, [pc, #252]	; (800c850 <HAL_ADC_ConfigChannel+0x5b0>)
 800c752:	f7ff f893 	bl	800b87c <LL_ADC_IsEnabled>
 800c756:	4604      	mov	r4, r0
 800c758:	483e      	ldr	r0, [pc, #248]	; (800c854 <HAL_ADC_ConfigChannel+0x5b4>)
 800c75a:	f7ff f88f 	bl	800b87c <LL_ADC_IsEnabled>
 800c75e:	4603      	mov	r3, r0
 800c760:	4323      	orrs	r3, r4
 800c762:	2b00      	cmp	r3, #0
 800c764:	d155      	bne.n	800c812 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a3b      	ldr	r2, [pc, #236]	; (800c858 <HAL_ADC_ConfigChannel+0x5b8>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d122      	bne.n	800c7b6 <HAL_ADC_ConfigChannel+0x516>
 800c770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c776:	2b00      	cmp	r3, #0
 800c778:	d11d      	bne.n	800c7b6 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a35      	ldr	r2, [pc, #212]	; (800c854 <HAL_ADC_ConfigChannel+0x5b4>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d159      	bne.n	800c838 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800c784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c786:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c78a:	4619      	mov	r1, r3
 800c78c:	482f      	ldr	r0, [pc, #188]	; (800c84c <HAL_ADC_ConfigChannel+0x5ac>)
 800c78e:	f7fe fee0 	bl	800b552 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c792:	4b32      	ldr	r3, [pc, #200]	; (800c85c <HAL_ADC_ConfigChannel+0x5bc>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	099b      	lsrs	r3, r3, #6
 800c798:	4a31      	ldr	r2, [pc, #196]	; (800c860 <HAL_ADC_ConfigChannel+0x5c0>)
 800c79a:	fba2 2303 	umull	r2, r3, r2, r3
 800c79e:	099b      	lsrs	r3, r3, #6
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	005b      	lsls	r3, r3, #1
 800c7a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800c7a6:	e002      	b.n	800c7ae <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1f9      	bne.n	800c7a8 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c7b4:	e040      	b.n	800c838 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a2a      	ldr	r2, [pc, #168]	; (800c864 <HAL_ADC_ConfigChannel+0x5c4>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d111      	bne.n	800c7e4 <HAL_ADC_ConfigChannel+0x544>
 800c7c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10c      	bne.n	800c7e4 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a21      	ldr	r2, [pc, #132]	; (800c854 <HAL_ADC_ConfigChannel+0x5b4>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d131      	bne.n	800c838 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800c7d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7da:	4619      	mov	r1, r3
 800c7dc:	481b      	ldr	r0, [pc, #108]	; (800c84c <HAL_ADC_ConfigChannel+0x5ac>)
 800c7de:	f7fe feb8 	bl	800b552 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c7e2:	e029      	b.n	800c838 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a1f      	ldr	r2, [pc, #124]	; (800c868 <HAL_ADC_ConfigChannel+0x5c8>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d124      	bne.n	800c838 <HAL_ADC_ConfigChannel+0x598>
 800c7ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d11f      	bne.n	800c838 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a15      	ldr	r2, [pc, #84]	; (800c854 <HAL_ADC_ConfigChannel+0x5b4>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d11a      	bne.n	800c838 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800c802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c804:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c808:	4619      	mov	r1, r3
 800c80a:	4810      	ldr	r0, [pc, #64]	; (800c84c <HAL_ADC_ConfigChannel+0x5ac>)
 800c80c:	f7fe fea1 	bl	800b552 <LL_ADC_SetCommonPathInternalCh>
 800c810:	e012      	b.n	800c838 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c816:	f043 0220 	orr.w	r2, r3, #32
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800c81e:	2301      	movs	r3, #1
 800c820:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c824:	e008      	b.n	800c838 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c82a:	f043 0220 	orr.w	r2, r3, #32
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800c832:	2301      	movs	r3, #1
 800c834:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800c840:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800c844:	4618      	mov	r0, r3
 800c846:	3784      	adds	r7, #132	; 0x84
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd90      	pop	{r4, r7, pc}
 800c84c:	40022300 	.word	0x40022300
 800c850:	40022000 	.word	0x40022000
 800c854:	40022100 	.word	0x40022100
 800c858:	cb840000 	.word	0xcb840000
 800c85c:	2400003c 	.word	0x2400003c
 800c860:	053e2d63 	.word	0x053e2d63
 800c864:	bac04000 	.word	0xbac04000
 800c868:	cfb80000 	.word	0xcfb80000

0800c86c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fe ffff 	bl	800b87c <LL_ADC_IsEnabled>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d161      	bne.n	800c948 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	689a      	ldr	r2, [r3, #8]
 800c88a:	4b32      	ldr	r3, [pc, #200]	; (800c954 <ADC_Enable+0xe8>)
 800c88c:	4013      	ands	r3, r2
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00d      	beq.n	800c8ae <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c896:	f043 0210 	orr.w	r2, r3, #16
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8a2:	f043 0201 	orr.w	r2, r3, #1
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e04d      	b.n	800c94a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7fe ffce 	bl	800b854 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c8b8:	f7fe fe08 	bl	800b4cc <HAL_GetTick>
 800c8bc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c8be:	4826      	ldr	r0, [pc, #152]	; (800c958 <ADC_Enable+0xec>)
 800c8c0:	f7fe ff5e 	bl	800b780 <LL_ADC_GetMultimode>
 800c8c4:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a24      	ldr	r2, [pc, #144]	; (800c95c <ADC_Enable+0xf0>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d002      	beq.n	800c8d6 <ADC_Enable+0x6a>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	e000      	b.n	800c8d8 <ADC_Enable+0x6c>
 800c8d6:	4b22      	ldr	r3, [pc, #136]	; (800c960 <ADC_Enable+0xf4>)
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	6812      	ldr	r2, [r2, #0]
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d02c      	beq.n	800c93a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d130      	bne.n	800c948 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c8e6:	e028      	b.n	800c93a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f7fe ffc5 	bl	800b87c <LL_ADC_IsEnabled>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d104      	bne.n	800c902 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fe ffa9 	bl	800b854 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c902:	f7fe fde3 	bl	800b4cc <HAL_GetTick>
 800c906:	4602      	mov	r2, r0
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	1ad3      	subs	r3, r2, r3
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	d914      	bls.n	800c93a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f003 0301 	and.w	r3, r3, #1
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d00d      	beq.n	800c93a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c922:	f043 0210 	orr.w	r2, r3, #16
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c92e:	f043 0201 	orr.w	r2, r3, #1
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800c936:	2301      	movs	r3, #1
 800c938:	e007      	b.n	800c94a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f003 0301 	and.w	r3, r3, #1
 800c944:	2b01      	cmp	r3, #1
 800c946:	d1cf      	bne.n	800c8e8 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3710      	adds	r7, #16
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	8000003f 	.word	0x8000003f
 800c958:	40022300 	.word	0x40022300
 800c95c:	40022100 	.word	0x40022100
 800c960:	40022000 	.word	0x40022000

0800c964 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800c96c:	4b5f      	ldr	r3, [pc, #380]	; (800caec <ADC_ConfigureBoostMode+0x188>)
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c974:	2b00      	cmp	r3, #0
 800c976:	d01c      	beq.n	800c9b2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800c978:	f004 fa12 	bl	8010da0 <HAL_RCC_GetHCLKFreq>
 800c97c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c986:	d010      	beq.n	800c9aa <ADC_ConfigureBoostMode+0x46>
 800c988:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c98c:	d871      	bhi.n	800ca72 <ADC_ConfigureBoostMode+0x10e>
 800c98e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c992:	d002      	beq.n	800c99a <ADC_ConfigureBoostMode+0x36>
 800c994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c998:	d16b      	bne.n	800ca72 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	0c1b      	lsrs	r3, r3, #16
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9a6:	60fb      	str	r3, [r7, #12]
        break;
 800c9a8:	e066      	b.n	800ca78 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	089b      	lsrs	r3, r3, #2
 800c9ae:	60fb      	str	r3, [r7, #12]
        break;
 800c9b0:	e062      	b.n	800ca78 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800c9b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c9b6:	f005 f99d 	bl	8011cf4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c9ba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800c9c4:	d051      	beq.n	800ca6a <ADC_ConfigureBoostMode+0x106>
 800c9c6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800c9ca:	d854      	bhi.n	800ca76 <ADC_ConfigureBoostMode+0x112>
 800c9cc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800c9d0:	d047      	beq.n	800ca62 <ADC_ConfigureBoostMode+0xfe>
 800c9d2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800c9d6:	d84e      	bhi.n	800ca76 <ADC_ConfigureBoostMode+0x112>
 800c9d8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800c9dc:	d03d      	beq.n	800ca5a <ADC_ConfigureBoostMode+0xf6>
 800c9de:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800c9e2:	d848      	bhi.n	800ca76 <ADC_ConfigureBoostMode+0x112>
 800c9e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9e8:	d033      	beq.n	800ca52 <ADC_ConfigureBoostMode+0xee>
 800c9ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9ee:	d842      	bhi.n	800ca76 <ADC_ConfigureBoostMode+0x112>
 800c9f0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800c9f4:	d029      	beq.n	800ca4a <ADC_ConfigureBoostMode+0xe6>
 800c9f6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800c9fa:	d83c      	bhi.n	800ca76 <ADC_ConfigureBoostMode+0x112>
 800c9fc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800ca00:	d01a      	beq.n	800ca38 <ADC_ConfigureBoostMode+0xd4>
 800ca02:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800ca06:	d836      	bhi.n	800ca76 <ADC_ConfigureBoostMode+0x112>
 800ca08:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800ca0c:	d014      	beq.n	800ca38 <ADC_ConfigureBoostMode+0xd4>
 800ca0e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800ca12:	d830      	bhi.n	800ca76 <ADC_ConfigureBoostMode+0x112>
 800ca14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca18:	d00e      	beq.n	800ca38 <ADC_ConfigureBoostMode+0xd4>
 800ca1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca1e:	d82a      	bhi.n	800ca76 <ADC_ConfigureBoostMode+0x112>
 800ca20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ca24:	d008      	beq.n	800ca38 <ADC_ConfigureBoostMode+0xd4>
 800ca26:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ca2a:	d824      	bhi.n	800ca76 <ADC_ConfigureBoostMode+0x112>
 800ca2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca30:	d002      	beq.n	800ca38 <ADC_ConfigureBoostMode+0xd4>
 800ca32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ca36:	d11e      	bne.n	800ca76 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	0c9b      	lsrs	r3, r3, #18
 800ca3e:	005b      	lsls	r3, r3, #1
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca46:	60fb      	str	r3, [r7, #12]
        break;
 800ca48:	e016      	b.n	800ca78 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	091b      	lsrs	r3, r3, #4
 800ca4e:	60fb      	str	r3, [r7, #12]
        break;
 800ca50:	e012      	b.n	800ca78 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	095b      	lsrs	r3, r3, #5
 800ca56:	60fb      	str	r3, [r7, #12]
        break;
 800ca58:	e00e      	b.n	800ca78 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	099b      	lsrs	r3, r3, #6
 800ca5e:	60fb      	str	r3, [r7, #12]
        break;
 800ca60:	e00a      	b.n	800ca78 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	09db      	lsrs	r3, r3, #7
 800ca66:	60fb      	str	r3, [r7, #12]
        break;
 800ca68:	e006      	b.n	800ca78 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	0a1b      	lsrs	r3, r3, #8
 800ca6e:	60fb      	str	r3, [r7, #12]
        break;
 800ca70:	e002      	b.n	800ca78 <ADC_ConfigureBoostMode+0x114>
        break;
 800ca72:	bf00      	nop
 800ca74:	e000      	b.n	800ca78 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 800ca76:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	085b      	lsrs	r3, r3, #1
 800ca7c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	4a1b      	ldr	r2, [pc, #108]	; (800caf0 <ADC_ConfigureBoostMode+0x18c>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d808      	bhi.n	800ca98 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	689a      	ldr	r2, [r3, #8]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ca94:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800ca96:	e025      	b.n	800cae4 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	4a16      	ldr	r2, [pc, #88]	; (800caf4 <ADC_ConfigureBoostMode+0x190>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d80a      	bhi.n	800cab6 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cab2:	609a      	str	r2, [r3, #8]
}
 800cab4:	e016      	b.n	800cae4 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	4a0f      	ldr	r2, [pc, #60]	; (800caf8 <ADC_ConfigureBoostMode+0x194>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d80a      	bhi.n	800cad4 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cad0:	609a      	str	r2, [r3, #8]
}
 800cad2:	e007      	b.n	800cae4 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	689a      	ldr	r2, [r3, #8]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cae2:	609a      	str	r2, [r3, #8]
}
 800cae4:	bf00      	nop
 800cae6:	3710      	adds	r7, #16
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	40022300 	.word	0x40022300
 800caf0:	005f5e10 	.word	0x005f5e10
 800caf4:	00bebc20 	.word	0x00bebc20
 800caf8:	017d7840 	.word	0x017d7840

0800cafc <LL_ADC_IsEnabled>:
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	f003 0301 	and.w	r3, r3, #1
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d101      	bne.n	800cb14 <LL_ADC_IsEnabled+0x18>
 800cb10:	2301      	movs	r3, #1
 800cb12:	e000      	b.n	800cb16 <LL_ADC_IsEnabled+0x1a>
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	370c      	adds	r7, #12
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr

0800cb22 <LL_ADC_REG_IsConversionOngoing>:
{
 800cb22:	b480      	push	{r7}
 800cb24:	b083      	sub	sp, #12
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	f003 0304 	and.w	r3, r3, #4
 800cb32:	2b04      	cmp	r3, #4
 800cb34:	d101      	bne.n	800cb3a <LL_ADC_REG_IsConversionOngoing+0x18>
 800cb36:	2301      	movs	r3, #1
 800cb38:	e000      	b.n	800cb3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800cb50:	bf00      	nop
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800cb64:	bf00      	nop
 800cb66:	370c      	adds	r7, #12
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b083      	sub	sp, #12
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800cb78:	bf00      	nop
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800cb8c:	bf00      	nop
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800cba0:	bf00      	nop
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800cbac:	b590      	push	{r4, r7, lr}
 800cbae:	b09f      	sub	sp, #124	; 0x7c
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d101      	bne.n	800cbca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800cbc6:	2302      	movs	r3, #2
 800cbc8:	e080      	b.n	800cccc <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a3d      	ldr	r2, [pc, #244]	; (800ccd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d102      	bne.n	800cbea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800cbe4:	4b3c      	ldr	r3, [pc, #240]	; (800ccd8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800cbe6:	60bb      	str	r3, [r7, #8]
 800cbe8:	e001      	b.n	800cbee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800cbea:	2300      	movs	r3, #0
 800cbec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10b      	bne.n	800cc0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbf8:	f043 0220 	orr.w	r2, r3, #32
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e05f      	b.n	800cccc <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7ff ff87 	bl	800cb22 <LL_ADC_REG_IsConversionOngoing>
 800cc14:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7ff ff81 	bl	800cb22 <LL_ADC_REG_IsConversionOngoing>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d141      	bne.n	800ccaa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800cc26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d13e      	bne.n	800ccaa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800cc2c:	4b2b      	ldr	r3, [pc, #172]	; (800ccdc <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 800cc2e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d020      	beq.n	800cc7a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800cc38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	431a      	orrs	r2, r3
 800cc46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc48:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800cc4a:	4822      	ldr	r0, [pc, #136]	; (800ccd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800cc4c:	f7ff ff56 	bl	800cafc <LL_ADC_IsEnabled>
 800cc50:	4604      	mov	r4, r0
 800cc52:	4821      	ldr	r0, [pc, #132]	; (800ccd8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800cc54:	f7ff ff52 	bl	800cafc <LL_ADC_IsEnabled>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	4323      	orrs	r3, r4
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d12e      	bne.n	800ccbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800cc60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc62:	689a      	ldr	r2, [r3, #8]
 800cc64:	4b1e      	ldr	r3, [pc, #120]	; (800cce0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800cc66:	4013      	ands	r3, r2
 800cc68:	683a      	ldr	r2, [r7, #0]
 800cc6a:	6811      	ldr	r1, [r2, #0]
 800cc6c:	683a      	ldr	r2, [r7, #0]
 800cc6e:	6892      	ldr	r2, [r2, #8]
 800cc70:	430a      	orrs	r2, r1
 800cc72:	431a      	orrs	r2, r3
 800cc74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc76:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800cc78:	e021      	b.n	800ccbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800cc7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cc82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800cc86:	4813      	ldr	r0, [pc, #76]	; (800ccd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800cc88:	f7ff ff38 	bl	800cafc <LL_ADC_IsEnabled>
 800cc8c:	4604      	mov	r4, r0
 800cc8e:	4812      	ldr	r0, [pc, #72]	; (800ccd8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800cc90:	f7ff ff34 	bl	800cafc <LL_ADC_IsEnabled>
 800cc94:	4603      	mov	r3, r0
 800cc96:	4323      	orrs	r3, r4
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d110      	bne.n	800ccbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800cc9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc9e:	689a      	ldr	r2, [r3, #8]
 800cca0:	4b0f      	ldr	r3, [pc, #60]	; (800cce0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800cca2:	4013      	ands	r3, r2
 800cca4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cca6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800cca8:	e009      	b.n	800ccbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccae:	f043 0220 	orr.w	r2, r3, #32
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800ccbc:	e000      	b.n	800ccc0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800ccbe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800ccc8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	377c      	adds	r7, #124	; 0x7c
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd90      	pop	{r4, r7, pc}
 800ccd4:	40022000 	.word	0x40022000
 800ccd8:	40022100 	.word	0x40022100
 800ccdc:	40022300 	.word	0x40022300
 800cce0:	fffff0e0 	.word	0xfffff0e0

0800cce4 <__NVIC_SetPriorityGrouping>:
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f003 0307 	and.w	r3, r3, #7
 800ccf2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ccf4:	4b0b      	ldr	r3, [pc, #44]	; (800cd24 <__NVIC_SetPriorityGrouping+0x40>)
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ccfa:	68ba      	ldr	r2, [r7, #8]
 800ccfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800cd00:	4013      	ands	r3, r2
 800cd02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800cd0c:	4b06      	ldr	r3, [pc, #24]	; (800cd28 <__NVIC_SetPriorityGrouping+0x44>)
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cd12:	4a04      	ldr	r2, [pc, #16]	; (800cd24 <__NVIC_SetPriorityGrouping+0x40>)
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	60d3      	str	r3, [r2, #12]
}
 800cd18:	bf00      	nop
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	e000ed00 	.word	0xe000ed00
 800cd28:	05fa0000 	.word	0x05fa0000

0800cd2c <__NVIC_GetPriorityGrouping>:
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cd30:	4b04      	ldr	r3, [pc, #16]	; (800cd44 <__NVIC_GetPriorityGrouping+0x18>)
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	0a1b      	lsrs	r3, r3, #8
 800cd36:	f003 0307 	and.w	r3, r3, #7
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr
 800cd44:	e000ed00 	.word	0xe000ed00

0800cd48 <__NVIC_EnableIRQ>:
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	4603      	mov	r3, r0
 800cd50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cd52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	db0b      	blt.n	800cd72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cd5a:	88fb      	ldrh	r3, [r7, #6]
 800cd5c:	f003 021f 	and.w	r2, r3, #31
 800cd60:	4907      	ldr	r1, [pc, #28]	; (800cd80 <__NVIC_EnableIRQ+0x38>)
 800cd62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd66:	095b      	lsrs	r3, r3, #5
 800cd68:	2001      	movs	r0, #1
 800cd6a:	fa00 f202 	lsl.w	r2, r0, r2
 800cd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cd72:	bf00      	nop
 800cd74:	370c      	adds	r7, #12
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop
 800cd80:	e000e100 	.word	0xe000e100

0800cd84 <__NVIC_DisableIRQ>:
{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cd8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	db12      	blt.n	800cdbc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cd96:	88fb      	ldrh	r3, [r7, #6]
 800cd98:	f003 021f 	and.w	r2, r3, #31
 800cd9c:	490a      	ldr	r1, [pc, #40]	; (800cdc8 <__NVIC_DisableIRQ+0x44>)
 800cd9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cda2:	095b      	lsrs	r3, r3, #5
 800cda4:	2001      	movs	r0, #1
 800cda6:	fa00 f202 	lsl.w	r2, r0, r2
 800cdaa:	3320      	adds	r3, #32
 800cdac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800cdb0:	f3bf 8f4f 	dsb	sy
}
 800cdb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cdb6:	f3bf 8f6f 	isb	sy
}
 800cdba:	bf00      	nop
}
 800cdbc:	bf00      	nop
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr
 800cdc8:	e000e100 	.word	0xe000e100

0800cdcc <__NVIC_SetPriority>:
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b083      	sub	sp, #12
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	6039      	str	r1, [r7, #0]
 800cdd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cdd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	db0a      	blt.n	800cdf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	b2da      	uxtb	r2, r3
 800cde4:	490c      	ldr	r1, [pc, #48]	; (800ce18 <__NVIC_SetPriority+0x4c>)
 800cde6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdea:	0112      	lsls	r2, r2, #4
 800cdec:	b2d2      	uxtb	r2, r2
 800cdee:	440b      	add	r3, r1
 800cdf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cdf4:	e00a      	b.n	800ce0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	4908      	ldr	r1, [pc, #32]	; (800ce1c <__NVIC_SetPriority+0x50>)
 800cdfc:	88fb      	ldrh	r3, [r7, #6]
 800cdfe:	f003 030f 	and.w	r3, r3, #15
 800ce02:	3b04      	subs	r3, #4
 800ce04:	0112      	lsls	r2, r2, #4
 800ce06:	b2d2      	uxtb	r2, r2
 800ce08:	440b      	add	r3, r1
 800ce0a:	761a      	strb	r2, [r3, #24]
}
 800ce0c:	bf00      	nop
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	e000e100 	.word	0xe000e100
 800ce1c:	e000ed00 	.word	0xe000ed00

0800ce20 <NVIC_EncodePriority>:
{
 800ce20:	b480      	push	{r7}
 800ce22:	b089      	sub	sp, #36	; 0x24
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f003 0307 	and.w	r3, r3, #7
 800ce32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	f1c3 0307 	rsb	r3, r3, #7
 800ce3a:	2b04      	cmp	r3, #4
 800ce3c:	bf28      	it	cs
 800ce3e:	2304      	movcs	r3, #4
 800ce40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	3304      	adds	r3, #4
 800ce46:	2b06      	cmp	r3, #6
 800ce48:	d902      	bls.n	800ce50 <NVIC_EncodePriority+0x30>
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	3b03      	subs	r3, #3
 800ce4e:	e000      	b.n	800ce52 <NVIC_EncodePriority+0x32>
 800ce50:	2300      	movs	r3, #0
 800ce52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ce54:	f04f 32ff 	mov.w	r2, #4294967295
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce5e:	43da      	mvns	r2, r3
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	401a      	ands	r2, r3
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ce68:	f04f 31ff 	mov.w	r1, #4294967295
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce72:	43d9      	mvns	r1, r3
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ce78:	4313      	orrs	r3, r2
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3724      	adds	r7, #36	; 0x24
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr

0800ce86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b082      	sub	sp, #8
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f7ff ff28 	bl	800cce4 <__NVIC_SetPriorityGrouping>
}
 800ce94:	bf00      	nop
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b086      	sub	sp, #24
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	4603      	mov	r3, r0
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
 800cea8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ceaa:	f7ff ff3f 	bl	800cd2c <__NVIC_GetPriorityGrouping>
 800ceae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	68b9      	ldr	r1, [r7, #8]
 800ceb4:	6978      	ldr	r0, [r7, #20]
 800ceb6:	f7ff ffb3 	bl	800ce20 <NVIC_EncodePriority>
 800ceba:	4602      	mov	r2, r0
 800cebc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cec0:	4611      	mov	r1, r2
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7ff ff82 	bl	800cdcc <__NVIC_SetPriority>
}
 800cec8:	bf00      	nop
 800ceca:	3718      	adds	r7, #24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4603      	mov	r3, r0
 800ced8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ceda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cede:	4618      	mov	r0, r3
 800cee0:	f7ff ff32 	bl	800cd48 <__NVIC_EnableIRQ>
}
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	4603      	mov	r3, r0
 800cef4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800cef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7ff ff42 	bl	800cd84 <__NVIC_DisableIRQ>
}
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800cf0c:	f3bf 8f5f 	dmb	sy
}
 800cf10:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800cf12:	4b07      	ldr	r3, [pc, #28]	; (800cf30 <HAL_MPU_Disable+0x28>)
 800cf14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf16:	4a06      	ldr	r2, [pc, #24]	; (800cf30 <HAL_MPU_Disable+0x28>)
 800cf18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf1c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800cf1e:	4b05      	ldr	r3, [pc, #20]	; (800cf34 <HAL_MPU_Disable+0x2c>)
 800cf20:	2200      	movs	r2, #0
 800cf22:	605a      	str	r2, [r3, #4]
}
 800cf24:	bf00      	nop
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	e000ed00 	.word	0xe000ed00
 800cf34:	e000ed90 	.word	0xe000ed90

0800cf38 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800cf40:	4a0b      	ldr	r2, [pc, #44]	; (800cf70 <HAL_MPU_Enable+0x38>)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f043 0301 	orr.w	r3, r3, #1
 800cf48:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800cf4a:	4b0a      	ldr	r3, [pc, #40]	; (800cf74 <HAL_MPU_Enable+0x3c>)
 800cf4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4e:	4a09      	ldr	r2, [pc, #36]	; (800cf74 <HAL_MPU_Enable+0x3c>)
 800cf50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf54:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800cf56:	f3bf 8f4f 	dsb	sy
}
 800cf5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cf5c:	f3bf 8f6f 	isb	sy
}
 800cf60:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800cf62:	bf00      	nop
 800cf64:	370c      	adds	r7, #12
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	e000ed90 	.word	0xe000ed90
 800cf74:	e000ed00 	.word	0xe000ed00

0800cf78 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	785a      	ldrb	r2, [r3, #1]
 800cf84:	4b1d      	ldr	r3, [pc, #116]	; (800cffc <HAL_MPU_ConfigRegion+0x84>)
 800cf86:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d029      	beq.n	800cfe4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800cf90:	4a1a      	ldr	r2, [pc, #104]	; (800cffc <HAL_MPU_ConfigRegion+0x84>)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	7b1b      	ldrb	r3, [r3, #12]
 800cf9c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	7adb      	ldrb	r3, [r3, #11]
 800cfa2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cfa4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	7a9b      	ldrb	r3, [r3, #10]
 800cfaa:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800cfac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	7b5b      	ldrb	r3, [r3, #13]
 800cfb2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800cfb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	7b9b      	ldrb	r3, [r3, #14]
 800cfba:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800cfbc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	7bdb      	ldrb	r3, [r3, #15]
 800cfc2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800cfc4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	7a5b      	ldrb	r3, [r3, #9]
 800cfca:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800cfcc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	7a1b      	ldrb	r3, [r3, #8]
 800cfd2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800cfd4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	7812      	ldrb	r2, [r2, #0]
 800cfda:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cfdc:	4a07      	ldr	r2, [pc, #28]	; (800cffc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800cfde:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cfe0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800cfe2:	e005      	b.n	800cff0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800cfe4:	4b05      	ldr	r3, [pc, #20]	; (800cffc <HAL_MPU_ConfigRegion+0x84>)
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800cfea:	4b04      	ldr	r3, [pc, #16]	; (800cffc <HAL_MPU_ConfigRegion+0x84>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	611a      	str	r2, [r3, #16]
}
 800cff0:	bf00      	nop
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr
 800cffc:	e000ed90 	.word	0xe000ed90

0800d000 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d101      	bne.n	800d012 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800d00e:	2301      	movs	r3, #1
 800d010:	e054      	b.n	800d0bc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	7f5b      	ldrb	r3, [r3, #29]
 800d016:	b2db      	uxtb	r3, r3
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d105      	bne.n	800d028 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f7f6 fb98 	bl	8003758 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2202      	movs	r2, #2
 800d02c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	791b      	ldrb	r3, [r3, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10c      	bne.n	800d050 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4a22      	ldr	r2, [pc, #136]	; (800d0c4 <HAL_CRC_Init+0xc4>)
 800d03c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	689a      	ldr	r2, [r3, #8]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f022 0218 	bic.w	r2, r2, #24
 800d04c:	609a      	str	r2, [r3, #8]
 800d04e:	e00c      	b.n	800d06a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6899      	ldr	r1, [r3, #8]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	461a      	mov	r2, r3
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f834 	bl	800d0c8 <HAL_CRCEx_Polynomial_Set>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800d066:	2301      	movs	r3, #1
 800d068:	e028      	b.n	800d0bc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	795b      	ldrb	r3, [r3, #5]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d105      	bne.n	800d07e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f04f 32ff 	mov.w	r2, #4294967295
 800d07a:	611a      	str	r2, [r3, #16]
 800d07c:	e004      	b.n	800d088 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	6912      	ldr	r2, [r2, #16]
 800d086:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	695a      	ldr	r2, [r3, #20]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	430a      	orrs	r2, r1
 800d09c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	699a      	ldr	r2, [r3, #24]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	430a      	orrs	r2, r1
 800d0b2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	04c11db7 	.word	0x04c11db7

0800d0c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b087      	sub	sp, #28
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800d0d8:	231f      	movs	r3, #31
 800d0da:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800d0dc:	bf00      	nop
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	1e5a      	subs	r2, r3, #1
 800d0e2:	613a      	str	r2, [r7, #16]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d009      	beq.n	800d0fc <HAL_CRCEx_Polynomial_Set+0x34>
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	f003 031f 	and.w	r3, r3, #31
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d0f4:	f003 0301 	and.w	r3, r3, #1
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d0f0      	beq.n	800d0de <HAL_CRCEx_Polynomial_Set+0x16>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b18      	cmp	r3, #24
 800d100:	d846      	bhi.n	800d190 <HAL_CRCEx_Polynomial_Set+0xc8>
 800d102:	a201      	add	r2, pc, #4	; (adr r2, 800d108 <HAL_CRCEx_Polynomial_Set+0x40>)
 800d104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d108:	0800d197 	.word	0x0800d197
 800d10c:	0800d191 	.word	0x0800d191
 800d110:	0800d191 	.word	0x0800d191
 800d114:	0800d191 	.word	0x0800d191
 800d118:	0800d191 	.word	0x0800d191
 800d11c:	0800d191 	.word	0x0800d191
 800d120:	0800d191 	.word	0x0800d191
 800d124:	0800d191 	.word	0x0800d191
 800d128:	0800d185 	.word	0x0800d185
 800d12c:	0800d191 	.word	0x0800d191
 800d130:	0800d191 	.word	0x0800d191
 800d134:	0800d191 	.word	0x0800d191
 800d138:	0800d191 	.word	0x0800d191
 800d13c:	0800d191 	.word	0x0800d191
 800d140:	0800d191 	.word	0x0800d191
 800d144:	0800d191 	.word	0x0800d191
 800d148:	0800d179 	.word	0x0800d179
 800d14c:	0800d191 	.word	0x0800d191
 800d150:	0800d191 	.word	0x0800d191
 800d154:	0800d191 	.word	0x0800d191
 800d158:	0800d191 	.word	0x0800d191
 800d15c:	0800d191 	.word	0x0800d191
 800d160:	0800d191 	.word	0x0800d191
 800d164:	0800d191 	.word	0x0800d191
 800d168:	0800d16d 	.word	0x0800d16d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	2b06      	cmp	r3, #6
 800d170:	d913      	bls.n	800d19a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d176:	e010      	b.n	800d19a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	2b07      	cmp	r3, #7
 800d17c:	d90f      	bls.n	800d19e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d182:	e00c      	b.n	800d19e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	2b0f      	cmp	r3, #15
 800d188:	d90b      	bls.n	800d1a2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800d18a:	2301      	movs	r3, #1
 800d18c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d18e:	e008      	b.n	800d1a2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	75fb      	strb	r3, [r7, #23]
      break;
 800d194:	e006      	b.n	800d1a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d196:	bf00      	nop
 800d198:	e004      	b.n	800d1a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d19a:	bf00      	nop
 800d19c:	e002      	b.n	800d1a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d19e:	bf00      	nop
 800d1a0:	e000      	b.n	800d1a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800d1a2:	bf00      	nop
  }
  if (status == HAL_OK)
 800d1a4:	7dfb      	ldrb	r3, [r7, #23]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10d      	bne.n	800d1c6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	68ba      	ldr	r2, [r7, #8]
 800d1b0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	f023 0118 	bic.w	r1, r3, #24
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	430a      	orrs	r2, r1
 800d1c4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800d1c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	371c      	adds	r7, #28
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d101      	bne.n	800d1e6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e04f      	b.n	800d286 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d106      	bne.n	800d200 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7f6 face 	bl	800379c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2202      	movs	r2, #2
 800d204:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	4b20      	ldr	r3, [pc, #128]	; (800d290 <HAL_DMA2D_Init+0xbc>)
 800d210:	4013      	ands	r3, r2
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	6851      	ldr	r1, [r2, #4]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	69d2      	ldr	r2, [r2, #28]
 800d21a:	4311      	orrs	r1, r2
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	6812      	ldr	r2, [r2, #0]
 800d220:	430b      	orrs	r3, r1
 800d222:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d22a:	4b1a      	ldr	r3, [pc, #104]	; (800d294 <HAL_DMA2D_Init+0xc0>)
 800d22c:	4013      	ands	r3, r2
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	6891      	ldr	r1, [r2, #8]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	6992      	ldr	r2, [r2, #24]
 800d236:	4311      	orrs	r1, r2
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	6812      	ldr	r2, [r2, #0]
 800d23c:	430b      	orrs	r3, r1
 800d23e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d246:	4b14      	ldr	r3, [pc, #80]	; (800d298 <HAL_DMA2D_Init+0xc4>)
 800d248:	4013      	ands	r3, r2
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	68d1      	ldr	r1, [r2, #12]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	6812      	ldr	r2, [r2, #0]
 800d252:	430b      	orrs	r3, r1
 800d254:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d25c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	051a      	lsls	r2, r3, #20
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	695b      	ldr	r3, [r3, #20]
 800d26a:	055b      	lsls	r3, r3, #21
 800d26c:	431a      	orrs	r2, r3
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	430a      	orrs	r2, r1
 800d274:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2201      	movs	r2, #1
 800d280:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	fff8ffbf 	.word	0xfff8ffbf
 800d294:	fffffef8 	.word	0xfffffef8
 800d298:	ffff0000 	.word	0xffff0000

0800d29c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f003 0301 	and.w	r3, r3, #1
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d026      	beq.n	800d30c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d021      	beq.n	800d30c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d2d6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2dc:	f043 0201 	orr.w	r2, r3, #1
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2204      	movs	r2, #4
 800d2f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d300:	2b00      	cmp	r3, #0
 800d302:	d003      	beq.n	800d30c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f003 0320 	and.w	r3, r3, #32
 800d312:	2b00      	cmp	r3, #0
 800d314:	d026      	beq.n	800d364 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d021      	beq.n	800d364 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d32e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2220      	movs	r2, #32
 800d336:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d33c:	f043 0202 	orr.w	r2, r3, #2
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2204      	movs	r2, #4
 800d348:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d003      	beq.n	800d364 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f003 0308 	and.w	r3, r3, #8
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d026      	beq.n	800d3bc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d374:	2b00      	cmp	r3, #0
 800d376:	d021      	beq.n	800d3bc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d386:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2208      	movs	r2, #8
 800d38e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d394:	f043 0204 	orr.w	r2, r3, #4
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2204      	movs	r2, #4
 800d3a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d003      	beq.n	800d3bc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f003 0304 	and.w	r3, r3, #4
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d013      	beq.n	800d3ee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d00e      	beq.n	800d3ee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2204      	movs	r2, #4
 800d3e6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f000 f853 	bl	800d494 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f003 0302 	and.w	r3, r3, #2
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d024      	beq.n	800d442 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d01f      	beq.n	800d442 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d410:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2202      	movs	r2, #2
 800d418:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6a1b      	ldr	r3, [r3, #32]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d003      	beq.n	800d442 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6a1b      	ldr	r3, [r3, #32]
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f003 0310 	and.w	r3, r3, #16
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d01f      	beq.n	800d48c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d452:	2b00      	cmp	r3, #0
 800d454:	d01a      	beq.n	800d48c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d464:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2210      	movs	r2, #16
 800d46c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2201      	movs	r2, #1
 800d47a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 f80e 	bl	800d4a8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800d48c:	bf00      	nop
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800d49c:	bf00      	nop
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b087      	sub	sp, #28
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d104      	bne.n	800d4de <HAL_DMA2D_ConfigLayer+0x22>
 800d4d4:	683a      	ldr	r2, [r7, #0]
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	00db      	lsls	r3, r3, #3
 800d4da:	1a9b      	subs	r3, r3, r2
 800d4dc:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d101      	bne.n	800d4ec <HAL_DMA2D_ConfigLayer+0x30>
 800d4e8:	2302      	movs	r3, #2
 800d4ea:	e092      	b.n	800d612 <HAL_DMA2D_ConfigLayer+0x156>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2202      	movs	r2, #2
 800d4f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800d4fc:	683a      	ldr	r2, [r7, #0]
 800d4fe:	4613      	mov	r3, r2
 800d500:	00db      	lsls	r3, r3, #3
 800d502:	1a9b      	subs	r3, r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	3328      	adds	r3, #40	; 0x28
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	4413      	add	r3, r2
 800d50c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	685a      	ldr	r2, [r3, #4]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	041b      	lsls	r3, r3, #16
 800d518:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	691b      	ldr	r3, [r3, #16]
 800d51e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d520:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800d528:	4313      	orrs	r3, r2
 800d52a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800d52c:	4b3c      	ldr	r3, [pc, #240]	; (800d620 <HAL_DMA2D_ConfigLayer+0x164>)
 800d52e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	2b0a      	cmp	r3, #10
 800d536:	d003      	beq.n	800d540 <HAL_DMA2D_ConfigLayer+0x84>
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	2b09      	cmp	r3, #9
 800d53e:	d107      	bne.n	800d550 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d548:	693a      	ldr	r2, [r7, #16]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	613b      	str	r3, [r7, #16]
 800d54e:	e005      	b.n	800d55c <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	061b      	lsls	r3, r3, #24
 800d556:	693a      	ldr	r2, [r7, #16]
 800d558:	4313      	orrs	r3, r2
 800d55a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d120      	bne.n	800d5a4 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	43db      	mvns	r3, r3
 800d56c:	ea02 0103 	and.w	r1, r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	693a      	ldr	r2, [r7, #16]
 800d576:	430a      	orrs	r2, r1
 800d578:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	68fa      	ldr	r2, [r7, #12]
 800d580:	6812      	ldr	r2, [r2, #0]
 800d582:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	2b0a      	cmp	r3, #10
 800d58a:	d003      	beq.n	800d594 <HAL_DMA2D_ConfigLayer+0xd8>
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	2b09      	cmp	r3, #9
 800d592:	d135      	bne.n	800d600 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	68da      	ldr	r2, [r3, #12]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d5a0:	629a      	str	r2, [r3, #40]	; 0x28
 800d5a2:	e02d      	b.n	800d600 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	2b0b      	cmp	r3, #11
 800d5aa:	d109      	bne.n	800d5c0 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	699b      	ldr	r3, [r3, #24]
 800d5b0:	049b      	lsls	r3, r3, #18
 800d5b2:	693a      	ldr	r2, [r7, #16]
 800d5b4:	4313      	orrs	r3, r2
 800d5b6:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800d5be:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	69da      	ldr	r2, [r3, #28]
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	43db      	mvns	r3, r3
 800d5ca:	ea02 0103 	and.w	r1, r2, r3
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	693a      	ldr	r2, [r7, #16]
 800d5d4:	430a      	orrs	r2, r1
 800d5d6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	6812      	ldr	r2, [r2, #0]
 800d5e0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	2b0a      	cmp	r3, #10
 800d5e8:	d003      	beq.n	800d5f2 <HAL_DMA2D_ConfigLayer+0x136>
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	2b09      	cmp	r3, #9
 800d5f0:	d106      	bne.n	800d600 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	68da      	ldr	r2, [r3, #12]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d5fe:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2201      	movs	r2, #1
 800d604:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	371c      	adds	r7, #28
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	ff33000f 	.word	0xff33000f

0800d624 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d624:	b480      	push	{r7}
 800d626:	b089      	sub	sp, #36	; 0x24
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d62e:	2300      	movs	r3, #0
 800d630:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d632:	4b89      	ldr	r3, [pc, #548]	; (800d858 <HAL_GPIO_Init+0x234>)
 800d634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d636:	e194      	b.n	800d962 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	2101      	movs	r1, #1
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	fa01 f303 	lsl.w	r3, r1, r3
 800d644:	4013      	ands	r3, r2
 800d646:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	f000 8186 	beq.w	800d95c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	2b01      	cmp	r3, #1
 800d656:	d00b      	beq.n	800d670 <HAL_GPIO_Init+0x4c>
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	2b02      	cmp	r3, #2
 800d65e:	d007      	beq.n	800d670 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d664:	2b11      	cmp	r3, #17
 800d666:	d003      	beq.n	800d670 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	2b12      	cmp	r3, #18
 800d66e:	d130      	bne.n	800d6d2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	689b      	ldr	r3, [r3, #8]
 800d674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	005b      	lsls	r3, r3, #1
 800d67a:	2203      	movs	r2, #3
 800d67c:	fa02 f303 	lsl.w	r3, r2, r3
 800d680:	43db      	mvns	r3, r3
 800d682:	69ba      	ldr	r2, [r7, #24]
 800d684:	4013      	ands	r3, r2
 800d686:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	68da      	ldr	r2, [r3, #12]
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	005b      	lsls	r3, r3, #1
 800d690:	fa02 f303 	lsl.w	r3, r2, r3
 800d694:	69ba      	ldr	r2, [r7, #24]
 800d696:	4313      	orrs	r3, r2
 800d698:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	69ba      	ldr	r2, [r7, #24]
 800d69e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	fa02 f303 	lsl.w	r3, r2, r3
 800d6ae:	43db      	mvns	r3, r3
 800d6b0:	69ba      	ldr	r2, [r7, #24]
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	091b      	lsrs	r3, r3, #4
 800d6bc:	f003 0201 	and.w	r2, r3, #1
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d6c6:	69ba      	ldr	r2, [r7, #24]
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	69ba      	ldr	r2, [r7, #24]
 800d6d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	005b      	lsls	r3, r3, #1
 800d6dc:	2203      	movs	r2, #3
 800d6de:	fa02 f303 	lsl.w	r3, r2, r3
 800d6e2:	43db      	mvns	r3, r3
 800d6e4:	69ba      	ldr	r2, [r7, #24]
 800d6e6:	4013      	ands	r3, r2
 800d6e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	689a      	ldr	r2, [r3, #8]
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	005b      	lsls	r3, r3, #1
 800d6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d6f6:	69ba      	ldr	r2, [r7, #24]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	69ba      	ldr	r2, [r7, #24]
 800d700:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	2b02      	cmp	r3, #2
 800d708:	d003      	beq.n	800d712 <HAL_GPIO_Init+0xee>
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	2b12      	cmp	r3, #18
 800d710:	d123      	bne.n	800d75a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	08da      	lsrs	r2, r3, #3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	3208      	adds	r2, #8
 800d71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d71e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	f003 0307 	and.w	r3, r3, #7
 800d726:	009b      	lsls	r3, r3, #2
 800d728:	220f      	movs	r2, #15
 800d72a:	fa02 f303 	lsl.w	r3, r2, r3
 800d72e:	43db      	mvns	r3, r3
 800d730:	69ba      	ldr	r2, [r7, #24]
 800d732:	4013      	ands	r3, r2
 800d734:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	691a      	ldr	r2, [r3, #16]
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	f003 0307 	and.w	r3, r3, #7
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	fa02 f303 	lsl.w	r3, r2, r3
 800d746:	69ba      	ldr	r2, [r7, #24]
 800d748:	4313      	orrs	r3, r2
 800d74a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	08da      	lsrs	r2, r3, #3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	3208      	adds	r2, #8
 800d754:	69b9      	ldr	r1, [r7, #24]
 800d756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	2203      	movs	r2, #3
 800d766:	fa02 f303 	lsl.w	r3, r2, r3
 800d76a:	43db      	mvns	r3, r3
 800d76c:	69ba      	ldr	r2, [r7, #24]
 800d76e:	4013      	ands	r3, r2
 800d770:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	f003 0203 	and.w	r2, r3, #3
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	005b      	lsls	r3, r3, #1
 800d77e:	fa02 f303 	lsl.w	r3, r2, r3
 800d782:	69ba      	ldr	r2, [r7, #24]
 800d784:	4313      	orrs	r3, r2
 800d786:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	69ba      	ldr	r2, [r7, #24]
 800d78c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d796:	2b00      	cmp	r3, #0
 800d798:	f000 80e0 	beq.w	800d95c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d79c:	4b2f      	ldr	r3, [pc, #188]	; (800d85c <HAL_GPIO_Init+0x238>)
 800d79e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d7a2:	4a2e      	ldr	r2, [pc, #184]	; (800d85c <HAL_GPIO_Init+0x238>)
 800d7a4:	f043 0302 	orr.w	r3, r3, #2
 800d7a8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800d7ac:	4b2b      	ldr	r3, [pc, #172]	; (800d85c <HAL_GPIO_Init+0x238>)
 800d7ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800d7b2:	f003 0302 	and.w	r3, r3, #2
 800d7b6:	60fb      	str	r3, [r7, #12]
 800d7b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d7ba:	4a29      	ldr	r2, [pc, #164]	; (800d860 <HAL_GPIO_Init+0x23c>)
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	089b      	lsrs	r3, r3, #2
 800d7c0:	3302      	adds	r3, #2
 800d7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	f003 0303 	and.w	r3, r3, #3
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	220f      	movs	r2, #15
 800d7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7d6:	43db      	mvns	r3, r3
 800d7d8:	69ba      	ldr	r2, [r7, #24]
 800d7da:	4013      	ands	r3, r2
 800d7dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	4a20      	ldr	r2, [pc, #128]	; (800d864 <HAL_GPIO_Init+0x240>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d052      	beq.n	800d88c <HAL_GPIO_Init+0x268>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4a1f      	ldr	r2, [pc, #124]	; (800d868 <HAL_GPIO_Init+0x244>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d031      	beq.n	800d852 <HAL_GPIO_Init+0x22e>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a1e      	ldr	r2, [pc, #120]	; (800d86c <HAL_GPIO_Init+0x248>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d02b      	beq.n	800d84e <HAL_GPIO_Init+0x22a>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a1d      	ldr	r2, [pc, #116]	; (800d870 <HAL_GPIO_Init+0x24c>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d025      	beq.n	800d84a <HAL_GPIO_Init+0x226>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a1c      	ldr	r2, [pc, #112]	; (800d874 <HAL_GPIO_Init+0x250>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d01f      	beq.n	800d846 <HAL_GPIO_Init+0x222>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a1b      	ldr	r2, [pc, #108]	; (800d878 <HAL_GPIO_Init+0x254>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d019      	beq.n	800d842 <HAL_GPIO_Init+0x21e>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a1a      	ldr	r2, [pc, #104]	; (800d87c <HAL_GPIO_Init+0x258>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d013      	beq.n	800d83e <HAL_GPIO_Init+0x21a>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a19      	ldr	r2, [pc, #100]	; (800d880 <HAL_GPIO_Init+0x25c>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d00d      	beq.n	800d83a <HAL_GPIO_Init+0x216>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a18      	ldr	r2, [pc, #96]	; (800d884 <HAL_GPIO_Init+0x260>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d007      	beq.n	800d836 <HAL_GPIO_Init+0x212>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4a17      	ldr	r2, [pc, #92]	; (800d888 <HAL_GPIO_Init+0x264>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d101      	bne.n	800d832 <HAL_GPIO_Init+0x20e>
 800d82e:	2309      	movs	r3, #9
 800d830:	e02d      	b.n	800d88e <HAL_GPIO_Init+0x26a>
 800d832:	230a      	movs	r3, #10
 800d834:	e02b      	b.n	800d88e <HAL_GPIO_Init+0x26a>
 800d836:	2308      	movs	r3, #8
 800d838:	e029      	b.n	800d88e <HAL_GPIO_Init+0x26a>
 800d83a:	2307      	movs	r3, #7
 800d83c:	e027      	b.n	800d88e <HAL_GPIO_Init+0x26a>
 800d83e:	2306      	movs	r3, #6
 800d840:	e025      	b.n	800d88e <HAL_GPIO_Init+0x26a>
 800d842:	2305      	movs	r3, #5
 800d844:	e023      	b.n	800d88e <HAL_GPIO_Init+0x26a>
 800d846:	2304      	movs	r3, #4
 800d848:	e021      	b.n	800d88e <HAL_GPIO_Init+0x26a>
 800d84a:	2303      	movs	r3, #3
 800d84c:	e01f      	b.n	800d88e <HAL_GPIO_Init+0x26a>
 800d84e:	2302      	movs	r3, #2
 800d850:	e01d      	b.n	800d88e <HAL_GPIO_Init+0x26a>
 800d852:	2301      	movs	r3, #1
 800d854:	e01b      	b.n	800d88e <HAL_GPIO_Init+0x26a>
 800d856:	bf00      	nop
 800d858:	58000080 	.word	0x58000080
 800d85c:	58024400 	.word	0x58024400
 800d860:	58000400 	.word	0x58000400
 800d864:	58020000 	.word	0x58020000
 800d868:	58020400 	.word	0x58020400
 800d86c:	58020800 	.word	0x58020800
 800d870:	58020c00 	.word	0x58020c00
 800d874:	58021000 	.word	0x58021000
 800d878:	58021400 	.word	0x58021400
 800d87c:	58021800 	.word	0x58021800
 800d880:	58021c00 	.word	0x58021c00
 800d884:	58022000 	.word	0x58022000
 800d888:	58022400 	.word	0x58022400
 800d88c:	2300      	movs	r3, #0
 800d88e:	69fa      	ldr	r2, [r7, #28]
 800d890:	f002 0203 	and.w	r2, r2, #3
 800d894:	0092      	lsls	r2, r2, #2
 800d896:	4093      	lsls	r3, r2
 800d898:	69ba      	ldr	r2, [r7, #24]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d89e:	4938      	ldr	r1, [pc, #224]	; (800d980 <HAL_GPIO_Init+0x35c>)
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	089b      	lsrs	r3, r3, #2
 800d8a4:	3302      	adds	r3, #2
 800d8a6:	69ba      	ldr	r2, [r7, #24]
 800d8a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	43db      	mvns	r3, r3
 800d8b6:	69ba      	ldr	r2, [r7, #24]
 800d8b8:	4013      	ands	r3, r2
 800d8ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d003      	beq.n	800d8d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800d8c8:	69ba      	ldr	r2, [r7, #24]
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	69ba      	ldr	r2, [r7, #24]
 800d8d4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	43db      	mvns	r3, r3
 800d8e0:	69ba      	ldr	r2, [r7, #24]
 800d8e2:	4013      	ands	r3, r2
 800d8e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800d8f2:	69ba      	ldr	r2, [r7, #24]
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	69ba      	ldr	r2, [r7, #24]
 800d8fe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	43db      	mvns	r3, r3
 800d90c:	69ba      	ldr	r2, [r7, #24]
 800d90e:	4013      	ands	r3, r2
 800d910:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d003      	beq.n	800d926 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800d91e:	69ba      	ldr	r2, [r7, #24]
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	4313      	orrs	r3, r2
 800d924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800d926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d92a:	69bb      	ldr	r3, [r7, #24]
 800d92c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d92e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	43db      	mvns	r3, r3
 800d93a:	69ba      	ldr	r2, [r7, #24]
 800d93c:	4013      	ands	r3, r2
 800d93e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d003      	beq.n	800d954 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800d94c:	69ba      	ldr	r2, [r7, #24]
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	4313      	orrs	r3, r2
 800d952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800d954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800d95c:	69fb      	ldr	r3, [r7, #28]
 800d95e:	3301      	adds	r3, #1
 800d960:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	69fb      	ldr	r3, [r7, #28]
 800d968:	fa22 f303 	lsr.w	r3, r2, r3
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f47f ae63 	bne.w	800d638 <HAL_GPIO_Init+0x14>
  }
}
 800d972:	bf00      	nop
 800d974:	bf00      	nop
 800d976:	3724      	adds	r7, #36	; 0x24
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr
 800d980:	58000400 	.word	0x58000400

0800d984 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d984:	b480      	push	{r7}
 800d986:	b087      	sub	sp, #28
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d98e:	2300      	movs	r3, #0
 800d990:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d992:	4b75      	ldr	r3, [pc, #468]	; (800db68 <HAL_GPIO_DeInit+0x1e4>)
 800d994:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800d996:	e0d9      	b.n	800db4c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d998:	2201      	movs	r2, #1
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	fa02 f303 	lsl.w	r3, r2, r3
 800d9a0:	683a      	ldr	r2, [r7, #0]
 800d9a2:	4013      	ands	r3, r2
 800d9a4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f000 80cc 	beq.w	800db46 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d9ae:	4a6f      	ldr	r2, [pc, #444]	; (800db6c <HAL_GPIO_DeInit+0x1e8>)
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	089b      	lsrs	r3, r3, #2
 800d9b4:	3302      	adds	r3, #2
 800d9b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9ba:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	f003 0303 	and.w	r3, r3, #3
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	220f      	movs	r2, #15
 800d9c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	4013      	ands	r3, r2
 800d9ce:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4a67      	ldr	r2, [pc, #412]	; (800db70 <HAL_GPIO_DeInit+0x1ec>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d037      	beq.n	800da48 <HAL_GPIO_DeInit+0xc4>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4a66      	ldr	r2, [pc, #408]	; (800db74 <HAL_GPIO_DeInit+0x1f0>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d031      	beq.n	800da44 <HAL_GPIO_DeInit+0xc0>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4a65      	ldr	r2, [pc, #404]	; (800db78 <HAL_GPIO_DeInit+0x1f4>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d02b      	beq.n	800da40 <HAL_GPIO_DeInit+0xbc>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4a64      	ldr	r2, [pc, #400]	; (800db7c <HAL_GPIO_DeInit+0x1f8>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d025      	beq.n	800da3c <HAL_GPIO_DeInit+0xb8>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a63      	ldr	r2, [pc, #396]	; (800db80 <HAL_GPIO_DeInit+0x1fc>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d01f      	beq.n	800da38 <HAL_GPIO_DeInit+0xb4>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4a62      	ldr	r2, [pc, #392]	; (800db84 <HAL_GPIO_DeInit+0x200>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d019      	beq.n	800da34 <HAL_GPIO_DeInit+0xb0>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	4a61      	ldr	r2, [pc, #388]	; (800db88 <HAL_GPIO_DeInit+0x204>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d013      	beq.n	800da30 <HAL_GPIO_DeInit+0xac>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4a60      	ldr	r2, [pc, #384]	; (800db8c <HAL_GPIO_DeInit+0x208>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d00d      	beq.n	800da2c <HAL_GPIO_DeInit+0xa8>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4a5f      	ldr	r2, [pc, #380]	; (800db90 <HAL_GPIO_DeInit+0x20c>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d007      	beq.n	800da28 <HAL_GPIO_DeInit+0xa4>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4a5e      	ldr	r2, [pc, #376]	; (800db94 <HAL_GPIO_DeInit+0x210>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d101      	bne.n	800da24 <HAL_GPIO_DeInit+0xa0>
 800da20:	2309      	movs	r3, #9
 800da22:	e012      	b.n	800da4a <HAL_GPIO_DeInit+0xc6>
 800da24:	230a      	movs	r3, #10
 800da26:	e010      	b.n	800da4a <HAL_GPIO_DeInit+0xc6>
 800da28:	2308      	movs	r3, #8
 800da2a:	e00e      	b.n	800da4a <HAL_GPIO_DeInit+0xc6>
 800da2c:	2307      	movs	r3, #7
 800da2e:	e00c      	b.n	800da4a <HAL_GPIO_DeInit+0xc6>
 800da30:	2306      	movs	r3, #6
 800da32:	e00a      	b.n	800da4a <HAL_GPIO_DeInit+0xc6>
 800da34:	2305      	movs	r3, #5
 800da36:	e008      	b.n	800da4a <HAL_GPIO_DeInit+0xc6>
 800da38:	2304      	movs	r3, #4
 800da3a:	e006      	b.n	800da4a <HAL_GPIO_DeInit+0xc6>
 800da3c:	2303      	movs	r3, #3
 800da3e:	e004      	b.n	800da4a <HAL_GPIO_DeInit+0xc6>
 800da40:	2302      	movs	r3, #2
 800da42:	e002      	b.n	800da4a <HAL_GPIO_DeInit+0xc6>
 800da44:	2301      	movs	r3, #1
 800da46:	e000      	b.n	800da4a <HAL_GPIO_DeInit+0xc6>
 800da48:	2300      	movs	r3, #0
 800da4a:	697a      	ldr	r2, [r7, #20]
 800da4c:	f002 0203 	and.w	r2, r2, #3
 800da50:	0092      	lsls	r2, r2, #2
 800da52:	4093      	lsls	r3, r2
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	429a      	cmp	r2, r3
 800da58:	d136      	bne.n	800dac8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	43db      	mvns	r3, r3
 800da62:	401a      	ands	r2, r3
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	685a      	ldr	r2, [r3, #4]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	43db      	mvns	r3, r3
 800da70:	401a      	ands	r2, r3
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800da76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	43db      	mvns	r3, r3
 800da80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da84:	4013      	ands	r3, r2
 800da86:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800da88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da8c:	685a      	ldr	r2, [r3, #4]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	43db      	mvns	r3, r3
 800da92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800da96:	4013      	ands	r3, r2
 800da98:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	f003 0303 	and.w	r3, r3, #3
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	220f      	movs	r2, #15
 800daa4:	fa02 f303 	lsl.w	r3, r2, r3
 800daa8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800daaa:	4a30      	ldr	r2, [pc, #192]	; (800db6c <HAL_GPIO_DeInit+0x1e8>)
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	089b      	lsrs	r3, r3, #2
 800dab0:	3302      	adds	r3, #2
 800dab2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	43da      	mvns	r2, r3
 800daba:	482c      	ldr	r0, [pc, #176]	; (800db6c <HAL_GPIO_DeInit+0x1e8>)
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	089b      	lsrs	r3, r3, #2
 800dac0:	400a      	ands	r2, r1
 800dac2:	3302      	adds	r3, #2
 800dac4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	005b      	lsls	r3, r3, #1
 800dad0:	2103      	movs	r1, #3
 800dad2:	fa01 f303 	lsl.w	r3, r1, r3
 800dad6:	431a      	orrs	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	08da      	lsrs	r2, r3, #3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	3208      	adds	r2, #8
 800dae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	f003 0307 	and.w	r3, r3, #7
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	220f      	movs	r2, #15
 800daf2:	fa02 f303 	lsl.w	r3, r2, r3
 800daf6:	43db      	mvns	r3, r3
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	08d2      	lsrs	r2, r2, #3
 800dafc:	4019      	ands	r1, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	3208      	adds	r2, #8
 800db02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	68da      	ldr	r2, [r3, #12]
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	005b      	lsls	r3, r3, #1
 800db0e:	2103      	movs	r1, #3
 800db10:	fa01 f303 	lsl.w	r3, r1, r3
 800db14:	43db      	mvns	r3, r3
 800db16:	401a      	ands	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685a      	ldr	r2, [r3, #4]
 800db20:	2101      	movs	r1, #1
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	fa01 f303 	lsl.w	r3, r1, r3
 800db28:	43db      	mvns	r3, r3
 800db2a:	401a      	ands	r2, r3
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	689a      	ldr	r2, [r3, #8]
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	005b      	lsls	r3, r3, #1
 800db38:	2103      	movs	r1, #3
 800db3a:	fa01 f303 	lsl.w	r3, r1, r3
 800db3e:	43db      	mvns	r3, r3
 800db40:	401a      	ands	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	609a      	str	r2, [r3, #8]
    }

    position++;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	3301      	adds	r3, #1
 800db4a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800db4c:	683a      	ldr	r2, [r7, #0]
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	fa22 f303 	lsr.w	r3, r2, r3
 800db54:	2b00      	cmp	r3, #0
 800db56:	f47f af1f 	bne.w	800d998 <HAL_GPIO_DeInit+0x14>
  }
}
 800db5a:	bf00      	nop
 800db5c:	bf00      	nop
 800db5e:	371c      	adds	r7, #28
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr
 800db68:	58000080 	.word	0x58000080
 800db6c:	58000400 	.word	0x58000400
 800db70:	58020000 	.word	0x58020000
 800db74:	58020400 	.word	0x58020400
 800db78:	58020800 	.word	0x58020800
 800db7c:	58020c00 	.word	0x58020c00
 800db80:	58021000 	.word	0x58021000
 800db84:	58021400 	.word	0x58021400
 800db88:	58021800 	.word	0x58021800
 800db8c:	58021c00 	.word	0x58021c00
 800db90:	58022000 	.word	0x58022000
 800db94:	58022400 	.word	0x58022400

0800db98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800db98:	b480      	push	{r7}
 800db9a:	b083      	sub	sp, #12
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	460b      	mov	r3, r1
 800dba2:	807b      	strh	r3, [r7, #2]
 800dba4:	4613      	mov	r3, r2
 800dba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800dba8:	787b      	ldrb	r3, [r7, #1]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d003      	beq.n	800dbb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800dbae:	887a      	ldrh	r2, [r7, #2]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800dbb4:	e003      	b.n	800dbbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800dbb6:	887b      	ldrh	r3, [r7, #2]
 800dbb8:	041a      	lsls	r2, r3, #16
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	619a      	str	r2, [r3, #24]
}
 800dbbe:	bf00      	nop
 800dbc0:	370c      	adds	r7, #12
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr

0800dbca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dbca:	b480      	push	{r7}
 800dbcc:	b085      	sub	sp, #20
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	695b      	ldr	r3, [r3, #20]
 800dbda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800dbdc:	887a      	ldrh	r2, [r7, #2]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	4013      	ands	r3, r2
 800dbe2:	041a      	lsls	r2, r3, #16
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	43d9      	mvns	r1, r3
 800dbe8:	887b      	ldrh	r3, [r7, #2]
 800dbea:	400b      	ands	r3, r1
 800dbec:	431a      	orrs	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	619a      	str	r2, [r3, #24]
}
 800dbf2:	bf00      	nop
 800dbf4:	3714      	adds	r7, #20
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b082      	sub	sp, #8
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	4603      	mov	r3, r0
 800dc06:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800dc08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800dc10:	88fb      	ldrh	r3, [r7, #6]
 800dc12:	4013      	ands	r3, r2
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d008      	beq.n	800dc2a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800dc18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dc1c:	88fb      	ldrh	r3, [r7, #6]
 800dc1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800dc22:	88fb      	ldrh	r3, [r7, #6]
 800dc24:	4618      	mov	r0, r3
 800dc26:	f000 f804 	bl	800dc32 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800dc2a:	bf00      	nop
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800dc32:	b480      	push	{r7}
 800dc34:	b083      	sub	sp, #12
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	4603      	mov	r3, r0
 800dc3a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800dc3c:	bf00      	nop
 800dc3e:	370c      	adds	r7, #12
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d101      	bne.n	800dc5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800dc56:	2301      	movs	r3, #1
 800dc58:	e07f      	b.n	800dd5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d106      	bne.n	800dc74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7f5 fdbc 	bl	80037ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2224      	movs	r2, #36	; 0x24
 800dc78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f022 0201 	bic.w	r2, r2, #1
 800dc8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	685a      	ldr	r2, [r3, #4]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800dc98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	689a      	ldr	r2, [r3, #8]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dca8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d107      	bne.n	800dcc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	689a      	ldr	r2, [r3, #8]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dcbe:	609a      	str	r2, [r3, #8]
 800dcc0:	e006      	b.n	800dcd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	689a      	ldr	r2, [r3, #8]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800dcce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	2b02      	cmp	r3, #2
 800dcd6:	d104      	bne.n	800dce2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dce0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	6859      	ldr	r1, [r3, #4]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	4b1d      	ldr	r3, [pc, #116]	; (800dd64 <HAL_I2C_Init+0x11c>)
 800dcee:	430b      	orrs	r3, r1
 800dcf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	68da      	ldr	r2, [r3, #12]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dd00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	691a      	ldr	r2, [r3, #16]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	695b      	ldr	r3, [r3, #20]
 800dd0a:	ea42 0103 	orr.w	r1, r2, r3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	699b      	ldr	r3, [r3, #24]
 800dd12:	021a      	lsls	r2, r3, #8
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	430a      	orrs	r2, r1
 800dd1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	69d9      	ldr	r1, [r3, #28]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6a1a      	ldr	r2, [r3, #32]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	430a      	orrs	r2, r1
 800dd2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f042 0201 	orr.w	r2, r2, #1
 800dd3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2220      	movs	r2, #32
 800dd46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2200      	movs	r2, #0
 800dd54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800dd58:	2300      	movs	r3, #0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3708      	adds	r7, #8
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	02008000 	.word	0x02008000

0800dd68 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d101      	bne.n	800dd7a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800dd76:	2301      	movs	r3, #1
 800dd78:	e021      	b.n	800ddbe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2224      	movs	r2, #36	; 0x24
 800dd7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f022 0201 	bic.w	r2, r2, #1
 800dd90:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f7f5 fd90 	bl	80038b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2200      	movs	r2, #0
 800dda2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ddbc:	2300      	movs	r3, #0
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
	...

0800ddc8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b088      	sub	sp, #32
 800ddcc:	af02      	add	r7, sp, #8
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	4608      	mov	r0, r1
 800ddd2:	4611      	mov	r1, r2
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	817b      	strh	r3, [r7, #10]
 800ddda:	460b      	mov	r3, r1
 800dddc:	813b      	strh	r3, [r7, #8]
 800ddde:	4613      	mov	r3, r2
 800dde0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	2b20      	cmp	r3, #32
 800ddec:	f040 80f9 	bne.w	800dfe2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddf0:	6a3b      	ldr	r3, [r7, #32]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d002      	beq.n	800ddfc <HAL_I2C_Mem_Write+0x34>
 800ddf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d105      	bne.n	800de08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800de04:	2301      	movs	r3, #1
 800de06:	e0ed      	b.n	800dfe4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d101      	bne.n	800de16 <HAL_I2C_Mem_Write+0x4e>
 800de12:	2302      	movs	r3, #2
 800de14:	e0e6      	b.n	800dfe4 <HAL_I2C_Mem_Write+0x21c>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2201      	movs	r2, #1
 800de1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800de1e:	f7fd fb55 	bl	800b4cc <HAL_GetTick>
 800de22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	9300      	str	r3, [sp, #0]
 800de28:	2319      	movs	r3, #25
 800de2a:	2201      	movs	r2, #1
 800de2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f000 fadd 	bl	800e3f0 <I2C_WaitOnFlagUntilTimeout>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d001      	beq.n	800de40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800de3c:	2301      	movs	r3, #1
 800de3e:	e0d1      	b.n	800dfe4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2221      	movs	r2, #33	; 0x21
 800de44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2240      	movs	r2, #64	; 0x40
 800de4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2200      	movs	r2, #0
 800de54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	6a3a      	ldr	r2, [r7, #32]
 800de5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800de60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2200      	movs	r2, #0
 800de66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800de68:	88f8      	ldrh	r0, [r7, #6]
 800de6a:	893a      	ldrh	r2, [r7, #8]
 800de6c:	8979      	ldrh	r1, [r7, #10]
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	9301      	str	r3, [sp, #4]
 800de72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	4603      	mov	r3, r0
 800de78:	68f8      	ldr	r0, [r7, #12]
 800de7a:	f000 f9ed 	bl	800e258 <I2C_RequestMemoryWrite>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	d005      	beq.n	800de90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2200      	movs	r2, #0
 800de88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800de8c:	2301      	movs	r3, #1
 800de8e:	e0a9      	b.n	800dfe4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de94:	b29b      	uxth	r3, r3
 800de96:	2bff      	cmp	r3, #255	; 0xff
 800de98:	d90e      	bls.n	800deb8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	22ff      	movs	r2, #255	; 0xff
 800de9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dea4:	b2da      	uxtb	r2, r3
 800dea6:	8979      	ldrh	r1, [r7, #10]
 800dea8:	2300      	movs	r3, #0
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f000 fbbf 	bl	800e634 <I2C_TransferConfig>
 800deb6:	e00f      	b.n	800ded8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800debc:	b29a      	uxth	r2, r3
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dec6:	b2da      	uxtb	r2, r3
 800dec8:	8979      	ldrh	r1, [r7, #10]
 800deca:	2300      	movs	r3, #0
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	f000 fbae 	bl	800e634 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ded8:	697a      	ldr	r2, [r7, #20]
 800deda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dedc:	68f8      	ldr	r0, [r7, #12]
 800dede:	f000 fac7 	bl	800e470 <I2C_WaitOnTXISFlagUntilTimeout>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d001      	beq.n	800deec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800dee8:	2301      	movs	r3, #1
 800deea:	e07b      	b.n	800dfe4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def0:	781a      	ldrb	r2, [r3, #0]
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800defc:	1c5a      	adds	r2, r3, #1
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df06:	b29b      	uxth	r3, r3
 800df08:	3b01      	subs	r3, #1
 800df0a:	b29a      	uxth	r2, r3
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df14:	3b01      	subs	r3, #1
 800df16:	b29a      	uxth	r2, r3
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df20:	b29b      	uxth	r3, r3
 800df22:	2b00      	cmp	r3, #0
 800df24:	d034      	beq.n	800df90 <HAL_I2C_Mem_Write+0x1c8>
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d130      	bne.n	800df90 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df34:	2200      	movs	r2, #0
 800df36:	2180      	movs	r1, #128	; 0x80
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f000 fa59 	bl	800e3f0 <I2C_WaitOnFlagUntilTimeout>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d001      	beq.n	800df48 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800df44:	2301      	movs	r3, #1
 800df46:	e04d      	b.n	800dfe4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	2bff      	cmp	r3, #255	; 0xff
 800df50:	d90e      	bls.n	800df70 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	22ff      	movs	r2, #255	; 0xff
 800df56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df5c:	b2da      	uxtb	r2, r3
 800df5e:	8979      	ldrh	r1, [r7, #10]
 800df60:	2300      	movs	r3, #0
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800df68:	68f8      	ldr	r0, [r7, #12]
 800df6a:	f000 fb63 	bl	800e634 <I2C_TransferConfig>
 800df6e:	e00f      	b.n	800df90 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df74:	b29a      	uxth	r2, r3
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	8979      	ldrh	r1, [r7, #10]
 800df82:	2300      	movs	r3, #0
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800df8a:	68f8      	ldr	r0, [r7, #12]
 800df8c:	f000 fb52 	bl	800e634 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df94:	b29b      	uxth	r3, r3
 800df96:	2b00      	cmp	r3, #0
 800df98:	d19e      	bne.n	800ded8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800df9a:	697a      	ldr	r2, [r7, #20]
 800df9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df9e:	68f8      	ldr	r0, [r7, #12]
 800dfa0:	f000 faa6 	bl	800e4f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	e01a      	b.n	800dfe4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2220      	movs	r2, #32
 800dfb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	6859      	ldr	r1, [r3, #4]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	4b0a      	ldr	r3, [pc, #40]	; (800dfec <HAL_I2C_Mem_Write+0x224>)
 800dfc2:	400b      	ands	r3, r1
 800dfc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2220      	movs	r2, #32
 800dfca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	e000      	b.n	800dfe4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800dfe2:	2302      	movs	r3, #2
  }
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3718      	adds	r7, #24
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	fe00e800 	.word	0xfe00e800

0800dff0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b088      	sub	sp, #32
 800dff4:	af02      	add	r7, sp, #8
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	4608      	mov	r0, r1
 800dffa:	4611      	mov	r1, r2
 800dffc:	461a      	mov	r2, r3
 800dffe:	4603      	mov	r3, r0
 800e000:	817b      	strh	r3, [r7, #10]
 800e002:	460b      	mov	r3, r1
 800e004:	813b      	strh	r3, [r7, #8]
 800e006:	4613      	mov	r3, r2
 800e008:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b20      	cmp	r3, #32
 800e014:	f040 80fd 	bne.w	800e212 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e018:	6a3b      	ldr	r3, [r7, #32]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d002      	beq.n	800e024 <HAL_I2C_Mem_Read+0x34>
 800e01e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e020:	2b00      	cmp	r3, #0
 800e022:	d105      	bne.n	800e030 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e02a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e02c:	2301      	movs	r3, #1
 800e02e:	e0f1      	b.n	800e214 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e036:	2b01      	cmp	r3, #1
 800e038:	d101      	bne.n	800e03e <HAL_I2C_Mem_Read+0x4e>
 800e03a:	2302      	movs	r3, #2
 800e03c:	e0ea      	b.n	800e214 <HAL_I2C_Mem_Read+0x224>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2201      	movs	r2, #1
 800e042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e046:	f7fd fa41 	bl	800b4cc <HAL_GetTick>
 800e04a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	2319      	movs	r3, #25
 800e052:	2201      	movs	r2, #1
 800e054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f000 f9c9 	bl	800e3f0 <I2C_WaitOnFlagUntilTimeout>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d001      	beq.n	800e068 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e064:	2301      	movs	r3, #1
 800e066:	e0d5      	b.n	800e214 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2222      	movs	r2, #34	; 0x22
 800e06c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2240      	movs	r2, #64	; 0x40
 800e074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2200      	movs	r2, #0
 800e07c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6a3a      	ldr	r2, [r7, #32]
 800e082:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e088:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2200      	movs	r2, #0
 800e08e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e090:	88f8      	ldrh	r0, [r7, #6]
 800e092:	893a      	ldrh	r2, [r7, #8]
 800e094:	8979      	ldrh	r1, [r7, #10]
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	9301      	str	r3, [sp, #4]
 800e09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09c:	9300      	str	r3, [sp, #0]
 800e09e:	4603      	mov	r3, r0
 800e0a0:	68f8      	ldr	r0, [r7, #12]
 800e0a2:	f000 f92d 	bl	800e300 <I2C_RequestMemoryRead>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d005      	beq.n	800e0b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e0ad      	b.n	800e214 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	2bff      	cmp	r3, #255	; 0xff
 800e0c0:	d90e      	bls.n	800e0e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	22ff      	movs	r2, #255	; 0xff
 800e0c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0cc:	b2da      	uxtb	r2, r3
 800e0ce:	8979      	ldrh	r1, [r7, #10]
 800e0d0:	4b52      	ldr	r3, [pc, #328]	; (800e21c <HAL_I2C_Mem_Read+0x22c>)
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e0d8:	68f8      	ldr	r0, [r7, #12]
 800e0da:	f000 faab 	bl	800e634 <I2C_TransferConfig>
 800e0de:	e00f      	b.n	800e100 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	8979      	ldrh	r1, [r7, #10]
 800e0f2:	4b4a      	ldr	r3, [pc, #296]	; (800e21c <HAL_I2C_Mem_Read+0x22c>)
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f000 fa9a 	bl	800e634 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	9300      	str	r3, [sp, #0]
 800e104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e106:	2200      	movs	r2, #0
 800e108:	2104      	movs	r1, #4
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f000 f970 	bl	800e3f0 <I2C_WaitOnFlagUntilTimeout>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	d001      	beq.n	800e11a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	e07c      	b.n	800e214 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e124:	b2d2      	uxtb	r2, r2
 800e126:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e12c:	1c5a      	adds	r2, r3, #1
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e136:	3b01      	subs	r3, #1
 800e138:	b29a      	uxth	r2, r3
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e142:	b29b      	uxth	r3, r3
 800e144:	3b01      	subs	r3, #1
 800e146:	b29a      	uxth	r2, r3
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e150:	b29b      	uxth	r3, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	d034      	beq.n	800e1c0 <HAL_I2C_Mem_Read+0x1d0>
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d130      	bne.n	800e1c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e164:	2200      	movs	r2, #0
 800e166:	2180      	movs	r1, #128	; 0x80
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f000 f941 	bl	800e3f0 <I2C_WaitOnFlagUntilTimeout>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d001      	beq.n	800e178 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e174:	2301      	movs	r3, #1
 800e176:	e04d      	b.n	800e214 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	2bff      	cmp	r3, #255	; 0xff
 800e180:	d90e      	bls.n	800e1a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	22ff      	movs	r2, #255	; 0xff
 800e186:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e18c:	b2da      	uxtb	r2, r3
 800e18e:	8979      	ldrh	r1, [r7, #10]
 800e190:	2300      	movs	r3, #0
 800e192:	9300      	str	r3, [sp, #0]
 800e194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e198:	68f8      	ldr	r0, [r7, #12]
 800e19a:	f000 fa4b 	bl	800e634 <I2C_TransferConfig>
 800e19e:	e00f      	b.n	800e1c0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1ae:	b2da      	uxtb	r2, r3
 800e1b0:	8979      	ldrh	r1, [r7, #10]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	f000 fa3a 	bl	800e634 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d19a      	bne.n	800e100 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e1ca:	697a      	ldr	r2, [r7, #20]
 800e1cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f000 f98e 	bl	800e4f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d001      	beq.n	800e1de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e01a      	b.n	800e214 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2220      	movs	r2, #32
 800e1e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	6859      	ldr	r1, [r3, #4]
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	4b0b      	ldr	r3, [pc, #44]	; (800e220 <HAL_I2C_Mem_Read+0x230>)
 800e1f2:	400b      	ands	r3, r1
 800e1f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2220      	movs	r2, #32
 800e1fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	2200      	movs	r2, #0
 800e202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2200      	movs	r2, #0
 800e20a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e20e:	2300      	movs	r3, #0
 800e210:	e000      	b.n	800e214 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e212:	2302      	movs	r3, #2
  }
}
 800e214:	4618      	mov	r0, r3
 800e216:	3718      	adds	r7, #24
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	80002400 	.word	0x80002400
 800e220:	fe00e800 	.word	0xfe00e800

0800e224 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e232:	b2db      	uxtb	r3, r3
}
 800e234:	4618      	mov	r0, r3
 800e236:	370c      	adds	r7, #12
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e240:	b480      	push	{r7}
 800e242:	b083      	sub	sp, #12
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	370c      	adds	r7, #12
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af02      	add	r7, sp, #8
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	4608      	mov	r0, r1
 800e262:	4611      	mov	r1, r2
 800e264:	461a      	mov	r2, r3
 800e266:	4603      	mov	r3, r0
 800e268:	817b      	strh	r3, [r7, #10]
 800e26a:	460b      	mov	r3, r1
 800e26c:	813b      	strh	r3, [r7, #8]
 800e26e:	4613      	mov	r3, r2
 800e270:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e272:	88fb      	ldrh	r3, [r7, #6]
 800e274:	b2da      	uxtb	r2, r3
 800e276:	8979      	ldrh	r1, [r7, #10]
 800e278:	4b20      	ldr	r3, [pc, #128]	; (800e2fc <I2C_RequestMemoryWrite+0xa4>)
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f000 f9d7 	bl	800e634 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e286:	69fa      	ldr	r2, [r7, #28]
 800e288:	69b9      	ldr	r1, [r7, #24]
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f000 f8f0 	bl	800e470 <I2C_WaitOnTXISFlagUntilTimeout>
 800e290:	4603      	mov	r3, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e296:	2301      	movs	r3, #1
 800e298:	e02c      	b.n	800e2f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e29a:	88fb      	ldrh	r3, [r7, #6]
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d105      	bne.n	800e2ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e2a0:	893b      	ldrh	r3, [r7, #8]
 800e2a2:	b2da      	uxtb	r2, r3
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	629a      	str	r2, [r3, #40]	; 0x28
 800e2aa:	e015      	b.n	800e2d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e2ac:	893b      	ldrh	r3, [r7, #8]
 800e2ae:	0a1b      	lsrs	r3, r3, #8
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	b2da      	uxtb	r2, r3
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e2ba:	69fa      	ldr	r2, [r7, #28]
 800e2bc:	69b9      	ldr	r1, [r7, #24]
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f000 f8d6 	bl	800e470 <I2C_WaitOnTXISFlagUntilTimeout>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d001      	beq.n	800e2ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	e012      	b.n	800e2f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e2ce:	893b      	ldrh	r3, [r7, #8]
 800e2d0:	b2da      	uxtb	r2, r3
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	2180      	movs	r1, #128	; 0x80
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f000 f884 	bl	800e3f0 <I2C_WaitOnFlagUntilTimeout>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d001      	beq.n	800e2f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e000      	b.n	800e2f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e2f2:	2300      	movs	r3, #0
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	80002000 	.word	0x80002000

0800e300 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b086      	sub	sp, #24
 800e304:	af02      	add	r7, sp, #8
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	4608      	mov	r0, r1
 800e30a:	4611      	mov	r1, r2
 800e30c:	461a      	mov	r2, r3
 800e30e:	4603      	mov	r3, r0
 800e310:	817b      	strh	r3, [r7, #10]
 800e312:	460b      	mov	r3, r1
 800e314:	813b      	strh	r3, [r7, #8]
 800e316:	4613      	mov	r3, r2
 800e318:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e31a:	88fb      	ldrh	r3, [r7, #6]
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	8979      	ldrh	r1, [r7, #10]
 800e320:	4b20      	ldr	r3, [pc, #128]	; (800e3a4 <I2C_RequestMemoryRead+0xa4>)
 800e322:	9300      	str	r3, [sp, #0]
 800e324:	2300      	movs	r3, #0
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	f000 f984 	bl	800e634 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e32c:	69fa      	ldr	r2, [r7, #28]
 800e32e:	69b9      	ldr	r1, [r7, #24]
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f000 f89d 	bl	800e470 <I2C_WaitOnTXISFlagUntilTimeout>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d001      	beq.n	800e340 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e33c:	2301      	movs	r3, #1
 800e33e:	e02c      	b.n	800e39a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e340:	88fb      	ldrh	r3, [r7, #6]
 800e342:	2b01      	cmp	r3, #1
 800e344:	d105      	bne.n	800e352 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e346:	893b      	ldrh	r3, [r7, #8]
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	629a      	str	r2, [r3, #40]	; 0x28
 800e350:	e015      	b.n	800e37e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e352:	893b      	ldrh	r3, [r7, #8]
 800e354:	0a1b      	lsrs	r3, r3, #8
 800e356:	b29b      	uxth	r3, r3
 800e358:	b2da      	uxtb	r2, r3
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e360:	69fa      	ldr	r2, [r7, #28]
 800e362:	69b9      	ldr	r1, [r7, #24]
 800e364:	68f8      	ldr	r0, [r7, #12]
 800e366:	f000 f883 	bl	800e470 <I2C_WaitOnTXISFlagUntilTimeout>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d001      	beq.n	800e374 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e370:	2301      	movs	r3, #1
 800e372:	e012      	b.n	800e39a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e374:	893b      	ldrh	r3, [r7, #8]
 800e376:	b2da      	uxtb	r2, r3
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e37e:	69fb      	ldr	r3, [r7, #28]
 800e380:	9300      	str	r3, [sp, #0]
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	2200      	movs	r2, #0
 800e386:	2140      	movs	r1, #64	; 0x40
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f000 f831 	bl	800e3f0 <I2C_WaitOnFlagUntilTimeout>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e394:	2301      	movs	r3, #1
 800e396:	e000      	b.n	800e39a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	80002000 	.word	0x80002000

0800e3a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	699b      	ldr	r3, [r3, #24]
 800e3b6:	f003 0302 	and.w	r3, r3, #2
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d103      	bne.n	800e3c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	699b      	ldr	r3, [r3, #24]
 800e3cc:	f003 0301 	and.w	r3, r3, #1
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d007      	beq.n	800e3e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	699a      	ldr	r2, [r3, #24]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f042 0201 	orr.w	r2, r2, #1
 800e3e2:	619a      	str	r2, [r3, #24]
  }
}
 800e3e4:	bf00      	nop
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60f8      	str	r0, [r7, #12]
 800e3f8:	60b9      	str	r1, [r7, #8]
 800e3fa:	603b      	str	r3, [r7, #0]
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e400:	e022      	b.n	800e448 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e408:	d01e      	beq.n	800e448 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e40a:	f7fd f85f 	bl	800b4cc <HAL_GetTick>
 800e40e:	4602      	mov	r2, r0
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	683a      	ldr	r2, [r7, #0]
 800e416:	429a      	cmp	r2, r3
 800e418:	d302      	bcc.n	800e420 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d113      	bne.n	800e448 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e424:	f043 0220 	orr.w	r2, r3, #32
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2220      	movs	r2, #32
 800e430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2200      	movs	r2, #0
 800e438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800e444:	2301      	movs	r3, #1
 800e446:	e00f      	b.n	800e468 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	699a      	ldr	r2, [r3, #24]
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	4013      	ands	r3, r2
 800e452:	68ba      	ldr	r2, [r7, #8]
 800e454:	429a      	cmp	r2, r3
 800e456:	bf0c      	ite	eq
 800e458:	2301      	moveq	r3, #1
 800e45a:	2300      	movne	r3, #0
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	461a      	mov	r2, r3
 800e460:	79fb      	ldrb	r3, [r7, #7]
 800e462:	429a      	cmp	r2, r3
 800e464:	d0cd      	beq.n	800e402 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e466:	2300      	movs	r3, #0
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e47c:	e02c      	b.n	800e4d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	68b9      	ldr	r1, [r7, #8]
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	f000 f870 	bl	800e568 <I2C_IsAcknowledgeFailed>
 800e488:	4603      	mov	r3, r0
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d001      	beq.n	800e492 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e48e:	2301      	movs	r3, #1
 800e490:	e02a      	b.n	800e4e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e498:	d01e      	beq.n	800e4d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e49a:	f7fd f817 	bl	800b4cc <HAL_GetTick>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	1ad3      	subs	r3, r2, r3
 800e4a4:	68ba      	ldr	r2, [r7, #8]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d302      	bcc.n	800e4b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d113      	bne.n	800e4d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b4:	f043 0220 	orr.w	r2, r3, #32
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2220      	movs	r2, #32
 800e4c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e007      	b.n	800e4e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	699b      	ldr	r3, [r3, #24]
 800e4de:	f003 0302 	and.w	r3, r3, #2
 800e4e2:	2b02      	cmp	r3, #2
 800e4e4:	d1cb      	bne.n	800e47e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3710      	adds	r7, #16
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e4fc:	e028      	b.n	800e550 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	68b9      	ldr	r1, [r7, #8]
 800e502:	68f8      	ldr	r0, [r7, #12]
 800e504:	f000 f830 	bl	800e568 <I2C_IsAcknowledgeFailed>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d001      	beq.n	800e512 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e50e:	2301      	movs	r3, #1
 800e510:	e026      	b.n	800e560 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e512:	f7fc ffdb 	bl	800b4cc <HAL_GetTick>
 800e516:	4602      	mov	r2, r0
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	1ad3      	subs	r3, r2, r3
 800e51c:	68ba      	ldr	r2, [r7, #8]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d302      	bcc.n	800e528 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d113      	bne.n	800e550 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e52c:	f043 0220 	orr.w	r2, r3, #32
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2220      	movs	r2, #32
 800e538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2200      	movs	r2, #0
 800e540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2200      	movs	r2, #0
 800e548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e54c:	2301      	movs	r3, #1
 800e54e:	e007      	b.n	800e560 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	699b      	ldr	r3, [r3, #24]
 800e556:	f003 0320 	and.w	r3, r3, #32
 800e55a:	2b20      	cmp	r3, #32
 800e55c:	d1cf      	bne.n	800e4fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e55e:	2300      	movs	r3, #0
}
 800e560:	4618      	mov	r0, r3
 800e562:	3710      	adds	r7, #16
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	60b9      	str	r1, [r7, #8]
 800e572:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	699b      	ldr	r3, [r3, #24]
 800e57a:	f003 0310 	and.w	r3, r3, #16
 800e57e:	2b10      	cmp	r3, #16
 800e580:	d151      	bne.n	800e626 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e582:	e022      	b.n	800e5ca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e58a:	d01e      	beq.n	800e5ca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e58c:	f7fc ff9e 	bl	800b4cc <HAL_GetTick>
 800e590:	4602      	mov	r2, r0
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	1ad3      	subs	r3, r2, r3
 800e596:	68ba      	ldr	r2, [r7, #8]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d302      	bcc.n	800e5a2 <I2C_IsAcknowledgeFailed+0x3a>
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d113      	bne.n	800e5ca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5a6:	f043 0220 	orr.w	r2, r3, #32
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2220      	movs	r2, #32
 800e5b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e02e      	b.n	800e628 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	699b      	ldr	r3, [r3, #24]
 800e5d0:	f003 0320 	and.w	r3, r3, #32
 800e5d4:	2b20      	cmp	r3, #32
 800e5d6:	d1d5      	bne.n	800e584 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2210      	movs	r2, #16
 800e5de:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2220      	movs	r2, #32
 800e5e6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e5e8:	68f8      	ldr	r0, [r7, #12]
 800e5ea:	f7ff fedd 	bl	800e3a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	6859      	ldr	r1, [r3, #4]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	4b0d      	ldr	r3, [pc, #52]	; (800e630 <I2C_IsAcknowledgeFailed+0xc8>)
 800e5fa:	400b      	ands	r3, r1
 800e5fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e602:	f043 0204 	orr.w	r2, r3, #4
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2220      	movs	r2, #32
 800e60e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2200      	movs	r2, #0
 800e616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800e622:	2301      	movs	r3, #1
 800e624:	e000      	b.n	800e628 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800e626:	2300      	movs	r3, #0
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3710      	adds	r7, #16
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	fe00e800 	.word	0xfe00e800

0800e634 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e634:	b480      	push	{r7}
 800e636:	b085      	sub	sp, #20
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	607b      	str	r3, [r7, #4]
 800e63e:	460b      	mov	r3, r1
 800e640:	817b      	strh	r3, [r7, #10]
 800e642:	4613      	mov	r3, r2
 800e644:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	685a      	ldr	r2, [r3, #4]
 800e64c:	69bb      	ldr	r3, [r7, #24]
 800e64e:	0d5b      	lsrs	r3, r3, #21
 800e650:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e654:	4b0d      	ldr	r3, [pc, #52]	; (800e68c <I2C_TransferConfig+0x58>)
 800e656:	430b      	orrs	r3, r1
 800e658:	43db      	mvns	r3, r3
 800e65a:	ea02 0103 	and.w	r1, r2, r3
 800e65e:	897b      	ldrh	r3, [r7, #10]
 800e660:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e664:	7a7b      	ldrb	r3, [r7, #9]
 800e666:	041b      	lsls	r3, r3, #16
 800e668:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e66c:	431a      	orrs	r2, r3
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	431a      	orrs	r2, r3
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	431a      	orrs	r2, r3
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	430a      	orrs	r2, r1
 800e67c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800e67e:	bf00      	nop
 800e680:	3714      	adds	r7, #20
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr
 800e68a:	bf00      	nop
 800e68c:	03ff63ff 	.word	0x03ff63ff

0800e690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e690:	b480      	push	{r7}
 800e692:	b083      	sub	sp, #12
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	2b20      	cmp	r3, #32
 800e6a4:	d138      	bne.n	800e718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d101      	bne.n	800e6b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e6b0:	2302      	movs	r3, #2
 800e6b2:	e032      	b.n	800e71a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2224      	movs	r2, #36	; 0x24
 800e6c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f022 0201 	bic.w	r2, r2, #1
 800e6d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	681a      	ldr	r2, [r3, #0]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e6e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	6819      	ldr	r1, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	683a      	ldr	r2, [r7, #0]
 800e6f0:	430a      	orrs	r2, r1
 800e6f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f042 0201 	orr.w	r2, r2, #1
 800e702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2220      	movs	r2, #32
 800e708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2200      	movs	r2, #0
 800e710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e714:	2300      	movs	r3, #0
 800e716:	e000      	b.n	800e71a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e718:	2302      	movs	r3, #2
  }
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	370c      	adds	r7, #12
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr

0800e726 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e726:	b480      	push	{r7}
 800e728:	b085      	sub	sp, #20
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
 800e72e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e736:	b2db      	uxtb	r3, r3
 800e738:	2b20      	cmp	r3, #32
 800e73a:	d139      	bne.n	800e7b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e742:	2b01      	cmp	r3, #1
 800e744:	d101      	bne.n	800e74a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e746:	2302      	movs	r3, #2
 800e748:	e033      	b.n	800e7b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2201      	movs	r2, #1
 800e74e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2224      	movs	r2, #36	; 0x24
 800e756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f022 0201 	bic.w	r2, r2, #1
 800e768:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e778:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	021b      	lsls	r3, r3, #8
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	4313      	orrs	r3, r2
 800e782:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	68fa      	ldr	r2, [r7, #12]
 800e78a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f042 0201 	orr.w	r2, r2, #1
 800e79a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2220      	movs	r2, #32
 800e7a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	e000      	b.n	800e7b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e7b0:	2302      	movs	r3, #2
  }
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3714      	adds	r7, #20
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
	...

0800e7c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d101      	bne.n	800e7d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	e0bf      	b.n	800e952 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d106      	bne.n	800e7ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f7f5 f88c 	bl	8003904 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2202      	movs	r2, #2
 800e7f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	699a      	ldr	r2, [r3, #24]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800e802:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	6999      	ldr	r1, [r3, #24]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	685a      	ldr	r2, [r3, #4]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e818:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	691b      	ldr	r3, [r3, #16]
 800e81e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	430a      	orrs	r2, r1
 800e826:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6899      	ldr	r1, [r3, #8]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	4b4a      	ldr	r3, [pc, #296]	; (800e95c <HAL_LTDC_Init+0x19c>)
 800e834:	400b      	ands	r3, r1
 800e836:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	695b      	ldr	r3, [r3, #20]
 800e83c:	041b      	lsls	r3, r3, #16
 800e83e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	6899      	ldr	r1, [r3, #8]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	699a      	ldr	r2, [r3, #24]
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	431a      	orrs	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	430a      	orrs	r2, r1
 800e854:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	68d9      	ldr	r1, [r3, #12]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	4b3e      	ldr	r3, [pc, #248]	; (800e95c <HAL_LTDC_Init+0x19c>)
 800e862:	400b      	ands	r3, r1
 800e864:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	69db      	ldr	r3, [r3, #28]
 800e86a:	041b      	lsls	r3, r3, #16
 800e86c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	68d9      	ldr	r1, [r3, #12]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6a1a      	ldr	r2, [r3, #32]
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	431a      	orrs	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	430a      	orrs	r2, r1
 800e882:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6919      	ldr	r1, [r3, #16]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	4b33      	ldr	r3, [pc, #204]	; (800e95c <HAL_LTDC_Init+0x19c>)
 800e890:	400b      	ands	r3, r1
 800e892:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e898:	041b      	lsls	r3, r3, #16
 800e89a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	6919      	ldr	r1, [r3, #16]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	431a      	orrs	r2, r3
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	430a      	orrs	r2, r1
 800e8b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	6959      	ldr	r1, [r3, #20]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	4b27      	ldr	r3, [pc, #156]	; (800e95c <HAL_LTDC_Init+0x19c>)
 800e8be:	400b      	ands	r3, r1
 800e8c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c6:	041b      	lsls	r3, r3, #16
 800e8c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	6959      	ldr	r1, [r3, #20]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	431a      	orrs	r2, r3
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	430a      	orrs	r2, r1
 800e8de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e8e6:	021b      	lsls	r3, r3, #8
 800e8e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e8f0:	041b      	lsls	r3, r3, #16
 800e8f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800e902:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e90a:	68ba      	ldr	r2, [r7, #8]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	4313      	orrs	r3, r2
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800e916:	431a      	orrs	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	430a      	orrs	r2, r1
 800e91e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f042 0206 	orr.w	r2, r2, #6
 800e92e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	699a      	ldr	r2, [r3, #24]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f042 0201 	orr.w	r2, r2, #1
 800e93e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2201      	movs	r2, #1
 800e94c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800e950:	2300      	movs	r3, #0
}
 800e952:	4618      	mov	r0, r3
 800e954:	3710      	adds	r7, #16
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	f000f800 	.word	0xf000f800

0800e960 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e96e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e976:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f003 0304 	and.w	r3, r3, #4
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d023      	beq.n	800e9ca <HAL_LTDC_IRQHandler+0x6a>
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	f003 0304 	and.w	r3, r3, #4
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d01e      	beq.n	800e9ca <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f022 0204 	bic.w	r2, r2, #4
 800e99a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2204      	movs	r2, #4
 800e9a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e9aa:	f043 0201 	orr.w	r2, r3, #1
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2204      	movs	r2, #4
 800e9b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 f86f 	bl	800eaa8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f003 0302 	and.w	r3, r3, #2
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d023      	beq.n	800ea1c <HAL_LTDC_IRQHandler+0xbc>
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	f003 0302 	and.w	r3, r3, #2
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d01e      	beq.n	800ea1c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f022 0202 	bic.w	r2, r2, #2
 800e9ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2202      	movs	r2, #2
 800e9f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e9fc:	f043 0202 	orr.w	r2, r3, #2
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2204      	movs	r2, #4
 800ea0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f000 f846 	bl	800eaa8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f003 0301 	and.w	r3, r3, #1
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d01b      	beq.n	800ea5e <HAL_LTDC_IRQHandler+0xfe>
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	f003 0301 	and.w	r3, r3, #1
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d016      	beq.n	800ea5e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f022 0201 	bic.w	r2, r2, #1
 800ea3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2201      	movs	r2, #1
 800ea46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f7f4 f879 	bl	8002b50 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f003 0308 	and.w	r3, r3, #8
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d01b      	beq.n	800eaa0 <HAL_LTDC_IRQHandler+0x140>
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	f003 0308 	and.w	r3, r3, #8
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d016      	beq.n	800eaa0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f022 0208 	bic.w	r2, r2, #8
 800ea80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2208      	movs	r2, #8
 800ea88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 f80e 	bl	800eabc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800eaa0:	bf00      	nop
 800eaa2:	3710      	adds	r7, #16
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800eab0:	bf00      	nop
 800eab2:	370c      	adds	r7, #12
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr

0800eabc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b083      	sub	sp, #12
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800eac4:	bf00      	nop
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ead0:	b5b0      	push	{r4, r5, r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d101      	bne.n	800eaea <HAL_LTDC_ConfigLayer+0x1a>
 800eae6:	2302      	movs	r3, #2
 800eae8:	e02c      	b.n	800eb44 <HAL_LTDC_ConfigLayer+0x74>
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2201      	movs	r2, #1
 800eaee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2202      	movs	r2, #2
 800eaf6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800eafa:	68fa      	ldr	r2, [r7, #12]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2134      	movs	r1, #52	; 0x34
 800eb00:	fb01 f303 	mul.w	r3, r1, r3
 800eb04:	4413      	add	r3, r2
 800eb06:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	4614      	mov	r4, r2
 800eb0e:	461d      	mov	r5, r3
 800eb10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb1c:	682b      	ldr	r3, [r5, #0]
 800eb1e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	68b9      	ldr	r1, [r7, #8]
 800eb24:	68f8      	ldr	r0, [r7, #12]
 800eb26:	f000 f849 	bl	800ebbc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2201      	movs	r2, #1
 800eb36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bdb0      	pop	{r4, r5, r7, pc}

0800eb4c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d101      	bne.n	800eb64 <HAL_LTDC_ProgramLineEvent+0x18>
 800eb60:	2302      	movs	r3, #2
 800eb62:	e023      	b.n	800ebac <HAL_LTDC_ProgramLineEvent+0x60>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2201      	movs	r2, #1
 800eb68:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2202      	movs	r2, #2
 800eb70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f022 0201 	bic.w	r2, r2, #1
 800eb82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800eb84:	4a0c      	ldr	r2, [pc, #48]	; (800ebb8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f042 0201 	orr.w	r2, r2, #1
 800eb98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2200      	movs	r2, #0
 800eba6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ebaa:	2300      	movs	r3, #0
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	370c      	adds	r7, #12
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr
 800ebb8:	50001000 	.word	0x50001000

0800ebbc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b089      	sub	sp, #36	; 0x24
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	60f8      	str	r0, [r7, #12]
 800ebc4:	60b9      	str	r1, [r7, #8]
 800ebc6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	685a      	ldr	r2, [r3, #4]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	68db      	ldr	r3, [r3, #12]
 800ebd2:	0c1b      	lsrs	r3, r3, #16
 800ebd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ebd8:	4413      	add	r3, r2
 800ebda:	041b      	lsls	r3, r3, #16
 800ebdc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	01db      	lsls	r3, r3, #7
 800ebe8:	4413      	add	r3, r2
 800ebea:	3384      	adds	r3, #132	; 0x84
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	68fa      	ldr	r2, [r7, #12]
 800ebf0:	6812      	ldr	r2, [r2, #0]
 800ebf2:	4611      	mov	r1, r2
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	01d2      	lsls	r2, r2, #7
 800ebf8:	440a      	add	r2, r1
 800ebfa:	3284      	adds	r2, #132	; 0x84
 800ebfc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ec00:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	68db      	ldr	r3, [r3, #12]
 800ec0c:	0c1b      	lsrs	r3, r3, #16
 800ec0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec12:	4413      	add	r3, r2
 800ec14:	1c5a      	adds	r2, r3, #1
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	01db      	lsls	r3, r3, #7
 800ec20:	440b      	add	r3, r1
 800ec22:	3384      	adds	r3, #132	; 0x84
 800ec24:	4619      	mov	r1, r3
 800ec26:	69fb      	ldr	r3, [r7, #28]
 800ec28:	4313      	orrs	r3, r2
 800ec2a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	68da      	ldr	r2, [r3, #12]
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec3a:	4413      	add	r3, r2
 800ec3c:	041b      	lsls	r3, r3, #16
 800ec3e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	461a      	mov	r2, r3
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	01db      	lsls	r3, r3, #7
 800ec4a:	4413      	add	r3, r2
 800ec4c:	3384      	adds	r3, #132	; 0x84
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	6812      	ldr	r2, [r2, #0]
 800ec54:	4611      	mov	r1, r2
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	01d2      	lsls	r2, r2, #7
 800ec5a:	440a      	add	r2, r1
 800ec5c:	3284      	adds	r2, #132	; 0x84
 800ec5e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ec62:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	689a      	ldr	r2, [r3, #8]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ec72:	4413      	add	r3, r2
 800ec74:	1c5a      	adds	r2, r3, #1
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	01db      	lsls	r3, r3, #7
 800ec80:	440b      	add	r3, r1
 800ec82:	3384      	adds	r3, #132	; 0x84
 800ec84:	4619      	mov	r1, r3
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	461a      	mov	r2, r3
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	01db      	lsls	r3, r3, #7
 800ec96:	4413      	add	r3, r2
 800ec98:	3384      	adds	r3, #132	; 0x84
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	68fa      	ldr	r2, [r7, #12]
 800ec9e:	6812      	ldr	r2, [r2, #0]
 800eca0:	4611      	mov	r1, r2
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	01d2      	lsls	r2, r2, #7
 800eca6:	440a      	add	r2, r1
 800eca8:	3284      	adds	r2, #132	; 0x84
 800ecaa:	f023 0307 	bic.w	r3, r3, #7
 800ecae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	01db      	lsls	r3, r3, #7
 800ecba:	4413      	add	r3, r2
 800ecbc:	3384      	adds	r3, #132	; 0x84
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	691b      	ldr	r3, [r3, #16]
 800ecc4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eccc:	021b      	lsls	r3, r3, #8
 800ecce:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ecd6:	041b      	lsls	r3, r3, #16
 800ecd8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	699b      	ldr	r3, [r3, #24]
 800ecde:	061b      	lsls	r3, r3, #24
 800ece0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	461a      	mov	r2, r3
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	01db      	lsls	r3, r3, #7
 800ecec:	4413      	add	r3, r2
 800ecee:	3384      	adds	r3, #132	; 0x84
 800ecf0:	699b      	ldr	r3, [r3, #24]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	01db      	lsls	r3, r3, #7
 800ecfc:	4413      	add	r3, r2
 800ecfe:	3384      	adds	r3, #132	; 0x84
 800ed00:	461a      	mov	r2, r3
 800ed02:	2300      	movs	r3, #0
 800ed04:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	431a      	orrs	r2, r3
 800ed12:	69bb      	ldr	r3, [r7, #24]
 800ed14:	431a      	orrs	r2, r3
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	01db      	lsls	r3, r3, #7
 800ed20:	440b      	add	r3, r1
 800ed22:	3384      	adds	r3, #132	; 0x84
 800ed24:	4619      	mov	r1, r3
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	461a      	mov	r2, r3
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	01db      	lsls	r3, r3, #7
 800ed36:	4413      	add	r3, r2
 800ed38:	3384      	adds	r3, #132	; 0x84
 800ed3a:	695b      	ldr	r3, [r3, #20]
 800ed3c:	68fa      	ldr	r2, [r7, #12]
 800ed3e:	6812      	ldr	r2, [r2, #0]
 800ed40:	4611      	mov	r1, r2
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	01d2      	lsls	r2, r2, #7
 800ed46:	440a      	add	r2, r1
 800ed48:	3284      	adds	r2, #132	; 0x84
 800ed4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ed4e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	461a      	mov	r2, r3
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	01db      	lsls	r3, r3, #7
 800ed5a:	4413      	add	r3, r2
 800ed5c:	3384      	adds	r3, #132	; 0x84
 800ed5e:	461a      	mov	r2, r3
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	695b      	ldr	r3, [r3, #20]
 800ed64:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	01db      	lsls	r3, r3, #7
 800ed70:	4413      	add	r3, r2
 800ed72:	3384      	adds	r3, #132	; 0x84
 800ed74:	69da      	ldr	r2, [r3, #28]
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	01db      	lsls	r3, r3, #7
 800ed80:	440b      	add	r3, r1
 800ed82:	3384      	adds	r3, #132	; 0x84
 800ed84:	4619      	mov	r1, r3
 800ed86:	4b58      	ldr	r3, [pc, #352]	; (800eee8 <LTDC_SetConfig+0x32c>)
 800ed88:	4013      	ands	r3, r2
 800ed8a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	69da      	ldr	r2, [r3, #28]
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	6a1b      	ldr	r3, [r3, #32]
 800ed94:	68f9      	ldr	r1, [r7, #12]
 800ed96:	6809      	ldr	r1, [r1, #0]
 800ed98:	4608      	mov	r0, r1
 800ed9a:	6879      	ldr	r1, [r7, #4]
 800ed9c:	01c9      	lsls	r1, r1, #7
 800ed9e:	4401      	add	r1, r0
 800eda0:	3184      	adds	r1, #132	; 0x84
 800eda2:	4313      	orrs	r3, r2
 800eda4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	461a      	mov	r2, r3
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	01db      	lsls	r3, r3, #7
 800edb0:	4413      	add	r3, r2
 800edb2:	3384      	adds	r3, #132	; 0x84
 800edb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	461a      	mov	r2, r3
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	01db      	lsls	r3, r3, #7
 800edc0:	4413      	add	r3, r2
 800edc2:	3384      	adds	r3, #132	; 0x84
 800edc4:	461a      	mov	r2, r3
 800edc6:	2300      	movs	r3, #0
 800edc8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	461a      	mov	r2, r3
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	01db      	lsls	r3, r3, #7
 800edd4:	4413      	add	r3, r2
 800edd6:	3384      	adds	r3, #132	; 0x84
 800edd8:	461a      	mov	r2, r3
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edde:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	691b      	ldr	r3, [r3, #16]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d102      	bne.n	800edee <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800ede8:	2304      	movs	r3, #4
 800edea:	61fb      	str	r3, [r7, #28]
 800edec:	e01b      	b.n	800ee26 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	691b      	ldr	r3, [r3, #16]
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d102      	bne.n	800edfc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800edf6:	2303      	movs	r3, #3
 800edf8:	61fb      	str	r3, [r7, #28]
 800edfa:	e014      	b.n	800ee26 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	691b      	ldr	r3, [r3, #16]
 800ee00:	2b04      	cmp	r3, #4
 800ee02:	d00b      	beq.n	800ee1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ee08:	2b02      	cmp	r3, #2
 800ee0a:	d007      	beq.n	800ee1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800ee10:	2b03      	cmp	r3, #3
 800ee12:	d003      	beq.n	800ee1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ee18:	2b07      	cmp	r3, #7
 800ee1a:	d102      	bne.n	800ee22 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800ee1c:	2302      	movs	r3, #2
 800ee1e:	61fb      	str	r3, [r7, #28]
 800ee20:	e001      	b.n	800ee26 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800ee22:	2301      	movs	r3, #1
 800ee24:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	01db      	lsls	r3, r3, #7
 800ee30:	4413      	add	r3, r2
 800ee32:	3384      	adds	r3, #132	; 0x84
 800ee34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee36:	68fa      	ldr	r2, [r7, #12]
 800ee38:	6812      	ldr	r2, [r2, #0]
 800ee3a:	4611      	mov	r1, r2
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	01d2      	lsls	r2, r2, #7
 800ee40:	440a      	add	r2, r1
 800ee42:	3284      	adds	r2, #132	; 0x84
 800ee44:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800ee48:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee4e:	69fa      	ldr	r2, [r7, #28]
 800ee50:	fb02 f303 	mul.w	r3, r2, r3
 800ee54:	041a      	lsls	r2, r3, #16
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	6859      	ldr	r1, [r3, #4]
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	1acb      	subs	r3, r1, r3
 800ee60:	69f9      	ldr	r1, [r7, #28]
 800ee62:	fb01 f303 	mul.w	r3, r1, r3
 800ee66:	3307      	adds	r3, #7
 800ee68:	68f9      	ldr	r1, [r7, #12]
 800ee6a:	6809      	ldr	r1, [r1, #0]
 800ee6c:	4608      	mov	r0, r1
 800ee6e:	6879      	ldr	r1, [r7, #4]
 800ee70:	01c9      	lsls	r1, r1, #7
 800ee72:	4401      	add	r1, r0
 800ee74:	3184      	adds	r1, #132	; 0x84
 800ee76:	4313      	orrs	r3, r2
 800ee78:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	461a      	mov	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	01db      	lsls	r3, r3, #7
 800ee84:	4413      	add	r3, r2
 800ee86:	3384      	adds	r3, #132	; 0x84
 800ee88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4619      	mov	r1, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	01db      	lsls	r3, r3, #7
 800ee94:	440b      	add	r3, r1
 800ee96:	3384      	adds	r3, #132	; 0x84
 800ee98:	4619      	mov	r1, r3
 800ee9a:	4b14      	ldr	r3, [pc, #80]	; (800eeec <LTDC_SetConfig+0x330>)
 800ee9c:	4013      	ands	r3, r2
 800ee9e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	461a      	mov	r2, r3
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	01db      	lsls	r3, r3, #7
 800eeaa:	4413      	add	r3, r2
 800eeac:	3384      	adds	r3, #132	; 0x84
 800eeae:	461a      	mov	r2, r3
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	461a      	mov	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	01db      	lsls	r3, r3, #7
 800eec0:	4413      	add	r3, r2
 800eec2:	3384      	adds	r3, #132	; 0x84
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	68fa      	ldr	r2, [r7, #12]
 800eec8:	6812      	ldr	r2, [r2, #0]
 800eeca:	4611      	mov	r1, r2
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	01d2      	lsls	r2, r2, #7
 800eed0:	440a      	add	r2, r1
 800eed2:	3284      	adds	r2, #132	; 0x84
 800eed4:	f043 0301 	orr.w	r3, r3, #1
 800eed8:	6013      	str	r3, [r2, #0]
}
 800eeda:	bf00      	nop
 800eedc:	3724      	adds	r7, #36	; 0x24
 800eede:	46bd      	mov	sp, r7
 800eee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	fffff8f8 	.word	0xfffff8f8
 800eeec:	fffff800 	.word	0xfffff800

0800eef0 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 800eef8:	f7fc fae8 	bl	800b4cc <HAL_GetTick>
 800eefc:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d101      	bne.n	800ef08 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800ef04:	2301      	movs	r3, #1
 800ef06:	e04a      	b.n	800ef9e <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	2b02      	cmp	r3, #2
 800ef12:	d008      	beq.n	800ef26 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2280      	movs	r2, #128	; 0x80
 800ef18:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ef22:	2301      	movs	r3, #1
 800ef24:	e03b      	b.n	800ef9e <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	68da      	ldr	r2, [r3, #12]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800ef34:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	68da      	ldr	r2, [r3, #12]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	f022 0201 	bic.w	r2, r2, #1
 800ef44:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ef46:	e016      	b.n	800ef76 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ef48:	f7fc fac0 	bl	800b4cc <HAL_GetTick>
 800ef4c:	4602      	mov	r2, r0
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	1ad3      	subs	r3, r2, r3
 800ef52:	2b05      	cmp	r3, #5
 800ef54:	d90f      	bls.n	800ef76 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2200      	movs	r2, #0
 800ef66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2203      	movs	r2, #3
 800ef6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
 800ef72:	2301      	movs	r3, #1
 800ef74:	e013      	b.n	800ef9e <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	f003 0301 	and.w	r3, r3, #1
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d1e1      	bne.n	800ef48 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	221f      	movs	r2, #31
 800ef8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
 800ef9c:	2300      	movs	r3, #0
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3710      	adds	r7, #16
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800efa6:	b480      	push	{r7}
 800efa8:	b083      	sub	sp, #12
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d101      	bne.n	800efb8 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800efb4:	2301      	movs	r3, #1
 800efb6:	e017      	b.n	800efe8 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	2b02      	cmp	r3, #2
 800efc2:	d004      	beq.n	800efce <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2280      	movs	r2, #128	; 0x80
 800efc8:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800efca:	2301      	movs	r3, #1
 800efcc:	e00c      	b.n	800efe8 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2204      	movs	r2, #4
 800efd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	68da      	ldr	r2, [r3, #12]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f022 0201 	bic.w	r2, r2, #1
 800efe4:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800efe6:	2300      	movs	r3, #0
}
 800efe8:	4618      	mov	r0, r3
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr

0800eff4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b086      	sub	sp, #24
 800eff8:	af02      	add	r7, sp, #8
 800effa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800effc:	2300      	movs	r3, #0
 800effe:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800f000:	f7fc fa64 	bl	800b4cc <HAL_GetTick>
 800f004:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d102      	bne.n	800f012 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800f00c:	2301      	movs	r3, #1
 800f00e:	73fb      	strb	r3, [r7, #15]
 800f010:	e0a9      	b.n	800f166 <HAL_OSPI_Init+0x172>
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2200      	movs	r2, #0
 800f016:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	f040 80a2 	bne.w	800f166 <HAL_OSPI_Init+0x172>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f7f4 fd3a 	bl	8003a9c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800f028:	f241 3188 	movw	r1, #5000	; 0x1388
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 fd48 	bl	800fac2 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	689a      	ldr	r2, [r3, #8]
 800f038:	4b4d      	ldr	r3, [pc, #308]	; (800f170 <HAL_OSPI_Init+0x17c>)
 800f03a:	4013      	ands	r3, r2
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	68d1      	ldr	r1, [r2, #12]
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	6912      	ldr	r2, [r2, #16]
 800f044:	3a01      	subs	r2, #1
 800f046:	0412      	lsls	r2, r2, #16
 800f048:	4311      	orrs	r1, r2
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	6952      	ldr	r2, [r2, #20]
 800f04e:	3a01      	subs	r2, #1
 800f050:	0212      	lsls	r2, r2, #8
 800f052:	4311      	orrs	r1, r2
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f058:	0112      	lsls	r2, r2, #4
 800f05a:	4311      	orrs	r1, r2
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f060:	4311      	orrs	r1, r2
 800f062:	687a      	ldr	r2, [r7, #4]
 800f064:	69d2      	ldr	r2, [r2, #28]
 800f066:	4311      	orrs	r1, r2
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	6812      	ldr	r2, [r2, #0]
 800f06c:	430b      	orrs	r3, r1
 800f06e:	6093      	str	r3, [r2, #8]
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6a1a      	ldr	r2, [r3, #32]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	430a      	orrs	r2, r1
 800f084:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f08a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	430a      	orrs	r2, r1
 800f096:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f0a0:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	3b01      	subs	r3, #1
 800f0b2:	021a      	lsls	r2, r3, #8
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	430a      	orrs	r2, r1
 800f0ba:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0c0:	9300      	str	r3, [sp, #0]
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	2120      	movs	r1, #32
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 fd45 	bl	800fb58 <OSPI_WaitFlagStateUntilTimeout>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800f0d2:	7bfb      	ldrb	r3, [r7, #15]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d146      	bne.n	800f166 <HAL_OSPI_Init+0x172>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, 
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e6:	1e5a      	subs	r2, r3, #1
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	430a      	orrs	r2, r1
 800f0ee:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	689a      	ldr	r2, [r3, #8]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	430a      	orrs	r2, r1
 800f104:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800f10e:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f11a:	431a      	orrs	r2, r3
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	430a      	orrs	r2, r1
 800f122:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f042 0201 	orr.w	r2, r2, #1
 800f134:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	699b      	ldr	r3, [r3, #24]
 800f13a:	2b02      	cmp	r3, #2
 800f13c:	d107      	bne.n	800f14e <HAL_OSPI_Init+0x15a>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	689a      	ldr	r2, [r3, #8]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f042 0202 	orr.w	r2, r2, #2
 800f14c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f156:	d103      	bne.n	800f160 <HAL_OSPI_Init+0x16c>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2201      	movs	r2, #1
 800f15c:	655a      	str	r2, [r3, #84]	; 0x54
 800f15e:	e002      	b.n	800f166 <HAL_OSPI_Init+0x172>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2202      	movs	r2, #2
 800f164:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 800f166:	7bfb      	ldrb	r3, [r7, #15]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	f8e0f884 	.word	0xf8e0f884

0800f174 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f17c:	2300      	movs	r3, #0
 800f17e:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d102      	bne.n	800f18c <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800f186:	2301      	movs	r3, #1
 800f188:	73fb      	strb	r3, [r7, #15]
 800f18a:	e015      	b.n	800f1b8 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f022 0201 	bic.w	r2, r2, #1
 800f19a:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	689a      	ldr	r2, [r3, #8]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f022 0202 	bic.w	r2, r2, #2
 800f1aa:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f7f4 fcad 	bl	8003b0c <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  return status;
 800f1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3710      	adds	r7, #16
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
	...

0800f1c4 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	3350      	adds	r3, #80	; 0x50
 800f1d2:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	6a1b      	ldr	r3, [r3, #32]
 800f1da:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1e8:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	f003 0304 	and.w	r3, r3, #4
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d03a      	beq.n	800f26a <HAL_OSPI_IRQHandler+0xa6>
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d035      	beq.n	800f26a <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	2b18      	cmp	r3, #24
 800f202:	d10f      	bne.n	800f224 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f208:	781a      	ldrb	r2, [r3, #0]
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f212:	1c5a      	adds	r2, r3, #1
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f21c:	1e5a      	subs	r2, r3, #1
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	64da      	str	r2, [r3, #76]	; 0x4c
 800f222:	e012      	b.n	800f24a <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	2b28      	cmp	r3, #40	; 0x28
 800f228:	d10f      	bne.n	800f24a <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f22e:	697a      	ldr	r2, [r7, #20]
 800f230:	7812      	ldrb	r2, [r2, #0]
 800f232:	b2d2      	uxtb	r2, r2
 800f234:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f23a:	1c5a      	adds	r2, r3, #1
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f244:	1e5a      	subs	r2, r3, #1
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	64da      	str	r2, [r3, #76]	; 0x4c
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d107      	bne.n	800f262 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f260:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 fb7c 	bl	800f960 <HAL_OSPI_FifoThresholdCallback>
 800f268:	e0e7      	b.n	800f43a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/ 
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	f003 0302 	and.w	r3, r3, #2
 800f270:	2b00      	cmp	r3, #0
 800f272:	d067      	beq.n	800f344 <HAL_OSPI_IRQHandler+0x180>
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d062      	beq.n	800f344 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	2b28      	cmp	r3, #40	; 0x28
 800f282:	d131      	bne.n	800f2e8 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d015      	beq.n	800f2b8 <HAL_OSPI_IRQHandler+0xf4>
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800f292:	2b00      	cmp	r3, #0
 800f294:	d010      	beq.n	800f2b8 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f29a:	697a      	ldr	r2, [r7, #20]
 800f29c:	7812      	ldrb	r2, [r2, #0]
 800f29e:	b2d2      	uxtb	r2, r2
 800f2a0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2a6:	1c5a      	adds	r2, r3, #1
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2b0:	1e5a      	subs	r2, r3, #1
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	64da      	str	r2, [r3, #76]	; 0x4c
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f2b6:	e0bd      	b.n	800f434 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f040 80b9 	bne.w	800f434 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2202      	movs	r2, #2
 800f2c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800f2d8:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2202      	movs	r2, #2
 800f2de:	655a      	str	r2, [r3, #84]	; 0x54

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f000 fb51 	bl	800f988 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f2e6:	e0a5      	b.n	800f434 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2202      	movs	r2, #2
 800f2ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800f2fe:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2202      	movs	r2, #2
 800f304:	655a      	str	r2, [r3, #84]	; 0x54

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	2b18      	cmp	r3, #24
 800f30a:	d103      	bne.n	800f314 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f000 fb45 	bl	800f99c <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f312:	e08f      	b.n	800f434 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */ 
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	2b08      	cmp	r3, #8
 800f318:	d103      	bne.n	800f322 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 fb2a 	bl	800f974 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f320:	e088      	b.n	800f434 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f328:	f040 8084 	bne.w	800f434 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f330:	2b00      	cmp	r3, #0
 800f332:	d103      	bne.n	800f33c <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 fb09 	bl	800f94c <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f33a:	e07b      	b.n	800f434 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 fafb 	bl	800f938 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f342:	e077      	b.n	800f434 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	f003 0308 	and.w	r3, r3, #8
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d01e      	beq.n	800f38c <HAL_OSPI_IRQHandler+0x1c8>
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f354:	2b00      	cmp	r3, #0
 800f356:	d019      	beq.n	800f38c <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2208      	movs	r2, #8
 800f35e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00a      	beq.n	800f384 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800f37c:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2202      	movs	r2, #2
 800f382:	655a      	str	r2, [r3, #84]	; 0x54

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f000 fb13 	bl	800f9b0 <HAL_OSPI_StatusMatchCallback>
 800f38a:	e056      	b.n	800f43a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	f003 0301 	and.w	r3, r3, #1
 800f392:	2b00      	cmp	r3, #0
 800f394:	d03c      	beq.n	800f410 <HAL_OSPI_IRQHandler+0x24c>
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d037      	beq.n	800f410 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2201      	movs	r2, #1
 800f3a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800f3b6:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2202      	movs	r2, #2
 800f3bc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f003 0304 	and.w	r3, r3, #4
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d01a      	beq.n	800f402 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f022 0204 	bic.w	r2, r2, #4
 800f3da:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3e0:	4a18      	ldr	r2, [pc, #96]	; (800f444 <HAL_OSPI_IRQHandler+0x280>)
 800f3e2:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7ff fddc 	bl	800efa6 <HAL_MDMA_Abort_IT>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d021      	beq.n	800f438 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2202      	movs	r2, #2
 800f3f8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 fa9c 	bl	800f938 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800f400:	e01a      	b.n	800f438 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2202      	movs	r2, #2
 800f406:	655a      	str	r2, [r3, #84]	; 0x54

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 fa95 	bl	800f938 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800f40e:	e013      	b.n	800f438 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */ 
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800f410:	693b      	ldr	r3, [r7, #16]
 800f412:	f003 0310 	and.w	r3, r3, #16
 800f416:	2b00      	cmp	r3, #0
 800f418:	d00f      	beq.n	800f43a <HAL_OSPI_IRQHandler+0x276>
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f420:	2b00      	cmp	r3, #0
 800f422:	d00a      	beq.n	800f43a <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2210      	movs	r2, #16
 800f42a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f000 fac9 	bl	800f9c4 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800f432:	e002      	b.n	800f43a <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800f434:	bf00      	nop
 800f436:	e000      	b.n	800f43a <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800f438:	bf00      	nop
}
 800f43a:	bf00      	nop
 800f43c:	3718      	adds	r7, #24
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	0800fae1 	.word	0x0800fae1

0800f448 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b08a      	sub	sp, #40	; 0x28
 800f44c:	af02      	add	r7, sp, #8
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	60b9      	str	r1, [r7, #8]
 800f452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800f454:	f7fc f83a 	bl	800b4cc <HAL_GetTick>
 800f458:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f45e:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f464:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	2b02      	cmp	r3, #2
 800f46a:	d104      	bne.n	800f476 <HAL_OSPI_Command+0x2e>
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f474:	d115      	bne.n	800f4a2 <HAL_OSPI_Command+0x5a>
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	2b14      	cmp	r3, #20
 800f47a:	d107      	bne.n	800f48c <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG) 
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	2b02      	cmp	r3, #2
 800f482:	d00e      	beq.n	800f4a2 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2b03      	cmp	r3, #3
 800f48a:	d00a      	beq.n	800f4a2 <HAL_OSPI_Command+0x5a>
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	2b24      	cmp	r3, #36	; 0x24
 800f490:	d15b      	bne.n	800f54a <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  || 
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2b01      	cmp	r3, #1
 800f498:	d003      	beq.n	800f4a2 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  || 
 800f49e:	2b03      	cmp	r3, #3
 800f4a0:	d153      	bne.n	800f54a <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	9300      	str	r3, [sp, #0]
 800f4a6:	69bb      	ldr	r3, [r7, #24]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	2120      	movs	r1, #32
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	f000 fb53 	bl	800fb58 <OSPI_WaitFlagStateUntilTimeout>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800f4b6:	7ffb      	ldrb	r3, [r7, #31]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d14c      	bne.n	800f556 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800f4c2:	68b9      	ldr	r1, [r7, #8]
 800f4c4:	68f8      	ldr	r0, [r7, #12]
 800f4c6:	f000 fb7f 	bl	800fbc8 <OSPI_ConfigCmd>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800f4ce:	7ffb      	ldrb	r3, [r7, #31]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d140      	bne.n	800f556 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d10e      	bne.n	800f4fa <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	9300      	str	r3, [sp, #0]
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	2102      	movs	r1, #2
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f000 fb36 	bl	800fb58 <OSPI_WaitFlagStateUntilTimeout>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2202      	movs	r2, #2
 800f4f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800f4f8:	e02d      	b.n	800f556 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d103      	bne.n	800f50a <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2204      	movs	r2, #4
 800f506:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800f508:	e025      	b.n	800f556 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d10b      	bne.n	800f52a <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f516:	2b24      	cmp	r3, #36	; 0x24
 800f518:	d103      	bne.n	800f522 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2204      	movs	r2, #4
 800f51e:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800f520:	e019      	b.n	800f556 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2214      	movs	r2, #20
 800f526:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800f528:	e015      	b.n	800f556 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2b02      	cmp	r3, #2
 800f530:	d111      	bne.n	800f556 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f536:	2b14      	cmp	r3, #20
 800f538:	d103      	bne.n	800f542 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	2204      	movs	r2, #4
 800f53e:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800f540:	e009      	b.n	800f556 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2224      	movs	r2, #36	; 0x24
 800f546:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800f548:	e005      	b.n	800f556 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800f54a:	2301      	movs	r3, #1
 800f54c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2210      	movs	r2, #16
 800f552:	659a      	str	r2, [r3, #88]	; 0x58
 800f554:	e000      	b.n	800f558 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800f556:	bf00      	nop
  }

  /* Return function status */
  return status;
 800f558:	7ffb      	ldrb	r3, [r7, #31]
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3720      	adds	r7, #32
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}

0800f562 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800f562:	b580      	push	{r7, lr}
 800f564:	b08a      	sub	sp, #40	; 0x28
 800f566:	af02      	add	r7, sp, #8
 800f568:	60f8      	str	r0, [r7, #12]
 800f56a:	60b9      	str	r1, [r7, #8]
 800f56c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f56e:	f7fb ffad 	bl	800b4cc <HAL_GetTick>
 800f572:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	3350      	adds	r3, #80	; 0x50
 800f57a:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d105      	bne.n	800f58e <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800f582:	2301      	movs	r3, #1
 800f584:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2208      	movs	r2, #8
 800f58a:	659a      	str	r2, [r3, #88]	; 0x58
 800f58c:	e057      	b.n	800f63e <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f592:	2b04      	cmp	r3, #4
 800f594:	d14e      	bne.n	800f634 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f59c:	1c5a      	adds	r2, r3, #1
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	64da      	str	r2, [r3, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->pBuffPtr  = pData;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	68ba      	ldr	r2, [r7, #8]
 800f5ae:	645a      	str	r2, [r3, #68]	; 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	681a      	ldr	r2, [r3, #0]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f5be:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	69bb      	ldr	r3, [r7, #24]
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	2104      	movs	r1, #4
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	f000 fac4 	bl	800fb58 <OSPI_WaitFlagStateUntilTimeout>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800f5d4:	7ffb      	ldrb	r3, [r7, #31]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d113      	bne.n	800f602 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5de:	781a      	ldrb	r2, [r3, #0]
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5e8:	1c5a      	adds	r2, r3, #1
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5f2:	1e5a      	subs	r2, r3, #1
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	64da      	str	r2, [r3, #76]	; 0x4c
      } while (hospi->XferCount > 0U);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d1df      	bne.n	800f5c0 <HAL_OSPI_Transmit+0x5e>
 800f600:	e000      	b.n	800f604 <HAL_OSPI_Transmit+0xa2>
          break;
 800f602:	bf00      	nop

      if (status == HAL_OK)
 800f604:	7ffb      	ldrb	r3, [r7, #31]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d119      	bne.n	800f63e <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	69bb      	ldr	r3, [r7, #24]
 800f610:	2201      	movs	r2, #1
 800f612:	2102      	movs	r1, #2
 800f614:	68f8      	ldr	r0, [r7, #12]
 800f616:	f000 fa9f 	bl	800fb58 <OSPI_WaitFlagStateUntilTimeout>
 800f61a:	4603      	mov	r3, r0
 800f61c:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800f61e:	7ffb      	ldrb	r3, [r7, #31]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d10c      	bne.n	800f63e <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2202      	movs	r2, #2
 800f62a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2202      	movs	r2, #2
 800f630:	655a      	str	r2, [r3, #84]	; 0x54
 800f632:	e004      	b.n	800f63e <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800f634:	2301      	movs	r3, #1
 800f636:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2210      	movs	r2, #16
 800f63c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 800f63e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f640:	4618      	mov	r0, r3
 800f642:	3720      	adds	r7, #32
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b08c      	sub	sp, #48	; 0x30
 800f64c:	af02      	add	r7, sp, #8
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f654:	f7fb ff3a 	bl	800b4cc <HAL_GetTick>
 800f658:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	3350      	adds	r3, #80	; 0x50
 800f660:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f668:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800f672:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d106      	bne.n	800f688 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800f67a:	2301      	movs	r3, #1
 800f67c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2208      	movs	r2, #8
 800f684:	659a      	str	r2, [r3, #88]	; 0x58
 800f686:	e07c      	b.n	800f782 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f68c:	2b04      	cmp	r3, #4
 800f68e:	d172      	bne.n	800f776 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f696:	1c5a      	adds	r2, r3, #1
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	64da      	str	r2, [r3, #76]	; 0x4c
      hospi->XferSize  = hospi->XferCount;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->pBuffPtr  = pData;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	68ba      	ldr	r2, [r7, #8]
 800f6a8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f6bc:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f6c6:	d104      	bne.n	800f6d2 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	69ba      	ldr	r2, [r7, #24]
 800f6ce:	649a      	str	r2, [r3, #72]	; 0x48
 800f6d0:	e011      	b.n	800f6f6 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800f6da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d004      	beq.n	800f6ec <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	69ba      	ldr	r2, [r7, #24]
 800f6e8:	649a      	str	r2, [r3, #72]	; 0x48
 800f6ea:	e004      	b.n	800f6f6 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	697a      	ldr	r2, [r7, #20]
 800f6f2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	6a3b      	ldr	r3, [r7, #32]
 800f6fc:	2201      	movs	r2, #1
 800f6fe:	2106      	movs	r1, #6
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f000 fa29 	bl	800fb58 <OSPI_WaitFlagStateUntilTimeout>
 800f706:	4603      	mov	r3, r0
 800f708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800f70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f710:	2b00      	cmp	r3, #0
 800f712:	d114      	bne.n	800f73e <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f718:	69fa      	ldr	r2, [r7, #28]
 800f71a:	7812      	ldrb	r2, [r2, #0]
 800f71c:	b2d2      	uxtb	r2, r2
 800f71e:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f724:	1c5a      	adds	r2, r3, #1
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f72e:	1e5a      	subs	r2, r3, #1
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	64da      	str	r2, [r3, #76]	; 0x4c
      } while(hospi->XferCount > 0U);
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d1dc      	bne.n	800f6f6 <HAL_OSPI_Receive+0xae>
 800f73c:	e000      	b.n	800f740 <HAL_OSPI_Receive+0xf8>
          break;
 800f73e:	bf00      	nop

      if (status == HAL_OK)
 800f740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f744:	2b00      	cmp	r3, #0
 800f746:	d11c      	bne.n	800f782 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	9300      	str	r3, [sp, #0]
 800f74c:	6a3b      	ldr	r3, [r7, #32]
 800f74e:	2201      	movs	r2, #1
 800f750:	2102      	movs	r1, #2
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	f000 fa00 	bl	800fb58 <OSPI_WaitFlagStateUntilTimeout>
 800f758:	4603      	mov	r3, r0
 800f75a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800f75e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f762:	2b00      	cmp	r3, #0
 800f764:	d10d      	bne.n	800f782 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	2202      	movs	r2, #2
 800f76c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2202      	movs	r2, #2
 800f772:	655a      	str	r2, [r3, #84]	; 0x54
 800f774:	e005      	b.n	800f782 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800f776:	2301      	movs	r3, #1
 800f778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2210      	movs	r2, #16
 800f780:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 800f782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f786:	4618      	mov	r0, r3
 800f788:	3728      	adds	r7, #40	; 0x28
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}

0800f78e <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800f78e:	b580      	push	{r7, lr}
 800f790:	b08a      	sub	sp, #40	; 0x28
 800f792:	af02      	add	r7, sp, #8
 800f794:	60f8      	str	r0, [r7, #12]
 800f796:	60b9      	str	r1, [r7, #8]
 800f798:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f79a:	f7fb fe97 	bl	800b4cc <HAL_GetTick>
 800f79e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7a6:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800f7b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7b6:	2b04      	cmp	r3, #4
 800f7b8:	d164      	bne.n	800f884 <HAL_OSPI_AutoPolling+0xf6>
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f7c2:	d15f      	bne.n	800f884 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	9300      	str	r3, [sp, #0]
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	2120      	movs	r1, #32
 800f7ce:	68f8      	ldr	r0, [r7, #12]
 800f7d0:	f000 f9c2 	bl	800fb58 <OSPI_WaitFlagStateUntilTimeout>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800f7d8:	7ffb      	ldrb	r3, [r7, #31]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d158      	bne.n	800f890 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	68ba      	ldr	r2, [r7, #8]
 800f7e4:	6812      	ldr	r2, [r2, #0]
 800f7e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	68ba      	ldr	r2, [r7, #8]
 800f7f0:	6852      	ldr	r2, [r2, #4]
 800f7f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	68ba      	ldr	r2, [r7, #8]
 800f7fc:	6912      	ldr	r2, [r2, #16]
 800f7fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	6899      	ldr	r1, [r3, #8]
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	430b      	orrs	r3, r1
 800f816:	431a      	orrs	r2, r3
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800f820:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	68db      	ldr	r3, [r3, #12]
 800f826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f82a:	d104      	bne.n	800f836 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	697a      	ldr	r2, [r7, #20]
 800f832:	649a      	str	r2, [r3, #72]	; 0x48
 800f834:	e011      	b.n	800f85a <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800f83e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f842:	2b00      	cmp	r3, #0
 800f844:	d004      	beq.n	800f850 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	697a      	ldr	r2, [r7, #20]
 800f84c:	649a      	str	r2, [r3, #72]	; 0x48
 800f84e:	e004      	b.n	800f85a <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	693a      	ldr	r2, [r7, #16]
 800f856:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	9300      	str	r3, [sp, #0]
 800f85e:	69bb      	ldr	r3, [r7, #24]
 800f860:	2201      	movs	r2, #1
 800f862:	2108      	movs	r1, #8
 800f864:	68f8      	ldr	r0, [r7, #12]
 800f866:	f000 f977 	bl	800fb58 <OSPI_WaitFlagStateUntilTimeout>
 800f86a:	4603      	mov	r3, r0
 800f86c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800f86e:	7ffb      	ldrb	r3, [r7, #31]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d10d      	bne.n	800f890 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	2208      	movs	r2, #8
 800f87a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2202      	movs	r2, #2
 800f880:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 800f882:	e005      	b.n	800f890 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800f884:	2301      	movs	r3, #1
 800f886:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2210      	movs	r2, #16
 800f88c:	659a      	str	r2, [r3, #88]	; 0x58
 800f88e:	e000      	b.n	800f892 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800f890:	bf00      	nop
  }

  /* Return function status */
  return status;
 800f892:	7ffb      	ldrb	r3, [r7, #31]
}
 800f894:	4618      	mov	r0, r3
 800f896:	3720      	adds	r7, #32
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}

0800f89c <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b086      	sub	sp, #24
 800f8a0:	af02      	add	r7, sp, #8
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f8a6:	f7fb fe11 	bl	800b4cc <HAL_GetTick>
 800f8aa:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8b0:	2b04      	cmp	r3, #4
 800f8b2:	d134      	bne.n	800f91e <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	2120      	movs	r1, #32
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 f949 	bl	800fb58 <OSPI_WaitFlagStateUntilTimeout>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800f8ca:	7bfb      	ldrb	r3, [r7, #15]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d12b      	bne.n	800f928 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2288      	movs	r2, #136	; 0x88
 800f8d4:	655a      	str	r2, [r3, #84]	; 0x54

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2b08      	cmp	r3, #8
 800f8dc:	d111      	bne.n	800f902 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	683a      	ldr	r2, [r7, #0]
 800f8e4:	6852      	ldr	r2, [r2, #4]
 800f8e6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	2210      	movs	r2, #16
 800f8f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f900:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	681a      	ldr	r2, [r3, #0]
 800f908:	4b0a      	ldr	r3, [pc, #40]	; (800f934 <HAL_OSPI_MemoryMapped+0x98>)
 800f90a:	4013      	ands	r3, r2
 800f90c:	683a      	ldr	r2, [r7, #0]
 800f90e:	6812      	ldr	r2, [r2, #0]
 800f910:	431a      	orrs	r2, r3
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800f91a:	601a      	str	r2, [r3, #0]
 800f91c:	e004      	b.n	800f928 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800f91e:	2301      	movs	r3, #1
 800f920:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2210      	movs	r2, #16
 800f926:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Return function status */
  return status;
 800f928:	7bfb      	ldrb	r3, [r7, #15]
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3710      	adds	r7, #16
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}
 800f932:	bf00      	nop
 800f934:	cffffff7 	.word	0xcffffff7

0800f938 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 800f940:	bf00      	nop
 800f942:	370c      	adds	r7, #12
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800f954:	bf00      	nop
 800f956:	370c      	adds	r7, #12
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr

0800f960 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 800f960:	b480      	push	{r7}
 800f962:	b083      	sub	sp, #12
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800f968:	bf00      	nop
 800f96a:	370c      	adds	r7, #12
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr

0800f974 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800f97c:	bf00      	nop
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr

0800f988 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800f988:	b480      	push	{r7}
 800f98a:	b083      	sub	sp, #12
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 800f990:	bf00      	nop
 800f992:	370c      	adds	r7, #12
 800f994:	46bd      	mov	sp, r7
 800f996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99a:	4770      	bx	lr

0800f99c <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b083      	sub	sp, #12
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800f9a4:	bf00      	nop
 800f9a6:	370c      	adds	r7, #12
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr

0800f9b0 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b083      	sub	sp, #12
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800f9b8:	bf00      	nop
 800f9ba:	370c      	adds	r7, #12
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 800f9cc:	bf00      	nop
 800f9ce:	370c      	adds	r7, #12
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr

0800f9d8 <HAL_OSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hospi : OSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b088      	sub	sp, #32
 800f9dc:	af02      	add	r7, sp, #8
 800f9de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800f9e4:	f7fb fd72 	bl	800b4cc <HAL_GetTick>
 800f9e8:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9ee:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	f003 0308 	and.w	r3, r3, #8
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d104      	bne.n	800fa04 <HAL_OSPI_Abort+0x2c>
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	f003 0304 	and.w	r3, r3, #4
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d052      	beq.n	800faaa <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f003 0304 	and.w	r3, r3, #4
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d014      	beq.n	800fa3c <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f022 0204 	bic.w	r2, r2, #4
 800fa20:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7ff fa62 	bl	800eef0 <HAL_MDMA_Abort>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800fa30:	7dfb      	ldrb	r3, [r7, #23]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d002      	beq.n	800fa3c <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2204      	movs	r2, #4
 800fa3a:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	6a1b      	ldr	r3, [r3, #32]
 800fa42:	f003 0320 	and.w	r3, r3, #32
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d02b      	beq.n	800faa2 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	681a      	ldr	r2, [r3, #0]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	f042 0202 	orr.w	r2, r2, #2
 800fa58:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa5e:	9300      	str	r3, [sp, #0]
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	2201      	movs	r2, #1
 800fa64:	2102      	movs	r1, #2
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 f876 	bl	800fb58 <OSPI_WaitFlagStateUntilTimeout>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800fa70:	7dfb      	ldrb	r3, [r7, #23]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d11f      	bne.n	800fab6 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	2202      	movs	r2, #2
 800fa7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa82:	9300      	str	r3, [sp, #0]
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	2200      	movs	r2, #0
 800fa88:	2120      	movs	r1, #32
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 f864 	bl	800fb58 <OSPI_WaitFlagStateUntilTimeout>
 800fa90:	4603      	mov	r3, r0
 800fa92:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800fa94:	7dfb      	ldrb	r3, [r7, #23]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d10d      	bne.n	800fab6 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2202      	movs	r2, #2
 800fa9e:	655a      	str	r2, [r3, #84]	; 0x54
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800faa0:	e009      	b.n	800fab6 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2202      	movs	r2, #2
 800faa6:	655a      	str	r2, [r3, #84]	; 0x54
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800faa8:	e005      	b.n	800fab6 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800faaa:	2301      	movs	r3, #1
 800faac:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2210      	movs	r2, #16
 800fab2:	659a      	str	r2, [r3, #88]	; 0x58
 800fab4:	e000      	b.n	800fab8 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800fab6:	bf00      	nop
  }

  /* Return function status */
  return status;
 800fab8:	7dfb      	ldrb	r3, [r7, #23]
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3718      	adds	r7, #24
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800fac2:	b480      	push	{r7}
 800fac4:	b083      	sub	sp, #12
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
 800faca:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	683a      	ldr	r2, [r7, #0]
 800fad0:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 800fad2:	2300      	movs	r3, #0
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	370c      	adds	r7, #12
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr

0800fae0 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faec:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2200      	movs	r2, #0
 800faf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fafc:	d122      	bne.n	800fb44 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	6a1b      	ldr	r3, [r3, #32]
 800fb04:	f003 0320 	and.w	r3, r3, #32
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d014      	beq.n	800fb36 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2202      	movs	r2, #2
 800fb12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fb22:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f042 0202 	orr.w	r2, r2, #2
 800fb32:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 800fb34:	e00c      	b.n	800fb50 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2202      	movs	r2, #2
 800fb3a:	655a      	str	r2, [r3, #84]	; 0x54
      HAL_OSPI_AbortCpltCallback(hospi);
 800fb3c:	68f8      	ldr	r0, [r7, #12]
 800fb3e:	f7ff ff05 	bl	800f94c <HAL_OSPI_AbortCpltCallback>
}
 800fb42:	e005      	b.n	800fb50 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2202      	movs	r2, #2
 800fb48:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_OSPI_ErrorCallback(hospi);
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f7ff fef4 	bl	800f938 <HAL_OSPI_ErrorCallback>
}
 800fb50:	bf00      	nop
 800fb52:	3710      	adds	r7, #16
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	60f8      	str	r0, [r7, #12]
 800fb60:	60b9      	str	r1, [r7, #8]
 800fb62:	603b      	str	r3, [r7, #0]
 800fb64:	4613      	mov	r3, r2
 800fb66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800fb68:	e01a      	b.n	800fba0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb6a:	69bb      	ldr	r3, [r7, #24]
 800fb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb70:	d016      	beq.n	800fba0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb72:	f7fb fcab 	bl	800b4cc <HAL_GetTick>
 800fb76:	4602      	mov	r2, r0
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	69ba      	ldr	r2, [r7, #24]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d302      	bcc.n	800fb88 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d10b      	bne.n	800fba0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb8e:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb94:	f043 0201 	orr.w	r2, r3, #1
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	e00e      	b.n	800fbbe <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	6a1a      	ldr	r2, [r3, #32]
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	4013      	ands	r3, r2
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	bf14      	ite	ne
 800fbae:	2301      	movne	r3, #1
 800fbb0:	2300      	moveq	r3, #0
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	79fb      	ldrb	r3, [r7, #7]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d1d6      	bne.n	800fb6a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fbbc:	2300      	movs	r3, #0
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
	...

0800fbc8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b089      	sub	sp, #36	; 0x24
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg; 
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fbe4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	689b      	ldr	r3, [r3, #8]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d10a      	bne.n	800fc04 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	685a      	ldr	r2, [r3, #4]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	430a      	orrs	r2, r1
 800fc02:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	2b02      	cmp	r3, #2
 800fc0a:	d114      	bne.n	800fc36 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800fc14:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800fc1e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800fc28:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800fc32:	60fb      	str	r3, [r7, #12]
 800fc34:	e02c      	b.n	800fc90 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	2b03      	cmp	r3, #3
 800fc3c:	d114      	bne.n	800fc68 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800fc46:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800fc50:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fc5a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800fc64:	60fb      	str	r3, [r7, #12]
 800fc66:	e013      	b.n	800fc90 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800fc70:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800fc7a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800fc84:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800fc8e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc98:	431a      	orrs	r2, r3
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d012      	beq.n	800fccc <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800fcae:	69bb      	ldr	r3, [r7, #24]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcbe:	4319      	orrs	r1, r3
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcc4:	430b      	orrs	r3, r1
 800fcc6:	431a      	orrs	r2, r3
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f023 021f 	bic.w	r2, r3, #31
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcd8:	431a      	orrs	r2, r3
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d009      	beq.n	800fcfa <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d105      	bne.n	800fcfa <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	3a01      	subs	r2, #1
 800fcf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	f000 8095 	beq.w	800fe2e <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	69db      	ldr	r3, [r3, #28]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d053      	beq.n	800fdb4 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d01e      	beq.n	800fd52 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	681a      	ldr	r2, [r3, #0]
 800fd18:	4b64      	ldr	r3, [pc, #400]	; (800feac <OSPI_ConfigCmd+0x2e4>)
 800fd1a:	4013      	ands	r3, r2
 800fd1c:	683a      	ldr	r2, [r7, #0]
 800fd1e:	68d1      	ldr	r1, [r2, #12]
 800fd20:	683a      	ldr	r2, [r7, #0]
 800fd22:	6952      	ldr	r2, [r2, #20]
 800fd24:	4311      	orrs	r1, r2
 800fd26:	683a      	ldr	r2, [r7, #0]
 800fd28:	6912      	ldr	r2, [r2, #16]
 800fd2a:	4311      	orrs	r1, r2
 800fd2c:	683a      	ldr	r2, [r7, #0]
 800fd2e:	69d2      	ldr	r2, [r2, #28]
 800fd30:	4311      	orrs	r1, r2
 800fd32:	683a      	ldr	r2, [r7, #0]
 800fd34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fd36:	4311      	orrs	r1, r2
 800fd38:	683a      	ldr	r2, [r7, #0]
 800fd3a:	6a12      	ldr	r2, [r2, #32]
 800fd3c:	4311      	orrs	r1, r2
 800fd3e:	683a      	ldr	r2, [r7, #0]
 800fd40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fd42:	4311      	orrs	r1, r2
 800fd44:	683a      	ldr	r2, [r7, #0]
 800fd46:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800fd48:	430a      	orrs	r2, r1
 800fd4a:	431a      	orrs	r2, r3
 800fd4c:	69bb      	ldr	r3, [r7, #24]
 800fd4e:	601a      	str	r2, [r3, #0]
 800fd50:	e026      	b.n	800fda0 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800fd52:	69bb      	ldr	r3, [r7, #24]
 800fd54:	681a      	ldr	r2, [r3, #0]
 800fd56:	4b56      	ldr	r3, [pc, #344]	; (800feb0 <OSPI_ConfigCmd+0x2e8>)
 800fd58:	4013      	ands	r3, r2
 800fd5a:	683a      	ldr	r2, [r7, #0]
 800fd5c:	68d1      	ldr	r1, [r2, #12]
 800fd5e:	683a      	ldr	r2, [r7, #0]
 800fd60:	6952      	ldr	r2, [r2, #20]
 800fd62:	4311      	orrs	r1, r2
 800fd64:	683a      	ldr	r2, [r7, #0]
 800fd66:	6912      	ldr	r2, [r2, #16]
 800fd68:	4311      	orrs	r1, r2
 800fd6a:	683a      	ldr	r2, [r7, #0]
 800fd6c:	69d2      	ldr	r2, [r2, #28]
 800fd6e:	4311      	orrs	r1, r2
 800fd70:	683a      	ldr	r2, [r7, #0]
 800fd72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fd74:	4311      	orrs	r1, r2
 800fd76:	683a      	ldr	r2, [r7, #0]
 800fd78:	6a12      	ldr	r2, [r2, #32]
 800fd7a:	430a      	orrs	r2, r1
 800fd7c:	431a      	orrs	r2, r3
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd8a:	d109      	bne.n	800fda0 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800fd90:	2b08      	cmp	r3, #8
 800fd92:	d105      	bne.n	800fda0 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800fd94:	69bb      	ldr	r3, [r7, #24]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	689a      	ldr	r2, [r3, #8]
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	683a      	ldr	r2, [r7, #0]
 800fdae:	6992      	ldr	r2, [r2, #24]
 800fdb0:	649a      	str	r2, [r3, #72]	; 0x48
 800fdb2:	e074      	b.n	800fe9e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d015      	beq.n	800fde8 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800fdbc:	69bb      	ldr	r3, [r7, #24]
 800fdbe:	681a      	ldr	r2, [r3, #0]
 800fdc0:	4b3c      	ldr	r3, [pc, #240]	; (800feb4 <OSPI_ConfigCmd+0x2ec>)
 800fdc2:	4013      	ands	r3, r2
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	68d1      	ldr	r1, [r2, #12]
 800fdc8:	683a      	ldr	r2, [r7, #0]
 800fdca:	6952      	ldr	r2, [r2, #20]
 800fdcc:	4311      	orrs	r1, r2
 800fdce:	683a      	ldr	r2, [r7, #0]
 800fdd0:	6912      	ldr	r2, [r2, #16]
 800fdd2:	4311      	orrs	r1, r2
 800fdd4:	683a      	ldr	r2, [r7, #0]
 800fdd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fdd8:	4311      	orrs	r1, r2
 800fdda:	683a      	ldr	r2, [r7, #0]
 800fddc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800fdde:	430a      	orrs	r2, r1
 800fde0:	431a      	orrs	r2, r3
 800fde2:	69bb      	ldr	r3, [r7, #24]
 800fde4:	601a      	str	r2, [r3, #0]
 800fde6:	e01d      	b.n	800fe24 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800fde8:	69bb      	ldr	r3, [r7, #24]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	68d9      	ldr	r1, [r3, #12]
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	695b      	ldr	r3, [r3, #20]
 800fdf8:	4319      	orrs	r1, r3
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	691b      	ldr	r3, [r3, #16]
 800fdfe:	430b      	orrs	r3, r1
 800fe00:	431a      	orrs	r2, r3
 800fe02:	69bb      	ldr	r3, [r7, #24]
 800fe04:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe0e:	d109      	bne.n	800fe24 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800fe14:	2b08      	cmp	r3, #8
 800fe16:	d105      	bne.n	800fe24 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800fe18:	69bb      	ldr	r3, [r7, #24]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	689a      	ldr	r2, [r3, #8]
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	601a      	str	r2, [r3, #0]
 800fe2c:	e037      	b.n	800fe9e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	69db      	ldr	r3, [r3, #28]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d02e      	beq.n	800fe94 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d015      	beq.n	800fe6a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	681a      	ldr	r2, [r3, #0]
 800fe42:	4b1d      	ldr	r3, [pc, #116]	; (800feb8 <OSPI_ConfigCmd+0x2f0>)
 800fe44:	4013      	ands	r3, r2
 800fe46:	683a      	ldr	r2, [r7, #0]
 800fe48:	69d1      	ldr	r1, [r2, #28]
 800fe4a:	683a      	ldr	r2, [r7, #0]
 800fe4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fe4e:	4311      	orrs	r1, r2
 800fe50:	683a      	ldr	r2, [r7, #0]
 800fe52:	6a12      	ldr	r2, [r2, #32]
 800fe54:	4311      	orrs	r1, r2
 800fe56:	683a      	ldr	r2, [r7, #0]
 800fe58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fe5a:	4311      	orrs	r1, r2
 800fe5c:	683a      	ldr	r2, [r7, #0]
 800fe5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800fe60:	430a      	orrs	r2, r1
 800fe62:	431a      	orrs	r2, r3
 800fe64:	69bb      	ldr	r3, [r7, #24]
 800fe66:	601a      	str	r2, [r3, #0]
 800fe68:	e00e      	b.n	800fe88 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800fe6a:	69bb      	ldr	r3, [r7, #24]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	69d9      	ldr	r1, [r3, #28]
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe7a:	4319      	orrs	r1, r3
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	6a1b      	ldr	r3, [r3, #32]
 800fe80:	430b      	orrs	r3, r1
 800fe82:	431a      	orrs	r2, r3
 800fe84:	69bb      	ldr	r3, [r7, #24]
 800fe86:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	683a      	ldr	r2, [r7, #0]
 800fe8e:	6992      	ldr	r2, [r2, #24]
 800fe90:	649a      	str	r2, [r3, #72]	; 0x48
 800fe92:	e004      	b.n	800fe9e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800fe94:	2301      	movs	r3, #1
 800fe96:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2208      	movs	r2, #8
 800fe9c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
 800fe9e:	7ffb      	ldrb	r3, [r7, #31]
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	3724      	adds	r7, #36	; 0x24
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr
 800feac:	f0ffc0c0 	.word	0xf0ffc0c0
 800feb0:	ffffc0c0 	.word	0xffffc0c0
 800feb4:	f0ffffc0 	.word	0xf0ffffc0
 800feb8:	f0ffc0ff 	.word	0xf0ffc0ff

0800febc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b084      	sub	sp, #16
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800fec4:	4b29      	ldr	r3, [pc, #164]	; (800ff6c <HAL_PWREx_ConfigSupply+0xb0>)
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	f003 0307 	and.w	r3, r3, #7
 800fecc:	2b06      	cmp	r3, #6
 800fece:	d00a      	beq.n	800fee6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800fed0:	4b26      	ldr	r3, [pc, #152]	; (800ff6c <HAL_PWREx_ConfigSupply+0xb0>)
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d001      	beq.n	800fee2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800fede:	2301      	movs	r3, #1
 800fee0:	e040      	b.n	800ff64 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800fee2:	2300      	movs	r3, #0
 800fee4:	e03e      	b.n	800ff64 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800fee6:	4b21      	ldr	r3, [pc, #132]	; (800ff6c <HAL_PWREx_ConfigSupply+0xb0>)
 800fee8:	68db      	ldr	r3, [r3, #12]
 800feea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800feee:	491f      	ldr	r1, [pc, #124]	; (800ff6c <HAL_PWREx_ConfigSupply+0xb0>)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4313      	orrs	r3, r2
 800fef4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800fef6:	f7fb fae9 	bl	800b4cc <HAL_GetTick>
 800fefa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800fefc:	e009      	b.n	800ff12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800fefe:	f7fb fae5 	bl	800b4cc <HAL_GetTick>
 800ff02:	4602      	mov	r2, r0
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	1ad3      	subs	r3, r2, r3
 800ff08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ff0c:	d901      	bls.n	800ff12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ff0e:	2301      	movs	r3, #1
 800ff10:	e028      	b.n	800ff64 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ff12:	4b16      	ldr	r3, [pc, #88]	; (800ff6c <HAL_PWREx_ConfigSupply+0xb0>)
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ff1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff1e:	d1ee      	bne.n	800fefe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2b1e      	cmp	r3, #30
 800ff24:	d008      	beq.n	800ff38 <HAL_PWREx_ConfigSupply+0x7c>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2b2e      	cmp	r3, #46	; 0x2e
 800ff2a:	d005      	beq.n	800ff38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2b1d      	cmp	r3, #29
 800ff30:	d002      	beq.n	800ff38 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2b2d      	cmp	r3, #45	; 0x2d
 800ff36:	d114      	bne.n	800ff62 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800ff38:	f7fb fac8 	bl	800b4cc <HAL_GetTick>
 800ff3c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ff3e:	e009      	b.n	800ff54 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ff40:	f7fb fac4 	bl	800b4cc <HAL_GetTick>
 800ff44:	4602      	mov	r2, r0
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	1ad3      	subs	r3, r2, r3
 800ff4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ff4e:	d901      	bls.n	800ff54 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800ff50:	2301      	movs	r3, #1
 800ff52:	e007      	b.n	800ff64 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ff54:	4b05      	ldr	r3, [pc, #20]	; (800ff6c <HAL_PWREx_ConfigSupply+0xb0>)
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ff5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff60:	d1ee      	bne.n	800ff40 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ff62:	2300      	movs	r3, #0
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3710      	adds	r7, #16
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	58024800 	.word	0x58024800

0800ff70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b08c      	sub	sp, #48	; 0x30
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d101      	bne.n	800ff82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ff7e:	2301      	movs	r3, #1
 800ff80:	e3d7      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f003 0301 	and.w	r3, r3, #1
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	f000 80b3 	beq.w	80100f6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ff90:	4b90      	ldr	r3, [pc, #576]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 800ff92:	691b      	ldr	r3, [r3, #16]
 800ff94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ff98:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ff9a:	4b8e      	ldr	r3, [pc, #568]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 800ff9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff9e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ffa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa2:	2b10      	cmp	r3, #16
 800ffa4:	d007      	beq.n	800ffb6 <HAL_RCC_OscConfig+0x46>
 800ffa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa8:	2b18      	cmp	r3, #24
 800ffaa:	d112      	bne.n	800ffd2 <HAL_RCC_OscConfig+0x62>
 800ffac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffae:	f003 0303 	and.w	r3, r3, #3
 800ffb2:	2b02      	cmp	r3, #2
 800ffb4:	d10d      	bne.n	800ffd2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ffb6:	4b87      	ldr	r3, [pc, #540]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	f000 8098 	beq.w	80100f4 <HAL_RCC_OscConfig+0x184>
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	f040 8093 	bne.w	80100f4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800ffce:	2301      	movs	r3, #1
 800ffd0:	e3af      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	685b      	ldr	r3, [r3, #4]
 800ffd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffda:	d106      	bne.n	800ffea <HAL_RCC_OscConfig+0x7a>
 800ffdc:	4b7d      	ldr	r3, [pc, #500]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a7c      	ldr	r2, [pc, #496]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 800ffe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ffe6:	6013      	str	r3, [r2, #0]
 800ffe8:	e058      	b.n	801009c <HAL_RCC_OscConfig+0x12c>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d112      	bne.n	8010018 <HAL_RCC_OscConfig+0xa8>
 800fff2:	4b78      	ldr	r3, [pc, #480]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	4a77      	ldr	r2, [pc, #476]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 800fff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fffc:	6013      	str	r3, [r2, #0]
 800fffe:	4b75      	ldr	r3, [pc, #468]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4a74      	ldr	r2, [pc, #464]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010004:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010008:	6013      	str	r3, [r2, #0]
 801000a:	4b72      	ldr	r3, [pc, #456]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	4a71      	ldr	r2, [pc, #452]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010014:	6013      	str	r3, [r2, #0]
 8010016:	e041      	b.n	801009c <HAL_RCC_OscConfig+0x12c>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010020:	d112      	bne.n	8010048 <HAL_RCC_OscConfig+0xd8>
 8010022:	4b6c      	ldr	r3, [pc, #432]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	4a6b      	ldr	r2, [pc, #428]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801002c:	6013      	str	r3, [r2, #0]
 801002e:	4b69      	ldr	r3, [pc, #420]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	4a68      	ldr	r2, [pc, #416]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010034:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010038:	6013      	str	r3, [r2, #0]
 801003a:	4b66      	ldr	r3, [pc, #408]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a65      	ldr	r2, [pc, #404]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010044:	6013      	str	r3, [r2, #0]
 8010046:	e029      	b.n	801009c <HAL_RCC_OscConfig+0x12c>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8010050:	d112      	bne.n	8010078 <HAL_RCC_OscConfig+0x108>
 8010052:	4b60      	ldr	r3, [pc, #384]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a5f      	ldr	r2, [pc, #380]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801005c:	6013      	str	r3, [r2, #0]
 801005e:	4b5d      	ldr	r3, [pc, #372]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	4a5c      	ldr	r2, [pc, #368]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010068:	6013      	str	r3, [r2, #0]
 801006a:	4b5a      	ldr	r3, [pc, #360]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	4a59      	ldr	r2, [pc, #356]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010074:	6013      	str	r3, [r2, #0]
 8010076:	e011      	b.n	801009c <HAL_RCC_OscConfig+0x12c>
 8010078:	4b56      	ldr	r3, [pc, #344]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4a55      	ldr	r2, [pc, #340]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 801007e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010082:	6013      	str	r3, [r2, #0]
 8010084:	4b53      	ldr	r3, [pc, #332]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	4a52      	ldr	r2, [pc, #328]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 801008a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801008e:	6013      	str	r3, [r2, #0]
 8010090:	4b50      	ldr	r3, [pc, #320]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	4a4f      	ldr	r2, [pc, #316]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010096:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801009a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	685b      	ldr	r3, [r3, #4]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d013      	beq.n	80100cc <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80100a4:	f7fb fa12 	bl	800b4cc <HAL_GetTick>
 80100a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80100aa:	e008      	b.n	80100be <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80100ac:	f7fb fa0e 	bl	800b4cc <HAL_GetTick>
 80100b0:	4602      	mov	r2, r0
 80100b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	2b64      	cmp	r3, #100	; 0x64
 80100b8:	d901      	bls.n	80100be <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80100ba:	2303      	movs	r3, #3
 80100bc:	e339      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80100be:	4b45      	ldr	r3, [pc, #276]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d0f0      	beq.n	80100ac <HAL_RCC_OscConfig+0x13c>
 80100ca:	e014      	b.n	80100f6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80100cc:	f7fb f9fe 	bl	800b4cc <HAL_GetTick>
 80100d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80100d2:	e008      	b.n	80100e6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80100d4:	f7fb f9fa 	bl	800b4cc <HAL_GetTick>
 80100d8:	4602      	mov	r2, r0
 80100da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	2b64      	cmp	r3, #100	; 0x64
 80100e0:	d901      	bls.n	80100e6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80100e2:	2303      	movs	r3, #3
 80100e4:	e325      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80100e6:	4b3b      	ldr	r3, [pc, #236]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d1f0      	bne.n	80100d4 <HAL_RCC_OscConfig+0x164>
 80100f2:	e000      	b.n	80100f6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80100f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	f003 0302 	and.w	r3, r3, #2
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d070      	beq.n	80101e4 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010102:	4b34      	ldr	r3, [pc, #208]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010104:	691b      	ldr	r3, [r3, #16]
 8010106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801010a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801010c:	4b31      	ldr	r3, [pc, #196]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 801010e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010110:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8010112:	6a3b      	ldr	r3, [r7, #32]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d007      	beq.n	8010128 <HAL_RCC_OscConfig+0x1b8>
 8010118:	6a3b      	ldr	r3, [r7, #32]
 801011a:	2b18      	cmp	r3, #24
 801011c:	d11b      	bne.n	8010156 <HAL_RCC_OscConfig+0x1e6>
 801011e:	69fb      	ldr	r3, [r7, #28]
 8010120:	f003 0303 	and.w	r3, r3, #3
 8010124:	2b00      	cmp	r3, #0
 8010126:	d116      	bne.n	8010156 <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010128:	4b2a      	ldr	r3, [pc, #168]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f003 0304 	and.w	r3, r3, #4
 8010130:	2b00      	cmp	r3, #0
 8010132:	d005      	beq.n	8010140 <HAL_RCC_OscConfig+0x1d0>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	68db      	ldr	r3, [r3, #12]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d101      	bne.n	8010140 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 801013c:	2301      	movs	r3, #1
 801013e:	e2f8      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010140:	4b24      	ldr	r3, [pc, #144]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	691b      	ldr	r3, [r3, #16]
 801014c:	061b      	lsls	r3, r3, #24
 801014e:	4921      	ldr	r1, [pc, #132]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010150:	4313      	orrs	r3, r2
 8010152:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010154:	e046      	b.n	80101e4 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d026      	beq.n	80101ac <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801015e:	4b1d      	ldr	r3, [pc, #116]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	f023 0219 	bic.w	r2, r3, #25
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	491a      	ldr	r1, [pc, #104]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 801016c:	4313      	orrs	r3, r2
 801016e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010170:	f7fb f9ac 	bl	800b4cc <HAL_GetTick>
 8010174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010176:	e008      	b.n	801018a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010178:	f7fb f9a8 	bl	800b4cc <HAL_GetTick>
 801017c:	4602      	mov	r2, r0
 801017e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010180:	1ad3      	subs	r3, r2, r3
 8010182:	2b02      	cmp	r3, #2
 8010184:	d901      	bls.n	801018a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8010186:	2303      	movs	r3, #3
 8010188:	e2d3      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801018a:	4b12      	ldr	r3, [pc, #72]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f003 0304 	and.w	r3, r3, #4
 8010192:	2b00      	cmp	r3, #0
 8010194:	d0f0      	beq.n	8010178 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010196:	4b0f      	ldr	r3, [pc, #60]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 8010198:	685b      	ldr	r3, [r3, #4]
 801019a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	691b      	ldr	r3, [r3, #16]
 80101a2:	061b      	lsls	r3, r3, #24
 80101a4:	490b      	ldr	r1, [pc, #44]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 80101a6:	4313      	orrs	r3, r2
 80101a8:	604b      	str	r3, [r1, #4]
 80101aa:	e01b      	b.n	80101e4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80101ac:	4b09      	ldr	r3, [pc, #36]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4a08      	ldr	r2, [pc, #32]	; (80101d4 <HAL_RCC_OscConfig+0x264>)
 80101b2:	f023 0301 	bic.w	r3, r3, #1
 80101b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80101b8:	f7fb f988 	bl	800b4cc <HAL_GetTick>
 80101bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80101be:	e00b      	b.n	80101d8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80101c0:	f7fb f984 	bl	800b4cc <HAL_GetTick>
 80101c4:	4602      	mov	r2, r0
 80101c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c8:	1ad3      	subs	r3, r2, r3
 80101ca:	2b02      	cmp	r3, #2
 80101cc:	d904      	bls.n	80101d8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80101ce:	2303      	movs	r3, #3
 80101d0:	e2af      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
 80101d2:	bf00      	nop
 80101d4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80101d8:	4b99      	ldr	r3, [pc, #612]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	f003 0304 	and.w	r3, r3, #4
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d1ed      	bne.n	80101c0 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f003 0310 	and.w	r3, r3, #16
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d06a      	beq.n	80102c6 <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80101f0:	4b93      	ldr	r3, [pc, #588]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 80101f2:	691b      	ldr	r3, [r3, #16]
 80101f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80101f8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80101fa:	4b91      	ldr	r3, [pc, #580]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 80101fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101fe:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	2b08      	cmp	r3, #8
 8010204:	d007      	beq.n	8010216 <HAL_RCC_OscConfig+0x2a6>
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	2b18      	cmp	r3, #24
 801020a:	d11b      	bne.n	8010244 <HAL_RCC_OscConfig+0x2d4>
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	f003 0303 	and.w	r3, r3, #3
 8010212:	2b01      	cmp	r3, #1
 8010214:	d116      	bne.n	8010244 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010216:	4b8a      	ldr	r3, [pc, #552]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801021e:	2b00      	cmp	r3, #0
 8010220:	d005      	beq.n	801022e <HAL_RCC_OscConfig+0x2be>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	69db      	ldr	r3, [r3, #28]
 8010226:	2b80      	cmp	r3, #128	; 0x80
 8010228:	d001      	beq.n	801022e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 801022a:	2301      	movs	r3, #1
 801022c:	e281      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801022e:	4b84      	ldr	r3, [pc, #528]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6a1b      	ldr	r3, [r3, #32]
 801023a:	061b      	lsls	r3, r3, #24
 801023c:	4980      	ldr	r1, [pc, #512]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 801023e:	4313      	orrs	r3, r2
 8010240:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010242:	e040      	b.n	80102c6 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	69db      	ldr	r3, [r3, #28]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d023      	beq.n	8010294 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801024c:	4b7c      	ldr	r3, [pc, #496]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4a7b      	ldr	r2, [pc, #492]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010258:	f7fb f938 	bl	800b4cc <HAL_GetTick>
 801025c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801025e:	e008      	b.n	8010272 <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8010260:	f7fb f934 	bl	800b4cc <HAL_GetTick>
 8010264:	4602      	mov	r2, r0
 8010266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010268:	1ad3      	subs	r3, r2, r3
 801026a:	2b02      	cmp	r3, #2
 801026c:	d901      	bls.n	8010272 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 801026e:	2303      	movs	r3, #3
 8010270:	e25f      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010272:	4b73      	ldr	r3, [pc, #460]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801027a:	2b00      	cmp	r3, #0
 801027c:	d0f0      	beq.n	8010260 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801027e:	4b70      	ldr	r3, [pc, #448]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6a1b      	ldr	r3, [r3, #32]
 801028a:	061b      	lsls	r3, r3, #24
 801028c:	496c      	ldr	r1, [pc, #432]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 801028e:	4313      	orrs	r3, r2
 8010290:	60cb      	str	r3, [r1, #12]
 8010292:	e018      	b.n	80102c6 <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8010294:	4b6a      	ldr	r3, [pc, #424]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4a69      	ldr	r2, [pc, #420]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 801029a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801029e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80102a0:	f7fb f914 	bl	800b4cc <HAL_GetTick>
 80102a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80102a6:	e008      	b.n	80102ba <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80102a8:	f7fb f910 	bl	800b4cc <HAL_GetTick>
 80102ac:	4602      	mov	r2, r0
 80102ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b0:	1ad3      	subs	r3, r2, r3
 80102b2:	2b02      	cmp	r3, #2
 80102b4:	d901      	bls.n	80102ba <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 80102b6:	2303      	movs	r3, #3
 80102b8:	e23b      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80102ba:	4b61      	ldr	r3, [pc, #388]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d1f0      	bne.n	80102a8 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	f003 0308 	and.w	r3, r3, #8
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d036      	beq.n	8010340 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	695b      	ldr	r3, [r3, #20]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d019      	beq.n	801030e <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80102da:	4b59      	ldr	r3, [pc, #356]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 80102dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102de:	4a58      	ldr	r2, [pc, #352]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 80102e0:	f043 0301 	orr.w	r3, r3, #1
 80102e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80102e6:	f7fb f8f1 	bl	800b4cc <HAL_GetTick>
 80102ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80102ec:	e008      	b.n	8010300 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80102ee:	f7fb f8ed 	bl	800b4cc <HAL_GetTick>
 80102f2:	4602      	mov	r2, r0
 80102f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f6:	1ad3      	subs	r3, r2, r3
 80102f8:	2b02      	cmp	r3, #2
 80102fa:	d901      	bls.n	8010300 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 80102fc:	2303      	movs	r3, #3
 80102fe:	e218      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010300:	4b4f      	ldr	r3, [pc, #316]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010304:	f003 0302 	and.w	r3, r3, #2
 8010308:	2b00      	cmp	r3, #0
 801030a:	d0f0      	beq.n	80102ee <HAL_RCC_OscConfig+0x37e>
 801030c:	e018      	b.n	8010340 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801030e:	4b4c      	ldr	r3, [pc, #304]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010312:	4a4b      	ldr	r2, [pc, #300]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010314:	f023 0301 	bic.w	r3, r3, #1
 8010318:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801031a:	f7fb f8d7 	bl	800b4cc <HAL_GetTick>
 801031e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010320:	e008      	b.n	8010334 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010322:	f7fb f8d3 	bl	800b4cc <HAL_GetTick>
 8010326:	4602      	mov	r2, r0
 8010328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032a:	1ad3      	subs	r3, r2, r3
 801032c:	2b02      	cmp	r3, #2
 801032e:	d901      	bls.n	8010334 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8010330:	2303      	movs	r3, #3
 8010332:	e1fe      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010334:	4b42      	ldr	r3, [pc, #264]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010338:	f003 0302 	and.w	r3, r3, #2
 801033c:	2b00      	cmp	r3, #0
 801033e:	d1f0      	bne.n	8010322 <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f003 0320 	and.w	r3, r3, #32
 8010348:	2b00      	cmp	r3, #0
 801034a:	d036      	beq.n	80103ba <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	699b      	ldr	r3, [r3, #24]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d019      	beq.n	8010388 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010354:	4b3a      	ldr	r3, [pc, #232]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4a39      	ldr	r2, [pc, #228]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 801035a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801035e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010360:	f7fb f8b4 	bl	800b4cc <HAL_GetTick>
 8010364:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010366:	e008      	b.n	801037a <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010368:	f7fb f8b0 	bl	800b4cc <HAL_GetTick>
 801036c:	4602      	mov	r2, r0
 801036e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010370:	1ad3      	subs	r3, r2, r3
 8010372:	2b02      	cmp	r3, #2
 8010374:	d901      	bls.n	801037a <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8010376:	2303      	movs	r3, #3
 8010378:	e1db      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801037a:	4b31      	ldr	r3, [pc, #196]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010382:	2b00      	cmp	r3, #0
 8010384:	d0f0      	beq.n	8010368 <HAL_RCC_OscConfig+0x3f8>
 8010386:	e018      	b.n	80103ba <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010388:	4b2d      	ldr	r3, [pc, #180]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4a2c      	ldr	r2, [pc, #176]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 801038e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010392:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010394:	f7fb f89a 	bl	800b4cc <HAL_GetTick>
 8010398:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801039a:	e008      	b.n	80103ae <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801039c:	f7fb f896 	bl	800b4cc <HAL_GetTick>
 80103a0:	4602      	mov	r2, r0
 80103a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a4:	1ad3      	subs	r3, r2, r3
 80103a6:	2b02      	cmp	r3, #2
 80103a8:	d901      	bls.n	80103ae <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 80103aa:	2303      	movs	r3, #3
 80103ac:	e1c1      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80103ae:	4b24      	ldr	r3, [pc, #144]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d1f0      	bne.n	801039c <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f003 0304 	and.w	r3, r3, #4
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	f000 80af 	beq.w	8010526 <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80103c8:	4b1e      	ldr	r3, [pc, #120]	; (8010444 <HAL_RCC_OscConfig+0x4d4>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	4a1d      	ldr	r2, [pc, #116]	; (8010444 <HAL_RCC_OscConfig+0x4d4>)
 80103ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80103d4:	f7fb f87a 	bl	800b4cc <HAL_GetTick>
 80103d8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80103da:	e008      	b.n	80103ee <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80103dc:	f7fb f876 	bl	800b4cc <HAL_GetTick>
 80103e0:	4602      	mov	r2, r0
 80103e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e4:	1ad3      	subs	r3, r2, r3
 80103e6:	2b64      	cmp	r3, #100	; 0x64
 80103e8:	d901      	bls.n	80103ee <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 80103ea:	2303      	movs	r3, #3
 80103ec:	e1a1      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80103ee:	4b15      	ldr	r3, [pc, #84]	; (8010444 <HAL_RCC_OscConfig+0x4d4>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d0f0      	beq.n	80103dc <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	689b      	ldr	r3, [r3, #8]
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d106      	bne.n	8010410 <HAL_RCC_OscConfig+0x4a0>
 8010402:	4b0f      	ldr	r3, [pc, #60]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010406:	4a0e      	ldr	r2, [pc, #56]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010408:	f043 0301 	orr.w	r3, r3, #1
 801040c:	6713      	str	r3, [r2, #112]	; 0x70
 801040e:	e05b      	b.n	80104c8 <HAL_RCC_OscConfig+0x558>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	689b      	ldr	r3, [r3, #8]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d117      	bne.n	8010448 <HAL_RCC_OscConfig+0x4d8>
 8010418:	4b09      	ldr	r3, [pc, #36]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 801041a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801041c:	4a08      	ldr	r2, [pc, #32]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 801041e:	f023 0301 	bic.w	r3, r3, #1
 8010422:	6713      	str	r3, [r2, #112]	; 0x70
 8010424:	4b06      	ldr	r3, [pc, #24]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010428:	4a05      	ldr	r2, [pc, #20]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 801042a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801042e:	6713      	str	r3, [r2, #112]	; 0x70
 8010430:	4b03      	ldr	r3, [pc, #12]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010434:	4a02      	ldr	r2, [pc, #8]	; (8010440 <HAL_RCC_OscConfig+0x4d0>)
 8010436:	f023 0304 	bic.w	r3, r3, #4
 801043a:	6713      	str	r3, [r2, #112]	; 0x70
 801043c:	e044      	b.n	80104c8 <HAL_RCC_OscConfig+0x558>
 801043e:	bf00      	nop
 8010440:	58024400 	.word	0x58024400
 8010444:	58024800 	.word	0x58024800
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	689b      	ldr	r3, [r3, #8]
 801044c:	2b05      	cmp	r3, #5
 801044e:	d112      	bne.n	8010476 <HAL_RCC_OscConfig+0x506>
 8010450:	4b95      	ldr	r3, [pc, #596]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010454:	4a94      	ldr	r2, [pc, #592]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010456:	f043 0304 	orr.w	r3, r3, #4
 801045a:	6713      	str	r3, [r2, #112]	; 0x70
 801045c:	4b92      	ldr	r3, [pc, #584]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 801045e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010460:	4a91      	ldr	r2, [pc, #580]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010466:	6713      	str	r3, [r2, #112]	; 0x70
 8010468:	4b8f      	ldr	r3, [pc, #572]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 801046a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801046c:	4a8e      	ldr	r2, [pc, #568]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 801046e:	f043 0301 	orr.w	r3, r3, #1
 8010472:	6713      	str	r3, [r2, #112]	; 0x70
 8010474:	e028      	b.n	80104c8 <HAL_RCC_OscConfig+0x558>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	689b      	ldr	r3, [r3, #8]
 801047a:	2b85      	cmp	r3, #133	; 0x85
 801047c:	d112      	bne.n	80104a4 <HAL_RCC_OscConfig+0x534>
 801047e:	4b8a      	ldr	r3, [pc, #552]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010482:	4a89      	ldr	r2, [pc, #548]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010484:	f043 0304 	orr.w	r3, r3, #4
 8010488:	6713      	str	r3, [r2, #112]	; 0x70
 801048a:	4b87      	ldr	r3, [pc, #540]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 801048c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801048e:	4a86      	ldr	r2, [pc, #536]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010494:	6713      	str	r3, [r2, #112]	; 0x70
 8010496:	4b84      	ldr	r3, [pc, #528]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801049a:	4a83      	ldr	r2, [pc, #524]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 801049c:	f043 0301 	orr.w	r3, r3, #1
 80104a0:	6713      	str	r3, [r2, #112]	; 0x70
 80104a2:	e011      	b.n	80104c8 <HAL_RCC_OscConfig+0x558>
 80104a4:	4b80      	ldr	r3, [pc, #512]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80104a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104a8:	4a7f      	ldr	r2, [pc, #508]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80104aa:	f023 0301 	bic.w	r3, r3, #1
 80104ae:	6713      	str	r3, [r2, #112]	; 0x70
 80104b0:	4b7d      	ldr	r3, [pc, #500]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80104b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104b4:	4a7c      	ldr	r2, [pc, #496]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80104b6:	f023 0304 	bic.w	r3, r3, #4
 80104ba:	6713      	str	r3, [r2, #112]	; 0x70
 80104bc:	4b7a      	ldr	r3, [pc, #488]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80104be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104c0:	4a79      	ldr	r2, [pc, #484]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80104c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	689b      	ldr	r3, [r3, #8]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d015      	beq.n	80104fc <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80104d0:	f7fa fffc 	bl	800b4cc <HAL_GetTick>
 80104d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80104d6:	e00a      	b.n	80104ee <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80104d8:	f7fa fff8 	bl	800b4cc <HAL_GetTick>
 80104dc:	4602      	mov	r2, r0
 80104de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d901      	bls.n	80104ee <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80104ea:	2303      	movs	r3, #3
 80104ec:	e121      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80104ee:	4b6e      	ldr	r3, [pc, #440]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80104f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104f2:	f003 0302 	and.w	r3, r3, #2
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d0ee      	beq.n	80104d8 <HAL_RCC_OscConfig+0x568>
 80104fa:	e014      	b.n	8010526 <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80104fc:	f7fa ffe6 	bl	800b4cc <HAL_GetTick>
 8010500:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010502:	e00a      	b.n	801051a <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010504:	f7fa ffe2 	bl	800b4cc <HAL_GetTick>
 8010508:	4602      	mov	r2, r0
 801050a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050c:	1ad3      	subs	r3, r2, r3
 801050e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010512:	4293      	cmp	r3, r2
 8010514:	d901      	bls.n	801051a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8010516:	2303      	movs	r3, #3
 8010518:	e10b      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801051a:	4b63      	ldr	r3, [pc, #396]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 801051c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801051e:	f003 0302 	and.w	r3, r3, #2
 8010522:	2b00      	cmp	r3, #0
 8010524:	d1ee      	bne.n	8010504 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801052a:	2b00      	cmp	r3, #0
 801052c:	f000 8100 	beq.w	8010730 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8010530:	4b5d      	ldr	r3, [pc, #372]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010532:	691b      	ldr	r3, [r3, #16]
 8010534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010538:	2b18      	cmp	r3, #24
 801053a:	f000 80bb 	beq.w	80106b4 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010542:	2b02      	cmp	r3, #2
 8010544:	f040 8095 	bne.w	8010672 <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010548:	4b57      	ldr	r3, [pc, #348]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	4a56      	ldr	r2, [pc, #344]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 801054e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010554:	f7fa ffba 	bl	800b4cc <HAL_GetTick>
 8010558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801055a:	e008      	b.n	801056e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801055c:	f7fa ffb6 	bl	800b4cc <HAL_GetTick>
 8010560:	4602      	mov	r2, r0
 8010562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010564:	1ad3      	subs	r3, r2, r3
 8010566:	2b02      	cmp	r3, #2
 8010568:	d901      	bls.n	801056e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 801056a:	2303      	movs	r3, #3
 801056c:	e0e1      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801056e:	4b4e      	ldr	r3, [pc, #312]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1f0      	bne.n	801055c <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801057a:	4b4b      	ldr	r3, [pc, #300]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 801057c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801057e:	4b4b      	ldr	r3, [pc, #300]	; (80106ac <HAL_RCC_OscConfig+0x73c>)
 8010580:	4013      	ands	r3, r2
 8010582:	687a      	ldr	r2, [r7, #4]
 8010584:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801058a:	0112      	lsls	r2, r2, #4
 801058c:	430a      	orrs	r2, r1
 801058e:	4946      	ldr	r1, [pc, #280]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010590:	4313      	orrs	r3, r2
 8010592:	628b      	str	r3, [r1, #40]	; 0x28
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010598:	3b01      	subs	r3, #1
 801059a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105a2:	3b01      	subs	r3, #1
 80105a4:	025b      	lsls	r3, r3, #9
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	431a      	orrs	r2, r3
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ae:	3b01      	subs	r3, #1
 80105b0:	041b      	lsls	r3, r3, #16
 80105b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80105b6:	431a      	orrs	r2, r3
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105bc:	3b01      	subs	r3, #1
 80105be:	061b      	lsls	r3, r3, #24
 80105c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80105c4:	4938      	ldr	r1, [pc, #224]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80105c6:	4313      	orrs	r3, r2
 80105c8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80105ca:	4b37      	ldr	r3, [pc, #220]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80105cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ce:	4a36      	ldr	r2, [pc, #216]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80105d0:	f023 0301 	bic.w	r3, r3, #1
 80105d4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80105d6:	4b34      	ldr	r3, [pc, #208]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80105d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105da:	4b35      	ldr	r3, [pc, #212]	; (80106b0 <HAL_RCC_OscConfig+0x740>)
 80105dc:	4013      	ands	r3, r2
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80105e2:	00d2      	lsls	r2, r2, #3
 80105e4:	4930      	ldr	r1, [pc, #192]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80105e6:	4313      	orrs	r3, r2
 80105e8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80105ea:	4b2f      	ldr	r3, [pc, #188]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80105ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ee:	f023 020c 	bic.w	r2, r3, #12
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105f6:	492c      	ldr	r1, [pc, #176]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80105f8:	4313      	orrs	r3, r2
 80105fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80105fc:	4b2a      	ldr	r3, [pc, #168]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 80105fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010600:	f023 0202 	bic.w	r2, r3, #2
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010608:	4927      	ldr	r1, [pc, #156]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 801060a:	4313      	orrs	r3, r2
 801060c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801060e:	4b26      	ldr	r3, [pc, #152]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010612:	4a25      	ldr	r2, [pc, #148]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010618:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801061a:	4b23      	ldr	r3, [pc, #140]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 801061c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801061e:	4a22      	ldr	r2, [pc, #136]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010624:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8010626:	4b20      	ldr	r3, [pc, #128]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801062a:	4a1f      	ldr	r2, [pc, #124]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 801062c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010630:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8010632:	4b1d      	ldr	r3, [pc, #116]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010636:	4a1c      	ldr	r2, [pc, #112]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010638:	f043 0301 	orr.w	r3, r3, #1
 801063c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801063e:	4b1a      	ldr	r3, [pc, #104]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4a19      	ldr	r2, [pc, #100]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801064a:	f7fa ff3f 	bl	800b4cc <HAL_GetTick>
 801064e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010650:	e008      	b.n	8010664 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010652:	f7fa ff3b 	bl	800b4cc <HAL_GetTick>
 8010656:	4602      	mov	r2, r0
 8010658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065a:	1ad3      	subs	r3, r2, r3
 801065c:	2b02      	cmp	r3, #2
 801065e:	d901      	bls.n	8010664 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8010660:	2303      	movs	r3, #3
 8010662:	e066      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010664:	4b10      	ldr	r3, [pc, #64]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801066c:	2b00      	cmp	r3, #0
 801066e:	d0f0      	beq.n	8010652 <HAL_RCC_OscConfig+0x6e2>
 8010670:	e05e      	b.n	8010730 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010672:	4b0d      	ldr	r3, [pc, #52]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	4a0c      	ldr	r2, [pc, #48]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 8010678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801067c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801067e:	f7fa ff25 	bl	800b4cc <HAL_GetTick>
 8010682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010684:	e008      	b.n	8010698 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010686:	f7fa ff21 	bl	800b4cc <HAL_GetTick>
 801068a:	4602      	mov	r2, r0
 801068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068e:	1ad3      	subs	r3, r2, r3
 8010690:	2b02      	cmp	r3, #2
 8010692:	d901      	bls.n	8010698 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8010694:	2303      	movs	r3, #3
 8010696:	e04c      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010698:	4b03      	ldr	r3, [pc, #12]	; (80106a8 <HAL_RCC_OscConfig+0x738>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d1f0      	bne.n	8010686 <HAL_RCC_OscConfig+0x716>
 80106a4:	e044      	b.n	8010730 <HAL_RCC_OscConfig+0x7c0>
 80106a6:	bf00      	nop
 80106a8:	58024400 	.word	0x58024400
 80106ac:	fffffc0c 	.word	0xfffffc0c
 80106b0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80106b4:	4b21      	ldr	r3, [pc, #132]	; (801073c <HAL_RCC_OscConfig+0x7cc>)
 80106b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80106ba:	4b20      	ldr	r3, [pc, #128]	; (801073c <HAL_RCC_OscConfig+0x7cc>)
 80106bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106be:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106c4:	2b01      	cmp	r3, #1
 80106c6:	d031      	beq.n	801072c <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	f003 0203 	and.w	r2, r3, #3
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d12a      	bne.n	801072c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	091b      	lsrs	r3, r3, #4
 80106da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d122      	bne.n	801072c <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d11a      	bne.n	801072c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	0a5b      	lsrs	r3, r3, #9
 80106fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010702:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010704:	429a      	cmp	r2, r3
 8010706:	d111      	bne.n	801072c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	0c1b      	lsrs	r3, r3, #16
 801070c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010714:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010716:	429a      	cmp	r2, r3
 8010718:	d108      	bne.n	801072c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	0e1b      	lsrs	r3, r3, #24
 801071e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010726:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010728:	429a      	cmp	r2, r3
 801072a:	d001      	beq.n	8010730 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 801072c:	2301      	movs	r3, #1
 801072e:	e000      	b.n	8010732 <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8010730:	2300      	movs	r3, #0
}
 8010732:	4618      	mov	r0, r3
 8010734:	3730      	adds	r7, #48	; 0x30
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	58024400 	.word	0x58024400

08010740 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b086      	sub	sp, #24
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d101      	bne.n	8010754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010750:	2301      	movs	r3, #1
 8010752:	e19c      	b.n	8010a8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010754:	4b8a      	ldr	r3, [pc, #552]	; (8010980 <HAL_RCC_ClockConfig+0x240>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f003 030f 	and.w	r3, r3, #15
 801075c:	683a      	ldr	r2, [r7, #0]
 801075e:	429a      	cmp	r2, r3
 8010760:	d910      	bls.n	8010784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010762:	4b87      	ldr	r3, [pc, #540]	; (8010980 <HAL_RCC_ClockConfig+0x240>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f023 020f 	bic.w	r2, r3, #15
 801076a:	4985      	ldr	r1, [pc, #532]	; (8010980 <HAL_RCC_ClockConfig+0x240>)
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	4313      	orrs	r3, r2
 8010770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010772:	4b83      	ldr	r3, [pc, #524]	; (8010980 <HAL_RCC_ClockConfig+0x240>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f003 030f 	and.w	r3, r3, #15
 801077a:	683a      	ldr	r2, [r7, #0]
 801077c:	429a      	cmp	r2, r3
 801077e:	d001      	beq.n	8010784 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010780:	2301      	movs	r3, #1
 8010782:	e184      	b.n	8010a8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	f003 0304 	and.w	r3, r3, #4
 801078c:	2b00      	cmp	r3, #0
 801078e:	d010      	beq.n	80107b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	691a      	ldr	r2, [r3, #16]
 8010794:	4b7b      	ldr	r3, [pc, #492]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 8010796:	699b      	ldr	r3, [r3, #24]
 8010798:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801079c:	429a      	cmp	r2, r3
 801079e:	d908      	bls.n	80107b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80107a0:	4b78      	ldr	r3, [pc, #480]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 80107a2:	699b      	ldr	r3, [r3, #24]
 80107a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	691b      	ldr	r3, [r3, #16]
 80107ac:	4975      	ldr	r1, [pc, #468]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 80107ae:	4313      	orrs	r3, r2
 80107b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	f003 0308 	and.w	r3, r3, #8
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d010      	beq.n	80107e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	695a      	ldr	r2, [r3, #20]
 80107c2:	4b70      	ldr	r3, [pc, #448]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 80107c4:	69db      	ldr	r3, [r3, #28]
 80107c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d908      	bls.n	80107e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80107ce:	4b6d      	ldr	r3, [pc, #436]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 80107d0:	69db      	ldr	r3, [r3, #28]
 80107d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	695b      	ldr	r3, [r3, #20]
 80107da:	496a      	ldr	r1, [pc, #424]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 80107dc:	4313      	orrs	r3, r2
 80107de:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	f003 0310 	and.w	r3, r3, #16
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d010      	beq.n	801080e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	699a      	ldr	r2, [r3, #24]
 80107f0:	4b64      	ldr	r3, [pc, #400]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 80107f2:	69db      	ldr	r3, [r3, #28]
 80107f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d908      	bls.n	801080e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80107fc:	4b61      	ldr	r3, [pc, #388]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 80107fe:	69db      	ldr	r3, [r3, #28]
 8010800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	699b      	ldr	r3, [r3, #24]
 8010808:	495e      	ldr	r1, [pc, #376]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 801080a:	4313      	orrs	r3, r2
 801080c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	f003 0320 	and.w	r3, r3, #32
 8010816:	2b00      	cmp	r3, #0
 8010818:	d010      	beq.n	801083c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	69da      	ldr	r2, [r3, #28]
 801081e:	4b59      	ldr	r3, [pc, #356]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 8010820:	6a1b      	ldr	r3, [r3, #32]
 8010822:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010826:	429a      	cmp	r2, r3
 8010828:	d908      	bls.n	801083c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801082a:	4b56      	ldr	r3, [pc, #344]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 801082c:	6a1b      	ldr	r3, [r3, #32]
 801082e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	69db      	ldr	r3, [r3, #28]
 8010836:	4953      	ldr	r1, [pc, #332]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 8010838:	4313      	orrs	r3, r2
 801083a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	f003 0302 	and.w	r3, r3, #2
 8010844:	2b00      	cmp	r3, #0
 8010846:	d010      	beq.n	801086a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	68da      	ldr	r2, [r3, #12]
 801084c:	4b4d      	ldr	r3, [pc, #308]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 801084e:	699b      	ldr	r3, [r3, #24]
 8010850:	f003 030f 	and.w	r3, r3, #15
 8010854:	429a      	cmp	r2, r3
 8010856:	d908      	bls.n	801086a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010858:	4b4a      	ldr	r3, [pc, #296]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 801085a:	699b      	ldr	r3, [r3, #24]
 801085c:	f023 020f 	bic.w	r2, r3, #15
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	68db      	ldr	r3, [r3, #12]
 8010864:	4947      	ldr	r1, [pc, #284]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 8010866:	4313      	orrs	r3, r2
 8010868:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f003 0301 	and.w	r3, r3, #1
 8010872:	2b00      	cmp	r3, #0
 8010874:	d055      	beq.n	8010922 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8010876:	4b43      	ldr	r3, [pc, #268]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 8010878:	699b      	ldr	r3, [r3, #24]
 801087a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	689b      	ldr	r3, [r3, #8]
 8010882:	4940      	ldr	r1, [pc, #256]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 8010884:	4313      	orrs	r3, r2
 8010886:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	2b02      	cmp	r3, #2
 801088e:	d107      	bne.n	80108a0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010890:	4b3c      	ldr	r3, [pc, #240]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010898:	2b00      	cmp	r3, #0
 801089a:	d121      	bne.n	80108e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801089c:	2301      	movs	r3, #1
 801089e:	e0f6      	b.n	8010a8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	2b03      	cmp	r3, #3
 80108a6:	d107      	bne.n	80108b8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80108a8:	4b36      	ldr	r3, [pc, #216]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d115      	bne.n	80108e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80108b4:	2301      	movs	r3, #1
 80108b6:	e0ea      	b.n	8010a8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	2b01      	cmp	r3, #1
 80108be:	d107      	bne.n	80108d0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80108c0:	4b30      	ldr	r3, [pc, #192]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d109      	bne.n	80108e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80108cc:	2301      	movs	r3, #1
 80108ce:	e0de      	b.n	8010a8e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80108d0:	4b2c      	ldr	r3, [pc, #176]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f003 0304 	and.w	r3, r3, #4
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d101      	bne.n	80108e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80108dc:	2301      	movs	r3, #1
 80108de:	e0d6      	b.n	8010a8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80108e0:	4b28      	ldr	r3, [pc, #160]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 80108e2:	691b      	ldr	r3, [r3, #16]
 80108e4:	f023 0207 	bic.w	r2, r3, #7
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	4925      	ldr	r1, [pc, #148]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 80108ee:	4313      	orrs	r3, r2
 80108f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80108f2:	f7fa fdeb 	bl	800b4cc <HAL_GetTick>
 80108f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80108f8:	e00a      	b.n	8010910 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80108fa:	f7fa fde7 	bl	800b4cc <HAL_GetTick>
 80108fe:	4602      	mov	r2, r0
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	1ad3      	subs	r3, r2, r3
 8010904:	f241 3288 	movw	r2, #5000	; 0x1388
 8010908:	4293      	cmp	r3, r2
 801090a:	d901      	bls.n	8010910 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 801090c:	2303      	movs	r3, #3
 801090e:	e0be      	b.n	8010a8e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010910:	4b1c      	ldr	r3, [pc, #112]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 8010912:	691b      	ldr	r3, [r3, #16]
 8010914:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	685b      	ldr	r3, [r3, #4]
 801091c:	00db      	lsls	r3, r3, #3
 801091e:	429a      	cmp	r2, r3
 8010920:	d1eb      	bne.n	80108fa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f003 0302 	and.w	r3, r3, #2
 801092a:	2b00      	cmp	r3, #0
 801092c:	d010      	beq.n	8010950 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	68da      	ldr	r2, [r3, #12]
 8010932:	4b14      	ldr	r3, [pc, #80]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 8010934:	699b      	ldr	r3, [r3, #24]
 8010936:	f003 030f 	and.w	r3, r3, #15
 801093a:	429a      	cmp	r2, r3
 801093c:	d208      	bcs.n	8010950 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801093e:	4b11      	ldr	r3, [pc, #68]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 8010940:	699b      	ldr	r3, [r3, #24]
 8010942:	f023 020f 	bic.w	r2, r3, #15
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	68db      	ldr	r3, [r3, #12]
 801094a:	490e      	ldr	r1, [pc, #56]	; (8010984 <HAL_RCC_ClockConfig+0x244>)
 801094c:	4313      	orrs	r3, r2
 801094e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010950:	4b0b      	ldr	r3, [pc, #44]	; (8010980 <HAL_RCC_ClockConfig+0x240>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f003 030f 	and.w	r3, r3, #15
 8010958:	683a      	ldr	r2, [r7, #0]
 801095a:	429a      	cmp	r2, r3
 801095c:	d214      	bcs.n	8010988 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801095e:	4b08      	ldr	r3, [pc, #32]	; (8010980 <HAL_RCC_ClockConfig+0x240>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	f023 020f 	bic.w	r2, r3, #15
 8010966:	4906      	ldr	r1, [pc, #24]	; (8010980 <HAL_RCC_ClockConfig+0x240>)
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	4313      	orrs	r3, r2
 801096c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801096e:	4b04      	ldr	r3, [pc, #16]	; (8010980 <HAL_RCC_ClockConfig+0x240>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	f003 030f 	and.w	r3, r3, #15
 8010976:	683a      	ldr	r2, [r7, #0]
 8010978:	429a      	cmp	r2, r3
 801097a:	d005      	beq.n	8010988 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801097c:	2301      	movs	r3, #1
 801097e:	e086      	b.n	8010a8e <HAL_RCC_ClockConfig+0x34e>
 8010980:	52002000 	.word	0x52002000
 8010984:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	f003 0304 	and.w	r3, r3, #4
 8010990:	2b00      	cmp	r3, #0
 8010992:	d010      	beq.n	80109b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	691a      	ldr	r2, [r3, #16]
 8010998:	4b3f      	ldr	r3, [pc, #252]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 801099a:	699b      	ldr	r3, [r3, #24]
 801099c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d208      	bcs.n	80109b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80109a4:	4b3c      	ldr	r3, [pc, #240]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 80109a6:	699b      	ldr	r3, [r3, #24]
 80109a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	691b      	ldr	r3, [r3, #16]
 80109b0:	4939      	ldr	r1, [pc, #228]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 80109b2:	4313      	orrs	r3, r2
 80109b4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	f003 0308 	and.w	r3, r3, #8
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d010      	beq.n	80109e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	695a      	ldr	r2, [r3, #20]
 80109c6:	4b34      	ldr	r3, [pc, #208]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 80109c8:	69db      	ldr	r3, [r3, #28]
 80109ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d208      	bcs.n	80109e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80109d2:	4b31      	ldr	r3, [pc, #196]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 80109d4:	69db      	ldr	r3, [r3, #28]
 80109d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	695b      	ldr	r3, [r3, #20]
 80109de:	492e      	ldr	r1, [pc, #184]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 80109e0:	4313      	orrs	r3, r2
 80109e2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f003 0310 	and.w	r3, r3, #16
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d010      	beq.n	8010a12 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	699a      	ldr	r2, [r3, #24]
 80109f4:	4b28      	ldr	r3, [pc, #160]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 80109f6:	69db      	ldr	r3, [r3, #28]
 80109f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d208      	bcs.n	8010a12 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010a00:	4b25      	ldr	r3, [pc, #148]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 8010a02:	69db      	ldr	r3, [r3, #28]
 8010a04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	699b      	ldr	r3, [r3, #24]
 8010a0c:	4922      	ldr	r1, [pc, #136]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 8010a0e:	4313      	orrs	r3, r2
 8010a10:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f003 0320 	and.w	r3, r3, #32
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d010      	beq.n	8010a40 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	69da      	ldr	r2, [r3, #28]
 8010a22:	4b1d      	ldr	r3, [pc, #116]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 8010a24:	6a1b      	ldr	r3, [r3, #32]
 8010a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d208      	bcs.n	8010a40 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8010a2e:	4b1a      	ldr	r3, [pc, #104]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 8010a30:	6a1b      	ldr	r3, [r3, #32]
 8010a32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	69db      	ldr	r3, [r3, #28]
 8010a3a:	4917      	ldr	r1, [pc, #92]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 8010a3c:	4313      	orrs	r3, r2
 8010a3e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8010a40:	f000 f834 	bl	8010aac <HAL_RCC_GetSysClockFreq>
 8010a44:	4602      	mov	r2, r0
 8010a46:	4b14      	ldr	r3, [pc, #80]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 8010a48:	699b      	ldr	r3, [r3, #24]
 8010a4a:	0a1b      	lsrs	r3, r3, #8
 8010a4c:	f003 030f 	and.w	r3, r3, #15
 8010a50:	4912      	ldr	r1, [pc, #72]	; (8010a9c <HAL_RCC_ClockConfig+0x35c>)
 8010a52:	5ccb      	ldrb	r3, [r1, r3]
 8010a54:	f003 031f 	and.w	r3, r3, #31
 8010a58:	fa22 f303 	lsr.w	r3, r2, r3
 8010a5c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8010a5e:	4b0e      	ldr	r3, [pc, #56]	; (8010a98 <HAL_RCC_ClockConfig+0x358>)
 8010a60:	699b      	ldr	r3, [r3, #24]
 8010a62:	f003 030f 	and.w	r3, r3, #15
 8010a66:	4a0d      	ldr	r2, [pc, #52]	; (8010a9c <HAL_RCC_ClockConfig+0x35c>)
 8010a68:	5cd3      	ldrb	r3, [r2, r3]
 8010a6a:	f003 031f 	and.w	r3, r3, #31
 8010a6e:	693a      	ldr	r2, [r7, #16]
 8010a70:	fa22 f303 	lsr.w	r3, r2, r3
 8010a74:	4a0a      	ldr	r2, [pc, #40]	; (8010aa0 <HAL_RCC_ClockConfig+0x360>)
 8010a76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010a78:	4a0a      	ldr	r2, [pc, #40]	; (8010aa4 <HAL_RCC_ClockConfig+0x364>)
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8010a7e:	4b0a      	ldr	r3, [pc, #40]	; (8010aa8 <HAL_RCC_ClockConfig+0x368>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7f3 f8c4 	bl	8003c10 <HAL_InitTick>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8010a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3718      	adds	r7, #24
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	58024400 	.word	0x58024400
 8010a9c:	0802e3b4 	.word	0x0802e3b4
 8010aa0:	24000040 	.word	0x24000040
 8010aa4:	2400003c 	.word	0x2400003c
 8010aa8:	24000044 	.word	0x24000044

08010aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b089      	sub	sp, #36	; 0x24
 8010ab0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010ab2:	4bb3      	ldr	r3, [pc, #716]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010ab4:	691b      	ldr	r3, [r3, #16]
 8010ab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010aba:	2b18      	cmp	r3, #24
 8010abc:	f200 8155 	bhi.w	8010d6a <HAL_RCC_GetSysClockFreq+0x2be>
 8010ac0:	a201      	add	r2, pc, #4	; (adr r2, 8010ac8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8010ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac6:	bf00      	nop
 8010ac8:	08010b2d 	.word	0x08010b2d
 8010acc:	08010d6b 	.word	0x08010d6b
 8010ad0:	08010d6b 	.word	0x08010d6b
 8010ad4:	08010d6b 	.word	0x08010d6b
 8010ad8:	08010d6b 	.word	0x08010d6b
 8010adc:	08010d6b 	.word	0x08010d6b
 8010ae0:	08010d6b 	.word	0x08010d6b
 8010ae4:	08010d6b 	.word	0x08010d6b
 8010ae8:	08010b53 	.word	0x08010b53
 8010aec:	08010d6b 	.word	0x08010d6b
 8010af0:	08010d6b 	.word	0x08010d6b
 8010af4:	08010d6b 	.word	0x08010d6b
 8010af8:	08010d6b 	.word	0x08010d6b
 8010afc:	08010d6b 	.word	0x08010d6b
 8010b00:	08010d6b 	.word	0x08010d6b
 8010b04:	08010d6b 	.word	0x08010d6b
 8010b08:	08010b59 	.word	0x08010b59
 8010b0c:	08010d6b 	.word	0x08010d6b
 8010b10:	08010d6b 	.word	0x08010d6b
 8010b14:	08010d6b 	.word	0x08010d6b
 8010b18:	08010d6b 	.word	0x08010d6b
 8010b1c:	08010d6b 	.word	0x08010d6b
 8010b20:	08010d6b 	.word	0x08010d6b
 8010b24:	08010d6b 	.word	0x08010d6b
 8010b28:	08010b5f 	.word	0x08010b5f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b2c:	4b94      	ldr	r3, [pc, #592]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	f003 0320 	and.w	r3, r3, #32
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d009      	beq.n	8010b4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010b38:	4b91      	ldr	r3, [pc, #580]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	08db      	lsrs	r3, r3, #3
 8010b3e:	f003 0303 	and.w	r3, r3, #3
 8010b42:	4a90      	ldr	r2, [pc, #576]	; (8010d84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010b44:	fa22 f303 	lsr.w	r3, r2, r3
 8010b48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8010b4a:	e111      	b.n	8010d70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8010b4c:	4b8d      	ldr	r3, [pc, #564]	; (8010d84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010b4e:	61bb      	str	r3, [r7, #24]
    break;
 8010b50:	e10e      	b.n	8010d70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8010b52:	4b8d      	ldr	r3, [pc, #564]	; (8010d88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010b54:	61bb      	str	r3, [r7, #24]
    break;
 8010b56:	e10b      	b.n	8010d70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8010b58:	4b8c      	ldr	r3, [pc, #560]	; (8010d8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8010b5a:	61bb      	str	r3, [r7, #24]
    break;
 8010b5c:	e108      	b.n	8010d70 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010b5e:	4b88      	ldr	r3, [pc, #544]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b62:	f003 0303 	and.w	r3, r3, #3
 8010b66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8010b68:	4b85      	ldr	r3, [pc, #532]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b6c:	091b      	lsrs	r3, r3, #4
 8010b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8010b74:	4b82      	ldr	r3, [pc, #520]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b78:	f003 0301 	and.w	r3, r3, #1
 8010b7c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010b7e:	4b80      	ldr	r3, [pc, #512]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b82:	08db      	lsrs	r3, r3, #3
 8010b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b88:	68fa      	ldr	r2, [r7, #12]
 8010b8a:	fb02 f303 	mul.w	r3, r2, r3
 8010b8e:	ee07 3a90 	vmov	s15, r3
 8010b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b96:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	f000 80e1 	beq.w	8010d64 <HAL_RCC_GetSysClockFreq+0x2b8>
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	2b02      	cmp	r3, #2
 8010ba6:	f000 8083 	beq.w	8010cb0 <HAL_RCC_GetSysClockFreq+0x204>
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	2b02      	cmp	r3, #2
 8010bae:	f200 80a1 	bhi.w	8010cf4 <HAL_RCC_GetSysClockFreq+0x248>
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d003      	beq.n	8010bc0 <HAL_RCC_GetSysClockFreq+0x114>
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d056      	beq.n	8010c6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8010bbe:	e099      	b.n	8010cf4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010bc0:	4b6f      	ldr	r3, [pc, #444]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f003 0320 	and.w	r3, r3, #32
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d02d      	beq.n	8010c28 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010bcc:	4b6c      	ldr	r3, [pc, #432]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	08db      	lsrs	r3, r3, #3
 8010bd2:	f003 0303 	and.w	r3, r3, #3
 8010bd6:	4a6b      	ldr	r2, [pc, #428]	; (8010d84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8010bdc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	ee07 3a90 	vmov	s15, r3
 8010be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	ee07 3a90 	vmov	s15, r3
 8010bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bf6:	4b62      	ldr	r3, [pc, #392]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bfe:	ee07 3a90 	vmov	s15, r3
 8010c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8010c0a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8010d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8010c26:	e087      	b.n	8010d38 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	ee07 3a90 	vmov	s15, r3
 8010c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c32:	eddf 6a58 	vldr	s13, [pc, #352]	; 8010d94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8010c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c3a:	4b51      	ldr	r3, [pc, #324]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c42:	ee07 3a90 	vmov	s15, r3
 8010c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8010c4e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8010d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c6a:	e065      	b.n	8010d38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	ee07 3a90 	vmov	s15, r3
 8010c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c76:	eddf 6a48 	vldr	s13, [pc, #288]	; 8010d98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8010c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c7e:	4b40      	ldr	r3, [pc, #256]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c86:	ee07 3a90 	vmov	s15, r3
 8010c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8010c92:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8010d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010cae:	e043      	b.n	8010d38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	ee07 3a90 	vmov	s15, r3
 8010cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cba:	eddf 6a38 	vldr	s13, [pc, #224]	; 8010d9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8010cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010cc2:	4b2f      	ldr	r3, [pc, #188]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cca:	ee07 3a90 	vmov	s15, r3
 8010cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8010cd6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8010d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010cf2:	e021      	b.n	8010d38 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	ee07 3a90 	vmov	s15, r3
 8010cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cfe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010d98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8010d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d06:	4b1e      	ldr	r3, [pc, #120]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d0e:	ee07 3a90 	vmov	s15, r3
 8010d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8010d1a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8010d90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010d36:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8010d38:	4b11      	ldr	r3, [pc, #68]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d3c:	0a5b      	lsrs	r3, r3, #9
 8010d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d42:	3301      	adds	r3, #1
 8010d44:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	ee07 3a90 	vmov	s15, r3
 8010d4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010d50:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d5c:	ee17 3a90 	vmov	r3, s15
 8010d60:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8010d62:	e005      	b.n	8010d70 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8010d64:	2300      	movs	r3, #0
 8010d66:	61bb      	str	r3, [r7, #24]
    break;
 8010d68:	e002      	b.n	8010d70 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8010d6a:	4b07      	ldr	r3, [pc, #28]	; (8010d88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010d6c:	61bb      	str	r3, [r7, #24]
    break;
 8010d6e:	bf00      	nop
  }

  return sysclockfreq;
 8010d70:	69bb      	ldr	r3, [r7, #24]
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3724      	adds	r7, #36	; 0x24
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr
 8010d7e:	bf00      	nop
 8010d80:	58024400 	.word	0x58024400
 8010d84:	03d09000 	.word	0x03d09000
 8010d88:	003d0900 	.word	0x003d0900
 8010d8c:	016e3600 	.word	0x016e3600
 8010d90:	46000000 	.word	0x46000000
 8010d94:	4c742400 	.word	0x4c742400
 8010d98:	4a742400 	.word	0x4a742400
 8010d9c:	4bb71b00 	.word	0x4bb71b00

08010da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8010da6:	f7ff fe81 	bl	8010aac <HAL_RCC_GetSysClockFreq>
 8010daa:	4602      	mov	r2, r0
 8010dac:	4b10      	ldr	r3, [pc, #64]	; (8010df0 <HAL_RCC_GetHCLKFreq+0x50>)
 8010dae:	699b      	ldr	r3, [r3, #24]
 8010db0:	0a1b      	lsrs	r3, r3, #8
 8010db2:	f003 030f 	and.w	r3, r3, #15
 8010db6:	490f      	ldr	r1, [pc, #60]	; (8010df4 <HAL_RCC_GetHCLKFreq+0x54>)
 8010db8:	5ccb      	ldrb	r3, [r1, r3]
 8010dba:	f003 031f 	and.w	r3, r3, #31
 8010dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8010dc2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8010dc4:	4b0a      	ldr	r3, [pc, #40]	; (8010df0 <HAL_RCC_GetHCLKFreq+0x50>)
 8010dc6:	699b      	ldr	r3, [r3, #24]
 8010dc8:	f003 030f 	and.w	r3, r3, #15
 8010dcc:	4a09      	ldr	r2, [pc, #36]	; (8010df4 <HAL_RCC_GetHCLKFreq+0x54>)
 8010dce:	5cd3      	ldrb	r3, [r2, r3]
 8010dd0:	f003 031f 	and.w	r3, r3, #31
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8010dda:	4a07      	ldr	r2, [pc, #28]	; (8010df8 <HAL_RCC_GetHCLKFreq+0x58>)
 8010ddc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010dde:	4a07      	ldr	r2, [pc, #28]	; (8010dfc <HAL_RCC_GetHCLKFreq+0x5c>)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8010de4:	4b04      	ldr	r3, [pc, #16]	; (8010df8 <HAL_RCC_GetHCLKFreq+0x58>)
 8010de6:	681b      	ldr	r3, [r3, #0]
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	3708      	adds	r7, #8
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}
 8010df0:	58024400 	.word	0x58024400
 8010df4:	0802e3b4 	.word	0x0802e3b4
 8010df8:	24000040 	.word	0x24000040
 8010dfc:	2400003c 	.word	0x2400003c

08010e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8010e04:	f7ff ffcc 	bl	8010da0 <HAL_RCC_GetHCLKFreq>
 8010e08:	4602      	mov	r2, r0
 8010e0a:	4b06      	ldr	r3, [pc, #24]	; (8010e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010e0c:	69db      	ldr	r3, [r3, #28]
 8010e0e:	091b      	lsrs	r3, r3, #4
 8010e10:	f003 0307 	and.w	r3, r3, #7
 8010e14:	4904      	ldr	r1, [pc, #16]	; (8010e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010e16:	5ccb      	ldrb	r3, [r1, r3]
 8010e18:	f003 031f 	and.w	r3, r3, #31
 8010e1c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	bd80      	pop	{r7, pc}
 8010e24:	58024400 	.word	0x58024400
 8010e28:	0802e3b4 	.word	0x0802e3b4

08010e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8010e30:	f7ff ffb6 	bl	8010da0 <HAL_RCC_GetHCLKFreq>
 8010e34:	4602      	mov	r2, r0
 8010e36:	4b06      	ldr	r3, [pc, #24]	; (8010e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010e38:	69db      	ldr	r3, [r3, #28]
 8010e3a:	0a1b      	lsrs	r3, r3, #8
 8010e3c:	f003 0307 	and.w	r3, r3, #7
 8010e40:	4904      	ldr	r1, [pc, #16]	; (8010e54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010e42:	5ccb      	ldrb	r3, [r1, r3]
 8010e44:	f003 031f 	and.w	r3, r3, #31
 8010e48:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	bd80      	pop	{r7, pc}
 8010e50:	58024400 	.word	0x58024400
 8010e54:	0802e3b4 	.word	0x0802e3b4

08010e58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b083      	sub	sp, #12
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	223f      	movs	r2, #63	; 0x3f
 8010e66:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010e68:	4b1a      	ldr	r3, [pc, #104]	; (8010ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8010e6a:	691b      	ldr	r3, [r3, #16]
 8010e6c:	f003 0207 	and.w	r2, r3, #7
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8010e74:	4b17      	ldr	r3, [pc, #92]	; (8010ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8010e76:	699b      	ldr	r3, [r3, #24]
 8010e78:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8010e80:	4b14      	ldr	r3, [pc, #80]	; (8010ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8010e82:	699b      	ldr	r3, [r3, #24]
 8010e84:	f003 020f 	and.w	r2, r3, #15
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8010e8c:	4b11      	ldr	r3, [pc, #68]	; (8010ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8010e8e:	699b      	ldr	r3, [r3, #24]
 8010e90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8010e98:	4b0e      	ldr	r3, [pc, #56]	; (8010ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8010e9a:	69db      	ldr	r3, [r3, #28]
 8010e9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8010ea4:	4b0b      	ldr	r3, [pc, #44]	; (8010ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8010ea6:	69db      	ldr	r3, [r3, #28]
 8010ea8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8010eb0:	4b08      	ldr	r3, [pc, #32]	; (8010ed4 <HAL_RCC_GetClockConfig+0x7c>)
 8010eb2:	6a1b      	ldr	r3, [r3, #32]
 8010eb4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010ebc:	4b06      	ldr	r3, [pc, #24]	; (8010ed8 <HAL_RCC_GetClockConfig+0x80>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	f003 020f 	and.w	r2, r3, #15
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	601a      	str	r2, [r3, #0]
}
 8010ec8:	bf00      	nop
 8010eca:	370c      	adds	r7, #12
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed2:	4770      	bx	lr
 8010ed4:	58024400 	.word	0x58024400
 8010ed8:	52002000 	.word	0x52002000

08010edc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b086      	sub	sp, #24
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010ee8:	2300      	movs	r3, #0
 8010eea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d03f      	beq.n	8010f78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010efc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010f00:	d02a      	beq.n	8010f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010f02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010f06:	d824      	bhi.n	8010f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010f0c:	d018      	beq.n	8010f40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010f12:	d81e      	bhi.n	8010f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d003      	beq.n	8010f20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8010f18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010f1c:	d007      	beq.n	8010f2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8010f1e:	e018      	b.n	8010f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010f20:	4ba6      	ldr	r3, [pc, #664]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f24:	4aa5      	ldr	r2, [pc, #660]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010f2c:	e015      	b.n	8010f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	3304      	adds	r3, #4
 8010f32:	2102      	movs	r1, #2
 8010f34:	4618      	mov	r0, r3
 8010f36:	f001 ff17 	bl	8012d68 <RCCEx_PLL2_Config>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010f3e:	e00c      	b.n	8010f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	3324      	adds	r3, #36	; 0x24
 8010f44:	2102      	movs	r1, #2
 8010f46:	4618      	mov	r0, r3
 8010f48:	f001 ffc0 	bl	8012ecc <RCCEx_PLL3_Config>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010f50:	e003      	b.n	8010f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010f52:	2301      	movs	r3, #1
 8010f54:	75fb      	strb	r3, [r7, #23]
      break;
 8010f56:	e000      	b.n	8010f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8010f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010f5a:	7dfb      	ldrb	r3, [r7, #23]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d109      	bne.n	8010f74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8010f60:	4b96      	ldr	r3, [pc, #600]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010f6c:	4993      	ldr	r1, [pc, #588]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010f6e:	4313      	orrs	r3, r2
 8010f70:	650b      	str	r3, [r1, #80]	; 0x50
 8010f72:	e001      	b.n	8010f78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010f74:	7dfb      	ldrb	r3, [r7, #23]
 8010f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d03d      	beq.n	8011000 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f88:	2b04      	cmp	r3, #4
 8010f8a:	d826      	bhi.n	8010fda <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8010f8c:	a201      	add	r2, pc, #4	; (adr r2, 8010f94 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8010f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f92:	bf00      	nop
 8010f94:	08010fa9 	.word	0x08010fa9
 8010f98:	08010fb7 	.word	0x08010fb7
 8010f9c:	08010fc9 	.word	0x08010fc9
 8010fa0:	08010fe1 	.word	0x08010fe1
 8010fa4:	08010fe1 	.word	0x08010fe1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010fa8:	4b84      	ldr	r3, [pc, #528]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fac:	4a83      	ldr	r2, [pc, #524]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010fb4:	e015      	b.n	8010fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	3304      	adds	r3, #4
 8010fba:	2100      	movs	r1, #0
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f001 fed3 	bl	8012d68 <RCCEx_PLL2_Config>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010fc6:	e00c      	b.n	8010fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	3324      	adds	r3, #36	; 0x24
 8010fcc:	2100      	movs	r1, #0
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f001 ff7c 	bl	8012ecc <RCCEx_PLL3_Config>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010fd8:	e003      	b.n	8010fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010fda:	2301      	movs	r3, #1
 8010fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8010fde:	e000      	b.n	8010fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8010fe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010fe2:	7dfb      	ldrb	r3, [r7, #23]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d109      	bne.n	8010ffc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010fe8:	4b74      	ldr	r3, [pc, #464]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fec:	f023 0207 	bic.w	r2, r3, #7
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ff4:	4971      	ldr	r1, [pc, #452]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8010ff6:	4313      	orrs	r3, r2
 8010ff8:	650b      	str	r3, [r1, #80]	; 0x50
 8010ffa:	e001      	b.n	8011000 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ffc:	7dfb      	ldrb	r3, [r7, #23]
 8010ffe:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011008:	2b00      	cmp	r3, #0
 801100a:	d04a      	beq.n	80110a2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011010:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8011014:	d031      	beq.n	801107a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8011016:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801101a:	d82b      	bhi.n	8011074 <HAL_RCCEx_PeriphCLKConfig+0x198>
 801101c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011020:	d02d      	beq.n	801107e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8011022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011026:	d825      	bhi.n	8011074 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8011028:	2bc0      	cmp	r3, #192	; 0xc0
 801102a:	d02a      	beq.n	8011082 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 801102c:	2bc0      	cmp	r3, #192	; 0xc0
 801102e:	d821      	bhi.n	8011074 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8011030:	2b80      	cmp	r3, #128	; 0x80
 8011032:	d016      	beq.n	8011062 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8011034:	2b80      	cmp	r3, #128	; 0x80
 8011036:	d81d      	bhi.n	8011074 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8011038:	2b00      	cmp	r3, #0
 801103a:	d002      	beq.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x166>
 801103c:	2b40      	cmp	r3, #64	; 0x40
 801103e:	d007      	beq.n	8011050 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8011040:	e018      	b.n	8011074 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011042:	4b5e      	ldr	r3, [pc, #376]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011046:	4a5d      	ldr	r2, [pc, #372]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801104c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 801104e:	e019      	b.n	8011084 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	3304      	adds	r3, #4
 8011054:	2100      	movs	r1, #0
 8011056:	4618      	mov	r0, r3
 8011058:	f001 fe86 	bl	8012d68 <RCCEx_PLL2_Config>
 801105c:	4603      	mov	r3, r0
 801105e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8011060:	e010      	b.n	8011084 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	3324      	adds	r3, #36	; 0x24
 8011066:	2100      	movs	r1, #0
 8011068:	4618      	mov	r0, r3
 801106a:	f001 ff2f 	bl	8012ecc <RCCEx_PLL3_Config>
 801106e:	4603      	mov	r3, r0
 8011070:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8011072:	e007      	b.n	8011084 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011074:	2301      	movs	r3, #1
 8011076:	75fb      	strb	r3, [r7, #23]
      break;
 8011078:	e004      	b.n	8011084 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 801107a:	bf00      	nop
 801107c:	e002      	b.n	8011084 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 801107e:	bf00      	nop
 8011080:	e000      	b.n	8011084 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8011082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011084:	7dfb      	ldrb	r3, [r7, #23]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d109      	bne.n	801109e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 801108a:	4b4c      	ldr	r3, [pc, #304]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 801108c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801108e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011096:	4949      	ldr	r1, [pc, #292]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011098:	4313      	orrs	r3, r2
 801109a:	650b      	str	r3, [r1, #80]	; 0x50
 801109c:	e001      	b.n	80110a2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801109e:	7dfb      	ldrb	r3, [r7, #23]
 80110a0:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d04f      	beq.n	801114e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110b2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80110b6:	d036      	beq.n	8011126 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80110b8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80110bc:	d830      	bhi.n	8011120 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80110be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80110c2:	d032      	beq.n	801112a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80110c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80110c8:	d82a      	bhi.n	8011120 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80110ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80110ce:	d02e      	beq.n	801112e <HAL_RCCEx_PeriphCLKConfig+0x252>
 80110d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80110d4:	d824      	bhi.n	8011120 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80110d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110da:	d018      	beq.n	801110e <HAL_RCCEx_PeriphCLKConfig+0x232>
 80110dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110e0:	d81e      	bhi.n	8011120 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d003      	beq.n	80110ee <HAL_RCCEx_PeriphCLKConfig+0x212>
 80110e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110ea:	d007      	beq.n	80110fc <HAL_RCCEx_PeriphCLKConfig+0x220>
 80110ec:	e018      	b.n	8011120 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80110ee:	4b33      	ldr	r3, [pc, #204]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80110f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110f2:	4a32      	ldr	r2, [pc, #200]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80110f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80110f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80110fa:	e019      	b.n	8011130 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	3304      	adds	r3, #4
 8011100:	2100      	movs	r1, #0
 8011102:	4618      	mov	r0, r3
 8011104:	f001 fe30 	bl	8012d68 <RCCEx_PLL2_Config>
 8011108:	4603      	mov	r3, r0
 801110a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 801110c:	e010      	b.n	8011130 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	3324      	adds	r3, #36	; 0x24
 8011112:	2100      	movs	r1, #0
 8011114:	4618      	mov	r0, r3
 8011116:	f001 fed9 	bl	8012ecc <RCCEx_PLL3_Config>
 801111a:	4603      	mov	r3, r0
 801111c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 801111e:	e007      	b.n	8011130 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011120:	2301      	movs	r3, #1
 8011122:	75fb      	strb	r3, [r7, #23]
      break;
 8011124:	e004      	b.n	8011130 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8011126:	bf00      	nop
 8011128:	e002      	b.n	8011130 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 801112a:	bf00      	nop
 801112c:	e000      	b.n	8011130 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 801112e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011130:	7dfb      	ldrb	r3, [r7, #23]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d109      	bne.n	801114a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8011136:	4b21      	ldr	r3, [pc, #132]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801113a:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011142:	491e      	ldr	r1, [pc, #120]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011144:	4313      	orrs	r3, r2
 8011146:	650b      	str	r3, [r1, #80]	; 0x50
 8011148:	e001      	b.n	801114e <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801114a:	7dfb      	ldrb	r3, [r7, #23]
 801114c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011156:	2b00      	cmp	r3, #0
 8011158:	d034      	beq.n	80111c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801115e:	2b30      	cmp	r3, #48	; 0x30
 8011160:	d01c      	beq.n	801119c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8011162:	2b30      	cmp	r3, #48	; 0x30
 8011164:	d817      	bhi.n	8011196 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8011166:	2b20      	cmp	r3, #32
 8011168:	d00c      	beq.n	8011184 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801116a:	2b20      	cmp	r3, #32
 801116c:	d813      	bhi.n	8011196 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 801116e:	2b00      	cmp	r3, #0
 8011170:	d016      	beq.n	80111a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8011172:	2b10      	cmp	r3, #16
 8011174:	d10f      	bne.n	8011196 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011176:	4b11      	ldr	r3, [pc, #68]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8011178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801117a:	4a10      	ldr	r2, [pc, #64]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 801117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011180:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8011182:	e00e      	b.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	3304      	adds	r3, #4
 8011188:	2102      	movs	r1, #2
 801118a:	4618      	mov	r0, r3
 801118c:	f001 fdec 	bl	8012d68 <RCCEx_PLL2_Config>
 8011190:	4603      	mov	r3, r0
 8011192:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8011194:	e005      	b.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011196:	2301      	movs	r3, #1
 8011198:	75fb      	strb	r3, [r7, #23]
      break;
 801119a:	e002      	b.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 801119c:	bf00      	nop
 801119e:	e000      	b.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80111a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80111a2:	7dfb      	ldrb	r3, [r7, #23]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d10b      	bne.n	80111c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80111a8:	4b04      	ldr	r3, [pc, #16]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80111aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80111b4:	4901      	ldr	r1, [pc, #4]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80111b6:	4313      	orrs	r3, r2
 80111b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80111ba:	e003      	b.n	80111c4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80111bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80111c0:	7dfb      	ldrb	r3, [r7, #23]
 80111c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d047      	beq.n	8011260 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80111d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80111d8:	d030      	beq.n	801123c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80111da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80111de:	d82a      	bhi.n	8011236 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80111e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80111e4:	d02c      	beq.n	8011240 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80111e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80111ea:	d824      	bhi.n	8011236 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80111ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80111f0:	d018      	beq.n	8011224 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80111f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80111f6:	d81e      	bhi.n	8011236 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d003      	beq.n	8011204 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80111fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011200:	d007      	beq.n	8011212 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8011202:	e018      	b.n	8011236 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011204:	4bb0      	ldr	r3, [pc, #704]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011208:	4aaf      	ldr	r2, [pc, #700]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801120a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801120e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8011210:	e017      	b.n	8011242 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	3304      	adds	r3, #4
 8011216:	2100      	movs	r1, #0
 8011218:	4618      	mov	r0, r3
 801121a:	f001 fda5 	bl	8012d68 <RCCEx_PLL2_Config>
 801121e:	4603      	mov	r3, r0
 8011220:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8011222:	e00e      	b.n	8011242 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	3324      	adds	r3, #36	; 0x24
 8011228:	2100      	movs	r1, #0
 801122a:	4618      	mov	r0, r3
 801122c:	f001 fe4e 	bl	8012ecc <RCCEx_PLL3_Config>
 8011230:	4603      	mov	r3, r0
 8011232:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8011234:	e005      	b.n	8011242 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011236:	2301      	movs	r3, #1
 8011238:	75fb      	strb	r3, [r7, #23]
      break;
 801123a:	e002      	b.n	8011242 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 801123c:	bf00      	nop
 801123e:	e000      	b.n	8011242 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8011240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011242:	7dfb      	ldrb	r3, [r7, #23]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d109      	bne.n	801125c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8011248:	4b9f      	ldr	r3, [pc, #636]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801124a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801124c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011254:	499c      	ldr	r1, [pc, #624]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011256:	4313      	orrs	r3, r2
 8011258:	650b      	str	r3, [r1, #80]	; 0x50
 801125a:	e001      	b.n	8011260 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801125c:	7dfb      	ldrb	r3, [r7, #23]
 801125e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011268:	2b00      	cmp	r3, #0
 801126a:	d049      	beq.n	8011300 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011274:	d02e      	beq.n	80112d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8011276:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801127a:	d828      	bhi.n	80112ce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 801127c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011280:	d02a      	beq.n	80112d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8011282:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011286:	d822      	bhi.n	80112ce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8011288:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801128c:	d026      	beq.n	80112dc <HAL_RCCEx_PeriphCLKConfig+0x400>
 801128e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011292:	d81c      	bhi.n	80112ce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8011294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011298:	d010      	beq.n	80112bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 801129a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801129e:	d816      	bhi.n	80112ce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d01d      	beq.n	80112e0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80112a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112a8:	d111      	bne.n	80112ce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	3304      	adds	r3, #4
 80112ae:	2101      	movs	r1, #1
 80112b0:	4618      	mov	r0, r3
 80112b2:	f001 fd59 	bl	8012d68 <RCCEx_PLL2_Config>
 80112b6:	4603      	mov	r3, r0
 80112b8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80112ba:	e012      	b.n	80112e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	3324      	adds	r3, #36	; 0x24
 80112c0:	2101      	movs	r1, #1
 80112c2:	4618      	mov	r0, r3
 80112c4:	f001 fe02 	bl	8012ecc <RCCEx_PLL3_Config>
 80112c8:	4603      	mov	r3, r0
 80112ca:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80112cc:	e009      	b.n	80112e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80112ce:	2301      	movs	r3, #1
 80112d0:	75fb      	strb	r3, [r7, #23]
      break;
 80112d2:	e006      	b.n	80112e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80112d4:	bf00      	nop
 80112d6:	e004      	b.n	80112e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80112d8:	bf00      	nop
 80112da:	e002      	b.n	80112e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80112dc:	bf00      	nop
 80112de:	e000      	b.n	80112e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80112e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80112e2:	7dfb      	ldrb	r3, [r7, #23]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d109      	bne.n	80112fc <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80112e8:	4b77      	ldr	r3, [pc, #476]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80112ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112ec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80112f4:	4974      	ldr	r1, [pc, #464]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80112f6:	4313      	orrs	r3, r2
 80112f8:	650b      	str	r3, [r1, #80]	; 0x50
 80112fa:	e001      	b.n	8011300 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80112fc:	7dfb      	ldrb	r3, [r7, #23]
 80112fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011308:	2b00      	cmp	r3, #0
 801130a:	d053      	beq.n	80113b4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011312:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8011316:	d034      	beq.n	8011382 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8011318:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 801131c:	d82e      	bhi.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 801131e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011322:	d030      	beq.n	8011386 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8011324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011328:	d828      	bhi.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 801132a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801132e:	d02c      	beq.n	801138a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8011330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011334:	d822      	bhi.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8011336:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801133a:	d028      	beq.n	801138e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 801133c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011340:	d81c      	bhi.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8011342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011346:	d010      	beq.n	801136a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8011348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801134c:	d816      	bhi.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 801134e:	2b00      	cmp	r3, #0
 8011350:	d01f      	beq.n	8011392 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8011352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011356:	d111      	bne.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	3304      	adds	r3, #4
 801135c:	2101      	movs	r1, #1
 801135e:	4618      	mov	r0, r3
 8011360:	f001 fd02 	bl	8012d68 <RCCEx_PLL2_Config>
 8011364:	4603      	mov	r3, r0
 8011366:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011368:	e014      	b.n	8011394 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	3324      	adds	r3, #36	; 0x24
 801136e:	2101      	movs	r1, #1
 8011370:	4618      	mov	r0, r3
 8011372:	f001 fdab 	bl	8012ecc <RCCEx_PLL3_Config>
 8011376:	4603      	mov	r3, r0
 8011378:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801137a:	e00b      	b.n	8011394 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 801137c:	2301      	movs	r3, #1
 801137e:	75fb      	strb	r3, [r7, #23]
      break;
 8011380:	e008      	b.n	8011394 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8011382:	bf00      	nop
 8011384:	e006      	b.n	8011394 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8011386:	bf00      	nop
 8011388:	e004      	b.n	8011394 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 801138a:	bf00      	nop
 801138c:	e002      	b.n	8011394 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 801138e:	bf00      	nop
 8011390:	e000      	b.n	8011394 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8011392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011394:	7dfb      	ldrb	r3, [r7, #23]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d10a      	bne.n	80113b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801139a:	4b4b      	ldr	r3, [pc, #300]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801139e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80113a8:	4947      	ldr	r1, [pc, #284]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80113aa:	4313      	orrs	r3, r2
 80113ac:	658b      	str	r3, [r1, #88]	; 0x58
 80113ae:	e001      	b.n	80113b4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80113b0:	7dfb      	ldrb	r3, [r7, #23]
 80113b2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d02f      	beq.n	8011420 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80113c8:	d00e      	beq.n	80113e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80113ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80113ce:	d814      	bhi.n	80113fa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d015      	beq.n	8011400 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80113d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80113d8:	d10f      	bne.n	80113fa <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80113da:	4b3b      	ldr	r3, [pc, #236]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80113dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113de:	4a3a      	ldr	r2, [pc, #232]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80113e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80113e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80113e6:	e00c      	b.n	8011402 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	3304      	adds	r3, #4
 80113ec:	2101      	movs	r1, #1
 80113ee:	4618      	mov	r0, r3
 80113f0:	f001 fcba 	bl	8012d68 <RCCEx_PLL2_Config>
 80113f4:	4603      	mov	r3, r0
 80113f6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80113f8:	e003      	b.n	8011402 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80113fa:	2301      	movs	r3, #1
 80113fc:	75fb      	strb	r3, [r7, #23]
      break;
 80113fe:	e000      	b.n	8011402 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8011400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011402:	7dfb      	ldrb	r3, [r7, #23]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d109      	bne.n	801141c <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8011408:	4b2f      	ldr	r3, [pc, #188]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801140a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801140c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011414:	492c      	ldr	r1, [pc, #176]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011416:	4313      	orrs	r3, r2
 8011418:	650b      	str	r3, [r1, #80]	; 0x50
 801141a:	e001      	b.n	8011420 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801141c:	7dfb      	ldrb	r3, [r7, #23]
 801141e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011428:	2b00      	cmp	r3, #0
 801142a:	d032      	beq.n	8011492 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011430:	2b03      	cmp	r3, #3
 8011432:	d81b      	bhi.n	801146c <HAL_RCCEx_PeriphCLKConfig+0x590>
 8011434:	a201      	add	r2, pc, #4	; (adr r2, 801143c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8011436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801143a:	bf00      	nop
 801143c:	08011473 	.word	0x08011473
 8011440:	0801144d 	.word	0x0801144d
 8011444:	0801145b 	.word	0x0801145b
 8011448:	08011473 	.word	0x08011473
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801144c:	4b1e      	ldr	r3, [pc, #120]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011450:	4a1d      	ldr	r2, [pc, #116]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011458:	e00c      	b.n	8011474 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	3304      	adds	r3, #4
 801145e:	2102      	movs	r1, #2
 8011460:	4618      	mov	r0, r3
 8011462:	f001 fc81 	bl	8012d68 <RCCEx_PLL2_Config>
 8011466:	4603      	mov	r3, r0
 8011468:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 801146a:	e003      	b.n	8011474 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801146c:	2301      	movs	r3, #1
 801146e:	75fb      	strb	r3, [r7, #23]
      break;
 8011470:	e000      	b.n	8011474 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8011472:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011474:	7dfb      	ldrb	r3, [r7, #23]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d109      	bne.n	801148e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801147a:	4b13      	ldr	r3, [pc, #76]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 801147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801147e:	f023 0203 	bic.w	r2, r3, #3
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011486:	4910      	ldr	r1, [pc, #64]	; (80114c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8011488:	4313      	orrs	r3, r2
 801148a:	64cb      	str	r3, [r1, #76]	; 0x4c
 801148c:	e001      	b.n	8011492 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801148e:	7dfb      	ldrb	r3, [r7, #23]
 8011490:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801149a:	2b00      	cmp	r3, #0
 801149c:	f000 808a 	beq.w	80115b4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80114a0:	4b0a      	ldr	r3, [pc, #40]	; (80114cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	4a09      	ldr	r2, [pc, #36]	; (80114cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80114a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80114aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80114ac:	f7fa f80e 	bl	800b4cc <HAL_GetTick>
 80114b0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80114b2:	e00d      	b.n	80114d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80114b4:	f7fa f80a 	bl	800b4cc <HAL_GetTick>
 80114b8:	4602      	mov	r2, r0
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	1ad3      	subs	r3, r2, r3
 80114be:	2b64      	cmp	r3, #100	; 0x64
 80114c0:	d906      	bls.n	80114d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80114c2:	2303      	movs	r3, #3
 80114c4:	75fb      	strb	r3, [r7, #23]
        break;
 80114c6:	e009      	b.n	80114dc <HAL_RCCEx_PeriphCLKConfig+0x600>
 80114c8:	58024400 	.word	0x58024400
 80114cc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80114d0:	4bba      	ldr	r3, [pc, #744]	; (80117bc <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d0eb      	beq.n	80114b4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 80114dc:	7dfb      	ldrb	r3, [r7, #23]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d166      	bne.n	80115b0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80114e2:	4bb7      	ldr	r3, [pc, #732]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80114e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80114ec:	4053      	eors	r3, r2
 80114ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d013      	beq.n	801151e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80114f6:	4bb2      	ldr	r3, [pc, #712]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80114f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80114fe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011500:	4baf      	ldr	r3, [pc, #700]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011504:	4aae      	ldr	r2, [pc, #696]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801150a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801150c:	4bac      	ldr	r3, [pc, #688]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011510:	4aab      	ldr	r2, [pc, #684]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011516:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8011518:	4aa9      	ldr	r2, [pc, #676]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011528:	d115      	bne.n	8011556 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801152a:	f7f9 ffcf 	bl	800b4cc <HAL_GetTick>
 801152e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011530:	e00b      	b.n	801154a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011532:	f7f9 ffcb 	bl	800b4cc <HAL_GetTick>
 8011536:	4602      	mov	r2, r0
 8011538:	693b      	ldr	r3, [r7, #16]
 801153a:	1ad3      	subs	r3, r2, r3
 801153c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011540:	4293      	cmp	r3, r2
 8011542:	d902      	bls.n	801154a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8011544:	2303      	movs	r3, #3
 8011546:	75fb      	strb	r3, [r7, #23]
            break;
 8011548:	e005      	b.n	8011556 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801154a:	4b9d      	ldr	r3, [pc, #628]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801154e:	f003 0302 	and.w	r3, r3, #2
 8011552:	2b00      	cmp	r3, #0
 8011554:	d0ed      	beq.n	8011532 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8011556:	7dfb      	ldrb	r3, [r7, #23]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d126      	bne.n	80115aa <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801156a:	d10d      	bne.n	8011588 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 801156c:	4b94      	ldr	r3, [pc, #592]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801156e:	691b      	ldr	r3, [r3, #16]
 8011570:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801157a:	0919      	lsrs	r1, r3, #4
 801157c:	4b91      	ldr	r3, [pc, #580]	; (80117c4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801157e:	400b      	ands	r3, r1
 8011580:	498f      	ldr	r1, [pc, #572]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011582:	4313      	orrs	r3, r2
 8011584:	610b      	str	r3, [r1, #16]
 8011586:	e005      	b.n	8011594 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8011588:	4b8d      	ldr	r3, [pc, #564]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801158a:	691b      	ldr	r3, [r3, #16]
 801158c:	4a8c      	ldr	r2, [pc, #560]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 801158e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011592:	6113      	str	r3, [r2, #16]
 8011594:	4b8a      	ldr	r3, [pc, #552]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011596:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801159e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80115a2:	4987      	ldr	r1, [pc, #540]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80115a4:	4313      	orrs	r3, r2
 80115a6:	670b      	str	r3, [r1, #112]	; 0x70
 80115a8:	e004      	b.n	80115b4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80115aa:	7dfb      	ldrb	r3, [r7, #23]
 80115ac:	75bb      	strb	r3, [r7, #22]
 80115ae:	e001      	b.n	80115b4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80115b0:	7dfb      	ldrb	r3, [r7, #23]
 80115b2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	f003 0301 	and.w	r3, r3, #1
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d07f      	beq.n	80116c0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80115c6:	2b28      	cmp	r3, #40	; 0x28
 80115c8:	d866      	bhi.n	8011698 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80115ca:	a201      	add	r2, pc, #4	; (adr r2, 80115d0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80115cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115d0:	0801169f 	.word	0x0801169f
 80115d4:	08011699 	.word	0x08011699
 80115d8:	08011699 	.word	0x08011699
 80115dc:	08011699 	.word	0x08011699
 80115e0:	08011699 	.word	0x08011699
 80115e4:	08011699 	.word	0x08011699
 80115e8:	08011699 	.word	0x08011699
 80115ec:	08011699 	.word	0x08011699
 80115f0:	08011675 	.word	0x08011675
 80115f4:	08011699 	.word	0x08011699
 80115f8:	08011699 	.word	0x08011699
 80115fc:	08011699 	.word	0x08011699
 8011600:	08011699 	.word	0x08011699
 8011604:	08011699 	.word	0x08011699
 8011608:	08011699 	.word	0x08011699
 801160c:	08011699 	.word	0x08011699
 8011610:	08011687 	.word	0x08011687
 8011614:	08011699 	.word	0x08011699
 8011618:	08011699 	.word	0x08011699
 801161c:	08011699 	.word	0x08011699
 8011620:	08011699 	.word	0x08011699
 8011624:	08011699 	.word	0x08011699
 8011628:	08011699 	.word	0x08011699
 801162c:	08011699 	.word	0x08011699
 8011630:	0801169f 	.word	0x0801169f
 8011634:	08011699 	.word	0x08011699
 8011638:	08011699 	.word	0x08011699
 801163c:	08011699 	.word	0x08011699
 8011640:	08011699 	.word	0x08011699
 8011644:	08011699 	.word	0x08011699
 8011648:	08011699 	.word	0x08011699
 801164c:	08011699 	.word	0x08011699
 8011650:	0801169f 	.word	0x0801169f
 8011654:	08011699 	.word	0x08011699
 8011658:	08011699 	.word	0x08011699
 801165c:	08011699 	.word	0x08011699
 8011660:	08011699 	.word	0x08011699
 8011664:	08011699 	.word	0x08011699
 8011668:	08011699 	.word	0x08011699
 801166c:	08011699 	.word	0x08011699
 8011670:	0801169f 	.word	0x0801169f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	3304      	adds	r3, #4
 8011678:	2101      	movs	r1, #1
 801167a:	4618      	mov	r0, r3
 801167c:	f001 fb74 	bl	8012d68 <RCCEx_PLL2_Config>
 8011680:	4603      	mov	r3, r0
 8011682:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8011684:	e00c      	b.n	80116a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	3324      	adds	r3, #36	; 0x24
 801168a:	2101      	movs	r1, #1
 801168c:	4618      	mov	r0, r3
 801168e:	f001 fc1d 	bl	8012ecc <RCCEx_PLL3_Config>
 8011692:	4603      	mov	r3, r0
 8011694:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8011696:	e003      	b.n	80116a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011698:	2301      	movs	r3, #1
 801169a:	75fb      	strb	r3, [r7, #23]
      break;
 801169c:	e000      	b.n	80116a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 801169e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80116a0:	7dfb      	ldrb	r3, [r7, #23]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d10a      	bne.n	80116bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80116a6:	4b46      	ldr	r3, [pc, #280]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80116a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116aa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80116b4:	4942      	ldr	r1, [pc, #264]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80116b6:	4313      	orrs	r3, r2
 80116b8:	654b      	str	r3, [r1, #84]	; 0x54
 80116ba:	e001      	b.n	80116c0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80116bc:	7dfb      	ldrb	r3, [r7, #23]
 80116be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	f003 0302 	and.w	r3, r3, #2
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d038      	beq.n	801173e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116d0:	2b05      	cmp	r3, #5
 80116d2:	d821      	bhi.n	8011718 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80116d4:	a201      	add	r2, pc, #4	; (adr r2, 80116dc <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80116d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116da:	bf00      	nop
 80116dc:	0801171f 	.word	0x0801171f
 80116e0:	080116f5 	.word	0x080116f5
 80116e4:	08011707 	.word	0x08011707
 80116e8:	0801171f 	.word	0x0801171f
 80116ec:	0801171f 	.word	0x0801171f
 80116f0:	0801171f 	.word	0x0801171f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	3304      	adds	r3, #4
 80116f8:	2101      	movs	r1, #1
 80116fa:	4618      	mov	r0, r3
 80116fc:	f001 fb34 	bl	8012d68 <RCCEx_PLL2_Config>
 8011700:	4603      	mov	r3, r0
 8011702:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8011704:	e00c      	b.n	8011720 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	3324      	adds	r3, #36	; 0x24
 801170a:	2101      	movs	r1, #1
 801170c:	4618      	mov	r0, r3
 801170e:	f001 fbdd 	bl	8012ecc <RCCEx_PLL3_Config>
 8011712:	4603      	mov	r3, r0
 8011714:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8011716:	e003      	b.n	8011720 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011718:	2301      	movs	r3, #1
 801171a:	75fb      	strb	r3, [r7, #23]
      break;
 801171c:	e000      	b.n	8011720 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 801171e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011720:	7dfb      	ldrb	r3, [r7, #23]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d109      	bne.n	801173a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8011726:	4b26      	ldr	r3, [pc, #152]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801172a:	f023 0207 	bic.w	r2, r3, #7
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011732:	4923      	ldr	r1, [pc, #140]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8011734:	4313      	orrs	r3, r2
 8011736:	654b      	str	r3, [r1, #84]	; 0x54
 8011738:	e001      	b.n	801173e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801173a:	7dfb      	ldrb	r3, [r7, #23]
 801173c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	f003 0304 	and.w	r3, r3, #4
 8011746:	2b00      	cmp	r3, #0
 8011748:	d040      	beq.n	80117cc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011750:	2b05      	cmp	r3, #5
 8011752:	d821      	bhi.n	8011798 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8011754:	a201      	add	r2, pc, #4	; (adr r2, 801175c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8011756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801175a:	bf00      	nop
 801175c:	0801179f 	.word	0x0801179f
 8011760:	08011775 	.word	0x08011775
 8011764:	08011787 	.word	0x08011787
 8011768:	0801179f 	.word	0x0801179f
 801176c:	0801179f 	.word	0x0801179f
 8011770:	0801179f 	.word	0x0801179f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	3304      	adds	r3, #4
 8011778:	2101      	movs	r1, #1
 801177a:	4618      	mov	r0, r3
 801177c:	f001 faf4 	bl	8012d68 <RCCEx_PLL2_Config>
 8011780:	4603      	mov	r3, r0
 8011782:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8011784:	e00c      	b.n	80117a0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	3324      	adds	r3, #36	; 0x24
 801178a:	2101      	movs	r1, #1
 801178c:	4618      	mov	r0, r3
 801178e:	f001 fb9d 	bl	8012ecc <RCCEx_PLL3_Config>
 8011792:	4603      	mov	r3, r0
 8011794:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8011796:	e003      	b.n	80117a0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011798:	2301      	movs	r3, #1
 801179a:	75fb      	strb	r3, [r7, #23]
      break;
 801179c:	e000      	b.n	80117a0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 801179e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80117a0:	7dfb      	ldrb	r3, [r7, #23]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d110      	bne.n	80117c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80117a6:	4b06      	ldr	r3, [pc, #24]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80117a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117aa:	f023 0207 	bic.w	r2, r3, #7
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80117b4:	4902      	ldr	r1, [pc, #8]	; (80117c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80117b6:	4313      	orrs	r3, r2
 80117b8:	658b      	str	r3, [r1, #88]	; 0x58
 80117ba:	e007      	b.n	80117cc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80117bc:	58024800 	.word	0x58024800
 80117c0:	58024400 	.word	0x58024400
 80117c4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80117c8:	7dfb      	ldrb	r3, [r7, #23]
 80117ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f003 0320 	and.w	r3, r3, #32
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d04b      	beq.n	8011870 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80117de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80117e2:	d02e      	beq.n	8011842 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80117e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80117e8:	d828      	bhi.n	801183c <HAL_RCCEx_PeriphCLKConfig+0x960>
 80117ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80117ee:	d02a      	beq.n	8011846 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80117f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80117f4:	d822      	bhi.n	801183c <HAL_RCCEx_PeriphCLKConfig+0x960>
 80117f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80117fa:	d026      	beq.n	801184a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80117fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011800:	d81c      	bhi.n	801183c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8011802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011806:	d010      	beq.n	801182a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8011808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801180c:	d816      	bhi.n	801183c <HAL_RCCEx_PeriphCLKConfig+0x960>
 801180e:	2b00      	cmp	r3, #0
 8011810:	d01d      	beq.n	801184e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8011812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011816:	d111      	bne.n	801183c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	3304      	adds	r3, #4
 801181c:	2100      	movs	r1, #0
 801181e:	4618      	mov	r0, r3
 8011820:	f001 faa2 	bl	8012d68 <RCCEx_PLL2_Config>
 8011824:	4603      	mov	r3, r0
 8011826:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8011828:	e012      	b.n	8011850 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	3324      	adds	r3, #36	; 0x24
 801182e:	2102      	movs	r1, #2
 8011830:	4618      	mov	r0, r3
 8011832:	f001 fb4b 	bl	8012ecc <RCCEx_PLL3_Config>
 8011836:	4603      	mov	r3, r0
 8011838:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801183a:	e009      	b.n	8011850 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801183c:	2301      	movs	r3, #1
 801183e:	75fb      	strb	r3, [r7, #23]
      break;
 8011840:	e006      	b.n	8011850 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8011842:	bf00      	nop
 8011844:	e004      	b.n	8011850 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8011846:	bf00      	nop
 8011848:	e002      	b.n	8011850 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 801184a:	bf00      	nop
 801184c:	e000      	b.n	8011850 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 801184e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011850:	7dfb      	ldrb	r3, [r7, #23]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d10a      	bne.n	801186c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011856:	4bb3      	ldr	r3, [pc, #716]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801185a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011864:	49af      	ldr	r1, [pc, #700]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011866:	4313      	orrs	r3, r2
 8011868:	654b      	str	r3, [r1, #84]	; 0x54
 801186a:	e001      	b.n	8011870 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801186c:	7dfb      	ldrb	r3, [r7, #23]
 801186e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011878:	2b00      	cmp	r3, #0
 801187a:	d04b      	beq.n	8011914 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011882:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8011886:	d02e      	beq.n	80118e6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8011888:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801188c:	d828      	bhi.n	80118e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 801188e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011892:	d02a      	beq.n	80118ea <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8011894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011898:	d822      	bhi.n	80118e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 801189a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801189e:	d026      	beq.n	80118ee <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80118a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80118a4:	d81c      	bhi.n	80118e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80118a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80118aa:	d010      	beq.n	80118ce <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80118ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80118b0:	d816      	bhi.n	80118e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d01d      	beq.n	80118f2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80118b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80118ba:	d111      	bne.n	80118e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	3304      	adds	r3, #4
 80118c0:	2100      	movs	r1, #0
 80118c2:	4618      	mov	r0, r3
 80118c4:	f001 fa50 	bl	8012d68 <RCCEx_PLL2_Config>
 80118c8:	4603      	mov	r3, r0
 80118ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80118cc:	e012      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	3324      	adds	r3, #36	; 0x24
 80118d2:	2102      	movs	r1, #2
 80118d4:	4618      	mov	r0, r3
 80118d6:	f001 faf9 	bl	8012ecc <RCCEx_PLL3_Config>
 80118da:	4603      	mov	r3, r0
 80118dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80118de:	e009      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80118e0:	2301      	movs	r3, #1
 80118e2:	75fb      	strb	r3, [r7, #23]
      break;
 80118e4:	e006      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80118e6:	bf00      	nop
 80118e8:	e004      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80118ea:	bf00      	nop
 80118ec:	e002      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80118ee:	bf00      	nop
 80118f0:	e000      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80118f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80118f4:	7dfb      	ldrb	r3, [r7, #23]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d10a      	bne.n	8011910 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80118fa:	4b8a      	ldr	r3, [pc, #552]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80118fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011908:	4986      	ldr	r1, [pc, #536]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 801190a:	4313      	orrs	r3, r2
 801190c:	658b      	str	r3, [r1, #88]	; 0x58
 801190e:	e001      	b.n	8011914 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011910:	7dfb      	ldrb	r3, [r7, #23]
 8011912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801191c:	2b00      	cmp	r3, #0
 801191e:	d04b      	beq.n	80119b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011926:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801192a:	d02e      	beq.n	801198a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 801192c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8011930:	d828      	bhi.n	8011984 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8011932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011936:	d02a      	beq.n	801198e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8011938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801193c:	d822      	bhi.n	8011984 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801193e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8011942:	d026      	beq.n	8011992 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8011944:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8011948:	d81c      	bhi.n	8011984 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801194a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801194e:	d010      	beq.n	8011972 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8011950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011954:	d816      	bhi.n	8011984 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8011956:	2b00      	cmp	r3, #0
 8011958:	d01d      	beq.n	8011996 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 801195a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801195e:	d111      	bne.n	8011984 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	3304      	adds	r3, #4
 8011964:	2100      	movs	r1, #0
 8011966:	4618      	mov	r0, r3
 8011968:	f001 f9fe 	bl	8012d68 <RCCEx_PLL2_Config>
 801196c:	4603      	mov	r3, r0
 801196e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8011970:	e012      	b.n	8011998 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	3324      	adds	r3, #36	; 0x24
 8011976:	2102      	movs	r1, #2
 8011978:	4618      	mov	r0, r3
 801197a:	f001 faa7 	bl	8012ecc <RCCEx_PLL3_Config>
 801197e:	4603      	mov	r3, r0
 8011980:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8011982:	e009      	b.n	8011998 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011984:	2301      	movs	r3, #1
 8011986:	75fb      	strb	r3, [r7, #23]
      break;
 8011988:	e006      	b.n	8011998 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 801198a:	bf00      	nop
 801198c:	e004      	b.n	8011998 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 801198e:	bf00      	nop
 8011990:	e002      	b.n	8011998 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8011992:	bf00      	nop
 8011994:	e000      	b.n	8011998 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8011996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011998:	7dfb      	ldrb	r3, [r7, #23]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d10a      	bne.n	80119b4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801199e:	4b61      	ldr	r3, [pc, #388]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80119a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80119ac:	495d      	ldr	r1, [pc, #372]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80119ae:	4313      	orrs	r3, r2
 80119b0:	658b      	str	r3, [r1, #88]	; 0x58
 80119b2:	e001      	b.n	80119b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80119b4:	7dfb      	ldrb	r3, [r7, #23]
 80119b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	f003 0308 	and.w	r3, r3, #8
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d01a      	beq.n	80119fa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119ce:	d10a      	bne.n	80119e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	3324      	adds	r3, #36	; 0x24
 80119d4:	2102      	movs	r1, #2
 80119d6:	4618      	mov	r0, r3
 80119d8:	f001 fa78 	bl	8012ecc <RCCEx_PLL3_Config>
 80119dc:	4603      	mov	r3, r0
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d001      	beq.n	80119e6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80119e2:	2301      	movs	r3, #1
 80119e4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80119e6:	4b4f      	ldr	r3, [pc, #316]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80119e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119f4:	494b      	ldr	r1, [pc, #300]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80119f6:	4313      	orrs	r3, r2
 80119f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	f003 0310 	and.w	r3, r3, #16
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d01a      	beq.n	8011a3c <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a10:	d10a      	bne.n	8011a28 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	3324      	adds	r3, #36	; 0x24
 8011a16:	2102      	movs	r1, #2
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f001 fa57 	bl	8012ecc <RCCEx_PLL3_Config>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d001      	beq.n	8011a28 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8011a24:	2301      	movs	r3, #1
 8011a26:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011a28:	4b3e      	ldr	r3, [pc, #248]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011a36:	493b      	ldr	r1, [pc, #236]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011a38:	4313      	orrs	r3, r2
 8011a3a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d034      	beq.n	8011ab2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011a52:	d01d      	beq.n	8011a90 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8011a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011a58:	d817      	bhi.n	8011a8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d003      	beq.n	8011a66 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8011a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a62:	d009      	beq.n	8011a78 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8011a64:	e011      	b.n	8011a8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	3304      	adds	r3, #4
 8011a6a:	2100      	movs	r1, #0
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f001 f97b 	bl	8012d68 <RCCEx_PLL2_Config>
 8011a72:	4603      	mov	r3, r0
 8011a74:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8011a76:	e00c      	b.n	8011a92 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	3324      	adds	r3, #36	; 0x24
 8011a7c:	2102      	movs	r1, #2
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f001 fa24 	bl	8012ecc <RCCEx_PLL3_Config>
 8011a84:	4603      	mov	r3, r0
 8011a86:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8011a88:	e003      	b.n	8011a92 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8011a8e:	e000      	b.n	8011a92 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8011a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011a92:	7dfb      	ldrb	r3, [r7, #23]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d10a      	bne.n	8011aae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011a98:	4b22      	ldr	r3, [pc, #136]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011aa6:	491f      	ldr	r1, [pc, #124]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011aa8:	4313      	orrs	r3, r2
 8011aaa:	658b      	str	r3, [r1, #88]	; 0x58
 8011aac:	e001      	b.n	8011ab2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011aae:	7dfb      	ldrb	r3, [r7, #23]
 8011ab0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d036      	beq.n	8011b2c <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ac4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011ac8:	d01c      	beq.n	8011b04 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8011aca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011ace:	d816      	bhi.n	8011afe <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8011ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ad4:	d003      	beq.n	8011ade <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8011ad6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011ada:	d007      	beq.n	8011aec <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8011adc:	e00f      	b.n	8011afe <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011ade:	4b11      	ldr	r3, [pc, #68]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ae2:	4a10      	ldr	r2, [pc, #64]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8011aea:	e00c      	b.n	8011b06 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	3324      	adds	r3, #36	; 0x24
 8011af0:	2101      	movs	r1, #1
 8011af2:	4618      	mov	r0, r3
 8011af4:	f001 f9ea 	bl	8012ecc <RCCEx_PLL3_Config>
 8011af8:	4603      	mov	r3, r0
 8011afa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8011afc:	e003      	b.n	8011b06 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011afe:	2301      	movs	r3, #1
 8011b00:	75fb      	strb	r3, [r7, #23]
      break;
 8011b02:	e000      	b.n	8011b06 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8011b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011b06:	7dfb      	ldrb	r3, [r7, #23]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d10d      	bne.n	8011b28 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011b0c:	4b05      	ldr	r3, [pc, #20]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b1a:	4902      	ldr	r1, [pc, #8]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8011b1c:	4313      	orrs	r3, r2
 8011b1e:	654b      	str	r3, [r1, #84]	; 0x54
 8011b20:	e004      	b.n	8011b2c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8011b22:	bf00      	nop
 8011b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b28:	7dfb      	ldrb	r3, [r7, #23]
 8011b2a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d029      	beq.n	8011b8c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d003      	beq.n	8011b48 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8011b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b44:	d007      	beq.n	8011b56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8011b46:	e00f      	b.n	8011b68 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011b48:	4b69      	ldr	r3, [pc, #420]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b4c:	4a68      	ldr	r2, [pc, #416]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8011b54:	e00b      	b.n	8011b6e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	3304      	adds	r3, #4
 8011b5a:	2102      	movs	r1, #2
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f001 f903 	bl	8012d68 <RCCEx_PLL2_Config>
 8011b62:	4603      	mov	r3, r0
 8011b64:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8011b66:	e002      	b.n	8011b6e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8011b68:	2301      	movs	r3, #1
 8011b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8011b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011b6e:	7dfb      	ldrb	r3, [r7, #23]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d109      	bne.n	8011b88 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8011b74:	4b5e      	ldr	r3, [pc, #376]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b80:	495b      	ldr	r1, [pc, #364]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011b82:	4313      	orrs	r3, r2
 8011b84:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011b86:	e001      	b.n	8011b8c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b88:	7dfb      	ldrb	r3, [r7, #23]
 8011b8a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d00a      	beq.n	8011bae <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	3324      	adds	r3, #36	; 0x24
 8011b9c:	2102      	movs	r1, #2
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f001 f994 	bl	8012ecc <RCCEx_PLL3_Config>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d001      	beq.n	8011bae <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8011baa:	2301      	movs	r3, #1
 8011bac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d032      	beq.n	8011c20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011bc4:	d017      	beq.n	8011bf6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8011bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011bca:	d811      	bhi.n	8011bf0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8011bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bd0:	d013      	beq.n	8011bfa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8011bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bd6:	d80b      	bhi.n	8011bf0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d010      	beq.n	8011bfe <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8011bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011be0:	d106      	bne.n	8011bf0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011be2:	4b43      	ldr	r3, [pc, #268]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be6:	4a42      	ldr	r2, [pc, #264]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011bec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8011bee:	e007      	b.n	8011c00 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8011bf4:	e004      	b.n	8011c00 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8011bf6:	bf00      	nop
 8011bf8:	e002      	b.n	8011c00 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8011bfa:	bf00      	nop
 8011bfc:	e000      	b.n	8011c00 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8011bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011c00:	7dfb      	ldrb	r3, [r7, #23]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d10a      	bne.n	8011c1c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011c06:	4b3a      	ldr	r3, [pc, #232]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c14:	4936      	ldr	r1, [pc, #216]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c16:	4313      	orrs	r3, r2
 8011c18:	654b      	str	r3, [r1, #84]	; 0x54
 8011c1a:	e001      	b.n	8011c20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c1c:	7dfb      	ldrb	r3, [r7, #23]
 8011c1e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d008      	beq.n	8011c3e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011c2c:	4b30      	ldr	r3, [pc, #192]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c38:	492d      	ldr	r1, [pc, #180]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c3a:	4313      	orrs	r3, r2
 8011c3c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d008      	beq.n	8011c5c <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011c4a:	4b29      	ldr	r3, [pc, #164]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c56:	4926      	ldr	r1, [pc, #152]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c58:	4313      	orrs	r3, r2
 8011c5a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d008      	beq.n	8011c7a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8011c68:	4b21      	ldr	r3, [pc, #132]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c74:	491e      	ldr	r1, [pc, #120]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c76:	4313      	orrs	r3, r2
 8011c78:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d00d      	beq.n	8011ca2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8011c86:	4b1a      	ldr	r3, [pc, #104]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c88:	691b      	ldr	r3, [r3, #16]
 8011c8a:	4a19      	ldr	r2, [pc, #100]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011c90:	6113      	str	r3, [r2, #16]
 8011c92:	4b17      	ldr	r3, [pc, #92]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c94:	691a      	ldr	r2, [r3, #16]
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8011c9c:	4914      	ldr	r1, [pc, #80]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011c9e:	4313      	orrs	r3, r2
 8011ca0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	da08      	bge.n	8011cbc <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8011caa:	4b11      	ldr	r3, [pc, #68]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cb6:	490e      	ldr	r1, [pc, #56]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011cb8:	4313      	orrs	r3, r2
 8011cba:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d009      	beq.n	8011cdc <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011cc8:	4b09      	ldr	r3, [pc, #36]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ccc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cd6:	4906      	ldr	r1, [pc, #24]	; (8011cf0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8011cd8:	4313      	orrs	r3, r2
 8011cda:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8011cdc:	7dbb      	ldrb	r3, [r7, #22]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d101      	bne.n	8011ce6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	e000      	b.n	8011ce8 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8011ce6:	2301      	movs	r3, #1
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3718      	adds	r7, #24
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	58024400 	.word	0x58024400

08011cf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b090      	sub	sp, #64	; 0x40
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d02:	f040 8089 	bne.w	8011e18 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8011d06:	4ba8      	ldr	r3, [pc, #672]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d0a:	f003 0307 	and.w	r3, r3, #7
 8011d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8011d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d12:	2b04      	cmp	r3, #4
 8011d14:	d87d      	bhi.n	8011e12 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8011d16:	a201      	add	r2, pc, #4	; (adr r2, 8011d1c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8011d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d1c:	08011d31 	.word	0x08011d31
 8011d20:	08011d55 	.word	0x08011d55
 8011d24:	08011d79 	.word	0x08011d79
 8011d28:	08011e0d 	.word	0x08011e0d
 8011d2c:	08011d9d 	.word	0x08011d9d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011d30:	4b9d      	ldr	r3, [pc, #628]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011d3c:	d107      	bne.n	8011d4e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d42:	4618      	mov	r0, r3
 8011d44:	f000 febe 	bl	8012ac4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8011d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011d4c:	e3f5      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011d52:	e3f2      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011d54:	4b94      	ldr	r3, [pc, #592]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011d60:	d107      	bne.n	8011d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d62:	f107 0318 	add.w	r3, r7, #24
 8011d66:	4618      	mov	r0, r3
 8011d68:	f000 fc04 	bl	8012574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011d6c:	69bb      	ldr	r3, [r7, #24]
 8011d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011d70:	e3e3      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011d72:	2300      	movs	r3, #0
 8011d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011d76:	e3e0      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011d78:	4b8b      	ldr	r3, [pc, #556]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d84:	d107      	bne.n	8011d96 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d86:	f107 030c 	add.w	r3, r7, #12
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f000 fd46 	bl	801281c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011d94:	e3d1      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011d96:	2300      	movs	r3, #0
 8011d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011d9a:	e3ce      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8011d9c:	4b82      	ldr	r3, [pc, #520]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011da0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011da4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011da6:	4b80      	ldr	r3, [pc, #512]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	f003 0304 	and.w	r3, r3, #4
 8011dae:	2b04      	cmp	r3, #4
 8011db0:	d10c      	bne.n	8011dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8011db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d109      	bne.n	8011dcc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011db8:	4b7b      	ldr	r3, [pc, #492]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	08db      	lsrs	r3, r3, #3
 8011dbe:	f003 0303 	and.w	r3, r3, #3
 8011dc2:	4a7a      	ldr	r2, [pc, #488]	; (8011fac <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8011dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8011dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011dca:	e01e      	b.n	8011e0a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011dcc:	4b76      	ldr	r3, [pc, #472]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011dd8:	d106      	bne.n	8011de8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8011dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011de0:	d102      	bne.n	8011de8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8011de2:	4b73      	ldr	r3, [pc, #460]	; (8011fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8011de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011de6:	e010      	b.n	8011e0a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011de8:	4b6f      	ldr	r3, [pc, #444]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011df4:	d106      	bne.n	8011e04 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8011df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011dfc:	d102      	bne.n	8011e04 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8011dfe:	4b6d      	ldr	r3, [pc, #436]	; (8011fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8011e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e02:	e002      	b.n	8011e0a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8011e04:	2300      	movs	r3, #0
 8011e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8011e08:	e397      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8011e0a:	e396      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8011e0c:	4b6a      	ldr	r3, [pc, #424]	; (8011fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8011e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011e10:	e393      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8011e12:	2300      	movs	r3, #0
 8011e14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011e16:	e390      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e1e:	f040 8095 	bne.w	8011f4c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8011e22:	4b61      	ldr	r3, [pc, #388]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e26:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8011e2a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8011e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e32:	d04d      	beq.n	8011ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8011e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e3a:	f200 8084 	bhi.w	8011f46 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8011e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e40:	2bc0      	cmp	r3, #192	; 0xc0
 8011e42:	d07d      	beq.n	8011f40 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8011e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e46:	2bc0      	cmp	r3, #192	; 0xc0
 8011e48:	d87d      	bhi.n	8011f46 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8011e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4c:	2b80      	cmp	r3, #128	; 0x80
 8011e4e:	d02d      	beq.n	8011eac <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8011e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e52:	2b80      	cmp	r3, #128	; 0x80
 8011e54:	d877      	bhi.n	8011f46 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8011e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d003      	beq.n	8011e64 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8011e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e5e:	2b40      	cmp	r3, #64	; 0x40
 8011e60:	d012      	beq.n	8011e88 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8011e62:	e070      	b.n	8011f46 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011e64:	4b50      	ldr	r3, [pc, #320]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011e70:	d107      	bne.n	8011e82 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e76:	4618      	mov	r0, r3
 8011e78:	f000 fe24 	bl	8012ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011e80:	e35b      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011e82:	2300      	movs	r3, #0
 8011e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011e86:	e358      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011e88:	4b47      	ldr	r3, [pc, #284]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011e90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011e94:	d107      	bne.n	8011ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e96:	f107 0318 	add.w	r3, r7, #24
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f000 fb6a 	bl	8012574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011ea0:	69bb      	ldr	r3, [r7, #24]
 8011ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011ea4:	e349      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011eaa:	e346      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011eac:	4b3e      	ldr	r3, [pc, #248]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011eb8:	d107      	bne.n	8011eca <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011eba:	f107 030c 	add.w	r3, r7, #12
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f000 fcac 	bl	801281c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011ec8:	e337      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011ece:	e334      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8011ed0:	4b35      	ldr	r3, [pc, #212]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011ed8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011eda:	4b33      	ldr	r3, [pc, #204]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	f003 0304 	and.w	r3, r3, #4
 8011ee2:	2b04      	cmp	r3, #4
 8011ee4:	d10c      	bne.n	8011f00 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8011ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d109      	bne.n	8011f00 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011eec:	4b2e      	ldr	r3, [pc, #184]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	08db      	lsrs	r3, r3, #3
 8011ef2:	f003 0303 	and.w	r3, r3, #3
 8011ef6:	4a2d      	ldr	r2, [pc, #180]	; (8011fac <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8011ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8011efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011efe:	e01e      	b.n	8011f3e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011f00:	4b29      	ldr	r3, [pc, #164]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f0c:	d106      	bne.n	8011f1c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8011f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011f14:	d102      	bne.n	8011f1c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8011f16:	4b26      	ldr	r3, [pc, #152]	; (8011fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8011f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f1a:	e010      	b.n	8011f3e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011f1c:	4b22      	ldr	r3, [pc, #136]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011f28:	d106      	bne.n	8011f38 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8011f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f30:	d102      	bne.n	8011f38 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8011f32:	4b20      	ldr	r3, [pc, #128]	; (8011fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8011f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f36:	e002      	b.n	8011f3e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8011f3c:	e2fd      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8011f3e:	e2fc      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8011f40:	4b1d      	ldr	r3, [pc, #116]	; (8011fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8011f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011f44:	e2f9      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8011f46:	2300      	movs	r3, #0
 8011f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011f4a:	e2f6      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f52:	f040 80a7 	bne.w	80120a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8011f56:	4b14      	ldr	r3, [pc, #80]	; (8011fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8011f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f5a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8011f5e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8011f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f66:	d05f      	beq.n	8012028 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8011f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f6e:	f200 8096 	bhi.w	801209e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8011f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011f78:	f000 808e 	beq.w	8012098 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8011f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f7e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011f82:	f200 808c 	bhi.w	801209e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8011f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f8c:	d03a      	beq.n	8012004 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8011f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f94:	f200 8083 	bhi.w	801209e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8011f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d00e      	beq.n	8011fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8011f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011fa4:	d01c      	beq.n	8011fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8011fa6:	e07a      	b.n	801209e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8011fa8:	58024400 	.word	0x58024400
 8011fac:	03d09000 	.word	0x03d09000
 8011fb0:	003d0900 	.word	0x003d0900
 8011fb4:	016e3600 	.word	0x016e3600
 8011fb8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011fbc:	4ba8      	ldr	r3, [pc, #672]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011fc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011fc8:	d107      	bne.n	8011fda <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f000 fd78 	bl	8012ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011fd8:	e2af      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8011fde:	e2ac      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011fe0:	4b9f      	ldr	r3, [pc, #636]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011fec:	d107      	bne.n	8011ffe <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011fee:	f107 0318 	add.w	r3, r7, #24
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f000 fabe 	bl	8012574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011ff8:	69bb      	ldr	r3, [r7, #24]
 8011ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8011ffc:	e29d      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8011ffe:	2300      	movs	r3, #0
 8012000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012002:	e29a      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012004:	4b96      	ldr	r3, [pc, #600]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801200c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012010:	d107      	bne.n	8012022 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012012:	f107 030c 	add.w	r3, r7, #12
 8012016:	4618      	mov	r0, r3
 8012018:	f000 fc00 	bl	801281c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012020:	e28b      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8012022:	2300      	movs	r3, #0
 8012024:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012026:	e288      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8012028:	4b8d      	ldr	r3, [pc, #564]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 801202a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801202c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012030:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012032:	4b8b      	ldr	r3, [pc, #556]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f003 0304 	and.w	r3, r3, #4
 801203a:	2b04      	cmp	r3, #4
 801203c:	d10c      	bne.n	8012058 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 801203e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012040:	2b00      	cmp	r3, #0
 8012042:	d109      	bne.n	8012058 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012044:	4b86      	ldr	r3, [pc, #536]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	08db      	lsrs	r3, r3, #3
 801204a:	f003 0303 	and.w	r3, r3, #3
 801204e:	4a85      	ldr	r2, [pc, #532]	; (8012264 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8012050:	fa22 f303 	lsr.w	r3, r2, r3
 8012054:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012056:	e01e      	b.n	8012096 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012058:	4b81      	ldr	r3, [pc, #516]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012064:	d106      	bne.n	8012074 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8012066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801206c:	d102      	bne.n	8012074 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 801206e:	4b7e      	ldr	r3, [pc, #504]	; (8012268 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8012070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012072:	e010      	b.n	8012096 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012074:	4b7a      	ldr	r3, [pc, #488]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801207c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012080:	d106      	bne.n	8012090 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8012082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012088:	d102      	bne.n	8012090 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 801208a:	4b78      	ldr	r3, [pc, #480]	; (801226c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 801208c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801208e:	e002      	b.n	8012096 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8012090:	2300      	movs	r3, #0
 8012092:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8012094:	e251      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8012096:	e250      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8012098:	4b75      	ldr	r3, [pc, #468]	; (8012270 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 801209a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801209c:	e24d      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 801209e:	2300      	movs	r3, #0
 80120a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80120a2:	e24a      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80120aa:	f040 809c 	bne.w	80121e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80120ae:	4b6c      	ldr	r3, [pc, #432]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80120b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120b2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80120b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80120b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80120be:	d054      	beq.n	801216a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80120c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80120c6:	f200 808b 	bhi.w	80121e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80120ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80120d0:	f000 8083 	beq.w	80121da <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 80120d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80120da:	f200 8081 	bhi.w	80121e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80120de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80120e4:	d02f      	beq.n	8012146 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80120e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80120ec:	d878      	bhi.n	80121e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80120ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d004      	beq.n	80120fe <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80120f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80120fa:	d012      	beq.n	8012122 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 80120fc:	e070      	b.n	80121e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80120fe:	4b58      	ldr	r3, [pc, #352]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801210a:	d107      	bne.n	801211c <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012110:	4618      	mov	r0, r3
 8012112:	f000 fcd7 	bl	8012ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012118:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801211a:	e20e      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 801211c:	2300      	movs	r3, #0
 801211e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012120:	e20b      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012122:	4b4f      	ldr	r3, [pc, #316]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801212a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801212e:	d107      	bne.n	8012140 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012130:	f107 0318 	add.w	r3, r7, #24
 8012134:	4618      	mov	r0, r3
 8012136:	f000 fa1d 	bl	8012574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801213a:	69bb      	ldr	r3, [r7, #24]
 801213c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801213e:	e1fc      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8012140:	2300      	movs	r3, #0
 8012142:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012144:	e1f9      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012146:	4b46      	ldr	r3, [pc, #280]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801214e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012152:	d107      	bne.n	8012164 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012154:	f107 030c 	add.w	r3, r7, #12
 8012158:	4618      	mov	r0, r3
 801215a:	f000 fb5f 	bl	801281c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012162:	e1ea      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8012164:	2300      	movs	r3, #0
 8012166:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012168:	e1e7      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801216a:	4b3d      	ldr	r3, [pc, #244]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 801216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801216e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012172:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012174:	4b3a      	ldr	r3, [pc, #232]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	f003 0304 	and.w	r3, r3, #4
 801217c:	2b04      	cmp	r3, #4
 801217e:	d10c      	bne.n	801219a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8012180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012182:	2b00      	cmp	r3, #0
 8012184:	d109      	bne.n	801219a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012186:	4b36      	ldr	r3, [pc, #216]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	08db      	lsrs	r3, r3, #3
 801218c:	f003 0303 	and.w	r3, r3, #3
 8012190:	4a34      	ldr	r2, [pc, #208]	; (8012264 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8012192:	fa22 f303 	lsr.w	r3, r2, r3
 8012196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012198:	e01e      	b.n	80121d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801219a:	4b31      	ldr	r3, [pc, #196]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80121a6:	d106      	bne.n	80121b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 80121a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80121ae:	d102      	bne.n	80121b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80121b0:	4b2d      	ldr	r3, [pc, #180]	; (8012268 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80121b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121b4:	e010      	b.n	80121d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80121b6:	4b2a      	ldr	r3, [pc, #168]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80121be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80121c2:	d106      	bne.n	80121d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80121c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80121ca:	d102      	bne.n	80121d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80121cc:	4b27      	ldr	r3, [pc, #156]	; (801226c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80121ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80121d0:	e002      	b.n	80121d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80121d2:	2300      	movs	r3, #0
 80121d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80121d6:	e1b0      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80121d8:	e1af      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80121da:	4b25      	ldr	r3, [pc, #148]	; (8012270 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80121dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80121de:	e1ac      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80121e0:	2300      	movs	r3, #0
 80121e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80121e4:	e1a9      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80121ec:	d17d      	bne.n	80122ea <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80121ee:	4b1c      	ldr	r3, [pc, #112]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80121f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80121f6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80121f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80121fe:	d039      	beq.n	8012274 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8012200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012202:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012206:	d86d      	bhi.n	80122e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8012208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801220a:	2b00      	cmp	r3, #0
 801220c:	d004      	beq.n	8012218 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 801220e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012214:	d012      	beq.n	801223c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8012216:	e065      	b.n	80122e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012218:	4b11      	ldr	r3, [pc, #68]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012224:	d107      	bne.n	8012236 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012226:	f107 0318 	add.w	r3, r7, #24
 801222a:	4618      	mov	r0, r3
 801222c:	f000 f9a2 	bl	8012574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012230:	69bb      	ldr	r3, [r7, #24]
 8012232:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012234:	e181      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8012236:	2300      	movs	r3, #0
 8012238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801223a:	e17e      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801223c:	4b08      	ldr	r3, [pc, #32]	; (8012260 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012248:	d107      	bne.n	801225a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801224a:	f107 030c 	add.w	r3, r7, #12
 801224e:	4618      	mov	r0, r3
 8012250:	f000 fae4 	bl	801281c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012258:	e16f      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 801225a:	2300      	movs	r3, #0
 801225c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801225e:	e16c      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8012260:	58024400 	.word	0x58024400
 8012264:	03d09000 	.word	0x03d09000
 8012268:	003d0900 	.word	0x003d0900
 801226c:	016e3600 	.word	0x016e3600
 8012270:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8012274:	4ba0      	ldr	r3, [pc, #640]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8012276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012278:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801227c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801227e:	4b9e      	ldr	r3, [pc, #632]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	f003 0304 	and.w	r3, r3, #4
 8012286:	2b04      	cmp	r3, #4
 8012288:	d10c      	bne.n	80122a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 801228a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801228c:	2b00      	cmp	r3, #0
 801228e:	d109      	bne.n	80122a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012290:	4b99      	ldr	r3, [pc, #612]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	08db      	lsrs	r3, r3, #3
 8012296:	f003 0303 	and.w	r3, r3, #3
 801229a:	4a98      	ldr	r2, [pc, #608]	; (80124fc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 801229c:	fa22 f303 	lsr.w	r3, r2, r3
 80122a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122a2:	e01e      	b.n	80122e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80122a4:	4b94      	ldr	r3, [pc, #592]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80122ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80122b0:	d106      	bne.n	80122c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80122b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80122b8:	d102      	bne.n	80122c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80122ba:	4b91      	ldr	r3, [pc, #580]	; (8012500 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80122bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122be:	e010      	b.n	80122e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80122c0:	4b8d      	ldr	r3, [pc, #564]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80122c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80122cc:	d106      	bne.n	80122dc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80122ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80122d4:	d102      	bne.n	80122dc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80122d6:	4b8b      	ldr	r3, [pc, #556]	; (8012504 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80122d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122da:	e002      	b.n	80122e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80122dc:	2300      	movs	r3, #0
 80122de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80122e0:	e12b      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80122e2:	e12a      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80122e4:	2300      	movs	r3, #0
 80122e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80122e8:	e127      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122f0:	d133      	bne.n	801235a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80122f2:	4b81      	ldr	r3, [pc, #516]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80122f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80122fa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80122fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d004      	beq.n	801230c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8012302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012308:	d012      	beq.n	8012330 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 801230a:	e023      	b.n	8012354 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801230c:	4b7a      	ldr	r3, [pc, #488]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012318:	d107      	bne.n	801232a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801231a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801231e:	4618      	mov	r0, r3
 8012320:	f000 fbd0 	bl	8012ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012326:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012328:	e107      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 801232a:	2300      	movs	r3, #0
 801232c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801232e:	e104      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012330:	4b71      	ldr	r3, [pc, #452]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012338:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801233c:	d107      	bne.n	801234e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801233e:	f107 0318 	add.w	r3, r7, #24
 8012342:	4618      	mov	r0, r3
 8012344:	f000 f916 	bl	8012574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8012348:	6a3b      	ldr	r3, [r7, #32]
 801234a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 801234c:	e0f5      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 801234e:	2300      	movs	r3, #0
 8012350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012352:	e0f2      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8012354:	2300      	movs	r3, #0
 8012356:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012358:	e0ef      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012360:	f040 8091 	bne.w	8012486 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8012364:	4b64      	ldr	r3, [pc, #400]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8012366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012368:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801236c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801236e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012370:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8012374:	f000 8081 	beq.w	801247a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8012378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801237a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 801237e:	d87f      	bhi.n	8012480 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8012380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012386:	d06b      	beq.n	8012460 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8012388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801238a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801238e:	d877      	bhi.n	8012480 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8012390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012396:	d056      	beq.n	8012446 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8012398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801239e:	d86f      	bhi.n	8012480 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80123a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80123a6:	d03b      	beq.n	8012420 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80123a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80123ae:	d867      	bhi.n	8012480 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80123b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80123b6:	d021      	beq.n	80123fc <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 80123b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80123be:	d85f      	bhi.n	8012480 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80123c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d004      	beq.n	80123d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80123c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80123cc:	d004      	beq.n	80123d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 80123ce:	e057      	b.n	8012480 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80123d0:	f000 f8ba 	bl	8012548 <HAL_RCCEx_GetD3PCLK1Freq>
 80123d4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80123d6:	e0b0      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80123d8:	4b47      	ldr	r3, [pc, #284]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80123e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80123e4:	d107      	bne.n	80123f6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80123e6:	f107 0318 	add.w	r3, r7, #24
 80123ea:	4618      	mov	r0, r3
 80123ec:	f000 f8c2 	bl	8012574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80123f0:	69fb      	ldr	r3, [r7, #28]
 80123f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80123f4:	e0a1      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80123f6:	2300      	movs	r3, #0
 80123f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80123fa:	e09e      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80123fc:	4b3e      	ldr	r3, [pc, #248]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012408:	d107      	bne.n	801241a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801240a:	f107 030c 	add.w	r3, r7, #12
 801240e:	4618      	mov	r0, r3
 8012410:	f000 fa04 	bl	801281c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012418:	e08f      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 801241a:	2300      	movs	r3, #0
 801241c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801241e:	e08c      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012420:	4b35      	ldr	r3, [pc, #212]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	f003 0304 	and.w	r3, r3, #4
 8012428:	2b04      	cmp	r3, #4
 801242a:	d109      	bne.n	8012440 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801242c:	4b32      	ldr	r3, [pc, #200]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	08db      	lsrs	r3, r3, #3
 8012432:	f003 0303 	and.w	r3, r3, #3
 8012436:	4a31      	ldr	r2, [pc, #196]	; (80124fc <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8012438:	fa22 f303 	lsr.w	r3, r2, r3
 801243c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 801243e:	e07c      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8012440:	2300      	movs	r3, #0
 8012442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012444:	e079      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8012446:	4b2c      	ldr	r3, [pc, #176]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801244e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012452:	d102      	bne.n	801245a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8012454:	4b2a      	ldr	r3, [pc, #168]	; (8012500 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8012456:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8012458:	e06f      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 801245a:	2300      	movs	r3, #0
 801245c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801245e:	e06c      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012460:	4b25      	ldr	r3, [pc, #148]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801246c:	d102      	bne.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 801246e:	4b25      	ldr	r3, [pc, #148]	; (8012504 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8012470:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012472:	e062      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8012474:	2300      	movs	r3, #0
 8012476:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012478:	e05f      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801247a:	4b23      	ldr	r3, [pc, #140]	; (8012508 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 801247c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801247e:	e05c      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8012480:	2300      	movs	r3, #0
 8012482:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012484:	e059      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801248c:	d153      	bne.n	8012536 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 801248e:	4b1a      	ldr	r3, [pc, #104]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8012490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012492:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012496:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8012498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801249a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801249e:	d035      	beq.n	801250c <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 80124a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80124a6:	d843      	bhi.n	8012530 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80124a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d004      	beq.n	80124b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 80124ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80124b4:	d00d      	beq.n	80124d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80124b6:	e03b      	b.n	8012530 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80124b8:	4b0f      	ldr	r3, [pc, #60]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80124c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80124c4:	d102      	bne.n	80124cc <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 80124c6:	4b0f      	ldr	r3, [pc, #60]	; (8012504 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80124c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80124ca:	e036      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80124cc:	2300      	movs	r3, #0
 80124ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80124d0:	e033      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80124d2:	4b09      	ldr	r3, [pc, #36]	; (80124f8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80124da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80124de:	d107      	bne.n	80124f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80124e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124e4:	4618      	mov	r0, r3
 80124e6:	f000 faed 	bl	8012ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80124ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80124ee:	e024      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80124f0:	2300      	movs	r3, #0
 80124f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80124f4:	e021      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80124f6:	bf00      	nop
 80124f8:	58024400 	.word	0x58024400
 80124fc:	03d09000 	.word	0x03d09000
 8012500:	003d0900 	.word	0x003d0900
 8012504:	016e3600 	.word	0x016e3600
 8012508:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801250c:	4b0d      	ldr	r3, [pc, #52]	; (8012544 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012518:	d107      	bne.n	801252a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801251a:	f107 0318 	add.w	r3, r7, #24
 801251e:	4618      	mov	r0, r3
 8012520:	f000 f828 	bl	8012574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012524:	69fb      	ldr	r3, [r7, #28]
 8012526:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8012528:	e007      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 801252a:	2300      	movs	r3, #0
 801252c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801252e:	e004      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8012530:	2300      	movs	r3, #0
 8012532:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8012534:	e001      	b.n	801253a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8012536:	2300      	movs	r3, #0
 8012538:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 801253a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801253c:	4618      	mov	r0, r3
 801253e:	3740      	adds	r7, #64	; 0x40
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}
 8012544:	58024400 	.word	0x58024400

08012548 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 801254c:	f7fe fc28 	bl	8010da0 <HAL_RCC_GetHCLKFreq>
 8012550:	4602      	mov	r2, r0
 8012552:	4b06      	ldr	r3, [pc, #24]	; (801256c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8012554:	6a1b      	ldr	r3, [r3, #32]
 8012556:	091b      	lsrs	r3, r3, #4
 8012558:	f003 0307 	and.w	r3, r3, #7
 801255c:	4904      	ldr	r1, [pc, #16]	; (8012570 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801255e:	5ccb      	ldrb	r3, [r1, r3]
 8012560:	f003 031f 	and.w	r3, r3, #31
 8012564:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8012568:	4618      	mov	r0, r3
 801256a:	bd80      	pop	{r7, pc}
 801256c:	58024400 	.word	0x58024400
 8012570:	0802e3b4 	.word	0x0802e3b4

08012574 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8012574:	b480      	push	{r7}
 8012576:	b089      	sub	sp, #36	; 0x24
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801257c:	4ba1      	ldr	r3, [pc, #644]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012580:	f003 0303 	and.w	r3, r3, #3
 8012584:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8012586:	4b9f      	ldr	r3, [pc, #636]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801258a:	0b1b      	lsrs	r3, r3, #12
 801258c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012590:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8012592:	4b9c      	ldr	r3, [pc, #624]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012596:	091b      	lsrs	r3, r3, #4
 8012598:	f003 0301 	and.w	r3, r3, #1
 801259c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 801259e:	4b99      	ldr	r3, [pc, #612]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80125a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125a2:	08db      	lsrs	r3, r3, #3
 80125a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80125a8:	693a      	ldr	r2, [r7, #16]
 80125aa:	fb02 f303 	mul.w	r3, r2, r3
 80125ae:	ee07 3a90 	vmov	s15, r3
 80125b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80125ba:	697b      	ldr	r3, [r7, #20]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	f000 8111 	beq.w	80127e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80125c2:	69bb      	ldr	r3, [r7, #24]
 80125c4:	2b02      	cmp	r3, #2
 80125c6:	f000 8083 	beq.w	80126d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80125ca:	69bb      	ldr	r3, [r7, #24]
 80125cc:	2b02      	cmp	r3, #2
 80125ce:	f200 80a1 	bhi.w	8012714 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d003      	beq.n	80125e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80125d8:	69bb      	ldr	r3, [r7, #24]
 80125da:	2b01      	cmp	r3, #1
 80125dc:	d056      	beq.n	801268c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80125de:	e099      	b.n	8012714 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80125e0:	4b88      	ldr	r3, [pc, #544]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	f003 0320 	and.w	r3, r3, #32
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d02d      	beq.n	8012648 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80125ec:	4b85      	ldr	r3, [pc, #532]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	08db      	lsrs	r3, r3, #3
 80125f2:	f003 0303 	and.w	r3, r3, #3
 80125f6:	4a84      	ldr	r2, [pc, #528]	; (8012808 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80125f8:	fa22 f303 	lsr.w	r3, r2, r3
 80125fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	ee07 3a90 	vmov	s15, r3
 8012604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	ee07 3a90 	vmov	s15, r3
 801260e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012616:	4b7b      	ldr	r3, [pc, #492]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801261a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801261e:	ee07 3a90 	vmov	s15, r3
 8012622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012626:	ed97 6a03 	vldr	s12, [r7, #12]
 801262a:	eddf 5a78 	vldr	s11, [pc, #480]	; 801280c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801262e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801263a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801263e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012642:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8012646:	e087      	b.n	8012758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	ee07 3a90 	vmov	s15, r3
 801264e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012652:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012810 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8012656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801265a:	4b6a      	ldr	r3, [pc, #424]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801265c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801265e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012662:	ee07 3a90 	vmov	s15, r3
 8012666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801266a:	ed97 6a03 	vldr	s12, [r7, #12]
 801266e:	eddf 5a67 	vldr	s11, [pc, #412]	; 801280c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801267a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801267e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801268a:	e065      	b.n	8012758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801268c:	697b      	ldr	r3, [r7, #20]
 801268e:	ee07 3a90 	vmov	s15, r3
 8012692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012696:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801269a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801269e:	4b59      	ldr	r3, [pc, #356]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80126a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126a6:	ee07 3a90 	vmov	s15, r3
 80126aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80126ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80126b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 801280c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80126b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80126ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80126be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80126c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80126c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80126ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80126ce:	e043      	b.n	8012758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	ee07 3a90 	vmov	s15, r3
 80126d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80126de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80126e2:	4b48      	ldr	r3, [pc, #288]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80126e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126ea:	ee07 3a90 	vmov	s15, r3
 80126ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80126f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80126f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 801280c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80126fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80126fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801270a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801270e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012712:	e021      	b.n	8012758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	ee07 3a90 	vmov	s15, r3
 801271a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801271e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8012722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012726:	4b37      	ldr	r3, [pc, #220]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801272a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801272e:	ee07 3a90 	vmov	s15, r3
 8012732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012736:	ed97 6a03 	vldr	s12, [r7, #12]
 801273a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801280c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801273e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801274a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801274e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012756:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8012758:	4b2a      	ldr	r3, [pc, #168]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801275c:	0a5b      	lsrs	r3, r3, #9
 801275e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012762:	ee07 3a90 	vmov	s15, r3
 8012766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801276a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801276e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012772:	edd7 6a07 	vldr	s13, [r7, #28]
 8012776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801277a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801277e:	ee17 2a90 	vmov	r2, s15
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8012786:	4b1f      	ldr	r3, [pc, #124]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801278a:	0c1b      	lsrs	r3, r3, #16
 801278c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012790:	ee07 3a90 	vmov	s15, r3
 8012794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801279c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80127a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80127a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80127a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80127ac:	ee17 2a90 	vmov	r2, s15
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80127b4:	4b13      	ldr	r3, [pc, #76]	; (8012804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80127b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127b8:	0e1b      	lsrs	r3, r3, #24
 80127ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127be:	ee07 3a90 	vmov	s15, r3
 80127c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80127ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80127d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80127d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80127da:	ee17 2a90 	vmov	r2, s15
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80127e2:	e008      	b.n	80127f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2200      	movs	r2, #0
 80127e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	2200      	movs	r2, #0
 80127ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2200      	movs	r2, #0
 80127f4:	609a      	str	r2, [r3, #8]
}
 80127f6:	bf00      	nop
 80127f8:	3724      	adds	r7, #36	; 0x24
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr
 8012802:	bf00      	nop
 8012804:	58024400 	.word	0x58024400
 8012808:	03d09000 	.word	0x03d09000
 801280c:	46000000 	.word	0x46000000
 8012810:	4c742400 	.word	0x4c742400
 8012814:	4a742400 	.word	0x4a742400
 8012818:	4bb71b00 	.word	0x4bb71b00

0801281c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 801281c:	b480      	push	{r7}
 801281e:	b089      	sub	sp, #36	; 0x24
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012824:	4ba1      	ldr	r3, [pc, #644]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012828:	f003 0303 	and.w	r3, r3, #3
 801282c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 801282e:	4b9f      	ldr	r3, [pc, #636]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012832:	0d1b      	lsrs	r3, r3, #20
 8012834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012838:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801283a:	4b9c      	ldr	r3, [pc, #624]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801283e:	0a1b      	lsrs	r3, r3, #8
 8012840:	f003 0301 	and.w	r3, r3, #1
 8012844:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8012846:	4b99      	ldr	r3, [pc, #612]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801284a:	08db      	lsrs	r3, r3, #3
 801284c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012850:	693a      	ldr	r2, [r7, #16]
 8012852:	fb02 f303 	mul.w	r3, r2, r3
 8012856:	ee07 3a90 	vmov	s15, r3
 801285a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801285e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	2b00      	cmp	r3, #0
 8012866:	f000 8111 	beq.w	8012a8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801286a:	69bb      	ldr	r3, [r7, #24]
 801286c:	2b02      	cmp	r3, #2
 801286e:	f000 8083 	beq.w	8012978 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8012872:	69bb      	ldr	r3, [r7, #24]
 8012874:	2b02      	cmp	r3, #2
 8012876:	f200 80a1 	bhi.w	80129bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801287a:	69bb      	ldr	r3, [r7, #24]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d003      	beq.n	8012888 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8012880:	69bb      	ldr	r3, [r7, #24]
 8012882:	2b01      	cmp	r3, #1
 8012884:	d056      	beq.n	8012934 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8012886:	e099      	b.n	80129bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012888:	4b88      	ldr	r3, [pc, #544]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	f003 0320 	and.w	r3, r3, #32
 8012890:	2b00      	cmp	r3, #0
 8012892:	d02d      	beq.n	80128f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012894:	4b85      	ldr	r3, [pc, #532]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	08db      	lsrs	r3, r3, #3
 801289a:	f003 0303 	and.w	r3, r3, #3
 801289e:	4a84      	ldr	r2, [pc, #528]	; (8012ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80128a0:	fa22 f303 	lsr.w	r3, r2, r3
 80128a4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	ee07 3a90 	vmov	s15, r3
 80128ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	ee07 3a90 	vmov	s15, r3
 80128b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80128be:	4b7b      	ldr	r3, [pc, #492]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80128c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128c6:	ee07 3a90 	vmov	s15, r3
 80128ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80128ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80128d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8012ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80128d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80128da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80128de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80128e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80128e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80128ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80128ee:	e087      	b.n	8012a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	ee07 3a90 	vmov	s15, r3
 80128f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80128fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012902:	4b6a      	ldr	r3, [pc, #424]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801290a:	ee07 3a90 	vmov	s15, r3
 801290e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012912:	ed97 6a03 	vldr	s12, [r7, #12]
 8012916:	eddf 5a67 	vldr	s11, [pc, #412]	; 8012ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801291a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801291e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801292a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801292e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012932:	e065      	b.n	8012a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	ee07 3a90 	vmov	s15, r3
 801293a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801293e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012abc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012946:	4b59      	ldr	r3, [pc, #356]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801294e:	ee07 3a90 	vmov	s15, r3
 8012952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012956:	ed97 6a03 	vldr	s12, [r7, #12]
 801295a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8012ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801295e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801296a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012976:	e043      	b.n	8012a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	ee07 3a90 	vmov	s15, r3
 801297e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012982:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8012986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801298a:	4b48      	ldr	r3, [pc, #288]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801298e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012992:	ee07 3a90 	vmov	s15, r3
 8012996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801299a:	ed97 6a03 	vldr	s12, [r7, #12]
 801299e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80129a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80129a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80129aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80129ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80129ba:	e021      	b.n	8012a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	ee07 3a90 	vmov	s15, r3
 80129c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012abc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80129ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80129ce:	4b37      	ldr	r3, [pc, #220]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80129d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129d6:	ee07 3a90 	vmov	s15, r3
 80129da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80129de:	ed97 6a03 	vldr	s12, [r7, #12]
 80129e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80129e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80129ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80129ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80129f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80129fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8012a00:	4b2a      	ldr	r3, [pc, #168]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a04:	0a5b      	lsrs	r3, r3, #9
 8012a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a0a:	ee07 3a90 	vmov	s15, r3
 8012a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012a16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012a1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8012a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012a26:	ee17 2a90 	vmov	r2, s15
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8012a2e:	4b1f      	ldr	r3, [pc, #124]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a32:	0c1b      	lsrs	r3, r3, #16
 8012a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a38:	ee07 3a90 	vmov	s15, r3
 8012a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012a44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012a48:	edd7 6a07 	vldr	s13, [r7, #28]
 8012a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012a54:	ee17 2a90 	vmov	r2, s15
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8012a5c:	4b13      	ldr	r3, [pc, #76]	; (8012aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a60:	0e1b      	lsrs	r3, r3, #24
 8012a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a66:	ee07 3a90 	vmov	s15, r3
 8012a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012a72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012a76:	edd7 6a07 	vldr	s13, [r7, #28]
 8012a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012a82:	ee17 2a90 	vmov	r2, s15
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8012a8a:	e008      	b.n	8012a9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2200      	movs	r2, #0
 8012a96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	609a      	str	r2, [r3, #8]
}
 8012a9e:	bf00      	nop
 8012aa0:	3724      	adds	r7, #36	; 0x24
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop
 8012aac:	58024400 	.word	0x58024400
 8012ab0:	03d09000 	.word	0x03d09000
 8012ab4:	46000000 	.word	0x46000000
 8012ab8:	4c742400 	.word	0x4c742400
 8012abc:	4a742400 	.word	0x4a742400
 8012ac0:	4bb71b00 	.word	0x4bb71b00

08012ac4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8012ac4:	b480      	push	{r7}
 8012ac6:	b089      	sub	sp, #36	; 0x24
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012acc:	4ba0      	ldr	r3, [pc, #640]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ad0:	f003 0303 	and.w	r3, r3, #3
 8012ad4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8012ad6:	4b9e      	ldr	r3, [pc, #632]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ada:	091b      	lsrs	r3, r3, #4
 8012adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ae0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8012ae2:	4b9b      	ldr	r3, [pc, #620]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ae6:	f003 0301 	and.w	r3, r3, #1
 8012aea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012aec:	4b98      	ldr	r3, [pc, #608]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012af0:	08db      	lsrs	r3, r3, #3
 8012af2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012af6:	693a      	ldr	r2, [r7, #16]
 8012af8:	fb02 f303 	mul.w	r3, r2, r3
 8012afc:	ee07 3a90 	vmov	s15, r3
 8012b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b04:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	f000 8111 	beq.w	8012d32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8012b10:	69bb      	ldr	r3, [r7, #24]
 8012b12:	2b02      	cmp	r3, #2
 8012b14:	f000 8083 	beq.w	8012c1e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8012b18:	69bb      	ldr	r3, [r7, #24]
 8012b1a:	2b02      	cmp	r3, #2
 8012b1c:	f200 80a1 	bhi.w	8012c62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8012b20:	69bb      	ldr	r3, [r7, #24]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d003      	beq.n	8012b2e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8012b26:	69bb      	ldr	r3, [r7, #24]
 8012b28:	2b01      	cmp	r3, #1
 8012b2a:	d056      	beq.n	8012bda <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8012b2c:	e099      	b.n	8012c62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012b2e:	4b88      	ldr	r3, [pc, #544]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	f003 0320 	and.w	r3, r3, #32
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d02d      	beq.n	8012b96 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012b3a:	4b85      	ldr	r3, [pc, #532]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	08db      	lsrs	r3, r3, #3
 8012b40:	f003 0303 	and.w	r3, r3, #3
 8012b44:	4a83      	ldr	r2, [pc, #524]	; (8012d54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8012b46:	fa22 f303 	lsr.w	r3, r2, r3
 8012b4a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	ee07 3a90 	vmov	s15, r3
 8012b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	ee07 3a90 	vmov	s15, r3
 8012b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012b64:	4b7a      	ldr	r3, [pc, #488]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b6c:	ee07 3a90 	vmov	s15, r3
 8012b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012b74:	ed97 6a03 	vldr	s12, [r7, #12]
 8012b78:	eddf 5a77 	vldr	s11, [pc, #476]	; 8012d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012b7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012b80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012b84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b90:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8012b94:	e087      	b.n	8012ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	ee07 3a90 	vmov	s15, r3
 8012b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ba0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8012d5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8012ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012ba8:	4b69      	ldr	r3, [pc, #420]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bb0:	ee07 3a90 	vmov	s15, r3
 8012bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012bb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8012bbc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8012d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012bd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012bd8:	e065      	b.n	8012ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	ee07 3a90 	vmov	s15, r3
 8012be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012be4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8012d60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8012be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012bec:	4b58      	ldr	r3, [pc, #352]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bf4:	ee07 3a90 	vmov	s15, r3
 8012bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012bfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8012c00:	eddf 5a55 	vldr	s11, [pc, #340]	; 8012d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012c1c:	e043      	b.n	8012ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	ee07 3a90 	vmov	s15, r3
 8012c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c28:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8012d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8012c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c30:	4b47      	ldr	r3, [pc, #284]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c38:	ee07 3a90 	vmov	s15, r3
 8012c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c40:	ed97 6a03 	vldr	s12, [r7, #12]
 8012c44:	eddf 5a44 	vldr	s11, [pc, #272]	; 8012d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012c60:	e021      	b.n	8012ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012c62:	697b      	ldr	r3, [r7, #20]
 8012c64:	ee07 3a90 	vmov	s15, r3
 8012c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c6c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8012d5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8012c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c74:	4b36      	ldr	r3, [pc, #216]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c7c:	ee07 3a90 	vmov	s15, r3
 8012c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c84:	ed97 6a03 	vldr	s12, [r7, #12]
 8012c88:	eddf 5a33 	vldr	s11, [pc, #204]	; 8012d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ca0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8012ca4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8012ca6:	4b2a      	ldr	r3, [pc, #168]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012caa:	0a5b      	lsrs	r3, r3, #9
 8012cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cb0:	ee07 3a90 	vmov	s15, r3
 8012cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012cb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8012cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012ccc:	ee17 2a90 	vmov	r2, s15
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8012cd4:	4b1e      	ldr	r3, [pc, #120]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cd8:	0c1b      	lsrs	r3, r3, #16
 8012cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cde:	ee07 3a90 	vmov	s15, r3
 8012ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8012cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012cfa:	ee17 2a90 	vmov	r2, s15
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8012d02:	4b13      	ldr	r3, [pc, #76]	; (8012d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d06:	0e1b      	lsrs	r3, r3, #24
 8012d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d0c:	ee07 3a90 	vmov	s15, r3
 8012d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012d1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8012d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012d28:	ee17 2a90 	vmov	r2, s15
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8012d30:	e008      	b.n	8012d44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2200      	movs	r2, #0
 8012d36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2200      	movs	r2, #0
 8012d42:	609a      	str	r2, [r3, #8]
}
 8012d44:	bf00      	nop
 8012d46:	3724      	adds	r7, #36	; 0x24
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4e:	4770      	bx	lr
 8012d50:	58024400 	.word	0x58024400
 8012d54:	03d09000 	.word	0x03d09000
 8012d58:	46000000 	.word	0x46000000
 8012d5c:	4c742400 	.word	0x4c742400
 8012d60:	4a742400 	.word	0x4a742400
 8012d64:	4bb71b00 	.word	0x4bb71b00

08012d68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012d72:	2300      	movs	r3, #0
 8012d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012d76:	4b53      	ldr	r3, [pc, #332]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d7a:	f003 0303 	and.w	r3, r3, #3
 8012d7e:	2b03      	cmp	r3, #3
 8012d80:	d101      	bne.n	8012d86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8012d82:	2301      	movs	r3, #1
 8012d84:	e099      	b.n	8012eba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8012d86:	4b4f      	ldr	r3, [pc, #316]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	4a4e      	ldr	r2, [pc, #312]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012d8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012d92:	f7f8 fb9b 	bl	800b4cc <HAL_GetTick>
 8012d96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012d98:	e008      	b.n	8012dac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012d9a:	f7f8 fb97 	bl	800b4cc <HAL_GetTick>
 8012d9e:	4602      	mov	r2, r0
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	1ad3      	subs	r3, r2, r3
 8012da4:	2b02      	cmp	r3, #2
 8012da6:	d901      	bls.n	8012dac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012da8:	2303      	movs	r3, #3
 8012daa:	e086      	b.n	8012eba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012dac:	4b45      	ldr	r3, [pc, #276]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d1f0      	bne.n	8012d9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8012db8:	4b42      	ldr	r3, [pc, #264]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	031b      	lsls	r3, r3, #12
 8012dc6:	493f      	ldr	r1, [pc, #252]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012dc8:	4313      	orrs	r3, r2
 8012dca:	628b      	str	r3, [r1, #40]	; 0x28
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	685b      	ldr	r3, [r3, #4]
 8012dd0:	3b01      	subs	r3, #1
 8012dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	689b      	ldr	r3, [r3, #8]
 8012dda:	3b01      	subs	r3, #1
 8012ddc:	025b      	lsls	r3, r3, #9
 8012dde:	b29b      	uxth	r3, r3
 8012de0:	431a      	orrs	r2, r3
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	68db      	ldr	r3, [r3, #12]
 8012de6:	3b01      	subs	r3, #1
 8012de8:	041b      	lsls	r3, r3, #16
 8012dea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012dee:	431a      	orrs	r2, r3
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	691b      	ldr	r3, [r3, #16]
 8012df4:	3b01      	subs	r3, #1
 8012df6:	061b      	lsls	r3, r3, #24
 8012df8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012dfc:	4931      	ldr	r1, [pc, #196]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012dfe:	4313      	orrs	r3, r2
 8012e00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8012e02:	4b30      	ldr	r3, [pc, #192]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	695b      	ldr	r3, [r3, #20]
 8012e0e:	492d      	ldr	r1, [pc, #180]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e10:	4313      	orrs	r3, r2
 8012e12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012e14:	4b2b      	ldr	r3, [pc, #172]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e18:	f023 0220 	bic.w	r2, r3, #32
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	699b      	ldr	r3, [r3, #24]
 8012e20:	4928      	ldr	r1, [pc, #160]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e22:	4313      	orrs	r3, r2
 8012e24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012e26:	4b27      	ldr	r3, [pc, #156]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e2a:	4a26      	ldr	r2, [pc, #152]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e2c:	f023 0310 	bic.w	r3, r3, #16
 8012e30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012e32:	4b24      	ldr	r3, [pc, #144]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012e36:	4b24      	ldr	r3, [pc, #144]	; (8012ec8 <RCCEx_PLL2_Config+0x160>)
 8012e38:	4013      	ands	r3, r2
 8012e3a:	687a      	ldr	r2, [r7, #4]
 8012e3c:	69d2      	ldr	r2, [r2, #28]
 8012e3e:	00d2      	lsls	r2, r2, #3
 8012e40:	4920      	ldr	r1, [pc, #128]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e42:	4313      	orrs	r3, r2
 8012e44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012e46:	4b1f      	ldr	r3, [pc, #124]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e4a:	4a1e      	ldr	r2, [pc, #120]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e4c:	f043 0310 	orr.w	r3, r3, #16
 8012e50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d106      	bne.n	8012e66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012e58:	4b1a      	ldr	r3, [pc, #104]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e5c:	4a19      	ldr	r2, [pc, #100]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012e62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012e64:	e00f      	b.n	8012e86 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	2b01      	cmp	r3, #1
 8012e6a:	d106      	bne.n	8012e7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8012e6c:	4b15      	ldr	r3, [pc, #84]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e70:	4a14      	ldr	r2, [pc, #80]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012e76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012e78:	e005      	b.n	8012e86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8012e7a:	4b12      	ldr	r3, [pc, #72]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e7e:	4a11      	ldr	r2, [pc, #68]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012e84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012e86:	4b0f      	ldr	r3, [pc, #60]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	4a0e      	ldr	r2, [pc, #56]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012e8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012e92:	f7f8 fb1b 	bl	800b4cc <HAL_GetTick>
 8012e96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012e98:	e008      	b.n	8012eac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012e9a:	f7f8 fb17 	bl	800b4cc <HAL_GetTick>
 8012e9e:	4602      	mov	r2, r0
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	1ad3      	subs	r3, r2, r3
 8012ea4:	2b02      	cmp	r3, #2
 8012ea6:	d901      	bls.n	8012eac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012ea8:	2303      	movs	r3, #3
 8012eaa:	e006      	b.n	8012eba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012eac:	4b05      	ldr	r3, [pc, #20]	; (8012ec4 <RCCEx_PLL2_Config+0x15c>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d0f0      	beq.n	8012e9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8012eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3710      	adds	r7, #16
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
 8012ec2:	bf00      	nop
 8012ec4:	58024400 	.word	0x58024400
 8012ec8:	ffff0007 	.word	0xffff0007

08012ecc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b084      	sub	sp, #16
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012eda:	4b53      	ldr	r3, [pc, #332]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ede:	f003 0303 	and.w	r3, r3, #3
 8012ee2:	2b03      	cmp	r3, #3
 8012ee4:	d101      	bne.n	8012eea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	e099      	b.n	801301e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8012eea:	4b4f      	ldr	r3, [pc, #316]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	4a4e      	ldr	r2, [pc, #312]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012ef6:	f7f8 fae9 	bl	800b4cc <HAL_GetTick>
 8012efa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012efc:	e008      	b.n	8012f10 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012efe:	f7f8 fae5 	bl	800b4cc <HAL_GetTick>
 8012f02:	4602      	mov	r2, r0
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	1ad3      	subs	r3, r2, r3
 8012f08:	2b02      	cmp	r3, #2
 8012f0a:	d901      	bls.n	8012f10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012f0c:	2303      	movs	r3, #3
 8012f0e:	e086      	b.n	801301e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012f10:	4b45      	ldr	r3, [pc, #276]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d1f0      	bne.n	8012efe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012f1c:	4b42      	ldr	r3, [pc, #264]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	051b      	lsls	r3, r3, #20
 8012f2a:	493f      	ldr	r1, [pc, #252]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012f2c:	4313      	orrs	r3, r2
 8012f2e:	628b      	str	r3, [r1, #40]	; 0x28
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	3b01      	subs	r3, #1
 8012f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	689b      	ldr	r3, [r3, #8]
 8012f3e:	3b01      	subs	r3, #1
 8012f40:	025b      	lsls	r3, r3, #9
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	431a      	orrs	r2, r3
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	68db      	ldr	r3, [r3, #12]
 8012f4a:	3b01      	subs	r3, #1
 8012f4c:	041b      	lsls	r3, r3, #16
 8012f4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012f52:	431a      	orrs	r2, r3
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	691b      	ldr	r3, [r3, #16]
 8012f58:	3b01      	subs	r3, #1
 8012f5a:	061b      	lsls	r3, r3, #24
 8012f5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012f60:	4931      	ldr	r1, [pc, #196]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012f62:	4313      	orrs	r3, r2
 8012f64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012f66:	4b30      	ldr	r3, [pc, #192]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	695b      	ldr	r3, [r3, #20]
 8012f72:	492d      	ldr	r1, [pc, #180]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012f74:	4313      	orrs	r3, r2
 8012f76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012f78:	4b2b      	ldr	r3, [pc, #172]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	699b      	ldr	r3, [r3, #24]
 8012f84:	4928      	ldr	r1, [pc, #160]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012f86:	4313      	orrs	r3, r2
 8012f88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8012f8a:	4b27      	ldr	r3, [pc, #156]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f8e:	4a26      	ldr	r2, [pc, #152]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012f94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012f96:	4b24      	ldr	r3, [pc, #144]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f9a:	4b24      	ldr	r3, [pc, #144]	; (801302c <RCCEx_PLL3_Config+0x160>)
 8012f9c:	4013      	ands	r3, r2
 8012f9e:	687a      	ldr	r2, [r7, #4]
 8012fa0:	69d2      	ldr	r2, [r2, #28]
 8012fa2:	00d2      	lsls	r2, r2, #3
 8012fa4:	4920      	ldr	r1, [pc, #128]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012fa6:	4313      	orrs	r3, r2
 8012fa8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8012faa:	4b1f      	ldr	r3, [pc, #124]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fae:	4a1e      	ldr	r2, [pc, #120]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d106      	bne.n	8012fca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012fbc:	4b1a      	ldr	r3, [pc, #104]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fc0:	4a19      	ldr	r2, [pc, #100]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012fc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012fc8:	e00f      	b.n	8012fea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	2b01      	cmp	r3, #1
 8012fce:	d106      	bne.n	8012fde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8012fd0:	4b15      	ldr	r3, [pc, #84]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fd4:	4a14      	ldr	r2, [pc, #80]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012fd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012fdc:	e005      	b.n	8012fea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8012fde:	4b12      	ldr	r3, [pc, #72]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fe2:	4a11      	ldr	r2, [pc, #68]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012fe8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8012fea:	4b0f      	ldr	r3, [pc, #60]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	4a0e      	ldr	r2, [pc, #56]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8012ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012ff6:	f7f8 fa69 	bl	800b4cc <HAL_GetTick>
 8012ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012ffc:	e008      	b.n	8013010 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012ffe:	f7f8 fa65 	bl	800b4cc <HAL_GetTick>
 8013002:	4602      	mov	r2, r0
 8013004:	68bb      	ldr	r3, [r7, #8]
 8013006:	1ad3      	subs	r3, r2, r3
 8013008:	2b02      	cmp	r3, #2
 801300a:	d901      	bls.n	8013010 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801300c:	2303      	movs	r3, #3
 801300e:	e006      	b.n	801301e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013010:	4b05      	ldr	r3, [pc, #20]	; (8013028 <RCCEx_PLL3_Config+0x15c>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013018:	2b00      	cmp	r3, #0
 801301a:	d0f0      	beq.n	8012ffe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801301c:	7bfb      	ldrb	r3, [r7, #15]
}
 801301e:	4618      	mov	r0, r3
 8013020:	3710      	adds	r7, #16
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}
 8013026:	bf00      	nop
 8013028:	58024400 	.word	0x58024400
 801302c:	ffff0007 	.word	0xffff0007

08013030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b082      	sub	sp, #8
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d101      	bne.n	8013042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801303e:	2301      	movs	r3, #1
 8013040:	e049      	b.n	80130d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013048:	b2db      	uxtb	r3, r3
 801304a:	2b00      	cmp	r3, #0
 801304c:	d106      	bne.n	801305c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	2200      	movs	r2, #0
 8013052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f000 f841 	bl	80130de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2202      	movs	r2, #2
 8013060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681a      	ldr	r2, [r3, #0]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	3304      	adds	r3, #4
 801306c:	4619      	mov	r1, r3
 801306e:	4610      	mov	r0, r2
 8013070:	f000 fc68 	bl	8013944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2201      	movs	r2, #1
 8013078:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2201      	movs	r2, #1
 8013080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2201      	movs	r2, #1
 8013088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	2201      	movs	r2, #1
 8013090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2201      	movs	r2, #1
 8013098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2201      	movs	r2, #1
 80130a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2201      	movs	r2, #1
 80130a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	2201      	movs	r2, #1
 80130b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2201      	movs	r2, #1
 80130b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2201      	movs	r2, #1
 80130c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2201      	movs	r2, #1
 80130c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2201      	movs	r2, #1
 80130d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80130d4:	2300      	movs	r3, #0
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3708      	adds	r7, #8
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}

080130de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80130de:	b480      	push	{r7}
 80130e0:	b083      	sub	sp, #12
 80130e2:	af00      	add	r7, sp, #0
 80130e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80130e6:	bf00      	nop
 80130e8:	370c      	adds	r7, #12
 80130ea:	46bd      	mov	sp, r7
 80130ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f0:	4770      	bx	lr
	...

080130f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80130f4:	b480      	push	{r7}
 80130f6:	b085      	sub	sp, #20
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013102:	b2db      	uxtb	r3, r3
 8013104:	2b01      	cmp	r3, #1
 8013106:	d001      	beq.n	801310c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013108:	2301      	movs	r3, #1
 801310a:	e04f      	b.n	80131ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2202      	movs	r2, #2
 8013110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	68da      	ldr	r2, [r3, #12]
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	f042 0201 	orr.w	r2, r2, #1
 8013122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	4a23      	ldr	r2, [pc, #140]	; (80131b8 <HAL_TIM_Base_Start_IT+0xc4>)
 801312a:	4293      	cmp	r3, r2
 801312c:	d01d      	beq.n	801316a <HAL_TIM_Base_Start_IT+0x76>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013136:	d018      	beq.n	801316a <HAL_TIM_Base_Start_IT+0x76>
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	4a1f      	ldr	r2, [pc, #124]	; (80131bc <HAL_TIM_Base_Start_IT+0xc8>)
 801313e:	4293      	cmp	r3, r2
 8013140:	d013      	beq.n	801316a <HAL_TIM_Base_Start_IT+0x76>
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	4a1e      	ldr	r2, [pc, #120]	; (80131c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8013148:	4293      	cmp	r3, r2
 801314a:	d00e      	beq.n	801316a <HAL_TIM_Base_Start_IT+0x76>
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	4a1c      	ldr	r2, [pc, #112]	; (80131c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8013152:	4293      	cmp	r3, r2
 8013154:	d009      	beq.n	801316a <HAL_TIM_Base_Start_IT+0x76>
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	4a1b      	ldr	r2, [pc, #108]	; (80131c8 <HAL_TIM_Base_Start_IT+0xd4>)
 801315c:	4293      	cmp	r3, r2
 801315e:	d004      	beq.n	801316a <HAL_TIM_Base_Start_IT+0x76>
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	4a19      	ldr	r2, [pc, #100]	; (80131cc <HAL_TIM_Base_Start_IT+0xd8>)
 8013166:	4293      	cmp	r3, r2
 8013168:	d115      	bne.n	8013196 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	689a      	ldr	r2, [r3, #8]
 8013170:	4b17      	ldr	r3, [pc, #92]	; (80131d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8013172:	4013      	ands	r3, r2
 8013174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2b06      	cmp	r3, #6
 801317a:	d015      	beq.n	80131a8 <HAL_TIM_Base_Start_IT+0xb4>
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013182:	d011      	beq.n	80131a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	f042 0201 	orr.w	r2, r2, #1
 8013192:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013194:	e008      	b.n	80131a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	f042 0201 	orr.w	r2, r2, #1
 80131a4:	601a      	str	r2, [r3, #0]
 80131a6:	e000      	b.n	80131aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80131a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80131aa:	2300      	movs	r3, #0
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3714      	adds	r7, #20
 80131b0:	46bd      	mov	sp, r7
 80131b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b6:	4770      	bx	lr
 80131b8:	40010000 	.word	0x40010000
 80131bc:	40000400 	.word	0x40000400
 80131c0:	40000800 	.word	0x40000800
 80131c4:	40000c00 	.word	0x40000c00
 80131c8:	40010400 	.word	0x40010400
 80131cc:	40001800 	.word	0x40001800
 80131d0:	00010007 	.word	0x00010007

080131d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d101      	bne.n	80131e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80131e2:	2301      	movs	r3, #1
 80131e4:	e049      	b.n	801327a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80131ec:	b2db      	uxtb	r3, r3
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d106      	bne.n	8013200 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2200      	movs	r2, #0
 80131f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f7f0 fcaa 	bl	8003b54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2202      	movs	r2, #2
 8013204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681a      	ldr	r2, [r3, #0]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	3304      	adds	r3, #4
 8013210:	4619      	mov	r1, r3
 8013212:	4610      	mov	r0, r2
 8013214:	f000 fb96 	bl	8013944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2201      	movs	r2, #1
 801321c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2201      	movs	r2, #1
 8013224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2201      	movs	r2, #1
 801322c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2201      	movs	r2, #1
 8013234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	2201      	movs	r2, #1
 801323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2201      	movs	r2, #1
 8013244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2201      	movs	r2, #1
 801324c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2201      	movs	r2, #1
 8013254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2201      	movs	r2, #1
 801325c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	2201      	movs	r2, #1
 8013264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2201      	movs	r2, #1
 801326c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2201      	movs	r2, #1
 8013274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013278:	2300      	movs	r3, #0
}
 801327a:	4618      	mov	r0, r3
 801327c:	3708      	adds	r7, #8
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
	...

08013284 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b084      	sub	sp, #16
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
 801328c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d109      	bne.n	80132a8 <HAL_TIM_PWM_Start+0x24>
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801329a:	b2db      	uxtb	r3, r3
 801329c:	2b01      	cmp	r3, #1
 801329e:	bf14      	ite	ne
 80132a0:	2301      	movne	r3, #1
 80132a2:	2300      	moveq	r3, #0
 80132a4:	b2db      	uxtb	r3, r3
 80132a6:	e03c      	b.n	8013322 <HAL_TIM_PWM_Start+0x9e>
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	2b04      	cmp	r3, #4
 80132ac:	d109      	bne.n	80132c2 <HAL_TIM_PWM_Start+0x3e>
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80132b4:	b2db      	uxtb	r3, r3
 80132b6:	2b01      	cmp	r3, #1
 80132b8:	bf14      	ite	ne
 80132ba:	2301      	movne	r3, #1
 80132bc:	2300      	moveq	r3, #0
 80132be:	b2db      	uxtb	r3, r3
 80132c0:	e02f      	b.n	8013322 <HAL_TIM_PWM_Start+0x9e>
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	2b08      	cmp	r3, #8
 80132c6:	d109      	bne.n	80132dc <HAL_TIM_PWM_Start+0x58>
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80132ce:	b2db      	uxtb	r3, r3
 80132d0:	2b01      	cmp	r3, #1
 80132d2:	bf14      	ite	ne
 80132d4:	2301      	movne	r3, #1
 80132d6:	2300      	moveq	r3, #0
 80132d8:	b2db      	uxtb	r3, r3
 80132da:	e022      	b.n	8013322 <HAL_TIM_PWM_Start+0x9e>
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	2b0c      	cmp	r3, #12
 80132e0:	d109      	bne.n	80132f6 <HAL_TIM_PWM_Start+0x72>
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80132e8:	b2db      	uxtb	r3, r3
 80132ea:	2b01      	cmp	r3, #1
 80132ec:	bf14      	ite	ne
 80132ee:	2301      	movne	r3, #1
 80132f0:	2300      	moveq	r3, #0
 80132f2:	b2db      	uxtb	r3, r3
 80132f4:	e015      	b.n	8013322 <HAL_TIM_PWM_Start+0x9e>
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	2b10      	cmp	r3, #16
 80132fa:	d109      	bne.n	8013310 <HAL_TIM_PWM_Start+0x8c>
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013302:	b2db      	uxtb	r3, r3
 8013304:	2b01      	cmp	r3, #1
 8013306:	bf14      	ite	ne
 8013308:	2301      	movne	r3, #1
 801330a:	2300      	moveq	r3, #0
 801330c:	b2db      	uxtb	r3, r3
 801330e:	e008      	b.n	8013322 <HAL_TIM_PWM_Start+0x9e>
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013316:	b2db      	uxtb	r3, r3
 8013318:	2b01      	cmp	r3, #1
 801331a:	bf14      	ite	ne
 801331c:	2301      	movne	r3, #1
 801331e:	2300      	moveq	r3, #0
 8013320:	b2db      	uxtb	r3, r3
 8013322:	2b00      	cmp	r3, #0
 8013324:	d001      	beq.n	801332a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8013326:	2301      	movs	r3, #1
 8013328:	e09c      	b.n	8013464 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d104      	bne.n	801333a <HAL_TIM_PWM_Start+0xb6>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2202      	movs	r2, #2
 8013334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013338:	e023      	b.n	8013382 <HAL_TIM_PWM_Start+0xfe>
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	2b04      	cmp	r3, #4
 801333e:	d104      	bne.n	801334a <HAL_TIM_PWM_Start+0xc6>
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2202      	movs	r2, #2
 8013344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013348:	e01b      	b.n	8013382 <HAL_TIM_PWM_Start+0xfe>
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	2b08      	cmp	r3, #8
 801334e:	d104      	bne.n	801335a <HAL_TIM_PWM_Start+0xd6>
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2202      	movs	r2, #2
 8013354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013358:	e013      	b.n	8013382 <HAL_TIM_PWM_Start+0xfe>
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	2b0c      	cmp	r3, #12
 801335e:	d104      	bne.n	801336a <HAL_TIM_PWM_Start+0xe6>
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2202      	movs	r2, #2
 8013364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013368:	e00b      	b.n	8013382 <HAL_TIM_PWM_Start+0xfe>
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	2b10      	cmp	r3, #16
 801336e:	d104      	bne.n	801337a <HAL_TIM_PWM_Start+0xf6>
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	2202      	movs	r2, #2
 8013374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013378:	e003      	b.n	8013382 <HAL_TIM_PWM_Start+0xfe>
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	2202      	movs	r2, #2
 801337e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	2201      	movs	r2, #1
 8013388:	6839      	ldr	r1, [r7, #0]
 801338a:	4618      	mov	r0, r3
 801338c:	f000 fe42 	bl	8014014 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	4a35      	ldr	r2, [pc, #212]	; (801346c <HAL_TIM_PWM_Start+0x1e8>)
 8013396:	4293      	cmp	r3, r2
 8013398:	d013      	beq.n	80133c2 <HAL_TIM_PWM_Start+0x13e>
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	4a34      	ldr	r2, [pc, #208]	; (8013470 <HAL_TIM_PWM_Start+0x1ec>)
 80133a0:	4293      	cmp	r3, r2
 80133a2:	d00e      	beq.n	80133c2 <HAL_TIM_PWM_Start+0x13e>
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	4a32      	ldr	r2, [pc, #200]	; (8013474 <HAL_TIM_PWM_Start+0x1f0>)
 80133aa:	4293      	cmp	r3, r2
 80133ac:	d009      	beq.n	80133c2 <HAL_TIM_PWM_Start+0x13e>
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	4a31      	ldr	r2, [pc, #196]	; (8013478 <HAL_TIM_PWM_Start+0x1f4>)
 80133b4:	4293      	cmp	r3, r2
 80133b6:	d004      	beq.n	80133c2 <HAL_TIM_PWM_Start+0x13e>
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	4a2f      	ldr	r2, [pc, #188]	; (801347c <HAL_TIM_PWM_Start+0x1f8>)
 80133be:	4293      	cmp	r3, r2
 80133c0:	d101      	bne.n	80133c6 <HAL_TIM_PWM_Start+0x142>
 80133c2:	2301      	movs	r3, #1
 80133c4:	e000      	b.n	80133c8 <HAL_TIM_PWM_Start+0x144>
 80133c6:	2300      	movs	r3, #0
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d007      	beq.n	80133dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80133da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	4a22      	ldr	r2, [pc, #136]	; (801346c <HAL_TIM_PWM_Start+0x1e8>)
 80133e2:	4293      	cmp	r3, r2
 80133e4:	d01d      	beq.n	8013422 <HAL_TIM_PWM_Start+0x19e>
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80133ee:	d018      	beq.n	8013422 <HAL_TIM_PWM_Start+0x19e>
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	4a22      	ldr	r2, [pc, #136]	; (8013480 <HAL_TIM_PWM_Start+0x1fc>)
 80133f6:	4293      	cmp	r3, r2
 80133f8:	d013      	beq.n	8013422 <HAL_TIM_PWM_Start+0x19e>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	4a21      	ldr	r2, [pc, #132]	; (8013484 <HAL_TIM_PWM_Start+0x200>)
 8013400:	4293      	cmp	r3, r2
 8013402:	d00e      	beq.n	8013422 <HAL_TIM_PWM_Start+0x19e>
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	4a1f      	ldr	r2, [pc, #124]	; (8013488 <HAL_TIM_PWM_Start+0x204>)
 801340a:	4293      	cmp	r3, r2
 801340c:	d009      	beq.n	8013422 <HAL_TIM_PWM_Start+0x19e>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	4a17      	ldr	r2, [pc, #92]	; (8013470 <HAL_TIM_PWM_Start+0x1ec>)
 8013414:	4293      	cmp	r3, r2
 8013416:	d004      	beq.n	8013422 <HAL_TIM_PWM_Start+0x19e>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	4a1b      	ldr	r2, [pc, #108]	; (801348c <HAL_TIM_PWM_Start+0x208>)
 801341e:	4293      	cmp	r3, r2
 8013420:	d115      	bne.n	801344e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	689a      	ldr	r2, [r3, #8]
 8013428:	4b19      	ldr	r3, [pc, #100]	; (8013490 <HAL_TIM_PWM_Start+0x20c>)
 801342a:	4013      	ands	r3, r2
 801342c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	2b06      	cmp	r3, #6
 8013432:	d015      	beq.n	8013460 <HAL_TIM_PWM_Start+0x1dc>
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801343a:	d011      	beq.n	8013460 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	681a      	ldr	r2, [r3, #0]
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	f042 0201 	orr.w	r2, r2, #1
 801344a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801344c:	e008      	b.n	8013460 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	681a      	ldr	r2, [r3, #0]
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	f042 0201 	orr.w	r2, r2, #1
 801345c:	601a      	str	r2, [r3, #0]
 801345e:	e000      	b.n	8013462 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013460:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013462:	2300      	movs	r3, #0
}
 8013464:	4618      	mov	r0, r3
 8013466:	3710      	adds	r7, #16
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}
 801346c:	40010000 	.word	0x40010000
 8013470:	40010400 	.word	0x40010400
 8013474:	40014000 	.word	0x40014000
 8013478:	40014400 	.word	0x40014400
 801347c:	40014800 	.word	0x40014800
 8013480:	40000400 	.word	0x40000400
 8013484:	40000800 	.word	0x40000800
 8013488:	40000c00 	.word	0x40000c00
 801348c:	40001800 	.word	0x40001800
 8013490:	00010007 	.word	0x00010007

08013494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b082      	sub	sp, #8
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	691b      	ldr	r3, [r3, #16]
 80134a2:	f003 0302 	and.w	r3, r3, #2
 80134a6:	2b02      	cmp	r3, #2
 80134a8:	d122      	bne.n	80134f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	68db      	ldr	r3, [r3, #12]
 80134b0:	f003 0302 	and.w	r3, r3, #2
 80134b4:	2b02      	cmp	r3, #2
 80134b6:	d11b      	bne.n	80134f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	f06f 0202 	mvn.w	r2, #2
 80134c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2201      	movs	r2, #1
 80134c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	699b      	ldr	r3, [r3, #24]
 80134ce:	f003 0303 	and.w	r3, r3, #3
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d003      	beq.n	80134de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80134d6:	6878      	ldr	r0, [r7, #4]
 80134d8:	f000 fa16 	bl	8013908 <HAL_TIM_IC_CaptureCallback>
 80134dc:	e005      	b.n	80134ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f000 fa08 	bl	80138f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80134e4:	6878      	ldr	r0, [r7, #4]
 80134e6:	f000 fa19 	bl	801391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	2200      	movs	r2, #0
 80134ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	691b      	ldr	r3, [r3, #16]
 80134f6:	f003 0304 	and.w	r3, r3, #4
 80134fa:	2b04      	cmp	r3, #4
 80134fc:	d122      	bne.n	8013544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	68db      	ldr	r3, [r3, #12]
 8013504:	f003 0304 	and.w	r3, r3, #4
 8013508:	2b04      	cmp	r3, #4
 801350a:	d11b      	bne.n	8013544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	f06f 0204 	mvn.w	r2, #4
 8013514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2202      	movs	r2, #2
 801351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	699b      	ldr	r3, [r3, #24]
 8013522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013526:	2b00      	cmp	r3, #0
 8013528:	d003      	beq.n	8013532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801352a:	6878      	ldr	r0, [r7, #4]
 801352c:	f000 f9ec 	bl	8013908 <HAL_TIM_IC_CaptureCallback>
 8013530:	e005      	b.n	801353e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f000 f9de 	bl	80138f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f000 f9ef 	bl	801391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2200      	movs	r2, #0
 8013542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	691b      	ldr	r3, [r3, #16]
 801354a:	f003 0308 	and.w	r3, r3, #8
 801354e:	2b08      	cmp	r3, #8
 8013550:	d122      	bne.n	8013598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	68db      	ldr	r3, [r3, #12]
 8013558:	f003 0308 	and.w	r3, r3, #8
 801355c:	2b08      	cmp	r3, #8
 801355e:	d11b      	bne.n	8013598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	f06f 0208 	mvn.w	r2, #8
 8013568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2204      	movs	r2, #4
 801356e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	69db      	ldr	r3, [r3, #28]
 8013576:	f003 0303 	and.w	r3, r3, #3
 801357a:	2b00      	cmp	r3, #0
 801357c:	d003      	beq.n	8013586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	f000 f9c2 	bl	8013908 <HAL_TIM_IC_CaptureCallback>
 8013584:	e005      	b.n	8013592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f000 f9b4 	bl	80138f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f000 f9c5 	bl	801391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2200      	movs	r2, #0
 8013596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	691b      	ldr	r3, [r3, #16]
 801359e:	f003 0310 	and.w	r3, r3, #16
 80135a2:	2b10      	cmp	r3, #16
 80135a4:	d122      	bne.n	80135ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	68db      	ldr	r3, [r3, #12]
 80135ac:	f003 0310 	and.w	r3, r3, #16
 80135b0:	2b10      	cmp	r3, #16
 80135b2:	d11b      	bne.n	80135ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f06f 0210 	mvn.w	r2, #16
 80135bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	2208      	movs	r2, #8
 80135c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	69db      	ldr	r3, [r3, #28]
 80135ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d003      	beq.n	80135da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f000 f998 	bl	8013908 <HAL_TIM_IC_CaptureCallback>
 80135d8:	e005      	b.n	80135e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f000 f98a 	bl	80138f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	f000 f99b 	bl	801391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	2200      	movs	r2, #0
 80135ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	691b      	ldr	r3, [r3, #16]
 80135f2:	f003 0301 	and.w	r3, r3, #1
 80135f6:	2b01      	cmp	r3, #1
 80135f8:	d10e      	bne.n	8013618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	68db      	ldr	r3, [r3, #12]
 8013600:	f003 0301 	and.w	r3, r3, #1
 8013604:	2b01      	cmp	r3, #1
 8013606:	d107      	bne.n	8013618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	f06f 0201 	mvn.w	r2, #1
 8013610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013612:	6878      	ldr	r0, [r7, #4]
 8013614:	f7f0 f81a 	bl	800364c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	691b      	ldr	r3, [r3, #16]
 801361e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013622:	2b80      	cmp	r3, #128	; 0x80
 8013624:	d10e      	bne.n	8013644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	68db      	ldr	r3, [r3, #12]
 801362c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013630:	2b80      	cmp	r3, #128	; 0x80
 8013632:	d107      	bne.n	8013644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801363c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f000 fe1e 	bl	8014280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	691b      	ldr	r3, [r3, #16]
 801364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801364e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013652:	d10e      	bne.n	8013672 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	68db      	ldr	r3, [r3, #12]
 801365a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801365e:	2b80      	cmp	r3, #128	; 0x80
 8013660:	d107      	bne.n	8013672 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801366a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f000 fe11 	bl	8014294 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	691b      	ldr	r3, [r3, #16]
 8013678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801367c:	2b40      	cmp	r3, #64	; 0x40
 801367e:	d10e      	bne.n	801369e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	68db      	ldr	r3, [r3, #12]
 8013686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801368a:	2b40      	cmp	r3, #64	; 0x40
 801368c:	d107      	bne.n	801369e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f000 f949 	bl	8013930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	691b      	ldr	r3, [r3, #16]
 80136a4:	f003 0320 	and.w	r3, r3, #32
 80136a8:	2b20      	cmp	r3, #32
 80136aa:	d10e      	bne.n	80136ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	f003 0320 	and.w	r3, r3, #32
 80136b6:	2b20      	cmp	r3, #32
 80136b8:	d107      	bne.n	80136ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	f06f 0220 	mvn.w	r2, #32
 80136c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f000 fdd1 	bl	801426c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80136ca:	bf00      	nop
 80136cc:	3708      	adds	r7, #8
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}
	...

080136d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b084      	sub	sp, #16
 80136d8:	af00      	add	r7, sp, #0
 80136da:	60f8      	str	r0, [r7, #12]
 80136dc:	60b9      	str	r1, [r7, #8]
 80136de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80136e6:	2b01      	cmp	r3, #1
 80136e8:	d101      	bne.n	80136ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80136ea:	2302      	movs	r3, #2
 80136ec:	e0fd      	b.n	80138ea <HAL_TIM_PWM_ConfigChannel+0x216>
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2201      	movs	r2, #1
 80136f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	2b14      	cmp	r3, #20
 80136fa:	f200 80f0 	bhi.w	80138de <HAL_TIM_PWM_ConfigChannel+0x20a>
 80136fe:	a201      	add	r2, pc, #4	; (adr r2, 8013704 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8013700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013704:	08013759 	.word	0x08013759
 8013708:	080138df 	.word	0x080138df
 801370c:	080138df 	.word	0x080138df
 8013710:	080138df 	.word	0x080138df
 8013714:	08013799 	.word	0x08013799
 8013718:	080138df 	.word	0x080138df
 801371c:	080138df 	.word	0x080138df
 8013720:	080138df 	.word	0x080138df
 8013724:	080137db 	.word	0x080137db
 8013728:	080138df 	.word	0x080138df
 801372c:	080138df 	.word	0x080138df
 8013730:	080138df 	.word	0x080138df
 8013734:	0801381b 	.word	0x0801381b
 8013738:	080138df 	.word	0x080138df
 801373c:	080138df 	.word	0x080138df
 8013740:	080138df 	.word	0x080138df
 8013744:	0801385d 	.word	0x0801385d
 8013748:	080138df 	.word	0x080138df
 801374c:	080138df 	.word	0x080138df
 8013750:	080138df 	.word	0x080138df
 8013754:	0801389d 	.word	0x0801389d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	68b9      	ldr	r1, [r7, #8]
 801375e:	4618      	mov	r0, r3
 8013760:	f000 f98a 	bl	8013a78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	699a      	ldr	r2, [r3, #24]
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	f042 0208 	orr.w	r2, r2, #8
 8013772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	699a      	ldr	r2, [r3, #24]
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	f022 0204 	bic.w	r2, r2, #4
 8013782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	6999      	ldr	r1, [r3, #24]
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	691a      	ldr	r2, [r3, #16]
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	430a      	orrs	r2, r1
 8013794:	619a      	str	r2, [r3, #24]
      break;
 8013796:	e0a3      	b.n	80138e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	68b9      	ldr	r1, [r7, #8]
 801379e:	4618      	mov	r0, r3
 80137a0:	f000 f9fa 	bl	8013b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	699a      	ldr	r2, [r3, #24]
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80137b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	699a      	ldr	r2, [r3, #24]
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80137c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	6999      	ldr	r1, [r3, #24]
 80137ca:	68bb      	ldr	r3, [r7, #8]
 80137cc:	691b      	ldr	r3, [r3, #16]
 80137ce:	021a      	lsls	r2, r3, #8
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	430a      	orrs	r2, r1
 80137d6:	619a      	str	r2, [r3, #24]
      break;
 80137d8:	e082      	b.n	80138e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	68b9      	ldr	r1, [r7, #8]
 80137e0:	4618      	mov	r0, r3
 80137e2:	f000 fa63 	bl	8013cac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	69da      	ldr	r2, [r3, #28]
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	f042 0208 	orr.w	r2, r2, #8
 80137f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	69da      	ldr	r2, [r3, #28]
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	f022 0204 	bic.w	r2, r2, #4
 8013804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	69d9      	ldr	r1, [r3, #28]
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	691a      	ldr	r2, [r3, #16]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	430a      	orrs	r2, r1
 8013816:	61da      	str	r2, [r3, #28]
      break;
 8013818:	e062      	b.n	80138e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	68b9      	ldr	r1, [r7, #8]
 8013820:	4618      	mov	r0, r3
 8013822:	f000 fac9 	bl	8013db8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	69da      	ldr	r2, [r3, #28]
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	69da      	ldr	r2, [r3, #28]
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	69d9      	ldr	r1, [r3, #28]
 801384c:	68bb      	ldr	r3, [r7, #8]
 801384e:	691b      	ldr	r3, [r3, #16]
 8013850:	021a      	lsls	r2, r3, #8
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	430a      	orrs	r2, r1
 8013858:	61da      	str	r2, [r3, #28]
      break;
 801385a:	e041      	b.n	80138e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	68b9      	ldr	r1, [r7, #8]
 8013862:	4618      	mov	r0, r3
 8013864:	f000 fb10 	bl	8013e88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	f042 0208 	orr.w	r2, r2, #8
 8013876:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	f022 0204 	bic.w	r2, r2, #4
 8013886:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	691a      	ldr	r2, [r3, #16]
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	430a      	orrs	r2, r1
 8013898:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801389a:	e021      	b.n	80138e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	68b9      	ldr	r1, [r7, #8]
 80138a2:	4618      	mov	r0, r3
 80138a4:	f000 fb52 	bl	8013f4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80138b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80138c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	691b      	ldr	r3, [r3, #16]
 80138d2:	021a      	lsls	r2, r3, #8
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	430a      	orrs	r2, r1
 80138da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80138dc:	e000      	b.n	80138e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80138de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	2200      	movs	r2, #0
 80138e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80138e8:	2300      	movs	r3, #0
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	3710      	adds	r7, #16
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}
 80138f2:	bf00      	nop

080138f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80138f4:	b480      	push	{r7}
 80138f6:	b083      	sub	sp, #12
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80138fc:	bf00      	nop
 80138fe:	370c      	adds	r7, #12
 8013900:	46bd      	mov	sp, r7
 8013902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013906:	4770      	bx	lr

08013908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013908:	b480      	push	{r7}
 801390a:	b083      	sub	sp, #12
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013910:	bf00      	nop
 8013912:	370c      	adds	r7, #12
 8013914:	46bd      	mov	sp, r7
 8013916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391a:	4770      	bx	lr

0801391c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801391c:	b480      	push	{r7}
 801391e:	b083      	sub	sp, #12
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013924:	bf00      	nop
 8013926:	370c      	adds	r7, #12
 8013928:	46bd      	mov	sp, r7
 801392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392e:	4770      	bx	lr

08013930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013930:	b480      	push	{r7}
 8013932:	b083      	sub	sp, #12
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013938:	bf00      	nop
 801393a:	370c      	adds	r7, #12
 801393c:	46bd      	mov	sp, r7
 801393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013942:	4770      	bx	lr

08013944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013944:	b480      	push	{r7}
 8013946:	b085      	sub	sp, #20
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	4a40      	ldr	r2, [pc, #256]	; (8013a58 <TIM_Base_SetConfig+0x114>)
 8013958:	4293      	cmp	r3, r2
 801395a:	d013      	beq.n	8013984 <TIM_Base_SetConfig+0x40>
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013962:	d00f      	beq.n	8013984 <TIM_Base_SetConfig+0x40>
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	4a3d      	ldr	r2, [pc, #244]	; (8013a5c <TIM_Base_SetConfig+0x118>)
 8013968:	4293      	cmp	r3, r2
 801396a:	d00b      	beq.n	8013984 <TIM_Base_SetConfig+0x40>
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	4a3c      	ldr	r2, [pc, #240]	; (8013a60 <TIM_Base_SetConfig+0x11c>)
 8013970:	4293      	cmp	r3, r2
 8013972:	d007      	beq.n	8013984 <TIM_Base_SetConfig+0x40>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	4a3b      	ldr	r2, [pc, #236]	; (8013a64 <TIM_Base_SetConfig+0x120>)
 8013978:	4293      	cmp	r3, r2
 801397a:	d003      	beq.n	8013984 <TIM_Base_SetConfig+0x40>
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	4a3a      	ldr	r2, [pc, #232]	; (8013a68 <TIM_Base_SetConfig+0x124>)
 8013980:	4293      	cmp	r3, r2
 8013982:	d108      	bne.n	8013996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801398a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	68fa      	ldr	r2, [r7, #12]
 8013992:	4313      	orrs	r3, r2
 8013994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	4a2f      	ldr	r2, [pc, #188]	; (8013a58 <TIM_Base_SetConfig+0x114>)
 801399a:	4293      	cmp	r3, r2
 801399c:	d01f      	beq.n	80139de <TIM_Base_SetConfig+0x9a>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80139a4:	d01b      	beq.n	80139de <TIM_Base_SetConfig+0x9a>
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	4a2c      	ldr	r2, [pc, #176]	; (8013a5c <TIM_Base_SetConfig+0x118>)
 80139aa:	4293      	cmp	r3, r2
 80139ac:	d017      	beq.n	80139de <TIM_Base_SetConfig+0x9a>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	4a2b      	ldr	r2, [pc, #172]	; (8013a60 <TIM_Base_SetConfig+0x11c>)
 80139b2:	4293      	cmp	r3, r2
 80139b4:	d013      	beq.n	80139de <TIM_Base_SetConfig+0x9a>
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	4a2a      	ldr	r2, [pc, #168]	; (8013a64 <TIM_Base_SetConfig+0x120>)
 80139ba:	4293      	cmp	r3, r2
 80139bc:	d00f      	beq.n	80139de <TIM_Base_SetConfig+0x9a>
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	4a29      	ldr	r2, [pc, #164]	; (8013a68 <TIM_Base_SetConfig+0x124>)
 80139c2:	4293      	cmp	r3, r2
 80139c4:	d00b      	beq.n	80139de <TIM_Base_SetConfig+0x9a>
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	4a28      	ldr	r2, [pc, #160]	; (8013a6c <TIM_Base_SetConfig+0x128>)
 80139ca:	4293      	cmp	r3, r2
 80139cc:	d007      	beq.n	80139de <TIM_Base_SetConfig+0x9a>
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	4a27      	ldr	r2, [pc, #156]	; (8013a70 <TIM_Base_SetConfig+0x12c>)
 80139d2:	4293      	cmp	r3, r2
 80139d4:	d003      	beq.n	80139de <TIM_Base_SetConfig+0x9a>
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	4a26      	ldr	r2, [pc, #152]	; (8013a74 <TIM_Base_SetConfig+0x130>)
 80139da:	4293      	cmp	r3, r2
 80139dc:	d108      	bne.n	80139f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80139e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	68db      	ldr	r3, [r3, #12]
 80139ea:	68fa      	ldr	r2, [r7, #12]
 80139ec:	4313      	orrs	r3, r2
 80139ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	695b      	ldr	r3, [r3, #20]
 80139fa:	4313      	orrs	r3, r2
 80139fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	68fa      	ldr	r2, [r7, #12]
 8013a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	689a      	ldr	r2, [r3, #8]
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013a0c:	683b      	ldr	r3, [r7, #0]
 8013a0e:	681a      	ldr	r2, [r3, #0]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	4a10      	ldr	r2, [pc, #64]	; (8013a58 <TIM_Base_SetConfig+0x114>)
 8013a18:	4293      	cmp	r3, r2
 8013a1a:	d00f      	beq.n	8013a3c <TIM_Base_SetConfig+0xf8>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	4a12      	ldr	r2, [pc, #72]	; (8013a68 <TIM_Base_SetConfig+0x124>)
 8013a20:	4293      	cmp	r3, r2
 8013a22:	d00b      	beq.n	8013a3c <TIM_Base_SetConfig+0xf8>
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	4a11      	ldr	r2, [pc, #68]	; (8013a6c <TIM_Base_SetConfig+0x128>)
 8013a28:	4293      	cmp	r3, r2
 8013a2a:	d007      	beq.n	8013a3c <TIM_Base_SetConfig+0xf8>
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	4a10      	ldr	r2, [pc, #64]	; (8013a70 <TIM_Base_SetConfig+0x12c>)
 8013a30:	4293      	cmp	r3, r2
 8013a32:	d003      	beq.n	8013a3c <TIM_Base_SetConfig+0xf8>
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	4a0f      	ldr	r2, [pc, #60]	; (8013a74 <TIM_Base_SetConfig+0x130>)
 8013a38:	4293      	cmp	r3, r2
 8013a3a:	d103      	bne.n	8013a44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	691a      	ldr	r2, [r3, #16]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2201      	movs	r2, #1
 8013a48:	615a      	str	r2, [r3, #20]
}
 8013a4a:	bf00      	nop
 8013a4c:	3714      	adds	r7, #20
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a54:	4770      	bx	lr
 8013a56:	bf00      	nop
 8013a58:	40010000 	.word	0x40010000
 8013a5c:	40000400 	.word	0x40000400
 8013a60:	40000800 	.word	0x40000800
 8013a64:	40000c00 	.word	0x40000c00
 8013a68:	40010400 	.word	0x40010400
 8013a6c:	40014000 	.word	0x40014000
 8013a70:	40014400 	.word	0x40014400
 8013a74:	40014800 	.word	0x40014800

08013a78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013a78:	b480      	push	{r7}
 8013a7a:	b087      	sub	sp, #28
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6a1b      	ldr	r3, [r3, #32]
 8013a86:	f023 0201 	bic.w	r2, r3, #1
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	6a1b      	ldr	r3, [r3, #32]
 8013a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	685b      	ldr	r3, [r3, #4]
 8013a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	699b      	ldr	r3, [r3, #24]
 8013a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013aa0:	68fa      	ldr	r2, [r7, #12]
 8013aa2:	4b37      	ldr	r3, [pc, #220]	; (8013b80 <TIM_OC1_SetConfig+0x108>)
 8013aa4:	4013      	ands	r3, r2
 8013aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	f023 0303 	bic.w	r3, r3, #3
 8013aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	4313      	orrs	r3, r2
 8013ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	f023 0302 	bic.w	r3, r3, #2
 8013ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	689b      	ldr	r3, [r3, #8]
 8013ac6:	697a      	ldr	r2, [r7, #20]
 8013ac8:	4313      	orrs	r3, r2
 8013aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	4a2d      	ldr	r2, [pc, #180]	; (8013b84 <TIM_OC1_SetConfig+0x10c>)
 8013ad0:	4293      	cmp	r3, r2
 8013ad2:	d00f      	beq.n	8013af4 <TIM_OC1_SetConfig+0x7c>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	4a2c      	ldr	r2, [pc, #176]	; (8013b88 <TIM_OC1_SetConfig+0x110>)
 8013ad8:	4293      	cmp	r3, r2
 8013ada:	d00b      	beq.n	8013af4 <TIM_OC1_SetConfig+0x7c>
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	4a2b      	ldr	r2, [pc, #172]	; (8013b8c <TIM_OC1_SetConfig+0x114>)
 8013ae0:	4293      	cmp	r3, r2
 8013ae2:	d007      	beq.n	8013af4 <TIM_OC1_SetConfig+0x7c>
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	4a2a      	ldr	r2, [pc, #168]	; (8013b90 <TIM_OC1_SetConfig+0x118>)
 8013ae8:	4293      	cmp	r3, r2
 8013aea:	d003      	beq.n	8013af4 <TIM_OC1_SetConfig+0x7c>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	4a29      	ldr	r2, [pc, #164]	; (8013b94 <TIM_OC1_SetConfig+0x11c>)
 8013af0:	4293      	cmp	r3, r2
 8013af2:	d10c      	bne.n	8013b0e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	f023 0308 	bic.w	r3, r3, #8
 8013afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	68db      	ldr	r3, [r3, #12]
 8013b00:	697a      	ldr	r2, [r7, #20]
 8013b02:	4313      	orrs	r3, r2
 8013b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	f023 0304 	bic.w	r3, r3, #4
 8013b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	4a1c      	ldr	r2, [pc, #112]	; (8013b84 <TIM_OC1_SetConfig+0x10c>)
 8013b12:	4293      	cmp	r3, r2
 8013b14:	d00f      	beq.n	8013b36 <TIM_OC1_SetConfig+0xbe>
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	4a1b      	ldr	r2, [pc, #108]	; (8013b88 <TIM_OC1_SetConfig+0x110>)
 8013b1a:	4293      	cmp	r3, r2
 8013b1c:	d00b      	beq.n	8013b36 <TIM_OC1_SetConfig+0xbe>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	4a1a      	ldr	r2, [pc, #104]	; (8013b8c <TIM_OC1_SetConfig+0x114>)
 8013b22:	4293      	cmp	r3, r2
 8013b24:	d007      	beq.n	8013b36 <TIM_OC1_SetConfig+0xbe>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	4a19      	ldr	r2, [pc, #100]	; (8013b90 <TIM_OC1_SetConfig+0x118>)
 8013b2a:	4293      	cmp	r3, r2
 8013b2c:	d003      	beq.n	8013b36 <TIM_OC1_SetConfig+0xbe>
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	4a18      	ldr	r2, [pc, #96]	; (8013b94 <TIM_OC1_SetConfig+0x11c>)
 8013b32:	4293      	cmp	r3, r2
 8013b34:	d111      	bne.n	8013b5a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	695b      	ldr	r3, [r3, #20]
 8013b4a:	693a      	ldr	r2, [r7, #16]
 8013b4c:	4313      	orrs	r3, r2
 8013b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	699b      	ldr	r3, [r3, #24]
 8013b54:	693a      	ldr	r2, [r7, #16]
 8013b56:	4313      	orrs	r3, r2
 8013b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	693a      	ldr	r2, [r7, #16]
 8013b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	68fa      	ldr	r2, [r7, #12]
 8013b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	685a      	ldr	r2, [r3, #4]
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	697a      	ldr	r2, [r7, #20]
 8013b72:	621a      	str	r2, [r3, #32]
}
 8013b74:	bf00      	nop
 8013b76:	371c      	adds	r7, #28
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr
 8013b80:	fffeff8f 	.word	0xfffeff8f
 8013b84:	40010000 	.word	0x40010000
 8013b88:	40010400 	.word	0x40010400
 8013b8c:	40014000 	.word	0x40014000
 8013b90:	40014400 	.word	0x40014400
 8013b94:	40014800 	.word	0x40014800

08013b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013b98:	b480      	push	{r7}
 8013b9a:	b087      	sub	sp, #28
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6a1b      	ldr	r3, [r3, #32]
 8013ba6:	f023 0210 	bic.w	r2, r3, #16
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	6a1b      	ldr	r3, [r3, #32]
 8013bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	685b      	ldr	r3, [r3, #4]
 8013bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	699b      	ldr	r3, [r3, #24]
 8013bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013bc0:	68fa      	ldr	r2, [r7, #12]
 8013bc2:	4b34      	ldr	r3, [pc, #208]	; (8013c94 <TIM_OC2_SetConfig+0xfc>)
 8013bc4:	4013      	ands	r3, r2
 8013bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	021b      	lsls	r3, r3, #8
 8013bd6:	68fa      	ldr	r2, [r7, #12]
 8013bd8:	4313      	orrs	r3, r2
 8013bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	f023 0320 	bic.w	r3, r3, #32
 8013be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	689b      	ldr	r3, [r3, #8]
 8013be8:	011b      	lsls	r3, r3, #4
 8013bea:	697a      	ldr	r2, [r7, #20]
 8013bec:	4313      	orrs	r3, r2
 8013bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	4a29      	ldr	r2, [pc, #164]	; (8013c98 <TIM_OC2_SetConfig+0x100>)
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d003      	beq.n	8013c00 <TIM_OC2_SetConfig+0x68>
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	4a28      	ldr	r2, [pc, #160]	; (8013c9c <TIM_OC2_SetConfig+0x104>)
 8013bfc:	4293      	cmp	r3, r2
 8013bfe:	d10d      	bne.n	8013c1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	68db      	ldr	r3, [r3, #12]
 8013c0c:	011b      	lsls	r3, r3, #4
 8013c0e:	697a      	ldr	r2, [r7, #20]
 8013c10:	4313      	orrs	r3, r2
 8013c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	4a1e      	ldr	r2, [pc, #120]	; (8013c98 <TIM_OC2_SetConfig+0x100>)
 8013c20:	4293      	cmp	r3, r2
 8013c22:	d00f      	beq.n	8013c44 <TIM_OC2_SetConfig+0xac>
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	4a1d      	ldr	r2, [pc, #116]	; (8013c9c <TIM_OC2_SetConfig+0x104>)
 8013c28:	4293      	cmp	r3, r2
 8013c2a:	d00b      	beq.n	8013c44 <TIM_OC2_SetConfig+0xac>
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	4a1c      	ldr	r2, [pc, #112]	; (8013ca0 <TIM_OC2_SetConfig+0x108>)
 8013c30:	4293      	cmp	r3, r2
 8013c32:	d007      	beq.n	8013c44 <TIM_OC2_SetConfig+0xac>
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	4a1b      	ldr	r2, [pc, #108]	; (8013ca4 <TIM_OC2_SetConfig+0x10c>)
 8013c38:	4293      	cmp	r3, r2
 8013c3a:	d003      	beq.n	8013c44 <TIM_OC2_SetConfig+0xac>
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	4a1a      	ldr	r2, [pc, #104]	; (8013ca8 <TIM_OC2_SetConfig+0x110>)
 8013c40:	4293      	cmp	r3, r2
 8013c42:	d113      	bne.n	8013c6c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013c4c:	693b      	ldr	r3, [r7, #16]
 8013c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	695b      	ldr	r3, [r3, #20]
 8013c58:	009b      	lsls	r3, r3, #2
 8013c5a:	693a      	ldr	r2, [r7, #16]
 8013c5c:	4313      	orrs	r3, r2
 8013c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	699b      	ldr	r3, [r3, #24]
 8013c64:	009b      	lsls	r3, r3, #2
 8013c66:	693a      	ldr	r2, [r7, #16]
 8013c68:	4313      	orrs	r3, r2
 8013c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	693a      	ldr	r2, [r7, #16]
 8013c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	68fa      	ldr	r2, [r7, #12]
 8013c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	685a      	ldr	r2, [r3, #4]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	697a      	ldr	r2, [r7, #20]
 8013c84:	621a      	str	r2, [r3, #32]
}
 8013c86:	bf00      	nop
 8013c88:	371c      	adds	r7, #28
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c90:	4770      	bx	lr
 8013c92:	bf00      	nop
 8013c94:	feff8fff 	.word	0xfeff8fff
 8013c98:	40010000 	.word	0x40010000
 8013c9c:	40010400 	.word	0x40010400
 8013ca0:	40014000 	.word	0x40014000
 8013ca4:	40014400 	.word	0x40014400
 8013ca8:	40014800 	.word	0x40014800

08013cac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b087      	sub	sp, #28
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6a1b      	ldr	r3, [r3, #32]
 8013cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6a1b      	ldr	r3, [r3, #32]
 8013cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	685b      	ldr	r3, [r3, #4]
 8013ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	69db      	ldr	r3, [r3, #28]
 8013cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f023 0303 	bic.w	r3, r3, #3
 8013ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	68fa      	ldr	r2, [r7, #12]
 8013cea:	4313      	orrs	r3, r2
 8013cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	689b      	ldr	r3, [r3, #8]
 8013cfa:	021b      	lsls	r3, r3, #8
 8013cfc:	697a      	ldr	r2, [r7, #20]
 8013cfe:	4313      	orrs	r3, r2
 8013d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	4a27      	ldr	r2, [pc, #156]	; (8013da4 <TIM_OC3_SetConfig+0xf8>)
 8013d06:	4293      	cmp	r3, r2
 8013d08:	d003      	beq.n	8013d12 <TIM_OC3_SetConfig+0x66>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	4a26      	ldr	r2, [pc, #152]	; (8013da8 <TIM_OC3_SetConfig+0xfc>)
 8013d0e:	4293      	cmp	r3, r2
 8013d10:	d10d      	bne.n	8013d2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	68db      	ldr	r3, [r3, #12]
 8013d1e:	021b      	lsls	r3, r3, #8
 8013d20:	697a      	ldr	r2, [r7, #20]
 8013d22:	4313      	orrs	r3, r2
 8013d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013d26:	697b      	ldr	r3, [r7, #20]
 8013d28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	4a1c      	ldr	r2, [pc, #112]	; (8013da4 <TIM_OC3_SetConfig+0xf8>)
 8013d32:	4293      	cmp	r3, r2
 8013d34:	d00f      	beq.n	8013d56 <TIM_OC3_SetConfig+0xaa>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	4a1b      	ldr	r2, [pc, #108]	; (8013da8 <TIM_OC3_SetConfig+0xfc>)
 8013d3a:	4293      	cmp	r3, r2
 8013d3c:	d00b      	beq.n	8013d56 <TIM_OC3_SetConfig+0xaa>
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	4a1a      	ldr	r2, [pc, #104]	; (8013dac <TIM_OC3_SetConfig+0x100>)
 8013d42:	4293      	cmp	r3, r2
 8013d44:	d007      	beq.n	8013d56 <TIM_OC3_SetConfig+0xaa>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	4a19      	ldr	r2, [pc, #100]	; (8013db0 <TIM_OC3_SetConfig+0x104>)
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	d003      	beq.n	8013d56 <TIM_OC3_SetConfig+0xaa>
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	4a18      	ldr	r2, [pc, #96]	; (8013db4 <TIM_OC3_SetConfig+0x108>)
 8013d52:	4293      	cmp	r3, r2
 8013d54:	d113      	bne.n	8013d7e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013d5e:	693b      	ldr	r3, [r7, #16]
 8013d60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	695b      	ldr	r3, [r3, #20]
 8013d6a:	011b      	lsls	r3, r3, #4
 8013d6c:	693a      	ldr	r2, [r7, #16]
 8013d6e:	4313      	orrs	r3, r2
 8013d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	699b      	ldr	r3, [r3, #24]
 8013d76:	011b      	lsls	r3, r3, #4
 8013d78:	693a      	ldr	r2, [r7, #16]
 8013d7a:	4313      	orrs	r3, r2
 8013d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	693a      	ldr	r2, [r7, #16]
 8013d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	68fa      	ldr	r2, [r7, #12]
 8013d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	685a      	ldr	r2, [r3, #4]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	697a      	ldr	r2, [r7, #20]
 8013d96:	621a      	str	r2, [r3, #32]
}
 8013d98:	bf00      	nop
 8013d9a:	371c      	adds	r7, #28
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da2:	4770      	bx	lr
 8013da4:	40010000 	.word	0x40010000
 8013da8:	40010400 	.word	0x40010400
 8013dac:	40014000 	.word	0x40014000
 8013db0:	40014400 	.word	0x40014400
 8013db4:	40014800 	.word	0x40014800

08013db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013db8:	b480      	push	{r7}
 8013dba:	b087      	sub	sp, #28
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
 8013dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	6a1b      	ldr	r3, [r3, #32]
 8013dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	6a1b      	ldr	r3, [r3, #32]
 8013dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	685b      	ldr	r3, [r3, #4]
 8013dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	69db      	ldr	r3, [r3, #28]
 8013dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	021b      	lsls	r3, r3, #8
 8013df6:	68fa      	ldr	r2, [r7, #12]
 8013df8:	4313      	orrs	r3, r2
 8013dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013dfc:	693b      	ldr	r3, [r7, #16]
 8013dfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	689b      	ldr	r3, [r3, #8]
 8013e08:	031b      	lsls	r3, r3, #12
 8013e0a:	693a      	ldr	r2, [r7, #16]
 8013e0c:	4313      	orrs	r3, r2
 8013e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	4a18      	ldr	r2, [pc, #96]	; (8013e74 <TIM_OC4_SetConfig+0xbc>)
 8013e14:	4293      	cmp	r3, r2
 8013e16:	d00f      	beq.n	8013e38 <TIM_OC4_SetConfig+0x80>
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	4a17      	ldr	r2, [pc, #92]	; (8013e78 <TIM_OC4_SetConfig+0xc0>)
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	d00b      	beq.n	8013e38 <TIM_OC4_SetConfig+0x80>
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	4a16      	ldr	r2, [pc, #88]	; (8013e7c <TIM_OC4_SetConfig+0xc4>)
 8013e24:	4293      	cmp	r3, r2
 8013e26:	d007      	beq.n	8013e38 <TIM_OC4_SetConfig+0x80>
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	4a15      	ldr	r2, [pc, #84]	; (8013e80 <TIM_OC4_SetConfig+0xc8>)
 8013e2c:	4293      	cmp	r3, r2
 8013e2e:	d003      	beq.n	8013e38 <TIM_OC4_SetConfig+0x80>
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	4a14      	ldr	r2, [pc, #80]	; (8013e84 <TIM_OC4_SetConfig+0xcc>)
 8013e34:	4293      	cmp	r3, r2
 8013e36:	d109      	bne.n	8013e4c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	695b      	ldr	r3, [r3, #20]
 8013e44:	019b      	lsls	r3, r3, #6
 8013e46:	697a      	ldr	r2, [r7, #20]
 8013e48:	4313      	orrs	r3, r2
 8013e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	697a      	ldr	r2, [r7, #20]
 8013e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	68fa      	ldr	r2, [r7, #12]
 8013e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	685a      	ldr	r2, [r3, #4]
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	693a      	ldr	r2, [r7, #16]
 8013e64:	621a      	str	r2, [r3, #32]
}
 8013e66:	bf00      	nop
 8013e68:	371c      	adds	r7, #28
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e70:	4770      	bx	lr
 8013e72:	bf00      	nop
 8013e74:	40010000 	.word	0x40010000
 8013e78:	40010400 	.word	0x40010400
 8013e7c:	40014000 	.word	0x40014000
 8013e80:	40014400 	.word	0x40014400
 8013e84:	40014800 	.word	0x40014800

08013e88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8013e88:	b480      	push	{r7}
 8013e8a:	b087      	sub	sp, #28
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
 8013e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6a1b      	ldr	r3, [r3, #32]
 8013e96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	6a1b      	ldr	r3, [r3, #32]
 8013ea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	685b      	ldr	r3, [r3, #4]
 8013ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	68fa      	ldr	r2, [r7, #12]
 8013ebe:	4313      	orrs	r3, r2
 8013ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013ec2:	693b      	ldr	r3, [r7, #16]
 8013ec4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013ec8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013eca:	683b      	ldr	r3, [r7, #0]
 8013ecc:	689b      	ldr	r3, [r3, #8]
 8013ece:	041b      	lsls	r3, r3, #16
 8013ed0:	693a      	ldr	r2, [r7, #16]
 8013ed2:	4313      	orrs	r3, r2
 8013ed4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	4a17      	ldr	r2, [pc, #92]	; (8013f38 <TIM_OC5_SetConfig+0xb0>)
 8013eda:	4293      	cmp	r3, r2
 8013edc:	d00f      	beq.n	8013efe <TIM_OC5_SetConfig+0x76>
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	4a16      	ldr	r2, [pc, #88]	; (8013f3c <TIM_OC5_SetConfig+0xb4>)
 8013ee2:	4293      	cmp	r3, r2
 8013ee4:	d00b      	beq.n	8013efe <TIM_OC5_SetConfig+0x76>
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	4a15      	ldr	r2, [pc, #84]	; (8013f40 <TIM_OC5_SetConfig+0xb8>)
 8013eea:	4293      	cmp	r3, r2
 8013eec:	d007      	beq.n	8013efe <TIM_OC5_SetConfig+0x76>
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	4a14      	ldr	r2, [pc, #80]	; (8013f44 <TIM_OC5_SetConfig+0xbc>)
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	d003      	beq.n	8013efe <TIM_OC5_SetConfig+0x76>
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	4a13      	ldr	r2, [pc, #76]	; (8013f48 <TIM_OC5_SetConfig+0xc0>)
 8013efa:	4293      	cmp	r3, r2
 8013efc:	d109      	bne.n	8013f12 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013f04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	695b      	ldr	r3, [r3, #20]
 8013f0a:	021b      	lsls	r3, r3, #8
 8013f0c:	697a      	ldr	r2, [r7, #20]
 8013f0e:	4313      	orrs	r3, r2
 8013f10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	697a      	ldr	r2, [r7, #20]
 8013f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	68fa      	ldr	r2, [r7, #12]
 8013f1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	685a      	ldr	r2, [r3, #4]
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	693a      	ldr	r2, [r7, #16]
 8013f2a:	621a      	str	r2, [r3, #32]
}
 8013f2c:	bf00      	nop
 8013f2e:	371c      	adds	r7, #28
 8013f30:	46bd      	mov	sp, r7
 8013f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f36:	4770      	bx	lr
 8013f38:	40010000 	.word	0x40010000
 8013f3c:	40010400 	.word	0x40010400
 8013f40:	40014000 	.word	0x40014000
 8013f44:	40014400 	.word	0x40014400
 8013f48:	40014800 	.word	0x40014800

08013f4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8013f4c:	b480      	push	{r7}
 8013f4e:	b087      	sub	sp, #28
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	6a1b      	ldr	r3, [r3, #32]
 8013f5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6a1b      	ldr	r3, [r3, #32]
 8013f66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	021b      	lsls	r3, r3, #8
 8013f82:	68fa      	ldr	r2, [r7, #12]
 8013f84:	4313      	orrs	r3, r2
 8013f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013f88:	693b      	ldr	r3, [r7, #16]
 8013f8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	689b      	ldr	r3, [r3, #8]
 8013f94:	051b      	lsls	r3, r3, #20
 8013f96:	693a      	ldr	r2, [r7, #16]
 8013f98:	4313      	orrs	r3, r2
 8013f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	4a18      	ldr	r2, [pc, #96]	; (8014000 <TIM_OC6_SetConfig+0xb4>)
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	d00f      	beq.n	8013fc4 <TIM_OC6_SetConfig+0x78>
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	4a17      	ldr	r2, [pc, #92]	; (8014004 <TIM_OC6_SetConfig+0xb8>)
 8013fa8:	4293      	cmp	r3, r2
 8013faa:	d00b      	beq.n	8013fc4 <TIM_OC6_SetConfig+0x78>
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	4a16      	ldr	r2, [pc, #88]	; (8014008 <TIM_OC6_SetConfig+0xbc>)
 8013fb0:	4293      	cmp	r3, r2
 8013fb2:	d007      	beq.n	8013fc4 <TIM_OC6_SetConfig+0x78>
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	4a15      	ldr	r2, [pc, #84]	; (801400c <TIM_OC6_SetConfig+0xc0>)
 8013fb8:	4293      	cmp	r3, r2
 8013fba:	d003      	beq.n	8013fc4 <TIM_OC6_SetConfig+0x78>
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	4a14      	ldr	r2, [pc, #80]	; (8014010 <TIM_OC6_SetConfig+0xc4>)
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	d109      	bne.n	8013fd8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013fc4:	697b      	ldr	r3, [r7, #20]
 8013fc6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013fca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	695b      	ldr	r3, [r3, #20]
 8013fd0:	029b      	lsls	r3, r3, #10
 8013fd2:	697a      	ldr	r2, [r7, #20]
 8013fd4:	4313      	orrs	r3, r2
 8013fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	697a      	ldr	r2, [r7, #20]
 8013fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	68fa      	ldr	r2, [r7, #12]
 8013fe2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	685a      	ldr	r2, [r3, #4]
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	693a      	ldr	r2, [r7, #16]
 8013ff0:	621a      	str	r2, [r3, #32]
}
 8013ff2:	bf00      	nop
 8013ff4:	371c      	adds	r7, #28
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffc:	4770      	bx	lr
 8013ffe:	bf00      	nop
 8014000:	40010000 	.word	0x40010000
 8014004:	40010400 	.word	0x40010400
 8014008:	40014000 	.word	0x40014000
 801400c:	40014400 	.word	0x40014400
 8014010:	40014800 	.word	0x40014800

08014014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014014:	b480      	push	{r7}
 8014016:	b087      	sub	sp, #28
 8014018:	af00      	add	r7, sp, #0
 801401a:	60f8      	str	r0, [r7, #12]
 801401c:	60b9      	str	r1, [r7, #8]
 801401e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014020:	68bb      	ldr	r3, [r7, #8]
 8014022:	f003 031f 	and.w	r3, r3, #31
 8014026:	2201      	movs	r2, #1
 8014028:	fa02 f303 	lsl.w	r3, r2, r3
 801402c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	6a1a      	ldr	r2, [r3, #32]
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	43db      	mvns	r3, r3
 8014036:	401a      	ands	r2, r3
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	6a1a      	ldr	r2, [r3, #32]
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	f003 031f 	and.w	r3, r3, #31
 8014046:	6879      	ldr	r1, [r7, #4]
 8014048:	fa01 f303 	lsl.w	r3, r1, r3
 801404c:	431a      	orrs	r2, r3
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	621a      	str	r2, [r3, #32]
}
 8014052:	bf00      	nop
 8014054:	371c      	adds	r7, #28
 8014056:	46bd      	mov	sp, r7
 8014058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405c:	4770      	bx	lr
	...

08014060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014060:	b480      	push	{r7}
 8014062:	b085      	sub	sp, #20
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
 8014068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014070:	2b01      	cmp	r3, #1
 8014072:	d101      	bne.n	8014078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014074:	2302      	movs	r3, #2
 8014076:	e068      	b.n	801414a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2201      	movs	r2, #1
 801407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2202      	movs	r2, #2
 8014084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	689b      	ldr	r3, [r3, #8]
 8014096:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	4a2e      	ldr	r2, [pc, #184]	; (8014158 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801409e:	4293      	cmp	r3, r2
 80140a0:	d004      	beq.n	80140ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	4a2d      	ldr	r2, [pc, #180]	; (801415c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80140a8:	4293      	cmp	r3, r2
 80140aa:	d108      	bne.n	80140be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80140b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	685b      	ldr	r3, [r3, #4]
 80140b8:	68fa      	ldr	r2, [r7, #12]
 80140ba:	4313      	orrs	r3, r2
 80140bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80140c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	68fa      	ldr	r2, [r7, #12]
 80140cc:	4313      	orrs	r3, r2
 80140ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	68fa      	ldr	r2, [r7, #12]
 80140d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	4a1e      	ldr	r2, [pc, #120]	; (8014158 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80140de:	4293      	cmp	r3, r2
 80140e0:	d01d      	beq.n	801411e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80140ea:	d018      	beq.n	801411e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	4a1b      	ldr	r2, [pc, #108]	; (8014160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80140f2:	4293      	cmp	r3, r2
 80140f4:	d013      	beq.n	801411e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	4a1a      	ldr	r2, [pc, #104]	; (8014164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80140fc:	4293      	cmp	r3, r2
 80140fe:	d00e      	beq.n	801411e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	4a18      	ldr	r2, [pc, #96]	; (8014168 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014106:	4293      	cmp	r3, r2
 8014108:	d009      	beq.n	801411e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	4a13      	ldr	r2, [pc, #76]	; (801415c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014110:	4293      	cmp	r3, r2
 8014112:	d004      	beq.n	801411e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	4a14      	ldr	r2, [pc, #80]	; (801416c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801411a:	4293      	cmp	r3, r2
 801411c:	d10c      	bne.n	8014138 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	689b      	ldr	r3, [r3, #8]
 801412a:	68ba      	ldr	r2, [r7, #8]
 801412c:	4313      	orrs	r3, r2
 801412e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	68ba      	ldr	r2, [r7, #8]
 8014136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2201      	movs	r2, #1
 801413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2200      	movs	r2, #0
 8014144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014148:	2300      	movs	r3, #0
}
 801414a:	4618      	mov	r0, r3
 801414c:	3714      	adds	r7, #20
 801414e:	46bd      	mov	sp, r7
 8014150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014154:	4770      	bx	lr
 8014156:	bf00      	nop
 8014158:	40010000 	.word	0x40010000
 801415c:	40010400 	.word	0x40010400
 8014160:	40000400 	.word	0x40000400
 8014164:	40000800 	.word	0x40000800
 8014168:	40000c00 	.word	0x40000c00
 801416c:	40001800 	.word	0x40001800

08014170 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014170:	b480      	push	{r7}
 8014172:	b085      	sub	sp, #20
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
 8014178:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801417a:	2300      	movs	r3, #0
 801417c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014184:	2b01      	cmp	r3, #1
 8014186:	d101      	bne.n	801418c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014188:	2302      	movs	r3, #2
 801418a:	e065      	b.n	8014258 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2201      	movs	r2, #1
 8014190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	68db      	ldr	r3, [r3, #12]
 801419e:	4313      	orrs	r3, r2
 80141a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80141a8:	683b      	ldr	r3, [r7, #0]
 80141aa:	689b      	ldr	r3, [r3, #8]
 80141ac:	4313      	orrs	r3, r2
 80141ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	685b      	ldr	r3, [r3, #4]
 80141ba:	4313      	orrs	r3, r2
 80141bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	4313      	orrs	r3, r2
 80141ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	691b      	ldr	r3, [r3, #16]
 80141d6:	4313      	orrs	r3, r2
 80141d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	695b      	ldr	r3, [r3, #20]
 80141e4:	4313      	orrs	r3, r2
 80141e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141f2:	4313      	orrs	r3, r2
 80141f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	699b      	ldr	r3, [r3, #24]
 8014200:	041b      	lsls	r3, r3, #16
 8014202:	4313      	orrs	r3, r2
 8014204:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	4a16      	ldr	r2, [pc, #88]	; (8014264 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801420c:	4293      	cmp	r3, r2
 801420e:	d004      	beq.n	801421a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	4a14      	ldr	r2, [pc, #80]	; (8014268 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8014216:	4293      	cmp	r3, r2
 8014218:	d115      	bne.n	8014246 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014224:	051b      	lsls	r3, r3, #20
 8014226:	4313      	orrs	r3, r2
 8014228:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	69db      	ldr	r3, [r3, #28]
 8014234:	4313      	orrs	r3, r2
 8014236:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	6a1b      	ldr	r3, [r3, #32]
 8014242:	4313      	orrs	r3, r2
 8014244:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	68fa      	ldr	r2, [r7, #12]
 801424c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2200      	movs	r2, #0
 8014252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014256:	2300      	movs	r3, #0
}
 8014258:	4618      	mov	r0, r3
 801425a:	3714      	adds	r7, #20
 801425c:	46bd      	mov	sp, r7
 801425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014262:	4770      	bx	lr
 8014264:	40010000 	.word	0x40010000
 8014268:	40010400 	.word	0x40010400

0801426c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801426c:	b480      	push	{r7}
 801426e:	b083      	sub	sp, #12
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014274:	bf00      	nop
 8014276:	370c      	adds	r7, #12
 8014278:	46bd      	mov	sp, r7
 801427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427e:	4770      	bx	lr

08014280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014280:	b480      	push	{r7}
 8014282:	b083      	sub	sp, #12
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014288:	bf00      	nop
 801428a:	370c      	adds	r7, #12
 801428c:	46bd      	mov	sp, r7
 801428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014292:	4770      	bx	lr

08014294 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014294:	b480      	push	{r7}
 8014296:	b083      	sub	sp, #12
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801429c:	bf00      	nop
 801429e:	370c      	adds	r7, #12
 80142a0:	46bd      	mov	sp, r7
 80142a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a6:	4770      	bx	lr

080142a8 <__NVIC_SetPriority>:
{
 80142a8:	b480      	push	{r7}
 80142aa:	b083      	sub	sp, #12
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	4603      	mov	r3, r0
 80142b0:	6039      	str	r1, [r7, #0]
 80142b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80142b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	db0a      	blt.n	80142d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80142bc:	683b      	ldr	r3, [r7, #0]
 80142be:	b2da      	uxtb	r2, r3
 80142c0:	490c      	ldr	r1, [pc, #48]	; (80142f4 <__NVIC_SetPriority+0x4c>)
 80142c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80142c6:	0112      	lsls	r2, r2, #4
 80142c8:	b2d2      	uxtb	r2, r2
 80142ca:	440b      	add	r3, r1
 80142cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80142d0:	e00a      	b.n	80142e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80142d2:	683b      	ldr	r3, [r7, #0]
 80142d4:	b2da      	uxtb	r2, r3
 80142d6:	4908      	ldr	r1, [pc, #32]	; (80142f8 <__NVIC_SetPriority+0x50>)
 80142d8:	88fb      	ldrh	r3, [r7, #6]
 80142da:	f003 030f 	and.w	r3, r3, #15
 80142de:	3b04      	subs	r3, #4
 80142e0:	0112      	lsls	r2, r2, #4
 80142e2:	b2d2      	uxtb	r2, r2
 80142e4:	440b      	add	r3, r1
 80142e6:	761a      	strb	r2, [r3, #24]
}
 80142e8:	bf00      	nop
 80142ea:	370c      	adds	r7, #12
 80142ec:	46bd      	mov	sp, r7
 80142ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f2:	4770      	bx	lr
 80142f4:	e000e100 	.word	0xe000e100
 80142f8:	e000ed00 	.word	0xe000ed00

080142fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80142fc:	b580      	push	{r7, lr}
 80142fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014300:	4b05      	ldr	r3, [pc, #20]	; (8014318 <SysTick_Handler+0x1c>)
 8014302:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014304:	f002 feac 	bl	8017060 <xTaskGetSchedulerState>
 8014308:	4603      	mov	r3, r0
 801430a:	2b01      	cmp	r3, #1
 801430c:	d001      	beq.n	8014312 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801430e:	f000 ffeb 	bl	80152e8 <xPortSysTickHandler>
  }
}
 8014312:	bf00      	nop
 8014314:	bd80      	pop	{r7, pc}
 8014316:	bf00      	nop
 8014318:	e000e010 	.word	0xe000e010

0801431c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801431c:	b580      	push	{r7, lr}
 801431e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014320:	2100      	movs	r1, #0
 8014322:	f06f 0004 	mvn.w	r0, #4
 8014326:	f7ff ffbf 	bl	80142a8 <__NVIC_SetPriority>
#endif
}
 801432a:	bf00      	nop
 801432c:	bd80      	pop	{r7, pc}
	...

08014330 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014330:	b480      	push	{r7}
 8014332:	b083      	sub	sp, #12
 8014334:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014336:	f3ef 8305 	mrs	r3, IPSR
 801433a:	603b      	str	r3, [r7, #0]
  return(result);
 801433c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801433e:	2b00      	cmp	r3, #0
 8014340:	d003      	beq.n	801434a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014342:	f06f 0305 	mvn.w	r3, #5
 8014346:	607b      	str	r3, [r7, #4]
 8014348:	e00c      	b.n	8014364 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801434a:	4b0a      	ldr	r3, [pc, #40]	; (8014374 <osKernelInitialize+0x44>)
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d105      	bne.n	801435e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014352:	4b08      	ldr	r3, [pc, #32]	; (8014374 <osKernelInitialize+0x44>)
 8014354:	2201      	movs	r2, #1
 8014356:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014358:	2300      	movs	r3, #0
 801435a:	607b      	str	r3, [r7, #4]
 801435c:	e002      	b.n	8014364 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801435e:	f04f 33ff 	mov.w	r3, #4294967295
 8014362:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014364:	687b      	ldr	r3, [r7, #4]
}
 8014366:	4618      	mov	r0, r3
 8014368:	370c      	adds	r7, #12
 801436a:	46bd      	mov	sp, r7
 801436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014370:	4770      	bx	lr
 8014372:	bf00      	nop
 8014374:	24003ba0 	.word	0x24003ba0

08014378 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014378:	b580      	push	{r7, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801437e:	f3ef 8305 	mrs	r3, IPSR
 8014382:	603b      	str	r3, [r7, #0]
  return(result);
 8014384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014386:	2b00      	cmp	r3, #0
 8014388:	d003      	beq.n	8014392 <osKernelStart+0x1a>
    stat = osErrorISR;
 801438a:	f06f 0305 	mvn.w	r3, #5
 801438e:	607b      	str	r3, [r7, #4]
 8014390:	e010      	b.n	80143b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014392:	4b0b      	ldr	r3, [pc, #44]	; (80143c0 <osKernelStart+0x48>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	2b01      	cmp	r3, #1
 8014398:	d109      	bne.n	80143ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801439a:	f7ff ffbf 	bl	801431c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801439e:	4b08      	ldr	r3, [pc, #32]	; (80143c0 <osKernelStart+0x48>)
 80143a0:	2202      	movs	r2, #2
 80143a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80143a4:	f002 fa14 	bl	80167d0 <vTaskStartScheduler>
      stat = osOK;
 80143a8:	2300      	movs	r3, #0
 80143aa:	607b      	str	r3, [r7, #4]
 80143ac:	e002      	b.n	80143b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80143ae:	f04f 33ff 	mov.w	r3, #4294967295
 80143b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80143b4:	687b      	ldr	r3, [r7, #4]
}
 80143b6:	4618      	mov	r0, r3
 80143b8:	3708      	adds	r7, #8
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}
 80143be:	bf00      	nop
 80143c0:	24003ba0 	.word	0x24003ba0

080143c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b08e      	sub	sp, #56	; 0x38
 80143c8:	af04      	add	r7, sp, #16
 80143ca:	60f8      	str	r0, [r7, #12]
 80143cc:	60b9      	str	r1, [r7, #8]
 80143ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80143d0:	2300      	movs	r3, #0
 80143d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80143d4:	f3ef 8305 	mrs	r3, IPSR
 80143d8:	617b      	str	r3, [r7, #20]
  return(result);
 80143da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d17e      	bne.n	80144de <osThreadNew+0x11a>
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d07b      	beq.n	80144de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80143e6:	2380      	movs	r3, #128	; 0x80
 80143e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80143ea:	2318      	movs	r3, #24
 80143ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80143ee:	2300      	movs	r3, #0
 80143f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80143f2:	f04f 33ff 	mov.w	r3, #4294967295
 80143f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d045      	beq.n	801448a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d002      	beq.n	801440c <osThreadNew+0x48>
        name = attr->name;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	699b      	ldr	r3, [r3, #24]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d002      	beq.n	801441a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	699b      	ldr	r3, [r3, #24]
 8014418:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801441a:	69fb      	ldr	r3, [r7, #28]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d008      	beq.n	8014432 <osThreadNew+0x6e>
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	2b38      	cmp	r3, #56	; 0x38
 8014424:	d805      	bhi.n	8014432 <osThreadNew+0x6e>
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	685b      	ldr	r3, [r3, #4]
 801442a:	f003 0301 	and.w	r3, r3, #1
 801442e:	2b00      	cmp	r3, #0
 8014430:	d001      	beq.n	8014436 <osThreadNew+0x72>
        return (NULL);
 8014432:	2300      	movs	r3, #0
 8014434:	e054      	b.n	80144e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	695b      	ldr	r3, [r3, #20]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d003      	beq.n	8014446 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	695b      	ldr	r3, [r3, #20]
 8014442:	089b      	lsrs	r3, r3, #2
 8014444:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	689b      	ldr	r3, [r3, #8]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d00e      	beq.n	801446c <osThreadNew+0xa8>
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	68db      	ldr	r3, [r3, #12]
 8014452:	2b5b      	cmp	r3, #91	; 0x5b
 8014454:	d90a      	bls.n	801446c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801445a:	2b00      	cmp	r3, #0
 801445c:	d006      	beq.n	801446c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	695b      	ldr	r3, [r3, #20]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d002      	beq.n	801446c <osThreadNew+0xa8>
        mem = 1;
 8014466:	2301      	movs	r3, #1
 8014468:	61bb      	str	r3, [r7, #24]
 801446a:	e010      	b.n	801448e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	689b      	ldr	r3, [r3, #8]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d10c      	bne.n	801448e <osThreadNew+0xca>
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	68db      	ldr	r3, [r3, #12]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d108      	bne.n	801448e <osThreadNew+0xca>
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	691b      	ldr	r3, [r3, #16]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d104      	bne.n	801448e <osThreadNew+0xca>
          mem = 0;
 8014484:	2300      	movs	r3, #0
 8014486:	61bb      	str	r3, [r7, #24]
 8014488:	e001      	b.n	801448e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801448a:	2300      	movs	r3, #0
 801448c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801448e:	69bb      	ldr	r3, [r7, #24]
 8014490:	2b01      	cmp	r3, #1
 8014492:	d110      	bne.n	80144b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014498:	687a      	ldr	r2, [r7, #4]
 801449a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801449c:	9202      	str	r2, [sp, #8]
 801449e:	9301      	str	r3, [sp, #4]
 80144a0:	69fb      	ldr	r3, [r7, #28]
 80144a2:	9300      	str	r3, [sp, #0]
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	6a3a      	ldr	r2, [r7, #32]
 80144a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80144aa:	68f8      	ldr	r0, [r7, #12]
 80144ac:	f001 ffba 	bl	8016424 <xTaskCreateStatic>
 80144b0:	4603      	mov	r3, r0
 80144b2:	613b      	str	r3, [r7, #16]
 80144b4:	e013      	b.n	80144de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80144b6:	69bb      	ldr	r3, [r7, #24]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d110      	bne.n	80144de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80144bc:	6a3b      	ldr	r3, [r7, #32]
 80144be:	b29a      	uxth	r2, r3
 80144c0:	f107 0310 	add.w	r3, r7, #16
 80144c4:	9301      	str	r3, [sp, #4]
 80144c6:	69fb      	ldr	r3, [r7, #28]
 80144c8:	9300      	str	r3, [sp, #0]
 80144ca:	68bb      	ldr	r3, [r7, #8]
 80144cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80144ce:	68f8      	ldr	r0, [r7, #12]
 80144d0:	f002 f805 	bl	80164de <xTaskCreate>
 80144d4:	4603      	mov	r3, r0
 80144d6:	2b01      	cmp	r3, #1
 80144d8:	d001      	beq.n	80144de <osThreadNew+0x11a>
            hTask = NULL;
 80144da:	2300      	movs	r3, #0
 80144dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80144de:	693b      	ldr	r3, [r7, #16]
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3728      	adds	r7, #40	; 0x28
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}

080144e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b084      	sub	sp, #16
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80144f0:	f3ef 8305 	mrs	r3, IPSR
 80144f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80144f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d003      	beq.n	8014504 <osDelay+0x1c>
    stat = osErrorISR;
 80144fc:	f06f 0305 	mvn.w	r3, #5
 8014500:	60fb      	str	r3, [r7, #12]
 8014502:	e007      	b.n	8014514 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014504:	2300      	movs	r3, #0
 8014506:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d002      	beq.n	8014514 <osDelay+0x2c>
      vTaskDelay(ticks);
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f002 f92a 	bl	8016768 <vTaskDelay>
    }
  }

  return (stat);
 8014514:	68fb      	ldr	r3, [r7, #12]
}
 8014516:	4618      	mov	r0, r3
 8014518:	3710      	adds	r7, #16
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}

0801451e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801451e:	b580      	push	{r7, lr}
 8014520:	b08a      	sub	sp, #40	; 0x28
 8014522:	af02      	add	r7, sp, #8
 8014524:	60f8      	str	r0, [r7, #12]
 8014526:	60b9      	str	r1, [r7, #8]
 8014528:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801452a:	2300      	movs	r3, #0
 801452c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801452e:	f3ef 8305 	mrs	r3, IPSR
 8014532:	613b      	str	r3, [r7, #16]
  return(result);
 8014534:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8014536:	2b00      	cmp	r3, #0
 8014538:	d175      	bne.n	8014626 <osSemaphoreNew+0x108>
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d072      	beq.n	8014626 <osSemaphoreNew+0x108>
 8014540:	68ba      	ldr	r2, [r7, #8]
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	429a      	cmp	r2, r3
 8014546:	d86e      	bhi.n	8014626 <osSemaphoreNew+0x108>
    mem = -1;
 8014548:	f04f 33ff 	mov.w	r3, #4294967295
 801454c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d015      	beq.n	8014580 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	689b      	ldr	r3, [r3, #8]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d006      	beq.n	801456a <osSemaphoreNew+0x4c>
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	68db      	ldr	r3, [r3, #12]
 8014560:	2b4f      	cmp	r3, #79	; 0x4f
 8014562:	d902      	bls.n	801456a <osSemaphoreNew+0x4c>
        mem = 1;
 8014564:	2301      	movs	r3, #1
 8014566:	61bb      	str	r3, [r7, #24]
 8014568:	e00c      	b.n	8014584 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	689b      	ldr	r3, [r3, #8]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d108      	bne.n	8014584 <osSemaphoreNew+0x66>
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	68db      	ldr	r3, [r3, #12]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d104      	bne.n	8014584 <osSemaphoreNew+0x66>
          mem = 0;
 801457a:	2300      	movs	r3, #0
 801457c:	61bb      	str	r3, [r7, #24]
 801457e:	e001      	b.n	8014584 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8014580:	2300      	movs	r3, #0
 8014582:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8014584:	69bb      	ldr	r3, [r7, #24]
 8014586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801458a:	d04c      	beq.n	8014626 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	2b01      	cmp	r3, #1
 8014590:	d128      	bne.n	80145e4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8014592:	69bb      	ldr	r3, [r7, #24]
 8014594:	2b01      	cmp	r3, #1
 8014596:	d10a      	bne.n	80145ae <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	689b      	ldr	r3, [r3, #8]
 801459c:	2203      	movs	r2, #3
 801459e:	9200      	str	r2, [sp, #0]
 80145a0:	2200      	movs	r2, #0
 80145a2:	2100      	movs	r1, #0
 80145a4:	2001      	movs	r0, #1
 80145a6:	f000 ff97 	bl	80154d8 <xQueueGenericCreateStatic>
 80145aa:	61f8      	str	r0, [r7, #28]
 80145ac:	e005      	b.n	80145ba <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80145ae:	2203      	movs	r2, #3
 80145b0:	2100      	movs	r1, #0
 80145b2:	2001      	movs	r0, #1
 80145b4:	f001 f808 	bl	80155c8 <xQueueGenericCreate>
 80145b8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80145ba:	69fb      	ldr	r3, [r7, #28]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d022      	beq.n	8014606 <osSemaphoreNew+0xe8>
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d01f      	beq.n	8014606 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80145c6:	2300      	movs	r3, #0
 80145c8:	2200      	movs	r2, #0
 80145ca:	2100      	movs	r1, #0
 80145cc:	69f8      	ldr	r0, [r7, #28]
 80145ce:	f001 f8c3 	bl	8015758 <xQueueGenericSend>
 80145d2:	4603      	mov	r3, r0
 80145d4:	2b01      	cmp	r3, #1
 80145d6:	d016      	beq.n	8014606 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80145d8:	69f8      	ldr	r0, [r7, #28]
 80145da:	f001 fd4f 	bl	801607c <vQueueDelete>
            hSemaphore = NULL;
 80145de:	2300      	movs	r3, #0
 80145e0:	61fb      	str	r3, [r7, #28]
 80145e2:	e010      	b.n	8014606 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80145e4:	69bb      	ldr	r3, [r7, #24]
 80145e6:	2b01      	cmp	r3, #1
 80145e8:	d108      	bne.n	80145fc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	689b      	ldr	r3, [r3, #8]
 80145ee:	461a      	mov	r2, r3
 80145f0:	68b9      	ldr	r1, [r7, #8]
 80145f2:	68f8      	ldr	r0, [r7, #12]
 80145f4:	f001 f845 	bl	8015682 <xQueueCreateCountingSemaphoreStatic>
 80145f8:	61f8      	str	r0, [r7, #28]
 80145fa:	e004      	b.n	8014606 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80145fc:	68b9      	ldr	r1, [r7, #8]
 80145fe:	68f8      	ldr	r0, [r7, #12]
 8014600:	f001 f876 	bl	80156f0 <xQueueCreateCountingSemaphore>
 8014604:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014606:	69fb      	ldr	r3, [r7, #28]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d00c      	beq.n	8014626 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d003      	beq.n	801461a <osSemaphoreNew+0xfc>
          name = attr->name;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	617b      	str	r3, [r7, #20]
 8014618:	e001      	b.n	801461e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801461a:	2300      	movs	r3, #0
 801461c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801461e:	6979      	ldr	r1, [r7, #20]
 8014620:	69f8      	ldr	r0, [r7, #28]
 8014622:	f001 fe77 	bl	8016314 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014626:	69fb      	ldr	r3, [r7, #28]
}
 8014628:	4618      	mov	r0, r3
 801462a:	3720      	adds	r7, #32
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}

08014630 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8014630:	b580      	push	{r7, lr}
 8014632:	b086      	sub	sp, #24
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801463e:	2300      	movs	r3, #0
 8014640:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014642:	693b      	ldr	r3, [r7, #16]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d103      	bne.n	8014650 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8014648:	f06f 0303 	mvn.w	r3, #3
 801464c:	617b      	str	r3, [r7, #20]
 801464e:	e039      	b.n	80146c4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014650:	f3ef 8305 	mrs	r3, IPSR
 8014654:	60fb      	str	r3, [r7, #12]
  return(result);
 8014656:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014658:	2b00      	cmp	r3, #0
 801465a:	d022      	beq.n	80146a2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d003      	beq.n	801466a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8014662:	f06f 0303 	mvn.w	r3, #3
 8014666:	617b      	str	r3, [r7, #20]
 8014668:	e02c      	b.n	80146c4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801466a:	2300      	movs	r3, #0
 801466c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801466e:	f107 0308 	add.w	r3, r7, #8
 8014672:	461a      	mov	r2, r3
 8014674:	2100      	movs	r1, #0
 8014676:	6938      	ldr	r0, [r7, #16]
 8014678:	f001 fc80 	bl	8015f7c <xQueueReceiveFromISR>
 801467c:	4603      	mov	r3, r0
 801467e:	2b01      	cmp	r3, #1
 8014680:	d003      	beq.n	801468a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8014682:	f06f 0302 	mvn.w	r3, #2
 8014686:	617b      	str	r3, [r7, #20]
 8014688:	e01c      	b.n	80146c4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d019      	beq.n	80146c4 <osSemaphoreAcquire+0x94>
 8014690:	4b0f      	ldr	r3, [pc, #60]	; (80146d0 <osSemaphoreAcquire+0xa0>)
 8014692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014696:	601a      	str	r2, [r3, #0]
 8014698:	f3bf 8f4f 	dsb	sy
 801469c:	f3bf 8f6f 	isb	sy
 80146a0:	e010      	b.n	80146c4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80146a2:	6839      	ldr	r1, [r7, #0]
 80146a4:	6938      	ldr	r0, [r7, #16]
 80146a6:	f001 fb5d 	bl	8015d64 <xQueueSemaphoreTake>
 80146aa:	4603      	mov	r3, r0
 80146ac:	2b01      	cmp	r3, #1
 80146ae:	d009      	beq.n	80146c4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80146b0:	683b      	ldr	r3, [r7, #0]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d003      	beq.n	80146be <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80146b6:	f06f 0301 	mvn.w	r3, #1
 80146ba:	617b      	str	r3, [r7, #20]
 80146bc:	e002      	b.n	80146c4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80146be:	f06f 0302 	mvn.w	r3, #2
 80146c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80146c4:	697b      	ldr	r3, [r7, #20]
}
 80146c6:	4618      	mov	r0, r3
 80146c8:	3718      	adds	r7, #24
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
 80146ce:	bf00      	nop
 80146d0:	e000ed04 	.word	0xe000ed04

080146d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b086      	sub	sp, #24
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80146e0:	2300      	movs	r3, #0
 80146e2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d103      	bne.n	80146f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80146ea:	f06f 0303 	mvn.w	r3, #3
 80146ee:	617b      	str	r3, [r7, #20]
 80146f0:	e02c      	b.n	801474c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80146f2:	f3ef 8305 	mrs	r3, IPSR
 80146f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80146f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d01a      	beq.n	8014734 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80146fe:	2300      	movs	r3, #0
 8014700:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8014702:	f107 0308 	add.w	r3, r7, #8
 8014706:	4619      	mov	r1, r3
 8014708:	6938      	ldr	r0, [r7, #16]
 801470a:	f001 f9be 	bl	8015a8a <xQueueGiveFromISR>
 801470e:	4603      	mov	r3, r0
 8014710:	2b01      	cmp	r3, #1
 8014712:	d003      	beq.n	801471c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8014714:	f06f 0302 	mvn.w	r3, #2
 8014718:	617b      	str	r3, [r7, #20]
 801471a:	e017      	b.n	801474c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d014      	beq.n	801474c <osSemaphoreRelease+0x78>
 8014722:	4b0d      	ldr	r3, [pc, #52]	; (8014758 <osSemaphoreRelease+0x84>)
 8014724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014728:	601a      	str	r2, [r3, #0]
 801472a:	f3bf 8f4f 	dsb	sy
 801472e:	f3bf 8f6f 	isb	sy
 8014732:	e00b      	b.n	801474c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014734:	2300      	movs	r3, #0
 8014736:	2200      	movs	r2, #0
 8014738:	2100      	movs	r1, #0
 801473a:	6938      	ldr	r0, [r7, #16]
 801473c:	f001 f80c 	bl	8015758 <xQueueGenericSend>
 8014740:	4603      	mov	r3, r0
 8014742:	2b01      	cmp	r3, #1
 8014744:	d002      	beq.n	801474c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8014746:	f06f 0302 	mvn.w	r3, #2
 801474a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801474c:	697b      	ldr	r3, [r7, #20]
}
 801474e:	4618      	mov	r0, r3
 8014750:	3718      	adds	r7, #24
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}
 8014756:	bf00      	nop
 8014758:	e000ed04 	.word	0xe000ed04

0801475c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801475c:	b580      	push	{r7, lr}
 801475e:	b08a      	sub	sp, #40	; 0x28
 8014760:	af02      	add	r7, sp, #8
 8014762:	60f8      	str	r0, [r7, #12]
 8014764:	60b9      	str	r1, [r7, #8]
 8014766:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8014768:	2300      	movs	r3, #0
 801476a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801476c:	f3ef 8305 	mrs	r3, IPSR
 8014770:	613b      	str	r3, [r7, #16]
  return(result);
 8014772:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8014774:	2b00      	cmp	r3, #0
 8014776:	d15f      	bne.n	8014838 <osMessageQueueNew+0xdc>
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d05c      	beq.n	8014838 <osMessageQueueNew+0xdc>
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d059      	beq.n	8014838 <osMessageQueueNew+0xdc>
    mem = -1;
 8014784:	f04f 33ff 	mov.w	r3, #4294967295
 8014788:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d029      	beq.n	80147e4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	689b      	ldr	r3, [r3, #8]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d012      	beq.n	80147be <osMessageQueueNew+0x62>
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	68db      	ldr	r3, [r3, #12]
 801479c:	2b4f      	cmp	r3, #79	; 0x4f
 801479e:	d90e      	bls.n	80147be <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d00a      	beq.n	80147be <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	695a      	ldr	r2, [r3, #20]
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	68b9      	ldr	r1, [r7, #8]
 80147b0:	fb01 f303 	mul.w	r3, r1, r3
 80147b4:	429a      	cmp	r2, r3
 80147b6:	d302      	bcc.n	80147be <osMessageQueueNew+0x62>
        mem = 1;
 80147b8:	2301      	movs	r3, #1
 80147ba:	61bb      	str	r3, [r7, #24]
 80147bc:	e014      	b.n	80147e8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	689b      	ldr	r3, [r3, #8]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d110      	bne.n	80147e8 <osMessageQueueNew+0x8c>
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	68db      	ldr	r3, [r3, #12]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d10c      	bne.n	80147e8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d108      	bne.n	80147e8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	695b      	ldr	r3, [r3, #20]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d104      	bne.n	80147e8 <osMessageQueueNew+0x8c>
          mem = 0;
 80147de:	2300      	movs	r3, #0
 80147e0:	61bb      	str	r3, [r7, #24]
 80147e2:	e001      	b.n	80147e8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80147e4:	2300      	movs	r3, #0
 80147e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80147e8:	69bb      	ldr	r3, [r7, #24]
 80147ea:	2b01      	cmp	r3, #1
 80147ec:	d10b      	bne.n	8014806 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	691a      	ldr	r2, [r3, #16]
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	689b      	ldr	r3, [r3, #8]
 80147f6:	2100      	movs	r1, #0
 80147f8:	9100      	str	r1, [sp, #0]
 80147fa:	68b9      	ldr	r1, [r7, #8]
 80147fc:	68f8      	ldr	r0, [r7, #12]
 80147fe:	f000 fe6b 	bl	80154d8 <xQueueGenericCreateStatic>
 8014802:	61f8      	str	r0, [r7, #28]
 8014804:	e008      	b.n	8014818 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8014806:	69bb      	ldr	r3, [r7, #24]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d105      	bne.n	8014818 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801480c:	2200      	movs	r2, #0
 801480e:	68b9      	ldr	r1, [r7, #8]
 8014810:	68f8      	ldr	r0, [r7, #12]
 8014812:	f000 fed9 	bl	80155c8 <xQueueGenericCreate>
 8014816:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d00c      	beq.n	8014838 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d003      	beq.n	801482c <osMessageQueueNew+0xd0>
        name = attr->name;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	617b      	str	r3, [r7, #20]
 801482a:	e001      	b.n	8014830 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801482c:	2300      	movs	r3, #0
 801482e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8014830:	6979      	ldr	r1, [r7, #20]
 8014832:	69f8      	ldr	r0, [r7, #28]
 8014834:	f001 fd6e 	bl	8016314 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8014838:	69fb      	ldr	r3, [r7, #28]
}
 801483a:	4618      	mov	r0, r3
 801483c:	3720      	adds	r7, #32
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}
	...

08014844 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8014844:	b580      	push	{r7, lr}
 8014846:	b088      	sub	sp, #32
 8014848:	af00      	add	r7, sp, #0
 801484a:	60f8      	str	r0, [r7, #12]
 801484c:	60b9      	str	r1, [r7, #8]
 801484e:	603b      	str	r3, [r7, #0]
 8014850:	4613      	mov	r3, r2
 8014852:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014858:	2300      	movs	r3, #0
 801485a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801485c:	f3ef 8305 	mrs	r3, IPSR
 8014860:	617b      	str	r3, [r7, #20]
  return(result);
 8014862:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014864:	2b00      	cmp	r3, #0
 8014866:	d028      	beq.n	80148ba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014868:	69bb      	ldr	r3, [r7, #24]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d005      	beq.n	801487a <osMessageQueuePut+0x36>
 801486e:	68bb      	ldr	r3, [r7, #8]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d002      	beq.n	801487a <osMessageQueuePut+0x36>
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d003      	beq.n	8014882 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801487a:	f06f 0303 	mvn.w	r3, #3
 801487e:	61fb      	str	r3, [r7, #28]
 8014880:	e038      	b.n	80148f4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8014882:	2300      	movs	r3, #0
 8014884:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8014886:	f107 0210 	add.w	r2, r7, #16
 801488a:	2300      	movs	r3, #0
 801488c:	68b9      	ldr	r1, [r7, #8]
 801488e:	69b8      	ldr	r0, [r7, #24]
 8014890:	f001 f860 	bl	8015954 <xQueueGenericSendFromISR>
 8014894:	4603      	mov	r3, r0
 8014896:	2b01      	cmp	r3, #1
 8014898:	d003      	beq.n	80148a2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801489a:	f06f 0302 	mvn.w	r3, #2
 801489e:	61fb      	str	r3, [r7, #28]
 80148a0:	e028      	b.n	80148f4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80148a2:	693b      	ldr	r3, [r7, #16]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d025      	beq.n	80148f4 <osMessageQueuePut+0xb0>
 80148a8:	4b15      	ldr	r3, [pc, #84]	; (8014900 <osMessageQueuePut+0xbc>)
 80148aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148ae:	601a      	str	r2, [r3, #0]
 80148b0:	f3bf 8f4f 	dsb	sy
 80148b4:	f3bf 8f6f 	isb	sy
 80148b8:	e01c      	b.n	80148f4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80148ba:	69bb      	ldr	r3, [r7, #24]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d002      	beq.n	80148c6 <osMessageQueuePut+0x82>
 80148c0:	68bb      	ldr	r3, [r7, #8]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d103      	bne.n	80148ce <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80148c6:	f06f 0303 	mvn.w	r3, #3
 80148ca:	61fb      	str	r3, [r7, #28]
 80148cc:	e012      	b.n	80148f4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80148ce:	2300      	movs	r3, #0
 80148d0:	683a      	ldr	r2, [r7, #0]
 80148d2:	68b9      	ldr	r1, [r7, #8]
 80148d4:	69b8      	ldr	r0, [r7, #24]
 80148d6:	f000 ff3f 	bl	8015758 <xQueueGenericSend>
 80148da:	4603      	mov	r3, r0
 80148dc:	2b01      	cmp	r3, #1
 80148de:	d009      	beq.n	80148f4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d003      	beq.n	80148ee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80148e6:	f06f 0301 	mvn.w	r3, #1
 80148ea:	61fb      	str	r3, [r7, #28]
 80148ec:	e002      	b.n	80148f4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80148ee:	f06f 0302 	mvn.w	r3, #2
 80148f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80148f4:	69fb      	ldr	r3, [r7, #28]
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	3720      	adds	r7, #32
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}
 80148fe:	bf00      	nop
 8014900:	e000ed04 	.word	0xe000ed04

08014904 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8014904:	b580      	push	{r7, lr}
 8014906:	b088      	sub	sp, #32
 8014908:	af00      	add	r7, sp, #0
 801490a:	60f8      	str	r0, [r7, #12]
 801490c:	60b9      	str	r1, [r7, #8]
 801490e:	607a      	str	r2, [r7, #4]
 8014910:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014916:	2300      	movs	r3, #0
 8014918:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801491a:	f3ef 8305 	mrs	r3, IPSR
 801491e:	617b      	str	r3, [r7, #20]
  return(result);
 8014920:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014922:	2b00      	cmp	r3, #0
 8014924:	d028      	beq.n	8014978 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014926:	69bb      	ldr	r3, [r7, #24]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d005      	beq.n	8014938 <osMessageQueueGet+0x34>
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d002      	beq.n	8014938 <osMessageQueueGet+0x34>
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d003      	beq.n	8014940 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8014938:	f06f 0303 	mvn.w	r3, #3
 801493c:	61fb      	str	r3, [r7, #28]
 801493e:	e037      	b.n	80149b0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8014940:	2300      	movs	r3, #0
 8014942:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8014944:	f107 0310 	add.w	r3, r7, #16
 8014948:	461a      	mov	r2, r3
 801494a:	68b9      	ldr	r1, [r7, #8]
 801494c:	69b8      	ldr	r0, [r7, #24]
 801494e:	f001 fb15 	bl	8015f7c <xQueueReceiveFromISR>
 8014952:	4603      	mov	r3, r0
 8014954:	2b01      	cmp	r3, #1
 8014956:	d003      	beq.n	8014960 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8014958:	f06f 0302 	mvn.w	r3, #2
 801495c:	61fb      	str	r3, [r7, #28]
 801495e:	e027      	b.n	80149b0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8014960:	693b      	ldr	r3, [r7, #16]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d024      	beq.n	80149b0 <osMessageQueueGet+0xac>
 8014966:	4b15      	ldr	r3, [pc, #84]	; (80149bc <osMessageQueueGet+0xb8>)
 8014968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801496c:	601a      	str	r2, [r3, #0]
 801496e:	f3bf 8f4f 	dsb	sy
 8014972:	f3bf 8f6f 	isb	sy
 8014976:	e01b      	b.n	80149b0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014978:	69bb      	ldr	r3, [r7, #24]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d002      	beq.n	8014984 <osMessageQueueGet+0x80>
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d103      	bne.n	801498c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8014984:	f06f 0303 	mvn.w	r3, #3
 8014988:	61fb      	str	r3, [r7, #28]
 801498a:	e011      	b.n	80149b0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801498c:	683a      	ldr	r2, [r7, #0]
 801498e:	68b9      	ldr	r1, [r7, #8]
 8014990:	69b8      	ldr	r0, [r7, #24]
 8014992:	f001 f907 	bl	8015ba4 <xQueueReceive>
 8014996:	4603      	mov	r3, r0
 8014998:	2b01      	cmp	r3, #1
 801499a:	d009      	beq.n	80149b0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 801499c:	683b      	ldr	r3, [r7, #0]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d003      	beq.n	80149aa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80149a2:	f06f 0301 	mvn.w	r3, #1
 80149a6:	61fb      	str	r3, [r7, #28]
 80149a8:	e002      	b.n	80149b0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80149aa:	f06f 0302 	mvn.w	r3, #2
 80149ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80149b0:	69fb      	ldr	r3, [r7, #28]
}
 80149b2:	4618      	mov	r0, r3
 80149b4:	3720      	adds	r7, #32
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	bf00      	nop
 80149bc:	e000ed04 	.word	0xe000ed04

080149c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80149c0:	b480      	push	{r7}
 80149c2:	b085      	sub	sp, #20
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	60f8      	str	r0, [r7, #12]
 80149c8:	60b9      	str	r1, [r7, #8]
 80149ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	4a07      	ldr	r2, [pc, #28]	; (80149ec <vApplicationGetIdleTaskMemory+0x2c>)
 80149d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	4a06      	ldr	r2, [pc, #24]	; (80149f0 <vApplicationGetIdleTaskMemory+0x30>)
 80149d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2280      	movs	r2, #128	; 0x80
 80149dc:	601a      	str	r2, [r3, #0]
}
 80149de:	bf00      	nop
 80149e0:	3714      	adds	r7, #20
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr
 80149ea:	bf00      	nop
 80149ec:	24003ba4 	.word	0x24003ba4
 80149f0:	24003c00 	.word	0x24003c00

080149f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80149f4:	b480      	push	{r7}
 80149f6:	b085      	sub	sp, #20
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	60f8      	str	r0, [r7, #12]
 80149fc:	60b9      	str	r1, [r7, #8]
 80149fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	4a07      	ldr	r2, [pc, #28]	; (8014a20 <vApplicationGetTimerTaskMemory+0x2c>)
 8014a04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	4a06      	ldr	r2, [pc, #24]	; (8014a24 <vApplicationGetTimerTaskMemory+0x30>)
 8014a0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014a12:	601a      	str	r2, [r3, #0]
}
 8014a14:	bf00      	nop
 8014a16:	3714      	adds	r7, #20
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1e:	4770      	bx	lr
 8014a20:	24003e00 	.word	0x24003e00
 8014a24:	24003e5c 	.word	0x24003e5c

08014a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b08a      	sub	sp, #40	; 0x28
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014a30:	2300      	movs	r3, #0
 8014a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014a34:	f001 ff32 	bl	801689c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014a38:	4b5b      	ldr	r3, [pc, #364]	; (8014ba8 <pvPortMalloc+0x180>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d101      	bne.n	8014a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014a40:	f000 f920 	bl	8014c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014a44:	4b59      	ldr	r3, [pc, #356]	; (8014bac <pvPortMalloc+0x184>)
 8014a46:	681a      	ldr	r2, [r3, #0]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	4013      	ands	r3, r2
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	f040 8093 	bne.w	8014b78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d01d      	beq.n	8014a94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014a58:	2208      	movs	r2, #8
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	4413      	add	r3, r2
 8014a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f003 0307 	and.w	r3, r3, #7
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d014      	beq.n	8014a94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	f023 0307 	bic.w	r3, r3, #7
 8014a70:	3308      	adds	r3, #8
 8014a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	f003 0307 	and.w	r3, r3, #7
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d00a      	beq.n	8014a94 <pvPortMalloc+0x6c>
	__asm volatile
 8014a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a82:	f383 8811 	msr	BASEPRI, r3
 8014a86:	f3bf 8f6f 	isb	sy
 8014a8a:	f3bf 8f4f 	dsb	sy
 8014a8e:	617b      	str	r3, [r7, #20]
}
 8014a90:	bf00      	nop
 8014a92:	e7fe      	b.n	8014a92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d06e      	beq.n	8014b78 <pvPortMalloc+0x150>
 8014a9a:	4b45      	ldr	r3, [pc, #276]	; (8014bb0 <pvPortMalloc+0x188>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	687a      	ldr	r2, [r7, #4]
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	d869      	bhi.n	8014b78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014aa4:	4b43      	ldr	r3, [pc, #268]	; (8014bb4 <pvPortMalloc+0x18c>)
 8014aa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014aa8:	4b42      	ldr	r3, [pc, #264]	; (8014bb4 <pvPortMalloc+0x18c>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014aae:	e004      	b.n	8014aba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014abc:	685b      	ldr	r3, [r3, #4]
 8014abe:	687a      	ldr	r2, [r7, #4]
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	d903      	bls.n	8014acc <pvPortMalloc+0xa4>
 8014ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d1f1      	bne.n	8014ab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014acc:	4b36      	ldr	r3, [pc, #216]	; (8014ba8 <pvPortMalloc+0x180>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	d050      	beq.n	8014b78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014ad6:	6a3b      	ldr	r3, [r7, #32]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	2208      	movs	r2, #8
 8014adc:	4413      	add	r3, r2
 8014ade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae2:	681a      	ldr	r2, [r3, #0]
 8014ae4:	6a3b      	ldr	r3, [r7, #32]
 8014ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aea:	685a      	ldr	r2, [r3, #4]
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	1ad2      	subs	r2, r2, r3
 8014af0:	2308      	movs	r3, #8
 8014af2:	005b      	lsls	r3, r3, #1
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d91f      	bls.n	8014b38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	4413      	add	r3, r2
 8014afe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014b00:	69bb      	ldr	r3, [r7, #24]
 8014b02:	f003 0307 	and.w	r3, r3, #7
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d00a      	beq.n	8014b20 <pvPortMalloc+0xf8>
	__asm volatile
 8014b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b0e:	f383 8811 	msr	BASEPRI, r3
 8014b12:	f3bf 8f6f 	isb	sy
 8014b16:	f3bf 8f4f 	dsb	sy
 8014b1a:	613b      	str	r3, [r7, #16]
}
 8014b1c:	bf00      	nop
 8014b1e:	e7fe      	b.n	8014b1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b22:	685a      	ldr	r2, [r3, #4]
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	1ad2      	subs	r2, r2, r3
 8014b28:	69bb      	ldr	r3, [r7, #24]
 8014b2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b2e:	687a      	ldr	r2, [r7, #4]
 8014b30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014b32:	69b8      	ldr	r0, [r7, #24]
 8014b34:	f000 f908 	bl	8014d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014b38:	4b1d      	ldr	r3, [pc, #116]	; (8014bb0 <pvPortMalloc+0x188>)
 8014b3a:	681a      	ldr	r2, [r3, #0]
 8014b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b3e:	685b      	ldr	r3, [r3, #4]
 8014b40:	1ad3      	subs	r3, r2, r3
 8014b42:	4a1b      	ldr	r2, [pc, #108]	; (8014bb0 <pvPortMalloc+0x188>)
 8014b44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014b46:	4b1a      	ldr	r3, [pc, #104]	; (8014bb0 <pvPortMalloc+0x188>)
 8014b48:	681a      	ldr	r2, [r3, #0]
 8014b4a:	4b1b      	ldr	r3, [pc, #108]	; (8014bb8 <pvPortMalloc+0x190>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	d203      	bcs.n	8014b5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014b52:	4b17      	ldr	r3, [pc, #92]	; (8014bb0 <pvPortMalloc+0x188>)
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	4a18      	ldr	r2, [pc, #96]	; (8014bb8 <pvPortMalloc+0x190>)
 8014b58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b5c:	685a      	ldr	r2, [r3, #4]
 8014b5e:	4b13      	ldr	r3, [pc, #76]	; (8014bac <pvPortMalloc+0x184>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	431a      	orrs	r2, r3
 8014b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014b6e:	4b13      	ldr	r3, [pc, #76]	; (8014bbc <pvPortMalloc+0x194>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	3301      	adds	r3, #1
 8014b74:	4a11      	ldr	r2, [pc, #68]	; (8014bbc <pvPortMalloc+0x194>)
 8014b76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014b78:	f001 fe9e 	bl	80168b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014b7c:	69fb      	ldr	r3, [r7, #28]
 8014b7e:	f003 0307 	and.w	r3, r3, #7
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d00a      	beq.n	8014b9c <pvPortMalloc+0x174>
	__asm volatile
 8014b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b8a:	f383 8811 	msr	BASEPRI, r3
 8014b8e:	f3bf 8f6f 	isb	sy
 8014b92:	f3bf 8f4f 	dsb	sy
 8014b96:	60fb      	str	r3, [r7, #12]
}
 8014b98:	bf00      	nop
 8014b9a:	e7fe      	b.n	8014b9a <pvPortMalloc+0x172>
	return pvReturn;
 8014b9c:	69fb      	ldr	r3, [r7, #28]
}
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	3728      	adds	r7, #40	; 0x28
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	bd80      	pop	{r7, pc}
 8014ba6:	bf00      	nop
 8014ba8:	2400c264 	.word	0x2400c264
 8014bac:	2400c278 	.word	0x2400c278
 8014bb0:	2400c268 	.word	0x2400c268
 8014bb4:	2400c25c 	.word	0x2400c25c
 8014bb8:	2400c26c 	.word	0x2400c26c
 8014bbc:	2400c270 	.word	0x2400c270

08014bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b086      	sub	sp, #24
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d04d      	beq.n	8014c6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014bd2:	2308      	movs	r3, #8
 8014bd4:	425b      	negs	r3, r3
 8014bd6:	697a      	ldr	r2, [r7, #20]
 8014bd8:	4413      	add	r3, r2
 8014bda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	685a      	ldr	r2, [r3, #4]
 8014be4:	4b24      	ldr	r3, [pc, #144]	; (8014c78 <vPortFree+0xb8>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	4013      	ands	r3, r2
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d10a      	bne.n	8014c04 <vPortFree+0x44>
	__asm volatile
 8014bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf2:	f383 8811 	msr	BASEPRI, r3
 8014bf6:	f3bf 8f6f 	isb	sy
 8014bfa:	f3bf 8f4f 	dsb	sy
 8014bfe:	60fb      	str	r3, [r7, #12]
}
 8014c00:	bf00      	nop
 8014c02:	e7fe      	b.n	8014c02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d00a      	beq.n	8014c22 <vPortFree+0x62>
	__asm volatile
 8014c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c10:	f383 8811 	msr	BASEPRI, r3
 8014c14:	f3bf 8f6f 	isb	sy
 8014c18:	f3bf 8f4f 	dsb	sy
 8014c1c:	60bb      	str	r3, [r7, #8]
}
 8014c1e:	bf00      	nop
 8014c20:	e7fe      	b.n	8014c20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	685a      	ldr	r2, [r3, #4]
 8014c26:	4b14      	ldr	r3, [pc, #80]	; (8014c78 <vPortFree+0xb8>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	4013      	ands	r3, r2
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d01e      	beq.n	8014c6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014c30:	693b      	ldr	r3, [r7, #16]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d11a      	bne.n	8014c6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	685a      	ldr	r2, [r3, #4]
 8014c3c:	4b0e      	ldr	r3, [pc, #56]	; (8014c78 <vPortFree+0xb8>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	43db      	mvns	r3, r3
 8014c42:	401a      	ands	r2, r3
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014c48:	f001 fe28 	bl	801689c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	685a      	ldr	r2, [r3, #4]
 8014c50:	4b0a      	ldr	r3, [pc, #40]	; (8014c7c <vPortFree+0xbc>)
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	4413      	add	r3, r2
 8014c56:	4a09      	ldr	r2, [pc, #36]	; (8014c7c <vPortFree+0xbc>)
 8014c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014c5a:	6938      	ldr	r0, [r7, #16]
 8014c5c:	f000 f874 	bl	8014d48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014c60:	4b07      	ldr	r3, [pc, #28]	; (8014c80 <vPortFree+0xc0>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	3301      	adds	r3, #1
 8014c66:	4a06      	ldr	r2, [pc, #24]	; (8014c80 <vPortFree+0xc0>)
 8014c68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014c6a:	f001 fe25 	bl	80168b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014c6e:	bf00      	nop
 8014c70:	3718      	adds	r7, #24
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}
 8014c76:	bf00      	nop
 8014c78:	2400c278 	.word	0x2400c278
 8014c7c:	2400c268 	.word	0x2400c268
 8014c80:	2400c274 	.word	0x2400c274

08014c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014c84:	b480      	push	{r7}
 8014c86:	b085      	sub	sp, #20
 8014c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014c90:	4b27      	ldr	r3, [pc, #156]	; (8014d30 <prvHeapInit+0xac>)
 8014c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	f003 0307 	and.w	r3, r3, #7
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d00c      	beq.n	8014cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	3307      	adds	r3, #7
 8014ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	f023 0307 	bic.w	r3, r3, #7
 8014caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014cac:	68ba      	ldr	r2, [r7, #8]
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	1ad3      	subs	r3, r2, r3
 8014cb2:	4a1f      	ldr	r2, [pc, #124]	; (8014d30 <prvHeapInit+0xac>)
 8014cb4:	4413      	add	r3, r2
 8014cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014cbc:	4a1d      	ldr	r2, [pc, #116]	; (8014d34 <prvHeapInit+0xb0>)
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014cc2:	4b1c      	ldr	r3, [pc, #112]	; (8014d34 <prvHeapInit+0xb0>)
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	68ba      	ldr	r2, [r7, #8]
 8014ccc:	4413      	add	r3, r2
 8014cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014cd0:	2208      	movs	r2, #8
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	1a9b      	subs	r3, r3, r2
 8014cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	f023 0307 	bic.w	r3, r3, #7
 8014cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	4a15      	ldr	r2, [pc, #84]	; (8014d38 <prvHeapInit+0xb4>)
 8014ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014ce6:	4b14      	ldr	r3, [pc, #80]	; (8014d38 <prvHeapInit+0xb4>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2200      	movs	r2, #0
 8014cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014cee:	4b12      	ldr	r3, [pc, #72]	; (8014d38 <prvHeapInit+0xb4>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	68fa      	ldr	r2, [r7, #12]
 8014cfe:	1ad2      	subs	r2, r2, r3
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014d04:	4b0c      	ldr	r3, [pc, #48]	; (8014d38 <prvHeapInit+0xb4>)
 8014d06:	681a      	ldr	r2, [r3, #0]
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	685b      	ldr	r3, [r3, #4]
 8014d10:	4a0a      	ldr	r2, [pc, #40]	; (8014d3c <prvHeapInit+0xb8>)
 8014d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	685b      	ldr	r3, [r3, #4]
 8014d18:	4a09      	ldr	r2, [pc, #36]	; (8014d40 <prvHeapInit+0xbc>)
 8014d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014d1c:	4b09      	ldr	r3, [pc, #36]	; (8014d44 <prvHeapInit+0xc0>)
 8014d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014d22:	601a      	str	r2, [r3, #0]
}
 8014d24:	bf00      	nop
 8014d26:	3714      	adds	r7, #20
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2e:	4770      	bx	lr
 8014d30:	2400425c 	.word	0x2400425c
 8014d34:	2400c25c 	.word	0x2400c25c
 8014d38:	2400c264 	.word	0x2400c264
 8014d3c:	2400c26c 	.word	0x2400c26c
 8014d40:	2400c268 	.word	0x2400c268
 8014d44:	2400c278 	.word	0x2400c278

08014d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014d48:	b480      	push	{r7}
 8014d4a:	b085      	sub	sp, #20
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014d50:	4b28      	ldr	r3, [pc, #160]	; (8014df4 <prvInsertBlockIntoFreeList+0xac>)
 8014d52:	60fb      	str	r3, [r7, #12]
 8014d54:	e002      	b.n	8014d5c <prvInsertBlockIntoFreeList+0x14>
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	60fb      	str	r3, [r7, #12]
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	687a      	ldr	r2, [r7, #4]
 8014d62:	429a      	cmp	r2, r3
 8014d64:	d8f7      	bhi.n	8014d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	685b      	ldr	r3, [r3, #4]
 8014d6e:	68ba      	ldr	r2, [r7, #8]
 8014d70:	4413      	add	r3, r2
 8014d72:	687a      	ldr	r2, [r7, #4]
 8014d74:	429a      	cmp	r2, r3
 8014d76:	d108      	bne.n	8014d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	685a      	ldr	r2, [r3, #4]
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	685b      	ldr	r3, [r3, #4]
 8014d80:	441a      	add	r2, r3
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	685b      	ldr	r3, [r3, #4]
 8014d92:	68ba      	ldr	r2, [r7, #8]
 8014d94:	441a      	add	r2, r3
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	429a      	cmp	r2, r3
 8014d9c:	d118      	bne.n	8014dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	4b15      	ldr	r3, [pc, #84]	; (8014df8 <prvInsertBlockIntoFreeList+0xb0>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d00d      	beq.n	8014dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	685a      	ldr	r2, [r3, #4]
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	685b      	ldr	r3, [r3, #4]
 8014db4:	441a      	add	r2, r3
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	601a      	str	r2, [r3, #0]
 8014dc4:	e008      	b.n	8014dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014dc6:	4b0c      	ldr	r3, [pc, #48]	; (8014df8 <prvInsertBlockIntoFreeList+0xb0>)
 8014dc8:	681a      	ldr	r2, [r3, #0]
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	601a      	str	r2, [r3, #0]
 8014dce:	e003      	b.n	8014dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	681a      	ldr	r2, [r3, #0]
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014dd8:	68fa      	ldr	r2, [r7, #12]
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d002      	beq.n	8014de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	687a      	ldr	r2, [r7, #4]
 8014de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014de6:	bf00      	nop
 8014de8:	3714      	adds	r7, #20
 8014dea:	46bd      	mov	sp, r7
 8014dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df0:	4770      	bx	lr
 8014df2:	bf00      	nop
 8014df4:	2400c25c 	.word	0x2400c25c
 8014df8:	2400c264 	.word	0x2400c264

08014dfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014dfc:	b480      	push	{r7}
 8014dfe:	b083      	sub	sp, #12
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	f103 0208 	add.w	r2, r3, #8
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	f04f 32ff 	mov.w	r2, #4294967295
 8014e14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f103 0208 	add.w	r2, r3, #8
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f103 0208 	add.w	r2, r3, #8
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014e30:	bf00      	nop
 8014e32:	370c      	adds	r7, #12
 8014e34:	46bd      	mov	sp, r7
 8014e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3a:	4770      	bx	lr

08014e3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014e3c:	b480      	push	{r7}
 8014e3e:	b083      	sub	sp, #12
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	2200      	movs	r2, #0
 8014e48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014e4a:	bf00      	nop
 8014e4c:	370c      	adds	r7, #12
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e54:	4770      	bx	lr

08014e56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014e56:	b480      	push	{r7}
 8014e58:	b085      	sub	sp, #20
 8014e5a:	af00      	add	r7, sp, #0
 8014e5c:	6078      	str	r0, [r7, #4]
 8014e5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	685b      	ldr	r3, [r3, #4]
 8014e64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	68fa      	ldr	r2, [r7, #12]
 8014e6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	689a      	ldr	r2, [r3, #8]
 8014e70:	683b      	ldr	r3, [r7, #0]
 8014e72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	689b      	ldr	r3, [r3, #8]
 8014e78:	683a      	ldr	r2, [r7, #0]
 8014e7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	683a      	ldr	r2, [r7, #0]
 8014e80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	687a      	ldr	r2, [r7, #4]
 8014e86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	1c5a      	adds	r2, r3, #1
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	601a      	str	r2, [r3, #0]
}
 8014e92:	bf00      	nop
 8014e94:	3714      	adds	r7, #20
 8014e96:	46bd      	mov	sp, r7
 8014e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9c:	4770      	bx	lr

08014e9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014e9e:	b480      	push	{r7}
 8014ea0:	b085      	sub	sp, #20
 8014ea2:	af00      	add	r7, sp, #0
 8014ea4:	6078      	str	r0, [r7, #4]
 8014ea6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014eae:	68bb      	ldr	r3, [r7, #8]
 8014eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eb4:	d103      	bne.n	8014ebe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	691b      	ldr	r3, [r3, #16]
 8014eba:	60fb      	str	r3, [r7, #12]
 8014ebc:	e00c      	b.n	8014ed8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	3308      	adds	r3, #8
 8014ec2:	60fb      	str	r3, [r7, #12]
 8014ec4:	e002      	b.n	8014ecc <vListInsert+0x2e>
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	685b      	ldr	r3, [r3, #4]
 8014eca:	60fb      	str	r3, [r7, #12]
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	685b      	ldr	r3, [r3, #4]
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	68ba      	ldr	r2, [r7, #8]
 8014ed4:	429a      	cmp	r2, r3
 8014ed6:	d2f6      	bcs.n	8014ec6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	685a      	ldr	r2, [r3, #4]
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014ee0:	683b      	ldr	r3, [r7, #0]
 8014ee2:	685b      	ldr	r3, [r3, #4]
 8014ee4:	683a      	ldr	r2, [r7, #0]
 8014ee6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	68fa      	ldr	r2, [r7, #12]
 8014eec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	683a      	ldr	r2, [r7, #0]
 8014ef2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	687a      	ldr	r2, [r7, #4]
 8014ef8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	1c5a      	adds	r2, r3, #1
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	601a      	str	r2, [r3, #0]
}
 8014f04:	bf00      	nop
 8014f06:	3714      	adds	r7, #20
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0e:	4770      	bx	lr

08014f10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014f10:	b480      	push	{r7}
 8014f12:	b085      	sub	sp, #20
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	691b      	ldr	r3, [r3, #16]
 8014f1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	685b      	ldr	r3, [r3, #4]
 8014f22:	687a      	ldr	r2, [r7, #4]
 8014f24:	6892      	ldr	r2, [r2, #8]
 8014f26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	689b      	ldr	r3, [r3, #8]
 8014f2c:	687a      	ldr	r2, [r7, #4]
 8014f2e:	6852      	ldr	r2, [r2, #4]
 8014f30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	685b      	ldr	r3, [r3, #4]
 8014f36:	687a      	ldr	r2, [r7, #4]
 8014f38:	429a      	cmp	r2, r3
 8014f3a:	d103      	bne.n	8014f44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	689a      	ldr	r2, [r3, #8]
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	2200      	movs	r2, #0
 8014f48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	1e5a      	subs	r2, r3, #1
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	681b      	ldr	r3, [r3, #0]
}
 8014f58:	4618      	mov	r0, r3
 8014f5a:	3714      	adds	r7, #20
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f62:	4770      	bx	lr

08014f64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014f64:	b480      	push	{r7}
 8014f66:	b085      	sub	sp, #20
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	60b9      	str	r1, [r7, #8]
 8014f6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	3b04      	subs	r3, #4
 8014f74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	3b04      	subs	r3, #4
 8014f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014f84:	68bb      	ldr	r3, [r7, #8]
 8014f86:	f023 0201 	bic.w	r2, r3, #1
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	3b04      	subs	r3, #4
 8014f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014f94:	4a0c      	ldr	r2, [pc, #48]	; (8014fc8 <pxPortInitialiseStack+0x64>)
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	3b14      	subs	r3, #20
 8014f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014fa0:	687a      	ldr	r2, [r7, #4]
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	3b04      	subs	r3, #4
 8014faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	f06f 0202 	mvn.w	r2, #2
 8014fb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	3b20      	subs	r3, #32
 8014fb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014fba:	68fb      	ldr	r3, [r7, #12]
}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	3714      	adds	r7, #20
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc6:	4770      	bx	lr
 8014fc8:	08014fcd 	.word	0x08014fcd

08014fcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014fcc:	b480      	push	{r7}
 8014fce:	b085      	sub	sp, #20
 8014fd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014fd6:	4b12      	ldr	r3, [pc, #72]	; (8015020 <prvTaskExitError+0x54>)
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fde:	d00a      	beq.n	8014ff6 <prvTaskExitError+0x2a>
	__asm volatile
 8014fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fe4:	f383 8811 	msr	BASEPRI, r3
 8014fe8:	f3bf 8f6f 	isb	sy
 8014fec:	f3bf 8f4f 	dsb	sy
 8014ff0:	60fb      	str	r3, [r7, #12]
}
 8014ff2:	bf00      	nop
 8014ff4:	e7fe      	b.n	8014ff4 <prvTaskExitError+0x28>
	__asm volatile
 8014ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ffa:	f383 8811 	msr	BASEPRI, r3
 8014ffe:	f3bf 8f6f 	isb	sy
 8015002:	f3bf 8f4f 	dsb	sy
 8015006:	60bb      	str	r3, [r7, #8]
}
 8015008:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801500a:	bf00      	nop
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d0fc      	beq.n	801500c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015012:	bf00      	nop
 8015014:	bf00      	nop
 8015016:	3714      	adds	r7, #20
 8015018:	46bd      	mov	sp, r7
 801501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501e:	4770      	bx	lr
 8015020:	2400004c 	.word	0x2400004c
	...

08015030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015030:	4b07      	ldr	r3, [pc, #28]	; (8015050 <pxCurrentTCBConst2>)
 8015032:	6819      	ldr	r1, [r3, #0]
 8015034:	6808      	ldr	r0, [r1, #0]
 8015036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801503a:	f380 8809 	msr	PSP, r0
 801503e:	f3bf 8f6f 	isb	sy
 8015042:	f04f 0000 	mov.w	r0, #0
 8015046:	f380 8811 	msr	BASEPRI, r0
 801504a:	4770      	bx	lr
 801504c:	f3af 8000 	nop.w

08015050 <pxCurrentTCBConst2>:
 8015050:	2400c284 	.word	0x2400c284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015054:	bf00      	nop
 8015056:	bf00      	nop

08015058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015058:	4808      	ldr	r0, [pc, #32]	; (801507c <prvPortStartFirstTask+0x24>)
 801505a:	6800      	ldr	r0, [r0, #0]
 801505c:	6800      	ldr	r0, [r0, #0]
 801505e:	f380 8808 	msr	MSP, r0
 8015062:	f04f 0000 	mov.w	r0, #0
 8015066:	f380 8814 	msr	CONTROL, r0
 801506a:	b662      	cpsie	i
 801506c:	b661      	cpsie	f
 801506e:	f3bf 8f4f 	dsb	sy
 8015072:	f3bf 8f6f 	isb	sy
 8015076:	df00      	svc	0
 8015078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801507a:	bf00      	nop
 801507c:	e000ed08 	.word	0xe000ed08

08015080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b086      	sub	sp, #24
 8015084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015086:	4b46      	ldr	r3, [pc, #280]	; (80151a0 <xPortStartScheduler+0x120>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	4a46      	ldr	r2, [pc, #280]	; (80151a4 <xPortStartScheduler+0x124>)
 801508c:	4293      	cmp	r3, r2
 801508e:	d10a      	bne.n	80150a6 <xPortStartScheduler+0x26>
	__asm volatile
 8015090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015094:	f383 8811 	msr	BASEPRI, r3
 8015098:	f3bf 8f6f 	isb	sy
 801509c:	f3bf 8f4f 	dsb	sy
 80150a0:	613b      	str	r3, [r7, #16]
}
 80150a2:	bf00      	nop
 80150a4:	e7fe      	b.n	80150a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80150a6:	4b3e      	ldr	r3, [pc, #248]	; (80151a0 <xPortStartScheduler+0x120>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	4a3f      	ldr	r2, [pc, #252]	; (80151a8 <xPortStartScheduler+0x128>)
 80150ac:	4293      	cmp	r3, r2
 80150ae:	d10a      	bne.n	80150c6 <xPortStartScheduler+0x46>
	__asm volatile
 80150b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150b4:	f383 8811 	msr	BASEPRI, r3
 80150b8:	f3bf 8f6f 	isb	sy
 80150bc:	f3bf 8f4f 	dsb	sy
 80150c0:	60fb      	str	r3, [r7, #12]
}
 80150c2:	bf00      	nop
 80150c4:	e7fe      	b.n	80150c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80150c6:	4b39      	ldr	r3, [pc, #228]	; (80151ac <xPortStartScheduler+0x12c>)
 80150c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80150ca:	697b      	ldr	r3, [r7, #20]
 80150cc:	781b      	ldrb	r3, [r3, #0]
 80150ce:	b2db      	uxtb	r3, r3
 80150d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80150d2:	697b      	ldr	r3, [r7, #20]
 80150d4:	22ff      	movs	r2, #255	; 0xff
 80150d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80150d8:	697b      	ldr	r3, [r7, #20]
 80150da:	781b      	ldrb	r3, [r3, #0]
 80150dc:	b2db      	uxtb	r3, r3
 80150de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80150e0:	78fb      	ldrb	r3, [r7, #3]
 80150e2:	b2db      	uxtb	r3, r3
 80150e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80150e8:	b2da      	uxtb	r2, r3
 80150ea:	4b31      	ldr	r3, [pc, #196]	; (80151b0 <xPortStartScheduler+0x130>)
 80150ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80150ee:	4b31      	ldr	r3, [pc, #196]	; (80151b4 <xPortStartScheduler+0x134>)
 80150f0:	2207      	movs	r2, #7
 80150f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80150f4:	e009      	b.n	801510a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80150f6:	4b2f      	ldr	r3, [pc, #188]	; (80151b4 <xPortStartScheduler+0x134>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	3b01      	subs	r3, #1
 80150fc:	4a2d      	ldr	r2, [pc, #180]	; (80151b4 <xPortStartScheduler+0x134>)
 80150fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015100:	78fb      	ldrb	r3, [r7, #3]
 8015102:	b2db      	uxtb	r3, r3
 8015104:	005b      	lsls	r3, r3, #1
 8015106:	b2db      	uxtb	r3, r3
 8015108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801510a:	78fb      	ldrb	r3, [r7, #3]
 801510c:	b2db      	uxtb	r3, r3
 801510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015112:	2b80      	cmp	r3, #128	; 0x80
 8015114:	d0ef      	beq.n	80150f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015116:	4b27      	ldr	r3, [pc, #156]	; (80151b4 <xPortStartScheduler+0x134>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	f1c3 0307 	rsb	r3, r3, #7
 801511e:	2b04      	cmp	r3, #4
 8015120:	d00a      	beq.n	8015138 <xPortStartScheduler+0xb8>
	__asm volatile
 8015122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015126:	f383 8811 	msr	BASEPRI, r3
 801512a:	f3bf 8f6f 	isb	sy
 801512e:	f3bf 8f4f 	dsb	sy
 8015132:	60bb      	str	r3, [r7, #8]
}
 8015134:	bf00      	nop
 8015136:	e7fe      	b.n	8015136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015138:	4b1e      	ldr	r3, [pc, #120]	; (80151b4 <xPortStartScheduler+0x134>)
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	021b      	lsls	r3, r3, #8
 801513e:	4a1d      	ldr	r2, [pc, #116]	; (80151b4 <xPortStartScheduler+0x134>)
 8015140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015142:	4b1c      	ldr	r3, [pc, #112]	; (80151b4 <xPortStartScheduler+0x134>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801514a:	4a1a      	ldr	r2, [pc, #104]	; (80151b4 <xPortStartScheduler+0x134>)
 801514c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	b2da      	uxtb	r2, r3
 8015152:	697b      	ldr	r3, [r7, #20]
 8015154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015156:	4b18      	ldr	r3, [pc, #96]	; (80151b8 <xPortStartScheduler+0x138>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	4a17      	ldr	r2, [pc, #92]	; (80151b8 <xPortStartScheduler+0x138>)
 801515c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015162:	4b15      	ldr	r3, [pc, #84]	; (80151b8 <xPortStartScheduler+0x138>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	4a14      	ldr	r2, [pc, #80]	; (80151b8 <xPortStartScheduler+0x138>)
 8015168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801516c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801516e:	f000 f8dd 	bl	801532c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015172:	4b12      	ldr	r3, [pc, #72]	; (80151bc <xPortStartScheduler+0x13c>)
 8015174:	2200      	movs	r2, #0
 8015176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015178:	f000 f8fc 	bl	8015374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801517c:	4b10      	ldr	r3, [pc, #64]	; (80151c0 <xPortStartScheduler+0x140>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	4a0f      	ldr	r2, [pc, #60]	; (80151c0 <xPortStartScheduler+0x140>)
 8015182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015188:	f7ff ff66 	bl	8015058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801518c:	f001 fcfc 	bl	8016b88 <vTaskSwitchContext>
	prvTaskExitError();
 8015190:	f7ff ff1c 	bl	8014fcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015194:	2300      	movs	r3, #0
}
 8015196:	4618      	mov	r0, r3
 8015198:	3718      	adds	r7, #24
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}
 801519e:	bf00      	nop
 80151a0:	e000ed00 	.word	0xe000ed00
 80151a4:	410fc271 	.word	0x410fc271
 80151a8:	410fc270 	.word	0x410fc270
 80151ac:	e000e400 	.word	0xe000e400
 80151b0:	2400c27c 	.word	0x2400c27c
 80151b4:	2400c280 	.word	0x2400c280
 80151b8:	e000ed20 	.word	0xe000ed20
 80151bc:	2400004c 	.word	0x2400004c
 80151c0:	e000ef34 	.word	0xe000ef34

080151c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80151c4:	b480      	push	{r7}
 80151c6:	b083      	sub	sp, #12
 80151c8:	af00      	add	r7, sp, #0
	__asm volatile
 80151ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ce:	f383 8811 	msr	BASEPRI, r3
 80151d2:	f3bf 8f6f 	isb	sy
 80151d6:	f3bf 8f4f 	dsb	sy
 80151da:	607b      	str	r3, [r7, #4]
}
 80151dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80151de:	4b0f      	ldr	r3, [pc, #60]	; (801521c <vPortEnterCritical+0x58>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	3301      	adds	r3, #1
 80151e4:	4a0d      	ldr	r2, [pc, #52]	; (801521c <vPortEnterCritical+0x58>)
 80151e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80151e8:	4b0c      	ldr	r3, [pc, #48]	; (801521c <vPortEnterCritical+0x58>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	2b01      	cmp	r3, #1
 80151ee:	d10f      	bne.n	8015210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80151f0:	4b0b      	ldr	r3, [pc, #44]	; (8015220 <vPortEnterCritical+0x5c>)
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	b2db      	uxtb	r3, r3
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d00a      	beq.n	8015210 <vPortEnterCritical+0x4c>
	__asm volatile
 80151fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151fe:	f383 8811 	msr	BASEPRI, r3
 8015202:	f3bf 8f6f 	isb	sy
 8015206:	f3bf 8f4f 	dsb	sy
 801520a:	603b      	str	r3, [r7, #0]
}
 801520c:	bf00      	nop
 801520e:	e7fe      	b.n	801520e <vPortEnterCritical+0x4a>
	}
}
 8015210:	bf00      	nop
 8015212:	370c      	adds	r7, #12
 8015214:	46bd      	mov	sp, r7
 8015216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521a:	4770      	bx	lr
 801521c:	2400004c 	.word	0x2400004c
 8015220:	e000ed04 	.word	0xe000ed04

08015224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015224:	b480      	push	{r7}
 8015226:	b083      	sub	sp, #12
 8015228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801522a:	4b12      	ldr	r3, [pc, #72]	; (8015274 <vPortExitCritical+0x50>)
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d10a      	bne.n	8015248 <vPortExitCritical+0x24>
	__asm volatile
 8015232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015236:	f383 8811 	msr	BASEPRI, r3
 801523a:	f3bf 8f6f 	isb	sy
 801523e:	f3bf 8f4f 	dsb	sy
 8015242:	607b      	str	r3, [r7, #4]
}
 8015244:	bf00      	nop
 8015246:	e7fe      	b.n	8015246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015248:	4b0a      	ldr	r3, [pc, #40]	; (8015274 <vPortExitCritical+0x50>)
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	3b01      	subs	r3, #1
 801524e:	4a09      	ldr	r2, [pc, #36]	; (8015274 <vPortExitCritical+0x50>)
 8015250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015252:	4b08      	ldr	r3, [pc, #32]	; (8015274 <vPortExitCritical+0x50>)
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d105      	bne.n	8015266 <vPortExitCritical+0x42>
 801525a:	2300      	movs	r3, #0
 801525c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801525e:	683b      	ldr	r3, [r7, #0]
 8015260:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015266:	bf00      	nop
 8015268:	370c      	adds	r7, #12
 801526a:	46bd      	mov	sp, r7
 801526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015270:	4770      	bx	lr
 8015272:	bf00      	nop
 8015274:	2400004c 	.word	0x2400004c
	...

08015280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015280:	f3ef 8009 	mrs	r0, PSP
 8015284:	f3bf 8f6f 	isb	sy
 8015288:	4b15      	ldr	r3, [pc, #84]	; (80152e0 <pxCurrentTCBConst>)
 801528a:	681a      	ldr	r2, [r3, #0]
 801528c:	f01e 0f10 	tst.w	lr, #16
 8015290:	bf08      	it	eq
 8015292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801529a:	6010      	str	r0, [r2, #0]
 801529c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80152a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80152a4:	f380 8811 	msr	BASEPRI, r0
 80152a8:	f3bf 8f4f 	dsb	sy
 80152ac:	f3bf 8f6f 	isb	sy
 80152b0:	f001 fc6a 	bl	8016b88 <vTaskSwitchContext>
 80152b4:	f04f 0000 	mov.w	r0, #0
 80152b8:	f380 8811 	msr	BASEPRI, r0
 80152bc:	bc09      	pop	{r0, r3}
 80152be:	6819      	ldr	r1, [r3, #0]
 80152c0:	6808      	ldr	r0, [r1, #0]
 80152c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152c6:	f01e 0f10 	tst.w	lr, #16
 80152ca:	bf08      	it	eq
 80152cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80152d0:	f380 8809 	msr	PSP, r0
 80152d4:	f3bf 8f6f 	isb	sy
 80152d8:	4770      	bx	lr
 80152da:	bf00      	nop
 80152dc:	f3af 8000 	nop.w

080152e0 <pxCurrentTCBConst>:
 80152e0:	2400c284 	.word	0x2400c284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80152e4:	bf00      	nop
 80152e6:	bf00      	nop

080152e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
	__asm volatile
 80152ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f2:	f383 8811 	msr	BASEPRI, r3
 80152f6:	f3bf 8f6f 	isb	sy
 80152fa:	f3bf 8f4f 	dsb	sy
 80152fe:	607b      	str	r3, [r7, #4]
}
 8015300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015302:	f001 fb87 	bl	8016a14 <xTaskIncrementTick>
 8015306:	4603      	mov	r3, r0
 8015308:	2b00      	cmp	r3, #0
 801530a:	d003      	beq.n	8015314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801530c:	4b06      	ldr	r3, [pc, #24]	; (8015328 <xPortSysTickHandler+0x40>)
 801530e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015312:	601a      	str	r2, [r3, #0]
 8015314:	2300      	movs	r3, #0
 8015316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015318:	683b      	ldr	r3, [r7, #0]
 801531a:	f383 8811 	msr	BASEPRI, r3
}
 801531e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015320:	bf00      	nop
 8015322:	3708      	adds	r7, #8
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}
 8015328:	e000ed04 	.word	0xe000ed04

0801532c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801532c:	b480      	push	{r7}
 801532e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015330:	4b0b      	ldr	r3, [pc, #44]	; (8015360 <vPortSetupTimerInterrupt+0x34>)
 8015332:	2200      	movs	r2, #0
 8015334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015336:	4b0b      	ldr	r3, [pc, #44]	; (8015364 <vPortSetupTimerInterrupt+0x38>)
 8015338:	2200      	movs	r2, #0
 801533a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801533c:	4b0a      	ldr	r3, [pc, #40]	; (8015368 <vPortSetupTimerInterrupt+0x3c>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	4a0a      	ldr	r2, [pc, #40]	; (801536c <vPortSetupTimerInterrupt+0x40>)
 8015342:	fba2 2303 	umull	r2, r3, r2, r3
 8015346:	099b      	lsrs	r3, r3, #6
 8015348:	4a09      	ldr	r2, [pc, #36]	; (8015370 <vPortSetupTimerInterrupt+0x44>)
 801534a:	3b01      	subs	r3, #1
 801534c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801534e:	4b04      	ldr	r3, [pc, #16]	; (8015360 <vPortSetupTimerInterrupt+0x34>)
 8015350:	2207      	movs	r2, #7
 8015352:	601a      	str	r2, [r3, #0]
}
 8015354:	bf00      	nop
 8015356:	46bd      	mov	sp, r7
 8015358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535c:	4770      	bx	lr
 801535e:	bf00      	nop
 8015360:	e000e010 	.word	0xe000e010
 8015364:	e000e018 	.word	0xe000e018
 8015368:	2400003c 	.word	0x2400003c
 801536c:	10624dd3 	.word	0x10624dd3
 8015370:	e000e014 	.word	0xe000e014

08015374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015384 <vPortEnableVFP+0x10>
 8015378:	6801      	ldr	r1, [r0, #0]
 801537a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801537e:	6001      	str	r1, [r0, #0]
 8015380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015382:	bf00      	nop
 8015384:	e000ed88 	.word	0xe000ed88

08015388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015388:	b480      	push	{r7}
 801538a:	b085      	sub	sp, #20
 801538c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801538e:	f3ef 8305 	mrs	r3, IPSR
 8015392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	2b0f      	cmp	r3, #15
 8015398:	d914      	bls.n	80153c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801539a:	4a17      	ldr	r2, [pc, #92]	; (80153f8 <vPortValidateInterruptPriority+0x70>)
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	4413      	add	r3, r2
 80153a0:	781b      	ldrb	r3, [r3, #0]
 80153a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80153a4:	4b15      	ldr	r3, [pc, #84]	; (80153fc <vPortValidateInterruptPriority+0x74>)
 80153a6:	781b      	ldrb	r3, [r3, #0]
 80153a8:	7afa      	ldrb	r2, [r7, #11]
 80153aa:	429a      	cmp	r2, r3
 80153ac:	d20a      	bcs.n	80153c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80153ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153b2:	f383 8811 	msr	BASEPRI, r3
 80153b6:	f3bf 8f6f 	isb	sy
 80153ba:	f3bf 8f4f 	dsb	sy
 80153be:	607b      	str	r3, [r7, #4]
}
 80153c0:	bf00      	nop
 80153c2:	e7fe      	b.n	80153c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80153c4:	4b0e      	ldr	r3, [pc, #56]	; (8015400 <vPortValidateInterruptPriority+0x78>)
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80153cc:	4b0d      	ldr	r3, [pc, #52]	; (8015404 <vPortValidateInterruptPriority+0x7c>)
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	429a      	cmp	r2, r3
 80153d2:	d90a      	bls.n	80153ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80153d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153d8:	f383 8811 	msr	BASEPRI, r3
 80153dc:	f3bf 8f6f 	isb	sy
 80153e0:	f3bf 8f4f 	dsb	sy
 80153e4:	603b      	str	r3, [r7, #0]
}
 80153e6:	bf00      	nop
 80153e8:	e7fe      	b.n	80153e8 <vPortValidateInterruptPriority+0x60>
	}
 80153ea:	bf00      	nop
 80153ec:	3714      	adds	r7, #20
 80153ee:	46bd      	mov	sp, r7
 80153f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f4:	4770      	bx	lr
 80153f6:	bf00      	nop
 80153f8:	e000e3f0 	.word	0xe000e3f0
 80153fc:	2400c27c 	.word	0x2400c27c
 8015400:	e000ed0c 	.word	0xe000ed0c
 8015404:	2400c280 	.word	0x2400c280

08015408 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b084      	sub	sp, #16
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
 8015410:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d10a      	bne.n	8015432 <xQueueGenericReset+0x2a>
	__asm volatile
 801541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015420:	f383 8811 	msr	BASEPRI, r3
 8015424:	f3bf 8f6f 	isb	sy
 8015428:	f3bf 8f4f 	dsb	sy
 801542c:	60bb      	str	r3, [r7, #8]
}
 801542e:	bf00      	nop
 8015430:	e7fe      	b.n	8015430 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015432:	f7ff fec7 	bl	80151c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	681a      	ldr	r2, [r3, #0]
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801543e:	68f9      	ldr	r1, [r7, #12]
 8015440:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015442:	fb01 f303 	mul.w	r3, r1, r3
 8015446:	441a      	add	r2, r3
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	2200      	movs	r2, #0
 8015450:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	681a      	ldr	r2, [r3, #0]
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	681a      	ldr	r2, [r3, #0]
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015462:	3b01      	subs	r3, #1
 8015464:	68f9      	ldr	r1, [r7, #12]
 8015466:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015468:	fb01 f303 	mul.w	r3, r1, r3
 801546c:	441a      	add	r2, r3
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	22ff      	movs	r2, #255	; 0xff
 8015476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	22ff      	movs	r2, #255	; 0xff
 801547e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d114      	bne.n	80154b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	691b      	ldr	r3, [r3, #16]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d01a      	beq.n	80154c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	3310      	adds	r3, #16
 8015494:	4618      	mov	r0, r3
 8015496:	f001 fc25 	bl	8016ce4 <xTaskRemoveFromEventList>
 801549a:	4603      	mov	r3, r0
 801549c:	2b00      	cmp	r3, #0
 801549e:	d012      	beq.n	80154c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80154a0:	4b0c      	ldr	r3, [pc, #48]	; (80154d4 <xQueueGenericReset+0xcc>)
 80154a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154a6:	601a      	str	r2, [r3, #0]
 80154a8:	f3bf 8f4f 	dsb	sy
 80154ac:	f3bf 8f6f 	isb	sy
 80154b0:	e009      	b.n	80154c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	3310      	adds	r3, #16
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7ff fca0 	bl	8014dfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	3324      	adds	r3, #36	; 0x24
 80154c0:	4618      	mov	r0, r3
 80154c2:	f7ff fc9b 	bl	8014dfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80154c6:	f7ff fead 	bl	8015224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80154ca:	2301      	movs	r3, #1
}
 80154cc:	4618      	mov	r0, r3
 80154ce:	3710      	adds	r7, #16
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}
 80154d4:	e000ed04 	.word	0xe000ed04

080154d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b08e      	sub	sp, #56	; 0x38
 80154dc:	af02      	add	r7, sp, #8
 80154de:	60f8      	str	r0, [r7, #12]
 80154e0:	60b9      	str	r1, [r7, #8]
 80154e2:	607a      	str	r2, [r7, #4]
 80154e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d10a      	bne.n	8015502 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80154ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f0:	f383 8811 	msr	BASEPRI, r3
 80154f4:	f3bf 8f6f 	isb	sy
 80154f8:	f3bf 8f4f 	dsb	sy
 80154fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80154fe:	bf00      	nop
 8015500:	e7fe      	b.n	8015500 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d10a      	bne.n	801551e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801550c:	f383 8811 	msr	BASEPRI, r3
 8015510:	f3bf 8f6f 	isb	sy
 8015514:	f3bf 8f4f 	dsb	sy
 8015518:	627b      	str	r3, [r7, #36]	; 0x24
}
 801551a:	bf00      	nop
 801551c:	e7fe      	b.n	801551c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d002      	beq.n	801552a <xQueueGenericCreateStatic+0x52>
 8015524:	68bb      	ldr	r3, [r7, #8]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d001      	beq.n	801552e <xQueueGenericCreateStatic+0x56>
 801552a:	2301      	movs	r3, #1
 801552c:	e000      	b.n	8015530 <xQueueGenericCreateStatic+0x58>
 801552e:	2300      	movs	r3, #0
 8015530:	2b00      	cmp	r3, #0
 8015532:	d10a      	bne.n	801554a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015538:	f383 8811 	msr	BASEPRI, r3
 801553c:	f3bf 8f6f 	isb	sy
 8015540:	f3bf 8f4f 	dsb	sy
 8015544:	623b      	str	r3, [r7, #32]
}
 8015546:	bf00      	nop
 8015548:	e7fe      	b.n	8015548 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d102      	bne.n	8015556 <xQueueGenericCreateStatic+0x7e>
 8015550:	68bb      	ldr	r3, [r7, #8]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d101      	bne.n	801555a <xQueueGenericCreateStatic+0x82>
 8015556:	2301      	movs	r3, #1
 8015558:	e000      	b.n	801555c <xQueueGenericCreateStatic+0x84>
 801555a:	2300      	movs	r3, #0
 801555c:	2b00      	cmp	r3, #0
 801555e:	d10a      	bne.n	8015576 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015564:	f383 8811 	msr	BASEPRI, r3
 8015568:	f3bf 8f6f 	isb	sy
 801556c:	f3bf 8f4f 	dsb	sy
 8015570:	61fb      	str	r3, [r7, #28]
}
 8015572:	bf00      	nop
 8015574:	e7fe      	b.n	8015574 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015576:	2350      	movs	r3, #80	; 0x50
 8015578:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801557a:	697b      	ldr	r3, [r7, #20]
 801557c:	2b50      	cmp	r3, #80	; 0x50
 801557e:	d00a      	beq.n	8015596 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015584:	f383 8811 	msr	BASEPRI, r3
 8015588:	f3bf 8f6f 	isb	sy
 801558c:	f3bf 8f4f 	dsb	sy
 8015590:	61bb      	str	r3, [r7, #24]
}
 8015592:	bf00      	nop
 8015594:	e7fe      	b.n	8015594 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015596:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d00d      	beq.n	80155be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80155a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155a4:	2201      	movs	r2, #1
 80155a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80155aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80155ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155b0:	9300      	str	r3, [sp, #0]
 80155b2:	4613      	mov	r3, r2
 80155b4:	687a      	ldr	r2, [r7, #4]
 80155b6:	68b9      	ldr	r1, [r7, #8]
 80155b8:	68f8      	ldr	r0, [r7, #12]
 80155ba:	f000 f83f 	bl	801563c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80155be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80155c0:	4618      	mov	r0, r3
 80155c2:	3730      	adds	r7, #48	; 0x30
 80155c4:	46bd      	mov	sp, r7
 80155c6:	bd80      	pop	{r7, pc}

080155c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b08a      	sub	sp, #40	; 0x28
 80155cc:	af02      	add	r7, sp, #8
 80155ce:	60f8      	str	r0, [r7, #12]
 80155d0:	60b9      	str	r1, [r7, #8]
 80155d2:	4613      	mov	r3, r2
 80155d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d10a      	bne.n	80155f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80155dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155e0:	f383 8811 	msr	BASEPRI, r3
 80155e4:	f3bf 8f6f 	isb	sy
 80155e8:	f3bf 8f4f 	dsb	sy
 80155ec:	613b      	str	r3, [r7, #16]
}
 80155ee:	bf00      	nop
 80155f0:	e7fe      	b.n	80155f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	68ba      	ldr	r2, [r7, #8]
 80155f6:	fb02 f303 	mul.w	r3, r2, r3
 80155fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	3350      	adds	r3, #80	; 0x50
 8015600:	4618      	mov	r0, r3
 8015602:	f7ff fa11 	bl	8014a28 <pvPortMalloc>
 8015606:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015608:	69bb      	ldr	r3, [r7, #24]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d011      	beq.n	8015632 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801560e:	69bb      	ldr	r3, [r7, #24]
 8015610:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015612:	697b      	ldr	r3, [r7, #20]
 8015614:	3350      	adds	r3, #80	; 0x50
 8015616:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015618:	69bb      	ldr	r3, [r7, #24]
 801561a:	2200      	movs	r2, #0
 801561c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015620:	79fa      	ldrb	r2, [r7, #7]
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	9300      	str	r3, [sp, #0]
 8015626:	4613      	mov	r3, r2
 8015628:	697a      	ldr	r2, [r7, #20]
 801562a:	68b9      	ldr	r1, [r7, #8]
 801562c:	68f8      	ldr	r0, [r7, #12]
 801562e:	f000 f805 	bl	801563c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015632:	69bb      	ldr	r3, [r7, #24]
	}
 8015634:	4618      	mov	r0, r3
 8015636:	3720      	adds	r7, #32
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}

0801563c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b084      	sub	sp, #16
 8015640:	af00      	add	r7, sp, #0
 8015642:	60f8      	str	r0, [r7, #12]
 8015644:	60b9      	str	r1, [r7, #8]
 8015646:	607a      	str	r2, [r7, #4]
 8015648:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d103      	bne.n	8015658 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015650:	69bb      	ldr	r3, [r7, #24]
 8015652:	69ba      	ldr	r2, [r7, #24]
 8015654:	601a      	str	r2, [r3, #0]
 8015656:	e002      	b.n	801565e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015658:	69bb      	ldr	r3, [r7, #24]
 801565a:	687a      	ldr	r2, [r7, #4]
 801565c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801565e:	69bb      	ldr	r3, [r7, #24]
 8015660:	68fa      	ldr	r2, [r7, #12]
 8015662:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015664:	69bb      	ldr	r3, [r7, #24]
 8015666:	68ba      	ldr	r2, [r7, #8]
 8015668:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801566a:	2101      	movs	r1, #1
 801566c:	69b8      	ldr	r0, [r7, #24]
 801566e:	f7ff fecb 	bl	8015408 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015672:	69bb      	ldr	r3, [r7, #24]
 8015674:	78fa      	ldrb	r2, [r7, #3]
 8015676:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801567a:	bf00      	nop
 801567c:	3710      	adds	r7, #16
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}

08015682 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015682:	b580      	push	{r7, lr}
 8015684:	b08a      	sub	sp, #40	; 0x28
 8015686:	af02      	add	r7, sp, #8
 8015688:	60f8      	str	r0, [r7, #12]
 801568a:	60b9      	str	r1, [r7, #8]
 801568c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d10a      	bne.n	80156aa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8015694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015698:	f383 8811 	msr	BASEPRI, r3
 801569c:	f3bf 8f6f 	isb	sy
 80156a0:	f3bf 8f4f 	dsb	sy
 80156a4:	61bb      	str	r3, [r7, #24]
}
 80156a6:	bf00      	nop
 80156a8:	e7fe      	b.n	80156a8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80156aa:	68ba      	ldr	r2, [r7, #8]
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	429a      	cmp	r2, r3
 80156b0:	d90a      	bls.n	80156c8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80156b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156b6:	f383 8811 	msr	BASEPRI, r3
 80156ba:	f3bf 8f6f 	isb	sy
 80156be:	f3bf 8f4f 	dsb	sy
 80156c2:	617b      	str	r3, [r7, #20]
}
 80156c4:	bf00      	nop
 80156c6:	e7fe      	b.n	80156c6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80156c8:	2302      	movs	r3, #2
 80156ca:	9300      	str	r3, [sp, #0]
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2200      	movs	r2, #0
 80156d0:	2100      	movs	r1, #0
 80156d2:	68f8      	ldr	r0, [r7, #12]
 80156d4:	f7ff ff00 	bl	80154d8 <xQueueGenericCreateStatic>
 80156d8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80156da:	69fb      	ldr	r3, [r7, #28]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d002      	beq.n	80156e6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	68ba      	ldr	r2, [r7, #8]
 80156e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80156e6:	69fb      	ldr	r3, [r7, #28]
	}
 80156e8:	4618      	mov	r0, r3
 80156ea:	3720      	adds	r7, #32
 80156ec:	46bd      	mov	sp, r7
 80156ee:	bd80      	pop	{r7, pc}

080156f0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b086      	sub	sp, #24
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
 80156f8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d10a      	bne.n	8015716 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015704:	f383 8811 	msr	BASEPRI, r3
 8015708:	f3bf 8f6f 	isb	sy
 801570c:	f3bf 8f4f 	dsb	sy
 8015710:	613b      	str	r3, [r7, #16]
}
 8015712:	bf00      	nop
 8015714:	e7fe      	b.n	8015714 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015716:	683a      	ldr	r2, [r7, #0]
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	429a      	cmp	r2, r3
 801571c:	d90a      	bls.n	8015734 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015722:	f383 8811 	msr	BASEPRI, r3
 8015726:	f3bf 8f6f 	isb	sy
 801572a:	f3bf 8f4f 	dsb	sy
 801572e:	60fb      	str	r3, [r7, #12]
}
 8015730:	bf00      	nop
 8015732:	e7fe      	b.n	8015732 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015734:	2202      	movs	r2, #2
 8015736:	2100      	movs	r1, #0
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	f7ff ff45 	bl	80155c8 <xQueueGenericCreate>
 801573e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015740:	697b      	ldr	r3, [r7, #20]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d002      	beq.n	801574c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015746:	697b      	ldr	r3, [r7, #20]
 8015748:	683a      	ldr	r2, [r7, #0]
 801574a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801574c:	697b      	ldr	r3, [r7, #20]
	}
 801574e:	4618      	mov	r0, r3
 8015750:	3718      	adds	r7, #24
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}
	...

08015758 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b08e      	sub	sp, #56	; 0x38
 801575c:	af00      	add	r7, sp, #0
 801575e:	60f8      	str	r0, [r7, #12]
 8015760:	60b9      	str	r1, [r7, #8]
 8015762:	607a      	str	r2, [r7, #4]
 8015764:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015766:	2300      	movs	r3, #0
 8015768:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015770:	2b00      	cmp	r3, #0
 8015772:	d10a      	bne.n	801578a <xQueueGenericSend+0x32>
	__asm volatile
 8015774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015778:	f383 8811 	msr	BASEPRI, r3
 801577c:	f3bf 8f6f 	isb	sy
 8015780:	f3bf 8f4f 	dsb	sy
 8015784:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015786:	bf00      	nop
 8015788:	e7fe      	b.n	8015788 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d103      	bne.n	8015798 <xQueueGenericSend+0x40>
 8015790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015794:	2b00      	cmp	r3, #0
 8015796:	d101      	bne.n	801579c <xQueueGenericSend+0x44>
 8015798:	2301      	movs	r3, #1
 801579a:	e000      	b.n	801579e <xQueueGenericSend+0x46>
 801579c:	2300      	movs	r3, #0
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d10a      	bne.n	80157b8 <xQueueGenericSend+0x60>
	__asm volatile
 80157a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157a6:	f383 8811 	msr	BASEPRI, r3
 80157aa:	f3bf 8f6f 	isb	sy
 80157ae:	f3bf 8f4f 	dsb	sy
 80157b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80157b4:	bf00      	nop
 80157b6:	e7fe      	b.n	80157b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80157b8:	683b      	ldr	r3, [r7, #0]
 80157ba:	2b02      	cmp	r3, #2
 80157bc:	d103      	bne.n	80157c6 <xQueueGenericSend+0x6e>
 80157be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157c2:	2b01      	cmp	r3, #1
 80157c4:	d101      	bne.n	80157ca <xQueueGenericSend+0x72>
 80157c6:	2301      	movs	r3, #1
 80157c8:	e000      	b.n	80157cc <xQueueGenericSend+0x74>
 80157ca:	2300      	movs	r3, #0
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d10a      	bne.n	80157e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80157d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157d4:	f383 8811 	msr	BASEPRI, r3
 80157d8:	f3bf 8f6f 	isb	sy
 80157dc:	f3bf 8f4f 	dsb	sy
 80157e0:	623b      	str	r3, [r7, #32]
}
 80157e2:	bf00      	nop
 80157e4:	e7fe      	b.n	80157e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80157e6:	f001 fc3b 	bl	8017060 <xTaskGetSchedulerState>
 80157ea:	4603      	mov	r3, r0
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d102      	bne.n	80157f6 <xQueueGenericSend+0x9e>
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d101      	bne.n	80157fa <xQueueGenericSend+0xa2>
 80157f6:	2301      	movs	r3, #1
 80157f8:	e000      	b.n	80157fc <xQueueGenericSend+0xa4>
 80157fa:	2300      	movs	r3, #0
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d10a      	bne.n	8015816 <xQueueGenericSend+0xbe>
	__asm volatile
 8015800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015804:	f383 8811 	msr	BASEPRI, r3
 8015808:	f3bf 8f6f 	isb	sy
 801580c:	f3bf 8f4f 	dsb	sy
 8015810:	61fb      	str	r3, [r7, #28]
}
 8015812:	bf00      	nop
 8015814:	e7fe      	b.n	8015814 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015816:	f7ff fcd5 	bl	80151c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801581c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015822:	429a      	cmp	r2, r3
 8015824:	d302      	bcc.n	801582c <xQueueGenericSend+0xd4>
 8015826:	683b      	ldr	r3, [r7, #0]
 8015828:	2b02      	cmp	r3, #2
 801582a:	d129      	bne.n	8015880 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801582c:	683a      	ldr	r2, [r7, #0]
 801582e:	68b9      	ldr	r1, [r7, #8]
 8015830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015832:	f000 fc5e 	bl	80160f2 <prvCopyDataToQueue>
 8015836:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801583c:	2b00      	cmp	r3, #0
 801583e:	d010      	beq.n	8015862 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015842:	3324      	adds	r3, #36	; 0x24
 8015844:	4618      	mov	r0, r3
 8015846:	f001 fa4d 	bl	8016ce4 <xTaskRemoveFromEventList>
 801584a:	4603      	mov	r3, r0
 801584c:	2b00      	cmp	r3, #0
 801584e:	d013      	beq.n	8015878 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015850:	4b3f      	ldr	r3, [pc, #252]	; (8015950 <xQueueGenericSend+0x1f8>)
 8015852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015856:	601a      	str	r2, [r3, #0]
 8015858:	f3bf 8f4f 	dsb	sy
 801585c:	f3bf 8f6f 	isb	sy
 8015860:	e00a      	b.n	8015878 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015864:	2b00      	cmp	r3, #0
 8015866:	d007      	beq.n	8015878 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015868:	4b39      	ldr	r3, [pc, #228]	; (8015950 <xQueueGenericSend+0x1f8>)
 801586a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801586e:	601a      	str	r2, [r3, #0]
 8015870:	f3bf 8f4f 	dsb	sy
 8015874:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015878:	f7ff fcd4 	bl	8015224 <vPortExitCritical>
				return pdPASS;
 801587c:	2301      	movs	r3, #1
 801587e:	e063      	b.n	8015948 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d103      	bne.n	801588e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015886:	f7ff fccd 	bl	8015224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801588a:	2300      	movs	r3, #0
 801588c:	e05c      	b.n	8015948 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801588e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015890:	2b00      	cmp	r3, #0
 8015892:	d106      	bne.n	80158a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015894:	f107 0314 	add.w	r3, r7, #20
 8015898:	4618      	mov	r0, r3
 801589a:	f001 fa87 	bl	8016dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801589e:	2301      	movs	r3, #1
 80158a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80158a2:	f7ff fcbf 	bl	8015224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80158a6:	f000 fff9 	bl	801689c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80158aa:	f7ff fc8b 	bl	80151c4 <vPortEnterCritical>
 80158ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80158b4:	b25b      	sxtb	r3, r3
 80158b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158ba:	d103      	bne.n	80158c4 <xQueueGenericSend+0x16c>
 80158bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158be:	2200      	movs	r2, #0
 80158c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80158c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80158ca:	b25b      	sxtb	r3, r3
 80158cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158d0:	d103      	bne.n	80158da <xQueueGenericSend+0x182>
 80158d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d4:	2200      	movs	r2, #0
 80158d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80158da:	f7ff fca3 	bl	8015224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80158de:	1d3a      	adds	r2, r7, #4
 80158e0:	f107 0314 	add.w	r3, r7, #20
 80158e4:	4611      	mov	r1, r2
 80158e6:	4618      	mov	r0, r3
 80158e8:	f001 fa76 	bl	8016dd8 <xTaskCheckForTimeOut>
 80158ec:	4603      	mov	r3, r0
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d124      	bne.n	801593c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80158f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80158f4:	f000 fcf5 	bl	80162e2 <prvIsQueueFull>
 80158f8:	4603      	mov	r3, r0
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d018      	beq.n	8015930 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80158fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015900:	3310      	adds	r3, #16
 8015902:	687a      	ldr	r2, [r7, #4]
 8015904:	4611      	mov	r1, r2
 8015906:	4618      	mov	r0, r3
 8015908:	f001 f99c 	bl	8016c44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801590c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801590e:	f000 fc80 	bl	8016212 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015912:	f000 ffd1 	bl	80168b8 <xTaskResumeAll>
 8015916:	4603      	mov	r3, r0
 8015918:	2b00      	cmp	r3, #0
 801591a:	f47f af7c 	bne.w	8015816 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801591e:	4b0c      	ldr	r3, [pc, #48]	; (8015950 <xQueueGenericSend+0x1f8>)
 8015920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015924:	601a      	str	r2, [r3, #0]
 8015926:	f3bf 8f4f 	dsb	sy
 801592a:	f3bf 8f6f 	isb	sy
 801592e:	e772      	b.n	8015816 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015932:	f000 fc6e 	bl	8016212 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015936:	f000 ffbf 	bl	80168b8 <xTaskResumeAll>
 801593a:	e76c      	b.n	8015816 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801593c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801593e:	f000 fc68 	bl	8016212 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015942:	f000 ffb9 	bl	80168b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015946:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015948:	4618      	mov	r0, r3
 801594a:	3738      	adds	r7, #56	; 0x38
 801594c:	46bd      	mov	sp, r7
 801594e:	bd80      	pop	{r7, pc}
 8015950:	e000ed04 	.word	0xe000ed04

08015954 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b090      	sub	sp, #64	; 0x40
 8015958:	af00      	add	r7, sp, #0
 801595a:	60f8      	str	r0, [r7, #12]
 801595c:	60b9      	str	r1, [r7, #8]
 801595e:	607a      	str	r2, [r7, #4]
 8015960:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015968:	2b00      	cmp	r3, #0
 801596a:	d10a      	bne.n	8015982 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015970:	f383 8811 	msr	BASEPRI, r3
 8015974:	f3bf 8f6f 	isb	sy
 8015978:	f3bf 8f4f 	dsb	sy
 801597c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801597e:	bf00      	nop
 8015980:	e7fe      	b.n	8015980 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015982:	68bb      	ldr	r3, [r7, #8]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d103      	bne.n	8015990 <xQueueGenericSendFromISR+0x3c>
 8015988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801598c:	2b00      	cmp	r3, #0
 801598e:	d101      	bne.n	8015994 <xQueueGenericSendFromISR+0x40>
 8015990:	2301      	movs	r3, #1
 8015992:	e000      	b.n	8015996 <xQueueGenericSendFromISR+0x42>
 8015994:	2300      	movs	r3, #0
 8015996:	2b00      	cmp	r3, #0
 8015998:	d10a      	bne.n	80159b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801599e:	f383 8811 	msr	BASEPRI, r3
 80159a2:	f3bf 8f6f 	isb	sy
 80159a6:	f3bf 8f4f 	dsb	sy
 80159aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80159ac:	bf00      	nop
 80159ae:	e7fe      	b.n	80159ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	2b02      	cmp	r3, #2
 80159b4:	d103      	bne.n	80159be <xQueueGenericSendFromISR+0x6a>
 80159b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159ba:	2b01      	cmp	r3, #1
 80159bc:	d101      	bne.n	80159c2 <xQueueGenericSendFromISR+0x6e>
 80159be:	2301      	movs	r3, #1
 80159c0:	e000      	b.n	80159c4 <xQueueGenericSendFromISR+0x70>
 80159c2:	2300      	movs	r3, #0
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d10a      	bne.n	80159de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80159c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159cc:	f383 8811 	msr	BASEPRI, r3
 80159d0:	f3bf 8f6f 	isb	sy
 80159d4:	f3bf 8f4f 	dsb	sy
 80159d8:	623b      	str	r3, [r7, #32]
}
 80159da:	bf00      	nop
 80159dc:	e7fe      	b.n	80159dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80159de:	f7ff fcd3 	bl	8015388 <vPortValidateInterruptPriority>
	__asm volatile
 80159e2:	f3ef 8211 	mrs	r2, BASEPRI
 80159e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ea:	f383 8811 	msr	BASEPRI, r3
 80159ee:	f3bf 8f6f 	isb	sy
 80159f2:	f3bf 8f4f 	dsb	sy
 80159f6:	61fa      	str	r2, [r7, #28]
 80159f8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80159fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80159fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80159fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a06:	429a      	cmp	r2, r3
 8015a08:	d302      	bcc.n	8015a10 <xQueueGenericSendFromISR+0xbc>
 8015a0a:	683b      	ldr	r3, [r7, #0]
 8015a0c:	2b02      	cmp	r3, #2
 8015a0e:	d12f      	bne.n	8015a70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015a20:	683a      	ldr	r2, [r7, #0]
 8015a22:	68b9      	ldr	r1, [r7, #8]
 8015a24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015a26:	f000 fb64 	bl	80160f2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015a2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8015a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a32:	d112      	bne.n	8015a5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d016      	beq.n	8015a6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a3e:	3324      	adds	r3, #36	; 0x24
 8015a40:	4618      	mov	r0, r3
 8015a42:	f001 f94f 	bl	8016ce4 <xTaskRemoveFromEventList>
 8015a46:	4603      	mov	r3, r0
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d00e      	beq.n	8015a6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d00b      	beq.n	8015a6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2201      	movs	r2, #1
 8015a56:	601a      	str	r2, [r3, #0]
 8015a58:	e007      	b.n	8015a6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015a5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015a5e:	3301      	adds	r3, #1
 8015a60:	b2db      	uxtb	r3, r3
 8015a62:	b25a      	sxtb	r2, r3
 8015a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015a6e:	e001      	b.n	8015a74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015a70:	2300      	movs	r3, #0
 8015a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a76:	617b      	str	r3, [r7, #20]
	__asm volatile
 8015a78:	697b      	ldr	r3, [r7, #20]
 8015a7a:	f383 8811 	msr	BASEPRI, r3
}
 8015a7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	3740      	adds	r7, #64	; 0x40
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd80      	pop	{r7, pc}

08015a8a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015a8a:	b580      	push	{r7, lr}
 8015a8c:	b08e      	sub	sp, #56	; 0x38
 8015a8e:	af00      	add	r7, sp, #0
 8015a90:	6078      	str	r0, [r7, #4]
 8015a92:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d10a      	bne.n	8015ab4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8015a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aa2:	f383 8811 	msr	BASEPRI, r3
 8015aa6:	f3bf 8f6f 	isb	sy
 8015aaa:	f3bf 8f4f 	dsb	sy
 8015aae:	623b      	str	r3, [r7, #32]
}
 8015ab0:	bf00      	nop
 8015ab2:	e7fe      	b.n	8015ab2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d00a      	beq.n	8015ad2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8015abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ac0:	f383 8811 	msr	BASEPRI, r3
 8015ac4:	f3bf 8f6f 	isb	sy
 8015ac8:	f3bf 8f4f 	dsb	sy
 8015acc:	61fb      	str	r3, [r7, #28]
}
 8015ace:	bf00      	nop
 8015ad0:	e7fe      	b.n	8015ad0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d103      	bne.n	8015ae2 <xQueueGiveFromISR+0x58>
 8015ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015adc:	689b      	ldr	r3, [r3, #8]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d101      	bne.n	8015ae6 <xQueueGiveFromISR+0x5c>
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	e000      	b.n	8015ae8 <xQueueGiveFromISR+0x5e>
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d10a      	bne.n	8015b02 <xQueueGiveFromISR+0x78>
	__asm volatile
 8015aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af0:	f383 8811 	msr	BASEPRI, r3
 8015af4:	f3bf 8f6f 	isb	sy
 8015af8:	f3bf 8f4f 	dsb	sy
 8015afc:	61bb      	str	r3, [r7, #24]
}
 8015afe:	bf00      	nop
 8015b00:	e7fe      	b.n	8015b00 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015b02:	f7ff fc41 	bl	8015388 <vPortValidateInterruptPriority>
	__asm volatile
 8015b06:	f3ef 8211 	mrs	r2, BASEPRI
 8015b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b0e:	f383 8811 	msr	BASEPRI, r3
 8015b12:	f3bf 8f6f 	isb	sy
 8015b16:	f3bf 8f4f 	dsb	sy
 8015b1a:	617a      	str	r2, [r7, #20]
 8015b1c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015b1e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015b20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b2e:	429a      	cmp	r2, r3
 8015b30:	d22b      	bcs.n	8015b8a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b3e:	1c5a      	adds	r2, r3, #1
 8015b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b42:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015b44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b4c:	d112      	bne.n	8015b74 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d016      	beq.n	8015b84 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b58:	3324      	adds	r3, #36	; 0x24
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f001 f8c2 	bl	8016ce4 <xTaskRemoveFromEventList>
 8015b60:	4603      	mov	r3, r0
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d00e      	beq.n	8015b84 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015b66:	683b      	ldr	r3, [r7, #0]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d00b      	beq.n	8015b84 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015b6c:	683b      	ldr	r3, [r7, #0]
 8015b6e:	2201      	movs	r2, #1
 8015b70:	601a      	str	r2, [r3, #0]
 8015b72:	e007      	b.n	8015b84 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b78:	3301      	adds	r3, #1
 8015b7a:	b2db      	uxtb	r3, r3
 8015b7c:	b25a      	sxtb	r2, r3
 8015b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015b84:	2301      	movs	r3, #1
 8015b86:	637b      	str	r3, [r7, #52]	; 0x34
 8015b88:	e001      	b.n	8015b8e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8015b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b90:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	f383 8811 	msr	BASEPRI, r3
}
 8015b98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	3738      	adds	r7, #56	; 0x38
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	bd80      	pop	{r7, pc}

08015ba4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b08c      	sub	sp, #48	; 0x30
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	60f8      	str	r0, [r7, #12]
 8015bac:	60b9      	str	r1, [r7, #8]
 8015bae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d10a      	bne.n	8015bd4 <xQueueReceive+0x30>
	__asm volatile
 8015bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc2:	f383 8811 	msr	BASEPRI, r3
 8015bc6:	f3bf 8f6f 	isb	sy
 8015bca:	f3bf 8f4f 	dsb	sy
 8015bce:	623b      	str	r3, [r7, #32]
}
 8015bd0:	bf00      	nop
 8015bd2:	e7fe      	b.n	8015bd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d103      	bne.n	8015be2 <xQueueReceive+0x3e>
 8015bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d101      	bne.n	8015be6 <xQueueReceive+0x42>
 8015be2:	2301      	movs	r3, #1
 8015be4:	e000      	b.n	8015be8 <xQueueReceive+0x44>
 8015be6:	2300      	movs	r3, #0
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d10a      	bne.n	8015c02 <xQueueReceive+0x5e>
	__asm volatile
 8015bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf0:	f383 8811 	msr	BASEPRI, r3
 8015bf4:	f3bf 8f6f 	isb	sy
 8015bf8:	f3bf 8f4f 	dsb	sy
 8015bfc:	61fb      	str	r3, [r7, #28]
}
 8015bfe:	bf00      	nop
 8015c00:	e7fe      	b.n	8015c00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015c02:	f001 fa2d 	bl	8017060 <xTaskGetSchedulerState>
 8015c06:	4603      	mov	r3, r0
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d102      	bne.n	8015c12 <xQueueReceive+0x6e>
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d101      	bne.n	8015c16 <xQueueReceive+0x72>
 8015c12:	2301      	movs	r3, #1
 8015c14:	e000      	b.n	8015c18 <xQueueReceive+0x74>
 8015c16:	2300      	movs	r3, #0
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d10a      	bne.n	8015c32 <xQueueReceive+0x8e>
	__asm volatile
 8015c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c20:	f383 8811 	msr	BASEPRI, r3
 8015c24:	f3bf 8f6f 	isb	sy
 8015c28:	f3bf 8f4f 	dsb	sy
 8015c2c:	61bb      	str	r3, [r7, #24]
}
 8015c2e:	bf00      	nop
 8015c30:	e7fe      	b.n	8015c30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015c32:	f7ff fac7 	bl	80151c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d01f      	beq.n	8015c82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015c42:	68b9      	ldr	r1, [r7, #8]
 8015c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c46:	f000 fabe 	bl	80161c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c4c:	1e5a      	subs	r2, r3, #1
 8015c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c54:	691b      	ldr	r3, [r3, #16]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d00f      	beq.n	8015c7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c5c:	3310      	adds	r3, #16
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f001 f840 	bl	8016ce4 <xTaskRemoveFromEventList>
 8015c64:	4603      	mov	r3, r0
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d007      	beq.n	8015c7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015c6a:	4b3d      	ldr	r3, [pc, #244]	; (8015d60 <xQueueReceive+0x1bc>)
 8015c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c70:	601a      	str	r2, [r3, #0]
 8015c72:	f3bf 8f4f 	dsb	sy
 8015c76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015c7a:	f7ff fad3 	bl	8015224 <vPortExitCritical>
				return pdPASS;
 8015c7e:	2301      	movs	r3, #1
 8015c80:	e069      	b.n	8015d56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d103      	bne.n	8015c90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015c88:	f7ff facc 	bl	8015224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	e062      	b.n	8015d56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d106      	bne.n	8015ca4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015c96:	f107 0310 	add.w	r3, r7, #16
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f001 f886 	bl	8016dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015ca4:	f7ff fabe 	bl	8015224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015ca8:	f000 fdf8 	bl	801689c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015cac:	f7ff fa8a 	bl	80151c4 <vPortEnterCritical>
 8015cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015cb6:	b25b      	sxtb	r3, r3
 8015cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cbc:	d103      	bne.n	8015cc6 <xQueueReceive+0x122>
 8015cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015ccc:	b25b      	sxtb	r3, r3
 8015cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cd2:	d103      	bne.n	8015cdc <xQueueReceive+0x138>
 8015cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015cdc:	f7ff faa2 	bl	8015224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015ce0:	1d3a      	adds	r2, r7, #4
 8015ce2:	f107 0310 	add.w	r3, r7, #16
 8015ce6:	4611      	mov	r1, r2
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f001 f875 	bl	8016dd8 <xTaskCheckForTimeOut>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d123      	bne.n	8015d3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cf6:	f000 fade 	bl	80162b6 <prvIsQueueEmpty>
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d017      	beq.n	8015d30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d02:	3324      	adds	r3, #36	; 0x24
 8015d04:	687a      	ldr	r2, [r7, #4]
 8015d06:	4611      	mov	r1, r2
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f000 ff9b 	bl	8016c44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d10:	f000 fa7f 	bl	8016212 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015d14:	f000 fdd0 	bl	80168b8 <xTaskResumeAll>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d189      	bne.n	8015c32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8015d1e:	4b10      	ldr	r3, [pc, #64]	; (8015d60 <xQueueReceive+0x1bc>)
 8015d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d24:	601a      	str	r2, [r3, #0]
 8015d26:	f3bf 8f4f 	dsb	sy
 8015d2a:	f3bf 8f6f 	isb	sy
 8015d2e:	e780      	b.n	8015c32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d32:	f000 fa6e 	bl	8016212 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015d36:	f000 fdbf 	bl	80168b8 <xTaskResumeAll>
 8015d3a:	e77a      	b.n	8015c32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d3e:	f000 fa68 	bl	8016212 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015d42:	f000 fdb9 	bl	80168b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d48:	f000 fab5 	bl	80162b6 <prvIsQueueEmpty>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	f43f af6f 	beq.w	8015c32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015d54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015d56:	4618      	mov	r0, r3
 8015d58:	3730      	adds	r7, #48	; 0x30
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}
 8015d5e:	bf00      	nop
 8015d60:	e000ed04 	.word	0xe000ed04

08015d64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b08e      	sub	sp, #56	; 0x38
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
 8015d6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015d76:	2300      	movs	r3, #0
 8015d78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d10a      	bne.n	8015d96 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d84:	f383 8811 	msr	BASEPRI, r3
 8015d88:	f3bf 8f6f 	isb	sy
 8015d8c:	f3bf 8f4f 	dsb	sy
 8015d90:	623b      	str	r3, [r7, #32]
}
 8015d92:	bf00      	nop
 8015d94:	e7fe      	b.n	8015d94 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d00a      	beq.n	8015db4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8015d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da2:	f383 8811 	msr	BASEPRI, r3
 8015da6:	f3bf 8f6f 	isb	sy
 8015daa:	f3bf 8f4f 	dsb	sy
 8015dae:	61fb      	str	r3, [r7, #28]
}
 8015db0:	bf00      	nop
 8015db2:	e7fe      	b.n	8015db2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015db4:	f001 f954 	bl	8017060 <xTaskGetSchedulerState>
 8015db8:	4603      	mov	r3, r0
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d102      	bne.n	8015dc4 <xQueueSemaphoreTake+0x60>
 8015dbe:	683b      	ldr	r3, [r7, #0]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d101      	bne.n	8015dc8 <xQueueSemaphoreTake+0x64>
 8015dc4:	2301      	movs	r3, #1
 8015dc6:	e000      	b.n	8015dca <xQueueSemaphoreTake+0x66>
 8015dc8:	2300      	movs	r3, #0
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d10a      	bne.n	8015de4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8015dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dd2:	f383 8811 	msr	BASEPRI, r3
 8015dd6:	f3bf 8f6f 	isb	sy
 8015dda:	f3bf 8f4f 	dsb	sy
 8015dde:	61bb      	str	r3, [r7, #24]
}
 8015de0:	bf00      	nop
 8015de2:	e7fe      	b.n	8015de2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015de4:	f7ff f9ee 	bl	80151c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015dec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d024      	beq.n	8015e3e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df6:	1e5a      	subs	r2, r3, #1
 8015df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dfa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d104      	bne.n	8015e0e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015e04:	f001 faa2 	bl	801734c <pvTaskIncrementMutexHeldCount>
 8015e08:	4602      	mov	r2, r0
 8015e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e0c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e10:	691b      	ldr	r3, [r3, #16]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d00f      	beq.n	8015e36 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e18:	3310      	adds	r3, #16
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f000 ff62 	bl	8016ce4 <xTaskRemoveFromEventList>
 8015e20:	4603      	mov	r3, r0
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d007      	beq.n	8015e36 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015e26:	4b54      	ldr	r3, [pc, #336]	; (8015f78 <xQueueSemaphoreTake+0x214>)
 8015e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e2c:	601a      	str	r2, [r3, #0]
 8015e2e:	f3bf 8f4f 	dsb	sy
 8015e32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015e36:	f7ff f9f5 	bl	8015224 <vPortExitCritical>
				return pdPASS;
 8015e3a:	2301      	movs	r3, #1
 8015e3c:	e097      	b.n	8015f6e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015e3e:	683b      	ldr	r3, [r7, #0]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d111      	bne.n	8015e68 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d00a      	beq.n	8015e60 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8015e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e4e:	f383 8811 	msr	BASEPRI, r3
 8015e52:	f3bf 8f6f 	isb	sy
 8015e56:	f3bf 8f4f 	dsb	sy
 8015e5a:	617b      	str	r3, [r7, #20]
}
 8015e5c:	bf00      	nop
 8015e5e:	e7fe      	b.n	8015e5e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015e60:	f7ff f9e0 	bl	8015224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015e64:	2300      	movs	r3, #0
 8015e66:	e082      	b.n	8015f6e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d106      	bne.n	8015e7c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015e6e:	f107 030c 	add.w	r3, r7, #12
 8015e72:	4618      	mov	r0, r3
 8015e74:	f000 ff9a 	bl	8016dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015e78:	2301      	movs	r3, #1
 8015e7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015e7c:	f7ff f9d2 	bl	8015224 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015e80:	f000 fd0c 	bl	801689c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015e84:	f7ff f99e 	bl	80151c4 <vPortEnterCritical>
 8015e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015e8e:	b25b      	sxtb	r3, r3
 8015e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e94:	d103      	bne.n	8015e9e <xQueueSemaphoreTake+0x13a>
 8015e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e98:	2200      	movs	r2, #0
 8015e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015ea4:	b25b      	sxtb	r3, r3
 8015ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eaa:	d103      	bne.n	8015eb4 <xQueueSemaphoreTake+0x150>
 8015eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eae:	2200      	movs	r2, #0
 8015eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015eb4:	f7ff f9b6 	bl	8015224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015eb8:	463a      	mov	r2, r7
 8015eba:	f107 030c 	add.w	r3, r7, #12
 8015ebe:	4611      	mov	r1, r2
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	f000 ff89 	bl	8016dd8 <xTaskCheckForTimeOut>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d132      	bne.n	8015f32 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ece:	f000 f9f2 	bl	80162b6 <prvIsQueueEmpty>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d026      	beq.n	8015f26 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d109      	bne.n	8015ef4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015ee0:	f7ff f970 	bl	80151c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ee6:	689b      	ldr	r3, [r3, #8]
 8015ee8:	4618      	mov	r0, r3
 8015eea:	f001 f8d7 	bl	801709c <xTaskPriorityInherit>
 8015eee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015ef0:	f7ff f998 	bl	8015224 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef6:	3324      	adds	r3, #36	; 0x24
 8015ef8:	683a      	ldr	r2, [r7, #0]
 8015efa:	4611      	mov	r1, r2
 8015efc:	4618      	mov	r0, r3
 8015efe:	f000 fea1 	bl	8016c44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015f02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f04:	f000 f985 	bl	8016212 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015f08:	f000 fcd6 	bl	80168b8 <xTaskResumeAll>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	f47f af68 	bne.w	8015de4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015f14:	4b18      	ldr	r3, [pc, #96]	; (8015f78 <xQueueSemaphoreTake+0x214>)
 8015f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f1a:	601a      	str	r2, [r3, #0]
 8015f1c:	f3bf 8f4f 	dsb	sy
 8015f20:	f3bf 8f6f 	isb	sy
 8015f24:	e75e      	b.n	8015de4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015f26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f28:	f000 f973 	bl	8016212 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015f2c:	f000 fcc4 	bl	80168b8 <xTaskResumeAll>
 8015f30:	e758      	b.n	8015de4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015f32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f34:	f000 f96d 	bl	8016212 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015f38:	f000 fcbe 	bl	80168b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015f3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f3e:	f000 f9ba 	bl	80162b6 <prvIsQueueEmpty>
 8015f42:	4603      	mov	r3, r0
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	f43f af4d 	beq.w	8015de4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d00d      	beq.n	8015f6c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8015f50:	f7ff f938 	bl	80151c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015f54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015f56:	f000 f8b4 	bl	80160c2 <prvGetDisinheritPriorityAfterTimeout>
 8015f5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f5e:	689b      	ldr	r3, [r3, #8]
 8015f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015f62:	4618      	mov	r0, r3
 8015f64:	f001 f970 	bl	8017248 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015f68:	f7ff f95c 	bl	8015224 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015f6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015f6e:	4618      	mov	r0, r3
 8015f70:	3738      	adds	r7, #56	; 0x38
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}
 8015f76:	bf00      	nop
 8015f78:	e000ed04 	.word	0xe000ed04

08015f7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b08e      	sub	sp, #56	; 0x38
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	60f8      	str	r0, [r7, #12]
 8015f84:	60b9      	str	r1, [r7, #8]
 8015f86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d10a      	bne.n	8015fa8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f96:	f383 8811 	msr	BASEPRI, r3
 8015f9a:	f3bf 8f6f 	isb	sy
 8015f9e:	f3bf 8f4f 	dsb	sy
 8015fa2:	623b      	str	r3, [r7, #32]
}
 8015fa4:	bf00      	nop
 8015fa6:	e7fe      	b.n	8015fa6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015fa8:	68bb      	ldr	r3, [r7, #8]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d103      	bne.n	8015fb6 <xQueueReceiveFromISR+0x3a>
 8015fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d101      	bne.n	8015fba <xQueueReceiveFromISR+0x3e>
 8015fb6:	2301      	movs	r3, #1
 8015fb8:	e000      	b.n	8015fbc <xQueueReceiveFromISR+0x40>
 8015fba:	2300      	movs	r3, #0
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d10a      	bne.n	8015fd6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc4:	f383 8811 	msr	BASEPRI, r3
 8015fc8:	f3bf 8f6f 	isb	sy
 8015fcc:	f3bf 8f4f 	dsb	sy
 8015fd0:	61fb      	str	r3, [r7, #28]
}
 8015fd2:	bf00      	nop
 8015fd4:	e7fe      	b.n	8015fd4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015fd6:	f7ff f9d7 	bl	8015388 <vPortValidateInterruptPriority>
	__asm volatile
 8015fda:	f3ef 8211 	mrs	r2, BASEPRI
 8015fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fe2:	f383 8811 	msr	BASEPRI, r3
 8015fe6:	f3bf 8f6f 	isb	sy
 8015fea:	f3bf 8f4f 	dsb	sy
 8015fee:	61ba      	str	r2, [r7, #24]
 8015ff0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015ff2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ffa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d02f      	beq.n	8016062 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801600c:	68b9      	ldr	r1, [r7, #8]
 801600e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016010:	f000 f8d9 	bl	80161c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016016:	1e5a      	subs	r2, r3, #1
 8016018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801601a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801601c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016024:	d112      	bne.n	801604c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016028:	691b      	ldr	r3, [r3, #16]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d016      	beq.n	801605c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016030:	3310      	adds	r3, #16
 8016032:	4618      	mov	r0, r3
 8016034:	f000 fe56 	bl	8016ce4 <xTaskRemoveFromEventList>
 8016038:	4603      	mov	r3, r0
 801603a:	2b00      	cmp	r3, #0
 801603c:	d00e      	beq.n	801605c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d00b      	beq.n	801605c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2201      	movs	r2, #1
 8016048:	601a      	str	r2, [r3, #0]
 801604a:	e007      	b.n	801605c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801604c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016050:	3301      	adds	r3, #1
 8016052:	b2db      	uxtb	r3, r3
 8016054:	b25a      	sxtb	r2, r3
 8016056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801605c:	2301      	movs	r3, #1
 801605e:	637b      	str	r3, [r7, #52]	; 0x34
 8016060:	e001      	b.n	8016066 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016062:	2300      	movs	r3, #0
 8016064:	637b      	str	r3, [r7, #52]	; 0x34
 8016066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016068:	613b      	str	r3, [r7, #16]
	__asm volatile
 801606a:	693b      	ldr	r3, [r7, #16]
 801606c:	f383 8811 	msr	BASEPRI, r3
}
 8016070:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016074:	4618      	mov	r0, r3
 8016076:	3738      	adds	r7, #56	; 0x38
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}

0801607c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b084      	sub	sp, #16
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d10a      	bne.n	80160a4 <vQueueDelete+0x28>
	__asm volatile
 801608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016092:	f383 8811 	msr	BASEPRI, r3
 8016096:	f3bf 8f6f 	isb	sy
 801609a:	f3bf 8f4f 	dsb	sy
 801609e:	60bb      	str	r3, [r7, #8]
}
 80160a0:	bf00      	nop
 80160a2:	e7fe      	b.n	80160a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80160a4:	68f8      	ldr	r0, [r7, #12]
 80160a6:	f000 f95f 	bl	8016368 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d102      	bne.n	80160ba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80160b4:	68f8      	ldr	r0, [r7, #12]
 80160b6:	f7fe fd83 	bl	8014bc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80160ba:	bf00      	nop
 80160bc:	3710      	adds	r7, #16
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}

080160c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80160c2:	b480      	push	{r7}
 80160c4:	b085      	sub	sp, #20
 80160c6:	af00      	add	r7, sp, #0
 80160c8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d006      	beq.n	80160e0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80160dc:	60fb      	str	r3, [r7, #12]
 80160de:	e001      	b.n	80160e4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80160e0:	2300      	movs	r3, #0
 80160e2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80160e4:	68fb      	ldr	r3, [r7, #12]
	}
 80160e6:	4618      	mov	r0, r3
 80160e8:	3714      	adds	r7, #20
 80160ea:	46bd      	mov	sp, r7
 80160ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f0:	4770      	bx	lr

080160f2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80160f2:	b580      	push	{r7, lr}
 80160f4:	b086      	sub	sp, #24
 80160f6:	af00      	add	r7, sp, #0
 80160f8:	60f8      	str	r0, [r7, #12]
 80160fa:	60b9      	str	r1, [r7, #8]
 80160fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80160fe:	2300      	movs	r3, #0
 8016100:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016106:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801610c:	2b00      	cmp	r3, #0
 801610e:	d10d      	bne.n	801612c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d14d      	bne.n	80161b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	689b      	ldr	r3, [r3, #8]
 801611c:	4618      	mov	r0, r3
 801611e:	f001 f825 	bl	801716c <xTaskPriorityDisinherit>
 8016122:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	2200      	movs	r2, #0
 8016128:	609a      	str	r2, [r3, #8]
 801612a:	e043      	b.n	80161b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d119      	bne.n	8016166 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	6858      	ldr	r0, [r3, #4]
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801613a:	461a      	mov	r2, r3
 801613c:	68b9      	ldr	r1, [r7, #8]
 801613e:	f015 fc11 	bl	802b964 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	685a      	ldr	r2, [r3, #4]
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801614a:	441a      	add	r2, r3
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	685a      	ldr	r2, [r3, #4]
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	689b      	ldr	r3, [r3, #8]
 8016158:	429a      	cmp	r2, r3
 801615a:	d32b      	bcc.n	80161b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	681a      	ldr	r2, [r3, #0]
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	605a      	str	r2, [r3, #4]
 8016164:	e026      	b.n	80161b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	68d8      	ldr	r0, [r3, #12]
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801616e:	461a      	mov	r2, r3
 8016170:	68b9      	ldr	r1, [r7, #8]
 8016172:	f015 fbf7 	bl	802b964 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	68da      	ldr	r2, [r3, #12]
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801617e:	425b      	negs	r3, r3
 8016180:	441a      	add	r2, r3
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	68da      	ldr	r2, [r3, #12]
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	429a      	cmp	r2, r3
 8016190:	d207      	bcs.n	80161a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	689a      	ldr	r2, [r3, #8]
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801619a:	425b      	negs	r3, r3
 801619c:	441a      	add	r2, r3
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	2b02      	cmp	r3, #2
 80161a6:	d105      	bne.n	80161b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80161a8:	693b      	ldr	r3, [r7, #16]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d002      	beq.n	80161b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80161ae:	693b      	ldr	r3, [r7, #16]
 80161b0:	3b01      	subs	r3, #1
 80161b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80161b4:	693b      	ldr	r3, [r7, #16]
 80161b6:	1c5a      	adds	r2, r3, #1
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80161bc:	697b      	ldr	r3, [r7, #20]
}
 80161be:	4618      	mov	r0, r3
 80161c0:	3718      	adds	r7, #24
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}

080161c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80161c6:	b580      	push	{r7, lr}
 80161c8:	b082      	sub	sp, #8
 80161ca:	af00      	add	r7, sp, #0
 80161cc:	6078      	str	r0, [r7, #4]
 80161ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d018      	beq.n	801620a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	68da      	ldr	r2, [r3, #12]
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161e0:	441a      	add	r2, r3
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	68da      	ldr	r2, [r3, #12]
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	689b      	ldr	r3, [r3, #8]
 80161ee:	429a      	cmp	r2, r3
 80161f0:	d303      	bcc.n	80161fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	681a      	ldr	r2, [r3, #0]
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	68d9      	ldr	r1, [r3, #12]
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016202:	461a      	mov	r2, r3
 8016204:	6838      	ldr	r0, [r7, #0]
 8016206:	f015 fbad 	bl	802b964 <memcpy>
	}
}
 801620a:	bf00      	nop
 801620c:	3708      	adds	r7, #8
 801620e:	46bd      	mov	sp, r7
 8016210:	bd80      	pop	{r7, pc}

08016212 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016212:	b580      	push	{r7, lr}
 8016214:	b084      	sub	sp, #16
 8016216:	af00      	add	r7, sp, #0
 8016218:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801621a:	f7fe ffd3 	bl	80151c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016224:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016226:	e011      	b.n	801624c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801622c:	2b00      	cmp	r3, #0
 801622e:	d012      	beq.n	8016256 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	3324      	adds	r3, #36	; 0x24
 8016234:	4618      	mov	r0, r3
 8016236:	f000 fd55 	bl	8016ce4 <xTaskRemoveFromEventList>
 801623a:	4603      	mov	r3, r0
 801623c:	2b00      	cmp	r3, #0
 801623e:	d001      	beq.n	8016244 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016240:	f000 fe2c 	bl	8016e9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016244:	7bfb      	ldrb	r3, [r7, #15]
 8016246:	3b01      	subs	r3, #1
 8016248:	b2db      	uxtb	r3, r3
 801624a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801624c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016250:	2b00      	cmp	r3, #0
 8016252:	dce9      	bgt.n	8016228 <prvUnlockQueue+0x16>
 8016254:	e000      	b.n	8016258 <prvUnlockQueue+0x46>
					break;
 8016256:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	22ff      	movs	r2, #255	; 0xff
 801625c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016260:	f7fe ffe0 	bl	8015224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016264:	f7fe ffae 	bl	80151c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801626e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016270:	e011      	b.n	8016296 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	691b      	ldr	r3, [r3, #16]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d012      	beq.n	80162a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	3310      	adds	r3, #16
 801627e:	4618      	mov	r0, r3
 8016280:	f000 fd30 	bl	8016ce4 <xTaskRemoveFromEventList>
 8016284:	4603      	mov	r3, r0
 8016286:	2b00      	cmp	r3, #0
 8016288:	d001      	beq.n	801628e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801628a:	f000 fe07 	bl	8016e9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801628e:	7bbb      	ldrb	r3, [r7, #14]
 8016290:	3b01      	subs	r3, #1
 8016292:	b2db      	uxtb	r3, r3
 8016294:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801629a:	2b00      	cmp	r3, #0
 801629c:	dce9      	bgt.n	8016272 <prvUnlockQueue+0x60>
 801629e:	e000      	b.n	80162a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80162a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	22ff      	movs	r2, #255	; 0xff
 80162a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80162aa:	f7fe ffbb 	bl	8015224 <vPortExitCritical>
}
 80162ae:	bf00      	nop
 80162b0:	3710      	adds	r7, #16
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}

080162b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80162b6:	b580      	push	{r7, lr}
 80162b8:	b084      	sub	sp, #16
 80162ba:	af00      	add	r7, sp, #0
 80162bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80162be:	f7fe ff81 	bl	80151c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d102      	bne.n	80162d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80162ca:	2301      	movs	r3, #1
 80162cc:	60fb      	str	r3, [r7, #12]
 80162ce:	e001      	b.n	80162d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80162d0:	2300      	movs	r3, #0
 80162d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80162d4:	f7fe ffa6 	bl	8015224 <vPortExitCritical>

	return xReturn;
 80162d8:	68fb      	ldr	r3, [r7, #12]
}
 80162da:	4618      	mov	r0, r3
 80162dc:	3710      	adds	r7, #16
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}

080162e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80162e2:	b580      	push	{r7, lr}
 80162e4:	b084      	sub	sp, #16
 80162e6:	af00      	add	r7, sp, #0
 80162e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80162ea:	f7fe ff6b 	bl	80151c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162f6:	429a      	cmp	r2, r3
 80162f8:	d102      	bne.n	8016300 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80162fa:	2301      	movs	r3, #1
 80162fc:	60fb      	str	r3, [r7, #12]
 80162fe:	e001      	b.n	8016304 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016300:	2300      	movs	r3, #0
 8016302:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016304:	f7fe ff8e 	bl	8015224 <vPortExitCritical>

	return xReturn;
 8016308:	68fb      	ldr	r3, [r7, #12]
}
 801630a:	4618      	mov	r0, r3
 801630c:	3710      	adds	r7, #16
 801630e:	46bd      	mov	sp, r7
 8016310:	bd80      	pop	{r7, pc}
	...

08016314 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016314:	b480      	push	{r7}
 8016316:	b085      	sub	sp, #20
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]
 801631c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801631e:	2300      	movs	r3, #0
 8016320:	60fb      	str	r3, [r7, #12]
 8016322:	e014      	b.n	801634e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016324:	4a0f      	ldr	r2, [pc, #60]	; (8016364 <vQueueAddToRegistry+0x50>)
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d10b      	bne.n	8016348 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016330:	490c      	ldr	r1, [pc, #48]	; (8016364 <vQueueAddToRegistry+0x50>)
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	683a      	ldr	r2, [r7, #0]
 8016336:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801633a:	4a0a      	ldr	r2, [pc, #40]	; (8016364 <vQueueAddToRegistry+0x50>)
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	00db      	lsls	r3, r3, #3
 8016340:	4413      	add	r3, r2
 8016342:	687a      	ldr	r2, [r7, #4]
 8016344:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016346:	e006      	b.n	8016356 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	3301      	adds	r3, #1
 801634c:	60fb      	str	r3, [r7, #12]
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	2b07      	cmp	r3, #7
 8016352:	d9e7      	bls.n	8016324 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016354:	bf00      	nop
 8016356:	bf00      	nop
 8016358:	3714      	adds	r7, #20
 801635a:	46bd      	mov	sp, r7
 801635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016360:	4770      	bx	lr
 8016362:	bf00      	nop
 8016364:	2400cef8 	.word	0x2400cef8

08016368 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016368:	b480      	push	{r7}
 801636a:	b085      	sub	sp, #20
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016370:	2300      	movs	r3, #0
 8016372:	60fb      	str	r3, [r7, #12]
 8016374:	e016      	b.n	80163a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016376:	4a10      	ldr	r2, [pc, #64]	; (80163b8 <vQueueUnregisterQueue+0x50>)
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	00db      	lsls	r3, r3, #3
 801637c:	4413      	add	r3, r2
 801637e:	685b      	ldr	r3, [r3, #4]
 8016380:	687a      	ldr	r2, [r7, #4]
 8016382:	429a      	cmp	r2, r3
 8016384:	d10b      	bne.n	801639e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016386:	4a0c      	ldr	r2, [pc, #48]	; (80163b8 <vQueueUnregisterQueue+0x50>)
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	2100      	movs	r1, #0
 801638c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016390:	4a09      	ldr	r2, [pc, #36]	; (80163b8 <vQueueUnregisterQueue+0x50>)
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	00db      	lsls	r3, r3, #3
 8016396:	4413      	add	r3, r2
 8016398:	2200      	movs	r2, #0
 801639a:	605a      	str	r2, [r3, #4]
				break;
 801639c:	e006      	b.n	80163ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	3301      	adds	r3, #1
 80163a2:	60fb      	str	r3, [r7, #12]
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	2b07      	cmp	r3, #7
 80163a8:	d9e5      	bls.n	8016376 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80163aa:	bf00      	nop
 80163ac:	bf00      	nop
 80163ae:	3714      	adds	r7, #20
 80163b0:	46bd      	mov	sp, r7
 80163b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b6:	4770      	bx	lr
 80163b8:	2400cef8 	.word	0x2400cef8

080163bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80163bc:	b580      	push	{r7, lr}
 80163be:	b086      	sub	sp, #24
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	60f8      	str	r0, [r7, #12]
 80163c4:	60b9      	str	r1, [r7, #8]
 80163c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80163cc:	f7fe fefa 	bl	80151c4 <vPortEnterCritical>
 80163d0:	697b      	ldr	r3, [r7, #20]
 80163d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80163d6:	b25b      	sxtb	r3, r3
 80163d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163dc:	d103      	bne.n	80163e6 <vQueueWaitForMessageRestricted+0x2a>
 80163de:	697b      	ldr	r3, [r7, #20]
 80163e0:	2200      	movs	r2, #0
 80163e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80163e6:	697b      	ldr	r3, [r7, #20]
 80163e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80163ec:	b25b      	sxtb	r3, r3
 80163ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163f2:	d103      	bne.n	80163fc <vQueueWaitForMessageRestricted+0x40>
 80163f4:	697b      	ldr	r3, [r7, #20]
 80163f6:	2200      	movs	r2, #0
 80163f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80163fc:	f7fe ff12 	bl	8015224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016400:	697b      	ldr	r3, [r7, #20]
 8016402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016404:	2b00      	cmp	r3, #0
 8016406:	d106      	bne.n	8016416 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016408:	697b      	ldr	r3, [r7, #20]
 801640a:	3324      	adds	r3, #36	; 0x24
 801640c:	687a      	ldr	r2, [r7, #4]
 801640e:	68b9      	ldr	r1, [r7, #8]
 8016410:	4618      	mov	r0, r3
 8016412:	f000 fc3b 	bl	8016c8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016416:	6978      	ldr	r0, [r7, #20]
 8016418:	f7ff fefb 	bl	8016212 <prvUnlockQueue>
	}
 801641c:	bf00      	nop
 801641e:	3718      	adds	r7, #24
 8016420:	46bd      	mov	sp, r7
 8016422:	bd80      	pop	{r7, pc}

08016424 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016424:	b580      	push	{r7, lr}
 8016426:	b08e      	sub	sp, #56	; 0x38
 8016428:	af04      	add	r7, sp, #16
 801642a:	60f8      	str	r0, [r7, #12]
 801642c:	60b9      	str	r1, [r7, #8]
 801642e:	607a      	str	r2, [r7, #4]
 8016430:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016434:	2b00      	cmp	r3, #0
 8016436:	d10a      	bne.n	801644e <xTaskCreateStatic+0x2a>
	__asm volatile
 8016438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801643c:	f383 8811 	msr	BASEPRI, r3
 8016440:	f3bf 8f6f 	isb	sy
 8016444:	f3bf 8f4f 	dsb	sy
 8016448:	623b      	str	r3, [r7, #32]
}
 801644a:	bf00      	nop
 801644c:	e7fe      	b.n	801644c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016450:	2b00      	cmp	r3, #0
 8016452:	d10a      	bne.n	801646a <xTaskCreateStatic+0x46>
	__asm volatile
 8016454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016458:	f383 8811 	msr	BASEPRI, r3
 801645c:	f3bf 8f6f 	isb	sy
 8016460:	f3bf 8f4f 	dsb	sy
 8016464:	61fb      	str	r3, [r7, #28]
}
 8016466:	bf00      	nop
 8016468:	e7fe      	b.n	8016468 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801646a:	235c      	movs	r3, #92	; 0x5c
 801646c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801646e:	693b      	ldr	r3, [r7, #16]
 8016470:	2b5c      	cmp	r3, #92	; 0x5c
 8016472:	d00a      	beq.n	801648a <xTaskCreateStatic+0x66>
	__asm volatile
 8016474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016478:	f383 8811 	msr	BASEPRI, r3
 801647c:	f3bf 8f6f 	isb	sy
 8016480:	f3bf 8f4f 	dsb	sy
 8016484:	61bb      	str	r3, [r7, #24]
}
 8016486:	bf00      	nop
 8016488:	e7fe      	b.n	8016488 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801648a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801648e:	2b00      	cmp	r3, #0
 8016490:	d01e      	beq.n	80164d0 <xTaskCreateStatic+0xac>
 8016492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016494:	2b00      	cmp	r3, #0
 8016496:	d01b      	beq.n	80164d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801649a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801649e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80164a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80164a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a4:	2202      	movs	r2, #2
 80164a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80164aa:	2300      	movs	r3, #0
 80164ac:	9303      	str	r3, [sp, #12]
 80164ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b0:	9302      	str	r3, [sp, #8]
 80164b2:	f107 0314 	add.w	r3, r7, #20
 80164b6:	9301      	str	r3, [sp, #4]
 80164b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ba:	9300      	str	r3, [sp, #0]
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	687a      	ldr	r2, [r7, #4]
 80164c0:	68b9      	ldr	r1, [r7, #8]
 80164c2:	68f8      	ldr	r0, [r7, #12]
 80164c4:	f000 f850 	bl	8016568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80164c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164ca:	f000 f8dd 	bl	8016688 <prvAddNewTaskToReadyList>
 80164ce:	e001      	b.n	80164d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80164d0:	2300      	movs	r3, #0
 80164d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80164d4:	697b      	ldr	r3, [r7, #20]
	}
 80164d6:	4618      	mov	r0, r3
 80164d8:	3728      	adds	r7, #40	; 0x28
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}

080164de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80164de:	b580      	push	{r7, lr}
 80164e0:	b08c      	sub	sp, #48	; 0x30
 80164e2:	af04      	add	r7, sp, #16
 80164e4:	60f8      	str	r0, [r7, #12]
 80164e6:	60b9      	str	r1, [r7, #8]
 80164e8:	603b      	str	r3, [r7, #0]
 80164ea:	4613      	mov	r3, r2
 80164ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80164ee:	88fb      	ldrh	r3, [r7, #6]
 80164f0:	009b      	lsls	r3, r3, #2
 80164f2:	4618      	mov	r0, r3
 80164f4:	f7fe fa98 	bl	8014a28 <pvPortMalloc>
 80164f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80164fa:	697b      	ldr	r3, [r7, #20]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d00e      	beq.n	801651e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016500:	205c      	movs	r0, #92	; 0x5c
 8016502:	f7fe fa91 	bl	8014a28 <pvPortMalloc>
 8016506:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016508:	69fb      	ldr	r3, [r7, #28]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d003      	beq.n	8016516 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801650e:	69fb      	ldr	r3, [r7, #28]
 8016510:	697a      	ldr	r2, [r7, #20]
 8016512:	631a      	str	r2, [r3, #48]	; 0x30
 8016514:	e005      	b.n	8016522 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016516:	6978      	ldr	r0, [r7, #20]
 8016518:	f7fe fb52 	bl	8014bc0 <vPortFree>
 801651c:	e001      	b.n	8016522 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801651e:	2300      	movs	r3, #0
 8016520:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016522:	69fb      	ldr	r3, [r7, #28]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d017      	beq.n	8016558 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016528:	69fb      	ldr	r3, [r7, #28]
 801652a:	2200      	movs	r2, #0
 801652c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016530:	88fa      	ldrh	r2, [r7, #6]
 8016532:	2300      	movs	r3, #0
 8016534:	9303      	str	r3, [sp, #12]
 8016536:	69fb      	ldr	r3, [r7, #28]
 8016538:	9302      	str	r3, [sp, #8]
 801653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801653c:	9301      	str	r3, [sp, #4]
 801653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016540:	9300      	str	r3, [sp, #0]
 8016542:	683b      	ldr	r3, [r7, #0]
 8016544:	68b9      	ldr	r1, [r7, #8]
 8016546:	68f8      	ldr	r0, [r7, #12]
 8016548:	f000 f80e 	bl	8016568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801654c:	69f8      	ldr	r0, [r7, #28]
 801654e:	f000 f89b 	bl	8016688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016552:	2301      	movs	r3, #1
 8016554:	61bb      	str	r3, [r7, #24]
 8016556:	e002      	b.n	801655e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016558:	f04f 33ff 	mov.w	r3, #4294967295
 801655c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801655e:	69bb      	ldr	r3, [r7, #24]
	}
 8016560:	4618      	mov	r0, r3
 8016562:	3720      	adds	r7, #32
 8016564:	46bd      	mov	sp, r7
 8016566:	bd80      	pop	{r7, pc}

08016568 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016568:	b580      	push	{r7, lr}
 801656a:	b088      	sub	sp, #32
 801656c:	af00      	add	r7, sp, #0
 801656e:	60f8      	str	r0, [r7, #12]
 8016570:	60b9      	str	r1, [r7, #8]
 8016572:	607a      	str	r2, [r7, #4]
 8016574:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016578:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	009b      	lsls	r3, r3, #2
 801657e:	461a      	mov	r2, r3
 8016580:	21a5      	movs	r1, #165	; 0xa5
 8016582:	f015 f9fd 	bl	802b980 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801658a:	6879      	ldr	r1, [r7, #4]
 801658c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8016590:	440b      	add	r3, r1
 8016592:	009b      	lsls	r3, r3, #2
 8016594:	4413      	add	r3, r2
 8016596:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016598:	69bb      	ldr	r3, [r7, #24]
 801659a:	f023 0307 	bic.w	r3, r3, #7
 801659e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80165a0:	69bb      	ldr	r3, [r7, #24]
 80165a2:	f003 0307 	and.w	r3, r3, #7
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d00a      	beq.n	80165c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80165aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165ae:	f383 8811 	msr	BASEPRI, r3
 80165b2:	f3bf 8f6f 	isb	sy
 80165b6:	f3bf 8f4f 	dsb	sy
 80165ba:	617b      	str	r3, [r7, #20]
}
 80165bc:	bf00      	nop
 80165be:	e7fe      	b.n	80165be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80165c0:	68bb      	ldr	r3, [r7, #8]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d01f      	beq.n	8016606 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80165c6:	2300      	movs	r3, #0
 80165c8:	61fb      	str	r3, [r7, #28]
 80165ca:	e012      	b.n	80165f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80165cc:	68ba      	ldr	r2, [r7, #8]
 80165ce:	69fb      	ldr	r3, [r7, #28]
 80165d0:	4413      	add	r3, r2
 80165d2:	7819      	ldrb	r1, [r3, #0]
 80165d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165d6:	69fb      	ldr	r3, [r7, #28]
 80165d8:	4413      	add	r3, r2
 80165da:	3334      	adds	r3, #52	; 0x34
 80165dc:	460a      	mov	r2, r1
 80165de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80165e0:	68ba      	ldr	r2, [r7, #8]
 80165e2:	69fb      	ldr	r3, [r7, #28]
 80165e4:	4413      	add	r3, r2
 80165e6:	781b      	ldrb	r3, [r3, #0]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d006      	beq.n	80165fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80165ec:	69fb      	ldr	r3, [r7, #28]
 80165ee:	3301      	adds	r3, #1
 80165f0:	61fb      	str	r3, [r7, #28]
 80165f2:	69fb      	ldr	r3, [r7, #28]
 80165f4:	2b0f      	cmp	r3, #15
 80165f6:	d9e9      	bls.n	80165cc <prvInitialiseNewTask+0x64>
 80165f8:	e000      	b.n	80165fc <prvInitialiseNewTask+0x94>
			{
				break;
 80165fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80165fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165fe:	2200      	movs	r2, #0
 8016600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016604:	e003      	b.n	801660e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016608:	2200      	movs	r2, #0
 801660a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016610:	2b37      	cmp	r3, #55	; 0x37
 8016612:	d901      	bls.n	8016618 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016614:	2337      	movs	r3, #55	; 0x37
 8016616:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801661a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801661c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016622:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016626:	2200      	movs	r2, #0
 8016628:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801662c:	3304      	adds	r3, #4
 801662e:	4618      	mov	r0, r3
 8016630:	f7fe fc04 	bl	8014e3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016636:	3318      	adds	r3, #24
 8016638:	4618      	mov	r0, r3
 801663a:	f7fe fbff 	bl	8014e3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016642:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016646:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801664c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016652:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016656:	2200      	movs	r2, #0
 8016658:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801665c:	2200      	movs	r2, #0
 801665e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016662:	683a      	ldr	r2, [r7, #0]
 8016664:	68f9      	ldr	r1, [r7, #12]
 8016666:	69b8      	ldr	r0, [r7, #24]
 8016668:	f7fe fc7c 	bl	8014f64 <pxPortInitialiseStack>
 801666c:	4602      	mov	r2, r0
 801666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016670:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016674:	2b00      	cmp	r3, #0
 8016676:	d002      	beq.n	801667e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801667a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801667c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801667e:	bf00      	nop
 8016680:	3720      	adds	r7, #32
 8016682:	46bd      	mov	sp, r7
 8016684:	bd80      	pop	{r7, pc}
	...

08016688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b082      	sub	sp, #8
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016690:	f7fe fd98 	bl	80151c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016694:	4b2d      	ldr	r3, [pc, #180]	; (801674c <prvAddNewTaskToReadyList+0xc4>)
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	3301      	adds	r3, #1
 801669a:	4a2c      	ldr	r2, [pc, #176]	; (801674c <prvAddNewTaskToReadyList+0xc4>)
 801669c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801669e:	4b2c      	ldr	r3, [pc, #176]	; (8016750 <prvAddNewTaskToReadyList+0xc8>)
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d109      	bne.n	80166ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80166a6:	4a2a      	ldr	r2, [pc, #168]	; (8016750 <prvAddNewTaskToReadyList+0xc8>)
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80166ac:	4b27      	ldr	r3, [pc, #156]	; (801674c <prvAddNewTaskToReadyList+0xc4>)
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	2b01      	cmp	r3, #1
 80166b2:	d110      	bne.n	80166d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80166b4:	f000 fc16 	bl	8016ee4 <prvInitialiseTaskLists>
 80166b8:	e00d      	b.n	80166d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80166ba:	4b26      	ldr	r3, [pc, #152]	; (8016754 <prvAddNewTaskToReadyList+0xcc>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d109      	bne.n	80166d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80166c2:	4b23      	ldr	r3, [pc, #140]	; (8016750 <prvAddNewTaskToReadyList+0xc8>)
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166cc:	429a      	cmp	r2, r3
 80166ce:	d802      	bhi.n	80166d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80166d0:	4a1f      	ldr	r2, [pc, #124]	; (8016750 <prvAddNewTaskToReadyList+0xc8>)
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80166d6:	4b20      	ldr	r3, [pc, #128]	; (8016758 <prvAddNewTaskToReadyList+0xd0>)
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	3301      	adds	r3, #1
 80166dc:	4a1e      	ldr	r2, [pc, #120]	; (8016758 <prvAddNewTaskToReadyList+0xd0>)
 80166de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80166e0:	4b1d      	ldr	r3, [pc, #116]	; (8016758 <prvAddNewTaskToReadyList+0xd0>)
 80166e2:	681a      	ldr	r2, [r3, #0]
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166ec:	4b1b      	ldr	r3, [pc, #108]	; (801675c <prvAddNewTaskToReadyList+0xd4>)
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	429a      	cmp	r2, r3
 80166f2:	d903      	bls.n	80166fc <prvAddNewTaskToReadyList+0x74>
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166f8:	4a18      	ldr	r2, [pc, #96]	; (801675c <prvAddNewTaskToReadyList+0xd4>)
 80166fa:	6013      	str	r3, [r2, #0]
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016700:	4613      	mov	r3, r2
 8016702:	009b      	lsls	r3, r3, #2
 8016704:	4413      	add	r3, r2
 8016706:	009b      	lsls	r3, r3, #2
 8016708:	4a15      	ldr	r2, [pc, #84]	; (8016760 <prvAddNewTaskToReadyList+0xd8>)
 801670a:	441a      	add	r2, r3
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	3304      	adds	r3, #4
 8016710:	4619      	mov	r1, r3
 8016712:	4610      	mov	r0, r2
 8016714:	f7fe fb9f 	bl	8014e56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016718:	f7fe fd84 	bl	8015224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801671c:	4b0d      	ldr	r3, [pc, #52]	; (8016754 <prvAddNewTaskToReadyList+0xcc>)
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d00e      	beq.n	8016742 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016724:	4b0a      	ldr	r3, [pc, #40]	; (8016750 <prvAddNewTaskToReadyList+0xc8>)
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801672e:	429a      	cmp	r2, r3
 8016730:	d207      	bcs.n	8016742 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016732:	4b0c      	ldr	r3, [pc, #48]	; (8016764 <prvAddNewTaskToReadyList+0xdc>)
 8016734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016738:	601a      	str	r2, [r3, #0]
 801673a:	f3bf 8f4f 	dsb	sy
 801673e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016742:	bf00      	nop
 8016744:	3708      	adds	r7, #8
 8016746:	46bd      	mov	sp, r7
 8016748:	bd80      	pop	{r7, pc}
 801674a:	bf00      	nop
 801674c:	2400c758 	.word	0x2400c758
 8016750:	2400c284 	.word	0x2400c284
 8016754:	2400c764 	.word	0x2400c764
 8016758:	2400c774 	.word	0x2400c774
 801675c:	2400c760 	.word	0x2400c760
 8016760:	2400c288 	.word	0x2400c288
 8016764:	e000ed04 	.word	0xe000ed04

08016768 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016768:	b580      	push	{r7, lr}
 801676a:	b084      	sub	sp, #16
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016770:	2300      	movs	r3, #0
 8016772:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d017      	beq.n	80167aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801677a:	4b13      	ldr	r3, [pc, #76]	; (80167c8 <vTaskDelay+0x60>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d00a      	beq.n	8016798 <vTaskDelay+0x30>
	__asm volatile
 8016782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016786:	f383 8811 	msr	BASEPRI, r3
 801678a:	f3bf 8f6f 	isb	sy
 801678e:	f3bf 8f4f 	dsb	sy
 8016792:	60bb      	str	r3, [r7, #8]
}
 8016794:	bf00      	nop
 8016796:	e7fe      	b.n	8016796 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016798:	f000 f880 	bl	801689c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801679c:	2100      	movs	r1, #0
 801679e:	6878      	ldr	r0, [r7, #4]
 80167a0:	f000 fde8 	bl	8017374 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80167a4:	f000 f888 	bl	80168b8 <xTaskResumeAll>
 80167a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d107      	bne.n	80167c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80167b0:	4b06      	ldr	r3, [pc, #24]	; (80167cc <vTaskDelay+0x64>)
 80167b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167b6:	601a      	str	r2, [r3, #0]
 80167b8:	f3bf 8f4f 	dsb	sy
 80167bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80167c0:	bf00      	nop
 80167c2:	3710      	adds	r7, #16
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bd80      	pop	{r7, pc}
 80167c8:	2400c780 	.word	0x2400c780
 80167cc:	e000ed04 	.word	0xe000ed04

080167d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b08a      	sub	sp, #40	; 0x28
 80167d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80167d6:	2300      	movs	r3, #0
 80167d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80167da:	2300      	movs	r3, #0
 80167dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80167de:	463a      	mov	r2, r7
 80167e0:	1d39      	adds	r1, r7, #4
 80167e2:	f107 0308 	add.w	r3, r7, #8
 80167e6:	4618      	mov	r0, r3
 80167e8:	f7fe f8ea 	bl	80149c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80167ec:	6839      	ldr	r1, [r7, #0]
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	68ba      	ldr	r2, [r7, #8]
 80167f2:	9202      	str	r2, [sp, #8]
 80167f4:	9301      	str	r3, [sp, #4]
 80167f6:	2300      	movs	r3, #0
 80167f8:	9300      	str	r3, [sp, #0]
 80167fa:	2300      	movs	r3, #0
 80167fc:	460a      	mov	r2, r1
 80167fe:	4921      	ldr	r1, [pc, #132]	; (8016884 <vTaskStartScheduler+0xb4>)
 8016800:	4821      	ldr	r0, [pc, #132]	; (8016888 <vTaskStartScheduler+0xb8>)
 8016802:	f7ff fe0f 	bl	8016424 <xTaskCreateStatic>
 8016806:	4603      	mov	r3, r0
 8016808:	4a20      	ldr	r2, [pc, #128]	; (801688c <vTaskStartScheduler+0xbc>)
 801680a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801680c:	4b1f      	ldr	r3, [pc, #124]	; (801688c <vTaskStartScheduler+0xbc>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d002      	beq.n	801681a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016814:	2301      	movs	r3, #1
 8016816:	617b      	str	r3, [r7, #20]
 8016818:	e001      	b.n	801681e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801681a:	2300      	movs	r3, #0
 801681c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	2b01      	cmp	r3, #1
 8016822:	d102      	bne.n	801682a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016824:	f000 fdfa 	bl	801741c <xTimerCreateTimerTask>
 8016828:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801682a:	697b      	ldr	r3, [r7, #20]
 801682c:	2b01      	cmp	r3, #1
 801682e:	d116      	bne.n	801685e <vTaskStartScheduler+0x8e>
	__asm volatile
 8016830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016834:	f383 8811 	msr	BASEPRI, r3
 8016838:	f3bf 8f6f 	isb	sy
 801683c:	f3bf 8f4f 	dsb	sy
 8016840:	613b      	str	r3, [r7, #16]
}
 8016842:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016844:	4b12      	ldr	r3, [pc, #72]	; (8016890 <vTaskStartScheduler+0xc0>)
 8016846:	f04f 32ff 	mov.w	r2, #4294967295
 801684a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801684c:	4b11      	ldr	r3, [pc, #68]	; (8016894 <vTaskStartScheduler+0xc4>)
 801684e:	2201      	movs	r2, #1
 8016850:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016852:	4b11      	ldr	r3, [pc, #68]	; (8016898 <vTaskStartScheduler+0xc8>)
 8016854:	2200      	movs	r2, #0
 8016856:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016858:	f7fe fc12 	bl	8015080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801685c:	e00e      	b.n	801687c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801685e:	697b      	ldr	r3, [r7, #20]
 8016860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016864:	d10a      	bne.n	801687c <vTaskStartScheduler+0xac>
	__asm volatile
 8016866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801686a:	f383 8811 	msr	BASEPRI, r3
 801686e:	f3bf 8f6f 	isb	sy
 8016872:	f3bf 8f4f 	dsb	sy
 8016876:	60fb      	str	r3, [r7, #12]
}
 8016878:	bf00      	nop
 801687a:	e7fe      	b.n	801687a <vTaskStartScheduler+0xaa>
}
 801687c:	bf00      	nop
 801687e:	3718      	adds	r7, #24
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}
 8016884:	0802d7f8 	.word	0x0802d7f8
 8016888:	08016eb5 	.word	0x08016eb5
 801688c:	2400c77c 	.word	0x2400c77c
 8016890:	2400c778 	.word	0x2400c778
 8016894:	2400c764 	.word	0x2400c764
 8016898:	2400c75c 	.word	0x2400c75c

0801689c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801689c:	b480      	push	{r7}
 801689e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80168a0:	4b04      	ldr	r3, [pc, #16]	; (80168b4 <vTaskSuspendAll+0x18>)
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	3301      	adds	r3, #1
 80168a6:	4a03      	ldr	r2, [pc, #12]	; (80168b4 <vTaskSuspendAll+0x18>)
 80168a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80168aa:	bf00      	nop
 80168ac:	46bd      	mov	sp, r7
 80168ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b2:	4770      	bx	lr
 80168b4:	2400c780 	.word	0x2400c780

080168b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b084      	sub	sp, #16
 80168bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80168be:	2300      	movs	r3, #0
 80168c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80168c2:	2300      	movs	r3, #0
 80168c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80168c6:	4b42      	ldr	r3, [pc, #264]	; (80169d0 <xTaskResumeAll+0x118>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d10a      	bne.n	80168e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80168ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168d2:	f383 8811 	msr	BASEPRI, r3
 80168d6:	f3bf 8f6f 	isb	sy
 80168da:	f3bf 8f4f 	dsb	sy
 80168de:	603b      	str	r3, [r7, #0]
}
 80168e0:	bf00      	nop
 80168e2:	e7fe      	b.n	80168e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80168e4:	f7fe fc6e 	bl	80151c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80168e8:	4b39      	ldr	r3, [pc, #228]	; (80169d0 <xTaskResumeAll+0x118>)
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	3b01      	subs	r3, #1
 80168ee:	4a38      	ldr	r2, [pc, #224]	; (80169d0 <xTaskResumeAll+0x118>)
 80168f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80168f2:	4b37      	ldr	r3, [pc, #220]	; (80169d0 <xTaskResumeAll+0x118>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d162      	bne.n	80169c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80168fa:	4b36      	ldr	r3, [pc, #216]	; (80169d4 <xTaskResumeAll+0x11c>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d05e      	beq.n	80169c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016902:	e02f      	b.n	8016964 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016904:	4b34      	ldr	r3, [pc, #208]	; (80169d8 <xTaskResumeAll+0x120>)
 8016906:	68db      	ldr	r3, [r3, #12]
 8016908:	68db      	ldr	r3, [r3, #12]
 801690a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	3318      	adds	r3, #24
 8016910:	4618      	mov	r0, r3
 8016912:	f7fe fafd 	bl	8014f10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	3304      	adds	r3, #4
 801691a:	4618      	mov	r0, r3
 801691c:	f7fe faf8 	bl	8014f10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016924:	4b2d      	ldr	r3, [pc, #180]	; (80169dc <xTaskResumeAll+0x124>)
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	429a      	cmp	r2, r3
 801692a:	d903      	bls.n	8016934 <xTaskResumeAll+0x7c>
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016930:	4a2a      	ldr	r2, [pc, #168]	; (80169dc <xTaskResumeAll+0x124>)
 8016932:	6013      	str	r3, [r2, #0]
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016938:	4613      	mov	r3, r2
 801693a:	009b      	lsls	r3, r3, #2
 801693c:	4413      	add	r3, r2
 801693e:	009b      	lsls	r3, r3, #2
 8016940:	4a27      	ldr	r2, [pc, #156]	; (80169e0 <xTaskResumeAll+0x128>)
 8016942:	441a      	add	r2, r3
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	3304      	adds	r3, #4
 8016948:	4619      	mov	r1, r3
 801694a:	4610      	mov	r0, r2
 801694c:	f7fe fa83 	bl	8014e56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016954:	4b23      	ldr	r3, [pc, #140]	; (80169e4 <xTaskResumeAll+0x12c>)
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801695a:	429a      	cmp	r2, r3
 801695c:	d302      	bcc.n	8016964 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801695e:	4b22      	ldr	r3, [pc, #136]	; (80169e8 <xTaskResumeAll+0x130>)
 8016960:	2201      	movs	r2, #1
 8016962:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016964:	4b1c      	ldr	r3, [pc, #112]	; (80169d8 <xTaskResumeAll+0x120>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d1cb      	bne.n	8016904 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d001      	beq.n	8016976 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016972:	f000 fb55 	bl	8017020 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016976:	4b1d      	ldr	r3, [pc, #116]	; (80169ec <xTaskResumeAll+0x134>)
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d010      	beq.n	80169a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016982:	f000 f847 	bl	8016a14 <xTaskIncrementTick>
 8016986:	4603      	mov	r3, r0
 8016988:	2b00      	cmp	r3, #0
 801698a:	d002      	beq.n	8016992 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801698c:	4b16      	ldr	r3, [pc, #88]	; (80169e8 <xTaskResumeAll+0x130>)
 801698e:	2201      	movs	r2, #1
 8016990:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	3b01      	subs	r3, #1
 8016996:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d1f1      	bne.n	8016982 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801699e:	4b13      	ldr	r3, [pc, #76]	; (80169ec <xTaskResumeAll+0x134>)
 80169a0:	2200      	movs	r2, #0
 80169a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80169a4:	4b10      	ldr	r3, [pc, #64]	; (80169e8 <xTaskResumeAll+0x130>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d009      	beq.n	80169c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80169ac:	2301      	movs	r3, #1
 80169ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80169b0:	4b0f      	ldr	r3, [pc, #60]	; (80169f0 <xTaskResumeAll+0x138>)
 80169b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169b6:	601a      	str	r2, [r3, #0]
 80169b8:	f3bf 8f4f 	dsb	sy
 80169bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80169c0:	f7fe fc30 	bl	8015224 <vPortExitCritical>

	return xAlreadyYielded;
 80169c4:	68bb      	ldr	r3, [r7, #8]
}
 80169c6:	4618      	mov	r0, r3
 80169c8:	3710      	adds	r7, #16
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	bf00      	nop
 80169d0:	2400c780 	.word	0x2400c780
 80169d4:	2400c758 	.word	0x2400c758
 80169d8:	2400c718 	.word	0x2400c718
 80169dc:	2400c760 	.word	0x2400c760
 80169e0:	2400c288 	.word	0x2400c288
 80169e4:	2400c284 	.word	0x2400c284
 80169e8:	2400c76c 	.word	0x2400c76c
 80169ec:	2400c768 	.word	0x2400c768
 80169f0:	e000ed04 	.word	0xe000ed04

080169f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80169f4:	b480      	push	{r7}
 80169f6:	b083      	sub	sp, #12
 80169f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80169fa:	4b05      	ldr	r3, [pc, #20]	; (8016a10 <xTaskGetTickCount+0x1c>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016a00:	687b      	ldr	r3, [r7, #4]
}
 8016a02:	4618      	mov	r0, r3
 8016a04:	370c      	adds	r7, #12
 8016a06:	46bd      	mov	sp, r7
 8016a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a0c:	4770      	bx	lr
 8016a0e:	bf00      	nop
 8016a10:	2400c75c 	.word	0x2400c75c

08016a14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b086      	sub	sp, #24
 8016a18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016a1e:	4b4f      	ldr	r3, [pc, #316]	; (8016b5c <xTaskIncrementTick+0x148>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	f040 808f 	bne.w	8016b46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016a28:	4b4d      	ldr	r3, [pc, #308]	; (8016b60 <xTaskIncrementTick+0x14c>)
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	3301      	adds	r3, #1
 8016a2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016a30:	4a4b      	ldr	r2, [pc, #300]	; (8016b60 <xTaskIncrementTick+0x14c>)
 8016a32:	693b      	ldr	r3, [r7, #16]
 8016a34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016a36:	693b      	ldr	r3, [r7, #16]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d120      	bne.n	8016a7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016a3c:	4b49      	ldr	r3, [pc, #292]	; (8016b64 <xTaskIncrementTick+0x150>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d00a      	beq.n	8016a5c <xTaskIncrementTick+0x48>
	__asm volatile
 8016a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a4a:	f383 8811 	msr	BASEPRI, r3
 8016a4e:	f3bf 8f6f 	isb	sy
 8016a52:	f3bf 8f4f 	dsb	sy
 8016a56:	603b      	str	r3, [r7, #0]
}
 8016a58:	bf00      	nop
 8016a5a:	e7fe      	b.n	8016a5a <xTaskIncrementTick+0x46>
 8016a5c:	4b41      	ldr	r3, [pc, #260]	; (8016b64 <xTaskIncrementTick+0x150>)
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	60fb      	str	r3, [r7, #12]
 8016a62:	4b41      	ldr	r3, [pc, #260]	; (8016b68 <xTaskIncrementTick+0x154>)
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	4a3f      	ldr	r2, [pc, #252]	; (8016b64 <xTaskIncrementTick+0x150>)
 8016a68:	6013      	str	r3, [r2, #0]
 8016a6a:	4a3f      	ldr	r2, [pc, #252]	; (8016b68 <xTaskIncrementTick+0x154>)
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	6013      	str	r3, [r2, #0]
 8016a70:	4b3e      	ldr	r3, [pc, #248]	; (8016b6c <xTaskIncrementTick+0x158>)
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	3301      	adds	r3, #1
 8016a76:	4a3d      	ldr	r2, [pc, #244]	; (8016b6c <xTaskIncrementTick+0x158>)
 8016a78:	6013      	str	r3, [r2, #0]
 8016a7a:	f000 fad1 	bl	8017020 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016a7e:	4b3c      	ldr	r3, [pc, #240]	; (8016b70 <xTaskIncrementTick+0x15c>)
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	693a      	ldr	r2, [r7, #16]
 8016a84:	429a      	cmp	r2, r3
 8016a86:	d349      	bcc.n	8016b1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016a88:	4b36      	ldr	r3, [pc, #216]	; (8016b64 <xTaskIncrementTick+0x150>)
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d104      	bne.n	8016a9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016a92:	4b37      	ldr	r3, [pc, #220]	; (8016b70 <xTaskIncrementTick+0x15c>)
 8016a94:	f04f 32ff 	mov.w	r2, #4294967295
 8016a98:	601a      	str	r2, [r3, #0]
					break;
 8016a9a:	e03f      	b.n	8016b1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a9c:	4b31      	ldr	r3, [pc, #196]	; (8016b64 <xTaskIncrementTick+0x150>)
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	68db      	ldr	r3, [r3, #12]
 8016aa2:	68db      	ldr	r3, [r3, #12]
 8016aa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016aa6:	68bb      	ldr	r3, [r7, #8]
 8016aa8:	685b      	ldr	r3, [r3, #4]
 8016aaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016aac:	693a      	ldr	r2, [r7, #16]
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	429a      	cmp	r2, r3
 8016ab2:	d203      	bcs.n	8016abc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016ab4:	4a2e      	ldr	r2, [pc, #184]	; (8016b70 <xTaskIncrementTick+0x15c>)
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016aba:	e02f      	b.n	8016b1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016abc:	68bb      	ldr	r3, [r7, #8]
 8016abe:	3304      	adds	r3, #4
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f7fe fa25 	bl	8014f10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016ac6:	68bb      	ldr	r3, [r7, #8]
 8016ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d004      	beq.n	8016ad8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016ace:	68bb      	ldr	r3, [r7, #8]
 8016ad0:	3318      	adds	r3, #24
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7fe fa1c 	bl	8014f10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016ad8:	68bb      	ldr	r3, [r7, #8]
 8016ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016adc:	4b25      	ldr	r3, [pc, #148]	; (8016b74 <xTaskIncrementTick+0x160>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	429a      	cmp	r2, r3
 8016ae2:	d903      	bls.n	8016aec <xTaskIncrementTick+0xd8>
 8016ae4:	68bb      	ldr	r3, [r7, #8]
 8016ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ae8:	4a22      	ldr	r2, [pc, #136]	; (8016b74 <xTaskIncrementTick+0x160>)
 8016aea:	6013      	str	r3, [r2, #0]
 8016aec:	68bb      	ldr	r3, [r7, #8]
 8016aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016af0:	4613      	mov	r3, r2
 8016af2:	009b      	lsls	r3, r3, #2
 8016af4:	4413      	add	r3, r2
 8016af6:	009b      	lsls	r3, r3, #2
 8016af8:	4a1f      	ldr	r2, [pc, #124]	; (8016b78 <xTaskIncrementTick+0x164>)
 8016afa:	441a      	add	r2, r3
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	3304      	adds	r3, #4
 8016b00:	4619      	mov	r1, r3
 8016b02:	4610      	mov	r0, r2
 8016b04:	f7fe f9a7 	bl	8014e56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016b08:	68bb      	ldr	r3, [r7, #8]
 8016b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b0c:	4b1b      	ldr	r3, [pc, #108]	; (8016b7c <xTaskIncrementTick+0x168>)
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b12:	429a      	cmp	r2, r3
 8016b14:	d3b8      	bcc.n	8016a88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8016b16:	2301      	movs	r3, #1
 8016b18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016b1a:	e7b5      	b.n	8016a88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016b1c:	4b17      	ldr	r3, [pc, #92]	; (8016b7c <xTaskIncrementTick+0x168>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b22:	4915      	ldr	r1, [pc, #84]	; (8016b78 <xTaskIncrementTick+0x164>)
 8016b24:	4613      	mov	r3, r2
 8016b26:	009b      	lsls	r3, r3, #2
 8016b28:	4413      	add	r3, r2
 8016b2a:	009b      	lsls	r3, r3, #2
 8016b2c:	440b      	add	r3, r1
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	2b01      	cmp	r3, #1
 8016b32:	d901      	bls.n	8016b38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8016b34:	2301      	movs	r3, #1
 8016b36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016b38:	4b11      	ldr	r3, [pc, #68]	; (8016b80 <xTaskIncrementTick+0x16c>)
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d007      	beq.n	8016b50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8016b40:	2301      	movs	r3, #1
 8016b42:	617b      	str	r3, [r7, #20]
 8016b44:	e004      	b.n	8016b50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016b46:	4b0f      	ldr	r3, [pc, #60]	; (8016b84 <xTaskIncrementTick+0x170>)
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	3301      	adds	r3, #1
 8016b4c:	4a0d      	ldr	r2, [pc, #52]	; (8016b84 <xTaskIncrementTick+0x170>)
 8016b4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016b50:	697b      	ldr	r3, [r7, #20]
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	3718      	adds	r7, #24
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}
 8016b5a:	bf00      	nop
 8016b5c:	2400c780 	.word	0x2400c780
 8016b60:	2400c75c 	.word	0x2400c75c
 8016b64:	2400c710 	.word	0x2400c710
 8016b68:	2400c714 	.word	0x2400c714
 8016b6c:	2400c770 	.word	0x2400c770
 8016b70:	2400c778 	.word	0x2400c778
 8016b74:	2400c760 	.word	0x2400c760
 8016b78:	2400c288 	.word	0x2400c288
 8016b7c:	2400c284 	.word	0x2400c284
 8016b80:	2400c76c 	.word	0x2400c76c
 8016b84:	2400c768 	.word	0x2400c768

08016b88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016b88:	b480      	push	{r7}
 8016b8a:	b085      	sub	sp, #20
 8016b8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016b8e:	4b28      	ldr	r3, [pc, #160]	; (8016c30 <vTaskSwitchContext+0xa8>)
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d003      	beq.n	8016b9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016b96:	4b27      	ldr	r3, [pc, #156]	; (8016c34 <vTaskSwitchContext+0xac>)
 8016b98:	2201      	movs	r2, #1
 8016b9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016b9c:	e041      	b.n	8016c22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8016b9e:	4b25      	ldr	r3, [pc, #148]	; (8016c34 <vTaskSwitchContext+0xac>)
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ba4:	4b24      	ldr	r3, [pc, #144]	; (8016c38 <vTaskSwitchContext+0xb0>)
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	60fb      	str	r3, [r7, #12]
 8016baa:	e010      	b.n	8016bce <vTaskSwitchContext+0x46>
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d10a      	bne.n	8016bc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8016bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bb6:	f383 8811 	msr	BASEPRI, r3
 8016bba:	f3bf 8f6f 	isb	sy
 8016bbe:	f3bf 8f4f 	dsb	sy
 8016bc2:	607b      	str	r3, [r7, #4]
}
 8016bc4:	bf00      	nop
 8016bc6:	e7fe      	b.n	8016bc6 <vTaskSwitchContext+0x3e>
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	3b01      	subs	r3, #1
 8016bcc:	60fb      	str	r3, [r7, #12]
 8016bce:	491b      	ldr	r1, [pc, #108]	; (8016c3c <vTaskSwitchContext+0xb4>)
 8016bd0:	68fa      	ldr	r2, [r7, #12]
 8016bd2:	4613      	mov	r3, r2
 8016bd4:	009b      	lsls	r3, r3, #2
 8016bd6:	4413      	add	r3, r2
 8016bd8:	009b      	lsls	r3, r3, #2
 8016bda:	440b      	add	r3, r1
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d0e4      	beq.n	8016bac <vTaskSwitchContext+0x24>
 8016be2:	68fa      	ldr	r2, [r7, #12]
 8016be4:	4613      	mov	r3, r2
 8016be6:	009b      	lsls	r3, r3, #2
 8016be8:	4413      	add	r3, r2
 8016bea:	009b      	lsls	r3, r3, #2
 8016bec:	4a13      	ldr	r2, [pc, #76]	; (8016c3c <vTaskSwitchContext+0xb4>)
 8016bee:	4413      	add	r3, r2
 8016bf0:	60bb      	str	r3, [r7, #8]
 8016bf2:	68bb      	ldr	r3, [r7, #8]
 8016bf4:	685b      	ldr	r3, [r3, #4]
 8016bf6:	685a      	ldr	r2, [r3, #4]
 8016bf8:	68bb      	ldr	r3, [r7, #8]
 8016bfa:	605a      	str	r2, [r3, #4]
 8016bfc:	68bb      	ldr	r3, [r7, #8]
 8016bfe:	685a      	ldr	r2, [r3, #4]
 8016c00:	68bb      	ldr	r3, [r7, #8]
 8016c02:	3308      	adds	r3, #8
 8016c04:	429a      	cmp	r2, r3
 8016c06:	d104      	bne.n	8016c12 <vTaskSwitchContext+0x8a>
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	685b      	ldr	r3, [r3, #4]
 8016c0c:	685a      	ldr	r2, [r3, #4]
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	605a      	str	r2, [r3, #4]
 8016c12:	68bb      	ldr	r3, [r7, #8]
 8016c14:	685b      	ldr	r3, [r3, #4]
 8016c16:	68db      	ldr	r3, [r3, #12]
 8016c18:	4a09      	ldr	r2, [pc, #36]	; (8016c40 <vTaskSwitchContext+0xb8>)
 8016c1a:	6013      	str	r3, [r2, #0]
 8016c1c:	4a06      	ldr	r2, [pc, #24]	; (8016c38 <vTaskSwitchContext+0xb0>)
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	6013      	str	r3, [r2, #0]
}
 8016c22:	bf00      	nop
 8016c24:	3714      	adds	r7, #20
 8016c26:	46bd      	mov	sp, r7
 8016c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2c:	4770      	bx	lr
 8016c2e:	bf00      	nop
 8016c30:	2400c780 	.word	0x2400c780
 8016c34:	2400c76c 	.word	0x2400c76c
 8016c38:	2400c760 	.word	0x2400c760
 8016c3c:	2400c288 	.word	0x2400c288
 8016c40:	2400c284 	.word	0x2400c284

08016c44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b084      	sub	sp, #16
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	6078      	str	r0, [r7, #4]
 8016c4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d10a      	bne.n	8016c6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c58:	f383 8811 	msr	BASEPRI, r3
 8016c5c:	f3bf 8f6f 	isb	sy
 8016c60:	f3bf 8f4f 	dsb	sy
 8016c64:	60fb      	str	r3, [r7, #12]
}
 8016c66:	bf00      	nop
 8016c68:	e7fe      	b.n	8016c68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016c6a:	4b07      	ldr	r3, [pc, #28]	; (8016c88 <vTaskPlaceOnEventList+0x44>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	3318      	adds	r3, #24
 8016c70:	4619      	mov	r1, r3
 8016c72:	6878      	ldr	r0, [r7, #4]
 8016c74:	f7fe f913 	bl	8014e9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016c78:	2101      	movs	r1, #1
 8016c7a:	6838      	ldr	r0, [r7, #0]
 8016c7c:	f000 fb7a 	bl	8017374 <prvAddCurrentTaskToDelayedList>
}
 8016c80:	bf00      	nop
 8016c82:	3710      	adds	r7, #16
 8016c84:	46bd      	mov	sp, r7
 8016c86:	bd80      	pop	{r7, pc}
 8016c88:	2400c284 	.word	0x2400c284

08016c8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b086      	sub	sp, #24
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	60f8      	str	r0, [r7, #12]
 8016c94:	60b9      	str	r1, [r7, #8]
 8016c96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d10a      	bne.n	8016cb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ca2:	f383 8811 	msr	BASEPRI, r3
 8016ca6:	f3bf 8f6f 	isb	sy
 8016caa:	f3bf 8f4f 	dsb	sy
 8016cae:	617b      	str	r3, [r7, #20]
}
 8016cb0:	bf00      	nop
 8016cb2:	e7fe      	b.n	8016cb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016cb4:	4b0a      	ldr	r3, [pc, #40]	; (8016ce0 <vTaskPlaceOnEventListRestricted+0x54>)
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	3318      	adds	r3, #24
 8016cba:	4619      	mov	r1, r3
 8016cbc:	68f8      	ldr	r0, [r7, #12]
 8016cbe:	f7fe f8ca 	bl	8014e56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d002      	beq.n	8016cce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8016ccc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016cce:	6879      	ldr	r1, [r7, #4]
 8016cd0:	68b8      	ldr	r0, [r7, #8]
 8016cd2:	f000 fb4f 	bl	8017374 <prvAddCurrentTaskToDelayedList>
	}
 8016cd6:	bf00      	nop
 8016cd8:	3718      	adds	r7, #24
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bd80      	pop	{r7, pc}
 8016cde:	bf00      	nop
 8016ce0:	2400c284 	.word	0x2400c284

08016ce4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b086      	sub	sp, #24
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	68db      	ldr	r3, [r3, #12]
 8016cf0:	68db      	ldr	r3, [r3, #12]
 8016cf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016cf4:	693b      	ldr	r3, [r7, #16]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d10a      	bne.n	8016d10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cfe:	f383 8811 	msr	BASEPRI, r3
 8016d02:	f3bf 8f6f 	isb	sy
 8016d06:	f3bf 8f4f 	dsb	sy
 8016d0a:	60fb      	str	r3, [r7, #12]
}
 8016d0c:	bf00      	nop
 8016d0e:	e7fe      	b.n	8016d0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016d10:	693b      	ldr	r3, [r7, #16]
 8016d12:	3318      	adds	r3, #24
 8016d14:	4618      	mov	r0, r3
 8016d16:	f7fe f8fb 	bl	8014f10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d1a:	4b1e      	ldr	r3, [pc, #120]	; (8016d94 <xTaskRemoveFromEventList+0xb0>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d11d      	bne.n	8016d5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016d22:	693b      	ldr	r3, [r7, #16]
 8016d24:	3304      	adds	r3, #4
 8016d26:	4618      	mov	r0, r3
 8016d28:	f7fe f8f2 	bl	8014f10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016d2c:	693b      	ldr	r3, [r7, #16]
 8016d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d30:	4b19      	ldr	r3, [pc, #100]	; (8016d98 <xTaskRemoveFromEventList+0xb4>)
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	429a      	cmp	r2, r3
 8016d36:	d903      	bls.n	8016d40 <xTaskRemoveFromEventList+0x5c>
 8016d38:	693b      	ldr	r3, [r7, #16]
 8016d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d3c:	4a16      	ldr	r2, [pc, #88]	; (8016d98 <xTaskRemoveFromEventList+0xb4>)
 8016d3e:	6013      	str	r3, [r2, #0]
 8016d40:	693b      	ldr	r3, [r7, #16]
 8016d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d44:	4613      	mov	r3, r2
 8016d46:	009b      	lsls	r3, r3, #2
 8016d48:	4413      	add	r3, r2
 8016d4a:	009b      	lsls	r3, r3, #2
 8016d4c:	4a13      	ldr	r2, [pc, #76]	; (8016d9c <xTaskRemoveFromEventList+0xb8>)
 8016d4e:	441a      	add	r2, r3
 8016d50:	693b      	ldr	r3, [r7, #16]
 8016d52:	3304      	adds	r3, #4
 8016d54:	4619      	mov	r1, r3
 8016d56:	4610      	mov	r0, r2
 8016d58:	f7fe f87d 	bl	8014e56 <vListInsertEnd>
 8016d5c:	e005      	b.n	8016d6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016d5e:	693b      	ldr	r3, [r7, #16]
 8016d60:	3318      	adds	r3, #24
 8016d62:	4619      	mov	r1, r3
 8016d64:	480e      	ldr	r0, [pc, #56]	; (8016da0 <xTaskRemoveFromEventList+0xbc>)
 8016d66:	f7fe f876 	bl	8014e56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016d6a:	693b      	ldr	r3, [r7, #16]
 8016d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d6e:	4b0d      	ldr	r3, [pc, #52]	; (8016da4 <xTaskRemoveFromEventList+0xc0>)
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d74:	429a      	cmp	r2, r3
 8016d76:	d905      	bls.n	8016d84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016d78:	2301      	movs	r3, #1
 8016d7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016d7c:	4b0a      	ldr	r3, [pc, #40]	; (8016da8 <xTaskRemoveFromEventList+0xc4>)
 8016d7e:	2201      	movs	r2, #1
 8016d80:	601a      	str	r2, [r3, #0]
 8016d82:	e001      	b.n	8016d88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8016d84:	2300      	movs	r3, #0
 8016d86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016d88:	697b      	ldr	r3, [r7, #20]
}
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	3718      	adds	r7, #24
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}
 8016d92:	bf00      	nop
 8016d94:	2400c780 	.word	0x2400c780
 8016d98:	2400c760 	.word	0x2400c760
 8016d9c:	2400c288 	.word	0x2400c288
 8016da0:	2400c718 	.word	0x2400c718
 8016da4:	2400c284 	.word	0x2400c284
 8016da8:	2400c76c 	.word	0x2400c76c

08016dac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016dac:	b480      	push	{r7}
 8016dae:	b083      	sub	sp, #12
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016db4:	4b06      	ldr	r3, [pc, #24]	; (8016dd0 <vTaskInternalSetTimeOutState+0x24>)
 8016db6:	681a      	ldr	r2, [r3, #0]
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016dbc:	4b05      	ldr	r3, [pc, #20]	; (8016dd4 <vTaskInternalSetTimeOutState+0x28>)
 8016dbe:	681a      	ldr	r2, [r3, #0]
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	605a      	str	r2, [r3, #4]
}
 8016dc4:	bf00      	nop
 8016dc6:	370c      	adds	r7, #12
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dce:	4770      	bx	lr
 8016dd0:	2400c770 	.word	0x2400c770
 8016dd4:	2400c75c 	.word	0x2400c75c

08016dd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b088      	sub	sp, #32
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
 8016de0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d10a      	bne.n	8016dfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dec:	f383 8811 	msr	BASEPRI, r3
 8016df0:	f3bf 8f6f 	isb	sy
 8016df4:	f3bf 8f4f 	dsb	sy
 8016df8:	613b      	str	r3, [r7, #16]
}
 8016dfa:	bf00      	nop
 8016dfc:	e7fe      	b.n	8016dfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016dfe:	683b      	ldr	r3, [r7, #0]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d10a      	bne.n	8016e1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e08:	f383 8811 	msr	BASEPRI, r3
 8016e0c:	f3bf 8f6f 	isb	sy
 8016e10:	f3bf 8f4f 	dsb	sy
 8016e14:	60fb      	str	r3, [r7, #12]
}
 8016e16:	bf00      	nop
 8016e18:	e7fe      	b.n	8016e18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8016e1a:	f7fe f9d3 	bl	80151c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016e1e:	4b1d      	ldr	r3, [pc, #116]	; (8016e94 <xTaskCheckForTimeOut+0xbc>)
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	685b      	ldr	r3, [r3, #4]
 8016e28:	69ba      	ldr	r2, [r7, #24]
 8016e2a:	1ad3      	subs	r3, r2, r3
 8016e2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e36:	d102      	bne.n	8016e3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	61fb      	str	r3, [r7, #28]
 8016e3c:	e023      	b.n	8016e86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	681a      	ldr	r2, [r3, #0]
 8016e42:	4b15      	ldr	r3, [pc, #84]	; (8016e98 <xTaskCheckForTimeOut+0xc0>)
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	429a      	cmp	r2, r3
 8016e48:	d007      	beq.n	8016e5a <xTaskCheckForTimeOut+0x82>
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	685b      	ldr	r3, [r3, #4]
 8016e4e:	69ba      	ldr	r2, [r7, #24]
 8016e50:	429a      	cmp	r2, r3
 8016e52:	d302      	bcc.n	8016e5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016e54:	2301      	movs	r3, #1
 8016e56:	61fb      	str	r3, [r7, #28]
 8016e58:	e015      	b.n	8016e86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	697a      	ldr	r2, [r7, #20]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	d20b      	bcs.n	8016e7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016e64:	683b      	ldr	r3, [r7, #0]
 8016e66:	681a      	ldr	r2, [r3, #0]
 8016e68:	697b      	ldr	r3, [r7, #20]
 8016e6a:	1ad2      	subs	r2, r2, r3
 8016e6c:	683b      	ldr	r3, [r7, #0]
 8016e6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016e70:	6878      	ldr	r0, [r7, #4]
 8016e72:	f7ff ff9b 	bl	8016dac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016e76:	2300      	movs	r3, #0
 8016e78:	61fb      	str	r3, [r7, #28]
 8016e7a:	e004      	b.n	8016e86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	2200      	movs	r2, #0
 8016e80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016e82:	2301      	movs	r3, #1
 8016e84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016e86:	f7fe f9cd 	bl	8015224 <vPortExitCritical>

	return xReturn;
 8016e8a:	69fb      	ldr	r3, [r7, #28]
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	3720      	adds	r7, #32
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}
 8016e94:	2400c75c 	.word	0x2400c75c
 8016e98:	2400c770 	.word	0x2400c770

08016e9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016e9c:	b480      	push	{r7}
 8016e9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016ea0:	4b03      	ldr	r3, [pc, #12]	; (8016eb0 <vTaskMissedYield+0x14>)
 8016ea2:	2201      	movs	r2, #1
 8016ea4:	601a      	str	r2, [r3, #0]
}
 8016ea6:	bf00      	nop
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eae:	4770      	bx	lr
 8016eb0:	2400c76c 	.word	0x2400c76c

08016eb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b082      	sub	sp, #8
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016ebc:	f000 f852 	bl	8016f64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016ec0:	4b06      	ldr	r3, [pc, #24]	; (8016edc <prvIdleTask+0x28>)
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	2b01      	cmp	r3, #1
 8016ec6:	d9f9      	bls.n	8016ebc <prvIdleTask+0x8>
			{
				taskYIELD();
 8016ec8:	4b05      	ldr	r3, [pc, #20]	; (8016ee0 <prvIdleTask+0x2c>)
 8016eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ece:	601a      	str	r2, [r3, #0]
 8016ed0:	f3bf 8f4f 	dsb	sy
 8016ed4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016ed8:	e7f0      	b.n	8016ebc <prvIdleTask+0x8>
 8016eda:	bf00      	nop
 8016edc:	2400c288 	.word	0x2400c288
 8016ee0:	e000ed04 	.word	0xe000ed04

08016ee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b082      	sub	sp, #8
 8016ee8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016eea:	2300      	movs	r3, #0
 8016eec:	607b      	str	r3, [r7, #4]
 8016eee:	e00c      	b.n	8016f0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016ef0:	687a      	ldr	r2, [r7, #4]
 8016ef2:	4613      	mov	r3, r2
 8016ef4:	009b      	lsls	r3, r3, #2
 8016ef6:	4413      	add	r3, r2
 8016ef8:	009b      	lsls	r3, r3, #2
 8016efa:	4a12      	ldr	r2, [pc, #72]	; (8016f44 <prvInitialiseTaskLists+0x60>)
 8016efc:	4413      	add	r3, r2
 8016efe:	4618      	mov	r0, r3
 8016f00:	f7fd ff7c 	bl	8014dfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	3301      	adds	r3, #1
 8016f08:	607b      	str	r3, [r7, #4]
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	2b37      	cmp	r3, #55	; 0x37
 8016f0e:	d9ef      	bls.n	8016ef0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016f10:	480d      	ldr	r0, [pc, #52]	; (8016f48 <prvInitialiseTaskLists+0x64>)
 8016f12:	f7fd ff73 	bl	8014dfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016f16:	480d      	ldr	r0, [pc, #52]	; (8016f4c <prvInitialiseTaskLists+0x68>)
 8016f18:	f7fd ff70 	bl	8014dfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016f1c:	480c      	ldr	r0, [pc, #48]	; (8016f50 <prvInitialiseTaskLists+0x6c>)
 8016f1e:	f7fd ff6d 	bl	8014dfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016f22:	480c      	ldr	r0, [pc, #48]	; (8016f54 <prvInitialiseTaskLists+0x70>)
 8016f24:	f7fd ff6a 	bl	8014dfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016f28:	480b      	ldr	r0, [pc, #44]	; (8016f58 <prvInitialiseTaskLists+0x74>)
 8016f2a:	f7fd ff67 	bl	8014dfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016f2e:	4b0b      	ldr	r3, [pc, #44]	; (8016f5c <prvInitialiseTaskLists+0x78>)
 8016f30:	4a05      	ldr	r2, [pc, #20]	; (8016f48 <prvInitialiseTaskLists+0x64>)
 8016f32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016f34:	4b0a      	ldr	r3, [pc, #40]	; (8016f60 <prvInitialiseTaskLists+0x7c>)
 8016f36:	4a05      	ldr	r2, [pc, #20]	; (8016f4c <prvInitialiseTaskLists+0x68>)
 8016f38:	601a      	str	r2, [r3, #0]
}
 8016f3a:	bf00      	nop
 8016f3c:	3708      	adds	r7, #8
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	bd80      	pop	{r7, pc}
 8016f42:	bf00      	nop
 8016f44:	2400c288 	.word	0x2400c288
 8016f48:	2400c6e8 	.word	0x2400c6e8
 8016f4c:	2400c6fc 	.word	0x2400c6fc
 8016f50:	2400c718 	.word	0x2400c718
 8016f54:	2400c72c 	.word	0x2400c72c
 8016f58:	2400c744 	.word	0x2400c744
 8016f5c:	2400c710 	.word	0x2400c710
 8016f60:	2400c714 	.word	0x2400c714

08016f64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b082      	sub	sp, #8
 8016f68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016f6a:	e019      	b.n	8016fa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016f6c:	f7fe f92a 	bl	80151c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f70:	4b10      	ldr	r3, [pc, #64]	; (8016fb4 <prvCheckTasksWaitingTermination+0x50>)
 8016f72:	68db      	ldr	r3, [r3, #12]
 8016f74:	68db      	ldr	r3, [r3, #12]
 8016f76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	3304      	adds	r3, #4
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	f7fd ffc7 	bl	8014f10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016f82:	4b0d      	ldr	r3, [pc, #52]	; (8016fb8 <prvCheckTasksWaitingTermination+0x54>)
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	3b01      	subs	r3, #1
 8016f88:	4a0b      	ldr	r2, [pc, #44]	; (8016fb8 <prvCheckTasksWaitingTermination+0x54>)
 8016f8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016f8c:	4b0b      	ldr	r3, [pc, #44]	; (8016fbc <prvCheckTasksWaitingTermination+0x58>)
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	3b01      	subs	r3, #1
 8016f92:	4a0a      	ldr	r2, [pc, #40]	; (8016fbc <prvCheckTasksWaitingTermination+0x58>)
 8016f94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016f96:	f7fe f945 	bl	8015224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016f9a:	6878      	ldr	r0, [r7, #4]
 8016f9c:	f000 f810 	bl	8016fc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016fa0:	4b06      	ldr	r3, [pc, #24]	; (8016fbc <prvCheckTasksWaitingTermination+0x58>)
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d1e1      	bne.n	8016f6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016fa8:	bf00      	nop
 8016faa:	bf00      	nop
 8016fac:	3708      	adds	r7, #8
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	bd80      	pop	{r7, pc}
 8016fb2:	bf00      	nop
 8016fb4:	2400c72c 	.word	0x2400c72c
 8016fb8:	2400c758 	.word	0x2400c758
 8016fbc:	2400c740 	.word	0x2400c740

08016fc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b084      	sub	sp, #16
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d108      	bne.n	8016fe4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f7fd fdf2 	bl	8014bc0 <vPortFree>
				vPortFree( pxTCB );
 8016fdc:	6878      	ldr	r0, [r7, #4]
 8016fde:	f7fd fdef 	bl	8014bc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016fe2:	e018      	b.n	8017016 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016fea:	2b01      	cmp	r3, #1
 8016fec:	d103      	bne.n	8016ff6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016fee:	6878      	ldr	r0, [r7, #4]
 8016ff0:	f7fd fde6 	bl	8014bc0 <vPortFree>
	}
 8016ff4:	e00f      	b.n	8017016 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016ffc:	2b02      	cmp	r3, #2
 8016ffe:	d00a      	beq.n	8017016 <prvDeleteTCB+0x56>
	__asm volatile
 8017000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017004:	f383 8811 	msr	BASEPRI, r3
 8017008:	f3bf 8f6f 	isb	sy
 801700c:	f3bf 8f4f 	dsb	sy
 8017010:	60fb      	str	r3, [r7, #12]
}
 8017012:	bf00      	nop
 8017014:	e7fe      	b.n	8017014 <prvDeleteTCB+0x54>
	}
 8017016:	bf00      	nop
 8017018:	3710      	adds	r7, #16
 801701a:	46bd      	mov	sp, r7
 801701c:	bd80      	pop	{r7, pc}
	...

08017020 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017020:	b480      	push	{r7}
 8017022:	b083      	sub	sp, #12
 8017024:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017026:	4b0c      	ldr	r3, [pc, #48]	; (8017058 <prvResetNextTaskUnblockTime+0x38>)
 8017028:	681b      	ldr	r3, [r3, #0]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d104      	bne.n	801703a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017030:	4b0a      	ldr	r3, [pc, #40]	; (801705c <prvResetNextTaskUnblockTime+0x3c>)
 8017032:	f04f 32ff 	mov.w	r2, #4294967295
 8017036:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017038:	e008      	b.n	801704c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801703a:	4b07      	ldr	r3, [pc, #28]	; (8017058 <prvResetNextTaskUnblockTime+0x38>)
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	68db      	ldr	r3, [r3, #12]
 8017040:	68db      	ldr	r3, [r3, #12]
 8017042:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	685b      	ldr	r3, [r3, #4]
 8017048:	4a04      	ldr	r2, [pc, #16]	; (801705c <prvResetNextTaskUnblockTime+0x3c>)
 801704a:	6013      	str	r3, [r2, #0]
}
 801704c:	bf00      	nop
 801704e:	370c      	adds	r7, #12
 8017050:	46bd      	mov	sp, r7
 8017052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017056:	4770      	bx	lr
 8017058:	2400c710 	.word	0x2400c710
 801705c:	2400c778 	.word	0x2400c778

08017060 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017060:	b480      	push	{r7}
 8017062:	b083      	sub	sp, #12
 8017064:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017066:	4b0b      	ldr	r3, [pc, #44]	; (8017094 <xTaskGetSchedulerState+0x34>)
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d102      	bne.n	8017074 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801706e:	2301      	movs	r3, #1
 8017070:	607b      	str	r3, [r7, #4]
 8017072:	e008      	b.n	8017086 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017074:	4b08      	ldr	r3, [pc, #32]	; (8017098 <xTaskGetSchedulerState+0x38>)
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d102      	bne.n	8017082 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801707c:	2302      	movs	r3, #2
 801707e:	607b      	str	r3, [r7, #4]
 8017080:	e001      	b.n	8017086 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017082:	2300      	movs	r3, #0
 8017084:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017086:	687b      	ldr	r3, [r7, #4]
	}
 8017088:	4618      	mov	r0, r3
 801708a:	370c      	adds	r7, #12
 801708c:	46bd      	mov	sp, r7
 801708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017092:	4770      	bx	lr
 8017094:	2400c764 	.word	0x2400c764
 8017098:	2400c780 	.word	0x2400c780

0801709c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801709c:	b580      	push	{r7, lr}
 801709e:	b084      	sub	sp, #16
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80170a8:	2300      	movs	r3, #0
 80170aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d051      	beq.n	8017156 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80170b2:	68bb      	ldr	r3, [r7, #8]
 80170b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170b6:	4b2a      	ldr	r3, [pc, #168]	; (8017160 <xTaskPriorityInherit+0xc4>)
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170bc:	429a      	cmp	r2, r3
 80170be:	d241      	bcs.n	8017144 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80170c0:	68bb      	ldr	r3, [r7, #8]
 80170c2:	699b      	ldr	r3, [r3, #24]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	db06      	blt.n	80170d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80170c8:	4b25      	ldr	r3, [pc, #148]	; (8017160 <xTaskPriorityInherit+0xc4>)
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80170d2:	68bb      	ldr	r3, [r7, #8]
 80170d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	6959      	ldr	r1, [r3, #20]
 80170da:	68bb      	ldr	r3, [r7, #8]
 80170dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170de:	4613      	mov	r3, r2
 80170e0:	009b      	lsls	r3, r3, #2
 80170e2:	4413      	add	r3, r2
 80170e4:	009b      	lsls	r3, r3, #2
 80170e6:	4a1f      	ldr	r2, [pc, #124]	; (8017164 <xTaskPriorityInherit+0xc8>)
 80170e8:	4413      	add	r3, r2
 80170ea:	4299      	cmp	r1, r3
 80170ec:	d122      	bne.n	8017134 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	3304      	adds	r3, #4
 80170f2:	4618      	mov	r0, r3
 80170f4:	f7fd ff0c 	bl	8014f10 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80170f8:	4b19      	ldr	r3, [pc, #100]	; (8017160 <xTaskPriorityInherit+0xc4>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170fe:	68bb      	ldr	r3, [r7, #8]
 8017100:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017102:	68bb      	ldr	r3, [r7, #8]
 8017104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017106:	4b18      	ldr	r3, [pc, #96]	; (8017168 <xTaskPriorityInherit+0xcc>)
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	429a      	cmp	r2, r3
 801710c:	d903      	bls.n	8017116 <xTaskPriorityInherit+0x7a>
 801710e:	68bb      	ldr	r3, [r7, #8]
 8017110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017112:	4a15      	ldr	r2, [pc, #84]	; (8017168 <xTaskPriorityInherit+0xcc>)
 8017114:	6013      	str	r3, [r2, #0]
 8017116:	68bb      	ldr	r3, [r7, #8]
 8017118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801711a:	4613      	mov	r3, r2
 801711c:	009b      	lsls	r3, r3, #2
 801711e:	4413      	add	r3, r2
 8017120:	009b      	lsls	r3, r3, #2
 8017122:	4a10      	ldr	r2, [pc, #64]	; (8017164 <xTaskPriorityInherit+0xc8>)
 8017124:	441a      	add	r2, r3
 8017126:	68bb      	ldr	r3, [r7, #8]
 8017128:	3304      	adds	r3, #4
 801712a:	4619      	mov	r1, r3
 801712c:	4610      	mov	r0, r2
 801712e:	f7fd fe92 	bl	8014e56 <vListInsertEnd>
 8017132:	e004      	b.n	801713e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017134:	4b0a      	ldr	r3, [pc, #40]	; (8017160 <xTaskPriorityInherit+0xc4>)
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801713a:	68bb      	ldr	r3, [r7, #8]
 801713c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801713e:	2301      	movs	r3, #1
 8017140:	60fb      	str	r3, [r7, #12]
 8017142:	e008      	b.n	8017156 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017144:	68bb      	ldr	r3, [r7, #8]
 8017146:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017148:	4b05      	ldr	r3, [pc, #20]	; (8017160 <xTaskPriorityInherit+0xc4>)
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801714e:	429a      	cmp	r2, r3
 8017150:	d201      	bcs.n	8017156 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017152:	2301      	movs	r3, #1
 8017154:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017156:	68fb      	ldr	r3, [r7, #12]
	}
 8017158:	4618      	mov	r0, r3
 801715a:	3710      	adds	r7, #16
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}
 8017160:	2400c284 	.word	0x2400c284
 8017164:	2400c288 	.word	0x2400c288
 8017168:	2400c760 	.word	0x2400c760

0801716c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801716c:	b580      	push	{r7, lr}
 801716e:	b086      	sub	sp, #24
 8017170:	af00      	add	r7, sp, #0
 8017172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017178:	2300      	movs	r3, #0
 801717a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d056      	beq.n	8017230 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017182:	4b2e      	ldr	r3, [pc, #184]	; (801723c <xTaskPriorityDisinherit+0xd0>)
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	693a      	ldr	r2, [r7, #16]
 8017188:	429a      	cmp	r2, r3
 801718a:	d00a      	beq.n	80171a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017190:	f383 8811 	msr	BASEPRI, r3
 8017194:	f3bf 8f6f 	isb	sy
 8017198:	f3bf 8f4f 	dsb	sy
 801719c:	60fb      	str	r3, [r7, #12]
}
 801719e:	bf00      	nop
 80171a0:	e7fe      	b.n	80171a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80171a2:	693b      	ldr	r3, [r7, #16]
 80171a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d10a      	bne.n	80171c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80171aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171ae:	f383 8811 	msr	BASEPRI, r3
 80171b2:	f3bf 8f6f 	isb	sy
 80171b6:	f3bf 8f4f 	dsb	sy
 80171ba:	60bb      	str	r3, [r7, #8]
}
 80171bc:	bf00      	nop
 80171be:	e7fe      	b.n	80171be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80171c0:	693b      	ldr	r3, [r7, #16]
 80171c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171c4:	1e5a      	subs	r2, r3, #1
 80171c6:	693b      	ldr	r3, [r7, #16]
 80171c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80171ca:	693b      	ldr	r3, [r7, #16]
 80171cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171ce:	693b      	ldr	r3, [r7, #16]
 80171d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171d2:	429a      	cmp	r2, r3
 80171d4:	d02c      	beq.n	8017230 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80171d6:	693b      	ldr	r3, [r7, #16]
 80171d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d128      	bne.n	8017230 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	3304      	adds	r3, #4
 80171e2:	4618      	mov	r0, r3
 80171e4:	f7fd fe94 	bl	8014f10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80171e8:	693b      	ldr	r3, [r7, #16]
 80171ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80171ec:	693b      	ldr	r3, [r7, #16]
 80171ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80171f0:	693b      	ldr	r3, [r7, #16]
 80171f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80171f8:	693b      	ldr	r3, [r7, #16]
 80171fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80171fc:	693b      	ldr	r3, [r7, #16]
 80171fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017200:	4b0f      	ldr	r3, [pc, #60]	; (8017240 <xTaskPriorityDisinherit+0xd4>)
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	429a      	cmp	r2, r3
 8017206:	d903      	bls.n	8017210 <xTaskPriorityDisinherit+0xa4>
 8017208:	693b      	ldr	r3, [r7, #16]
 801720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801720c:	4a0c      	ldr	r2, [pc, #48]	; (8017240 <xTaskPriorityDisinherit+0xd4>)
 801720e:	6013      	str	r3, [r2, #0]
 8017210:	693b      	ldr	r3, [r7, #16]
 8017212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017214:	4613      	mov	r3, r2
 8017216:	009b      	lsls	r3, r3, #2
 8017218:	4413      	add	r3, r2
 801721a:	009b      	lsls	r3, r3, #2
 801721c:	4a09      	ldr	r2, [pc, #36]	; (8017244 <xTaskPriorityDisinherit+0xd8>)
 801721e:	441a      	add	r2, r3
 8017220:	693b      	ldr	r3, [r7, #16]
 8017222:	3304      	adds	r3, #4
 8017224:	4619      	mov	r1, r3
 8017226:	4610      	mov	r0, r2
 8017228:	f7fd fe15 	bl	8014e56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801722c:	2301      	movs	r3, #1
 801722e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017230:	697b      	ldr	r3, [r7, #20]
	}
 8017232:	4618      	mov	r0, r3
 8017234:	3718      	adds	r7, #24
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}
 801723a:	bf00      	nop
 801723c:	2400c284 	.word	0x2400c284
 8017240:	2400c760 	.word	0x2400c760
 8017244:	2400c288 	.word	0x2400c288

08017248 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017248:	b580      	push	{r7, lr}
 801724a:	b088      	sub	sp, #32
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
 8017250:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017256:	2301      	movs	r3, #1
 8017258:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d06a      	beq.n	8017336 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017260:	69bb      	ldr	r3, [r7, #24]
 8017262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017264:	2b00      	cmp	r3, #0
 8017266:	d10a      	bne.n	801727e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801726c:	f383 8811 	msr	BASEPRI, r3
 8017270:	f3bf 8f6f 	isb	sy
 8017274:	f3bf 8f4f 	dsb	sy
 8017278:	60fb      	str	r3, [r7, #12]
}
 801727a:	bf00      	nop
 801727c:	e7fe      	b.n	801727c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801727e:	69bb      	ldr	r3, [r7, #24]
 8017280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017282:	683a      	ldr	r2, [r7, #0]
 8017284:	429a      	cmp	r2, r3
 8017286:	d902      	bls.n	801728e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017288:	683b      	ldr	r3, [r7, #0]
 801728a:	61fb      	str	r3, [r7, #28]
 801728c:	e002      	b.n	8017294 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801728e:	69bb      	ldr	r3, [r7, #24]
 8017290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017292:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017294:	69bb      	ldr	r3, [r7, #24]
 8017296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017298:	69fa      	ldr	r2, [r7, #28]
 801729a:	429a      	cmp	r2, r3
 801729c:	d04b      	beq.n	8017336 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801729e:	69bb      	ldr	r3, [r7, #24]
 80172a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80172a2:	697a      	ldr	r2, [r7, #20]
 80172a4:	429a      	cmp	r2, r3
 80172a6:	d146      	bne.n	8017336 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80172a8:	4b25      	ldr	r3, [pc, #148]	; (8017340 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	69ba      	ldr	r2, [r7, #24]
 80172ae:	429a      	cmp	r2, r3
 80172b0:	d10a      	bne.n	80172c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80172b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172b6:	f383 8811 	msr	BASEPRI, r3
 80172ba:	f3bf 8f6f 	isb	sy
 80172be:	f3bf 8f4f 	dsb	sy
 80172c2:	60bb      	str	r3, [r7, #8]
}
 80172c4:	bf00      	nop
 80172c6:	e7fe      	b.n	80172c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80172c8:	69bb      	ldr	r3, [r7, #24]
 80172ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80172ce:	69bb      	ldr	r3, [r7, #24]
 80172d0:	69fa      	ldr	r2, [r7, #28]
 80172d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80172d4:	69bb      	ldr	r3, [r7, #24]
 80172d6:	699b      	ldr	r3, [r3, #24]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	db04      	blt.n	80172e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80172dc:	69fb      	ldr	r3, [r7, #28]
 80172de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80172e2:	69bb      	ldr	r3, [r7, #24]
 80172e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80172e6:	69bb      	ldr	r3, [r7, #24]
 80172e8:	6959      	ldr	r1, [r3, #20]
 80172ea:	693a      	ldr	r2, [r7, #16]
 80172ec:	4613      	mov	r3, r2
 80172ee:	009b      	lsls	r3, r3, #2
 80172f0:	4413      	add	r3, r2
 80172f2:	009b      	lsls	r3, r3, #2
 80172f4:	4a13      	ldr	r2, [pc, #76]	; (8017344 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80172f6:	4413      	add	r3, r2
 80172f8:	4299      	cmp	r1, r3
 80172fa:	d11c      	bne.n	8017336 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80172fc:	69bb      	ldr	r3, [r7, #24]
 80172fe:	3304      	adds	r3, #4
 8017300:	4618      	mov	r0, r3
 8017302:	f7fd fe05 	bl	8014f10 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017306:	69bb      	ldr	r3, [r7, #24]
 8017308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801730a:	4b0f      	ldr	r3, [pc, #60]	; (8017348 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	429a      	cmp	r2, r3
 8017310:	d903      	bls.n	801731a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8017312:	69bb      	ldr	r3, [r7, #24]
 8017314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017316:	4a0c      	ldr	r2, [pc, #48]	; (8017348 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017318:	6013      	str	r3, [r2, #0]
 801731a:	69bb      	ldr	r3, [r7, #24]
 801731c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801731e:	4613      	mov	r3, r2
 8017320:	009b      	lsls	r3, r3, #2
 8017322:	4413      	add	r3, r2
 8017324:	009b      	lsls	r3, r3, #2
 8017326:	4a07      	ldr	r2, [pc, #28]	; (8017344 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017328:	441a      	add	r2, r3
 801732a:	69bb      	ldr	r3, [r7, #24]
 801732c:	3304      	adds	r3, #4
 801732e:	4619      	mov	r1, r3
 8017330:	4610      	mov	r0, r2
 8017332:	f7fd fd90 	bl	8014e56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017336:	bf00      	nop
 8017338:	3720      	adds	r7, #32
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}
 801733e:	bf00      	nop
 8017340:	2400c284 	.word	0x2400c284
 8017344:	2400c288 	.word	0x2400c288
 8017348:	2400c760 	.word	0x2400c760

0801734c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801734c:	b480      	push	{r7}
 801734e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017350:	4b07      	ldr	r3, [pc, #28]	; (8017370 <pvTaskIncrementMutexHeldCount+0x24>)
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d004      	beq.n	8017362 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017358:	4b05      	ldr	r3, [pc, #20]	; (8017370 <pvTaskIncrementMutexHeldCount+0x24>)
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801735e:	3201      	adds	r2, #1
 8017360:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8017362:	4b03      	ldr	r3, [pc, #12]	; (8017370 <pvTaskIncrementMutexHeldCount+0x24>)
 8017364:	681b      	ldr	r3, [r3, #0]
	}
 8017366:	4618      	mov	r0, r3
 8017368:	46bd      	mov	sp, r7
 801736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801736e:	4770      	bx	lr
 8017370:	2400c284 	.word	0x2400c284

08017374 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b084      	sub	sp, #16
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
 801737c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801737e:	4b21      	ldr	r3, [pc, #132]	; (8017404 <prvAddCurrentTaskToDelayedList+0x90>)
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017384:	4b20      	ldr	r3, [pc, #128]	; (8017408 <prvAddCurrentTaskToDelayedList+0x94>)
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	3304      	adds	r3, #4
 801738a:	4618      	mov	r0, r3
 801738c:	f7fd fdc0 	bl	8014f10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017396:	d10a      	bne.n	80173ae <prvAddCurrentTaskToDelayedList+0x3a>
 8017398:	683b      	ldr	r3, [r7, #0]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d007      	beq.n	80173ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801739e:	4b1a      	ldr	r3, [pc, #104]	; (8017408 <prvAddCurrentTaskToDelayedList+0x94>)
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	3304      	adds	r3, #4
 80173a4:	4619      	mov	r1, r3
 80173a6:	4819      	ldr	r0, [pc, #100]	; (801740c <prvAddCurrentTaskToDelayedList+0x98>)
 80173a8:	f7fd fd55 	bl	8014e56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80173ac:	e026      	b.n	80173fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80173ae:	68fa      	ldr	r2, [r7, #12]
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	4413      	add	r3, r2
 80173b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80173b6:	4b14      	ldr	r3, [pc, #80]	; (8017408 <prvAddCurrentTaskToDelayedList+0x94>)
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	68ba      	ldr	r2, [r7, #8]
 80173bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80173be:	68ba      	ldr	r2, [r7, #8]
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	429a      	cmp	r2, r3
 80173c4:	d209      	bcs.n	80173da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80173c6:	4b12      	ldr	r3, [pc, #72]	; (8017410 <prvAddCurrentTaskToDelayedList+0x9c>)
 80173c8:	681a      	ldr	r2, [r3, #0]
 80173ca:	4b0f      	ldr	r3, [pc, #60]	; (8017408 <prvAddCurrentTaskToDelayedList+0x94>)
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	3304      	adds	r3, #4
 80173d0:	4619      	mov	r1, r3
 80173d2:	4610      	mov	r0, r2
 80173d4:	f7fd fd63 	bl	8014e9e <vListInsert>
}
 80173d8:	e010      	b.n	80173fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80173da:	4b0e      	ldr	r3, [pc, #56]	; (8017414 <prvAddCurrentTaskToDelayedList+0xa0>)
 80173dc:	681a      	ldr	r2, [r3, #0]
 80173de:	4b0a      	ldr	r3, [pc, #40]	; (8017408 <prvAddCurrentTaskToDelayedList+0x94>)
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	3304      	adds	r3, #4
 80173e4:	4619      	mov	r1, r3
 80173e6:	4610      	mov	r0, r2
 80173e8:	f7fd fd59 	bl	8014e9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80173ec:	4b0a      	ldr	r3, [pc, #40]	; (8017418 <prvAddCurrentTaskToDelayedList+0xa4>)
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	68ba      	ldr	r2, [r7, #8]
 80173f2:	429a      	cmp	r2, r3
 80173f4:	d202      	bcs.n	80173fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80173f6:	4a08      	ldr	r2, [pc, #32]	; (8017418 <prvAddCurrentTaskToDelayedList+0xa4>)
 80173f8:	68bb      	ldr	r3, [r7, #8]
 80173fa:	6013      	str	r3, [r2, #0]
}
 80173fc:	bf00      	nop
 80173fe:	3710      	adds	r7, #16
 8017400:	46bd      	mov	sp, r7
 8017402:	bd80      	pop	{r7, pc}
 8017404:	2400c75c 	.word	0x2400c75c
 8017408:	2400c284 	.word	0x2400c284
 801740c:	2400c744 	.word	0x2400c744
 8017410:	2400c714 	.word	0x2400c714
 8017414:	2400c710 	.word	0x2400c710
 8017418:	2400c778 	.word	0x2400c778

0801741c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b08a      	sub	sp, #40	; 0x28
 8017420:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017422:	2300      	movs	r3, #0
 8017424:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017426:	f000 fb07 	bl	8017a38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801742a:	4b1c      	ldr	r3, [pc, #112]	; (801749c <xTimerCreateTimerTask+0x80>)
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d021      	beq.n	8017476 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017432:	2300      	movs	r3, #0
 8017434:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017436:	2300      	movs	r3, #0
 8017438:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801743a:	1d3a      	adds	r2, r7, #4
 801743c:	f107 0108 	add.w	r1, r7, #8
 8017440:	f107 030c 	add.w	r3, r7, #12
 8017444:	4618      	mov	r0, r3
 8017446:	f7fd fad5 	bl	80149f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801744a:	6879      	ldr	r1, [r7, #4]
 801744c:	68bb      	ldr	r3, [r7, #8]
 801744e:	68fa      	ldr	r2, [r7, #12]
 8017450:	9202      	str	r2, [sp, #8]
 8017452:	9301      	str	r3, [sp, #4]
 8017454:	2302      	movs	r3, #2
 8017456:	9300      	str	r3, [sp, #0]
 8017458:	2300      	movs	r3, #0
 801745a:	460a      	mov	r2, r1
 801745c:	4910      	ldr	r1, [pc, #64]	; (80174a0 <xTimerCreateTimerTask+0x84>)
 801745e:	4811      	ldr	r0, [pc, #68]	; (80174a4 <xTimerCreateTimerTask+0x88>)
 8017460:	f7fe ffe0 	bl	8016424 <xTaskCreateStatic>
 8017464:	4603      	mov	r3, r0
 8017466:	4a10      	ldr	r2, [pc, #64]	; (80174a8 <xTimerCreateTimerTask+0x8c>)
 8017468:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801746a:	4b0f      	ldr	r3, [pc, #60]	; (80174a8 <xTimerCreateTimerTask+0x8c>)
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d001      	beq.n	8017476 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017472:	2301      	movs	r3, #1
 8017474:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017476:	697b      	ldr	r3, [r7, #20]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d10a      	bne.n	8017492 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017480:	f383 8811 	msr	BASEPRI, r3
 8017484:	f3bf 8f6f 	isb	sy
 8017488:	f3bf 8f4f 	dsb	sy
 801748c:	613b      	str	r3, [r7, #16]
}
 801748e:	bf00      	nop
 8017490:	e7fe      	b.n	8017490 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017492:	697b      	ldr	r3, [r7, #20]
}
 8017494:	4618      	mov	r0, r3
 8017496:	3718      	adds	r7, #24
 8017498:	46bd      	mov	sp, r7
 801749a:	bd80      	pop	{r7, pc}
 801749c:	2400c7b4 	.word	0x2400c7b4
 80174a0:	0802d800 	.word	0x0802d800
 80174a4:	080175e1 	.word	0x080175e1
 80174a8:	2400c7b8 	.word	0x2400c7b8

080174ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b08a      	sub	sp, #40	; 0x28
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	60f8      	str	r0, [r7, #12]
 80174b4:	60b9      	str	r1, [r7, #8]
 80174b6:	607a      	str	r2, [r7, #4]
 80174b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80174ba:	2300      	movs	r3, #0
 80174bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d10a      	bne.n	80174da <xTimerGenericCommand+0x2e>
	__asm volatile
 80174c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174c8:	f383 8811 	msr	BASEPRI, r3
 80174cc:	f3bf 8f6f 	isb	sy
 80174d0:	f3bf 8f4f 	dsb	sy
 80174d4:	623b      	str	r3, [r7, #32]
}
 80174d6:	bf00      	nop
 80174d8:	e7fe      	b.n	80174d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80174da:	4b1a      	ldr	r3, [pc, #104]	; (8017544 <xTimerGenericCommand+0x98>)
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d02a      	beq.n	8017538 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80174e2:	68bb      	ldr	r3, [r7, #8]
 80174e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	2b05      	cmp	r3, #5
 80174f2:	dc18      	bgt.n	8017526 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80174f4:	f7ff fdb4 	bl	8017060 <xTaskGetSchedulerState>
 80174f8:	4603      	mov	r3, r0
 80174fa:	2b02      	cmp	r3, #2
 80174fc:	d109      	bne.n	8017512 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80174fe:	4b11      	ldr	r3, [pc, #68]	; (8017544 <xTimerGenericCommand+0x98>)
 8017500:	6818      	ldr	r0, [r3, #0]
 8017502:	f107 0110 	add.w	r1, r7, #16
 8017506:	2300      	movs	r3, #0
 8017508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801750a:	f7fe f925 	bl	8015758 <xQueueGenericSend>
 801750e:	6278      	str	r0, [r7, #36]	; 0x24
 8017510:	e012      	b.n	8017538 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017512:	4b0c      	ldr	r3, [pc, #48]	; (8017544 <xTimerGenericCommand+0x98>)
 8017514:	6818      	ldr	r0, [r3, #0]
 8017516:	f107 0110 	add.w	r1, r7, #16
 801751a:	2300      	movs	r3, #0
 801751c:	2200      	movs	r2, #0
 801751e:	f7fe f91b 	bl	8015758 <xQueueGenericSend>
 8017522:	6278      	str	r0, [r7, #36]	; 0x24
 8017524:	e008      	b.n	8017538 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017526:	4b07      	ldr	r3, [pc, #28]	; (8017544 <xTimerGenericCommand+0x98>)
 8017528:	6818      	ldr	r0, [r3, #0]
 801752a:	f107 0110 	add.w	r1, r7, #16
 801752e:	2300      	movs	r3, #0
 8017530:	683a      	ldr	r2, [r7, #0]
 8017532:	f7fe fa0f 	bl	8015954 <xQueueGenericSendFromISR>
 8017536:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801753a:	4618      	mov	r0, r3
 801753c:	3728      	adds	r7, #40	; 0x28
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}
 8017542:	bf00      	nop
 8017544:	2400c7b4 	.word	0x2400c7b4

08017548 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017548:	b580      	push	{r7, lr}
 801754a:	b088      	sub	sp, #32
 801754c:	af02      	add	r7, sp, #8
 801754e:	6078      	str	r0, [r7, #4]
 8017550:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017552:	4b22      	ldr	r3, [pc, #136]	; (80175dc <prvProcessExpiredTimer+0x94>)
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	68db      	ldr	r3, [r3, #12]
 8017558:	68db      	ldr	r3, [r3, #12]
 801755a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801755c:	697b      	ldr	r3, [r7, #20]
 801755e:	3304      	adds	r3, #4
 8017560:	4618      	mov	r0, r3
 8017562:	f7fd fcd5 	bl	8014f10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017566:	697b      	ldr	r3, [r7, #20]
 8017568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801756c:	f003 0304 	and.w	r3, r3, #4
 8017570:	2b00      	cmp	r3, #0
 8017572:	d022      	beq.n	80175ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017574:	697b      	ldr	r3, [r7, #20]
 8017576:	699a      	ldr	r2, [r3, #24]
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	18d1      	adds	r1, r2, r3
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	683a      	ldr	r2, [r7, #0]
 8017580:	6978      	ldr	r0, [r7, #20]
 8017582:	f000 f8d1 	bl	8017728 <prvInsertTimerInActiveList>
 8017586:	4603      	mov	r3, r0
 8017588:	2b00      	cmp	r3, #0
 801758a:	d01f      	beq.n	80175cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801758c:	2300      	movs	r3, #0
 801758e:	9300      	str	r3, [sp, #0]
 8017590:	2300      	movs	r3, #0
 8017592:	687a      	ldr	r2, [r7, #4]
 8017594:	2100      	movs	r1, #0
 8017596:	6978      	ldr	r0, [r7, #20]
 8017598:	f7ff ff88 	bl	80174ac <xTimerGenericCommand>
 801759c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801759e:	693b      	ldr	r3, [r7, #16]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d113      	bne.n	80175cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80175a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175a8:	f383 8811 	msr	BASEPRI, r3
 80175ac:	f3bf 8f6f 	isb	sy
 80175b0:	f3bf 8f4f 	dsb	sy
 80175b4:	60fb      	str	r3, [r7, #12]
}
 80175b6:	bf00      	nop
 80175b8:	e7fe      	b.n	80175b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80175ba:	697b      	ldr	r3, [r7, #20]
 80175bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80175c0:	f023 0301 	bic.w	r3, r3, #1
 80175c4:	b2da      	uxtb	r2, r3
 80175c6:	697b      	ldr	r3, [r7, #20]
 80175c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80175cc:	697b      	ldr	r3, [r7, #20]
 80175ce:	6a1b      	ldr	r3, [r3, #32]
 80175d0:	6978      	ldr	r0, [r7, #20]
 80175d2:	4798      	blx	r3
}
 80175d4:	bf00      	nop
 80175d6:	3718      	adds	r7, #24
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}
 80175dc:	2400c7ac 	.word	0x2400c7ac

080175e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b084      	sub	sp, #16
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80175e8:	f107 0308 	add.w	r3, r7, #8
 80175ec:	4618      	mov	r0, r3
 80175ee:	f000 f857 	bl	80176a0 <prvGetNextExpireTime>
 80175f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	4619      	mov	r1, r3
 80175f8:	68f8      	ldr	r0, [r7, #12]
 80175fa:	f000 f803 	bl	8017604 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80175fe:	f000 f8d5 	bl	80177ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017602:	e7f1      	b.n	80175e8 <prvTimerTask+0x8>

08017604 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b084      	sub	sp, #16
 8017608:	af00      	add	r7, sp, #0
 801760a:	6078      	str	r0, [r7, #4]
 801760c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801760e:	f7ff f945 	bl	801689c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017612:	f107 0308 	add.w	r3, r7, #8
 8017616:	4618      	mov	r0, r3
 8017618:	f000 f866 	bl	80176e8 <prvSampleTimeNow>
 801761c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801761e:	68bb      	ldr	r3, [r7, #8]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d130      	bne.n	8017686 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d10a      	bne.n	8017640 <prvProcessTimerOrBlockTask+0x3c>
 801762a:	687a      	ldr	r2, [r7, #4]
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	429a      	cmp	r2, r3
 8017630:	d806      	bhi.n	8017640 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017632:	f7ff f941 	bl	80168b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017636:	68f9      	ldr	r1, [r7, #12]
 8017638:	6878      	ldr	r0, [r7, #4]
 801763a:	f7ff ff85 	bl	8017548 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801763e:	e024      	b.n	801768a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017640:	683b      	ldr	r3, [r7, #0]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d008      	beq.n	8017658 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017646:	4b13      	ldr	r3, [pc, #76]	; (8017694 <prvProcessTimerOrBlockTask+0x90>)
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d101      	bne.n	8017654 <prvProcessTimerOrBlockTask+0x50>
 8017650:	2301      	movs	r3, #1
 8017652:	e000      	b.n	8017656 <prvProcessTimerOrBlockTask+0x52>
 8017654:	2300      	movs	r3, #0
 8017656:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017658:	4b0f      	ldr	r3, [pc, #60]	; (8017698 <prvProcessTimerOrBlockTask+0x94>)
 801765a:	6818      	ldr	r0, [r3, #0]
 801765c:	687a      	ldr	r2, [r7, #4]
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	1ad3      	subs	r3, r2, r3
 8017662:	683a      	ldr	r2, [r7, #0]
 8017664:	4619      	mov	r1, r3
 8017666:	f7fe fea9 	bl	80163bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801766a:	f7ff f925 	bl	80168b8 <xTaskResumeAll>
 801766e:	4603      	mov	r3, r0
 8017670:	2b00      	cmp	r3, #0
 8017672:	d10a      	bne.n	801768a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017674:	4b09      	ldr	r3, [pc, #36]	; (801769c <prvProcessTimerOrBlockTask+0x98>)
 8017676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801767a:	601a      	str	r2, [r3, #0]
 801767c:	f3bf 8f4f 	dsb	sy
 8017680:	f3bf 8f6f 	isb	sy
}
 8017684:	e001      	b.n	801768a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017686:	f7ff f917 	bl	80168b8 <xTaskResumeAll>
}
 801768a:	bf00      	nop
 801768c:	3710      	adds	r7, #16
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}
 8017692:	bf00      	nop
 8017694:	2400c7b0 	.word	0x2400c7b0
 8017698:	2400c7b4 	.word	0x2400c7b4
 801769c:	e000ed04 	.word	0xe000ed04

080176a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80176a0:	b480      	push	{r7}
 80176a2:	b085      	sub	sp, #20
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80176a8:	4b0e      	ldr	r3, [pc, #56]	; (80176e4 <prvGetNextExpireTime+0x44>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d101      	bne.n	80176b6 <prvGetNextExpireTime+0x16>
 80176b2:	2201      	movs	r2, #1
 80176b4:	e000      	b.n	80176b8 <prvGetNextExpireTime+0x18>
 80176b6:	2200      	movs	r2, #0
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d105      	bne.n	80176d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80176c4:	4b07      	ldr	r3, [pc, #28]	; (80176e4 <prvGetNextExpireTime+0x44>)
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	68db      	ldr	r3, [r3, #12]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	60fb      	str	r3, [r7, #12]
 80176ce:	e001      	b.n	80176d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80176d0:	2300      	movs	r3, #0
 80176d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80176d4:	68fb      	ldr	r3, [r7, #12]
}
 80176d6:	4618      	mov	r0, r3
 80176d8:	3714      	adds	r7, #20
 80176da:	46bd      	mov	sp, r7
 80176dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e0:	4770      	bx	lr
 80176e2:	bf00      	nop
 80176e4:	2400c7ac 	.word	0x2400c7ac

080176e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b084      	sub	sp, #16
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80176f0:	f7ff f980 	bl	80169f4 <xTaskGetTickCount>
 80176f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80176f6:	4b0b      	ldr	r3, [pc, #44]	; (8017724 <prvSampleTimeNow+0x3c>)
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	68fa      	ldr	r2, [r7, #12]
 80176fc:	429a      	cmp	r2, r3
 80176fe:	d205      	bcs.n	801770c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017700:	f000 f936 	bl	8017970 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	2201      	movs	r2, #1
 8017708:	601a      	str	r2, [r3, #0]
 801770a:	e002      	b.n	8017712 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	2200      	movs	r2, #0
 8017710:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017712:	4a04      	ldr	r2, [pc, #16]	; (8017724 <prvSampleTimeNow+0x3c>)
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017718:	68fb      	ldr	r3, [r7, #12]
}
 801771a:	4618      	mov	r0, r3
 801771c:	3710      	adds	r7, #16
 801771e:	46bd      	mov	sp, r7
 8017720:	bd80      	pop	{r7, pc}
 8017722:	bf00      	nop
 8017724:	2400c7bc 	.word	0x2400c7bc

08017728 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b086      	sub	sp, #24
 801772c:	af00      	add	r7, sp, #0
 801772e:	60f8      	str	r0, [r7, #12]
 8017730:	60b9      	str	r1, [r7, #8]
 8017732:	607a      	str	r2, [r7, #4]
 8017734:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017736:	2300      	movs	r3, #0
 8017738:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	68ba      	ldr	r2, [r7, #8]
 801773e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	68fa      	ldr	r2, [r7, #12]
 8017744:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017746:	68ba      	ldr	r2, [r7, #8]
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	429a      	cmp	r2, r3
 801774c:	d812      	bhi.n	8017774 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801774e:	687a      	ldr	r2, [r7, #4]
 8017750:	683b      	ldr	r3, [r7, #0]
 8017752:	1ad2      	subs	r2, r2, r3
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	699b      	ldr	r3, [r3, #24]
 8017758:	429a      	cmp	r2, r3
 801775a:	d302      	bcc.n	8017762 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801775c:	2301      	movs	r3, #1
 801775e:	617b      	str	r3, [r7, #20]
 8017760:	e01b      	b.n	801779a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017762:	4b10      	ldr	r3, [pc, #64]	; (80177a4 <prvInsertTimerInActiveList+0x7c>)
 8017764:	681a      	ldr	r2, [r3, #0]
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	3304      	adds	r3, #4
 801776a:	4619      	mov	r1, r3
 801776c:	4610      	mov	r0, r2
 801776e:	f7fd fb96 	bl	8014e9e <vListInsert>
 8017772:	e012      	b.n	801779a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017774:	687a      	ldr	r2, [r7, #4]
 8017776:	683b      	ldr	r3, [r7, #0]
 8017778:	429a      	cmp	r2, r3
 801777a:	d206      	bcs.n	801778a <prvInsertTimerInActiveList+0x62>
 801777c:	68ba      	ldr	r2, [r7, #8]
 801777e:	683b      	ldr	r3, [r7, #0]
 8017780:	429a      	cmp	r2, r3
 8017782:	d302      	bcc.n	801778a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017784:	2301      	movs	r3, #1
 8017786:	617b      	str	r3, [r7, #20]
 8017788:	e007      	b.n	801779a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801778a:	4b07      	ldr	r3, [pc, #28]	; (80177a8 <prvInsertTimerInActiveList+0x80>)
 801778c:	681a      	ldr	r2, [r3, #0]
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	3304      	adds	r3, #4
 8017792:	4619      	mov	r1, r3
 8017794:	4610      	mov	r0, r2
 8017796:	f7fd fb82 	bl	8014e9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801779a:	697b      	ldr	r3, [r7, #20]
}
 801779c:	4618      	mov	r0, r3
 801779e:	3718      	adds	r7, #24
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}
 80177a4:	2400c7b0 	.word	0x2400c7b0
 80177a8:	2400c7ac 	.word	0x2400c7ac

080177ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b08e      	sub	sp, #56	; 0x38
 80177b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80177b2:	e0ca      	b.n	801794a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	da18      	bge.n	80177ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80177ba:	1d3b      	adds	r3, r7, #4
 80177bc:	3304      	adds	r3, #4
 80177be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80177c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d10a      	bne.n	80177dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80177c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177ca:	f383 8811 	msr	BASEPRI, r3
 80177ce:	f3bf 8f6f 	isb	sy
 80177d2:	f3bf 8f4f 	dsb	sy
 80177d6:	61fb      	str	r3, [r7, #28]
}
 80177d8:	bf00      	nop
 80177da:	e7fe      	b.n	80177da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80177dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177e2:	6850      	ldr	r0, [r2, #4]
 80177e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177e6:	6892      	ldr	r2, [r2, #8]
 80177e8:	4611      	mov	r1, r2
 80177ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	f2c0 80aa 	blt.w	8017948 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80177f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177fa:	695b      	ldr	r3, [r3, #20]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d004      	beq.n	801780a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017802:	3304      	adds	r3, #4
 8017804:	4618      	mov	r0, r3
 8017806:	f7fd fb83 	bl	8014f10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801780a:	463b      	mov	r3, r7
 801780c:	4618      	mov	r0, r3
 801780e:	f7ff ff6b 	bl	80176e8 <prvSampleTimeNow>
 8017812:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	2b09      	cmp	r3, #9
 8017818:	f200 8097 	bhi.w	801794a <prvProcessReceivedCommands+0x19e>
 801781c:	a201      	add	r2, pc, #4	; (adr r2, 8017824 <prvProcessReceivedCommands+0x78>)
 801781e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017822:	bf00      	nop
 8017824:	0801784d 	.word	0x0801784d
 8017828:	0801784d 	.word	0x0801784d
 801782c:	0801784d 	.word	0x0801784d
 8017830:	080178c1 	.word	0x080178c1
 8017834:	080178d5 	.word	0x080178d5
 8017838:	0801791f 	.word	0x0801791f
 801783c:	0801784d 	.word	0x0801784d
 8017840:	0801784d 	.word	0x0801784d
 8017844:	080178c1 	.word	0x080178c1
 8017848:	080178d5 	.word	0x080178d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801784e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017852:	f043 0301 	orr.w	r3, r3, #1
 8017856:	b2da      	uxtb	r2, r3
 8017858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801785a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801785e:	68ba      	ldr	r2, [r7, #8]
 8017860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017862:	699b      	ldr	r3, [r3, #24]
 8017864:	18d1      	adds	r1, r2, r3
 8017866:	68bb      	ldr	r3, [r7, #8]
 8017868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801786a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801786c:	f7ff ff5c 	bl	8017728 <prvInsertTimerInActiveList>
 8017870:	4603      	mov	r3, r0
 8017872:	2b00      	cmp	r3, #0
 8017874:	d069      	beq.n	801794a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017878:	6a1b      	ldr	r3, [r3, #32]
 801787a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801787c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017884:	f003 0304 	and.w	r3, r3, #4
 8017888:	2b00      	cmp	r3, #0
 801788a:	d05e      	beq.n	801794a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801788c:	68ba      	ldr	r2, [r7, #8]
 801788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017890:	699b      	ldr	r3, [r3, #24]
 8017892:	441a      	add	r2, r3
 8017894:	2300      	movs	r3, #0
 8017896:	9300      	str	r3, [sp, #0]
 8017898:	2300      	movs	r3, #0
 801789a:	2100      	movs	r1, #0
 801789c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801789e:	f7ff fe05 	bl	80174ac <xTimerGenericCommand>
 80178a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80178a4:	6a3b      	ldr	r3, [r7, #32]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d14f      	bne.n	801794a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80178aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178ae:	f383 8811 	msr	BASEPRI, r3
 80178b2:	f3bf 8f6f 	isb	sy
 80178b6:	f3bf 8f4f 	dsb	sy
 80178ba:	61bb      	str	r3, [r7, #24]
}
 80178bc:	bf00      	nop
 80178be:	e7fe      	b.n	80178be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80178c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80178c6:	f023 0301 	bic.w	r3, r3, #1
 80178ca:	b2da      	uxtb	r2, r3
 80178cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80178d2:	e03a      	b.n	801794a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80178d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80178da:	f043 0301 	orr.w	r3, r3, #1
 80178de:	b2da      	uxtb	r2, r3
 80178e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80178e6:	68ba      	ldr	r2, [r7, #8]
 80178e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80178ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178ee:	699b      	ldr	r3, [r3, #24]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d10a      	bne.n	801790a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80178f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178f8:	f383 8811 	msr	BASEPRI, r3
 80178fc:	f3bf 8f6f 	isb	sy
 8017900:	f3bf 8f4f 	dsb	sy
 8017904:	617b      	str	r3, [r7, #20]
}
 8017906:	bf00      	nop
 8017908:	e7fe      	b.n	8017908 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801790c:	699a      	ldr	r2, [r3, #24]
 801790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017910:	18d1      	adds	r1, r2, r3
 8017912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017918:	f7ff ff06 	bl	8017728 <prvInsertTimerInActiveList>
					break;
 801791c:	e015      	b.n	801794a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017924:	f003 0302 	and.w	r3, r3, #2
 8017928:	2b00      	cmp	r3, #0
 801792a:	d103      	bne.n	8017934 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801792c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801792e:	f7fd f947 	bl	8014bc0 <vPortFree>
 8017932:	e00a      	b.n	801794a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801793a:	f023 0301 	bic.w	r3, r3, #1
 801793e:	b2da      	uxtb	r2, r3
 8017940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017942:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017946:	e000      	b.n	801794a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017948:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801794a:	4b08      	ldr	r3, [pc, #32]	; (801796c <prvProcessReceivedCommands+0x1c0>)
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	1d39      	adds	r1, r7, #4
 8017950:	2200      	movs	r2, #0
 8017952:	4618      	mov	r0, r3
 8017954:	f7fe f926 	bl	8015ba4 <xQueueReceive>
 8017958:	4603      	mov	r3, r0
 801795a:	2b00      	cmp	r3, #0
 801795c:	f47f af2a 	bne.w	80177b4 <prvProcessReceivedCommands+0x8>
	}
}
 8017960:	bf00      	nop
 8017962:	bf00      	nop
 8017964:	3730      	adds	r7, #48	; 0x30
 8017966:	46bd      	mov	sp, r7
 8017968:	bd80      	pop	{r7, pc}
 801796a:	bf00      	nop
 801796c:	2400c7b4 	.word	0x2400c7b4

08017970 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b088      	sub	sp, #32
 8017974:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017976:	e048      	b.n	8017a0a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017978:	4b2d      	ldr	r3, [pc, #180]	; (8017a30 <prvSwitchTimerLists+0xc0>)
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	68db      	ldr	r3, [r3, #12]
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017982:	4b2b      	ldr	r3, [pc, #172]	; (8017a30 <prvSwitchTimerLists+0xc0>)
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	68db      	ldr	r3, [r3, #12]
 8017988:	68db      	ldr	r3, [r3, #12]
 801798a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	3304      	adds	r3, #4
 8017990:	4618      	mov	r0, r3
 8017992:	f7fd fabd 	bl	8014f10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	6a1b      	ldr	r3, [r3, #32]
 801799a:	68f8      	ldr	r0, [r7, #12]
 801799c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179a4:	f003 0304 	and.w	r3, r3, #4
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d02e      	beq.n	8017a0a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	699b      	ldr	r3, [r3, #24]
 80179b0:	693a      	ldr	r2, [r7, #16]
 80179b2:	4413      	add	r3, r2
 80179b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80179b6:	68ba      	ldr	r2, [r7, #8]
 80179b8:	693b      	ldr	r3, [r7, #16]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d90e      	bls.n	80179dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	68ba      	ldr	r2, [r7, #8]
 80179c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	68fa      	ldr	r2, [r7, #12]
 80179c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80179ca:	4b19      	ldr	r3, [pc, #100]	; (8017a30 <prvSwitchTimerLists+0xc0>)
 80179cc:	681a      	ldr	r2, [r3, #0]
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	3304      	adds	r3, #4
 80179d2:	4619      	mov	r1, r3
 80179d4:	4610      	mov	r0, r2
 80179d6:	f7fd fa62 	bl	8014e9e <vListInsert>
 80179da:	e016      	b.n	8017a0a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80179dc:	2300      	movs	r3, #0
 80179de:	9300      	str	r3, [sp, #0]
 80179e0:	2300      	movs	r3, #0
 80179e2:	693a      	ldr	r2, [r7, #16]
 80179e4:	2100      	movs	r1, #0
 80179e6:	68f8      	ldr	r0, [r7, #12]
 80179e8:	f7ff fd60 	bl	80174ac <xTimerGenericCommand>
 80179ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d10a      	bne.n	8017a0a <prvSwitchTimerLists+0x9a>
	__asm volatile
 80179f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179f8:	f383 8811 	msr	BASEPRI, r3
 80179fc:	f3bf 8f6f 	isb	sy
 8017a00:	f3bf 8f4f 	dsb	sy
 8017a04:	603b      	str	r3, [r7, #0]
}
 8017a06:	bf00      	nop
 8017a08:	e7fe      	b.n	8017a08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017a0a:	4b09      	ldr	r3, [pc, #36]	; (8017a30 <prvSwitchTimerLists+0xc0>)
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d1b1      	bne.n	8017978 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017a14:	4b06      	ldr	r3, [pc, #24]	; (8017a30 <prvSwitchTimerLists+0xc0>)
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017a1a:	4b06      	ldr	r3, [pc, #24]	; (8017a34 <prvSwitchTimerLists+0xc4>)
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	4a04      	ldr	r2, [pc, #16]	; (8017a30 <prvSwitchTimerLists+0xc0>)
 8017a20:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017a22:	4a04      	ldr	r2, [pc, #16]	; (8017a34 <prvSwitchTimerLists+0xc4>)
 8017a24:	697b      	ldr	r3, [r7, #20]
 8017a26:	6013      	str	r3, [r2, #0]
}
 8017a28:	bf00      	nop
 8017a2a:	3718      	adds	r7, #24
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}
 8017a30:	2400c7ac 	.word	0x2400c7ac
 8017a34:	2400c7b0 	.word	0x2400c7b0

08017a38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b082      	sub	sp, #8
 8017a3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017a3e:	f7fd fbc1 	bl	80151c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017a42:	4b15      	ldr	r3, [pc, #84]	; (8017a98 <prvCheckForValidListAndQueue+0x60>)
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d120      	bne.n	8017a8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017a4a:	4814      	ldr	r0, [pc, #80]	; (8017a9c <prvCheckForValidListAndQueue+0x64>)
 8017a4c:	f7fd f9d6 	bl	8014dfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017a50:	4813      	ldr	r0, [pc, #76]	; (8017aa0 <prvCheckForValidListAndQueue+0x68>)
 8017a52:	f7fd f9d3 	bl	8014dfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017a56:	4b13      	ldr	r3, [pc, #76]	; (8017aa4 <prvCheckForValidListAndQueue+0x6c>)
 8017a58:	4a10      	ldr	r2, [pc, #64]	; (8017a9c <prvCheckForValidListAndQueue+0x64>)
 8017a5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017a5c:	4b12      	ldr	r3, [pc, #72]	; (8017aa8 <prvCheckForValidListAndQueue+0x70>)
 8017a5e:	4a10      	ldr	r2, [pc, #64]	; (8017aa0 <prvCheckForValidListAndQueue+0x68>)
 8017a60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017a62:	2300      	movs	r3, #0
 8017a64:	9300      	str	r3, [sp, #0]
 8017a66:	4b11      	ldr	r3, [pc, #68]	; (8017aac <prvCheckForValidListAndQueue+0x74>)
 8017a68:	4a11      	ldr	r2, [pc, #68]	; (8017ab0 <prvCheckForValidListAndQueue+0x78>)
 8017a6a:	2110      	movs	r1, #16
 8017a6c:	200a      	movs	r0, #10
 8017a6e:	f7fd fd33 	bl	80154d8 <xQueueGenericCreateStatic>
 8017a72:	4603      	mov	r3, r0
 8017a74:	4a08      	ldr	r2, [pc, #32]	; (8017a98 <prvCheckForValidListAndQueue+0x60>)
 8017a76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017a78:	4b07      	ldr	r3, [pc, #28]	; (8017a98 <prvCheckForValidListAndQueue+0x60>)
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d005      	beq.n	8017a8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017a80:	4b05      	ldr	r3, [pc, #20]	; (8017a98 <prvCheckForValidListAndQueue+0x60>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	490b      	ldr	r1, [pc, #44]	; (8017ab4 <prvCheckForValidListAndQueue+0x7c>)
 8017a86:	4618      	mov	r0, r3
 8017a88:	f7fe fc44 	bl	8016314 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017a8c:	f7fd fbca 	bl	8015224 <vPortExitCritical>
}
 8017a90:	bf00      	nop
 8017a92:	46bd      	mov	sp, r7
 8017a94:	bd80      	pop	{r7, pc}
 8017a96:	bf00      	nop
 8017a98:	2400c7b4 	.word	0x2400c7b4
 8017a9c:	2400c784 	.word	0x2400c784
 8017aa0:	2400c798 	.word	0x2400c798
 8017aa4:	2400c7ac 	.word	0x2400c7ac
 8017aa8:	2400c7b0 	.word	0x2400c7b0
 8017aac:	2400c860 	.word	0x2400c860
 8017ab0:	2400c7c0 	.word	0x2400c7c0
 8017ab4:	0802d808 	.word	0x0802d808

08017ab8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8017ab8:	8880      	ldrh	r0, [r0, #4]
 8017aba:	4770      	bx	lr

08017abc <_ZN8touchgfx17AbstractPartition5clearEv>:
 8017abc:	2300      	movs	r3, #0
 8017abe:	8083      	strh	r3, [r0, #4]
 8017ac0:	4770      	bx	lr
	...

08017ac4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ac6:	6803      	ldr	r3, [r0, #0]
 8017ac8:	460e      	mov	r6, r1
 8017aca:	2100      	movs	r1, #0
 8017acc:	4605      	mov	r5, r0
 8017ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ad0:	4798      	blx	r3
 8017ad2:	4604      	mov	r4, r0
 8017ad4:	682b      	ldr	r3, [r5, #0]
 8017ad6:	4628      	mov	r0, r5
 8017ad8:	1b34      	subs	r4, r6, r4
 8017ada:	6a1b      	ldr	r3, [r3, #32]
 8017adc:	b2a4      	uxth	r4, r4
 8017ade:	4798      	blx	r3
 8017ae0:	88ab      	ldrh	r3, [r5, #4]
 8017ae2:	fbb4 f4f0 	udiv	r4, r4, r0
 8017ae6:	42a3      	cmp	r3, r4
 8017ae8:	d805      	bhi.n	8017af6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8017aea:	4b0e      	ldr	r3, [pc, #56]	; (8017b24 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8017aec:	211e      	movs	r1, #30
 8017aee:	4a0e      	ldr	r2, [pc, #56]	; (8017b28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8017af0:	480e      	ldr	r0, [pc, #56]	; (8017b2c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8017af2:	f013 feb9 	bl	802b868 <__assert_func>
 8017af6:	682b      	ldr	r3, [r5, #0]
 8017af8:	2100      	movs	r1, #0
 8017afa:	4628      	mov	r0, r5
 8017afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017afe:	4798      	blx	r3
 8017b00:	682b      	ldr	r3, [r5, #0]
 8017b02:	4607      	mov	r7, r0
 8017b04:	4628      	mov	r0, r5
 8017b06:	6a1b      	ldr	r3, [r3, #32]
 8017b08:	4798      	blx	r3
 8017b0a:	1bf3      	subs	r3, r6, r7
 8017b0c:	b29b      	uxth	r3, r3
 8017b0e:	fbb3 f2f0 	udiv	r2, r3, r0
 8017b12:	fb02 3010 	mls	r0, r2, r0, r3
 8017b16:	b118      	cbz	r0, 8017b20 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8017b18:	4b05      	ldr	r3, [pc, #20]	; (8017b30 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8017b1a:	211f      	movs	r1, #31
 8017b1c:	4a02      	ldr	r2, [pc, #8]	; (8017b28 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8017b1e:	e7e7      	b.n	8017af0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8017b20:	4620      	mov	r0, r4
 8017b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b24:	0802e3c4 	.word	0x0802e3c4
 8017b28:	0802e532 	.word	0x0802e532
 8017b2c:	0802e3d9 	.word	0x0802e3d9
 8017b30:	0802e407 	.word	0x0802e407

08017b34 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017b34:	b538      	push	{r3, r4, r5, lr}
 8017b36:	6803      	ldr	r3, [r0, #0]
 8017b38:	460d      	mov	r5, r1
 8017b3a:	4604      	mov	r4, r0
 8017b3c:	6a1b      	ldr	r3, [r3, #32]
 8017b3e:	4798      	blx	r3
 8017b40:	4285      	cmp	r5, r0
 8017b42:	d905      	bls.n	8017b50 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8017b44:	4b0c      	ldr	r3, [pc, #48]	; (8017b78 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8017b46:	2130      	movs	r1, #48	; 0x30
 8017b48:	4a0c      	ldr	r2, [pc, #48]	; (8017b7c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017b4a:	480d      	ldr	r0, [pc, #52]	; (8017b80 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8017b4c:	f013 fe8c 	bl	802b868 <__assert_func>
 8017b50:	6823      	ldr	r3, [r4, #0]
 8017b52:	4620      	mov	r0, r4
 8017b54:	88a5      	ldrh	r5, [r4, #4]
 8017b56:	69db      	ldr	r3, [r3, #28]
 8017b58:	4798      	blx	r3
 8017b5a:	4285      	cmp	r5, r0
 8017b5c:	d303      	bcc.n	8017b66 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8017b5e:	4b09      	ldr	r3, [pc, #36]	; (8017b84 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8017b60:	2131      	movs	r1, #49	; 0x31
 8017b62:	4a06      	ldr	r2, [pc, #24]	; (8017b7c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017b64:	e7f1      	b.n	8017b4a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8017b66:	6823      	ldr	r3, [r4, #0]
 8017b68:	4620      	mov	r0, r4
 8017b6a:	88a1      	ldrh	r1, [r4, #4]
 8017b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b6e:	4798      	blx	r3
 8017b70:	88a3      	ldrh	r3, [r4, #4]
 8017b72:	3301      	adds	r3, #1
 8017b74:	80a3      	strh	r3, [r4, #4]
 8017b76:	bd38      	pop	{r3, r4, r5, pc}
 8017b78:	0802e481 	.word	0x0802e481
 8017b7c:	0802e575 	.word	0x0802e575
 8017b80:	0802e3d9 	.word	0x0802e3d9
 8017b84:	0802e498 	.word	0x0802e498

08017b88 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8017b88:	b570      	push	{r4, r5, r6, lr}
 8017b8a:	6803      	ldr	r3, [r0, #0]
 8017b8c:	4616      	mov	r6, r2
 8017b8e:	4604      	mov	r4, r0
 8017b90:	460d      	mov	r5, r1
 8017b92:	6a1b      	ldr	r3, [r3, #32]
 8017b94:	4798      	blx	r3
 8017b96:	4286      	cmp	r6, r0
 8017b98:	d905      	bls.n	8017ba6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8017b9a:	4b06      	ldr	r3, [pc, #24]	; (8017bb4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8017b9c:	213a      	movs	r1, #58	; 0x3a
 8017b9e:	4a06      	ldr	r2, [pc, #24]	; (8017bb8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8017ba0:	4806      	ldr	r0, [pc, #24]	; (8017bbc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8017ba2:	f013 fe61 	bl	802b868 <__assert_func>
 8017ba6:	6823      	ldr	r3, [r4, #0]
 8017ba8:	4629      	mov	r1, r5
 8017baa:	4620      	mov	r0, r4
 8017bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bb2:	4718      	bx	r3
 8017bb4:	0802e481 	.word	0x0802e481
 8017bb8:	0802e4e8 	.word	0x0802e4e8
 8017bbc:	0802e3d9 	.word	0x0802e3d9

08017bc0 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8017bc0:	4770      	bx	lr
	...

08017bc4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017bc4:	4a02      	ldr	r2, [pc, #8]	; (8017bd0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8017bc6:	6002      	str	r2, [r0, #0]
 8017bc8:	2200      	movs	r2, #0
 8017bca:	8082      	strh	r2, [r0, #4]
 8017bcc:	4770      	bx	lr
 8017bce:	bf00      	nop
 8017bd0:	0802e4bc 	.word	0x0802e4bc

08017bd4 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8017bd4:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8017bd8:	4770      	bx	lr

08017bda <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8017bda:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8017bde:	4770      	bx	lr

08017be0 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8017be0:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8017be4:	4770      	bx	lr

08017be6 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8017be6:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8017bea:	4770      	bx	lr

08017bec <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8017bec:	b510      	push	{r4, lr}
 8017bee:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8017bf2:	600c      	str	r4, [r1, #0]
 8017bf4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8017bf8:	6011      	str	r1, [r2, #0]
 8017bfa:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8017bfe:	801a      	strh	r2, [r3, #0]
 8017c00:	9b02      	ldr	r3, [sp, #8]
 8017c02:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8017c06:	801a      	strh	r2, [r3, #0]
 8017c08:	bd10      	pop	{r4, pc}

08017c0a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8017c0a:	b510      	push	{r4, lr}
 8017c0c:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8017c10:	600c      	str	r4, [r1, #0]
 8017c12:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8017c16:	6011      	str	r1, [r2, #0]
 8017c18:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8017c1c:	801a      	strh	r2, [r3, #0]
 8017c1e:	bd10      	pop	{r4, pc}

08017c20 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8017c20:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8017c24:	600b      	str	r3, [r1, #0]
 8017c26:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8017c2a:	6013      	str	r3, [r2, #0]
 8017c2c:	4770      	bx	lr

08017c2e <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8017c2e:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8017c32:	4770      	bx	lr

08017c34 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8017c34:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8017c38:	4770      	bx	lr

08017c3a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8017c3a:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8017c3e:	4770      	bx	lr

08017c40 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8017c40:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8017c44:	4770      	bx	lr

08017c46 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8017c46:	b570      	push	{r4, r5, r6, lr}
 8017c48:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8017c4c:	4604      	mov	r4, r0
 8017c4e:	4616      	mov	r6, r2
 8017c50:	428d      	cmp	r5, r1
 8017c52:	bfb8      	it	lt
 8017c54:	460d      	movlt	r5, r1
 8017c56:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8017c5a:	428d      	cmp	r5, r1
 8017c5c:	bfa8      	it	ge
 8017c5e:	460d      	movge	r5, r1
 8017c60:	b99a      	cbnz	r2, 8017c8a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8017c62:	6803      	ldr	r3, [r0, #0]
 8017c64:	4629      	mov	r1, r5
 8017c66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017c6a:	4798      	blx	r3
 8017c6c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017c70:	b358      	cbz	r0, 8017cca <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8017c72:	6803      	ldr	r3, [r0, #0]
 8017c74:	68db      	ldr	r3, [r3, #12]
 8017c76:	4798      	blx	r3
 8017c78:	b338      	cbz	r0, 8017cca <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8017c7a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017c7e:	4621      	mov	r1, r4
 8017c80:	6803      	ldr	r3, [r0, #0]
 8017c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c86:	689b      	ldr	r3, [r3, #8]
 8017c88:	4718      	bx	r3
 8017c8a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	dd07      	ble.n	8017ca2 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 8017c92:	f006 fe0f 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 8017c96:	4621      	mov	r1, r4
 8017c98:	f006 fe44 	bl	801e924 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8017ca2:	6823      	ldr	r3, [r4, #0]
 8017ca4:	4620      	mov	r0, r4
 8017ca6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017caa:	4798      	blx	r3
 8017cac:	2300      	movs	r3, #0
 8017cae:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8017cb2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8017cb6:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 8017cba:	f006 fdfb 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 8017cbe:	4621      	mov	r1, r4
 8017cc0:	f006 fdfe 	bl	801e8c0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8017cc4:	2301      	movs	r3, #1
 8017cc6:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8017cca:	bd70      	pop	{r4, r5, r6, pc}

08017ccc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8017ccc:	b510      	push	{r4, lr}
 8017cce:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8017cd2:	4604      	mov	r4, r0
 8017cd4:	4299      	cmp	r1, r3
 8017cd6:	bfb8      	it	lt
 8017cd8:	4619      	movlt	r1, r3
 8017cda:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8017cde:	4299      	cmp	r1, r3
 8017ce0:	bfa8      	it	ge
 8017ce2:	4619      	movge	r1, r3
 8017ce4:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8017ce8:	428b      	cmp	r3, r1
 8017cea:	d010      	beq.n	8017d0e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017cec:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8017cf0:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8017cf4:	b158      	cbz	r0, 8017d0e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017cf6:	6803      	ldr	r3, [r0, #0]
 8017cf8:	68db      	ldr	r3, [r3, #12]
 8017cfa:	4798      	blx	r3
 8017cfc:	b138      	cbz	r0, 8017d0e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017cfe:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8017d02:	4621      	mov	r1, r4
 8017d04:	6803      	ldr	r3, [r0, #0]
 8017d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d0a:	689b      	ldr	r3, [r3, #8]
 8017d0c:	4718      	bx	r3
 8017d0e:	bd10      	pop	{r4, pc}

08017d10 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8017d10:	4291      	cmp	r1, r2
 8017d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d16:	4604      	mov	r4, r0
 8017d18:	460e      	mov	r6, r1
 8017d1a:	4615      	mov	r5, r2
 8017d1c:	4698      	mov	r8, r3
 8017d1e:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8017d22:	db05      	blt.n	8017d30 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8017d24:	4b11      	ldr	r3, [pc, #68]	; (8017d6c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8017d26:	214b      	movs	r1, #75	; 0x4b
 8017d28:	4a11      	ldr	r2, [pc, #68]	; (8017d70 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8017d2a:	4812      	ldr	r0, [pc, #72]	; (8017d74 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 8017d2c:	f013 fd9c 	bl	802b868 <__assert_func>
 8017d30:	6803      	ldr	r3, [r0, #0]
 8017d32:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8017d36:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8017d3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017d3e:	4798      	blx	r3
 8017d40:	f1b8 0f00 	cmp.w	r8, #0
 8017d44:	d10c      	bne.n	8017d60 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 8017d46:	1bad      	subs	r5, r5, r6
 8017d48:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8017d4c:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 8017d50:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 8017d54:	42bb      	cmp	r3, r7
 8017d56:	d806      	bhi.n	8017d66 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 8017d58:	4b07      	ldr	r3, [pc, #28]	; (8017d78 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 8017d5a:	2158      	movs	r1, #88	; 0x58
 8017d5c:	4a04      	ldr	r2, [pc, #16]	; (8017d70 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8017d5e:	e7e4      	b.n	8017d2a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 8017d60:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 8017d64:	e7f2      	b.n	8017d4c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 8017d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d6a:	bf00      	nop
 8017d6c:	0802e5b3 	.word	0x0802e5b3
 8017d70:	0802e700 	.word	0x0802e700
 8017d74:	0802e5bd 	.word	0x0802e5bd
 8017d78:	0802e614 	.word	0x0802e614

08017d7c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8017d7c:	b570      	push	{r4, r5, r6, lr}
 8017d7e:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8017d82:	4604      	mov	r4, r0
 8017d84:	b3a3      	cbz	r3, 8017df0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017d86:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8017d8a:	2100      	movs	r1, #0
 8017d8c:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8017d90:	3001      	adds	r0, #1
 8017d92:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 8017d96:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8017d9a:	b280      	uxth	r0, r0
 8017d9c:	1ad2      	subs	r2, r2, r3
 8017d9e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017da2:	b212      	sxth	r2, r2
 8017da4:	47a8      	blx	r5
 8017da6:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8017daa:	6823      	ldr	r3, [r4, #0]
 8017dac:	4401      	add	r1, r0
 8017dae:	4620      	mov	r0, r4
 8017db0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017db4:	4798      	blx	r3
 8017db6:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 8017dba:	429a      	cmp	r2, r3
 8017dbc:	db18      	blt.n	8017df0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017dbe:	2500      	movs	r5, #0
 8017dc0:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8017dc4:	f006 fd76 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 8017dc8:	4621      	mov	r1, r4
 8017dca:	f006 fdab 	bl	801e924 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8017dce:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017dd2:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8017dd6:	b158      	cbz	r0, 8017df0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017dd8:	6803      	ldr	r3, [r0, #0]
 8017dda:	68db      	ldr	r3, [r3, #12]
 8017ddc:	4798      	blx	r3
 8017dde:	b138      	cbz	r0, 8017df0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017de0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017de4:	4621      	mov	r1, r4
 8017de6:	6803      	ldr	r3, [r0, #0]
 8017de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017dec:	689b      	ldr	r3, [r3, #8]
 8017dee:	4718      	bx	r3
 8017df0:	bd70      	pop	{r4, r5, r6, pc}

08017df2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8017df2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017df4:	4604      	mov	r4, r0
 8017df6:	460d      	mov	r5, r1
 8017df8:	b1a9      	cbz	r1, 8017e26 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8017dfa:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8017dfe:	ab01      	add	r3, sp, #4
 8017e00:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8017e04:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8017e08:	1b89      	subs	r1, r1, r6
 8017e0a:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8017e0e:	1a12      	subs	r2, r2, r0
 8017e10:	1a38      	subs	r0, r7, r0
 8017e12:	f007 fee1 	bl	801fbd8 <_ZN8touchgfx6muldivElllRl>
 8017e16:	4629      	mov	r1, r5
 8017e18:	ab01      	add	r3, sp, #4
 8017e1a:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 8017e1e:	4430      	add	r0, r6
 8017e20:	f007 feda 	bl	801fbd8 <_ZN8touchgfx6muldivElllRl>
 8017e24:	b285      	uxth	r5, r0
 8017e26:	4628      	mov	r0, r5
 8017e28:	b003      	add	sp, #12
 8017e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017e2c <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8017e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e30:	4604      	mov	r4, r0
 8017e32:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8017e36:	4698      	mov	r8, r3
 8017e38:	460e      	mov	r6, r1
 8017e3a:	4615      	mov	r5, r2
 8017e3c:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8017e40:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8017e44:	4619      	mov	r1, r3
 8017e46:	463a      	mov	r2, r7
 8017e48:	3058      	adds	r0, #88	; 0x58
 8017e4a:	f7ec fa6a 	bl	8004322 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017e4e:	4446      	add	r6, r8
 8017e50:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017e54:	443d      	add	r5, r7
 8017e56:	42b3      	cmp	r3, r6
 8017e58:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017e5c:	bfb8      	it	lt
 8017e5e:	8126      	strhlt	r6, [r4, #8]
 8017e60:	42ab      	cmp	r3, r5
 8017e62:	bfb8      	it	lt
 8017e64:	8165      	strhlt	r5, [r4, #10]
 8017e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017e6a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8017e6a:	b510      	push	{r4, lr}
 8017e6c:	4604      	mov	r4, r0
 8017e6e:	302c      	adds	r0, #44	; 0x2c
 8017e70:	f004 feba 	bl	801cbe8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017e74:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8017e78:	4620      	mov	r0, r4
 8017e7a:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8017e7e:	f7ec fa50 	bl	8004322 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017e82:	bd10      	pop	{r4, pc}

08017e84 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e86:	4604      	mov	r4, r0
 8017e88:	2500      	movs	r5, #0
 8017e8a:	f7ed ff25 	bl	8005cd8 <_ZN8touchgfx8DrawableC1Ev>
 8017e8e:	4b24      	ldr	r3, [pc, #144]	; (8017f20 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8017e90:	4626      	mov	r6, r4
 8017e92:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8017e96:	2226      	movs	r2, #38	; 0x26
 8017e98:	4629      	mov	r1, r5
 8017e9a:	62a5      	str	r5, [r4, #40]	; 0x28
 8017e9c:	f846 3b2c 	str.w	r3, [r6], #44
 8017ea0:	4630      	mov	r0, r6
 8017ea2:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017ea6:	f013 fd6b 	bl	802b980 <memset>
 8017eaa:	4630      	mov	r0, r6
 8017eac:	f7ed ff14 	bl	8005cd8 <_ZN8touchgfx8DrawableC1Ev>
 8017eb0:	a902      	add	r1, sp, #8
 8017eb2:	4b1c      	ldr	r3, [pc, #112]	; (8017f24 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8017eb4:	4630      	mov	r0, r6
 8017eb6:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8017eba:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8017ebe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017ec0:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8017ec4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017ec8:	f004 fe8e 	bl	801cbe8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017ecc:	4638      	mov	r0, r7
 8017ece:	f7ed ff03 	bl	8005cd8 <_ZN8touchgfx8DrawableC1Ev>
 8017ed2:	4b15      	ldr	r3, [pc, #84]	; (8017f28 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8017ed4:	4629      	mov	r1, r5
 8017ed6:	4630      	mov	r0, r6
 8017ed8:	65a3      	str	r3, [r4, #88]	; 0x58
 8017eda:	2364      	movs	r3, #100	; 0x64
 8017edc:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8017ee0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8017ee4:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8017ee8:	4b10      	ldr	r3, [pc, #64]	; (8017f2c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8017eea:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8017eee:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8017ef2:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8017ef6:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8017efa:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8017efe:	f7ec f996 	bl	800422e <_ZN8touchgfx8Drawable4setXEs>
 8017f02:	4629      	mov	r1, r5
 8017f04:	4630      	mov	r0, r6
 8017f06:	f7ec f9a1 	bl	800424c <_ZN8touchgfx8Drawable4setYEs>
 8017f0a:	4631      	mov	r1, r6
 8017f0c:	4620      	mov	r0, r4
 8017f0e:	f000 f877 	bl	8018000 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017f12:	4620      	mov	r0, r4
 8017f14:	4639      	mov	r1, r7
 8017f16:	f000 f873 	bl	8018000 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017f1a:	4620      	mov	r0, r4
 8017f1c:	b003      	add	sp, #12
 8017f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f20:	0802e638 	.word	0x0802e638
 8017f24:	080300b4 	.word	0x080300b4
 8017f28:	0802e82c 	.word	0x0802e82c
 8017f2c:	080202e3 	.word	0x080202e3

08017f30 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017f30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017f32:	2000      	movs	r0, #0
 8017f34:	b12b      	cbz	r3, 8017f42 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017f36:	b920      	cbnz	r0, 8017f42 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017f38:	1a5a      	subs	r2, r3, r1
 8017f3a:	699b      	ldr	r3, [r3, #24]
 8017f3c:	4250      	negs	r0, r2
 8017f3e:	4150      	adcs	r0, r2
 8017f40:	e7f8      	b.n	8017f34 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8017f42:	4770      	bx	lr

08017f44 <_ZN8touchgfx9Container9removeAllEv>:
 8017f44:	2200      	movs	r2, #0
 8017f46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017f48:	b123      	cbz	r3, 8017f54 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8017f4a:	6999      	ldr	r1, [r3, #24]
 8017f4c:	6281      	str	r1, [r0, #40]	; 0x28
 8017f4e:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8017f52:	e7f8      	b.n	8017f46 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8017f54:	4770      	bx	lr

08017f56 <_ZN8touchgfx9Container6unlinkEv>:
 8017f56:	2300      	movs	r3, #0
 8017f58:	6283      	str	r3, [r0, #40]	; 0x28
 8017f5a:	4770      	bx	lr

08017f5c <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	8002      	strh	r2, [r0, #0]
 8017f60:	8042      	strh	r2, [r0, #2]
 8017f62:	8082      	strh	r2, [r0, #4]
 8017f64:	80c2      	strh	r2, [r0, #6]
 8017f66:	4770      	bx	lr

08017f68 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017f68:	b570      	push	{r4, r5, r6, lr}
 8017f6a:	460d      	mov	r5, r1
 8017f6c:	4616      	mov	r6, r2
 8017f6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017f70:	b13c      	cbz	r4, 8017f82 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017f72:	6823      	ldr	r3, [r4, #0]
 8017f74:	4620      	mov	r0, r4
 8017f76:	4632      	mov	r2, r6
 8017f78:	4629      	mov	r1, r5
 8017f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f7c:	4798      	blx	r3
 8017f7e:	69a4      	ldr	r4, [r4, #24]
 8017f80:	e7f6      	b.n	8017f70 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017f82:	bd70      	pop	{r4, r5, r6, pc}

08017f84 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017f84:	b538      	push	{r3, r4, r5, lr}
 8017f86:	460d      	mov	r5, r1
 8017f88:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017f8a:	b134      	cbz	r4, 8017f9a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017f8c:	682b      	ldr	r3, [r5, #0]
 8017f8e:	4621      	mov	r1, r4
 8017f90:	4628      	mov	r0, r5
 8017f92:	689b      	ldr	r3, [r3, #8]
 8017f94:	4798      	blx	r3
 8017f96:	69a4      	ldr	r4, [r4, #24]
 8017f98:	e7f7      	b.n	8017f8a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017f9a:	bd38      	pop	{r3, r4, r5, pc}

08017f9c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017f9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017f9e:	b19b      	cbz	r3, 8017fc8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017fa0:	428b      	cmp	r3, r1
 8017fa2:	d109      	bne.n	8017fb8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017fa4:	699a      	ldr	r2, [r3, #24]
 8017fa6:	2100      	movs	r1, #0
 8017fa8:	6159      	str	r1, [r3, #20]
 8017faa:	6282      	str	r2, [r0, #40]	; 0x28
 8017fac:	b902      	cbnz	r2, 8017fb0 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017fae:	4770      	bx	lr
 8017fb0:	6199      	str	r1, [r3, #24]
 8017fb2:	4770      	bx	lr
 8017fb4:	4613      	mov	r3, r2
 8017fb6:	b13a      	cbz	r2, 8017fc8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017fb8:	699a      	ldr	r2, [r3, #24]
 8017fba:	428a      	cmp	r2, r1
 8017fbc:	d1fa      	bne.n	8017fb4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017fbe:	698a      	ldr	r2, [r1, #24]
 8017fc0:	619a      	str	r2, [r3, #24]
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017fc8:	4770      	bx	lr

08017fca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8017fca:	b410      	push	{r4}
 8017fcc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017fce:	4604      	mov	r4, r0
 8017fd0:	b92b      	cbnz	r3, 8017fde <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017fd2:	6803      	ldr	r3, [r0, #0]
 8017fd4:	4611      	mov	r1, r2
 8017fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017fdc:	4718      	bx	r3
 8017fde:	b941      	cbnz	r1, 8017ff2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017fe0:	6193      	str	r3, [r2, #24]
 8017fe2:	6282      	str	r2, [r0, #40]	; 0x28
 8017fe4:	6154      	str	r4, [r2, #20]
 8017fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fea:	4770      	bx	lr
 8017fec:	4603      	mov	r3, r0
 8017fee:	2800      	cmp	r0, #0
 8017ff0:	d0f9      	beq.n	8017fe6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017ff2:	4299      	cmp	r1, r3
 8017ff4:	6998      	ldr	r0, [r3, #24]
 8017ff6:	d1f9      	bne.n	8017fec <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8017ff8:	6190      	str	r0, [r2, #24]
 8017ffa:	618a      	str	r2, [r1, #24]
 8017ffc:	e7f2      	b.n	8017fe4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08018000 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8018000:	4288      	cmp	r0, r1
 8018002:	b508      	push	{r3, lr}
 8018004:	d105      	bne.n	8018012 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8018006:	4b11      	ldr	r3, [pc, #68]	; (801804c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8018008:	2123      	movs	r1, #35	; 0x23
 801800a:	4a11      	ldr	r2, [pc, #68]	; (8018050 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801800c:	4811      	ldr	r0, [pc, #68]	; (8018054 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801800e:	f013 fc2b 	bl	802b868 <__assert_func>
 8018012:	694b      	ldr	r3, [r1, #20]
 8018014:	b11b      	cbz	r3, 801801e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8018016:	4b10      	ldr	r3, [pc, #64]	; (8018058 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8018018:	2124      	movs	r1, #36	; 0x24
 801801a:	4a0d      	ldr	r2, [pc, #52]	; (8018050 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801801c:	e7f6      	b.n	801800c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801801e:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8018022:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018024:	b913      	cbnz	r3, 801802c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8018026:	6281      	str	r1, [r0, #40]	; 0x28
 8018028:	bd08      	pop	{r3, pc}
 801802a:	4613      	mov	r3, r2
 801802c:	699a      	ldr	r2, [r3, #24]
 801802e:	b12a      	cbz	r2, 801803c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8018030:	428b      	cmp	r3, r1
 8018032:	d1fa      	bne.n	801802a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8018034:	4b09      	ldr	r3, [pc, #36]	; (801805c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8018036:	2135      	movs	r1, #53	; 0x35
 8018038:	4a05      	ldr	r2, [pc, #20]	; (8018050 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801803a:	e7e7      	b.n	801800c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801803c:	428b      	cmp	r3, r1
 801803e:	d103      	bne.n	8018048 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8018040:	4b06      	ldr	r3, [pc, #24]	; (801805c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8018042:	2138      	movs	r1, #56	; 0x38
 8018044:	4a02      	ldr	r2, [pc, #8]	; (8018050 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018046:	e7e1      	b.n	801800c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8018048:	6199      	str	r1, [r3, #24]
 801804a:	e7ed      	b.n	8018028 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801804c:	0802e759 	.word	0x0802e759
 8018050:	0802e8b0 	.word	0x0802e8b0
 8018054:	0802e785 	.word	0x0802e785
 8018058:	0802e7b8 	.word	0x0802e7b8
 801805c:	0802e7ee 	.word	0x0802e7ee

08018060 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8018060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018064:	461f      	mov	r7, r3
 8018066:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801806a:	460d      	mov	r5, r1
 801806c:	4616      	mov	r6, r2
 801806e:	b103      	cbz	r3, 8018072 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8018070:	6038      	str	r0, [r7, #0]
 8018072:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018074:	b314      	cbz	r4, 80180bc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8018076:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801807a:	b1eb      	cbz	r3, 80180b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801807c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018080:	428d      	cmp	r5, r1
 8018082:	db19      	blt.n	80180b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018084:	b289      	uxth	r1, r1
 8018086:	8923      	ldrh	r3, [r4, #8]
 8018088:	440b      	add	r3, r1
 801808a:	b21b      	sxth	r3, r3
 801808c:	429d      	cmp	r5, r3
 801808e:	da13      	bge.n	80180b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018090:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018094:	4296      	cmp	r6, r2
 8018096:	db0f      	blt.n	80180b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018098:	b292      	uxth	r2, r2
 801809a:	8963      	ldrh	r3, [r4, #10]
 801809c:	4413      	add	r3, r2
 801809e:	b21b      	sxth	r3, r3
 80180a0:	429e      	cmp	r6, r3
 80180a2:	da09      	bge.n	80180b8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80180a4:	6823      	ldr	r3, [r4, #0]
 80180a6:	1ab2      	subs	r2, r6, r2
 80180a8:	1a69      	subs	r1, r5, r1
 80180aa:	4620      	mov	r0, r4
 80180ac:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80180b0:	b212      	sxth	r2, r2
 80180b2:	463b      	mov	r3, r7
 80180b4:	b209      	sxth	r1, r1
 80180b6:	47c0      	blx	r8
 80180b8:	69a4      	ldr	r4, [r4, #24]
 80180ba:	e7db      	b.n	8018074 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80180bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080180c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80180c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180c4:	4c6d      	ldr	r4, [pc, #436]	; (801827c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80180c6:	b0a1      	sub	sp, #132	; 0x84
 80180c8:	4606      	mov	r6, r0
 80180ca:	6824      	ldr	r4, [r4, #0]
 80180cc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80180ce:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80180d2:	2400      	movs	r4, #0
 80180d4:	9303      	str	r3, [sp, #12]
 80180d6:	802c      	strh	r4, [r5, #0]
 80180d8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80180da:	802c      	strh	r4, [r5, #0]
 80180dc:	601c      	str	r4, [r3, #0]
 80180de:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80180e2:	f7ff ffbd 	bl	8018060 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80180e6:	f1b9 0f03 	cmp.w	r9, #3
 80180ea:	f340 80c1 	ble.w	8018270 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 80180ee:	4631      	mov	r1, r6
 80180f0:	a80c      	add	r0, sp, #48	; 0x30
 80180f2:	f007 fc41 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80180f6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80180fa:	9306      	str	r3, [sp, #24]
 80180fc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018100:	9307      	str	r3, [sp, #28]
 8018102:	9b03      	ldr	r3, [sp, #12]
 8018104:	f8d3 a000 	ldr.w	sl, [r3]
 8018108:	f1ba 0f00 	cmp.w	sl, #0
 801810c:	f000 80b3 	beq.w	8018276 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8018110:	4651      	mov	r1, sl
 8018112:	a810      	add	r0, sp, #64	; 0x40
 8018114:	f007 fc30 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018118:	2002      	movs	r0, #2
 801811a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801811e:	9b01      	ldr	r3, [sp, #4]
 8018120:	9a06      	ldr	r2, [sp, #24]
 8018122:	fb91 f1f0 	sdiv	r1, r1, r0
 8018126:	189d      	adds	r5, r3, r2
 8018128:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801812c:	9a07      	ldr	r2, [sp, #28]
 801812e:	4419      	add	r1, r3
 8018130:	9b02      	ldr	r3, [sp, #8]
 8018132:	4413      	add	r3, r2
 8018134:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8018138:	1a6d      	subs	r5, r5, r1
 801813a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801813e:	fb92 f2f0 	sdiv	r2, r2, r0
 8018142:	440a      	add	r2, r1
 8018144:	1a9b      	subs	r3, r3, r2
 8018146:	435b      	muls	r3, r3
 8018148:	fb05 3505 	mla	r5, r5, r5, r3
 801814c:	4f4c      	ldr	r7, [pc, #304]	; (8018280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801814e:	ac10      	add	r4, sp, #64	; 0x40
 8018150:	f1b9 0f0c 	cmp.w	r9, #12
 8018154:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018158:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801815a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801815c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801815e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018160:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8018164:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018168:	f04f 0303 	mov.w	r3, #3
 801816c:	bfd8      	it	le
 801816e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8018172:	f04f 0400 	mov.w	r4, #0
 8018176:	f8cd 9000 	str.w	r9, [sp]
 801817a:	bfcc      	ite	gt
 801817c:	4698      	movgt	r8, r3
 801817e:	fb92 f8f3 	sdivle	r8, r2, r3
 8018182:	1c63      	adds	r3, r4, #1
 8018184:	aa10      	add	r2, sp, #64	; 0x40
 8018186:	f004 0401 	and.w	r4, r4, #1
 801818a:	f04f 0b00 	mov.w	fp, #0
 801818e:	9308      	str	r3, [sp, #32]
 8018190:	9b00      	ldr	r3, [sp, #0]
 8018192:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8018196:	fb93 f3f8 	sdiv	r3, r3, r8
 801819a:	3404      	adds	r4, #4
 801819c:	b29b      	uxth	r3, r3
 801819e:	9304      	str	r3, [sp, #16]
 80181a0:	9a04      	ldr	r2, [sp, #16]
 80181a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80181a6:	fb13 f302 	smulbb	r3, r3, r2
 80181aa:	9a01      	ldr	r2, [sp, #4]
 80181ac:	b29b      	uxth	r3, r3
 80181ae:	1899      	adds	r1, r3, r2
 80181b0:	9305      	str	r3, [sp, #20]
 80181b2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80181b6:	b209      	sxth	r1, r1
 80181b8:	4299      	cmp	r1, r3
 80181ba:	db4d      	blt.n	8018258 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80181bc:	8932      	ldrh	r2, [r6, #8]
 80181be:	4413      	add	r3, r2
 80181c0:	b21b      	sxth	r3, r3
 80181c2:	4299      	cmp	r1, r3
 80181c4:	da48      	bge.n	8018258 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80181c6:	9b04      	ldr	r3, [sp, #16]
 80181c8:	6827      	ldr	r7, [r4, #0]
 80181ca:	fb17 f703 	smulbb	r7, r7, r3
 80181ce:	9b02      	ldr	r3, [sp, #8]
 80181d0:	b2bf      	uxth	r7, r7
 80181d2:	18fa      	adds	r2, r7, r3
 80181d4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80181d8:	b212      	sxth	r2, r2
 80181da:	429a      	cmp	r2, r3
 80181dc:	db3c      	blt.n	8018258 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80181de:	8970      	ldrh	r0, [r6, #10]
 80181e0:	4403      	add	r3, r0
 80181e2:	b21b      	sxth	r3, r3
 80181e4:	429a      	cmp	r2, r3
 80181e6:	da37      	bge.n	8018258 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80181e8:	2300      	movs	r3, #0
 80181ea:	4630      	mov	r0, r6
 80181ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80181ee:	ab0b      	add	r3, sp, #44	; 0x2c
 80181f0:	f7ff ff36 	bl	8018060 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80181f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80181f6:	b37a      	cbz	r2, 8018258 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80181f8:	4552      	cmp	r2, sl
 80181fa:	d02d      	beq.n	8018258 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80181fc:	4611      	mov	r1, r2
 80181fe:	a80e      	add	r0, sp, #56	; 0x38
 8018200:	9209      	str	r2, [sp, #36]	; 0x24
 8018202:	f007 fbb9 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018206:	f04f 0e02 	mov.w	lr, #2
 801820a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801820e:	9a06      	ldr	r2, [sp, #24]
 8018210:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8018214:	9b01      	ldr	r3, [sp, #4]
 8018216:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801821a:	4413      	add	r3, r2
 801821c:	9a07      	ldr	r2, [sp, #28]
 801821e:	fb91 f1fe 	sdiv	r1, r1, lr
 8018222:	fb9c fcfe 	sdiv	ip, ip, lr
 8018226:	4401      	add	r1, r0
 8018228:	1a58      	subs	r0, r3, r1
 801822a:	9b02      	ldr	r3, [sp, #8]
 801822c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8018230:	4413      	add	r3, r2
 8018232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018234:	448c      	add	ip, r1
 8018236:	eba3 030c 	sub.w	r3, r3, ip
 801823a:	435b      	muls	r3, r3
 801823c:	fb00 3300 	mla	r3, r0, r0, r3
 8018240:	42ab      	cmp	r3, r5
 8018242:	d208      	bcs.n	8018256 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8018244:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018246:	461d      	mov	r5, r3
 8018248:	9803      	ldr	r0, [sp, #12]
 801824a:	6001      	str	r1, [r0, #0]
 801824c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801824e:	9805      	ldr	r0, [sp, #20]
 8018250:	8008      	strh	r0, [r1, #0]
 8018252:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018254:	800f      	strh	r7, [r1, #0]
 8018256:	4692      	mov	sl, r2
 8018258:	f10b 0b01 	add.w	fp, fp, #1
 801825c:	3408      	adds	r4, #8
 801825e:	f1bb 0f04 	cmp.w	fp, #4
 8018262:	d19d      	bne.n	80181a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8018264:	9b00      	ldr	r3, [sp, #0]
 8018266:	9c08      	ldr	r4, [sp, #32]
 8018268:	444b      	add	r3, r9
 801826a:	4544      	cmp	r4, r8
 801826c:	9300      	str	r3, [sp, #0]
 801826e:	d188      	bne.n	8018182 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8018270:	b021      	add	sp, #132	; 0x84
 8018272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018276:	f04f 35ff 	mov.w	r5, #4294967295
 801827a:	e767      	b.n	801814c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801827c:	2400c8bc 	.word	0x2400c8bc
 8018280:	0802d810 	.word	0x0802d810

08018284 <_ZN8touchgfx4RectaNERKS0_>:
 8018284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018288:	f9b1 7000 	ldrsh.w	r7, [r1]
 801828c:	888c      	ldrh	r4, [r1, #4]
 801828e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018292:	443c      	add	r4, r7
 8018294:	b2a4      	uxth	r4, r4
 8018296:	fa0f f884 	sxth.w	r8, r4
 801829a:	45c1      	cmp	r9, r8
 801829c:	da2f      	bge.n	80182fe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801829e:	8882      	ldrh	r2, [r0, #4]
 80182a0:	444a      	add	r2, r9
 80182a2:	b292      	uxth	r2, r2
 80182a4:	fa0f fe82 	sxth.w	lr, r2
 80182a8:	4577      	cmp	r7, lr
 80182aa:	da28      	bge.n	80182fe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80182ac:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80182b0:	88cb      	ldrh	r3, [r1, #6]
 80182b2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80182b6:	442b      	add	r3, r5
 80182b8:	b21b      	sxth	r3, r3
 80182ba:	429e      	cmp	r6, r3
 80182bc:	da1f      	bge.n	80182fe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80182be:	88c3      	ldrh	r3, [r0, #6]
 80182c0:	4433      	add	r3, r6
 80182c2:	b29b      	uxth	r3, r3
 80182c4:	fa0f fc83 	sxth.w	ip, r3
 80182c8:	4565      	cmp	r5, ip
 80182ca:	da18      	bge.n	80182fe <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80182cc:	454f      	cmp	r7, r9
 80182ce:	bfb8      	it	lt
 80182d0:	464f      	movlt	r7, r9
 80182d2:	42b5      	cmp	r5, r6
 80182d4:	bfb8      	it	lt
 80182d6:	4635      	movlt	r5, r6
 80182d8:	45f0      	cmp	r8, lr
 80182da:	bfd8      	it	le
 80182dc:	4622      	movle	r2, r4
 80182de:	1bd2      	subs	r2, r2, r7
 80182e0:	8082      	strh	r2, [r0, #4]
 80182e2:	884a      	ldrh	r2, [r1, #2]
 80182e4:	88c9      	ldrh	r1, [r1, #6]
 80182e6:	8007      	strh	r7, [r0, #0]
 80182e8:	440a      	add	r2, r1
 80182ea:	8045      	strh	r5, [r0, #2]
 80182ec:	b292      	uxth	r2, r2
 80182ee:	b211      	sxth	r1, r2
 80182f0:	458c      	cmp	ip, r1
 80182f2:	bfa8      	it	ge
 80182f4:	4613      	movge	r3, r2
 80182f6:	1b5b      	subs	r3, r3, r5
 80182f8:	80c3      	strh	r3, [r0, #6]
 80182fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182fe:	2300      	movs	r3, #0
 8018300:	8003      	strh	r3, [r0, #0]
 8018302:	8043      	strh	r3, [r0, #2]
 8018304:	8083      	strh	r3, [r0, #4]
 8018306:	80c3      	strh	r3, [r0, #6]
 8018308:	e7f7      	b.n	80182fa <_ZN8touchgfx4RectaNERKS0_+0x76>

0801830a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801830a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801830e:	2b00      	cmp	r3, #0
 8018310:	dd06      	ble.n	8018320 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8018312:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8018316:	2800      	cmp	r0, #0
 8018318:	bfcc      	ite	gt
 801831a:	2000      	movgt	r0, #0
 801831c:	2001      	movle	r0, #1
 801831e:	4770      	bx	lr
 8018320:	2001      	movs	r0, #1
 8018322:	4770      	bx	lr

08018324 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8018324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018328:	2300      	movs	r3, #0
 801832a:	4604      	mov	r4, r0
 801832c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801832e:	8003      	strh	r3, [r0, #0]
 8018330:	8043      	strh	r3, [r0, #2]
 8018332:	8083      	strh	r3, [r0, #4]
 8018334:	80c3      	strh	r3, [r0, #6]
 8018336:	2d00      	cmp	r5, #0
 8018338:	d040      	beq.n	80183bc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801833a:	1d28      	adds	r0, r5, #4
 801833c:	f7ff ffe5 	bl	801830a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018340:	b988      	cbnz	r0, 8018366 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018342:	4620      	mov	r0, r4
 8018344:	f7ff ffe1 	bl	801830a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018348:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801834c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018350:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8018354:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8018358:	b138      	cbz	r0, 801836a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801835a:	8022      	strh	r2, [r4, #0]
 801835c:	8063      	strh	r3, [r4, #2]
 801835e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8018362:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018366:	69ad      	ldr	r5, [r5, #24]
 8018368:	e7e5      	b.n	8018336 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801836a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801836e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018372:	4290      	cmp	r0, r2
 8018374:	4607      	mov	r7, r0
 8018376:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801837a:	460e      	mov	r6, r1
 801837c:	bfa8      	it	ge
 801837e:	4617      	movge	r7, r2
 8018380:	4299      	cmp	r1, r3
 8018382:	4472      	add	r2, lr
 8018384:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8018388:	bfa8      	it	ge
 801838a:	461e      	movge	r6, r3
 801838c:	4440      	add	r0, r8
 801838e:	4471      	add	r1, lr
 8018390:	4463      	add	r3, ip
 8018392:	b200      	sxth	r0, r0
 8018394:	8027      	strh	r7, [r4, #0]
 8018396:	b212      	sxth	r2, r2
 8018398:	8066      	strh	r6, [r4, #2]
 801839a:	b209      	sxth	r1, r1
 801839c:	b21b      	sxth	r3, r3
 801839e:	4290      	cmp	r0, r2
 80183a0:	bfac      	ite	ge
 80183a2:	ebc7 0200 	rsbge	r2, r7, r0
 80183a6:	ebc7 0202 	rsblt	r2, r7, r2
 80183aa:	4299      	cmp	r1, r3
 80183ac:	bfac      	ite	ge
 80183ae:	ebc6 0301 	rsbge	r3, r6, r1
 80183b2:	ebc6 0303 	rsblt	r3, r6, r3
 80183b6:	80a2      	strh	r2, [r4, #4]
 80183b8:	80e3      	strh	r3, [r4, #6]
 80183ba:	e7d4      	b.n	8018366 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80183bc:	4620      	mov	r0, r4
 80183be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080183c2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80183c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80183c6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80183ca:	b383      	cbz	r3, 801842e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80183cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80183ce:	b374      	cbz	r4, 801842e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80183d0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80183d4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80183d8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80183dc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80183e0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80183e4:	b303      	cbz	r3, 8018428 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80183e6:	4668      	mov	r0, sp
 80183e8:	1d21      	adds	r1, r4, #4
 80183ea:	f8ad 5000 	strh.w	r5, [sp]
 80183ee:	f8ad 6002 	strh.w	r6, [sp, #2]
 80183f2:	f8ad 7004 	strh.w	r7, [sp, #4]
 80183f6:	f8ad 8006 	strh.w	r8, [sp, #6]
 80183fa:	f7ff ff43 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 80183fe:	4668      	mov	r0, sp
 8018400:	f7ff ff83 	bl	801830a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018404:	b980      	cbnz	r0, 8018428 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018406:	f8bd 3000 	ldrh.w	r3, [sp]
 801840a:	4669      	mov	r1, sp
 801840c:	88a2      	ldrh	r2, [r4, #4]
 801840e:	4620      	mov	r0, r4
 8018410:	1a9b      	subs	r3, r3, r2
 8018412:	88e2      	ldrh	r2, [r4, #6]
 8018414:	f8ad 3000 	strh.w	r3, [sp]
 8018418:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801841c:	1a9b      	subs	r3, r3, r2
 801841e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018422:	6823      	ldr	r3, [r4, #0]
 8018424:	689b      	ldr	r3, [r3, #8]
 8018426:	4798      	blx	r3
 8018428:	69a4      	ldr	r4, [r4, #24]
 801842a:	2c00      	cmp	r4, #0
 801842c:	d1d8      	bne.n	80183e0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801842e:	b002      	add	sp, #8
 8018430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018434 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8018434:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018436:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801843a:	460d      	mov	r5, r1
 801843c:	4616      	mov	r6, r2
 801843e:	b323      	cbz	r3, 801848a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018440:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018442:	b314      	cbz	r4, 801848a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018444:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018448:	b1eb      	cbz	r3, 8018486 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801844a:	6828      	ldr	r0, [r5, #0]
 801844c:	466b      	mov	r3, sp
 801844e:	6869      	ldr	r1, [r5, #4]
 8018450:	c303      	stmia	r3!, {r0, r1}
 8018452:	4668      	mov	r0, sp
 8018454:	1d21      	adds	r1, r4, #4
 8018456:	f7ff ff15 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 801845a:	4668      	mov	r0, sp
 801845c:	f7ff ff55 	bl	801830a <_ZNK8touchgfx4Rect7isEmptyEv>
 8018460:	b988      	cbnz	r0, 8018486 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018462:	f8bd 3000 	ldrh.w	r3, [sp]
 8018466:	4669      	mov	r1, sp
 8018468:	88a2      	ldrh	r2, [r4, #4]
 801846a:	4620      	mov	r0, r4
 801846c:	1a9b      	subs	r3, r3, r2
 801846e:	88e2      	ldrh	r2, [r4, #6]
 8018470:	f8ad 3000 	strh.w	r3, [sp]
 8018474:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018478:	1a9b      	subs	r3, r3, r2
 801847a:	4632      	mov	r2, r6
 801847c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018480:	6823      	ldr	r3, [r4, #0]
 8018482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018484:	4798      	blx	r3
 8018486:	69a4      	ldr	r4, [r4, #24]
 8018488:	e7db      	b.n	8018442 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801848a:	b002      	add	sp, #8
 801848c:	bd70      	pop	{r4, r5, r6, pc}

0801848e <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 801848e:	4770      	bx	lr

08018490 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8018490:	4770      	bx	lr

08018492 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8018492:	6803      	ldr	r3, [r0, #0]
 8018494:	b513      	push	{r0, r1, r4, lr}
 8018496:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 801849a:	2300      	movs	r3, #0
 801849c:	e9cd 3300 	strd	r3, r3, [sp]
 80184a0:	466b      	mov	r3, sp
 80184a2:	47a0      	blx	r4
 80184a4:	b002      	add	sp, #8
 80184a6:	bd10      	pop	{r4, pc}

080184a8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80184a8:	2301      	movs	r3, #1
 80184aa:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80184ae:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80184b2:	4770      	bx	lr

080184b4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80184b4:	2301      	movs	r3, #1
 80184b6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80184ba:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80184be:	4770      	bx	lr

080184c0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80184c0:	6843      	ldr	r3, [r0, #4]
 80184c2:	2201      	movs	r2, #1
 80184c4:	725a      	strb	r2, [r3, #9]
 80184c6:	6840      	ldr	r0, [r0, #4]
 80184c8:	6803      	ldr	r3, [r0, #0]
 80184ca:	691b      	ldr	r3, [r3, #16]
 80184cc:	4718      	bx	r3

080184ce <_ZN8touchgfx3HAL8flushDMAEv>:
 80184ce:	6840      	ldr	r0, [r0, #4]
 80184d0:	6803      	ldr	r3, [r0, #0]
 80184d2:	689b      	ldr	r3, [r3, #8]
 80184d4:	4718      	bx	r3

080184d6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80184d6:	b530      	push	{r4, r5, lr}
 80184d8:	b08b      	sub	sp, #44	; 0x2c
 80184da:	6804      	ldr	r4, [r0, #0]
 80184dc:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80184e0:	9509      	str	r5, [sp, #36]	; 0x24
 80184e2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80184e6:	9508      	str	r5, [sp, #32]
 80184e8:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80184ec:	9507      	str	r5, [sp, #28]
 80184ee:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80184f2:	9506      	str	r5, [sp, #24]
 80184f4:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80184f8:	9505      	str	r5, [sp, #20]
 80184fa:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80184fe:	9504      	str	r5, [sp, #16]
 8018500:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8018504:	9503      	str	r5, [sp, #12]
 8018506:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801850a:	9502      	str	r5, [sp, #8]
 801850c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8018510:	e9cd 3500 	strd	r3, r5, [sp]
 8018514:	4613      	mov	r3, r2
 8018516:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8018518:	2200      	movs	r2, #0
 801851a:	47a0      	blx	r4
 801851c:	b00b      	add	sp, #44	; 0x2c
 801851e:	bd30      	pop	{r4, r5, pc}

08018520 <_ZN8touchgfx3HAL10beginFrameEv>:
 8018520:	4b04      	ldr	r3, [pc, #16]	; (8018534 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8018522:	781b      	ldrb	r3, [r3, #0]
 8018524:	b123      	cbz	r3, 8018530 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8018526:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801852a:	f080 0001 	eor.w	r0, r0, #1
 801852e:	4770      	bx	lr
 8018530:	2001      	movs	r0, #1
 8018532:	4770      	bx	lr
 8018534:	2400c8ba 	.word	0x2400c8ba

08018538 <_ZN8touchgfx3HAL8endFrameEv>:
 8018538:	b510      	push	{r4, lr}
 801853a:	4604      	mov	r4, r0
 801853c:	6840      	ldr	r0, [r0, #4]
 801853e:	6803      	ldr	r3, [r0, #0]
 8018540:	689b      	ldr	r3, [r3, #8]
 8018542:	4798      	blx	r3
 8018544:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8018548:	b113      	cbz	r3, 8018550 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801854a:	2301      	movs	r3, #1
 801854c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018550:	bd10      	pop	{r4, pc}

08018552 <_ZN8touchgfx3HAL10initializeEv>:
 8018552:	b510      	push	{r4, lr}
 8018554:	4604      	mov	r4, r0
 8018556:	f7e8 fce3 	bl	8000f20 <_ZN8touchgfx10OSWrappers10initializeEv>
 801855a:	6860      	ldr	r0, [r4, #4]
 801855c:	6803      	ldr	r3, [r0, #0]
 801855e:	68db      	ldr	r3, [r3, #12]
 8018560:	4798      	blx	r3
 8018562:	68e0      	ldr	r0, [r4, #12]
 8018564:	6803      	ldr	r3, [r0, #0]
 8018566:	689b      	ldr	r3, [r3, #8]
 8018568:	4798      	blx	r3
 801856a:	6823      	ldr	r3, [r4, #0]
 801856c:	4620      	mov	r0, r4
 801856e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018574:	4718      	bx	r3

08018576 <_ZN8touchgfx3HAL9taskEntryEv>:
 8018576:	b508      	push	{r3, lr}
 8018578:	6803      	ldr	r3, [r0, #0]
 801857a:	4604      	mov	r4, r0
 801857c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801857e:	4798      	blx	r3
 8018580:	6823      	ldr	r3, [r4, #0]
 8018582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018584:	4620      	mov	r0, r4
 8018586:	4798      	blx	r3
 8018588:	f7e8 fd40 	bl	800100c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801858c:	6823      	ldr	r3, [r4, #0]
 801858e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018590:	e7f8      	b.n	8018584 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08018594 <_ZN8touchgfx3HAL4tickEv>:
 8018594:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018596:	6803      	ldr	r3, [r0, #0]
 8018598:	4604      	mov	r4, r0
 801859a:	4d5c      	ldr	r5, [pc, #368]	; (801870c <_ZN8touchgfx3HAL4tickEv+0x178>)
 801859c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80185a0:	4798      	blx	r3
 80185a2:	2800      	cmp	r0, #0
 80185a4:	f000 8097 	beq.w	80186d6 <_ZN8touchgfx3HAL4tickEv+0x142>
 80185a8:	2001      	movs	r0, #1
 80185aa:	2600      	movs	r6, #0
 80185ac:	f7e8 f97c 	bl	80008a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80185b0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80185b4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80185b8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80185bc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80185c0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80185c4:	b133      	cbz	r3, 80185d4 <_ZN8touchgfx3HAL4tickEv+0x40>
 80185c6:	6823      	ldr	r3, [r4, #0]
 80185c8:	4620      	mov	r0, r4
 80185ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80185ce:	4798      	blx	r3
 80185d0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80185d4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80185d8:	2601      	movs	r6, #1
 80185da:	6862      	ldr	r2, [r4, #4]
 80185dc:	f083 0301 	eor.w	r3, r3, #1
 80185e0:	702e      	strb	r6, [r5, #0]
 80185e2:	7253      	strb	r3, [r2, #9]
 80185e4:	f006 f966 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 80185e8:	6803      	ldr	r3, [r0, #0]
 80185ea:	4631      	mov	r1, r6
 80185ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185ee:	4798      	blx	r3
 80185f0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80185f4:	b90b      	cbnz	r3, 80185fa <_ZN8touchgfx3HAL4tickEv+0x66>
 80185f6:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80185fa:	f006 f95b 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 80185fe:	6803      	ldr	r3, [r0, #0]
 8018600:	695b      	ldr	r3, [r3, #20]
 8018602:	4798      	blx	r3
 8018604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018606:	6803      	ldr	r3, [r0, #0]
 8018608:	691b      	ldr	r3, [r3, #16]
 801860a:	4798      	blx	r3
 801860c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018610:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8018614:	3b01      	subs	r3, #1
 8018616:	b2db      	uxtb	r3, r3
 8018618:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801861c:	b10a      	cbz	r2, 8018622 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801861e:	2b00      	cmp	r3, #0
 8018620:	d1eb      	bne.n	80185fa <_ZN8touchgfx3HAL4tickEv+0x66>
 8018622:	4a3b      	ldr	r2, [pc, #236]	; (8018710 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8018624:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8018628:	7813      	ldrb	r3, [r2, #0]
 801862a:	3301      	adds	r3, #1
 801862c:	b25b      	sxtb	r3, r3
 801862e:	4299      	cmp	r1, r3
 8018630:	7013      	strb	r3, [r2, #0]
 8018632:	dc10      	bgt.n	8018656 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018634:	2300      	movs	r3, #0
 8018636:	68e0      	ldr	r0, [r4, #12]
 8018638:	a902      	add	r1, sp, #8
 801863a:	7013      	strb	r3, [r2, #0]
 801863c:	aa03      	add	r2, sp, #12
 801863e:	6803      	ldr	r3, [r0, #0]
 8018640:	68db      	ldr	r3, [r3, #12]
 8018642:	4798      	blx	r3
 8018644:	6823      	ldr	r3, [r4, #0]
 8018646:	2800      	cmp	r0, #0
 8018648:	d051      	beq.n	80186ee <_ZN8touchgfx3HAL4tickEv+0x15a>
 801864a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801864e:	4620      	mov	r0, r4
 8018650:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018654:	4798      	blx	r3
 8018656:	2300      	movs	r3, #0
 8018658:	6960      	ldr	r0, [r4, #20]
 801865a:	f88d 3007 	strb.w	r3, [sp, #7]
 801865e:	b158      	cbz	r0, 8018678 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018660:	6803      	ldr	r3, [r0, #0]
 8018662:	f10d 0107 	add.w	r1, sp, #7
 8018666:	68db      	ldr	r3, [r3, #12]
 8018668:	4798      	blx	r3
 801866a:	b128      	cbz	r0, 8018678 <_ZN8touchgfx3HAL4tickEv+0xe4>
 801866c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801866e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018672:	6803      	ldr	r3, [r0, #0]
 8018674:	68db      	ldr	r3, [r3, #12]
 8018676:	4798      	blx	r3
 8018678:	f104 001c 	add.w	r0, r4, #28
 801867c:	f011 fa4e 	bl	8029b1c <_ZN8touchgfx8Gestures4tickEv>
 8018680:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8018684:	b30b      	cbz	r3, 80186ca <_ZN8touchgfx3HAL4tickEv+0x136>
 8018686:	6920      	ldr	r0, [r4, #16]
 8018688:	6803      	ldr	r3, [r0, #0]
 801868a:	691b      	ldr	r3, [r3, #16]
 801868c:	4798      	blx	r3
 801868e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018690:	4606      	mov	r6, r0
 8018692:	b903      	cbnz	r3, 8018696 <_ZN8touchgfx3HAL4tickEv+0x102>
 8018694:	6720      	str	r0, [r4, #112]	; 0x70
 8018696:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018698:	4a1e      	ldr	r2, [pc, #120]	; (8018714 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801869a:	1af3      	subs	r3, r6, r3
 801869c:	4293      	cmp	r3, r2
 801869e:	d914      	bls.n	80186ca <_ZN8touchgfx3HAL4tickEv+0x136>
 80186a0:	6920      	ldr	r0, [r4, #16]
 80186a2:	6803      	ldr	r3, [r0, #0]
 80186a4:	699b      	ldr	r3, [r3, #24]
 80186a6:	4798      	blx	r3
 80186a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80186aa:	2264      	movs	r2, #100	; 0x64
 80186ac:	1af3      	subs	r3, r6, r3
 80186ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80186b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80186b6:	2800      	cmp	r0, #0
 80186b8:	dc1e      	bgt.n	80186f8 <_ZN8touchgfx3HAL4tickEv+0x164>
 80186ba:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80186be:	6920      	ldr	r0, [r4, #16]
 80186c0:	2100      	movs	r1, #0
 80186c2:	6803      	ldr	r3, [r0, #0]
 80186c4:	69db      	ldr	r3, [r3, #28]
 80186c6:	4798      	blx	r3
 80186c8:	6726      	str	r6, [r4, #112]	; 0x70
 80186ca:	f006 f8f3 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 80186ce:	6803      	ldr	r3, [r0, #0]
 80186d0:	2100      	movs	r1, #0
 80186d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186d4:	4798      	blx	r3
 80186d6:	6823      	ldr	r3, [r4, #0]
 80186d8:	4620      	mov	r0, r4
 80186da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80186de:	4798      	blx	r3
 80186e0:	2001      	movs	r0, #1
 80186e2:	f7e8 f921 	bl	8000928 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80186e6:	2300      	movs	r3, #0
 80186e8:	702b      	strb	r3, [r5, #0]
 80186ea:	b004      	add	sp, #16
 80186ec:	bd70      	pop	{r4, r5, r6, pc}
 80186ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80186f2:	4620      	mov	r0, r4
 80186f4:	4798      	blx	r3
 80186f6:	e7ae      	b.n	8018656 <_ZN8touchgfx3HAL4tickEv+0xc2>
 80186f8:	2863      	cmp	r0, #99	; 0x63
 80186fa:	bfcb      	itete	gt
 80186fc:	2300      	movgt	r3, #0
 80186fe:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8018702:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8018706:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801870a:	e7d8      	b.n	80186be <_ZN8touchgfx3HAL4tickEv+0x12a>
 801870c:	2400c8c0 	.word	0x2400c8c0
 8018710:	2400c8c1 	.word	0x2400c8c1
 8018714:	05f5e100 	.word	0x05f5e100

08018718 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8018718:	f7e8 bc44 	b.w	8000fa4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801871c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801871c:	6581      	str	r1, [r0, #88]	; 0x58
 801871e:	301c      	adds	r0, #28
 8018720:	f011 b9fa 	b.w	8029b18 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08018724 <_ZN8touchgfx3HAL5touchEll>:
 8018724:	b530      	push	{r4, r5, lr}
 8018726:	b087      	sub	sp, #28
 8018728:	4604      	mov	r4, r0
 801872a:	a804      	add	r0, sp, #16
 801872c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018730:	f005 fecc 	bl	801e4cc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8018734:	9b04      	ldr	r3, [sp, #16]
 8018736:	a906      	add	r1, sp, #24
 8018738:	a803      	add	r0, sp, #12
 801873a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801873e:	9b05      	ldr	r3, [sp, #20]
 8018740:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8018744:	f005 ff14 	bl	801e570 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018748:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801874c:	f104 001c 	add.w	r0, r4, #28
 8018750:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018754:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018758:	b189      	cbz	r1, 801877e <_ZN8touchgfx3HAL5touchEll+0x5a>
 801875a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801875e:	9300      	str	r3, [sp, #0]
 8018760:	4613      	mov	r3, r2
 8018762:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018766:	462a      	mov	r2, r5
 8018768:	f011 f9e6 	bl	8029b38 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801876c:	b128      	cbz	r0, 801877a <_ZN8touchgfx3HAL5touchEll+0x56>
 801876e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018772:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018774:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018778:	6623      	str	r3, [r4, #96]	; 0x60
 801877a:	b007      	add	sp, #28
 801877c:	bd30      	pop	{r4, r5, pc}
 801877e:	f011 fa1f 	bl	8029bc0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018782:	2301      	movs	r3, #1
 8018784:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018788:	e7f1      	b.n	801876e <_ZN8touchgfx3HAL5touchEll+0x4a>

0801878a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801878a:	b510      	push	{r4, lr}
 801878c:	2b00      	cmp	r3, #0
 801878e:	d046      	beq.n	801881e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018790:	ea81 0002 	eor.w	r0, r1, r2
 8018794:	07c4      	lsls	r4, r0, #31
 8018796:	d508      	bpl.n	80187aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018798:	440b      	add	r3, r1
 801879a:	3a01      	subs	r2, #1
 801879c:	428b      	cmp	r3, r1
 801879e:	d93e      	bls.n	801881e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80187a0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80187a4:	f801 0b01 	strb.w	r0, [r1], #1
 80187a8:	e7f8      	b.n	801879c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80187aa:	07d0      	lsls	r0, r2, #31
 80187ac:	bf42      	ittt	mi
 80187ae:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80187b2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80187b6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80187ba:	2b01      	cmp	r3, #1
 80187bc:	d911      	bls.n	80187e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80187be:	ea81 0402 	eor.w	r4, r1, r2
 80187c2:	4610      	mov	r0, r2
 80187c4:	07a4      	lsls	r4, r4, #30
 80187c6:	d022      	beq.n	801880e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80187c8:	f023 0401 	bic.w	r4, r3, #1
 80187cc:	440c      	add	r4, r1
 80187ce:	428c      	cmp	r4, r1
 80187d0:	4602      	mov	r2, r0
 80187d2:	d904      	bls.n	80187de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80187d4:	8812      	ldrh	r2, [r2, #0]
 80187d6:	3002      	adds	r0, #2
 80187d8:	f821 2b02 	strh.w	r2, [r1], #2
 80187dc:	e7f7      	b.n	80187ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80187de:	f003 0301 	and.w	r3, r3, #1
 80187e2:	f023 0003 	bic.w	r0, r3, #3
 80187e6:	4408      	add	r0, r1
 80187e8:	4288      	cmp	r0, r1
 80187ea:	4614      	mov	r4, r2
 80187ec:	d904      	bls.n	80187f8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80187ee:	6824      	ldr	r4, [r4, #0]
 80187f0:	3204      	adds	r2, #4
 80187f2:	f841 4b04 	str.w	r4, [r1], #4
 80187f6:	e7f7      	b.n	80187e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80187f8:	f003 0303 	and.w	r3, r3, #3
 80187fc:	3a01      	subs	r2, #1
 80187fe:	440b      	add	r3, r1
 8018800:	428b      	cmp	r3, r1
 8018802:	d90c      	bls.n	801881e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018804:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018808:	f801 0b01 	strb.w	r0, [r1], #1
 801880c:	e7f8      	b.n	8018800 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801880e:	0790      	lsls	r0, r2, #30
 8018810:	d0e7      	beq.n	80187e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018812:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018816:	3b02      	subs	r3, #2
 8018818:	f821 0b02 	strh.w	r0, [r1], #2
 801881c:	e7e1      	b.n	80187e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801881e:	2001      	movs	r0, #1
 8018820:	bd10      	pop	{r4, pc}

08018822 <_ZN8touchgfx3HAL7noTouchEv>:
 8018822:	b510      	push	{r4, lr}
 8018824:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8018828:	4604      	mov	r4, r0
 801882a:	b153      	cbz	r3, 8018842 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801882c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8018830:	2101      	movs	r1, #1
 8018832:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8018836:	301c      	adds	r0, #28
 8018838:	f011 f9c2 	bl	8029bc0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801883c:	2300      	movs	r3, #0
 801883e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018842:	bd10      	pop	{r4, pc}

08018844 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018848:	4604      	mov	r4, r0
 801884a:	6980      	ldr	r0, [r0, #24]
 801884c:	b085      	sub	sp, #20
 801884e:	460f      	mov	r7, r1
 8018850:	4690      	mov	r8, r2
 8018852:	4699      	mov	r9, r3
 8018854:	b930      	cbnz	r0, 8018864 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8018856:	4b1c      	ldr	r3, [pc, #112]	; (80188c8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8018858:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801885c:	4a1b      	ldr	r2, [pc, #108]	; (80188cc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801885e:	481c      	ldr	r0, [pc, #112]	; (80188d0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8018860:	f013 f802 	bl	802b868 <__assert_func>
 8018864:	ad04      	add	r5, sp, #16
 8018866:	2600      	movs	r6, #0
 8018868:	f845 6d04 	str.w	r6, [r5, #-4]!
 801886c:	6806      	ldr	r6, [r0, #0]
 801886e:	9501      	str	r5, [sp, #4]
 8018870:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8018874:	9500      	str	r5, [sp, #0]
 8018876:	6835      	ldr	r5, [r6, #0]
 8018878:	47a8      	blx	r5
 801887a:	4d16      	ldr	r5, [pc, #88]	; (80188d4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801887c:	4606      	mov	r6, r0
 801887e:	f8a5 9000 	strh.w	r9, [r5]
 8018882:	f7eb fde9 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 8018886:	6803      	ldr	r3, [r0, #0]
 8018888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801888a:	4798      	blx	r3
 801888c:	2801      	cmp	r0, #1
 801888e:	d012      	beq.n	80188b6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8018890:	d306      	bcc.n	80188a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8018892:	280d      	cmp	r0, #13
 8018894:	d80b      	bhi.n	80188ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018896:	4b10      	ldr	r3, [pc, #64]	; (80188d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8018898:	f240 1167 	movw	r1, #359	; 0x167
 801889c:	4a0b      	ldr	r2, [pc, #44]	; (80188cc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 801889e:	e7de      	b.n	801885e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80188a0:	882b      	ldrh	r3, [r5, #0]
 80188a2:	fb08 7203 	mla	r2, r8, r3, r7
 80188a6:	9b03      	ldr	r3, [sp, #12]
 80188a8:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80188ac:	63e3      	str	r3, [r4, #60]	; 0x3c
 80188ae:	4630      	mov	r0, r6
 80188b0:	b005      	add	sp, #20
 80188b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188b6:	882a      	ldrh	r2, [r5, #0]
 80188b8:	9b03      	ldr	r3, [sp, #12]
 80188ba:	fb08 7202 	mla	r2, r8, r2, r7
 80188be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80188c2:	1a9a      	subs	r2, r3, r2
 80188c4:	63e2      	str	r2, [r4, #60]	; 0x3c
 80188c6:	e7f2      	b.n	80188ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80188c8:	0802ea58 	.word	0x0802ea58
 80188cc:	0802ede7 	.word	0x0802ede7
 80188d0:	0802ea9d 	.word	0x0802ea9d
 80188d4:	2400c8b6 	.word	0x2400c8b6
 80188d8:	0802eac3 	.word	0x0802eac3

080188dc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80188dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188de:	b08b      	sub	sp, #44	; 0x2c
 80188e0:	4617      	mov	r7, r2
 80188e2:	4604      	mov	r4, r0
 80188e4:	460e      	mov	r6, r1
 80188e6:	461d      	mov	r5, r3
 80188e8:	f7eb fdb6 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 80188ec:	6803      	ldr	r3, [r0, #0]
 80188ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188f0:	4798      	blx	r3
 80188f2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80188f6:	9007      	str	r0, [sp, #28]
 80188f8:	4631      	mov	r1, r6
 80188fa:	6822      	ldr	r2, [r4, #0]
 80188fc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018900:	4b0c      	ldr	r3, [pc, #48]	; (8018934 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8018902:	4620      	mov	r0, r4
 8018904:	881b      	ldrh	r3, [r3, #0]
 8018906:	9306      	str	r3, [sp, #24]
 8018908:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801890c:	9305      	str	r3, [sp, #20]
 801890e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018912:	9304      	str	r3, [sp, #16]
 8018914:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018918:	9303      	str	r3, [sp, #12]
 801891a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801891e:	9302      	str	r3, [sp, #8]
 8018920:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018924:	e9cd 5300 	strd	r5, r3, [sp]
 8018928:	463b      	mov	r3, r7
 801892a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801892c:	2200      	movs	r2, #0
 801892e:	47a8      	blx	r5
 8018930:	b00b      	add	sp, #44	; 0x2c
 8018932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018934:	2400c8b6 	.word	0x2400c8b6

08018938 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8018938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801893c:	4698      	mov	r8, r3
 801893e:	6803      	ldr	r3, [r0, #0]
 8018940:	b08b      	sub	sp, #44	; 0x2c
 8018942:	4617      	mov	r7, r2
 8018944:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8018946:	460e      	mov	r6, r1
 8018948:	4b13      	ldr	r3, [pc, #76]	; (8018998 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801894a:	4604      	mov	r4, r0
 801894c:	f8b3 9000 	ldrh.w	r9, [r3]
 8018950:	f7eb fd82 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 8018954:	6803      	ldr	r3, [r0, #0]
 8018956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018958:	4798      	blx	r3
 801895a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801895e:	2200      	movs	r2, #0
 8018960:	4631      	mov	r1, r6
 8018962:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018966:	2302      	movs	r3, #2
 8018968:	4620      	mov	r0, r4
 801896a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801896e:	2301      	movs	r3, #1
 8018970:	9305      	str	r3, [sp, #20]
 8018972:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8018976:	9304      	str	r3, [sp, #16]
 8018978:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801897c:	9303      	str	r3, [sp, #12]
 801897e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018982:	9302      	str	r3, [sp, #8]
 8018984:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018988:	e9cd 8300 	strd	r8, r3, [sp]
 801898c:	463b      	mov	r3, r7
 801898e:	47a8      	blx	r5
 8018990:	b00b      	add	sp, #44	; 0x2c
 8018992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018996:	bf00      	nop
 8018998:	2400c8b6 	.word	0x2400c8b6

0801899c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801899c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80189a0:	4698      	mov	r8, r3
 80189a2:	6803      	ldr	r3, [r0, #0]
 80189a4:	b087      	sub	sp, #28
 80189a6:	460e      	mov	r6, r1
 80189a8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80189aa:	4617      	mov	r7, r2
 80189ac:	4b0f      	ldr	r3, [pc, #60]	; (80189ec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80189ae:	4604      	mov	r4, r0
 80189b0:	f8b3 9000 	ldrh.w	r9, [r3]
 80189b4:	f7eb fd50 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 80189b8:	6803      	ldr	r3, [r0, #0]
 80189ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189bc:	4798      	blx	r3
 80189be:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80189c2:	463a      	mov	r2, r7
 80189c4:	4631      	mov	r1, r6
 80189c6:	f8cd 900c 	str.w	r9, [sp, #12]
 80189ca:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80189ce:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80189d2:	4620      	mov	r0, r4
 80189d4:	9302      	str	r3, [sp, #8]
 80189d6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80189da:	9301      	str	r3, [sp, #4]
 80189dc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80189e0:	9300      	str	r3, [sp, #0]
 80189e2:	4643      	mov	r3, r8
 80189e4:	47a8      	blx	r5
 80189e6:	b007      	add	sp, #28
 80189e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189ec:	2400c8b6 	.word	0x2400c8b6

080189f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80189f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189f4:	4604      	mov	r4, r0
 80189f6:	b08f      	sub	sp, #60	; 0x3c
 80189f8:	4610      	mov	r0, r2
 80189fa:	460d      	mov	r5, r1
 80189fc:	4691      	mov	r9, r2
 80189fe:	461e      	mov	r6, r3
 8018a00:	f008 fdb8 	bl	8021574 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018a04:	2800      	cmp	r0, #0
 8018a06:	f000 809c 	beq.w	8018b42 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8018a0a:	6823      	ldr	r3, [r4, #0]
 8018a0c:	4620      	mov	r0, r4
 8018a0e:	f8df b194 	ldr.w	fp, [pc, #404]	; 8018ba4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8018a12:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8018a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a18:	4798      	blx	r3
 8018a1a:	6823      	ldr	r3, [r4, #0]
 8018a1c:	4620      	mov	r0, r4
 8018a1e:	f8df a188 	ldr.w	sl, [pc, #392]	; 8018ba8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8018a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a24:	4798      	blx	r3
 8018a26:	f8bb 3000 	ldrh.w	r3, [fp]
 8018a2a:	4f5b      	ldr	r7, [pc, #364]	; (8018b98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018a2c:	9301      	str	r3, [sp, #4]
 8018a2e:	f8ba 3000 	ldrh.w	r3, [sl]
 8018a32:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8018a36:	4640      	mov	r0, r8
 8018a38:	9302      	str	r3, [sp, #8]
 8018a3a:	883b      	ldrh	r3, [r7, #0]
 8018a3c:	9303      	str	r3, [sp, #12]
 8018a3e:	4b57      	ldr	r3, [pc, #348]	; (8018b9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018a40:	881a      	ldrh	r2, [r3, #0]
 8018a42:	9305      	str	r3, [sp, #20]
 8018a44:	9204      	str	r2, [sp, #16]
 8018a46:	f008 fe4f 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018a4a:	8038      	strh	r0, [r7, #0]
 8018a4c:	4640      	mov	r0, r8
 8018a4e:	f008 fe85 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018a52:	9b05      	ldr	r3, [sp, #20]
 8018a54:	8018      	strh	r0, [r3, #0]
 8018a56:	4b52      	ldr	r3, [pc, #328]	; (8018ba0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018a58:	781b      	ldrb	r3, [r3, #0]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d174      	bne.n	8018b48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8018a5e:	883b      	ldrh	r3, [r7, #0]
 8018a60:	f8aa 0000 	strh.w	r0, [sl]
 8018a64:	f8ab 3000 	strh.w	r3, [fp]
 8018a68:	4648      	mov	r0, r9
 8018a6a:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8018a6e:	f008 fd81 	bl	8021574 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018a72:	2200      	movs	r2, #0
 8018a74:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8018a78:	4611      	mov	r1, r2
 8018a7a:	4628      	mov	r0, r5
 8018a7c:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8018a80:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8018a84:	f7eb fbf1 	bl	800426a <_ZN8touchgfx8Drawable5setXYEss>
 8018a88:	2301      	movs	r3, #1
 8018a8a:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8018a8e:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8018a92:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	dd5c      	ble.n	8018b54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8018a9a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	dd58      	ble.n	8018b54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8018aa2:	462a      	mov	r2, r5
 8018aa4:	ab0a      	add	r3, sp, #40	; 0x28
 8018aa6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018aaa:	6851      	ldr	r1, [r2, #4]
 8018aac:	c303      	stmia	r3!, {r0, r1}
 8018aae:	4631      	mov	r1, r6
 8018ab0:	a80a      	add	r0, sp, #40	; 0x28
 8018ab2:	f7ff fbe7 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 8018ab6:	4b38      	ldr	r3, [pc, #224]	; (8018b98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018ab8:	2100      	movs	r1, #0
 8018aba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018abe:	4b37      	ldr	r3, [pc, #220]	; (8018b9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018ac0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8018ac4:	aa0a      	add	r2, sp, #40	; 0x28
 8018ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018aca:	910c      	str	r1, [sp, #48]	; 0x30
 8018acc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018ad0:	ab08      	add	r3, sp, #32
 8018ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ad6:	e883 0003 	stmia.w	r3, {r0, r1}
 8018ada:	4618      	mov	r0, r3
 8018adc:	a90c      	add	r1, sp, #48	; 0x30
 8018ade:	f7ff fbd1 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 8018ae2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d13c      	bne.n	8018b62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8018ae8:	2000      	movs	r0, #0
 8018aea:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8018aee:	2600      	movs	r6, #0
 8018af0:	696b      	ldr	r3, [r5, #20]
 8018af2:	a908      	add	r1, sp, #32
 8018af4:	682a      	ldr	r2, [r5, #0]
 8018af6:	4628      	mov	r0, r5
 8018af8:	9305      	str	r3, [sp, #20]
 8018afa:	616e      	str	r6, [r5, #20]
 8018afc:	6892      	ldr	r2, [r2, #8]
 8018afe:	4790      	blx	r2
 8018b00:	9b05      	ldr	r3, [sp, #20]
 8018b02:	4652      	mov	r2, sl
 8018b04:	4649      	mov	r1, r9
 8018b06:	616b      	str	r3, [r5, #20]
 8018b08:	4628      	mov	r0, r5
 8018b0a:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8018b0e:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8018b12:	f7eb fbaa 	bl	800426a <_ZN8touchgfx8Drawable5setXYEss>
 8018b16:	9a01      	ldr	r2, [sp, #4]
 8018b18:	4b22      	ldr	r3, [pc, #136]	; (8018ba4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8018b1a:	4620      	mov	r0, r4
 8018b1c:	801a      	strh	r2, [r3, #0]
 8018b1e:	9a02      	ldr	r2, [sp, #8]
 8018b20:	4b21      	ldr	r3, [pc, #132]	; (8018ba8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8018b22:	801a      	strh	r2, [r3, #0]
 8018b24:	9a03      	ldr	r2, [sp, #12]
 8018b26:	4b1c      	ldr	r3, [pc, #112]	; (8018b98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018b28:	801a      	strh	r2, [r3, #0]
 8018b2a:	4b1c      	ldr	r3, [pc, #112]	; (8018b9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018b2c:	9a04      	ldr	r2, [sp, #16]
 8018b2e:	801a      	strh	r2, [r3, #0]
 8018b30:	6823      	ldr	r3, [r4, #0]
 8018b32:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8018b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b38:	4798      	blx	r3
 8018b3a:	6823      	ldr	r3, [r4, #0]
 8018b3c:	4620      	mov	r0, r4
 8018b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b40:	4798      	blx	r3
 8018b42:	b00f      	add	sp, #60	; 0x3c
 8018b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b48:	883b      	ldrh	r3, [r7, #0]
 8018b4a:	f8ab 0000 	strh.w	r0, [fp]
 8018b4e:	f8aa 3000 	strh.w	r3, [sl]
 8018b52:	e789      	b.n	8018a68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8018b54:	462a      	mov	r2, r5
 8018b56:	ab0a      	add	r3, sp, #40	; 0x28
 8018b58:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018b5c:	6851      	ldr	r1, [r2, #4]
 8018b5e:	c303      	stmia	r3!, {r0, r1}
 8018b60:	e7a9      	b.n	8018ab6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8018b62:	a807      	add	r0, sp, #28
 8018b64:	f008 ff52 	bl	8021a0c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018b68:	4606      	mov	r6, r0
 8018b6a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018b6c:	6803      	ldr	r3, [r0, #0]
 8018b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b70:	4798      	blx	r3
 8018b72:	4286      	cmp	r6, r0
 8018b74:	d1b8      	bne.n	8018ae8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8018b76:	f7eb fc6f 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 8018b7a:	6803      	ldr	r3, [r0, #0]
 8018b7c:	4606      	mov	r6, r0
 8018b7e:	a807      	add	r0, sp, #28
 8018b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b82:	9305      	str	r3, [sp, #20]
 8018b84:	f008 ff42 	bl	8021a0c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018b88:	9b05      	ldr	r3, [sp, #20]
 8018b8a:	4601      	mov	r1, r0
 8018b8c:	4630      	mov	r0, r6
 8018b8e:	4798      	blx	r3
 8018b90:	f080 0001 	eor.w	r0, r0, #1
 8018b94:	b2c0      	uxtb	r0, r0
 8018b96:	e7a8      	b.n	8018aea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018b98:	2400c8b0 	.word	0x2400c8b0
 8018b9c:	2400c8b2 	.word	0x2400c8b2
 8018ba0:	2400c8b4 	.word	0x2400c8b4
 8018ba4:	2400c8b6 	.word	0x2400c8b6
 8018ba8:	2400c8b8 	.word	0x2400c8b8

08018bac <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018bac:	4b07      	ldr	r3, [pc, #28]	; (8018bcc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018bae:	b510      	push	{r4, lr}
 8018bb0:	781b      	ldrb	r3, [r3, #0]
 8018bb2:	4604      	mov	r4, r0
 8018bb4:	b13b      	cbz	r3, 8018bc6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018bb6:	6803      	ldr	r3, [r0, #0]
 8018bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018bba:	4798      	blx	r3
 8018bbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018bbe:	4283      	cmp	r3, r0
 8018bc0:	d101      	bne.n	8018bc6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018bc2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018bc4:	bd10      	pop	{r4, pc}
 8018bc6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018bc8:	e7fc      	b.n	8018bc4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018bca:	bf00      	nop
 8018bcc:	2400c8ba 	.word	0x2400c8ba

08018bd0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bd4:	b088      	sub	sp, #32
 8018bd6:	4692      	mov	sl, r2
 8018bd8:	461d      	mov	r5, r3
 8018bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018bde:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8018be2:	2400      	movs	r4, #0
 8018be4:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8018be8:	4606      	mov	r6, r0
 8018bea:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8018bee:	fb09 a505 	mla	r5, r9, r5, sl
 8018bf2:	9403      	str	r4, [sp, #12]
 8018bf4:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018bf8:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018bfc:	f88d 401c 	strb.w	r4, [sp, #28]
 8018c00:	e9cd 3100 	strd	r3, r1, [sp]
 8018c04:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018c08:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018c0c:	f7ff ffce 	bl	8018bac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018c10:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018c14:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018c18:	f88d 401e 	strb.w	r4, [sp, #30]
 8018c1c:	9504      	str	r5, [sp, #16]
 8018c1e:	f88d 401d 	strb.w	r4, [sp, #29]
 8018c22:	f88d 401f 	strb.w	r4, [sp, #31]
 8018c26:	f1b8 0f00 	cmp.w	r8, #0
 8018c2a:	d000      	beq.n	8018c2e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8018c2c:	b937      	cbnz	r7, 8018c3c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8018c2e:	4b0d      	ldr	r3, [pc, #52]	; (8018c64 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8018c30:	f240 210b 	movw	r1, #523	; 0x20b
 8018c34:	4a0c      	ldr	r2, [pc, #48]	; (8018c68 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8018c36:	480d      	ldr	r0, [pc, #52]	; (8018c6c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8018c38:	f012 fe16 	bl	802b868 <__assert_func>
 8018c3c:	6833      	ldr	r3, [r6, #0]
 8018c3e:	4630      	mov	r0, r6
 8018c40:	9c00      	ldr	r4, [sp, #0]
 8018c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c44:	4798      	blx	r3
 8018c46:	4220      	tst	r0, r4
 8018c48:	d104      	bne.n	8018c54 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8018c4a:	4b09      	ldr	r3, [pc, #36]	; (8018c70 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8018c4c:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8018c50:	4a05      	ldr	r2, [pc, #20]	; (8018c68 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8018c52:	e7f0      	b.n	8018c36 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8018c54:	6870      	ldr	r0, [r6, #4]
 8018c56:	4669      	mov	r1, sp
 8018c58:	6803      	ldr	r3, [r0, #0]
 8018c5a:	685b      	ldr	r3, [r3, #4]
 8018c5c:	4798      	blx	r3
 8018c5e:	b008      	add	sp, #32
 8018c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c64:	0802e8eb 	.word	0x0802e8eb
 8018c68:	0802ec1c 	.word	0x0802ec1c
 8018c6c:	0802ea9d 	.word	0x0802ea9d
 8018c70:	0802e923 	.word	0x0802e923

08018c74 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8018c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c78:	b089      	sub	sp, #36	; 0x24
 8018c7a:	4693      	mov	fp, r2
 8018c7c:	461d      	mov	r5, r3
 8018c7e:	2400      	movs	r4, #0
 8018c80:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8018c84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018c88:	468a      	mov	sl, r1
 8018c8a:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8018c8e:	fb09 b505 	mla	r5, r9, r5, fp
 8018c92:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8018c96:	4606      	mov	r6, r0
 8018c98:	9403      	str	r4, [sp, #12]
 8018c9a:	e9cd 3400 	strd	r3, r4, [sp]
 8018c9e:	f7ff ff85 	bl	8018bac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018ca2:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018ca6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018caa:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018cae:	f8ad 4018 	strh.w	r4, [sp, #24]
 8018cb2:	9504      	str	r5, [sp, #16]
 8018cb4:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018cb8:	f8cd a00c 	str.w	sl, [sp, #12]
 8018cbc:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018cc0:	f88d 401e 	strb.w	r4, [sp, #30]
 8018cc4:	f88d 401f 	strb.w	r4, [sp, #31]
 8018cc8:	f1b8 0f00 	cmp.w	r8, #0
 8018ccc:	d000      	beq.n	8018cd0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8018cce:	b937      	cbnz	r7, 8018cde <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8018cd0:	4b0d      	ldr	r3, [pc, #52]	; (8018d08 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8018cd2:	f240 2121 	movw	r1, #545	; 0x221
 8018cd6:	4a0d      	ldr	r2, [pc, #52]	; (8018d0c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018cd8:	480d      	ldr	r0, [pc, #52]	; (8018d10 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8018cda:	f012 fdc5 	bl	802b868 <__assert_func>
 8018cde:	6833      	ldr	r3, [r6, #0]
 8018ce0:	4630      	mov	r0, r6
 8018ce2:	9c00      	ldr	r4, [sp, #0]
 8018ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ce6:	4798      	blx	r3
 8018ce8:	4220      	tst	r0, r4
 8018cea:	d104      	bne.n	8018cf6 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8018cec:	4b09      	ldr	r3, [pc, #36]	; (8018d14 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8018cee:	f240 2122 	movw	r1, #546	; 0x222
 8018cf2:	4a06      	ldr	r2, [pc, #24]	; (8018d0c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018cf4:	e7f0      	b.n	8018cd8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8018cf6:	6870      	ldr	r0, [r6, #4]
 8018cf8:	4669      	mov	r1, sp
 8018cfa:	6803      	ldr	r3, [r0, #0]
 8018cfc:	685b      	ldr	r3, [r3, #4]
 8018cfe:	4798      	blx	r3
 8018d00:	b009      	add	sp, #36	; 0x24
 8018d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d06:	bf00      	nop
 8018d08:	0802e968 	.word	0x0802e968
 8018d0c:	0802ec92 	.word	0x0802ec92
 8018d10:	0802ea9d 	.word	0x0802ea9d
 8018d14:	0802e9a0 	.word	0x0802e9a0

08018d18 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8018d18:	b508      	push	{r3, lr}
 8018d1a:	290d      	cmp	r1, #13
 8018d1c:	d817      	bhi.n	8018d4e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8018d1e:	e8df f001 	tbb	[pc, r1]
 8018d22:	090b      	.short	0x090b
 8018d24:	0d0d0d07 	.word	0x0d0d0d07
 8018d28:	1414140d 	.word	0x1414140d
 8018d2c:	0d0d1414 	.word	0x0d0d1414
 8018d30:	2020      	movs	r0, #32
 8018d32:	bd08      	pop	{r3, pc}
 8018d34:	2018      	movs	r0, #24
 8018d36:	e7fc      	b.n	8018d32 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018d38:	2010      	movs	r0, #16
 8018d3a:	e7fa      	b.n	8018d32 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018d3c:	4b05      	ldr	r3, [pc, #20]	; (8018d54 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8018d3e:	f240 2182 	movw	r1, #642	; 0x282
 8018d42:	4a05      	ldr	r2, [pc, #20]	; (8018d58 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8018d44:	4805      	ldr	r0, [pc, #20]	; (8018d5c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8018d46:	f012 fd8f 	bl	802b868 <__assert_func>
 8018d4a:	2008      	movs	r0, #8
 8018d4c:	e7f1      	b.n	8018d32 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018d4e:	2000      	movs	r0, #0
 8018d50:	e7ef      	b.n	8018d32 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018d52:	bf00      	nop
 8018d54:	0802eb19 	.word	0x0802eb19
 8018d58:	0802efbd 	.word	0x0802efbd
 8018d5c:	0802ea9d 	.word	0x0802ea9d

08018d60 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8018d60:	b570      	push	{r4, r5, r6, lr}
 8018d62:	460d      	mov	r5, r1
 8018d64:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8018d68:	4616      	mov	r6, r2
 8018d6a:	461c      	mov	r4, r3
 8018d6c:	f7ff ffd4 	bl	8018d18 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8018d70:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8018d74:	10c0      	asrs	r0, r0, #3
 8018d76:	fb06 5101 	mla	r1, r6, r1, r5
 8018d7a:	fb00 4001 	mla	r0, r0, r1, r4
 8018d7e:	bd70      	pop	{r4, r5, r6, pc}

08018d80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8018d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d84:	b08a      	sub	sp, #40	; 0x28
 8018d86:	f04f 0c00 	mov.w	ip, #0
 8018d8a:	4604      	mov	r4, r0
 8018d8c:	469a      	mov	sl, r3
 8018d8e:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8018d92:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8018d96:	2d0b      	cmp	r5, #11
 8018d98:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8018d9c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018da0:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8018da4:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8018da8:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8018dac:	f8cd c014 	str.w	ip, [sp, #20]
 8018db0:	d12d      	bne.n	8018e0e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 8018db2:	2080      	movs	r0, #128	; 0x80
 8018db4:	9204      	str	r2, [sp, #16]
 8018db6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018dba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018dbe:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018dc2:	f8ad 701c 	strh.w	r7, [sp, #28]
 8018dc6:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018dce:	4620      	mov	r0, r4
 8018dd0:	f7ff feec 	bl	8018bac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018dd4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8018dd8:	4603      	mov	r3, r0
 8018dda:	4651      	mov	r1, sl
 8018ddc:	4620      	mov	r0, r4
 8018dde:	e9cd 9800 	strd	r9, r8, [sp]
 8018de2:	f7ff ffbd 	bl	8018d60 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018de6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8018dea:	9006      	str	r0, [sp, #24]
 8018dec:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8018df0:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8018df4:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8018df8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018dfc:	b107      	cbz	r7, 8018e00 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8018dfe:	b9d6      	cbnz	r6, 8018e36 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8018e00:	4b17      	ldr	r3, [pc, #92]	; (8018e60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 8018e02:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8018e06:	4a17      	ldr	r2, [pc, #92]	; (8018e64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018e08:	4817      	ldr	r0, [pc, #92]	; (8018e68 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8018e0a:	f012 fd2d 	bl	802b868 <__assert_func>
 8018e0e:	2d02      	cmp	r5, #2
 8018e10:	d108      	bne.n	8018e24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 8018e12:	2bff      	cmp	r3, #255	; 0xff
 8018e14:	d104      	bne.n	8018e20 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 8018e16:	2800      	cmp	r0, #0
 8018e18:	bf14      	ite	ne
 8018e1a:	2040      	movne	r0, #64	; 0x40
 8018e1c:	2020      	moveq	r0, #32
 8018e1e:	e7c9      	b.n	8018db4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018e20:	2040      	movs	r0, #64	; 0x40
 8018e22:	e7c7      	b.n	8018db4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018e24:	2bff      	cmp	r3, #255	; 0xff
 8018e26:	d104      	bne.n	8018e32 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 8018e28:	2800      	cmp	r0, #0
 8018e2a:	bf14      	ite	ne
 8018e2c:	2004      	movne	r0, #4
 8018e2e:	2001      	moveq	r0, #1
 8018e30:	e7c0      	b.n	8018db4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018e32:	2004      	movs	r0, #4
 8018e34:	e7be      	b.n	8018db4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018e36:	6823      	ldr	r3, [r4, #0]
 8018e38:	4620      	mov	r0, r4
 8018e3a:	9d02      	ldr	r5, [sp, #8]
 8018e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e3e:	4798      	blx	r3
 8018e40:	4228      	tst	r0, r5
 8018e42:	d104      	bne.n	8018e4e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8018e44:	4b09      	ldr	r3, [pc, #36]	; (8018e6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8018e46:	f240 11d5 	movw	r1, #469	; 0x1d5
 8018e4a:	4a06      	ldr	r2, [pc, #24]	; (8018e64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018e4c:	e7dc      	b.n	8018e08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8018e4e:	6860      	ldr	r0, [r4, #4]
 8018e50:	a902      	add	r1, sp, #8
 8018e52:	6803      	ldr	r3, [r0, #0]
 8018e54:	685b      	ldr	r3, [r3, #4]
 8018e56:	4798      	blx	r3
 8018e58:	b00a      	add	sp, #40	; 0x28
 8018e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e5e:	bf00      	nop
 8018e60:	0802e8eb 	.word	0x0802e8eb
 8018e64:	0802ee4b 	.word	0x0802ee4b
 8018e68:	0802ea9d 	.word	0x0802ea9d
 8018e6c:	0802e923 	.word	0x0802e923

08018e70 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e74:	b08b      	sub	sp, #44	; 0x2c
 8018e76:	469b      	mov	fp, r3
 8018e78:	4604      	mov	r4, r0
 8018e7a:	4692      	mov	sl, r2
 8018e7c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018e80:	2600      	movs	r6, #0
 8018e82:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8018e86:	4689      	mov	r9, r1
 8018e88:	2fff      	cmp	r7, #255	; 0xff
 8018e8a:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8018e8e:	9605      	str	r6, [sp, #20]
 8018e90:	bf14      	ite	ne
 8018e92:	2308      	movne	r3, #8
 8018e94:	2302      	moveq	r3, #2
 8018e96:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8018e9a:	f7ff fe87 	bl	8018bac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018e9e:	465a      	mov	r2, fp
 8018ea0:	4603      	mov	r3, r0
 8018ea2:	4651      	mov	r1, sl
 8018ea4:	4620      	mov	r0, r4
 8018ea6:	e9cd 8500 	strd	r8, r5, [sp]
 8018eaa:	f7ff ff59 	bl	8018d60 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018eae:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018eb2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8018eb6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018eba:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018ebe:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8018ec2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018ec6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8018eca:	9d02      	ldr	r5, [sp, #8]
 8018ecc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018ed0:	6823      	ldr	r3, [r4, #0]
 8018ed2:	9006      	str	r0, [sp, #24]
 8018ed4:	4620      	mov	r0, r4
 8018ed6:	f8ad 6020 	strh.w	r6, [sp, #32]
 8018eda:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8018ede:	f8cd 9014 	str.w	r9, [sp, #20]
 8018ee2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8018ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ee8:	4798      	blx	r3
 8018eea:	4228      	tst	r0, r5
 8018eec:	d106      	bne.n	8018efc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8018eee:	4b07      	ldr	r3, [pc, #28]	; (8018f0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8018ef0:	f240 2137 	movw	r1, #567	; 0x237
 8018ef4:	4a06      	ldr	r2, [pc, #24]	; (8018f10 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8018ef6:	4807      	ldr	r0, [pc, #28]	; (8018f14 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8018ef8:	f012 fcb6 	bl	802b868 <__assert_func>
 8018efc:	6860      	ldr	r0, [r4, #4]
 8018efe:	a902      	add	r1, sp, #8
 8018f00:	6803      	ldr	r3, [r0, #0]
 8018f02:	685b      	ldr	r3, [r3, #4]
 8018f04:	4798      	blx	r3
 8018f06:	b00b      	add	sp, #44	; 0x2c
 8018f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f0c:	0802e923 	.word	0x0802e923
 8018f10:	0802ef22 	.word	0x0802ef22
 8018f14:	0802ea9d 	.word	0x0802ea9d

08018f18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018f18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018f1c:	461f      	mov	r7, r3
 8018f1e:	4b0b      	ldr	r3, [pc, #44]	; (8018f4c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018f20:	460d      	mov	r5, r1
 8018f22:	4616      	mov	r6, r2
 8018f24:	f8b3 8000 	ldrh.w	r8, [r3]
 8018f28:	4604      	mov	r4, r0
 8018f2a:	f7eb fa95 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 8018f2e:	6803      	ldr	r3, [r0, #0]
 8018f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f32:	4798      	blx	r3
 8018f34:	463b      	mov	r3, r7
 8018f36:	4632      	mov	r2, r6
 8018f38:	4629      	mov	r1, r5
 8018f3a:	e9cd 8000 	strd	r8, r0, [sp]
 8018f3e:	4620      	mov	r0, r4
 8018f40:	f7ff ff0e 	bl	8018d60 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018f44:	b002      	add	sp, #8
 8018f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f4a:	bf00      	nop
 8018f4c:	2400c8b6 	.word	0x2400c8b6

08018f50 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f54:	4698      	mov	r8, r3
 8018f56:	b088      	sub	sp, #32
 8018f58:	2300      	movs	r3, #0
 8018f5a:	4617      	mov	r7, r2
 8018f5c:	4604      	mov	r4, r0
 8018f5e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8018f62:	9303      	str	r3, [sp, #12]
 8018f64:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018f68:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8018f6c:	f8ad 6014 	strh.w	r6, [sp, #20]
 8018f70:	f8ad 5016 	strh.w	r5, [sp, #22]
 8018f74:	e9cd 3100 	strd	r3, r1, [sp]
 8018f78:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018f7c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018f80:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018f84:	f88d 301c 	strb.w	r3, [sp, #28]
 8018f88:	f7ff fe10 	bl	8018bac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018f8c:	4642      	mov	r2, r8
 8018f8e:	4603      	mov	r3, r0
 8018f90:	4639      	mov	r1, r7
 8018f92:	4620      	mov	r0, r4
 8018f94:	f7ff ffc0 	bl	8018f18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018f98:	4b18      	ldr	r3, [pc, #96]	; (8018ffc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8018f9a:	9004      	str	r0, [sp, #16]
 8018f9c:	881b      	ldrh	r3, [r3, #0]
 8018f9e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018fa2:	f7eb fa59 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 8018fa6:	6803      	ldr	r3, [r0, #0]
 8018fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018faa:	4798      	blx	r3
 8018fac:	f88d 001e 	strb.w	r0, [sp, #30]
 8018fb0:	f88d 001d 	strb.w	r0, [sp, #29]
 8018fb4:	b106      	cbz	r6, 8018fb8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8018fb6:	b935      	cbnz	r5, 8018fc6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8018fb8:	4b11      	ldr	r3, [pc, #68]	; (8019000 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8018fba:	f240 11f1 	movw	r1, #497	; 0x1f1
 8018fbe:	4a11      	ldr	r2, [pc, #68]	; (8019004 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018fc0:	4811      	ldr	r0, [pc, #68]	; (8019008 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 8018fc2:	f012 fc51 	bl	802b868 <__assert_func>
 8018fc6:	6823      	ldr	r3, [r4, #0]
 8018fc8:	4620      	mov	r0, r4
 8018fca:	9d00      	ldr	r5, [sp, #0]
 8018fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fce:	4798      	blx	r3
 8018fd0:	4228      	tst	r0, r5
 8018fd2:	d104      	bne.n	8018fde <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 8018fd4:	4b0d      	ldr	r3, [pc, #52]	; (801900c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 8018fd6:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8018fda:	4a0a      	ldr	r2, [pc, #40]	; (8019004 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018fdc:	e7f0      	b.n	8018fc0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8018fde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018fe0:	4669      	mov	r1, sp
 8018fe2:	6860      	ldr	r0, [r4, #4]
 8018fe4:	9303      	str	r3, [sp, #12]
 8018fe6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018fea:	f88d 301f 	strb.w	r3, [sp, #31]
 8018fee:	6803      	ldr	r3, [r0, #0]
 8018ff0:	685b      	ldr	r3, [r3, #4]
 8018ff2:	4798      	blx	r3
 8018ff4:	b008      	add	sp, #32
 8018ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ffa:	bf00      	nop
 8018ffc:	2400c8b6 	.word	0x2400c8b6
 8019000:	0802e8eb 	.word	0x0802e8eb
 8019004:	0802ecf7 	.word	0x0802ecf7
 8019008:	0802ea9d 	.word	0x0802ea9d
 801900c:	0802e923 	.word	0x0802e923

08019010 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8019010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019012:	b08b      	sub	sp, #44	; 0x2c
 8019014:	4604      	mov	r4, r0
 8019016:	466b      	mov	r3, sp
 8019018:	e883 0006 	stmia.w	r3, {r1, r2}
 801901c:	4b20      	ldr	r3, [pc, #128]	; (80190a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801901e:	781b      	ldrb	r3, [r3, #0]
 8019020:	b933      	cbnz	r3, 8019030 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8019022:	4b20      	ldr	r3, [pc, #128]	; (80190a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8019024:	f44f 7112 	mov.w	r1, #584	; 0x248
 8019028:	4a1f      	ldr	r2, [pc, #124]	; (80190a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801902a:	4820      	ldr	r0, [pc, #128]	; (80190ac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801902c:	f012 fc1c 	bl	802b868 <__assert_func>
 8019030:	2301      	movs	r3, #1
 8019032:	2500      	movs	r5, #0
 8019034:	f8bd 6000 	ldrh.w	r6, [sp]
 8019038:	9302      	str	r3, [sp, #8]
 801903a:	6803      	ldr	r3, [r0, #0]
 801903c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8019040:	9505      	str	r5, [sp, #20]
 8019042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019044:	4798      	blx	r3
 8019046:	463a      	mov	r2, r7
 8019048:	4631      	mov	r1, r6
 801904a:	4603      	mov	r3, r0
 801904c:	4620      	mov	r0, r4
 801904e:	f7ff ff63 	bl	8018f18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019052:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019054:	9003      	str	r0, [sp, #12]
 8019056:	9306      	str	r3, [sp, #24]
 8019058:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801905c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019060:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019064:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019068:	4b11      	ldr	r3, [pc, #68]	; (80190b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 801906a:	881b      	ldrh	r3, [r3, #0]
 801906c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019070:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019074:	f7eb f9f0 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 8019078:	6803      	ldr	r3, [r0, #0]
 801907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801907c:	4798      	blx	r3
 801907e:	23ff      	movs	r3, #255	; 0xff
 8019080:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019084:	a902      	add	r1, sp, #8
 8019086:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801908a:	6860      	ldr	r0, [r4, #4]
 801908c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019090:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 8019094:	6803      	ldr	r3, [r0, #0]
 8019096:	685b      	ldr	r3, [r3, #4]
 8019098:	4798      	blx	r3
 801909a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801909c:	b00b      	add	sp, #44	; 0x2c
 801909e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190a0:	2400c8bb 	.word	0x2400c8bb
 80190a4:	0802e9ea 	.word	0x0802e9ea
 80190a8:	0802eda1 	.word	0x0802eda1
 80190ac:	0802ea9d 	.word	0x0802ea9d
 80190b0:	2400c8b6 	.word	0x2400c8b6

080190b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80190b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190b8:	b08a      	sub	sp, #40	; 0x28
 80190ba:	2600      	movs	r6, #0
 80190bc:	4604      	mov	r4, r0
 80190be:	466d      	mov	r5, sp
 80190c0:	9605      	str	r6, [sp, #20]
 80190c2:	e885 0006 	stmia.w	r5, {r1, r2}
 80190c6:	461d      	mov	r5, r3
 80190c8:	2301      	movs	r3, #1
 80190ca:	f8bd 7000 	ldrh.w	r7, [sp]
 80190ce:	9302      	str	r3, [sp, #8]
 80190d0:	6803      	ldr	r3, [r0, #0]
 80190d2:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80190d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190d8:	4798      	blx	r3
 80190da:	4642      	mov	r2, r8
 80190dc:	4639      	mov	r1, r7
 80190de:	4603      	mov	r3, r0
 80190e0:	4620      	mov	r0, r4
 80190e2:	f7ff ff19 	bl	8018f18 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80190e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80190ea:	9003      	str	r0, [sp, #12]
 80190ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80190f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80190f4:	9506      	str	r5, [sp, #24]
 80190f6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80190fa:	4b0f      	ldr	r3, [pc, #60]	; (8019138 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 80190fc:	881b      	ldrh	r3, [r3, #0]
 80190fe:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019102:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019104:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019108:	f7eb f9a6 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 801910c:	6803      	ldr	r3, [r0, #0]
 801910e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019110:	4798      	blx	r3
 8019112:	23ff      	movs	r3, #255	; 0xff
 8019114:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019118:	a902      	add	r1, sp, #8
 801911a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801911e:	6860      	ldr	r0, [r4, #4]
 8019120:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019124:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8019128:	6803      	ldr	r3, [r0, #0]
 801912a:	685b      	ldr	r3, [r3, #4]
 801912c:	4798      	blx	r3
 801912e:	4628      	mov	r0, r5
 8019130:	b00a      	add	sp, #40	; 0x28
 8019132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019136:	bf00      	nop
 8019138:	2400c8b6 	.word	0x2400c8b6

0801913c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801913c:	b570      	push	{r4, r5, r6, lr}
 801913e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8019142:	4604      	mov	r4, r0
 8019144:	b19b      	cbz	r3, 801916e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8019146:	2002      	movs	r0, #2
 8019148:	f7e7 fc2e 	bl	80009a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801914c:	2300      	movs	r3, #0
 801914e:	4620      	mov	r0, r4
 8019150:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019154:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8019158:	6823      	ldr	r3, [r4, #0]
 801915a:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 801915e:	f7ff fd25 	bl	8018bac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019162:	4601      	mov	r1, r0
 8019164:	4620      	mov	r0, r4
 8019166:	462b      	mov	r3, r5
 8019168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801916c:	4718      	bx	r3
 801916e:	bd70      	pop	{r4, r5, r6, pc}

08019170 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8019170:	b538      	push	{r3, r4, r5, lr}
 8019172:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8019176:	4604      	mov	r4, r0
 8019178:	460d      	mov	r5, r1
 801917a:	428a      	cmp	r2, r1
 801917c:	d008      	beq.n	8019190 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 801917e:	2a01      	cmp	r2, #1
 8019180:	6803      	ldr	r3, [r0, #0]
 8019182:	d106      	bne.n	8019192 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8019184:	b929      	cbnz	r1, 8019192 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8019186:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801918a:	4798      	blx	r3
 801918c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8019190:	bd38      	pop	{r3, r4, r5, pc}
 8019192:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019196:	4620      	mov	r0, r4
 8019198:	e7f7      	b.n	801918a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

0801919c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801919c:	4b0d      	ldr	r3, [pc, #52]	; (80191d4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801919e:	b510      	push	{r4, lr}
 80191a0:	781b      	ldrb	r3, [r3, #0]
 80191a2:	4604      	mov	r4, r0
 80191a4:	b95b      	cbnz	r3, 80191be <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80191a6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80191aa:	2b02      	cmp	r3, #2
 80191ac:	d007      	beq.n	80191be <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80191ae:	6840      	ldr	r0, [r0, #4]
 80191b0:	f000 f936 	bl	8019420 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80191b4:	b118      	cbz	r0, 80191be <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80191b6:	6862      	ldr	r2, [r4, #4]
 80191b8:	7a53      	ldrb	r3, [r2, #9]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d0fc      	beq.n	80191b8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80191be:	f7e7 fee3 	bl	8000f88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80191c2:	4620      	mov	r0, r4
 80191c4:	2100      	movs	r1, #0
 80191c6:	f7ff ffd3 	bl	8019170 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80191ca:	4620      	mov	r0, r4
 80191cc:	f7ff fcee 	bl	8018bac <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80191d0:	bd10      	pop	{r4, pc}
 80191d2:	bf00      	nop
 80191d4:	2400c8ba 	.word	0x2400c8ba

080191d8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80191d8:	4770      	bx	lr

080191da <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80191da:	2000      	movs	r0, #0
 80191dc:	4770      	bx	lr

080191de <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80191de:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80191e2:	1a13      	subs	r3, r2, r0
 80191e4:	4258      	negs	r0, r3
 80191e6:	4158      	adcs	r0, r3
 80191e8:	4770      	bx	lr

080191ea <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80191ea:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80191ee:	1a9b      	subs	r3, r3, r2
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	bfdc      	itt	le
 80191f4:	6882      	ldrle	r2, [r0, #8]
 80191f6:	189b      	addle	r3, r3, r2
 80191f8:	2b01      	cmp	r3, #1
 80191fa:	bfcc      	ite	gt
 80191fc:	2000      	movgt	r0, #0
 80191fe:	2001      	movle	r0, #1
 8019200:	4770      	bx	lr

08019202 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8019202:	6902      	ldr	r2, [r0, #16]
 8019204:	6840      	ldr	r0, [r0, #4]
 8019206:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801920a:	4770      	bx	lr

0801920c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801920c:	6803      	ldr	r3, [r0, #0]
 801920e:	691b      	ldr	r3, [r3, #16]
 8019210:	4718      	bx	r3

08019212 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8019212:	4770      	bx	lr

08019214 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8019214:	4770      	bx	lr
	...

08019218 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019218:	2301      	movs	r3, #1
 801921a:	b570      	push	{r4, r5, r6, lr}
 801921c:	7203      	strb	r3, [r0, #8]
 801921e:	4604      	mov	r4, r0
 8019220:	6840      	ldr	r0, [r0, #4]
 8019222:	6803      	ldr	r3, [r0, #0]
 8019224:	699b      	ldr	r3, [r3, #24]
 8019226:	4798      	blx	r3
 8019228:	6803      	ldr	r3, [r0, #0]
 801922a:	4605      	mov	r5, r0
 801922c:	2b40      	cmp	r3, #64	; 0x40
 801922e:	d039      	beq.n	80192a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019230:	d815      	bhi.n	801925e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8019232:	2b04      	cmp	r3, #4
 8019234:	d022      	beq.n	801927c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019236:	d808      	bhi.n	801924a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019238:	2b01      	cmp	r3, #1
 801923a:	d033      	beq.n	80192a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801923c:	2b02      	cmp	r3, #2
 801923e:	d108      	bne.n	8019252 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8019240:	6823      	ldr	r3, [r4, #0]
 8019242:	4620      	mov	r0, r4
 8019244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019246:	4798      	blx	r3
 8019248:	e025      	b.n	8019296 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 801924a:	2b08      	cmp	r3, #8
 801924c:	d01e      	beq.n	801928c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 801924e:	2b20      	cmp	r3, #32
 8019250:	d028      	beq.n	80192a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019252:	4b17      	ldr	r3, [pc, #92]	; (80192b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8019254:	218b      	movs	r1, #139	; 0x8b
 8019256:	4a17      	ldr	r2, [pc, #92]	; (80192b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8019258:	4817      	ldr	r0, [pc, #92]	; (80192b8 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 801925a:	f012 fb05 	bl	802b868 <__assert_func>
 801925e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019262:	d01f      	beq.n	80192a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019264:	d804      	bhi.n	8019270 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8019266:	2b80      	cmp	r3, #128	; 0x80
 8019268:	d01c      	beq.n	80192a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801926a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801926e:	e7ef      	b.n	8019250 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8019270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019274:	d016      	beq.n	80192a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801927a:	e7e0      	b.n	801923e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801927c:	6823      	ldr	r3, [r4, #0]
 801927e:	7f01      	ldrb	r1, [r0, #28]
 8019280:	4620      	mov	r0, r4
 8019282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019284:	4798      	blx	r3
 8019286:	6823      	ldr	r3, [r4, #0]
 8019288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801928a:	e006      	b.n	801929a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801928c:	6823      	ldr	r3, [r4, #0]
 801928e:	7f01      	ldrb	r1, [r0, #28]
 8019290:	4620      	mov	r0, r4
 8019292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019294:	4798      	blx	r3
 8019296:	6823      	ldr	r3, [r4, #0]
 8019298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801929a:	4629      	mov	r1, r5
 801929c:	4620      	mov	r0, r4
 801929e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192a2:	4718      	bx	r3
 80192a4:	6823      	ldr	r3, [r4, #0]
 80192a6:	4620      	mov	r0, r4
 80192a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192aa:	4798      	blx	r3
 80192ac:	e7eb      	b.n	8019286 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80192ae:	bf00      	nop
 80192b0:	0802f006 	.word	0x0802f006
 80192b4:	0802f118 	.word	0x0802f118
 80192b8:	0802f02b 	.word	0x0802f02b

080192bc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80192bc:	b570      	push	{r4, r5, r6, lr}
 80192be:	4604      	mov	r4, r0
 80192c0:	460e      	mov	r6, r1
 80192c2:	6860      	ldr	r0, [r4, #4]
 80192c4:	6803      	ldr	r3, [r0, #0]
 80192c6:	685b      	ldr	r3, [r3, #4]
 80192c8:	4798      	blx	r3
 80192ca:	2800      	cmp	r0, #0
 80192cc:	d1f9      	bne.n	80192c2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80192ce:	4d0d      	ldr	r5, [pc, #52]	; (8019304 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80192d0:	6828      	ldr	r0, [r5, #0]
 80192d2:	6803      	ldr	r3, [r0, #0]
 80192d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80192d6:	4798      	blx	r3
 80192d8:	f7e7 fe70 	bl	8000fbc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80192dc:	6828      	ldr	r0, [r5, #0]
 80192de:	2101      	movs	r1, #1
 80192e0:	f7ff ff46 	bl	8019170 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80192e4:	6860      	ldr	r0, [r4, #4]
 80192e6:	4631      	mov	r1, r6
 80192e8:	6803      	ldr	r3, [r0, #0]
 80192ea:	689b      	ldr	r3, [r3, #8]
 80192ec:	4798      	blx	r3
 80192ee:	6823      	ldr	r3, [r4, #0]
 80192f0:	4620      	mov	r0, r4
 80192f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192f4:	4798      	blx	r3
 80192f6:	6828      	ldr	r0, [r5, #0]
 80192f8:	6803      	ldr	r3, [r0, #0]
 80192fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019300:	4718      	bx	r3
 8019302:	bf00      	nop
 8019304:	2400c8bc 	.word	0x2400c8bc

08019308 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019308:	b508      	push	{r3, lr}
 801930a:	f7e7 fe3d 	bl	8000f88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801930e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019312:	f7e7 be47 	b.w	8000fa4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019316 <_ZN8touchgfx13DMA_Interface5startEv>:
 8019316:	b510      	push	{r4, lr}
 8019318:	4604      	mov	r4, r0
 801931a:	6840      	ldr	r0, [r0, #4]
 801931c:	6803      	ldr	r3, [r0, #0]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	4798      	blx	r3
 8019322:	b948      	cbnz	r0, 8019338 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019324:	7a63      	ldrb	r3, [r4, #9]
 8019326:	b13b      	cbz	r3, 8019338 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019328:	7a23      	ldrb	r3, [r4, #8]
 801932a:	b92b      	cbnz	r3, 8019338 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801932c:	6823      	ldr	r3, [r4, #0]
 801932e:	4620      	mov	r0, r4
 8019330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019336:	4718      	bx	r3
 8019338:	bd10      	pop	{r4, pc}
	...

0801933c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801933c:	b570      	push	{r4, r5, r6, lr}
 801933e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8019342:	4606      	mov	r6, r0
 8019344:	1a9b      	subs	r3, r3, r2
 8019346:	2b00      	cmp	r3, #0
 8019348:	bfdc      	itt	le
 801934a:	6880      	ldrle	r0, [r0, #8]
 801934c:	181b      	addle	r3, r3, r0
 801934e:	2b01      	cmp	r3, #1
 8019350:	dd13      	ble.n	801937a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 8019352:	6874      	ldr	r4, [r6, #4]
 8019354:	460d      	mov	r5, r1
 8019356:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 801935a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801935c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801935e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8019362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019366:	68f3      	ldr	r3, [r6, #12]
 8019368:	68b2      	ldr	r2, [r6, #8]
 801936a:	f3bf 8f5b 	dmb	ish
 801936e:	3301      	adds	r3, #1
 8019370:	429a      	cmp	r2, r3
 8019372:	bfd8      	it	le
 8019374:	1a9b      	suble	r3, r3, r2
 8019376:	60f3      	str	r3, [r6, #12]
 8019378:	bd70      	pop	{r4, r5, r6, pc}
 801937a:	4b03      	ldr	r3, [pc, #12]	; (8019388 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 801937c:	2139      	movs	r1, #57	; 0x39
 801937e:	4a03      	ldr	r2, [pc, #12]	; (801938c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 8019380:	4803      	ldr	r0, [pc, #12]	; (8019390 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8019382:	f012 fa71 	bl	802b868 <__assert_func>
 8019386:	bf00      	nop
 8019388:	0802f051 	.word	0x0802f051
 801938c:	0802f148 	.word	0x0802f148
 8019390:	0802f02b 	.word	0x0802f02b

08019394 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8019394:	b510      	push	{r4, lr}
 8019396:	6803      	ldr	r3, [r0, #0]
 8019398:	4604      	mov	r4, r0
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	4798      	blx	r3
 801939e:	b128      	cbz	r0, 80193ac <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80193a0:	4b07      	ldr	r3, [pc, #28]	; (80193c0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80193a2:	213f      	movs	r1, #63	; 0x3f
 80193a4:	4a07      	ldr	r2, [pc, #28]	; (80193c4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80193a6:	4808      	ldr	r0, [pc, #32]	; (80193c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80193a8:	f012 fa5e 	bl	802b868 <__assert_func>
 80193ac:	6923      	ldr	r3, [r4, #16]
 80193ae:	68a2      	ldr	r2, [r4, #8]
 80193b0:	f3bf 8f5b 	dmb	ish
 80193b4:	3301      	adds	r3, #1
 80193b6:	429a      	cmp	r2, r3
 80193b8:	bfd8      	it	le
 80193ba:	1a9b      	suble	r3, r3, r2
 80193bc:	6123      	str	r3, [r4, #16]
 80193be:	bd10      	pop	{r4, pc}
 80193c0:	0802f074 	.word	0x0802f074
 80193c4:	0802f196 	.word	0x0802f196
 80193c8:	0802f02b 	.word	0x0802f02b

080193cc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80193cc:	b570      	push	{r4, r5, r6, lr}
 80193ce:	4604      	mov	r4, r0
 80193d0:	6840      	ldr	r0, [r0, #4]
 80193d2:	6803      	ldr	r3, [r0, #0]
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	4798      	blx	r3
 80193d8:	4605      	mov	r5, r0
 80193da:	b930      	cbnz	r0, 80193ea <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80193dc:	7a23      	ldrb	r3, [r4, #8]
 80193de:	b123      	cbz	r3, 80193ea <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80193e0:	6860      	ldr	r0, [r4, #4]
 80193e2:	6803      	ldr	r3, [r0, #0]
 80193e4:	695b      	ldr	r3, [r3, #20]
 80193e6:	4798      	blx	r3
 80193e8:	7225      	strb	r5, [r4, #8]
 80193ea:	6860      	ldr	r0, [r4, #4]
 80193ec:	6803      	ldr	r3, [r0, #0]
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	4798      	blx	r3
 80193f2:	b928      	cbnz	r0, 8019400 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80193f4:	6823      	ldr	r3, [r4, #0]
 80193f6:	4620      	mov	r0, r4
 80193f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193fe:	4718      	bx	r3
 8019400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019404:	f7e7 bde6 	b.w	8000fd4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08019408 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019408:	b510      	push	{r4, lr}
 801940a:	6082      	str	r2, [r0, #8]
 801940c:	2200      	movs	r2, #0
 801940e:	4c03      	ldr	r4, [pc, #12]	; (801941c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8019410:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019414:	e9c0 4100 	strd	r4, r1, [r0]
 8019418:	bd10      	pop	{r4, pc}
 801941a:	bf00      	nop
 801941c:	0802f0fc 	.word	0x0802f0fc

08019420 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8019420:	6840      	ldr	r0, [r0, #4]
 8019422:	6803      	ldr	r3, [r0, #0]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	4718      	bx	r3

08019428 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8019428:	2001      	movs	r0, #1
 801942a:	4770      	bx	lr

0801942c <_ZN8touchgfx21AbstractPainterRGB88810renderNextERhS1_S1_S1_>:
 801942c:	2000      	movs	r0, #0
 801942e:	4770      	bx	lr

08019430 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8019430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019434:	460d      	mov	r5, r1
 8019436:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801943a:	b085      	sub	sp, #20
 801943c:	4690      	mov	r8, r2
 801943e:	4411      	add	r1, r2
 8019440:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019444:	4699      	mov	r9, r3
 8019446:	6803      	ldr	r3, [r0, #0]
 8019448:	60c1      	str	r1, [r0, #12]
 801944a:	4604      	mov	r4, r0
 801944c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801944e:	440a      	add	r2, r1
 8019450:	6102      	str	r2, [r0, #16]
 8019452:	68db      	ldr	r3, [r3, #12]
 8019454:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8019458:	4798      	blx	r3
 801945a:	2800      	cmp	r0, #0
 801945c:	d03a      	beq.n	80194d4 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 801945e:	44c8      	add	r8, r9
 8019460:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019464:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019468:	4445      	add	r5, r8
 801946a:	442e      	add	r6, r5
 801946c:	6823      	ldr	r3, [r4, #0]
 801946e:	f10d 020f 	add.w	r2, sp, #15
 8019472:	a903      	add	r1, sp, #12
 8019474:	4620      	mov	r0, r4
 8019476:	9200      	str	r2, [sp, #0]
 8019478:	f10d 020d 	add.w	r2, sp, #13
 801947c:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8019480:	f10d 030e 	add.w	r3, sp, #14
 8019484:	47c0      	blx	r8
 8019486:	b1f0      	cbz	r0, 80194c6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 8019488:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801948c:	7a20      	ldrb	r0, [r4, #8]
 801948e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8019492:	4358      	muls	r0, r3
 8019494:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8019498:	1c43      	adds	r3, r0, #1
 801949a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801949e:	7838      	ldrb	r0, [r7, #0]
 80194a0:	121b      	asrs	r3, r3, #8
 80194a2:	fb10 f003 	smulbb	r0, r0, r3
 80194a6:	b283      	uxth	r3, r0
 80194a8:	1c58      	adds	r0, r3, #1
 80194aa:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80194ae:	6823      	ldr	r3, [r4, #0]
 80194b0:	1200      	asrs	r0, r0, #8
 80194b2:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80194b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80194ba:	28ff      	cmp	r0, #255	; 0xff
 80194bc:	d10d      	bne.n	80194da <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 80194be:	9100      	str	r1, [sp, #0]
 80194c0:	4629      	mov	r1, r5
 80194c2:	4620      	mov	r0, r4
 80194c4:	47c0      	blx	r8
 80194c6:	68e3      	ldr	r3, [r4, #12]
 80194c8:	3503      	adds	r5, #3
 80194ca:	3701      	adds	r7, #1
 80194cc:	3301      	adds	r3, #1
 80194ce:	42ae      	cmp	r6, r5
 80194d0:	60e3      	str	r3, [r4, #12]
 80194d2:	d8cb      	bhi.n	801946c <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 80194d4:	b005      	add	sp, #20
 80194d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194da:	fa1f fc80 	uxth.w	ip, r0
 80194de:	43c0      	mvns	r0, r0
 80194e0:	f895 e002 	ldrb.w	lr, [r5, #2]
 80194e4:	fb12 f20c 	smulbb	r2, r2, ip
 80194e8:	b2c0      	uxtb	r0, r0
 80194ea:	fb13 f30c 	smulbb	r3, r3, ip
 80194ee:	fb0e 2200 	mla	r2, lr, r0, r2
 80194f2:	f895 e001 	ldrb.w	lr, [r5, #1]
 80194f6:	fb11 f10c 	smulbb	r1, r1, ip
 80194fa:	fb0e 3300 	mla	r3, lr, r0, r3
 80194fe:	f895 e000 	ldrb.w	lr, [r5]
 8019502:	b292      	uxth	r2, r2
 8019504:	b29b      	uxth	r3, r3
 8019506:	fb0e 1000 	mla	r0, lr, r0, r1
 801950a:	1c59      	adds	r1, r3, #1
 801950c:	b280      	uxth	r0, r0
 801950e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8019512:	1c51      	adds	r1, r2, #1
 8019514:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019518:	1c41      	adds	r1, r0, #1
 801951a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801951e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8019522:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8019526:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801952a:	9000      	str	r0, [sp, #0]
 801952c:	e7c8      	b.n	80194c0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

0801952e <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801952e:	f89d 0000 	ldrb.w	r0, [sp]
 8019532:	704b      	strb	r3, [r1, #1]
 8019534:	7008      	strb	r0, [r1, #0]
 8019536:	708a      	strb	r2, [r1, #2]
 8019538:	4770      	bx	lr

0801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801953a:	b507      	push	{r0, r1, r2, lr}
 801953c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019540:	ab01      	add	r3, sp, #4
 8019542:	6809      	ldr	r1, [r1, #0]
 8019544:	6800      	ldr	r0, [r0, #0]
 8019546:	f006 fb47 	bl	801fbd8 <_ZN8touchgfx6muldivElllRl>
 801954a:	b003      	add	sp, #12
 801954c:	f85d fb04 	ldr.w	pc, [sp], #4

08019550 <_ZN8touchgfx7CWRUtil4sineEi>:
 8019550:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019554:	fb90 f3f2 	sdiv	r3, r0, r2
 8019558:	fb03 0312 	mls	r3, r3, r2, r0
 801955c:	4413      	add	r3, r2
 801955e:	fb93 f0f2 	sdiv	r0, r3, r2
 8019562:	fb02 3010 	mls	r0, r2, r0, r3
 8019566:	4b0a      	ldr	r3, [pc, #40]	; (8019590 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8019568:	285a      	cmp	r0, #90	; 0x5a
 801956a:	dc02      	bgt.n	8019572 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 801956c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8019570:	4770      	bx	lr
 8019572:	28b4      	cmp	r0, #180	; 0xb4
 8019574:	dc02      	bgt.n	801957c <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8019576:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801957a:	e7f7      	b.n	801956c <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 801957c:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8019580:	bfd4      	ite	le
 8019582:	38b4      	suble	r0, #180	; 0xb4
 8019584:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8019588:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801958c:	4240      	negs	r0, r0
 801958e:	4770      	bx	lr
 8019590:	0802f1e8 	.word	0x0802f1e8

08019594 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8019594:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8019598:	fb90 f3f2 	sdiv	r3, r0, r2
 801959c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801959e:	fb03 0012 	mls	r0, r3, r2, r0
 80195a2:	4410      	add	r0, r2
 80195a4:	fb90 f4f2 	sdiv	r4, r0, r2
 80195a8:	fb02 0414 	mls	r4, r2, r4, r0
 80195ac:	f004 061f 	and.w	r6, r4, #31
 80195b0:	1164      	asrs	r4, r4, #5
 80195b2:	4620      	mov	r0, r4
 80195b4:	f7ff ffcc 	bl	8019550 <_ZN8touchgfx7CWRUtil4sineEi>
 80195b8:	4605      	mov	r5, r0
 80195ba:	b90e      	cbnz	r6, 80195c0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 80195bc:	b002      	add	sp, #8
 80195be:	bd70      	pop	{r4, r5, r6, pc}
 80195c0:	1c60      	adds	r0, r4, #1
 80195c2:	f7ff ffc5 	bl	8019550 <_ZN8touchgfx7CWRUtil4sineEi>
 80195c6:	ab01      	add	r3, sp, #4
 80195c8:	2220      	movs	r2, #32
 80195ca:	4631      	mov	r1, r6
 80195cc:	1b40      	subs	r0, r0, r5
 80195ce:	f006 fb03 	bl	801fbd8 <_ZN8touchgfx6muldivElllRl>
 80195d2:	4428      	add	r0, r5
 80195d4:	e7f2      	b.n	80195bc <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

080195d6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 80195d6:	b508      	push	{r3, lr}
 80195d8:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 80195dc:	f7ff ffda 	bl	8019594 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80195e0:	bd08      	pop	{r3, pc}
	...

080195e4 <_ZN8touchgfx6CircleC1Ev>:
 80195e4:	b510      	push	{r4, lr}
 80195e6:	4604      	mov	r4, r0
 80195e8:	f000 fd7c 	bl	801a0e4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80195ec:	4b08      	ldr	r3, [pc, #32]	; (8019610 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 80195ee:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80195f2:	4620      	mov	r0, r4
 80195f4:	6023      	str	r3, [r4, #0]
 80195f6:	2300      	movs	r3, #0
 80195f8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 80195fc:	f24b 4205 	movw	r2, #46085	; 0xb405
 8019600:	60a3      	str	r3, [r4, #8]
 8019602:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8019606:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801960a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801960e:	bd10      	pop	{r4, pc}
 8019610:	0802f2a8 	.word	0x0802f2a8

08019614 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8019614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019618:	4606      	mov	r6, r0
 801961a:	6810      	ldr	r0, [r2, #0]
 801961c:	4698      	mov	r8, r3
 801961e:	4691      	mov	r9, r2
 8019620:	460f      	mov	r7, r1
 8019622:	f7ff ffb7 	bl	8019594 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019626:	a902      	add	r1, sp, #8
 8019628:	2402      	movs	r4, #2
 801962a:	f841 0d08 	str.w	r0, [r1, #-8]!
 801962e:	4640      	mov	r0, r8
 8019630:	f7ff ff83 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019634:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8019636:	fb90 f0f4 	sdiv	r0, r0, r4
 801963a:	4405      	add	r5, r0
 801963c:	f8d9 0000 	ldr.w	r0, [r9]
 8019640:	f7ff ffc9 	bl	80195d6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019644:	a902      	add	r1, sp, #8
 8019646:	f841 0d04 	str.w	r0, [r1, #-4]!
 801964a:	4640      	mov	r0, r8
 801964c:	f7ff ff75 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019650:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8019652:	4629      	mov	r1, r5
 8019654:	fb90 f0f4 	sdiv	r0, r0, r4
 8019658:	1a12      	subs	r2, r2, r0
 801965a:	4638      	mov	r0, r7
 801965c:	f010 fd2d 	bl	802a0ba <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8019660:	b003      	add	sp, #12
 8019662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019666 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 8019666:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801966a:	9e08      	ldr	r6, [sp, #32]
 801966c:	4698      	mov	r8, r3
 801966e:	4615      	mov	r5, r2
 8019670:	460f      	mov	r7, r1
 8019672:	6830      	ldr	r0, [r6, #0]
 8019674:	2402      	movs	r4, #2
 8019676:	f7ff ff8d 	bl	8019594 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801967a:	a902      	add	r1, sp, #8
 801967c:	f841 0d08 	str.w	r0, [r1, #-8]!
 8019680:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019682:	f7ff ff5a 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019686:	682d      	ldr	r5, [r5, #0]
 8019688:	fb90 f0f4 	sdiv	r0, r0, r4
 801968c:	4405      	add	r5, r0
 801968e:	6830      	ldr	r0, [r6, #0]
 8019690:	f7ff ffa1 	bl	80195d6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019694:	a902      	add	r1, sp, #8
 8019696:	f841 0d04 	str.w	r0, [r1, #-4]!
 801969a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801969c:	f7ff ff4d 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80196a0:	f8d8 2000 	ldr.w	r2, [r8]
 80196a4:	4629      	mov	r1, r5
 80196a6:	fb90 f0f4 	sdiv	r0, r0, r4
 80196aa:	1a12      	subs	r2, r2, r0
 80196ac:	4638      	mov	r0, r7
 80196ae:	f010 fc93 	bl	8029fd8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80196b2:	b002      	add	sp, #8
 80196b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080196b8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 80196b8:	b513      	push	{r0, r1, r4, lr}
 80196ba:	e9cd 2300 	strd	r2, r3, [sp]
 80196be:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80196c2:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80196c6:	f7ff ffce 	bl	8019666 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80196ca:	b002      	add	sp, #8
 80196cc:	bd10      	pop	{r4, pc}

080196ce <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 80196ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196d0:	680e      	ldr	r6, [r1, #0]
 80196d2:	681f      	ldr	r7, [r3, #0]
 80196d4:	9807      	ldr	r0, [sp, #28]
 80196d6:	42be      	cmp	r6, r7
 80196d8:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 80196dc:	bfb8      	it	lt
 80196de:	601e      	strlt	r6, [r3, #0]
 80196e0:	680b      	ldr	r3, [r1, #0]
 80196e2:	6829      	ldr	r1, [r5, #0]
 80196e4:	428b      	cmp	r3, r1
 80196e6:	bfc8      	it	gt
 80196e8:	602b      	strgt	r3, [r5, #0]
 80196ea:	6813      	ldr	r3, [r2, #0]
 80196ec:	6821      	ldr	r1, [r4, #0]
 80196ee:	428b      	cmp	r3, r1
 80196f0:	bfb8      	it	lt
 80196f2:	6023      	strlt	r3, [r4, #0]
 80196f4:	6813      	ldr	r3, [r2, #0]
 80196f6:	6802      	ldr	r2, [r0, #0]
 80196f8:	4293      	cmp	r3, r2
 80196fa:	bfc8      	it	gt
 80196fc:	6003      	strgt	r3, [r0, #0]
 80196fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019700 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8019700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019704:	b089      	sub	sp, #36	; 0x24
 8019706:	4690      	mov	r8, r2
 8019708:	4606      	mov	r6, r0
 801970a:	2402      	movs	r4, #2
 801970c:	ad08      	add	r5, sp, #32
 801970e:	6808      	ldr	r0, [r1, #0]
 8019710:	461f      	mov	r7, r3
 8019712:	4689      	mov	r9, r1
 8019714:	f7ff ff3e 	bl	8019594 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019718:	f845 0d04 	str.w	r0, [r5, #-4]!
 801971c:	4640      	mov	r0, r8
 801971e:	4629      	mov	r1, r5
 8019720:	f7ff ff0b 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019724:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8019726:	fb90 f0f4 	sdiv	r0, r0, r4
 801972a:	4418      	add	r0, r3
 801972c:	9005      	str	r0, [sp, #20]
 801972e:	f8d9 0000 	ldr.w	r0, [r9]
 8019732:	f7ff ff50 	bl	80195d6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019736:	4629      	mov	r1, r5
 8019738:	9007      	str	r0, [sp, #28]
 801973a:	4640      	mov	r0, r8
 801973c:	f7ff fefd 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019742:	aa08      	add	r2, sp, #32
 8019744:	a905      	add	r1, sp, #20
 8019746:	fb90 f0f4 	sdiv	r0, r0, r4
 801974a:	6b74      	ldr	r4, [r6, #52]	; 0x34
 801974c:	1a24      	subs	r4, r4, r0
 801974e:	4630      	mov	r0, r6
 8019750:	f842 4d08 	str.w	r4, [r2, #-8]!
 8019754:	9302      	str	r3, [sp, #8]
 8019756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019758:	9301      	str	r3, [sp, #4]
 801975a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801975c:	9300      	str	r3, [sp, #0]
 801975e:	463b      	mov	r3, r7
 8019760:	f7ff ffb5 	bl	80196ce <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019764:	b009      	add	sp, #36	; 0x24
 8019766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801976a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 801976a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801976e:	4291      	cmp	r1, r2
 8019770:	b08d      	sub	sp, #52	; 0x34
 8019772:	461e      	mov	r6, r3
 8019774:	4604      	mov	r4, r0
 8019776:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801977a:	ad0c      	add	r5, sp, #48	; 0x30
 801977c:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8019780:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8019784:	bfc8      	it	gt
 8019786:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 801978a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801978e:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8019792:	1a9b      	subs	r3, r3, r2
 8019794:	a907      	add	r1, sp, #28
 8019796:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801979a:	bfa2      	ittt	ge
 801979c:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80197a0:	2200      	movge	r2, #0
 80197a2:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 80197a6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80197a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80197aa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80197ae:	f845 3d04 	str.w	r3, [r5, #-4]!
 80197b2:	4633      	mov	r3, r6
 80197b4:	462a      	mov	r2, r5
 80197b6:	9700      	str	r7, [sp, #0]
 80197b8:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80197bc:	f7ff ffa0 	bl	8019700 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80197c0:	9b07      	ldr	r3, [sp, #28]
 80197c2:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 80197c6:	f103 0120 	add.w	r1, r3, #32
 80197ca:	fb91 f3f0 	sdiv	r3, r1, r0
 80197ce:	fb00 1313 	mls	r3, r0, r3, r1
 80197d2:	1ac3      	subs	r3, r0, r3
 80197d4:	fb93 f2f0 	sdiv	r2, r3, r0
 80197d8:	fb00 3312 	mls	r3, r0, r2, r3
 80197dc:	440b      	add	r3, r1
 80197de:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 80197e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80197e4:	9906      	ldr	r1, [sp, #24]
 80197e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80197e8:	4291      	cmp	r1, r2
 80197ea:	db11      	blt.n	8019810 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 80197ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80197ee:	4651      	mov	r1, sl
 80197f0:	9700      	str	r7, [sp, #0]
 80197f2:	4620      	mov	r0, r4
 80197f4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80197f8:	462a      	mov	r2, r5
 80197fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80197fc:	4633      	mov	r3, r6
 80197fe:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8019802:	f7ff ff7d 	bl	8019700 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019808:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 801980c:	9309      	str	r3, [sp, #36]	; 0x24
 801980e:	e7e8      	b.n	80197e2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8019810:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8019814:	4291      	cmp	r1, r2
 8019816:	dd0c      	ble.n	8019832 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8019818:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801981a:	a906      	add	r1, sp, #24
 801981c:	9700      	str	r7, [sp, #0]
 801981e:	4620      	mov	r0, r4
 8019820:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019824:	462a      	mov	r2, r5
 8019826:	930b      	str	r3, [sp, #44]	; 0x2c
 8019828:	4633      	mov	r3, r6
 801982a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801982e:	f7ff ff67 	bl	8019700 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019832:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019834:	2b00      	cmp	r3, #0
 8019836:	f040 8097 	bne.w	8019968 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 801983a:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 801983e:	1a52      	subs	r2, r2, r1
 8019840:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8019844:	da0a      	bge.n	801985c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 8019846:	462a      	mov	r2, r5
 8019848:	a90a      	add	r1, sp, #40	; 0x28
 801984a:	9700      	str	r7, [sp, #0]
 801984c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8019850:	4633      	mov	r3, r6
 8019852:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8019856:	4620      	mov	r0, r4
 8019858:	f7ff ff52 	bl	8019700 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801985c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8019860:	2bb3      	cmp	r3, #179	; 0xb3
 8019862:	d87e      	bhi.n	8019962 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8019864:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8019868:	1a1b      	subs	r3, r3, r0
 801986a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801986e:	da78      	bge.n	8019962 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8019870:	ad0c      	add	r5, sp, #48	; 0x30
 8019872:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8019876:	f7ff fe8d 	bl	8019594 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801987a:	f04f 0a02 	mov.w	sl, #2
 801987e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8019882:	4658      	mov	r0, fp
 8019884:	4629      	mov	r1, r5
 8019886:	f7ff fe58 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801988a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801988c:	18c3      	adds	r3, r0, r3
 801988e:	9807      	ldr	r0, [sp, #28]
 8019890:	9305      	str	r3, [sp, #20]
 8019892:	f7ff fea0 	bl	80195d6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019896:	4629      	mov	r1, r5
 8019898:	900b      	str	r0, [sp, #44]	; 0x2c
 801989a:	4658      	mov	r0, fp
 801989c:	f7ff fe4d 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80198a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80198a2:	9a05      	ldr	r2, [sp, #20]
 80198a4:	a90a      	add	r1, sp, #40	; 0x28
 80198a6:	1a1b      	subs	r3, r3, r0
 80198a8:	9700      	str	r7, [sp, #0]
 80198aa:	4620      	mov	r0, r4
 80198ac:	9304      	str	r3, [sp, #16]
 80198ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80198b0:	fb93 f3fa 	sdiv	r3, r3, sl
 80198b4:	1ad2      	subs	r2, r2, r3
 80198b6:	920a      	str	r2, [sp, #40]	; 0x28
 80198b8:	9a04      	ldr	r2, [sp, #16]
 80198ba:	1ad3      	subs	r3, r2, r3
 80198bc:	462a      	mov	r2, r5
 80198be:	930b      	str	r3, [sp, #44]	; 0x2c
 80198c0:	4633      	mov	r3, r6
 80198c2:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80198c6:	f7ff ff02 	bl	80196ce <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80198ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80198cc:	9a05      	ldr	r2, [sp, #20]
 80198ce:	a90a      	add	r1, sp, #40	; 0x28
 80198d0:	4620      	mov	r0, r4
 80198d2:	9700      	str	r7, [sp, #0]
 80198d4:	fb93 f3fa 	sdiv	r3, r3, sl
 80198d8:	189a      	adds	r2, r3, r2
 80198da:	920a      	str	r2, [sp, #40]	; 0x28
 80198dc:	9a04      	ldr	r2, [sp, #16]
 80198de:	4413      	add	r3, r2
 80198e0:	462a      	mov	r2, r5
 80198e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80198e4:	4633      	mov	r3, r6
 80198e6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80198ea:	f7ff fef0 	bl	80196ce <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80198ee:	9806      	ldr	r0, [sp, #24]
 80198f0:	f7ff fe50 	bl	8019594 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80198f4:	4629      	mov	r1, r5
 80198f6:	900b      	str	r0, [sp, #44]	; 0x2c
 80198f8:	4658      	mov	r0, fp
 80198fa:	f7ff fe1e 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80198fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019900:	18c3      	adds	r3, r0, r3
 8019902:	9806      	ldr	r0, [sp, #24]
 8019904:	9304      	str	r3, [sp, #16]
 8019906:	f7ff fe66 	bl	80195d6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801990a:	4629      	mov	r1, r5
 801990c:	900b      	str	r0, [sp, #44]	; 0x2c
 801990e:	4658      	mov	r0, fp
 8019910:	f7ff fe13 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019916:	9a04      	ldr	r2, [sp, #16]
 8019918:	a90a      	add	r1, sp, #40	; 0x28
 801991a:	eba3 0b00 	sub.w	fp, r3, r0
 801991e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019920:	4620      	mov	r0, r4
 8019922:	9700      	str	r7, [sp, #0]
 8019924:	fb93 f3fa 	sdiv	r3, r3, sl
 8019928:	1ad2      	subs	r2, r2, r3
 801992a:	ebab 0303 	sub.w	r3, fp, r3
 801992e:	920a      	str	r2, [sp, #40]	; 0x28
 8019930:	462a      	mov	r2, r5
 8019932:	930b      	str	r3, [sp, #44]	; 0x2c
 8019934:	4633      	mov	r3, r6
 8019936:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801993a:	f7ff fec8 	bl	80196ce <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801993e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019940:	9700      	str	r7, [sp, #0]
 8019942:	462a      	mov	r2, r5
 8019944:	a90a      	add	r1, sp, #40	; 0x28
 8019946:	4620      	mov	r0, r4
 8019948:	fb93 fafa 	sdiv	sl, r3, sl
 801994c:	9b04      	ldr	r3, [sp, #16]
 801994e:	4453      	add	r3, sl
 8019950:	930a      	str	r3, [sp, #40]	; 0x28
 8019952:	eb0a 030b 	add.w	r3, sl, fp
 8019956:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801995a:	930b      	str	r3, [sp, #44]	; 0x2c
 801995c:	4633      	mov	r3, r6
 801995e:	f7ff feb6 	bl	80196ce <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019962:	b00d      	add	sp, #52	; 0x34
 8019964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019968:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801996a:	a907      	add	r1, sp, #28
 801996c:	9700      	str	r7, [sp, #0]
 801996e:	4620      	mov	r0, r4
 8019970:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019974:	462a      	mov	r2, r5
 8019976:	930b      	str	r3, [sp, #44]	; 0x2c
 8019978:	4633      	mov	r3, r6
 801997a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801997e:	f7ff febf 	bl	8019700 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8019982:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019984:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019986:	a906      	add	r1, sp, #24
 8019988:	9700      	str	r7, [sp, #0]
 801998a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 801998e:	462a      	mov	r2, r5
 8019990:	930b      	str	r3, [sp, #44]	; 0x2c
 8019992:	4633      	mov	r3, r6
 8019994:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8019998:	e75d      	b.n	8019856 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

0801999a <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 801999a:	b530      	push	{r4, r5, lr}
 801999c:	4604      	mov	r4, r0
 801999e:	4608      	mov	r0, r1
 80199a0:	4611      	mov	r1, r2
 80199a2:	461a      	mov	r2, r3
 80199a4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80199a8:	b089      	sub	sp, #36	; 0x24
 80199aa:	2500      	movs	r5, #0
 80199ac:	015b      	lsls	r3, r3, #5
 80199ae:	9505      	str	r5, [sp, #20]
 80199b0:	9304      	str	r3, [sp, #16]
 80199b2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80199b6:	015b      	lsls	r3, r3, #5
 80199b8:	e9cd 3506 	strd	r3, r5, [sp, #24]
 80199bc:	ab07      	add	r3, sp, #28
 80199be:	2520      	movs	r5, #32
 80199c0:	9302      	str	r3, [sp, #8]
 80199c2:	ab06      	add	r3, sp, #24
 80199c4:	9301      	str	r3, [sp, #4]
 80199c6:	ab05      	add	r3, sp, #20
 80199c8:	9300      	str	r3, [sp, #0]
 80199ca:	ab04      	add	r3, sp, #16
 80199cc:	f7ff fecd 	bl	801976a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 80199d0:	9a04      	ldr	r2, [sp, #16]
 80199d2:	9805      	ldr	r0, [sp, #20]
 80199d4:	9b06      	ldr	r3, [sp, #24]
 80199d6:	9907      	ldr	r1, [sp, #28]
 80199d8:	fb92 f2f5 	sdiv	r2, r2, r5
 80199dc:	fb90 f0f5 	sdiv	r0, r0, r5
 80199e0:	fb93 f3f5 	sdiv	r3, r3, r5
 80199e4:	fb91 f1f5 	sdiv	r1, r1, r5
 80199e8:	b292      	uxth	r2, r2
 80199ea:	3002      	adds	r0, #2
 80199ec:	b29b      	uxth	r3, r3
 80199ee:	3102      	adds	r1, #2
 80199f0:	1a80      	subs	r0, r0, r2
 80199f2:	3a01      	subs	r2, #1
 80199f4:	1ac9      	subs	r1, r1, r3
 80199f6:	3b01      	subs	r3, #1
 80199f8:	80a0      	strh	r0, [r4, #4]
 80199fa:	4620      	mov	r0, r4
 80199fc:	8022      	strh	r2, [r4, #0]
 80199fe:	8063      	strh	r3, [r4, #2]
 8019a00:	80e1      	strh	r1, [r4, #6]
 8019a02:	b009      	add	sp, #36	; 0x24
 8019a04:	bd30      	pop	{r4, r5, pc}

08019a06 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8019a06:	b510      	push	{r4, lr}
 8019a08:	4604      	mov	r4, r0
 8019a0a:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8019a0e:	f7ff ffc4 	bl	801999a <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8019a12:	4620      	mov	r0, r4
 8019a14:	bd10      	pop	{r4, pc}

08019a16 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 8019a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a18:	e9d1 540f 	ldrd	r5, r4, [r1, #60]	; 0x3c
 8019a1c:	4606      	mov	r6, r0
 8019a1e:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
 8019a22:	42a5      	cmp	r5, r4
 8019a24:	6813      	ldr	r3, [r2, #0]
 8019a26:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8019a2a:	da2b      	bge.n	8019a84 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 8019a2c:	42a3      	cmp	r3, r4
 8019a2e:	dd14      	ble.n	8019a5a <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 8019a30:	b168      	cbz	r0, 8019a4e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8019a32:	4267      	negs	r7, r4
 8019a34:	fb97 f2f0 	sdiv	r2, r7, r0
 8019a38:	fb00 7212 	mls	r2, r0, r2, r7
 8019a3c:	1a82      	subs	r2, r0, r2
 8019a3e:	fb92 f7f0 	sdiv	r7, r2, r0
 8019a42:	fb00 2017 	mls	r0, r0, r7, r2
 8019a46:	1a24      	subs	r4, r4, r0
 8019a48:	42ac      	cmp	r4, r5
 8019a4a:	bfb8      	it	lt
 8019a4c:	462c      	movlt	r4, r5
 8019a4e:	4630      	mov	r0, r6
 8019a50:	4622      	mov	r2, r4
 8019a52:	f7ff ffa2 	bl	801999a <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8019a56:	4630      	mov	r0, r6
 8019a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a5a:	42ab      	cmp	r3, r5
 8019a5c:	dd0e      	ble.n	8019a7c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8019a5e:	b168      	cbz	r0, 8019a7c <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 8019a60:	425f      	negs	r7, r3
 8019a62:	fb97 f2f0 	sdiv	r2, r7, r0
 8019a66:	fb00 7212 	mls	r2, r0, r2, r7
 8019a6a:	1a82      	subs	r2, r0, r2
 8019a6c:	fb92 f7f0 	sdiv	r7, r2, r0
 8019a70:	fb00 2017 	mls	r0, r0, r7, r2
 8019a74:	1a1b      	subs	r3, r3, r0
 8019a76:	42ab      	cmp	r3, r5
 8019a78:	bfb8      	it	lt
 8019a7a:	462b      	movlt	r3, r5
 8019a7c:	4622      	mov	r2, r4
 8019a7e:	461c      	mov	r4, r3
 8019a80:	4613      	mov	r3, r2
 8019a82:	e7e4      	b.n	8019a4e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8019a84:	42a3      	cmp	r3, r4
 8019a86:	da10      	bge.n	8019aaa <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 8019a88:	b148      	cbz	r0, 8019a9e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8019a8a:	fb94 f2f0 	sdiv	r2, r4, r0
 8019a8e:	fb00 4212 	mls	r2, r0, r2, r4
 8019a92:	1a82      	subs	r2, r0, r2
 8019a94:	fb92 f7f0 	sdiv	r7, r2, r0
 8019a98:	fb00 2017 	mls	r0, r0, r7, r2
 8019a9c:	4404      	add	r4, r0
 8019a9e:	42a5      	cmp	r5, r4
 8019aa0:	bfa8      	it	ge
 8019aa2:	4625      	movge	r5, r4
 8019aa4:	461c      	mov	r4, r3
 8019aa6:	462b      	mov	r3, r5
 8019aa8:	e7d1      	b.n	8019a4e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8019aaa:	42ab      	cmp	r3, r5
 8019aac:	dacf      	bge.n	8019a4e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8019aae:	2800      	cmp	r0, #0
 8019ab0:	d0cd      	beq.n	8019a4e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8019ab2:	fb93 f2f0 	sdiv	r2, r3, r0
 8019ab6:	fb00 3212 	mls	r2, r0, r2, r3
 8019aba:	1a82      	subs	r2, r0, r2
 8019abc:	fb92 f7f0 	sdiv	r7, r2, r0
 8019ac0:	fb00 2017 	mls	r0, r0, r7, r2
 8019ac4:	4403      	add	r3, r0
 8019ac6:	42ab      	cmp	r3, r5
 8019ac8:	bfa8      	it	ge
 8019aca:	462b      	movge	r3, r5
 8019acc:	e7bf      	b.n	8019a4e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08019ace <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8019ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ad2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8019ad4:	b0ba      	sub	sp, #232	; 0xe8
 8019ad6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8019ad8:	4604      	mov	r4, r0
 8019ada:	9303      	str	r3, [sp, #12]
 8019adc:	460f      	mov	r7, r1
 8019ade:	429a      	cmp	r2, r3
 8019ae0:	9204      	str	r2, [sp, #16]
 8019ae2:	ae0a      	add	r6, sp, #40	; 0x28
 8019ae4:	bfb8      	it	lt
 8019ae6:	e9cd 2303 	strdlt	r2, r3, [sp, #12]
 8019aea:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8019aee:	1a9b      	subs	r3, r3, r2
 8019af0:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8019af4:	bfa2      	ittt	ge
 8019af6:	2200      	movge	r2, #0
 8019af8:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8019afc:	e9cd 2303 	strdge	r2, r3, [sp, #12]
 8019b00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019b02:	2a00      	cmp	r2, #0
 8019b04:	d131      	bne.n	8019b6a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 8019b06:	463a      	mov	r2, r7
 8019b08:	4621      	mov	r1, r4
 8019b0a:	a80b      	add	r0, sp, #44	; 0x2c
 8019b0c:	f010 f90a 	bl	8029d24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8019b10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019b12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019b14:	9205      	str	r2, [sp, #20]
 8019b16:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8019b1a:	9306      	str	r3, [sp, #24]
 8019b1c:	dc6f      	bgt.n	8019bfe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 8019b1e:	9b03      	ldr	r3, [sp, #12]
 8019b20:	a90b      	add	r1, sp, #44	; 0x2c
 8019b22:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8019b26:	4620      	mov	r0, r4
 8019b28:	9307      	str	r3, [sp, #28]
 8019b2a:	016d      	lsls	r5, r5, #5
 8019b2c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019b30:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019b34:	aa07      	add	r2, sp, #28
 8019b36:	930a      	str	r3, [sp, #40]	; 0x28
 8019b38:	4633      	mov	r3, r6
 8019b3a:	f7ff fd6b 	bl	8019614 <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019b3e:	9f07      	ldr	r7, [sp, #28]
 8019b40:	2d00      	cmp	r5, #0
 8019b42:	d165      	bne.n	8019c10 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8019b44:	3720      	adds	r7, #32
 8019b46:	4639      	mov	r1, r7
 8019b48:	9a04      	ldr	r2, [sp, #16]
 8019b4a:	9b06      	ldr	r3, [sp, #24]
 8019b4c:	442f      	add	r7, r5
 8019b4e:	4291      	cmp	r1, r2
 8019b50:	dc6b      	bgt.n	8019c2a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 8019b52:	9a05      	ldr	r2, [sp, #20]
 8019b54:	4620      	mov	r0, r4
 8019b56:	9107      	str	r1, [sp, #28]
 8019b58:	a90b      	add	r1, sp, #44	; 0x2c
 8019b5a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019b5e:	aa07      	add	r2, sp, #28
 8019b60:	930a      	str	r3, [sp, #40]	; 0x28
 8019b62:	4633      	mov	r3, r6
 8019b64:	f7ff fda8 	bl	80196b8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019b68:	e7ed      	b.n	8019b46 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8019b6a:	f9b1 c000 	ldrsh.w	ip, [r1]
 8019b6e:	88bd      	ldrh	r5, [r7, #4]
 8019b70:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8019b74:	4465      	add	r5, ip
 8019b76:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8019b7a:	b22d      	sxth	r5, r5
 8019b7c:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8019b80:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8019b84:	2d00      	cmp	r5, #0
 8019b86:	bfb8      	it	lt
 8019b88:	426d      	neglt	r5, r5
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	bfb8      	it	lt
 8019b8e:	425b      	neglt	r3, r3
 8019b90:	429d      	cmp	r5, r3
 8019b92:	bfb8      	it	lt
 8019b94:	461d      	movlt	r5, r3
 8019b96:	88fb      	ldrh	r3, [r7, #6]
 8019b98:	4403      	add	r3, r0
 8019b9a:	116d      	asrs	r5, r5, #5
 8019b9c:	b21b      	sxth	r3, r3
 8019b9e:	3501      	adds	r5, #1
 8019ba0:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8019ba4:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8019ba8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	f100 0001 	add.w	r0, r0, #1
 8019bb2:	bfb8      	it	lt
 8019bb4:	425b      	neglt	r3, r3
 8019bb6:	2900      	cmp	r1, #0
 8019bb8:	ea4f 0060 	mov.w	r0, r0, asr #1
 8019bbc:	bfb8      	it	lt
 8019bbe:	4249      	neglt	r1, r1
 8019bc0:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8019bc4:	428b      	cmp	r3, r1
 8019bc6:	bfb8      	it	lt
 8019bc8:	460b      	movlt	r3, r1
 8019bca:	115b      	asrs	r3, r3, #5
 8019bcc:	3301      	adds	r3, #1
 8019bce:	435b      	muls	r3, r3
 8019bd0:	fb05 3505 	mla	r5, r5, r5, r3
 8019bd4:	2302      	movs	r3, #2
 8019bd6:	fb92 f2f3 	sdiv	r2, r2, r3
 8019bda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019bdc:	1a9a      	subs	r2, r3, r2
 8019bde:	920a      	str	r2, [sp, #40]	; 0x28
 8019be0:	f7ff fcb6 	bl	8019550 <_ZN8touchgfx7CWRUtil4sineEi>
 8019be4:	a90b      	add	r1, sp, #44	; 0x2c
 8019be6:	900b      	str	r0, [sp, #44]	; 0x2c
 8019be8:	4630      	mov	r0, r6
 8019bea:	f7ff fca6 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019bee:	2320      	movs	r3, #32
 8019bf0:	fb90 f0f3 	sdiv	r0, r0, r3
 8019bf4:	4340      	muls	r0, r0
 8019bf6:	42a8      	cmp	r0, r5
 8019bf8:	dd85      	ble.n	8019b06 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 8019bfa:	2401      	movs	r4, #1
 8019bfc:	e037      	b.n	8019c6e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a0>
 8019bfe:	2102      	movs	r1, #2
 8019c00:	fb93 f3f1 	sdiv	r3, r3, r1
 8019c04:	4413      	add	r3, r2
 8019c06:	9306      	str	r3, [sp, #24]
 8019c08:	fb93 f3f1 	sdiv	r3, r3, r1
 8019c0c:	9305      	str	r3, [sp, #20]
 8019c0e:	e786      	b.n	8019b1e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8019c10:	f107 0320 	add.w	r3, r7, #32
 8019c14:	fb93 f7f5 	sdiv	r7, r3, r5
 8019c18:	fb05 3717 	mls	r7, r5, r7, r3
 8019c1c:	1bea      	subs	r2, r5, r7
 8019c1e:	fb92 f7f5 	sdiv	r7, r2, r5
 8019c22:	fb05 2717 	mls	r7, r5, r7, r2
 8019c26:	441f      	add	r7, r3
 8019c28:	e78d      	b.n	8019b46 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8019c2a:	9907      	ldr	r1, [sp, #28]
 8019c2c:	428a      	cmp	r2, r1
 8019c2e:	dd09      	ble.n	8019c44 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 8019c30:	9a05      	ldr	r2, [sp, #20]
 8019c32:	a90b      	add	r1, sp, #44	; 0x2c
 8019c34:	4620      	mov	r0, r4
 8019c36:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019c3a:	aa04      	add	r2, sp, #16
 8019c3c:	930a      	str	r3, [sp, #40]	; 0x28
 8019c3e:	4633      	mov	r3, r6
 8019c40:	f7ff fd3a 	bl	80196b8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019c44:	9a06      	ldr	r2, [sp, #24]
 8019c46:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 8019c4a:	1ac3      	subs	r3, r0, r3
 8019c4c:	b99a      	cbnz	r2, 8019c76 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a8>
 8019c4e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8019c52:	da04      	bge.n	8019c5e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8019c54:	a80b      	add	r0, sp, #44	; 0x2c
 8019c56:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8019c5a:	f010 f9bd 	bl	8029fd8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8019c5e:	21ff      	movs	r1, #255	; 0xff
 8019c60:	a80b      	add	r0, sp, #44	; 0x2c
 8019c62:	f010 fb2e 	bl	802a2c2 <_ZN8touchgfx6Canvas6renderEh>
 8019c66:	4604      	mov	r4, r0
 8019c68:	a80b      	add	r0, sp, #44	; 0x2c
 8019c6a:	f010 fb69 	bl	802a340 <_ZN8touchgfx6CanvasD1Ev>
 8019c6e:	4620      	mov	r0, r4
 8019c70:	b03a      	add	sp, #232	; 0xe8
 8019c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c76:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8019c7a:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8019c7e:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8019c82:	da2b      	bge.n	8019cdc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20e>
 8019c84:	f7ff fc86 	bl	8019594 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019c88:	4631      	mov	r1, r6
 8019c8a:	900a      	str	r0, [sp, #40]	; 0x28
 8019c8c:	a805      	add	r0, sp, #20
 8019c8e:	f7ff fc54 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019c92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019c94:	f10d 0818 	add.w	r8, sp, #24
 8019c98:	4418      	add	r0, r3
 8019c9a:	9008      	str	r0, [sp, #32]
 8019c9c:	9804      	ldr	r0, [sp, #16]
 8019c9e:	f7ff fc9a 	bl	80195d6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019ca2:	4631      	mov	r1, r6
 8019ca4:	900a      	str	r0, [sp, #40]	; 0x28
 8019ca6:	a805      	add	r0, sp, #20
 8019ca8:	f7ff fc47 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019cac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019cae:	1a18      	subs	r0, r3, r0
 8019cb0:	9b04      	ldr	r3, [sp, #16]
 8019cb2:	443b      	add	r3, r7
 8019cb4:	9009      	str	r0, [sp, #36]	; 0x24
 8019cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8019cb8:	9b04      	ldr	r3, [sp, #16]
 8019cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019cbc:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8019cc0:	4293      	cmp	r3, r2
 8019cc2:	dd0b      	ble.n	8019cdc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20e>
 8019cc4:	ab09      	add	r3, sp, #36	; 0x24
 8019cc6:	aa08      	add	r2, sp, #32
 8019cc8:	a90b      	add	r1, sp, #44	; 0x2c
 8019cca:	4620      	mov	r0, r4
 8019ccc:	e9cd 6800 	strd	r6, r8, [sp]
 8019cd0:	f7ff fcc9 	bl	8019666 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8019cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cd6:	443b      	add	r3, r7
 8019cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8019cda:	e7ed      	b.n	8019cb8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1ea>
 8019cdc:	9a04      	ldr	r2, [sp, #16]
 8019cde:	9b07      	ldr	r3, [sp, #28]
 8019ce0:	429a      	cmp	r2, r3
 8019ce2:	dd0a      	ble.n	8019cfa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22c>
 8019ce4:	a90b      	add	r1, sp, #44	; 0x2c
 8019ce6:	4620      	mov	r0, r4
 8019ce8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019cec:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019cf0:	aa04      	add	r2, sp, #16
 8019cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8019cf4:	4633      	mov	r3, r6
 8019cf6:	f7ff fcdf 	bl	80196b8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019cfa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019cfe:	4642      	mov	r2, r8
 8019d00:	9b03      	ldr	r3, [sp, #12]
 8019d02:	eba8 0805 	sub.w	r8, r8, r5
 8019d06:	429a      	cmp	r2, r3
 8019d08:	db0c      	blt.n	8019d24 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x256>
 8019d0a:	9207      	str	r2, [sp, #28]
 8019d0c:	a90b      	add	r1, sp, #44	; 0x2c
 8019d0e:	4620      	mov	r0, r4
 8019d10:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019d14:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019d18:	aa07      	add	r2, sp, #28
 8019d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8019d1c:	4633      	mov	r3, r6
 8019d1e:	f7ff fccb 	bl	80196b8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019d22:	e7ec      	b.n	8019cfe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x230>
 8019d24:	9a07      	ldr	r2, [sp, #28]
 8019d26:	4293      	cmp	r3, r2
 8019d28:	da0a      	bge.n	8019d40 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x272>
 8019d2a:	a90b      	add	r1, sp, #44	; 0x2c
 8019d2c:	4620      	mov	r0, r4
 8019d2e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019d32:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8019d36:	aa03      	add	r2, sp, #12
 8019d38:	930a      	str	r3, [sp, #40]	; 0x28
 8019d3a:	4633      	mov	r3, r6
 8019d3c:	f7ff fcbc 	bl	80196b8 <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8019d40:	e9dd 0303 	ldrd	r0, r3, [sp, #12]
 8019d44:	1a1b      	subs	r3, r3, r0
 8019d46:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8019d4a:	da88      	bge.n	8019c5e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8019d4c:	f7ff fc22 	bl	8019594 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8019d50:	4631      	mov	r1, r6
 8019d52:	900a      	str	r0, [sp, #40]	; 0x28
 8019d54:	a805      	add	r0, sp, #20
 8019d56:	f7ff fbf0 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019d5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019d5c:	ad06      	add	r5, sp, #24
 8019d5e:	4418      	add	r0, r3
 8019d60:	9008      	str	r0, [sp, #32]
 8019d62:	9803      	ldr	r0, [sp, #12]
 8019d64:	f7ff fc37 	bl	80195d6 <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8019d68:	4631      	mov	r1, r6
 8019d6a:	900a      	str	r0, [sp, #40]	; 0x28
 8019d6c:	a805      	add	r0, sp, #20
 8019d6e:	f7ff fbe4 	bl	801953a <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8019d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019d74:	1a18      	subs	r0, r3, r0
 8019d76:	9b03      	ldr	r3, [sp, #12]
 8019d78:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8019d7c:	9009      	str	r0, [sp, #36]	; 0x24
 8019d7e:	443b      	add	r3, r7
 8019d80:	930a      	str	r3, [sp, #40]	; 0x28
 8019d82:	9a03      	ldr	r2, [sp, #12]
 8019d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d86:	429a      	cmp	r2, r3
 8019d88:	f77f af69 	ble.w	8019c5e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8019d8c:	ab09      	add	r3, sp, #36	; 0x24
 8019d8e:	aa08      	add	r2, sp, #32
 8019d90:	a90b      	add	r1, sp, #44	; 0x2c
 8019d92:	4620      	mov	r0, r4
 8019d94:	e9cd 6500 	strd	r6, r5, [sp]
 8019d98:	f7ff fc65 	bl	8019666 <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8019d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d9e:	443b      	add	r3, r7
 8019da0:	930a      	str	r3, [sp, #40]	; 0x28
 8019da2:	e7ee      	b.n	8019d82 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b4>

08019da4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8019da4:	4413      	add	r3, r2
 8019da6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019dac:	4419      	add	r1, r3
 8019dae:	7a03      	ldrb	r3, [r0, #8]
 8019db0:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 8019db4:	2bff      	cmp	r3, #255	; 0xff
 8019db6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019dba:	440e      	add	r6, r1
 8019dbc:	d13d      	bne.n	8019e3a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 8019dbe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019dc2:	3103      	adds	r1, #3
 8019dc4:	7d87      	ldrb	r7, [r0, #22]
 8019dc6:	2bff      	cmp	r3, #255	; 0xff
 8019dc8:	d10a      	bne.n	8019de0 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 8019dca:	f801 7c03 	strb.w	r7, [r1, #-3]
 8019dce:	7d43      	ldrb	r3, [r0, #21]
 8019dd0:	f801 3c02 	strb.w	r3, [r1, #-2]
 8019dd4:	7d03      	ldrb	r3, [r0, #20]
 8019dd6:	f801 3c01 	strb.w	r3, [r1, #-1]
 8019dda:	428e      	cmp	r6, r1
 8019ddc:	d8ef      	bhi.n	8019dbe <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 8019dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019de0:	b29a      	uxth	r2, r3
 8019de2:	43db      	mvns	r3, r3
 8019de4:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8019de8:	fb17 f702 	smulbb	r7, r7, r2
 8019dec:	b2db      	uxtb	r3, r3
 8019dee:	fb05 7503 	mla	r5, r5, r3, r7
 8019df2:	b2ad      	uxth	r5, r5
 8019df4:	1c6f      	adds	r7, r5, #1
 8019df6:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8019dfa:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 8019dfe:	fb17 f703 	smulbb	r7, r7, r3
 8019e02:	122d      	asrs	r5, r5, #8
 8019e04:	f801 5c03 	strb.w	r5, [r1, #-3]
 8019e08:	7d45      	ldrb	r5, [r0, #21]
 8019e0a:	fb05 7502 	mla	r5, r5, r2, r7
 8019e0e:	b2ad      	uxth	r5, r5
 8019e10:	1c6f      	adds	r7, r5, #1
 8019e12:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8019e16:	122d      	asrs	r5, r5, #8
 8019e18:	f801 5c02 	strb.w	r5, [r1, #-2]
 8019e1c:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019e20:	7d07      	ldrb	r7, [r0, #20]
 8019e22:	fb15 f303 	smulbb	r3, r5, r3
 8019e26:	fb07 3202 	mla	r2, r7, r2, r3
 8019e2a:	b292      	uxth	r2, r2
 8019e2c:	1c53      	adds	r3, r2, #1
 8019e2e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8019e32:	1212      	asrs	r2, r2, #8
 8019e34:	f801 2c01 	strb.w	r2, [r1, #-1]
 8019e38:	e7cf      	b.n	8019dda <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 8019e3a:	3103      	adds	r1, #3
 8019e3c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8019e40:	428e      	cmp	r6, r1
 8019e42:	7a03      	ldrb	r3, [r0, #8]
 8019e44:	f101 0103 	add.w	r1, r1, #3
 8019e48:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8019e4c:	fb02 f303 	mul.w	r3, r2, r3
 8019e50:	f103 0201 	add.w	r2, r3, #1
 8019e54:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019e58:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019e5c:	b295      	uxth	r5, r2
 8019e5e:	ea6f 0202 	mvn.w	r2, r2
 8019e62:	b2d3      	uxtb	r3, r2
 8019e64:	7d82      	ldrb	r2, [r0, #22]
 8019e66:	fb1c fc03 	smulbb	ip, ip, r3
 8019e6a:	fb02 c205 	mla	r2, r2, r5, ip
 8019e6e:	b292      	uxth	r2, r2
 8019e70:	f102 0c01 	add.w	ip, r2, #1
 8019e74:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019e78:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8019e7c:	fb1c fc03 	smulbb	ip, ip, r3
 8019e80:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019e84:	f801 2c06 	strb.w	r2, [r1, #-6]
 8019e88:	7d42      	ldrb	r2, [r0, #21]
 8019e8a:	fb02 c205 	mla	r2, r2, r5, ip
 8019e8e:	b292      	uxth	r2, r2
 8019e90:	f102 0c01 	add.w	ip, r2, #1
 8019e94:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019e98:	ea4f 2222 	mov.w	r2, r2, asr #8
 8019e9c:	f801 2c05 	strb.w	r2, [r1, #-5]
 8019ea0:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8019ea4:	f890 c014 	ldrb.w	ip, [r0, #20]
 8019ea8:	fb12 f303 	smulbb	r3, r2, r3
 8019eac:	fb0c 3305 	mla	r3, ip, r5, r3
 8019eb0:	b29b      	uxth	r3, r3
 8019eb2:	f103 0201 	add.w	r2, r3, #1
 8019eb6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019eba:	ea4f 2323 	mov.w	r3, r3, asr #8
 8019ebe:	f801 3c04 	strb.w	r3, [r1, #-4]
 8019ec2:	d8bb      	bhi.n	8019e3c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 8019ec4:	e78b      	b.n	8019dde <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

08019ec6 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8019ec6:	b510      	push	{r4, lr}
 8019ec8:	7d04      	ldrb	r4, [r0, #20]
 8019eca:	700c      	strb	r4, [r1, #0]
 8019ecc:	7d41      	ldrb	r1, [r0, #21]
 8019ece:	7011      	strb	r1, [r2, #0]
 8019ed0:	7d82      	ldrb	r2, [r0, #22]
 8019ed2:	2001      	movs	r0, #1
 8019ed4:	701a      	strb	r2, [r3, #0]
 8019ed6:	22ff      	movs	r2, #255	; 0xff
 8019ed8:	9b02      	ldr	r3, [sp, #8]
 8019eda:	701a      	strb	r2, [r3, #0]
 8019edc:	bd10      	pop	{r4, pc}

08019ede <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8019ede:	6281      	str	r1, [r0, #40]	; 0x28
 8019ee0:	4770      	bx	lr

08019ee2 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8019ee2:	b510      	push	{r4, lr}
 8019ee4:	2200      	movs	r2, #0
 8019ee6:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8019eea:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8019eee:	8002      	strh	r2, [r0, #0]
 8019ef0:	8042      	strh	r2, [r0, #2]
 8019ef2:	8084      	strh	r4, [r0, #4]
 8019ef4:	80c1      	strh	r1, [r0, #6]
 8019ef6:	bd10      	pop	{r4, pc}

08019ef8 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8019ef8:	2200      	movs	r2, #0
 8019efa:	8002      	strh	r2, [r0, #0]
 8019efc:	8042      	strh	r2, [r0, #2]
 8019efe:	8082      	strh	r2, [r0, #4]
 8019f00:	80c2      	strh	r2, [r0, #6]
 8019f02:	4770      	bx	lr

08019f04 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8019f04:	b508      	push	{r3, lr}
 8019f06:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019f08:	b928      	cbnz	r0, 8019f16 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8019f0a:	4b03      	ldr	r3, [pc, #12]	; (8019f18 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8019f0c:	2126      	movs	r1, #38	; 0x26
 8019f0e:	4a03      	ldr	r2, [pc, #12]	; (8019f1c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8019f10:	4803      	ldr	r0, [pc, #12]	; (8019f20 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8019f12:	f011 fca9 	bl	802b868 <__assert_func>
 8019f16:	bd08      	pop	{r3, pc}
 8019f18:	0802f33c 	.word	0x0802f33c
 8019f1c:	0802f41c 	.word	0x0802f41c
 8019f20:	0802f363 	.word	0x0802f363

08019f24 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019f24:	b510      	push	{r4, lr}
 8019f26:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019f2a:	888a      	ldrh	r2, [r1, #4]
 8019f2c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019f30:	4422      	add	r2, r4
 8019f32:	b212      	sxth	r2, r2
 8019f34:	4293      	cmp	r3, r2
 8019f36:	da15      	bge.n	8019f64 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019f38:	8882      	ldrh	r2, [r0, #4]
 8019f3a:	4413      	add	r3, r2
 8019f3c:	b21b      	sxth	r3, r3
 8019f3e:	429c      	cmp	r4, r3
 8019f40:	da10      	bge.n	8019f64 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019f42:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019f46:	88c9      	ldrh	r1, [r1, #6]
 8019f48:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019f4c:	4419      	add	r1, r3
 8019f4e:	b209      	sxth	r1, r1
 8019f50:	428a      	cmp	r2, r1
 8019f52:	da07      	bge.n	8019f64 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019f54:	88c0      	ldrh	r0, [r0, #6]
 8019f56:	4410      	add	r0, r2
 8019f58:	b200      	sxth	r0, r0
 8019f5a:	4283      	cmp	r3, r0
 8019f5c:	bfac      	ite	ge
 8019f5e:	2000      	movge	r0, #0
 8019f60:	2001      	movlt	r0, #1
 8019f62:	bd10      	pop	{r4, pc}
 8019f64:	2000      	movs	r0, #0
 8019f66:	e7fc      	b.n	8019f62 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019f68 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8019f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f6c:	b08b      	sub	sp, #44	; 0x2c
 8019f6e:	4604      	mov	r4, r0
 8019f70:	6808      	ldr	r0, [r1, #0]
 8019f72:	f04f 0a00 	mov.w	sl, #0
 8019f76:	6849      	ldr	r1, [r1, #4]
 8019f78:	ab04      	add	r3, sp, #16
 8019f7a:	f647 7bff 	movw	fp, #32767	; 0x7fff
 8019f7e:	c303      	stmia	r3!, {r0, r1}
 8019f80:	4b35      	ldr	r3, [pc, #212]	; (801a058 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 8019f82:	4621      	mov	r1, r4
 8019f84:	a806      	add	r0, sp, #24
 8019f86:	781b      	ldrb	r3, [r3, #0]
 8019f88:	2b01      	cmp	r3, #1
 8019f8a:	6823      	ldr	r3, [r4, #0]
 8019f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f8e:	bf1f      	itttt	ne
 8019f90:	f10d 090e 	addne.w	r9, sp, #14
 8019f94:	ae05      	addne	r6, sp, #20
 8019f96:	f10d 0516 	addne.w	r5, sp, #22
 8019f9a:	f10d 0812 	addne.w	r8, sp, #18
 8019f9e:	bf01      	itttt	eq
 8019fa0:	f10d 0916 	addeq.w	r9, sp, #22
 8019fa4:	f10d 060e 	addeq.w	r6, sp, #14
 8019fa8:	ad05      	addeq	r5, sp, #20
 8019faa:	f10d 0810 	addeq.w	r8, sp, #16
 8019fae:	4798      	blx	r3
 8019fb0:	f9b5 3000 	ldrsh.w	r3, [r5]
 8019fb4:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d042      	beq.n	801a042 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 8019fbc:	4293      	cmp	r3, r2
 8019fbe:	bfa8      	it	ge
 8019fc0:	4613      	movge	r3, r2
 8019fc2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019fc6:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8019fca:	2f00      	cmp	r7, #0
 8019fcc:	dd21      	ble.n	801a012 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 8019fce:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8019fd2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8019fd6:	f9b6 2000 	ldrsh.w	r2, [r6]
 8019fda:	f9b9 3000 	ldrsh.w	r3, [r9]
 8019fde:	f8ad 0020 	strh.w	r0, [sp, #32]
 8019fe2:	a808      	add	r0, sp, #32
 8019fe4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8019fe8:	a906      	add	r1, sp, #24
 8019fea:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8019fee:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019ff2:	f7ff ff97 	bl	8019f24 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019ff6:	9001      	str	r0, [sp, #4]
 8019ff8:	b1d0      	cbz	r0, 801a030 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 8019ffa:	6822      	ldr	r2, [r4, #0]
 8019ffc:	a908      	add	r1, sp, #32
 8019ffe:	4620      	mov	r0, r4
 801a000:	6f12      	ldr	r2, [r2, #112]	; 0x70
 801a002:	4790      	blx	r2
 801a004:	b9a0      	cbnz	r0, 801a030 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 801a006:	107f      	asrs	r7, r7, #1
 801a008:	9b01      	ldr	r3, [sp, #4]
 801a00a:	f8ad 700e 	strh.w	r7, [sp, #14]
 801a00e:	469a      	mov	sl, r3
 801a010:	e7d9      	b.n	8019fc6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801a012:	d10d      	bne.n	801a030 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 801a014:	2301      	movs	r3, #1
 801a016:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a01a:	f8b8 2000 	ldrh.w	r2, [r8]
 801a01e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801a022:	440a      	add	r2, r1
 801a024:	f8a8 2000 	strh.w	r2, [r8]
 801a028:	882b      	ldrh	r3, [r5, #0]
 801a02a:	1a5b      	subs	r3, r3, r1
 801a02c:	802b      	strh	r3, [r5, #0]
 801a02e:	e7bf      	b.n	8019fb0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a030:	f1ba 0f00 	cmp.w	sl, #0
 801a034:	d0f1      	beq.n	801a01a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 801a036:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 801a03a:	455b      	cmp	r3, fp
 801a03c:	bf08      	it	eq
 801a03e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801a040:	e7eb      	b.n	801a01a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 801a042:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801a046:	429a      	cmp	r2, r3
 801a048:	bf04      	itt	eq
 801a04a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801a04e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 801a050:	b00b      	add	sp, #44	; 0x2c
 801a052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a056:	bf00      	nop
 801a058:	2400c8b4 	.word	0x2400c8b4

0801a05c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801a05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a05e:	b085      	sub	sp, #20
 801a060:	6803      	ldr	r3, [r0, #0]
 801a062:	4604      	mov	r4, r0
 801a064:	4601      	mov	r1, r0
 801a066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a068:	4668      	mov	r0, sp
 801a06a:	4798      	blx	r3
 801a06c:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 801a070:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 801a074:	2300      	movs	r3, #0
 801a076:	a902      	add	r1, sp, #8
 801a078:	4668      	mov	r0, sp
 801a07a:	9302      	str	r3, [sp, #8]
 801a07c:	f8ad 600c 	strh.w	r6, [sp, #12]
 801a080:	f8ad 500e 	strh.w	r5, [sp, #14]
 801a084:	f7ff ff4e 	bl	8019f24 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a088:	b340      	cbz	r0, 801a0dc <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 801a08a:	f9bd 2000 	ldrsh.w	r2, [sp]
 801a08e:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 801a092:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801a096:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801a09a:	443a      	add	r2, r7
 801a09c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 801a0a0:	f8ad 0000 	strh.w	r0, [sp]
 801a0a4:	b292      	uxth	r2, r2
 801a0a6:	f8ad 1002 	strh.w	r1, [sp, #2]
 801a0aa:	b217      	sxth	r7, r2
 801a0ac:	42be      	cmp	r6, r7
 801a0ae:	bfd8      	it	le
 801a0b0:	b2b2      	uxthle	r2, r6
 801a0b2:	1a12      	subs	r2, r2, r0
 801a0b4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a0b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a0bc:	4413      	add	r3, r2
 801a0be:	b29b      	uxth	r3, r3
 801a0c0:	b21a      	sxth	r2, r3
 801a0c2:	4295      	cmp	r5, r2
 801a0c4:	bfd8      	it	le
 801a0c6:	b2ab      	uxthle	r3, r5
 801a0c8:	1a5b      	subs	r3, r3, r1
 801a0ca:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a0ce:	6823      	ldr	r3, [r4, #0]
 801a0d0:	4669      	mov	r1, sp
 801a0d2:	4620      	mov	r0, r4
 801a0d4:	691b      	ldr	r3, [r3, #16]
 801a0d6:	4798      	blx	r3
 801a0d8:	b005      	add	sp, #20
 801a0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0dc:	e9cd 0000 	strd	r0, r0, [sp]
 801a0e0:	e7f5      	b.n	801a0ce <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

0801a0e4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801a0e4:	2200      	movs	r2, #0
 801a0e6:	2101      	movs	r1, #1
 801a0e8:	8082      	strh	r2, [r0, #4]
 801a0ea:	80c2      	strh	r2, [r0, #6]
 801a0ec:	8102      	strh	r2, [r0, #8]
 801a0ee:	8142      	strh	r2, [r0, #10]
 801a0f0:	8182      	strh	r2, [r0, #12]
 801a0f2:	81c2      	strh	r2, [r0, #14]
 801a0f4:	8202      	strh	r2, [r0, #16]
 801a0f6:	8242      	strh	r2, [r0, #18]
 801a0f8:	61c2      	str	r2, [r0, #28]
 801a0fa:	8402      	strh	r2, [r0, #32]
 801a0fc:	8442      	strh	r2, [r0, #34]	; 0x22
 801a0fe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801a102:	6282      	str	r2, [r0, #40]	; 0x28
 801a104:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801a108:	4905      	ldr	r1, [pc, #20]	; (801a120 <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 801a10a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a10e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a112:	6001      	str	r1, [r0, #0]
 801a114:	8582      	strh	r2, [r0, #44]	; 0x2c
 801a116:	22ff      	movs	r2, #255	; 0xff
 801a118:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801a11c:	4770      	bx	lr
 801a11e:	bf00      	nop
 801a120:	0802f3a8 	.word	0x0802f3a8

0801a124 <_ZN8touchgfx17AbstractDataGraph8setScaleEi>:
 801a124:	62c1      	str	r1, [r0, #44]	; 0x2c
 801a126:	4770      	bx	lr

0801a128 <_ZNK8touchgfx17AbstractDataGraph19getXAxisScaleScaledEv>:
 801a128:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801a12a:	4770      	bx	lr

0801a12c <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 801a12c:	2300      	movs	r3, #0
 801a12e:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 801a132:	4770      	bx	lr

0801a134 <_ZNK8touchgfx17AbstractDataGraph18indexToGlobalIndexEs>:
 801a134:	4608      	mov	r0, r1
 801a136:	4770      	bx	lr

0801a138 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 801a138:	b530      	push	{r4, r5, lr}
 801a13a:	460d      	mov	r5, r1
 801a13c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801a13e:	8949      	ldrh	r1, [r1, #10]
 801a140:	b085      	sub	sp, #20
 801a142:	4604      	mov	r4, r0
 801a144:	1ac9      	subs	r1, r1, r3
 801a146:	6803      	ldr	r3, [r0, #0]
 801a148:	f10d 0206 	add.w	r2, sp, #6
 801a14c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a150:	b209      	sxth	r1, r1
 801a152:	4798      	blx	r3
 801a154:	b1a0      	cbz	r0, 801a180 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801a156:	792b      	ldrb	r3, [r5, #4]
 801a158:	b993      	cbnz	r3, 801a180 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801a15a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 801a15e:	b178      	cbz	r0, 801a180 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801a160:	6803      	ldr	r3, [r0, #0]
 801a162:	68db      	ldr	r3, [r3, #12]
 801a164:	4798      	blx	r3
 801a166:	b158      	cbz	r0, 801a180 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801a168:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801a16c:	aa02      	add	r2, sp, #8
 801a16e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 801a172:	4621      	mov	r1, r4
 801a174:	f8ad 3008 	strh.w	r3, [sp, #8]
 801a178:	9503      	str	r5, [sp, #12]
 801a17a:	6803      	ldr	r3, [r0, #0]
 801a17c:	689b      	ldr	r3, [r3, #8]
 801a17e:	4798      	blx	r3
 801a180:	b005      	add	sp, #20
 801a182:	bd30      	pop	{r4, r5, pc}

0801a184 <_ZNK8touchgfx17AbstractDataGraph20getXAxisOffsetScaledEv>:
 801a184:	2000      	movs	r0, #0
 801a186:	4770      	bx	lr

0801a188 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEii>:
 801a188:	b410      	push	{r4}
 801a18a:	6804      	ldr	r4, [r0, #0]
 801a18c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801a18e:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
 801a192:	435a      	muls	r2, r3
 801a194:	4359      	muls	r1, r3
 801a196:	4623      	mov	r3, r4
 801a198:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a19c:	4718      	bx	r3

0801a19e <_ZNK8touchgfx22AbstractDataGraphWithY17getGraphRangeXMinEv>:
 801a19e:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 801a1a2:	4770      	bx	lr

0801a1a4 <_ZNK8touchgfx22AbstractDataGraphWithY17getGraphRangeXMaxEv>:
 801a1a4:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 801a1a8:	4770      	bx	lr

0801a1aa <_ZNK8touchgfx22AbstractDataGraphWithY24getGraphRangeYMinAsFloatEv>:
 801a1aa:	edd0 7a50 	vldr	s15, [r0, #320]	; 0x140
 801a1ae:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 801a1b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1b6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a1ba:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801a1be:	4770      	bx	lr

0801a1c0 <_ZNK8touchgfx22AbstractDataGraphWithY24getGraphRangeYMaxAsFloatEv>:
 801a1c0:	edd0 7a51 	vldr	s15, [r0, #324]	; 0x144
 801a1c4:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 801a1c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1cc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a1d0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801a1d4:	4770      	bx	lr

0801a1d6 <_ZN8touchgfx22AbstractDataGraphWithY13setXAxisScaleEi>:
 801a1d6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801a1d8:	6803      	ldr	r3, [r0, #0]
 801a1da:	4351      	muls	r1, r2
 801a1dc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801a1e0:	4718      	bx	r3

0801a1e2 <_ZNK8touchgfx22AbstractDataGraphWithY20getXAxisScaleAsFloatEv>:
 801a1e2:	b510      	push	{r4, lr}
 801a1e4:	6803      	ldr	r3, [r0, #0]
 801a1e6:	4604      	mov	r4, r0
 801a1e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a1ec:	4798      	blx	r3
 801a1ee:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 801a1f2:	ee07 0a90 	vmov	s15, r0
 801a1f6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a1fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1fe:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801a202:	bd10      	pop	{r4, pc}

0801a204 <_ZN8touchgfx22AbstractDataGraphWithY14setXAxisOffsetEi>:
 801a204:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801a206:	6803      	ldr	r3, [r0, #0]
 801a208:	4351      	muls	r1, r2
 801a20a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801a20e:	4718      	bx	r3

0801a210 <_ZNK8touchgfx22AbstractDataGraphWithY21getXAxisOffsetAsFloatEv>:
 801a210:	b510      	push	{r4, lr}
 801a212:	6803      	ldr	r3, [r0, #0]
 801a214:	4604      	mov	r4, r0
 801a216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801a21a:	4798      	blx	r3
 801a21c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 801a220:	ee07 0a90 	vmov	s15, r0
 801a224:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801a228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a22c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801a230:	bd10      	pop	{r4, pc}

0801a232 <_ZN8touchgfx22AbstractDataGraphWithY14beforeAddValueEv>:
 801a232:	4770      	bx	lr

0801a234 <_ZNK8touchgfx22AbstractDataGraphWithY9realIndexEs>:
 801a234:	4608      	mov	r0, r1
 801a236:	4770      	bx	lr

0801a238 <_ZNK8touchgfx22AbstractDataGraphWithY23indexToDataPointXScaledEs>:
 801a238:	b538      	push	{r3, r4, r5, lr}
 801a23a:	6803      	ldr	r3, [r0, #0]
 801a23c:	4604      	mov	r4, r0
 801a23e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801a242:	4798      	blx	r3
 801a244:	6823      	ldr	r3, [r4, #0]
 801a246:	4605      	mov	r5, r0
 801a248:	4620      	mov	r0, r4
 801a24a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a24e:	4798      	blx	r3
 801a250:	6823      	ldr	r3, [r4, #0]
 801a252:	4345      	muls	r5, r0
 801a254:	4620      	mov	r0, r4
 801a256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801a25a:	4798      	blx	r3
 801a25c:	4428      	add	r0, r5
 801a25e:	bd38      	pop	{r3, r4, r5, pc}

0801a260 <_ZNK8touchgfx22AbstractDataGraphWithY23indexToDataPointYScaledEs>:
 801a260:	b510      	push	{r4, lr}
 801a262:	6803      	ldr	r3, [r0, #0]
 801a264:	f8d0 4128 	ldr.w	r4, [r0, #296]	; 0x128
 801a268:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801a26c:	4798      	blx	r3
 801a26e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801a272:	bd10      	pop	{r4, pc}

0801a274 <_ZN8touchgfx22AbstractDataGraphWithY19setXAxisScaleScaledEi>:
 801a274:	f8c0 1134 	str.w	r1, [r0, #308]	; 0x134
 801a278:	4770      	bx	lr

0801a27a <_ZNK8touchgfx22AbstractDataGraphWithY19getXAxisScaleScaledEv>:
 801a27a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 801a27e:	4770      	bx	lr

0801a280 <_ZNK8touchgfx22AbstractDataGraphWithY23getGraphRangeYMinScaledEv>:
 801a280:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 801a284:	4770      	bx	lr

0801a286 <_ZNK8touchgfx22AbstractDataGraphWithY23getGraphRangeYMaxScaledEv>:
 801a286:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 801a28a:	4770      	bx	lr

0801a28c <_ZN8touchgfx22AbstractDataGraphWithY20setXAxisOffsetScaledEi>:
 801a28c:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801a290:	4770      	bx	lr

0801a292 <_ZNK8touchgfx22AbstractDataGraphWithY20getXAxisOffsetScaledEv>:
 801a292:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 801a296:	4770      	bx	lr

0801a298 <_ZNK8touchgfx22AbstractDataGraphWithY16indexToScreenXQ5Es>:
 801a298:	6803      	ldr	r3, [r0, #0]
 801a29a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801a29e:	4718      	bx	r3

0801a2a0 <_ZNK8touchgfx22AbstractDataGraphWithY16indexToScreenYQ5Es>:
 801a2a0:	b570      	push	{r4, r5, r6, lr}
 801a2a2:	6803      	ldr	r3, [r0, #0]
 801a2a4:	4604      	mov	r4, r0
 801a2a6:	f8d0 6128 	ldr.w	r6, [r0, #296]	; 0x128
 801a2aa:	f8d3 50d4 	ldr.w	r5, [r3, #212]	; 0xd4
 801a2ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801a2b2:	4798      	blx	r3
 801a2b4:	462b      	mov	r3, r5
 801a2b6:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 801a2ba:	4620      	mov	r0, r4
 801a2bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2c0:	4718      	bx	r3
	...

0801a2c4 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii>:
 801a2c4:	4291      	cmp	r1, r2
 801a2c6:	b510      	push	{r4, lr}
 801a2c8:	4604      	mov	r4, r0
 801a2ca:	d106      	bne.n	801a2da <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x16>
 801a2cc:	4b12      	ldr	r3, [pc, #72]	; (801a318 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x54>)
 801a2ce:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 801a2d2:	4a12      	ldr	r2, [pc, #72]	; (801a31c <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x58>)
 801a2d4:	4812      	ldr	r0, [pc, #72]	; (801a320 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x5c>)
 801a2d6:	f011 fac7 	bl	802b868 <__assert_func>
 801a2da:	bfc2      	ittt	gt
 801a2dc:	460b      	movgt	r3, r1
 801a2de:	4611      	movgt	r1, r2
 801a2e0:	461a      	movgt	r2, r3
 801a2e2:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 801a2e6:	428b      	cmp	r3, r1
 801a2e8:	d103      	bne.n	801a2f2 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x2e>
 801a2ea:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
 801a2ee:	4293      	cmp	r3, r2
 801a2f0:	d011      	beq.n	801a316 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii+0x52>
 801a2f2:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 801a2f6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 801a2fa:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
 801a2fe:	f005 faa3 	bl	801f848 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a302:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801a306:	f005 fa9f 	bl	801f848 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a30a:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 801a30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a312:	f005 ba99 	b.w	801f848 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a316:	bd10      	pop	{r4, pc}
 801a318:	0802f46a 	.word	0x0802f46a
 801a31c:	0802f6dc 	.word	0x0802f6dc
 801a320:	0802f475 	.word	0x0802f475

0801a324 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii>:
 801a324:	4291      	cmp	r1, r2
 801a326:	b510      	push	{r4, lr}
 801a328:	4604      	mov	r4, r0
 801a32a:	d106      	bne.n	801a33a <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x16>
 801a32c:	4b12      	ldr	r3, [pc, #72]	; (801a378 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x54>)
 801a32e:	f240 21c1 	movw	r1, #705	; 0x2c1
 801a332:	4a12      	ldr	r2, [pc, #72]	; (801a37c <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x58>)
 801a334:	4812      	ldr	r0, [pc, #72]	; (801a380 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x5c>)
 801a336:	f011 fa97 	bl	802b868 <__assert_func>
 801a33a:	bfc2      	ittt	gt
 801a33c:	460b      	movgt	r3, r1
 801a33e:	4611      	movgt	r1, r2
 801a340:	461a      	movgt	r2, r3
 801a342:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 801a346:	428b      	cmp	r3, r1
 801a348:	d103      	bne.n	801a352 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x2e>
 801a34a:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
 801a34e:	4293      	cmp	r3, r2
 801a350:	d011      	beq.n	801a376 <_ZN8touchgfx22AbstractDataGraphWithY20setGraphRangeYScaledEii+0x52>
 801a352:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 801a356:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801a35a:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
 801a35e:	f005 fa73 	bl	801f848 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a362:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801a366:	f005 fa6f 	bl	801f848 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a36a:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801a36e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a372:	f005 ba69 	b.w	801f848 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a376:	bd10      	pop	{r4, pc}
 801a378:	0802f46a 	.word	0x0802f46a
 801a37c:	0802f724 	.word	0x0802f724
 801a380:	0802f475 	.word	0x0802f475

0801a384 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 801a384:	b530      	push	{r4, r5, lr}
 801a386:	790b      	ldrb	r3, [r1, #4]
 801a388:	b085      	sub	sp, #20
 801a38a:	4604      	mov	r4, r0
 801a38c:	460d      	mov	r5, r1
 801a38e:	2b02      	cmp	r3, #2
 801a390:	d020      	beq.n	801a3d4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801a392:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801a394:	f10d 0206 	add.w	r2, sp, #6
 801a398:	88c9      	ldrh	r1, [r1, #6]
 801a39a:	1ac9      	subs	r1, r1, r3
 801a39c:	6803      	ldr	r3, [r0, #0]
 801a39e:	b209      	sxth	r1, r1
 801a3a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a3a4:	4798      	blx	r3
 801a3a6:	b1a8      	cbz	r0, 801a3d4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801a3a8:	792b      	ldrb	r3, [r5, #4]
 801a3aa:	2b01      	cmp	r3, #1
 801a3ac:	d812      	bhi.n	801a3d4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801a3ae:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 801a3b2:	b178      	cbz	r0, 801a3d4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801a3b4:	6803      	ldr	r3, [r0, #0]
 801a3b6:	68db      	ldr	r3, [r3, #12]
 801a3b8:	4798      	blx	r3
 801a3ba:	b158      	cbz	r0, 801a3d4 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801a3bc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801a3c0:	aa02      	add	r2, sp, #8
 801a3c2:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
 801a3c6:	4621      	mov	r1, r4
 801a3c8:	f8ad 3008 	strh.w	r3, [sp, #8]
 801a3cc:	9503      	str	r5, [sp, #12]
 801a3ce:	6803      	ldr	r3, [r0, #0]
 801a3d0:	689b      	ldr	r3, [r3, #8]
 801a3d2:	4798      	blx	r3
 801a3d4:	b005      	add	sp, #20
 801a3d6:	bd30      	pop	{r4, r5, pc}

0801a3d8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 801a3d8:	6800      	ldr	r0, [r0, #0]
 801a3da:	2800      	cmp	r0, #0
 801a3dc:	bfbd      	ittte	lt
 801a3de:	380f      	sublt	r0, #15
 801a3e0:	2320      	movlt	r3, #32
 801a3e2:	fb90 f0f3 	sdivlt	r0, r0, r3
 801a3e6:	3010      	addge	r0, #16
 801a3e8:	bfa8      	it	ge
 801a3ea:	1140      	asrge	r0, r0, #5
 801a3ec:	4770      	bx	lr

0801a3ee <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
 801a3ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a3f0:	ab01      	add	r3, sp, #4
 801a3f2:	4615      	mov	r5, r2
 801a3f4:	f005 fbf0 	bl	801fbd8 <_ZN8touchgfx6muldivElllRl>
 801a3f8:	2800      	cmp	r0, #0
 801a3fa:	462a      	mov	r2, r5
 801a3fc:	9901      	ldr	r1, [sp, #4]
 801a3fe:	ea4f 1440 	mov.w	r4, r0, lsl #5
 801a402:	f04f 0020 	mov.w	r0, #32
 801a406:	db04      	blt.n	801a412 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
 801a408:	f005 fc05 	bl	801fc16 <_ZN8touchgfx6muldivElll>
 801a40c:	4420      	add	r0, r4
 801a40e:	b003      	add	sp, #12
 801a410:	bd30      	pop	{r4, r5, pc}
 801a412:	f005 fc00 	bl	801fc16 <_ZN8touchgfx6muldivElll>
 801a416:	1a20      	subs	r0, r4, r0
 801a418:	e7f9      	b.n	801a40e <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

0801a41a <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>:
 801a41a:	ee07 0a90 	vmov	s15, r0
 801a41e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a422:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a426:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a42e:	db08      	blt.n	801a442 <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi+0x28>
 801a430:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a434:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a438:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a43c:	ee17 0a90 	vmov	r0, s15
 801a440:	4770      	bx	lr
 801a442:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a446:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a44a:	ee17 3a90 	vmov	r3, s15
 801a44e:	1e58      	subs	r0, r3, #1
 801a450:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a454:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801a458:	ee30 0a07 	vadd.f32	s0, s0, s14
 801a45c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a460:	ee10 3a10 	vmov	r3, s0
 801a464:	4403      	add	r3, r0
 801a466:	4618      	mov	r0, r3
 801a468:	4770      	bx	lr

0801a46a <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeYEff>:
 801a46a:	b570      	push	{r4, r5, r6, lr}
 801a46c:	ed2d 8b02 	vpush	{d8}
 801a470:	eeb0 8a60 	vmov.f32	s16, s1
 801a474:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 801a476:	4604      	mov	r4, r0
 801a478:	4628      	mov	r0, r5
 801a47a:	f7ff ffce 	bl	801a41a <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 801a47e:	eeb0 0a48 	vmov.f32	s0, s16
 801a482:	4606      	mov	r6, r0
 801a484:	4628      	mov	r0, r5
 801a486:	f7ff ffc8 	bl	801a41a <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 801a48a:	6823      	ldr	r3, [r4, #0]
 801a48c:	4602      	mov	r2, r0
 801a48e:	4631      	mov	r1, r6
 801a490:	4620      	mov	r0, r4
 801a492:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a496:	ecbd 8b02 	vpop	{d8}
 801a49a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a49e:	4718      	bx	r3

0801a4a0 <_ZN8touchgfx22AbstractDataGraphWithY13setXAxisScaleEf>:
 801a4a0:	b510      	push	{r4, lr}
 801a4a2:	4604      	mov	r4, r0
 801a4a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801a4a6:	f7ff ffb8 	bl	801a41a <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 801a4aa:	4601      	mov	r1, r0
 801a4ac:	6823      	ldr	r3, [r4, #0]
 801a4ae:	4620      	mov	r0, r4
 801a4b0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801a4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4b8:	4718      	bx	r3

0801a4ba <_ZN8touchgfx22AbstractDataGraphWithY14setXAxisOffsetEf>:
 801a4ba:	b510      	push	{r4, lr}
 801a4bc:	4604      	mov	r4, r0
 801a4be:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801a4c0:	f7ff ffab 	bl	801a41a <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 801a4c4:	4601      	mov	r1, r0
 801a4c6:	6823      	ldr	r3, [r4, #0]
 801a4c8:	4620      	mov	r0, r4
 801a4ca:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801a4ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4d2:	4718      	bx	r3

0801a4d4 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>:
 801a4d4:	2800      	cmp	r0, #0
 801a4d6:	db07      	blt.n	801a4e8 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii+0x14>
 801a4d8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 801a4dc:	fb90 f0f1 	sdiv	r0, r0, r1
 801a4e0:	2102      	movs	r1, #2
 801a4e2:	fb90 f0f1 	sdiv	r0, r0, r1
 801a4e6:	4770      	bx	lr
 801a4e8:	f06f 0301 	mvn.w	r3, #1
 801a4ec:	fb03 1000 	mla	r0, r3, r0, r1
 801a4f0:	3801      	subs	r0, #1
 801a4f2:	fb90 f0f1 	sdiv	r0, r0, r1
 801a4f6:	2102      	movs	r1, #2
 801a4f8:	fb90 f0f1 	sdiv	r0, r0, r1
 801a4fc:	4240      	negs	r0, r0
 801a4fe:	4770      	bx	lr

0801a500 <_ZNK8touchgfx22AbstractDataGraphWithY22getGraphRangeYMinAsIntEv>:
 801a500:	b508      	push	{r3, lr}
 801a502:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801a504:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 801a508:	f7ff ffe4 	bl	801a4d4 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 801a50c:	bd08      	pop	{r3, pc}

0801a50e <_ZNK8touchgfx22AbstractDataGraphWithY22getGraphRangeYMaxAsIntEv>:
 801a50e:	b508      	push	{r3, lr}
 801a510:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801a512:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
 801a516:	f7ff ffdd 	bl	801a4d4 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 801a51a:	bd08      	pop	{r3, pc}

0801a51c <_ZNK8touchgfx22AbstractDataGraphWithY18getXAxisScaleAsIntEv>:
 801a51c:	b510      	push	{r4, lr}
 801a51e:	6803      	ldr	r3, [r0, #0]
 801a520:	4604      	mov	r4, r0
 801a522:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a526:	4798      	blx	r3
 801a528:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a52a:	f7ff ffd3 	bl	801a4d4 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 801a52e:	bd10      	pop	{r4, pc}

0801a530 <_ZNK8touchgfx22AbstractDataGraphWithY19getXAxisOffsetAsIntEv>:
 801a530:	b510      	push	{r4, lr}
 801a532:	6803      	ldr	r3, [r0, #0]
 801a534:	4604      	mov	r4, r0
 801a536:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801a53a:	4798      	blx	r3
 801a53c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a53e:	f7ff ffc9 	bl	801a4d4 <_ZN8touchgfx17AbstractDataGraph10scaled2intEii>
 801a542:	bd10      	pop	{r4, pc}

0801a544 <_ZNK8touchgfx17AbstractDataGraph8getAlphaEv>:
 801a544:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 801a548:	4770      	bx	lr

0801a54a <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 801a54a:	f8a0 3114 	strh.w	r3, [r0, #276]	; 0x114
 801a54e:	f9bd 3000 	ldrsh.w	r3, [sp]
 801a552:	f8a0 1110 	strh.w	r1, [r0, #272]	; 0x110
 801a556:	f8a0 2112 	strh.w	r2, [r0, #274]	; 0x112
 801a55a:	f8a0 3116 	strh.w	r3, [r0, #278]	; 0x116
 801a55e:	4770      	bx	lr

0801a560 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>:
 801a560:	f9b0 0110 	ldrsh.w	r0, [r0, #272]	; 0x110
 801a564:	4770      	bx	lr

0801a566 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>:
 801a566:	f8b0 3112 	ldrh.w	r3, [r0, #274]	; 0x112
 801a56a:	f8b0 2114 	ldrh.w	r2, [r0, #276]	; 0x114
 801a56e:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 801a570:	4413      	add	r3, r2
 801a572:	1ac0      	subs	r0, r0, r3
 801a574:	b200      	sxth	r0, r0
 801a576:	4770      	bx	lr

0801a578 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_>:
 801a578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a57c:	4690      	mov	r8, r2
 801a57e:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 801a582:	4604      	mov	r4, r0
 801a584:	461e      	mov	r6, r3
 801a586:	9d06      	ldr	r5, [sp, #24]
 801a588:	b92a      	cbnz	r2, 801a596 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 801a58a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a58e:	802b      	strh	r3, [r5, #0]
 801a590:	8033      	strh	r3, [r6, #0]
 801a592:	2000      	movs	r0, #0
 801a594:	e009      	b.n	801a5aa <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>
 801a596:	f7ff ffe6 	bl	801a566 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 801a59a:	2801      	cmp	r0, #1
 801a59c:	d107      	bne.n	801a5ae <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x36>
 801a59e:	2300      	movs	r3, #0
 801a5a0:	8033      	strh	r3, [r6, #0]
 801a5a2:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 801a5a6:	3b01      	subs	r3, #1
 801a5a8:	802b      	strh	r3, [r5, #0]
 801a5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5ae:	f9b4 c112 	ldrsh.w	ip, [r4, #274]	; 0x112
 801a5b2:	1e42      	subs	r2, r0, #1
 801a5b4:	f8d4 713c 	ldr.w	r7, [r4, #316]	; 0x13c
 801a5b8:	eba1 0c0c 	sub.w	ip, r1, ip
 801a5bc:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 801a5c0:	ea4f 104c 	mov.w	r0, ip, lsl #5
 801a5c4:	1af9      	subs	r1, r7, r3
 801a5c6:	f005 fb26 	bl	801fc16 <_ZN8touchgfx6muldivElll>
 801a5ca:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 801a5ce:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 801a5d2:	eb00 1743 	add.w	r7, r0, r3, lsl #5
 801a5d6:	4620      	mov	r0, r4
 801a5d8:	1ac9      	subs	r1, r1, r3
 801a5da:	f7ff ffc4 	bl	801a566 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 801a5de:	f9b4 3112 	ldrsh.w	r3, [r4, #274]	; 0x112
 801a5e2:	1e42      	subs	r2, r0, #1
 801a5e4:	eba8 0803 	sub.w	r8, r8, r3
 801a5e8:	ea4f 1048 	mov.w	r0, r8, lsl #5
 801a5ec:	f005 fb13 	bl	801fc16 <_ZN8touchgfx6muldivElll>
 801a5f0:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 801a5f4:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801a5f8:	4287      	cmp	r7, r0
 801a5fa:	bfc2      	ittt	gt
 801a5fc:	463b      	movgt	r3, r7
 801a5fe:	4607      	movgt	r7, r0
 801a600:	4618      	movgt	r0, r3
 801a602:	2800      	cmp	r0, #0
 801a604:	bfb5      	itete	lt
 801a606:	2320      	movlt	r3, #32
 801a608:	301f      	addge	r0, #31
 801a60a:	fb90 f0f3 	sdivlt	r0, r0, r3
 801a60e:	1140      	asrge	r0, r0, #5
 801a610:	2800      	cmp	r0, #0
 801a612:	da03      	bge.n	801a61c <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0xa4>
 801a614:	2000      	movs	r0, #0
 801a616:	8028      	strh	r0, [r5, #0]
 801a618:	8030      	strh	r0, [r6, #0]
 801a61a:	e7c6      	b.n	801a5aa <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>
 801a61c:	2320      	movs	r3, #32
 801a61e:	fb97 f7f3 	sdiv	r7, r7, r3
 801a622:	f9b4 311a 	ldrsh.w	r3, [r4, #282]	; 0x11a
 801a626:	3b01      	subs	r3, #1
 801a628:	429f      	cmp	r7, r3
 801a62a:	dd03      	ble.n	801a634 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0xbc>
 801a62c:	b218      	sxth	r0, r3
 801a62e:	8028      	strh	r0, [r5, #0]
 801a630:	8030      	strh	r0, [r6, #0]
 801a632:	e7ae      	b.n	801a592 <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 801a634:	4283      	cmp	r3, r0
 801a636:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 801a63a:	bfb8      	it	lt
 801a63c:	b218      	sxthlt	r0, r3
 801a63e:	8037      	strh	r7, [r6, #0]
 801a640:	bfa8      	it	ge
 801a642:	b200      	sxthge	r0, r0
 801a644:	8028      	strh	r0, [r5, #0]
 801a646:	2001      	movs	r0, #1
 801a648:	e7af      	b.n	801a5aa <_ZNK8touchgfx22AbstractDataGraphWithY24xScreenRangeToIndexRangeEssRsS1_+0x32>

0801a64a <_ZNK8touchgfx22AbstractDataGraphWithY16valueToScreenXQ5Ei>:
 801a64a:	b570      	push	{r4, r5, r6, lr}
 801a64c:	4604      	mov	r4, r0
 801a64e:	f8d0 5138 	ldr.w	r5, [r0, #312]	; 0x138
 801a652:	1b4e      	subs	r6, r1, r5
 801a654:	f7ff ff87 	bl	801a566 <_ZNK8touchgfx17AbstractDataGraph17getGraphAreaWidthEv>
 801a658:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 801a65c:	1e41      	subs	r1, r0, #1
 801a65e:	4630      	mov	r0, r6
 801a660:	1b52      	subs	r2, r2, r5
 801a662:	f7ff fec4 	bl	801a3ee <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 801a666:	f9b4 3112 	ldrsh.w	r3, [r4, #274]	; 0x112
 801a66a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 801a66e:	bd70      	pop	{r4, r5, r6, pc}

0801a670 <_ZNK8touchgfx17AbstractDataGraph33getGraphAreaWidthIncludingPaddingEv>:
 801a670:	f9b0 003c 	ldrsh.w	r0, [r0, #60]	; 0x3c
 801a674:	4770      	bx	lr

0801a676 <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>:
 801a676:	f8b0 3110 	ldrh.w	r3, [r0, #272]	; 0x110
 801a67a:	f8b0 2116 	ldrh.w	r2, [r0, #278]	; 0x116
 801a67e:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 801a680:	4413      	add	r3, r2
 801a682:	1ac0      	subs	r0, r0, r3
 801a684:	b200      	sxth	r0, r0
 801a686:	4770      	bx	lr

0801a688 <_ZNK8touchgfx22AbstractDataGraphWithY16valueToScreenYQ5Ei>:
 801a688:	b570      	push	{r4, r5, r6, lr}
 801a68a:	4605      	mov	r5, r0
 801a68c:	460e      	mov	r6, r1
 801a68e:	f7ff fff2 	bl	801a676 <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 801a692:	1e41      	subs	r1, r0, #1
 801a694:	f9b5 4110 	ldrsh.w	r4, [r5, #272]	; 0x110
 801a698:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 801a69c:	4404      	add	r4, r0
 801a69e:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 801a6a2:	1af0      	subs	r0, r6, r3
 801a6a4:	3c01      	subs	r4, #1
 801a6a6:	1ad2      	subs	r2, r2, r3
 801a6a8:	f7ff fea1 	bl	801a3ee <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 801a6ac:	0164      	lsls	r4, r4, #5
 801a6ae:	1a20      	subs	r0, r4, r0
 801a6b0:	bd70      	pop	{r4, r5, r6, pc}

0801a6b2 <_ZNK8touchgfx17AbstractDataGraph17getGapBeforeIndexEv>:
 801a6b2:	f9b0 011c 	ldrsh.w	r0, [r0, #284]	; 0x11c
 801a6b6:	4770      	bx	lr

0801a6b8 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 801a6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a6ba:	4604      	mov	r4, r0
 801a6bc:	3034      	adds	r0, #52	; 0x34
 801a6be:	460d      	mov	r5, r1
 801a6c0:	f7fd fc9e 	bl	8018000 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a6c4:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 801a6c8:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 801a6cc:	4628      	mov	r0, r5
 801a6ce:	9200      	str	r2, [sp, #0]
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	4611      	mov	r1, r2
 801a6d4:	f7e9 fd7d 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
 801a6d8:	b003      	add	sp, #12
 801a6da:	bd30      	pop	{r4, r5, pc}

0801a6dc <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>:
 801a6dc:	f9b0 011a 	ldrsh.w	r0, [r0, #282]	; 0x11a
 801a6e0:	4770      	bx	lr

0801a6e2 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>:
 801a6e2:	b507      	push	{r0, r1, r2, lr}
 801a6e4:	6803      	ldr	r3, [r0, #0]
 801a6e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a6ea:	4798      	blx	r3
 801a6ec:	ab02      	add	r3, sp, #8
 801a6ee:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a6f2:	4618      	mov	r0, r3
 801a6f4:	f7ff fe70 	bl	801a3d8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a6f8:	b200      	sxth	r0, r0
 801a6fa:	b003      	add	sp, #12
 801a6fc:	f85d fb04 	ldr.w	pc, [sp], #4

0801a700 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 801a700:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a702:	f9b0 311a 	ldrsh.w	r3, [r0, #282]	; 0x11a
 801a706:	b085      	sub	sp, #20
 801a708:	4605      	mov	r5, r0
 801a70a:	460f      	mov	r7, r1
 801a70c:	4616      	mov	r6, r2
 801a70e:	b333      	cbz	r3, 801a75e <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x5e>
 801a710:	6803      	ldr	r3, [r0, #0]
 801a712:	f10d 020e 	add.w	r2, sp, #14
 801a716:	9200      	str	r2, [sp, #0]
 801a718:	460a      	mov	r2, r1
 801a71a:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 801a71e:	ab03      	add	r3, sp, #12
 801a720:	47a0      	blx	r4
 801a722:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 801a726:	4628      	mov	r0, r5
 801a728:	f7ff ffdb 	bl	801a6e2 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 801a72c:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 801a730:	4604      	mov	r4, r0
 801a732:	4628      	mov	r0, r5
 801a734:	f7ff ffd5 	bl	801a6e2 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 801a738:	1bc0      	subs	r0, r0, r7
 801a73a:	1be4      	subs	r4, r4, r7
 801a73c:	2800      	cmp	r0, #0
 801a73e:	bfb8      	it	lt
 801a740:	4240      	neglt	r0, r0
 801a742:	2c00      	cmp	r4, #0
 801a744:	bfb8      	it	lt
 801a746:	4264      	neglt	r4, r4
 801a748:	42a0      	cmp	r0, r4
 801a74a:	f04f 0001 	mov.w	r0, #1
 801a74e:	bfac      	ite	ge
 801a750:	f9bd 300c 	ldrshge.w	r3, [sp, #12]
 801a754:	f9bd 300e 	ldrshlt.w	r3, [sp, #14]
 801a758:	8033      	strh	r3, [r6, #0]
 801a75a:	b005      	add	sp, #20
 801a75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a75e:	4618      	mov	r0, r3
 801a760:	e7fb      	b.n	801a75a <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x5a>

0801a762 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenYEs>:
 801a762:	b507      	push	{r0, r1, r2, lr}
 801a764:	6803      	ldr	r3, [r0, #0]
 801a766:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801a76a:	4798      	blx	r3
 801a76c:	ab02      	add	r3, sp, #8
 801a76e:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a772:	4618      	mov	r0, r3
 801a774:	f7ff fe30 	bl	801a3d8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801a778:	b200      	sxth	r0, r0
 801a77a:	b003      	add	sp, #12
 801a77c:	f85d fb04 	ldr.w	pc, [sp], #4

0801a780 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 801a780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a784:	4605      	mov	r5, r0
 801a786:	f9b0 011a 	ldrsh.w	r0, [r0, #282]	; 0x11a
 801a78a:	4689      	mov	r9, r1
 801a78c:	4692      	mov	sl, r2
 801a78e:	469b      	mov	fp, r3
 801a790:	b338      	cbz	r0, 801a7e2 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x62>
 801a792:	2700      	movs	r7, #0
 801a794:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 801a798:	b23e      	sxth	r6, r7
 801a79a:	f9b5 311a 	ldrsh.w	r3, [r5, #282]	; 0x11a
 801a79e:	42b3      	cmp	r3, r6
 801a7a0:	dd1e      	ble.n	801a7e0 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x60>
 801a7a2:	4631      	mov	r1, r6
 801a7a4:	4628      	mov	r0, r5
 801a7a6:	f7ff ff9c 	bl	801a6e2 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenXEs>
 801a7aa:	eba0 0409 	sub.w	r4, r0, r9
 801a7ae:	4631      	mov	r1, r6
 801a7b0:	4628      	mov	r0, r5
 801a7b2:	2c00      	cmp	r4, #0
 801a7b4:	f107 0701 	add.w	r7, r7, #1
 801a7b8:	bfb8      	it	lt
 801a7ba:	4264      	neglt	r4, r4
 801a7bc:	f7ff ffd1 	bl	801a762 <_ZNK8touchgfx17AbstractDataGraph14indexToScreenYEs>
 801a7c0:	eba0 000a 	sub.w	r0, r0, sl
 801a7c4:	b224      	sxth	r4, r4
 801a7c6:	2800      	cmp	r0, #0
 801a7c8:	bfb8      	it	lt
 801a7ca:	4240      	neglt	r0, r0
 801a7cc:	fb10 f000 	smulbb	r0, r0, r0
 801a7d0:	fb04 0004 	mla	r0, r4, r4, r0
 801a7d4:	4540      	cmp	r0, r8
 801a7d6:	bfbc      	itt	lt
 801a7d8:	f8ab 6000 	strhlt.w	r6, [fp]
 801a7dc:	4680      	movlt	r8, r0
 801a7de:	e7db      	b.n	801a798 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 801a7e0:	2001      	movs	r0, #1
 801a7e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a7e6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 801a7e6:	b538      	push	{r3, r4, r5, lr}
 801a7e8:	f9b0 311a 	ldrsh.w	r3, [r0, #282]	; 0x11a
 801a7ec:	460d      	mov	r5, r1
 801a7ee:	428b      	cmp	r3, r1
 801a7f0:	dd08      	ble.n	801a804 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 801a7f2:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 801a7f4:	b134      	cbz	r4, 801a804 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 801a7f6:	6823      	ldr	r3, [r4, #0]
 801a7f8:	4620      	mov	r0, r4
 801a7fa:	4629      	mov	r1, r5
 801a7fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a7fe:	4798      	blx	r3
 801a800:	69a4      	ldr	r4, [r4, #24]
 801a802:	e7f7      	b.n	801a7f4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 801a804:	bd38      	pop	{r3, r4, r5, pc}

0801a806 <_ZN8touchgfx17AbstractDataGraph19invalidateGraphAreaEv>:
 801a806:	3034      	adds	r0, #52	; 0x34
 801a808:	f005 b81e 	b.w	801f848 <_ZNK8touchgfx8Drawable10invalidateEv>

0801a80c <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 801a80c:	b570      	push	{r4, r5, r6, lr}
 801a80e:	4606      	mov	r6, r0
 801a810:	460d      	mov	r5, r1
 801a812:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
 801a816:	b134      	cbz	r4, 801a826 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 801a818:	6823      	ldr	r3, [r4, #0]
 801a81a:	4620      	mov	r0, r4
 801a81c:	4629      	mov	r1, r5
 801a81e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a820:	4798      	blx	r3
 801a822:	69a4      	ldr	r4, [r4, #24]
 801a824:	e7f7      	b.n	801a816 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 801a826:	f8d6 410c 	ldr.w	r4, [r6, #268]	; 0x10c
 801a82a:	b134      	cbz	r4, 801a83a <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 801a82c:	6823      	ldr	r3, [r4, #0]
 801a82e:	4620      	mov	r0, r4
 801a830:	4629      	mov	r1, r5
 801a832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a834:	4798      	blx	r3
 801a836:	69a4      	ldr	r4, [r4, #24]
 801a838:	e7f7      	b.n	801a82a <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 801a83a:	bd70      	pop	{r4, r5, r6, pc}

0801a83c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 801a83c:	b570      	push	{r4, r5, r6, lr}
 801a83e:	6803      	ldr	r3, [r0, #0]
 801a840:	4605      	mov	r5, r0
 801a842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a846:	4798      	blx	r3
 801a848:	682b      	ldr	r3, [r5, #0]
 801a84a:	4604      	mov	r4, r0
 801a84c:	4628      	mov	r0, r5
 801a84e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801a852:	4798      	blx	r3
 801a854:	4284      	cmp	r4, r0
 801a856:	4606      	mov	r6, r0
 801a858:	bfc2      	ittt	gt
 801a85a:	b223      	sxthgt	r3, r4
 801a85c:	4604      	movgt	r4, r0
 801a85e:	461e      	movgt	r6, r3
 801a860:	42a6      	cmp	r6, r4
 801a862:	db05      	blt.n	801a870 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x34>
 801a864:	b221      	sxth	r1, r4
 801a866:	4628      	mov	r0, r5
 801a868:	f7ff ffd0 	bl	801a80c <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 801a86c:	3401      	adds	r4, #1
 801a86e:	e7f7      	b.n	801a860 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x24>
 801a870:	bd70      	pop	{r4, r5, r6, pc}

0801a872 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 801a872:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a874:	4604      	mov	r4, r0
 801a876:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 801a878:	b15d      	cbz	r5, 801a892 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 801a87a:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 801a87e:	4628      	mov	r0, r5
 801a880:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 801a884:	9200      	str	r2, [sp, #0]
 801a886:	2200      	movs	r2, #0
 801a888:	4611      	mov	r1, r2
 801a88a:	f7e9 fca2 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
 801a88e:	69ad      	ldr	r5, [r5, #24]
 801a890:	e7f2      	b.n	801a878 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 801a892:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 801a896:	b15d      	cbz	r5, 801a8b0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 801a898:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	; 0xc2
 801a89c:	4628      	mov	r0, r5
 801a89e:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	; 0xc0
 801a8a2:	9200      	str	r2, [sp, #0]
 801a8a4:	2200      	movs	r2, #0
 801a8a6:	4611      	mov	r1, r2
 801a8a8:	f7e9 fc93 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
 801a8ac:	69ad      	ldr	r5, [r5, #24]
 801a8ae:	e7f2      	b.n	801a896 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 801a8b0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 801a8b4:	b15d      	cbz	r5, 801a8ce <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 801a8b6:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	; 0x6a
 801a8ba:	4628      	mov	r0, r5
 801a8bc:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 801a8c0:	9200      	str	r2, [sp, #0]
 801a8c2:	2200      	movs	r2, #0
 801a8c4:	4611      	mov	r1, r2
 801a8c6:	f7e9 fc84 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
 801a8ca:	69ad      	ldr	r5, [r5, #24]
 801a8cc:	e7f2      	b.n	801a8b4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 801a8ce:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 801a8d2:	b15d      	cbz	r5, 801a8ec <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 801a8d4:	f9b4 2096 	ldrsh.w	r2, [r4, #150]	; 0x96
 801a8d8:	4628      	mov	r0, r5
 801a8da:	f9b4 3094 	ldrsh.w	r3, [r4, #148]	; 0x94
 801a8de:	9200      	str	r2, [sp, #0]
 801a8e0:	2200      	movs	r2, #0
 801a8e2:	4611      	mov	r1, r2
 801a8e4:	f7e9 fc75 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
 801a8e8:	69ad      	ldr	r5, [r5, #24]
 801a8ea:	e7f2      	b.n	801a8d2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 801a8ec:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 801a8f0:	b15d      	cbz	r5, 801a90a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 801a8f2:	f9b4 20ee 	ldrsh.w	r2, [r4, #238]	; 0xee
 801a8f6:	4628      	mov	r0, r5
 801a8f8:	f9b4 30ec 	ldrsh.w	r3, [r4, #236]	; 0xec
 801a8fc:	9200      	str	r2, [sp, #0]
 801a8fe:	2200      	movs	r2, #0
 801a900:	4611      	mov	r1, r2
 801a902:	f7e9 fc66 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
 801a906:	69ad      	ldr	r5, [r5, #24]
 801a908:	e7f2      	b.n	801a8f0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 801a90a:	6823      	ldr	r3, [r4, #0]
 801a90c:	4620      	mov	r0, r4
 801a90e:	695b      	ldr	r3, [r3, #20]
 801a910:	b003      	add	sp, #12
 801a912:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a916:	4718      	bx	r3

0801a918 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 801a918:	b430      	push	{r4, r5}
 801a91a:	b28a      	uxth	r2, r1
 801a91c:	f8b0 4094 	ldrh.w	r4, [r0, #148]	; 0x94
 801a920:	f8a0 10c0 	strh.w	r1, [r0, #192]	; 0xc0
 801a924:	1b15      	subs	r5, r2, r4
 801a926:	f8a0 10ec 	strh.w	r1, [r0, #236]	; 0xec
 801a92a:	8101      	strh	r1, [r0, #8]
 801a92c:	f8a0 5090 	strh.w	r5, [r0, #144]	; 0x90
 801a930:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 801a934:	442c      	add	r4, r5
 801a936:	1b12      	subs	r2, r2, r4
 801a938:	bc30      	pop	{r4, r5}
 801a93a:	8782      	strh	r2, [r0, #60]	; 0x3c
 801a93c:	f7ff bf99 	b.w	801a872 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0801a940 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 801a940:	b430      	push	{r4, r5}
 801a942:	b28a      	uxth	r2, r1
 801a944:	f8b0 40ee 	ldrh.w	r4, [r0, #238]	; 0xee
 801a948:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
 801a94c:	1b15      	subs	r5, r2, r4
 801a94e:	f8a0 1096 	strh.w	r1, [r0, #150]	; 0x96
 801a952:	8141      	strh	r1, [r0, #10]
 801a954:	f8a0 50ea 	strh.w	r5, [r0, #234]	; 0xea
 801a958:	f8b0 50c2 	ldrh.w	r5, [r0, #194]	; 0xc2
 801a95c:	442c      	add	r4, r5
 801a95e:	1b12      	subs	r2, r2, r4
 801a960:	bc30      	pop	{r4, r5}
 801a962:	87c2      	strh	r2, [r0, #62]	; 0x3e
 801a964:	f7ff bf85 	b.w	801a872 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0801a968 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 801a968:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801a96c:	fa1f fa83 	uxth.w	sl, r3
 801a970:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 801a974:	4615      	mov	r5, r2
 801a976:	4699      	mov	r9, r3
 801a978:	fa1f f887 	uxth.w	r8, r7
 801a97c:	8903      	ldrh	r3, [r0, #8]
 801a97e:	4452      	add	r2, sl
 801a980:	4604      	mov	r4, r0
 801a982:	8940      	ldrh	r0, [r0, #10]
 801a984:	460e      	mov	r6, r1
 801a986:	1a9b      	subs	r3, r3, r2
 801a988:	eb08 0201 	add.w	r2, r8, r1
 801a98c:	1a80      	subs	r0, r0, r2
 801a98e:	b21b      	sxth	r3, r3
 801a990:	460a      	mov	r2, r1
 801a992:	4629      	mov	r1, r5
 801a994:	b200      	sxth	r0, r0
 801a996:	9000      	str	r0, [sp, #0]
 801a998:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801a99c:	f7e9 fc19 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801a9a6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 801a9aa:	4611      	mov	r1, r2
 801a9ac:	9600      	str	r6, [sp, #0]
 801a9ae:	f7e9 fc10 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
 801a9b2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801a9b6:	2200      	movs	r2, #0
 801a9b8:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801a9bc:	9300      	str	r3, [sp, #0]
 801a9be:	462b      	mov	r3, r5
 801a9c0:	4611      	mov	r1, r2
 801a9c2:	f7e9 fc06 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
 801a9c6:	8921      	ldrh	r1, [r4, #8]
 801a9c8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801a9cc:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 801a9d0:	eba1 010a 	sub.w	r1, r1, sl
 801a9d4:	2200      	movs	r2, #0
 801a9d6:	9300      	str	r3, [sp, #0]
 801a9d8:	464b      	mov	r3, r9
 801a9da:	b209      	sxth	r1, r1
 801a9dc:	f7e9 fbf9 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
 801a9e0:	8962      	ldrh	r2, [r4, #10]
 801a9e2:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 801a9e6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801a9ea:	eba2 0208 	sub.w	r2, r2, r8
 801a9ee:	9700      	str	r7, [sp, #0]
 801a9f0:	2100      	movs	r1, #0
 801a9f2:	b212      	sxth	r2, r2
 801a9f4:	f7e9 fbed 	bl	80041d2 <_ZN8touchgfx8Drawable11setPositionEssss>
 801a9f8:	4620      	mov	r0, r4
 801a9fa:	b002      	add	sp, #8
 801a9fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa00:	f7ff bf37 	b.w	801a872 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0801aa04 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 801aa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa08:	b085      	sub	sp, #20
 801aa0a:	4604      	mov	r4, r0
 801aa0c:	2500      	movs	r5, #0
 801aa0e:	2701      	movs	r7, #1
 801aa10:	9103      	str	r1, [sp, #12]
 801aa12:	f7eb f961 	bl	8005cd8 <_ZN8touchgfx8DrawableC1Ev>
 801aa16:	4b32      	ldr	r3, [pc, #200]	; (801aae0 <_ZN8touchgfx17AbstractDataGraphC1Es+0xdc>)
 801aa18:	f104 0a60 	add.w	sl, r4, #96	; 0x60
 801aa1c:	4e31      	ldr	r6, [pc, #196]	; (801aae4 <_ZN8touchgfx17AbstractDataGraphC1Es+0xe0>)
 801aa1e:	f104 098c 	add.w	r9, r4, #140	; 0x8c
 801aa22:	6023      	str	r3, [r4, #0]
 801aa24:	23ff      	movs	r3, #255	; 0xff
 801aa26:	62a5      	str	r5, [r4, #40]	; 0x28
 801aa28:	f104 0bb8 	add.w	fp, r4, #184	; 0xb8
 801aa2c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 801aa30:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801aa34:	62e7      	str	r7, [r4, #44]	; 0x2c
 801aa36:	f104 08e4 	add.w	r8, r4, #228	; 0xe4
 801aa3a:	4618      	mov	r0, r3
 801aa3c:	9302      	str	r3, [sp, #8]
 801aa3e:	f7eb f94b 	bl	8005cd8 <_ZN8touchgfx8DrawableC1Ev>
 801aa42:	6366      	str	r6, [r4, #52]	; 0x34
 801aa44:	65e5      	str	r5, [r4, #92]	; 0x5c
 801aa46:	4650      	mov	r0, sl
 801aa48:	f7eb f946 	bl	8005cd8 <_ZN8touchgfx8DrawableC1Ev>
 801aa4c:	6626      	str	r6, [r4, #96]	; 0x60
 801aa4e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 801aa52:	4648      	mov	r0, r9
 801aa54:	f7eb f940 	bl	8005cd8 <_ZN8touchgfx8DrawableC1Ev>
 801aa58:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 801aa5c:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
 801aa60:	4658      	mov	r0, fp
 801aa62:	f7eb f939 	bl	8005cd8 <_ZN8touchgfx8DrawableC1Ev>
 801aa66:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 801aa6a:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 801aa6e:	4640      	mov	r0, r8
 801aa70:	f7eb f932 	bl	8005cd8 <_ZN8touchgfx8DrawableC1Ev>
 801aa74:	9b02      	ldr	r3, [sp, #8]
 801aa76:	9903      	ldr	r1, [sp, #12]
 801aa78:	4620      	mov	r0, r4
 801aa7a:	f8c4 60e4 	str.w	r6, [r4, #228]	; 0xe4
 801aa7e:	f8a4 1118 	strh.w	r1, [r4, #280]	; 0x118
 801aa82:	4619      	mov	r1, r3
 801aa84:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
 801aa88:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 801aa8c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 801aa90:	f8a4 511a 	strh.w	r5, [r4, #282]	; 0x11a
 801aa94:	f8a4 511c 	strh.w	r5, [r4, #284]	; 0x11c
 801aa98:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 801aa9c:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 801aaa0:	f7fd faae 	bl	8018000 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aaa4:	4659      	mov	r1, fp
 801aaa6:	4620      	mov	r0, r4
 801aaa8:	f7fd faaa 	bl	8018000 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aaac:	4651      	mov	r1, sl
 801aaae:	4620      	mov	r0, r4
 801aab0:	f7fd faa6 	bl	8018000 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aab4:	4649      	mov	r1, r9
 801aab6:	4620      	mov	r0, r4
 801aab8:	f7fd faa2 	bl	8018000 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aabc:	4641      	mov	r1, r8
 801aabe:	4620      	mov	r0, r4
 801aac0:	f7fd fa9e 	bl	8018000 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aac4:	4620      	mov	r0, r4
 801aac6:	9500      	str	r5, [sp, #0]
 801aac8:	462b      	mov	r3, r5
 801aaca:	462a      	mov	r2, r5
 801aacc:	4629      	mov	r1, r5
 801aace:	f7ff ff4b 	bl	801a968 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 801aad2:	4620      	mov	r0, r4
 801aad4:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 801aad8:	b005      	add	sp, #20
 801aada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aade:	bf00      	nop
 801aae0:	0802f4c8 	.word	0x0802f4c8
 801aae4:	0802e82c 	.word	0x0802e82c

0801aae8 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>:
 801aae8:	460b      	mov	r3, r1
 801aaea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801aaec:	4291      	cmp	r1, r2
 801aaee:	4618      	mov	r0, r3
 801aaf0:	d001      	beq.n	801aaf6 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii+0xe>
 801aaf2:	f005 b890 	b.w	801fc16 <_ZN8touchgfx6muldivElll>
 801aaf6:	4770      	bx	lr

0801aaf8 <_ZN8touchgfx22AbstractDataGraphWithY8setScaleEi>:
 801aaf8:	b538      	push	{r3, r4, r5, lr}
 801aafa:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 801aafc:	4604      	mov	r4, r0
 801aafe:	62c1      	str	r1, [r0, #44]	; 0x2c
 801ab00:	462a      	mov	r2, r5
 801ab02:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
 801ab06:	f7ff ffef 	bl	801aae8 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>
 801ab0a:	462a      	mov	r2, r5
 801ab0c:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 801ab10:	4620      	mov	r0, r4
 801ab12:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 801ab16:	f7ff ffe7 	bl	801aae8 <_ZNK8touchgfx17AbstractDataGraph19convertToGraphScaleEii>
 801ab1a:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
 801ab1e:	bd38      	pop	{r3, r4, r5, pc}

0801ab20 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi>:
 801ab20:	b570      	push	{r4, r5, r6, lr}
 801ab22:	4604      	mov	r4, r0
 801ab24:	460d      	mov	r5, r1
 801ab26:	4616      	mov	r6, r2
 801ab28:	f7ff ff6c 	bl	801aa04 <_ZN8touchgfx17AbstractDataGraphC1Es>
 801ab2c:	2100      	movs	r1, #0
 801ab2e:	4b11      	ldr	r3, [pc, #68]	; (801ab74 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x54>)
 801ab30:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 801ab34:	6023      	str	r3, [r4, #0]
 801ab36:	428d      	cmp	r5, r1
 801ab38:	f04f 0301 	mov.w	r3, #1
 801ab3c:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 801ab40:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
 801ab44:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 801ab48:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 801ab4c:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
 801ab50:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 801ab54:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
 801ab58:	dc06      	bgt.n	801ab68 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x48>
 801ab5a:	4b07      	ldr	r3, [pc, #28]	; (801ab78 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x58>)
 801ab5c:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 801ab60:	4a06      	ldr	r2, [pc, #24]	; (801ab7c <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x5c>)
 801ab62:	4807      	ldr	r0, [pc, #28]	; (801ab80 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi+0x60>)
 801ab64:	f010 fe80 	bl	802b868 <__assert_func>
 801ab68:	4620      	mov	r0, r4
 801ab6a:	1e6a      	subs	r2, r5, #1
 801ab6c:	f7ff fbaa 	bl	801a2c4 <_ZN8touchgfx22AbstractDataGraphWithY14setGraphRangeXEii>
 801ab70:	4620      	mov	r0, r4
 801ab72:	bd70      	pop	{r4, r5, r6, pc}
 801ab74:	0802f5bc 	.word	0x0802f5bc
 801ab78:	0802f4b3 	.word	0x0802f4b3
 801ab7c:	0802f772 	.word	0x0802f772
 801ab80:	0802f475 	.word	0x0802f475

0801ab84 <_ZN8touchgfx22AbstractDataGraphWithY18addDataPointScaledEi>:
 801ab84:	b570      	push	{r4, r5, r6, lr}
 801ab86:	6803      	ldr	r3, [r0, #0]
 801ab88:	4604      	mov	r4, r0
 801ab8a:	460d      	mov	r5, r1
 801ab8c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801ab90:	4798      	blx	r3
 801ab92:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 801ab96:	4629      	mov	r1, r5
 801ab98:	4620      	mov	r0, r4
 801ab9a:	3301      	adds	r3, #1
 801ab9c:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 801aba0:	6823      	ldr	r3, [r4, #0]
 801aba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aba6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801abaa:	4718      	bx	r3

0801abac <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEi>:
 801abac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801abae:	4359      	muls	r1, r3
 801abb0:	f7ff bfe8 	b.w	801ab84 <_ZN8touchgfx22AbstractDataGraphWithY18addDataPointScaledEi>

0801abb4 <_ZN8touchgfx22AbstractDataGraphWithY12addDataPointEf>:
 801abb4:	b510      	push	{r4, lr}
 801abb6:	4604      	mov	r4, r0
 801abb8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801abba:	f7ff fc2e 	bl	801a41a <_ZN8touchgfx17AbstractDataGraph12float2scaledEfi>
 801abbe:	4601      	mov	r1, r0
 801abc0:	4620      	mov	r0, r4
 801abc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abc6:	f7ff bfdd 	b.w	801ab84 <_ZN8touchgfx22AbstractDataGraphWithY18addDataPointScaledEi>

0801abca <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>:
 801abca:	6803      	ldr	r3, [r0, #0]
 801abcc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801abd0:	4718      	bx	r3

0801abd2 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>:
 801abd2:	6803      	ldr	r3, [r0, #0]
 801abd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801abd8:	4718      	bx	r3

0801abda <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801abda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abdc:	4604      	mov	r4, r0
 801abde:	4608      	mov	r0, r1
 801abe0:	460d      	mov	r5, r1
 801abe2:	f7fd fb92 	bl	801830a <_ZNK8touchgfx4Rect7isEmptyEv>
 801abe6:	b978      	cbnz	r0, 801ac08 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801abe8:	4620      	mov	r0, r4
 801abea:	f7fd fb8e 	bl	801830a <_ZNK8touchgfx4Rect7isEmptyEv>
 801abee:	f9b5 6000 	ldrsh.w	r6, [r5]
 801abf2:	b150      	cbz	r0, 801ac0a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801abf4:	8026      	strh	r6, [r4, #0]
 801abf6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801abfa:	8063      	strh	r3, [r4, #2]
 801abfc:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801ac00:	80a3      	strh	r3, [r4, #4]
 801ac02:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801ac06:	80e3      	strh	r3, [r4, #6]
 801ac08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac0a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801ac0e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801ac12:	42b1      	cmp	r1, r6
 801ac14:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801ac18:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801ac1c:	460f      	mov	r7, r1
 801ac1e:	88ed      	ldrh	r5, [r5, #6]
 801ac20:	bfa8      	it	ge
 801ac22:	4637      	movge	r7, r6
 801ac24:	4293      	cmp	r3, r2
 801ac26:	4618      	mov	r0, r3
 801ac28:	4466      	add	r6, ip
 801ac2a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801ac2e:	bfa8      	it	ge
 801ac30:	4610      	movge	r0, r2
 801ac32:	442a      	add	r2, r5
 801ac34:	88e5      	ldrh	r5, [r4, #6]
 801ac36:	4461      	add	r1, ip
 801ac38:	b236      	sxth	r6, r6
 801ac3a:	8027      	strh	r7, [r4, #0]
 801ac3c:	442b      	add	r3, r5
 801ac3e:	b209      	sxth	r1, r1
 801ac40:	b212      	sxth	r2, r2
 801ac42:	8060      	strh	r0, [r4, #2]
 801ac44:	b21b      	sxth	r3, r3
 801ac46:	428e      	cmp	r6, r1
 801ac48:	bfac      	ite	ge
 801ac4a:	ebc7 0106 	rsbge	r1, r7, r6
 801ac4e:	ebc7 0101 	rsblt	r1, r7, r1
 801ac52:	429a      	cmp	r2, r3
 801ac54:	bfac      	ite	ge
 801ac56:	ebc0 0202 	rsbge	r2, r0, r2
 801ac5a:	ebc0 0203 	rsblt	r2, r0, r3
 801ac5e:	80a1      	strh	r1, [r4, #4]
 801ac60:	80e2      	strh	r2, [r4, #6]
 801ac62:	e7d1      	b.n	801ac08 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0801ac64 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 801ac64:	6800      	ldr	r0, [r0, #0]
 801ac66:	2800      	cmp	r0, #0
 801ac68:	bfb9      	ittee	lt
 801ac6a:	2320      	movlt	r3, #32
 801ac6c:	fb90 f0f3 	sdivlt	r0, r0, r3
 801ac70:	301f      	addge	r0, #31
 801ac72:	1140      	asrge	r0, r0, #5
 801ac74:	4770      	bx	lr

0801ac76 <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>:
 801ac76:	b507      	push	{r0, r1, r2, lr}
 801ac78:	ab02      	add	r3, sp, #8
 801ac7a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801ac7e:	4618      	mov	r0, r3
 801ac80:	f7ff fbaa 	bl	801a3d8 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801ac84:	0140      	lsls	r0, r0, #5
 801ac86:	b003      	add	sp, #12
 801ac88:	f85d fb04 	ldr.w	pc, [sp], #4

0801ac8c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 801ac8c:	b510      	push	{r4, lr}
 801ac8e:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 801ac92:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 801ac96:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 801ac9a:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 801ac9e:	139b      	asrs	r3, r3, #14
 801aca0:	13a4      	asrs	r4, r4, #14
 801aca2:	429c      	cmp	r4, r3
 801aca4:	bfb8      	it	lt
 801aca6:	461c      	movlt	r4, r3
 801aca8:	2c01      	cmp	r4, #1
 801acaa:	dd07      	ble.n	801acbc <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 801acac:	fb91 f1f4 	sdiv	r1, r1, r4
 801acb0:	fb90 f0f4 	sdiv	r0, r0, r4
 801acb4:	f7ff ffea 	bl	801ac8c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801acb8:	4360      	muls	r0, r4
 801acba:	bd10      	pop	{r4, pc}
 801acbc:	4340      	muls	r0, r0
 801acbe:	fb01 0101 	mla	r1, r1, r1, r0
 801acc2:	2000      	movs	r0, #0
 801acc4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801acc8:	bfb4      	ite	lt
 801acca:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 801acce:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 801acd2:	18c2      	adds	r2, r0, r3
 801acd4:	428a      	cmp	r2, r1
 801acd6:	bf9c      	itt	ls
 801acd8:	1898      	addls	r0, r3, r2
 801acda:	1a89      	subls	r1, r1, r2
 801acdc:	089b      	lsrs	r3, r3, #2
 801acde:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801ace2:	d1f6      	bne.n	801acd2 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 801ace4:	e7e9      	b.n	801acba <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>
	...

0801ace8 <_ZN8touchgfx20AbstractGraphElementC1Ev>:
 801ace8:	b510      	push	{r4, lr}
 801acea:	4604      	mov	r4, r0
 801acec:	f7ff f9fa 	bl	801a0e4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801acf0:	4b02      	ldr	r3, [pc, #8]	; (801acfc <_ZN8touchgfx20AbstractGraphElementC1Ev+0x14>)
 801acf2:	4620      	mov	r0, r4
 801acf4:	6023      	str	r3, [r4, #0]
 801acf6:	2301      	movs	r3, #1
 801acf8:	6323      	str	r3, [r4, #48]	; 0x30
 801acfa:	bd10      	pop	{r4, pc}
 801acfc:	0802e0c8 	.word	0x0802e0c8

0801ad00 <_ZN8touchgfx20AbstractGraphElement8setScaleEi>:
 801ad00:	6301      	str	r1, [r0, #48]	; 0x30
 801ad02:	4770      	bx	lr

0801ad04 <_ZNK8touchgfx20AbstractGraphElement24xScreenRangeToIndexRangeEssRsS1_>:
 801ad04:	b410      	push	{r4}
 801ad06:	6940      	ldr	r0, [r0, #20]
 801ad08:	6940      	ldr	r0, [r0, #20]
 801ad0a:	6804      	ldr	r4, [r0, #0]
 801ad0c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 801ad10:	46a4      	mov	ip, r4
 801ad12:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ad16:	4760      	bx	ip

0801ad18 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 801ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad1a:	9906      	ldr	r1, [sp, #24]
 801ad1c:	4606      	mov	r6, r0
 801ad1e:	461c      	mov	r4, r3
 801ad20:	2020      	movs	r0, #32
 801ad22:	4291      	cmp	r1, r2
 801ad24:	bfbc      	itt	lt
 801ad26:	9206      	strlt	r2, [sp, #24]
 801ad28:	460a      	movlt	r2, r1
 801ad2a:	9907      	ldr	r1, [sp, #28]
 801ad2c:	428b      	cmp	r3, r1
 801ad2e:	bfc4      	itt	gt
 801ad30:	460c      	movgt	r4, r1
 801ad32:	9307      	strgt	r3, [sp, #28]
 801ad34:	fb92 f5f0 	sdiv	r5, r2, r0
 801ad38:	fb94 f4f0 	sdiv	r4, r4, r0
 801ad3c:	a806      	add	r0, sp, #24
 801ad3e:	f7ff ff91 	bl	801ac64 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801ad42:	4607      	mov	r7, r0
 801ad44:	a807      	add	r0, sp, #28
 801ad46:	f7ff ff8d 	bl	801ac64 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801ad4a:	1b7a      	subs	r2, r7, r5
 801ad4c:	1b00      	subs	r0, r0, r4
 801ad4e:	8035      	strh	r5, [r6, #0]
 801ad50:	8074      	strh	r4, [r6, #2]
 801ad52:	80f0      	strh	r0, [r6, #6]
 801ad54:	4630      	mov	r0, r6
 801ad56:	80b2      	strh	r2, [r6, #4]
 801ad58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ad5a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 801ad5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ad5c:	9c08      	ldr	r4, [sp, #32]
 801ad5e:	2602      	movs	r6, #2
 801ad60:	4605      	mov	r5, r0
 801ad62:	3401      	adds	r4, #1
 801ad64:	fb94 f4f6 	sdiv	r4, r4, r6
 801ad68:	18a6      	adds	r6, r4, r2
 801ad6a:	191f      	adds	r7, r3, r4
 801ad6c:	1b12      	subs	r2, r2, r4
 801ad6e:	1b1b      	subs	r3, r3, r4
 801ad70:	e9cd 6700 	strd	r6, r7, [sp]
 801ad74:	f7ff ffd0 	bl	801ad18 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 801ad78:	4628      	mov	r0, r5
 801ad7a:	b003      	add	sp, #12
 801ad7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ad7e <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 801ad7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad82:	6943      	ldr	r3, [r0, #20]
 801ad84:	b089      	sub	sp, #36	; 0x24
 801ad86:	f890 9034 	ldrb.w	r9, [r0, #52]	; 0x34
 801ad8a:	460d      	mov	r5, r1
 801ad8c:	695c      	ldr	r4, [r3, #20]
 801ad8e:	4680      	mov	r8, r0
 801ad90:	ea4f 1949 	mov.w	r9, r9, lsl #5
 801ad94:	af02      	add	r7, sp, #8
 801ad96:	4620      	mov	r0, r4
 801ad98:	f7ff ff1b 	bl	801abd2 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 801ad9c:	4606      	mov	r6, r0
 801ad9e:	4629      	mov	r1, r5
 801ada0:	4620      	mov	r0, r4
 801ada2:	f7ff ff12 	bl	801abca <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 801ada6:	4632      	mov	r2, r6
 801ada8:	4603      	mov	r3, r0
 801adaa:	f8cd 9000 	str.w	r9, [sp]
 801adae:	4641      	mov	r1, r8
 801adb0:	4638      	mov	r0, r7
 801adb2:	f7ff ffd2 	bl	801ad5a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801adb6:	2d00      	cmp	r5, #0
 801adb8:	ae06      	add	r6, sp, #24
 801adba:	dd18      	ble.n	801adee <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x70>
 801adbc:	f105 3aff 	add.w	sl, r5, #4294967295
 801adc0:	4620      	mov	r0, r4
 801adc2:	fa0f fa8a 	sxth.w	sl, sl
 801adc6:	4651      	mov	r1, sl
 801adc8:	f7ff ff03 	bl	801abd2 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 801adcc:	4683      	mov	fp, r0
 801adce:	4651      	mov	r1, sl
 801add0:	4620      	mov	r0, r4
 801add2:	f7ff fefa 	bl	801abca <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 801add6:	4641      	mov	r1, r8
 801add8:	4603      	mov	r3, r0
 801adda:	f8cd 9000 	str.w	r9, [sp]
 801adde:	4630      	mov	r0, r6
 801ade0:	465a      	mov	r2, fp
 801ade2:	f7ff ffba 	bl	801ad5a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801ade6:	4631      	mov	r1, r6
 801ade8:	4638      	mov	r0, r7
 801adea:	f7ff fef6 	bl	801abda <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801adee:	4620      	mov	r0, r4
 801adf0:	f7ff fc74 	bl	801a6dc <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>
 801adf4:	3801      	subs	r0, #1
 801adf6:	4285      	cmp	r5, r0
 801adf8:	da16      	bge.n	801ae28 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xaa>
 801adfa:	3501      	adds	r5, #1
 801adfc:	4620      	mov	r0, r4
 801adfe:	b22d      	sxth	r5, r5
 801ae00:	4629      	mov	r1, r5
 801ae02:	f7ff fee6 	bl	801abd2 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 801ae06:	4682      	mov	sl, r0
 801ae08:	4629      	mov	r1, r5
 801ae0a:	4620      	mov	r0, r4
 801ae0c:	f7ff fedd 	bl	801abca <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 801ae10:	4641      	mov	r1, r8
 801ae12:	4603      	mov	r3, r0
 801ae14:	f8cd 9000 	str.w	r9, [sp]
 801ae18:	4630      	mov	r0, r6
 801ae1a:	4652      	mov	r2, sl
 801ae1c:	f7ff ff9d 	bl	801ad5a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801ae20:	4631      	mov	r1, r6
 801ae22:	4638      	mov	r0, r7
 801ae24:	f7ff fed9 	bl	801abda <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ae28:	4620      	mov	r0, r4
 801ae2a:	f7ff fb99 	bl	801a560 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 801ae2e:	4681      	mov	r9, r0
 801ae30:	4620      	mov	r0, r4
 801ae32:	f7ff fc1d 	bl	801a670 <_ZNK8touchgfx17AbstractDataGraph33getGraphAreaWidthIncludingPaddingEv>
 801ae36:	4605      	mov	r5, r0
 801ae38:	4620      	mov	r0, r4
 801ae3a:	f7ff fc1c 	bl	801a676 <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 801ae3e:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ae42:	2300      	movs	r3, #0
 801ae44:	f8ad 9012 	strh.w	r9, [sp, #18]
 801ae48:	f8ad 5014 	strh.w	r5, [sp, #20]
 801ae4c:	f8ad 3010 	strh.w	r3, [sp, #16]
 801ae50:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ae54:	e886 0003 	stmia.w	r6, {r0, r1}
 801ae58:	a904      	add	r1, sp, #16
 801ae5a:	4630      	mov	r0, r6
 801ae5c:	f7fd fa12 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 801ae60:	f8d8 3000 	ldr.w	r3, [r8]
 801ae64:	e896 0003 	ldmia.w	r6, {r0, r1}
 801ae68:	691b      	ldr	r3, [r3, #16]
 801ae6a:	e887 0003 	stmia.w	r7, {r0, r1}
 801ae6e:	4639      	mov	r1, r7
 801ae70:	4640      	mov	r0, r8
 801ae72:	4798      	blx	r3
 801ae74:	b009      	add	sp, #36	; 0x24
 801ae76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ae7c <_ZN8touchgfx16GraphElementLineC1Ev>:
 801ae7c:	b510      	push	{r4, lr}
 801ae7e:	4604      	mov	r4, r0
 801ae80:	f7ff ff32 	bl	801ace8 <_ZN8touchgfx20AbstractGraphElementC1Ev>
 801ae84:	4b03      	ldr	r3, [pc, #12]	; (801ae94 <_ZN8touchgfx16GraphElementLineC1Ev+0x18>)
 801ae86:	4620      	mov	r0, r4
 801ae88:	6023      	str	r3, [r4, #0]
 801ae8a:	2302      	movs	r3, #2
 801ae8c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 801ae90:	bd10      	pop	{r4, pc}
 801ae92:	bf00      	nop
 801ae94:	0802f7c4 	.word	0x0802f7c4

0801ae98 <_ZN8touchgfx16GraphElementLine12setLineWidthEh>:
 801ae98:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 801ae9c:	4770      	bx	lr

0801ae9e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 801ae9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aea2:	b087      	sub	sp, #28
 801aea4:	461d      	mov	r5, r3
 801aea6:	4690      	mov	r8, r2
 801aea8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801aeac:	9102      	str	r1, [sp, #8]
 801aeae:	429d      	cmp	r5, r3
 801aeb0:	9304      	str	r3, [sp, #16]
 801aeb2:	d059      	beq.n	801af68 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xca>
 801aeb4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 801aeb8:	4629      	mov	r1, r5
 801aeba:	4610      	mov	r0, r2
 801aebc:	462c      	mov	r4, r5
 801aebe:	015b      	lsls	r3, r3, #5
 801aec0:	9303      	str	r3, [sp, #12]
 801aec2:	f7ff fe86 	bl	801abd2 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 801aec6:	f7ff fed6 	bl	801ac76 <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>
 801aeca:	4629      	mov	r1, r5
 801aecc:	4606      	mov	r6, r0
 801aece:	4640      	mov	r0, r8
 801aed0:	f7ff fe7b 	bl	801abca <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 801aed4:	f7ff fecf 	bl	801ac76 <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>
 801aed8:	4631      	mov	r1, r6
 801aeda:	4602      	mov	r2, r0
 801aedc:	4607      	mov	r7, r0
 801aede:	9802      	ldr	r0, [sp, #8]
 801aee0:	f00f f8eb 	bl	802a0ba <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801aee4:	2301      	movs	r3, #1
 801aee6:	9300      	str	r3, [sp, #0]
 801aee8:	4640      	mov	r0, r8
 801aeea:	9b00      	ldr	r3, [sp, #0]
 801aeec:	441c      	add	r4, r3
 801aeee:	b224      	sxth	r4, r4
 801aef0:	4621      	mov	r1, r4
 801aef2:	f7ff fe6e 	bl	801abd2 <_ZNK8touchgfx20AbstractGraphElement16indexToScreenXQ5EPKNS_17AbstractDataGraphEs.constprop.11>
 801aef6:	f7ff febe 	bl	801ac76 <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>
 801aefa:	4621      	mov	r1, r4
 801aefc:	9001      	str	r0, [sp, #4]
 801aefe:	4640      	mov	r0, r8
 801af00:	f7ff fe63 	bl	801abca <_ZNK8touchgfx20AbstractGraphElement16indexToScreenYQ5EPKNS_17AbstractDataGraphEs.constprop.9>
 801af04:	f7ff feb7 	bl	801ac76 <_ZNK8touchgfx20AbstractGraphElement7roundQ5ENS_7CWRUtil2Q5E.constprop.10>
 801af08:	9b01      	ldr	r3, [sp, #4]
 801af0a:	eba0 0a07 	sub.w	sl, r0, r7
 801af0e:	4681      	mov	r9, r0
 801af10:	eba3 0b06 	sub.w	fp, r3, r6
 801af14:	4651      	mov	r1, sl
 801af16:	4658      	mov	r0, fp
 801af18:	f7ff feb8 	bl	801ac8c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801af1c:	b310      	cbz	r0, 801af64 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xc6>
 801af1e:	4602      	mov	r2, r0
 801af20:	4651      	mov	r1, sl
 801af22:	9005      	str	r0, [sp, #20]
 801af24:	9803      	ldr	r0, [sp, #12]
 801af26:	f004 fe76 	bl	801fc16 <_ZN8touchgfx6muldivElll>
 801af2a:	2302      	movs	r3, #2
 801af2c:	4659      	mov	r1, fp
 801af2e:	fb90 faf3 	sdiv	sl, r0, r3
 801af32:	9b05      	ldr	r3, [sp, #20]
 801af34:	9803      	ldr	r0, [sp, #12]
 801af36:	461a      	mov	r2, r3
 801af38:	f004 fe6d 	bl	801fc16 <_ZN8touchgfx6muldivElll>
 801af3c:	2302      	movs	r3, #2
 801af3e:	eba6 010a 	sub.w	r1, r6, sl
 801af42:	fb90 fbf3 	sdiv	fp, r0, r3
 801af46:	9802      	ldr	r0, [sp, #8]
 801af48:	eb0b 0207 	add.w	r2, fp, r7
 801af4c:	f00f f844 	bl	8029fd8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801af50:	9b01      	ldr	r3, [sp, #4]
 801af52:	eb09 020b 	add.w	r2, r9, fp
 801af56:	9802      	ldr	r0, [sp, #8]
 801af58:	eba3 010a 	sub.w	r1, r3, sl
 801af5c:	464f      	mov	r7, r9
 801af5e:	f00f f83b 	bl	8029fd8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801af62:	9e01      	ldr	r6, [sp, #4]
 801af64:	42a5      	cmp	r5, r4
 801af66:	db02      	blt.n	801af6e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xd0>
 801af68:	b007      	add	sp, #28
 801af6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af6e:	9b00      	ldr	r3, [sp, #0]
 801af70:	9a04      	ldr	r2, [sp, #16]
 801af72:	42a2      	cmp	r2, r4
 801af74:	bf08      	it	eq
 801af76:	f04f 33ff 	moveq.w	r3, #4294967295
 801af7a:	e7b4      	b.n	801aee6 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x48>

0801af7c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 801af7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af80:	6943      	ldr	r3, [r0, #20]
 801af82:	b0b5      	sub	sp, #212	; 0xd4
 801af84:	4606      	mov	r6, r0
 801af86:	460f      	mov	r7, r1
 801af88:	695d      	ldr	r5, [r3, #20]
 801af8a:	4628      	mov	r0, r5
 801af8c:	f7ff fba6 	bl	801a6dc <_ZNK8touchgfx17AbstractDataGraph15getUsedCapacityEv>
 801af90:	2801      	cmp	r0, #1
 801af92:	dc04      	bgt.n	801af9e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x22>
 801af94:	2501      	movs	r5, #1
 801af96:	4628      	mov	r0, r5
 801af98:	b035      	add	sp, #212	; 0xd4
 801af9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af9e:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801afa2:	ac34      	add	r4, sp, #208	; 0xd0
 801afa4:	011b      	lsls	r3, r3, #4
 801afa6:	f844 3dbc 	str.w	r3, [r4, #-188]!
 801afaa:	4620      	mov	r0, r4
 801afac:	f7ff fe5a 	bl	801ac64 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801afb0:	8839      	ldrh	r1, [r7, #0]
 801afb2:	88ba      	ldrh	r2, [r7, #4]
 801afb4:	b280      	uxth	r0, r0
 801afb6:	f10d 030a 	add.w	r3, sp, #10
 801afba:	440a      	add	r2, r1
 801afbc:	1a09      	subs	r1, r1, r0
 801afbe:	9300      	str	r3, [sp, #0]
 801afc0:	ab02      	add	r3, sp, #8
 801afc2:	4402      	add	r2, r0
 801afc4:	b209      	sxth	r1, r1
 801afc6:	4630      	mov	r0, r6
 801afc8:	b212      	sxth	r2, r2
 801afca:	f7ff fe9b 	bl	801ad04 <_ZNK8touchgfx20AbstractGraphElement24xScreenRangeToIndexRangeEssRsS1_>
 801afce:	2800      	cmp	r0, #0
 801afd0:	d0e0      	beq.n	801af94 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x18>
 801afd2:	4628      	mov	r0, r5
 801afd4:	f7ff fac4 	bl	801a560 <_ZNK8touchgfx17AbstractDataGraph22getGraphAreaPaddingTopEv>
 801afd8:	4681      	mov	r9, r0
 801afda:	4628      	mov	r0, r5
 801afdc:	f7ff fb48 	bl	801a670 <_ZNK8touchgfx17AbstractDataGraph33getGraphAreaWidthIncludingPaddingEv>
 801afe0:	4680      	mov	r8, r0
 801afe2:	4628      	mov	r0, r5
 801afe4:	f7ff fb47 	bl	801a676 <_ZNK8touchgfx17AbstractDataGraph18getGraphAreaHeightEv>
 801afe8:	2300      	movs	r3, #0
 801afea:	4639      	mov	r1, r7
 801afec:	f8ad 0012 	strh.w	r0, [sp, #18]
 801aff0:	a803      	add	r0, sp, #12
 801aff2:	f8ad 300c 	strh.w	r3, [sp, #12]
 801aff6:	f8ad 900e 	strh.w	r9, [sp, #14]
 801affa:	f8ad 8010 	strh.w	r8, [sp, #16]
 801affe:	f7fd f941 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 801b002:	aa03      	add	r2, sp, #12
 801b004:	4631      	mov	r1, r6
 801b006:	4620      	mov	r0, r4
 801b008:	f00e fe8c 	bl	8029d24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801b00c:	4628      	mov	r0, r5
 801b00e:	f7ff fb50 	bl	801a6b2 <_ZNK8touchgfx17AbstractDataGraph17getGapBeforeIndexEv>
 801b012:	1e07      	subs	r7, r0, #0
 801b014:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b018:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801b01c:	dd03      	ble.n	801b026 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xaa>
 801b01e:	42bb      	cmp	r3, r7
 801b020:	da01      	bge.n	801b026 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xaa>
 801b022:	42ba      	cmp	r2, r7
 801b024:	da11      	bge.n	801b04a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xce>
 801b026:	9200      	str	r2, [sp, #0]
 801b028:	462a      	mov	r2, r5
 801b02a:	4621      	mov	r1, r4
 801b02c:	4630      	mov	r0, r6
 801b02e:	f7ff ff36 	bl	801ae9e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801b032:	4628      	mov	r0, r5
 801b034:	f7ff fa86 	bl	801a544 <_ZNK8touchgfx17AbstractDataGraph8getAlphaEv>
 801b038:	4601      	mov	r1, r0
 801b03a:	4620      	mov	r0, r4
 801b03c:	f00f f941 	bl	802a2c2 <_ZN8touchgfx6Canvas6renderEh>
 801b040:	4605      	mov	r5, r0
 801b042:	4620      	mov	r0, r4
 801b044:	f00f f97c 	bl	802a340 <_ZN8touchgfx6CanvasD1Ev>
 801b048:	e7a5      	b.n	801af96 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 801b04a:	1e7a      	subs	r2, r7, #1
 801b04c:	4621      	mov	r1, r4
 801b04e:	4630      	mov	r0, r6
 801b050:	b212      	sxth	r2, r2
 801b052:	9200      	str	r2, [sp, #0]
 801b054:	462a      	mov	r2, r5
 801b056:	f7ff ff22 	bl	801ae9e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801b05a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801b05e:	9300      	str	r3, [sp, #0]
 801b060:	463b      	mov	r3, r7
 801b062:	e7e1      	b.n	801b028 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>

0801b064 <_ZNK8touchgfx15DataGraphScroll9realIndexEs>:
 801b064:	f9b0 3118 	ldrsh.w	r3, [r0, #280]	; 0x118
 801b068:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 801b06c:	429a      	cmp	r2, r3
 801b06e:	db07      	blt.n	801b080 <_ZNK8touchgfx15DataGraphScroll9realIndexEs+0x1c>
 801b070:	f9b0 0148 	ldrsh.w	r0, [r0, #328]	; 0x148
 801b074:	4408      	add	r0, r1
 801b076:	fb90 f1f3 	sdiv	r1, r0, r3
 801b07a:	fb03 0111 	mls	r1, r3, r1, r0
 801b07e:	b209      	sxth	r1, r1
 801b080:	4608      	mov	r0, r1
 801b082:	4770      	bx	lr

0801b084 <_ZNK8touchgfx15DataGraphScroll10indexToXQ5Es>:
 801b084:	0148      	lsls	r0, r1, #5
 801b086:	4770      	bx	lr

0801b088 <_ZN8touchgfx15DataGraphScroll5clearEv>:
 801b088:	b510      	push	{r4, lr}
 801b08a:	4604      	mov	r4, r0
 801b08c:	f7ff f84e 	bl	801a12c <_ZN8touchgfx17AbstractDataGraph5clearEv>
 801b090:	2300      	movs	r3, #0
 801b092:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
 801b096:	bd10      	pop	{r4, pc}

0801b098 <_ZN8touchgfx15DataGraphScroll14beforeAddValueEv>:
 801b098:	f9b0 211a 	ldrsh.w	r2, [r0, #282]	; 0x11a
 801b09c:	f9b0 3118 	ldrsh.w	r3, [r0, #280]	; 0x118
 801b0a0:	429a      	cmp	r2, r3
 801b0a2:	d101      	bne.n	801b0a8 <_ZN8touchgfx15DataGraphScroll14beforeAddValueEv+0x10>
 801b0a4:	f7ff bbca 	b.w	801a83c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 801b0a8:	4770      	bx	lr

0801b0aa <_ZNK8touchgfx15DataGraphScroll18indexToGlobalIndexEs>:
 801b0aa:	b538      	push	{r3, r4, r5, lr}
 801b0ac:	f9b0 4118 	ldrsh.w	r4, [r0, #280]	; 0x118
 801b0b0:	f9b0 511a 	ldrsh.w	r5, [r0, #282]	; 0x11a
 801b0b4:	42a5      	cmp	r5, r4
 801b0b6:	da04      	bge.n	801b0c2 <_ZNK8touchgfx15DataGraphScroll18indexToGlobalIndexEs+0x18>
 801b0b8:	6803      	ldr	r3, [r0, #0]
 801b0ba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801b0be:	4798      	blx	r3
 801b0c0:	bd38      	pop	{r3, r4, r5, pc}
 801b0c2:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 801b0c6:	4408      	add	r0, r1
 801b0c8:	1b00      	subs	r0, r0, r4
 801b0ca:	e7f9      	b.n	801b0c0 <_ZNK8touchgfx15DataGraphScroll18indexToGlobalIndexEs+0x16>

0801b0cc <_ZN8touchgfx15DataGraphScroll8addValueEi>:
 801b0cc:	b570      	push	{r4, r5, r6, lr}
 801b0ce:	f9b0 5148 	ldrsh.w	r5, [r0, #328]	; 0x148
 801b0d2:	4604      	mov	r4, r0
 801b0d4:	f9b0 2118 	ldrsh.w	r2, [r0, #280]	; 0x118
 801b0d8:	1c6b      	adds	r3, r5, #1
 801b0da:	f9b0 611a 	ldrsh.w	r6, [r0, #282]	; 0x11a
 801b0de:	b21b      	sxth	r3, r3
 801b0e0:	42ae      	cmp	r6, r5
 801b0e2:	fb93 f0f2 	sdiv	r0, r3, r2
 801b0e6:	bf08      	it	eq
 801b0e8:	f8a4 311a 	strheq.w	r3, [r4, #282]	; 0x11a
 801b0ec:	4296      	cmp	r6, r2
 801b0ee:	fb02 3010 	mls	r0, r2, r0, r3
 801b0f2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 801b0f6:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
 801b0fa:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801b0fe:	d107      	bne.n	801b110 <_ZN8touchgfx15DataGraphScroll8addValueEi+0x44>
 801b100:	4620      	mov	r0, r4
 801b102:	f7ff fb80 	bl	801a806 <_ZN8touchgfx17AbstractDataGraph19invalidateGraphAreaEv>
 801b106:	4620      	mov	r0, r4
 801b108:	f7ff fb98 	bl	801a83c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 801b10c:	4628      	mov	r0, r5
 801b10e:	bd70      	pop	{r4, r5, r6, pc}
 801b110:	4629      	mov	r1, r5
 801b112:	4620      	mov	r0, r4
 801b114:	f7ff fb67 	bl	801a7e6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 801b118:	e7f8      	b.n	801b10c <_ZN8touchgfx15DataGraphScroll8addValueEi+0x40>
	...

0801b11c <_ZN8touchgfx15DataGraphScrollC1EsPi>:
 801b11c:	b510      	push	{r4, lr}
 801b11e:	4604      	mov	r4, r0
 801b120:	f7ff fcfe 	bl	801ab20 <_ZN8touchgfx22AbstractDataGraphWithYC1EsPi>
 801b124:	4b03      	ldr	r3, [pc, #12]	; (801b134 <_ZN8touchgfx15DataGraphScrollC1EsPi+0x18>)
 801b126:	4620      	mov	r0, r4
 801b128:	6023      	str	r3, [r4, #0]
 801b12a:	2300      	movs	r3, #0
 801b12c:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
 801b130:	bd10      	pop	{r4, pc}
 801b132:	bf00      	nop
 801b134:	0802f844 	.word	0x0802f844

0801b138 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801b138:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801b13c:	4770      	bx	lr

0801b13e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801b13e:	b510      	push	{r4, lr}
 801b140:	4604      	mov	r4, r0
 801b142:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b144:	b150      	cbz	r0, 801b15c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801b146:	6803      	ldr	r3, [r0, #0]
 801b148:	68db      	ldr	r3, [r3, #12]
 801b14a:	4798      	blx	r3
 801b14c:	b130      	cbz	r0, 801b15c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801b14e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b150:	4621      	mov	r1, r4
 801b152:	6803      	ldr	r3, [r0, #0]
 801b154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b158:	689b      	ldr	r3, [r3, #8]
 801b15a:	4718      	bx	r3
 801b15c:	bd10      	pop	{r4, pc}

0801b15e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801b15e:	790b      	ldrb	r3, [r1, #4]
 801b160:	2b00      	cmp	r3, #0
 801b162:	bf0c      	ite	eq
 801b164:	2301      	moveq	r3, #1
 801b166:	2300      	movne	r3, #0
 801b168:	b570      	push	{r4, r5, r6, lr}
 801b16a:	4604      	mov	r4, r0
 801b16c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801b170:	460e      	mov	r6, r1
 801b172:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801b176:	d109      	bne.n	801b18c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801b178:	b14d      	cbz	r5, 801b18e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801b17a:	7933      	ldrb	r3, [r6, #4]
 801b17c:	2b01      	cmp	r3, #1
 801b17e:	d10c      	bne.n	801b19a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801b180:	6823      	ldr	r3, [r4, #0]
 801b182:	4620      	mov	r0, r4
 801b184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b18a:	4718      	bx	r3
 801b18c:	b12d      	cbz	r5, 801b19a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801b18e:	6823      	ldr	r3, [r4, #0]
 801b190:	4620      	mov	r0, r4
 801b192:	695b      	ldr	r3, [r3, #20]
 801b194:	4798      	blx	r3
 801b196:	2d00      	cmp	r5, #0
 801b198:	d1ef      	bne.n	801b17a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801b19a:	bd70      	pop	{r4, r5, r6, pc}

0801b19c <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 801b19c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801b1a0:	4770      	bx	lr

0801b1a2 <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 801b1a2:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 801b1a6:	4770      	bx	lr

0801b1a8 <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 801b1a8:	6802      	ldr	r2, [r0, #0]
 801b1aa:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801b1ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801b1b0:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801b1b4:	4710      	bx	r2

0801b1b6 <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 801b1b6:	6802      	ldr	r2, [r0, #0]
 801b1b8:	eef0 0a40 	vmov.f32	s1, s0
 801b1bc:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801b1c0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801b1c2:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801b1c6:	4710      	bx	r2

0801b1c8 <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 801b1c8:	6802      	ldr	r2, [r0, #0]
 801b1ca:	eeb0 1a40 	vmov.f32	s2, s0
 801b1ce:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801b1d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801b1d4:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801b1d8:	4710      	bx	r2

0801b1da <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 801b1da:	6802      	ldr	r2, [r0, #0]
 801b1dc:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801b1e0:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801b1e2:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801b1e6:	4710      	bx	r2

0801b1e8 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 801b1e8:	6802      	ldr	r2, [r0, #0]
 801b1ea:	eef0 0a40 	vmov.f32	s1, s0
 801b1ee:	ed90 1a0f 	vldr	s2, [r0, #60]	; 0x3c
 801b1f2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801b1f4:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801b1f8:	4710      	bx	r2

0801b1fa <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 801b1fa:	6802      	ldr	r2, [r0, #0]
 801b1fc:	eeb0 1a40 	vmov.f32	s2, s0
 801b200:	edd0 0a0e 	vldr	s1, [r0, #56]	; 0x38
 801b204:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801b206:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801b20a:	4710      	bx	r2

0801b20c <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 801b20c:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801b210:	4770      	bx	lr

0801b212 <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 801b212:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 801b216:	4770      	bx	lr

0801b218 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 801b218:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 801b21c:	4770      	bx	lr

0801b21e <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 801b21e:	ed90 0a10 	vldr	s0, [r0, #64]	; 0x40
 801b222:	4770      	bx	lr

0801b224 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 801b224:	ed90 0a11 	vldr	s0, [r0, #68]	; 0x44
 801b228:	4770      	bx	lr

0801b22a <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 801b22a:	ed90 0a12 	vldr	s0, [r0, #72]	; 0x48
 801b22e:	4770      	bx	lr

0801b230 <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 801b230:	ed90 0a13 	vldr	s0, [r0, #76]	; 0x4c
 801b234:	4770      	bx	lr

0801b236 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 801b236:	ed90 0a14 	vldr	s0, [r0, #80]	; 0x50
 801b23a:	4770      	bx	lr

0801b23c <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 801b23c:	ed90 0a15 	vldr	s0, [r0, #84]	; 0x54
 801b240:	4770      	bx	lr

0801b242 <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 801b242:	ed90 0a16 	vldr	s0, [r0, #88]	; 0x58
 801b246:	4770      	bx	lr

0801b248 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 801b248:	ee07 2a90 	vmov	s15, r2
 801b24c:	6803      	ldr	r3, [r0, #0]
 801b24e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801b252:	ee07 1a90 	vmov	s15, r1
 801b256:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801b25a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b25e:	4718      	bx	r3

0801b260 <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 801b260:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 801b264:	4770      	bx	lr

0801b266 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 801b266:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 801b26a:	4770      	bx	lr

0801b26c <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 801b26c:	ed90 0a17 	vldr	s0, [r0, #92]	; 0x5c
 801b270:	4770      	bx	lr

0801b272 <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 801b272:	ed90 0a1a 	vldr	s0, [r0, #104]	; 0x68
 801b276:	4770      	bx	lr

0801b278 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 801b278:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
 801b27c:	4770      	bx	lr

0801b27e <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 801b27e:	ed90 0a20 	vldr	s0, [r0, #128]	; 0x80
 801b282:	4770      	bx	lr

0801b284 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 801b284:	ed90 0a18 	vldr	s0, [r0, #96]	; 0x60
 801b288:	4770      	bx	lr

0801b28a <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 801b28a:	ed90 0a1b 	vldr	s0, [r0, #108]	; 0x6c
 801b28e:	4770      	bx	lr

0801b290 <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 801b290:	ed90 0a1e 	vldr	s0, [r0, #120]	; 0x78
 801b294:	4770      	bx	lr

0801b296 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 801b296:	ed90 0a21 	vldr	s0, [r0, #132]	; 0x84
 801b29a:	4770      	bx	lr

0801b29c <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 801b29c:	ed90 0a19 	vldr	s0, [r0, #100]	; 0x64
 801b2a0:	4770      	bx	lr

0801b2a2 <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 801b2a2:	ed90 0a1c 	vldr	s0, [r0, #112]	; 0x70
 801b2a6:	4770      	bx	lr

0801b2a8 <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 801b2a8:	ed90 0a1f 	vldr	s0, [r0, #124]	; 0x7c
 801b2ac:	4770      	bx	lr

0801b2ae <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 801b2ae:	ed90 0a22 	vldr	s0, [r0, #136]	; 0x88
 801b2b2:	4770      	bx	lr

0801b2b4 <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 801b2b4:	2200      	movs	r2, #0
 801b2b6:	8002      	strh	r2, [r0, #0]
 801b2b8:	8042      	strh	r2, [r0, #2]
 801b2ba:	8082      	strh	r2, [r0, #4]
 801b2bc:	80c2      	strh	r2, [r0, #6]
 801b2be:	4770      	bx	lr

0801b2c0 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 801b2c0:	b538      	push	{r3, r4, r5, lr}
 801b2c2:	2301      	movs	r3, #1
 801b2c4:	2500      	movs	r5, #0
 801b2c6:	4604      	mov	r4, r0
 801b2c8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
 801b2cc:	4b1f      	ldr	r3, [pc, #124]	; (801b34c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 801b2ce:	8085      	strh	r5, [r0, #4]
 801b2d0:	80c5      	strh	r5, [r0, #6]
 801b2d2:	8105      	strh	r5, [r0, #8]
 801b2d4:	8145      	strh	r5, [r0, #10]
 801b2d6:	8185      	strh	r5, [r0, #12]
 801b2d8:	81c5      	strh	r5, [r0, #14]
 801b2da:	8205      	strh	r5, [r0, #16]
 801b2dc:	8245      	strh	r5, [r0, #18]
 801b2de:	61c5      	str	r5, [r0, #28]
 801b2e0:	8405      	strh	r5, [r0, #32]
 801b2e2:	8445      	strh	r5, [r0, #34]	; 0x22
 801b2e4:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 801b2e8:	6003      	str	r3, [r0, #0]
 801b2ea:	e9c0 5505 	strd	r5, r5, [r0, #20]
 801b2ee:	880b      	ldrh	r3, [r1, #0]
 801b2f0:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b2f2:	23ff      	movs	r3, #255	; 0xff
 801b2f4:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b2f8:	f001 fc76 	bl	801cbe8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b2fc:	4b14      	ldr	r3, [pc, #80]	; (801b350 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 801b2fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801b302:	4914      	ldr	r1, [pc, #80]	; (801b354 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 801b304:	6023      	str	r3, [r4, #0]
 801b306:	2300      	movs	r3, #0
 801b308:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 801b30c:	4620      	mov	r0, r4
 801b30e:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b310:	6323      	str	r3, [r4, #48]	; 0x30
 801b312:	6363      	str	r3, [r4, #52]	; 0x34
 801b314:	63a3      	str	r3, [r4, #56]	; 0x38
 801b316:	63e3      	str	r3, [r4, #60]	; 0x3c
 801b318:	6463      	str	r3, [r4, #68]	; 0x44
 801b31a:	64a3      	str	r3, [r4, #72]	; 0x48
 801b31c:	6523      	str	r3, [r4, #80]	; 0x50
 801b31e:	6563      	str	r3, [r4, #84]	; 0x54
 801b320:	65e3      	str	r3, [r4, #92]	; 0x5c
 801b322:	6623      	str	r3, [r4, #96]	; 0x60
 801b324:	66a3      	str	r3, [r4, #104]	; 0x68
 801b326:	66e3      	str	r3, [r4, #108]	; 0x6c
 801b328:	6763      	str	r3, [r4, #116]	; 0x74
 801b32a:	67a3      	str	r3, [r4, #120]	; 0x78
 801b32c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 801b330:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 801b334:	230c      	movs	r3, #12
 801b336:	6422      	str	r2, [r4, #64]	; 0x40
 801b338:	64e1      	str	r1, [r4, #76]	; 0x4c
 801b33a:	65a1      	str	r1, [r4, #88]	; 0x58
 801b33c:	6662      	str	r2, [r4, #100]	; 0x64
 801b33e:	6722      	str	r2, [r4, #112]	; 0x70
 801b340:	67e2      	str	r2, [r4, #124]	; 0x7c
 801b342:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 801b346:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 801b34a:	bd38      	pop	{r3, r4, r5, pc}
 801b34c:	080300b4 	.word	0x080300b4
 801b350:	0802f9dc 	.word	0x0802f9dc
 801b354:	447a0000 	.word	0x447a0000

0801b358 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 801b358:	b570      	push	{r4, r5, r6, lr}
 801b35a:	ed2d 8b04 	vpush	{d8-d9}
 801b35e:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 801b362:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801b364:	4604      	mov	r4, r0
 801b366:	add0      	add	r5, sp, #832	; 0x340
 801b368:	f825 3d40 	strh.w	r3, [r5, #-64]!
 801b36c:	4628      	mov	r0, r5
 801b36e:	f006 f9bb 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b372:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801b374:	4606      	mov	r6, r0
 801b376:	4628      	mov	r0, r5
 801b378:	f8ad 3300 	strh.w	r3, [sp, #768]	; 0x300
 801b37c:	f006 f9ee 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b384:	1c72      	adds	r2, r6, #1
 801b386:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801b38a:	3001      	adds	r0, #1
 801b38c:	ee07 2a90 	vmov	s15, r2
 801b390:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 801b394:	ee76 5ac7 	vsub.f32	s11, s13, s14
 801b398:	ee06 0a90 	vmov	s13, r0
 801b39c:	ee36 6a47 	vsub.f32	s12, s12, s14
 801b3a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b3a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b3a6:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 801b3aa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b3ae:	9312      	str	r3, [sp, #72]	; 0x48
 801b3b0:	9316      	str	r3, [sp, #88]	; 0x58
 801b3b2:	a830      	add	r0, sp, #192	; 0xc0
 801b3b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 801b3b8:	931a      	str	r3, [sp, #104]	; 0x68
 801b3ba:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801b3be:	931e      	str	r3, [sp, #120]	; 0x78
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b3c6:	edcd 5a11 	vstr	s11, [sp, #68]	; 0x44
 801b3ca:	ae70      	add	r6, sp, #448	; 0x1c0
 801b3cc:	9320      	str	r3, [sp, #128]	; 0x80
 801b3ce:	9321      	str	r3, [sp, #132]	; 0x84
 801b3d0:	9322      	str	r3, [sp, #136]	; 0x88
 801b3d2:	9324      	str	r3, [sp, #144]	; 0x90
 801b3d4:	9325      	str	r3, [sp, #148]	; 0x94
 801b3d6:	9326      	str	r3, [sp, #152]	; 0x98
 801b3d8:	9328      	str	r3, [sp, #160]	; 0xa0
 801b3da:	9329      	str	r3, [sp, #164]	; 0xa4
 801b3dc:	932a      	str	r3, [sp, #168]	; 0xa8
 801b3de:	932c      	str	r3, [sp, #176]	; 0xb0
 801b3e0:	932d      	str	r3, [sp, #180]	; 0xb4
 801b3e2:	932e      	str	r3, [sp, #184]	; 0xb8
 801b3e4:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 801b3e8:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 801b3ec:	edcd 5a15 	vstr	s11, [sp, #84]	; 0x54
 801b3f0:	ed8d 7a17 	vstr	s14, [sp, #92]	; 0x5c
 801b3f4:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 801b3f8:	edcd 6a19 	vstr	s13, [sp, #100]	; 0x64
 801b3fc:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 801b400:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 801b404:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801b408:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 801b40c:	edd4 8a12 	vldr	s17, [r4, #72]	; 0x48
 801b410:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 801b414:	f005 fd5c 	bl	8020ed0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b418:	eeb1 0a49 	vneg.f32	s0, s18
 801b41c:	a830      	add	r0, sp, #192	; 0xc0
 801b41e:	f005 fe27 	bl	8021070 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801b422:	eeb1 0a68 	vneg.f32	s0, s17
 801b426:	f005 fe31 	bl	802108c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801b42a:	eeb1 0a48 	vneg.f32	s0, s16
 801b42e:	f005 fe3c 	bl	80210aa <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 801b432:	a840      	add	r0, sp, #256	; 0x100
 801b434:	f005 fd4c 	bl	8020ed0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b438:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 801b43c:	a840      	add	r0, sp, #256	; 0x100
 801b43e:	f005 fd9b 	bl	8020f78 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 801b442:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 801b446:	f005 fdc1 	bl	8020fcc <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 801b44a:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 801b44e:	f005 fde6 	bl	802101e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 801b452:	a850      	add	r0, sp, #320	; 0x140
 801b454:	f005 fd3c 	bl	8020ed0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b458:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801b45c:	a850      	add	r0, sp, #320	; 0x140
 801b45e:	f005 fe33 	bl	80210c8 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 801b462:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801b466:	f005 fe3b 	bl	80210e0 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 801b46a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 801b46e:	f005 fe44 	bl	80210fa <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 801b472:	a860      	add	r0, sp, #384	; 0x180
 801b474:	f005 fd2c 	bl	8020ed0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b478:	eeb0 0a49 	vmov.f32	s0, s18
 801b47c:	a860      	add	r0, sp, #384	; 0x180
 801b47e:	f005 fdf7 	bl	8021070 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801b482:	eeb0 0a68 	vmov.f32	s0, s17
 801b486:	f005 fe01 	bl	802108c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801b48a:	eeb0 0a48 	vmov.f32	s0, s16
 801b48e:	f005 fe0c 	bl	80210aa <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 801b492:	aa50      	add	r2, sp, #320	; 0x140
 801b494:	a960      	add	r1, sp, #384	; 0x180
 801b496:	a8b0      	add	r0, sp, #704	; 0x2c0
 801b498:	f005 fd32 	bl	8020f00 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801b49c:	4628      	mov	r0, r5
 801b49e:	aa40      	add	r2, sp, #256	; 0x100
 801b4a0:	a9b0      	add	r1, sp, #704	; 0x2c0
 801b4a2:	f005 fd2d 	bl	8020f00 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801b4a6:	4629      	mov	r1, r5
 801b4a8:	aa30      	add	r2, sp, #192	; 0xc0
 801b4aa:	a870      	add	r0, sp, #448	; 0x1c0
 801b4ac:	f005 fd28 	bl	8020f00 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801b4b0:	a880      	add	r0, sp, #512	; 0x200
 801b4b2:	f005 fd0d 	bl	8020ed0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b4b6:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 801b4ba:	a880      	add	r0, sp, #512	; 0x200
 801b4bc:	eeb1 0a40 	vneg.f32	s0, s0
 801b4c0:	f005 fdd6 	bl	8021070 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801b4c4:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 801b4c8:	a880      	add	r0, sp, #512	; 0x200
 801b4ca:	eeb1 0a40 	vneg.f32	s0, s0
 801b4ce:	f005 fddd 	bl	802108c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801b4d2:	a890      	add	r0, sp, #576	; 0x240
 801b4d4:	f005 fcfc 	bl	8020ed0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b4d8:	ed94 0a16 	vldr	s0, [r4, #88]	; 0x58
 801b4dc:	a890      	add	r0, sp, #576	; 0x240
 801b4de:	f005 fd3b 	bl	8020f58 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 801b4e2:	a8a0      	add	r0, sp, #640	; 0x280
 801b4e4:	f005 fcf4 	bl	8020ed0 <_ZN8touchgfx9Matrix4x4C1Ev>
 801b4e8:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 801b4ec:	a8a0      	add	r0, sp, #640	; 0x280
 801b4ee:	f005 fdbf 	bl	8021070 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 801b4f2:	ed94 0a15 	vldr	s0, [r4, #84]	; 0x54
 801b4f6:	f005 fdc9 	bl	802108c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 801b4fa:	aa90      	add	r2, sp, #576	; 0x240
 801b4fc:	a9a0      	add	r1, sp, #640	; 0x280
 801b4fe:	a8b0      	add	r0, sp, #704	; 0x2c0
 801b500:	f005 fcfe 	bl	8020f00 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801b504:	4628      	mov	r0, r5
 801b506:	aa80      	add	r2, sp, #512	; 0x200
 801b508:	a9b0      	add	r1, sp, #704	; 0x2c0
 801b50a:	f005 fcf9 	bl	8020f00 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801b50e:	4629      	mov	r1, r5
 801b510:	466d      	mov	r5, sp
 801b512:	aa70      	add	r2, sp, #448	; 0x1c0
 801b514:	4668      	mov	r0, sp
 801b516:	f005 fcf3 	bl	8020f00 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 801b51a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b51c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b51e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b520:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b524:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b526:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801b52a:	2500      	movs	r5, #0
 801b52c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801b530:	0129      	lsls	r1, r5, #4
 801b532:	ab20      	add	r3, sp, #128	; 0x80
 801b534:	3501      	adds	r5, #1
 801b536:	a870      	add	r0, sp, #448	; 0x1c0
 801b538:	185e      	adds	r6, r3, r1
 801b53a:	ab10      	add	r3, sp, #64	; 0x40
 801b53c:	4419      	add	r1, r3
 801b53e:	f005 fc97 	bl	8020e70 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 801b542:	2d04      	cmp	r5, #4
 801b544:	ed86 0a00 	vstr	s0, [r6]
 801b548:	edc6 0a01 	vstr	s1, [r6, #4]
 801b54c:	ed86 1a02 	vstr	s2, [r6, #8]
 801b550:	edc6 1a03 	vstr	s3, [r6, #12]
 801b554:	d1ec      	bne.n	801b530 <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 801b556:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 801b55a:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 801b55e:	ed9d 7a22 	vldr	s14, [sp, #136]	; 0x88
 801b562:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b566:	ed84 7a19 	vstr	s14, [r4, #100]	; 0x64
 801b56a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b56e:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 801b572:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b576:	ed84 6a17 	vstr	s12, [r4, #92]	; 0x5c
 801b57a:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b57e:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 801b582:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801b586:	ed84 7a1c 	vstr	s14, [r4, #112]	; 0x70
 801b58a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b58e:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 801b592:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b596:	eddd 6a25 	vldr	s13, [sp, #148]	; 0x94
 801b59a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b59e:	ed84 6a1a 	vstr	s12, [r4, #104]	; 0x68
 801b5a2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b5a6:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 801b5aa:	ed9d 7a2a 	vldr	s14, [sp, #168]	; 0xa8
 801b5ae:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
 801b5b2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b5b6:	ed84 6a1b 	vstr	s12, [r4, #108]	; 0x6c
 801b5ba:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b5be:	eddd 6a29 	vldr	s13, [sp, #164]	; 0xa4
 801b5c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b5c6:	ed84 6a1d 	vstr	s12, [r4, #116]	; 0x74
 801b5ca:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b5ce:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 801b5d2:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 801b5d6:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
 801b5da:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801b5de:	ed84 6a1e 	vstr	s12, [r4, #120]	; 0x78
 801b5e2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801b5e6:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 801b5ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b5ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801b5f2:	ed84 6a20 	vstr	s12, [r4, #128]	; 0x80
 801b5f6:	edc4 6a21 	vstr	s13, [r4, #132]	; 0x84
 801b5fa:	f50d 7d50 	add.w	sp, sp, #832	; 0x340
 801b5fe:	ecbd 8b04 	vpop	{d8-d9}
 801b602:	bd70      	pop	{r4, r5, r6, pc}

0801b604 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 801b604:	b510      	push	{r4, lr}
 801b606:	4604      	mov	r4, r0
 801b608:	f001 faee 	bl	801cbe8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b60c:	4620      	mov	r0, r4
 801b60e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b612:	f7ff bea1 	b.w	801b358 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b616 <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 801b616:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
 801b61a:	edc0 0a0e 	vstr	s1, [r0, #56]	; 0x38
 801b61e:	ed80 1a0f 	vstr	s2, [r0, #60]	; 0x3c
 801b622:	f7ff be99 	b.w	801b358 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b626 <_ZN8touchgfx13TextureMapper8setScaleEf>:
 801b626:	ed80 0a10 	vstr	s0, [r0, #64]	; 0x40
 801b62a:	f7ff be95 	b.w	801b358 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b62e <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 801b62e:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
 801b632:	edc0 0a0c 	vstr	s1, [r0, #48]	; 0x30
 801b636:	f7ff be8f 	b.w	801b358 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b63a <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 801b63a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b63e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801b642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b646:	fe30 0a27 	vselgt.f32	s0, s0, s15
 801b64a:	ed80 0a16 	vstr	s0, [r0, #88]	; 0x58
 801b64e:	f7ff be83 	b.w	801b358 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b652 <_ZN8touchgfx13TextureMapper9setCameraEff>:
 801b652:	ed80 0a14 	vstr	s0, [r0, #80]	; 0x50
 801b656:	edc0 0a15 	vstr	s1, [r0, #84]	; 0x54
 801b65a:	f7ff be7d 	b.w	801b358 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b65e <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 801b65e:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 801b662:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 801b666:	f7ff be77 	b.w	801b358 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b66a <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 801b66a:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
 801b66e:	edc0 0a12 	vstr	s1, [r0, #72]	; 0x48
 801b672:	ed80 1a13 	vstr	s2, [r0, #76]	; 0x4c
 801b676:	f7ff be6f 	b.w	801b358 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0801b67a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 801b67a:	b510      	push	{r4, lr}
 801b67c:	edd1 5a1a 	vldr	s11, [r1, #104]	; 0x68
 801b680:	edd1 7a17 	vldr	s15, [r1, #92]	; 0x5c
 801b684:	ed91 6a1d 	vldr	s12, [r1, #116]	; 0x74
 801b688:	eef4 7ae5 	vcmpe.f32	s15, s11
 801b68c:	edd1 6a20 	vldr	s13, [r1, #128]	; 0x80
 801b690:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801b694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b698:	bf54      	ite	pl
 801b69a:	eeb0 7a65 	vmovpl.f32	s14, s11
 801b69e:	eeb0 7a67 	vmovmi.f32	s14, s15
 801b6a2:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801b6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6aa:	fe37 7a06 	vselgt.f32	s14, s14, s12
 801b6ae:	eef4 6ac7 	vcmpe.f32	s13, s14
 801b6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6b6:	fe37 7a26 	vselgt.f32	s14, s14, s13
 801b6ba:	febb 7a47 	vrintm.f32	s14, s14
 801b6be:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801b6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6c6:	eef4 7ae5 	vcmpe.f32	s15, s11
 801b6ca:	bf56      	itet	pl
 801b6cc:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 801b6d0:	2200      	movmi	r2, #0
 801b6d2:	ee17 3a10 	vmovpl	r3, s14
 801b6d6:	ee07 4a10 	vmov	s14, r4
 801b6da:	bf58      	it	pl
 801b6dc:	b21a      	sxthpl	r2, r3
 801b6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b6e6:	8002      	strh	r2, [r0, #0]
 801b6e8:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801b6ec:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b6f0:	edd1 5a1b 	vldr	s11, [r1, #108]	; 0x6c
 801b6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6f8:	bf58      	it	pl
 801b6fa:	eef0 7a46 	vmovpl.f32	s15, s12
 801b6fe:	ed91 6a1e 	vldr	s12, [r1, #120]	; 0x78
 801b702:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b70a:	bf58      	it	pl
 801b70c:	eef0 7a66 	vmovpl.f32	s15, s13
 801b710:	edd1 6a21 	vldr	s13, [r1, #132]	; 0x84
 801b714:	fefa 7a67 	vrintp.f32	s15, s15
 801b718:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b720:	bfdc      	itt	le
 801b722:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801b726:	ee17 3a90 	vmovle	r3, s15
 801b72a:	edd1 7a18 	vldr	s15, [r1, #96]	; 0x60
 801b72e:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801b732:	eef4 7ae5 	vcmpe.f32	s15, s11
 801b736:	bfd8      	it	le
 801b738:	b21c      	sxthle	r4, r3
 801b73a:	1aa2      	subs	r2, r4, r2
 801b73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b740:	8082      	strh	r2, [r0, #4]
 801b742:	bf54      	ite	pl
 801b744:	eeb0 7a65 	vmovpl.f32	s14, s11
 801b748:	eeb0 7a67 	vmovmi.f32	s14, s15
 801b74c:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801b750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b754:	fe37 7a06 	vselgt.f32	s14, s14, s12
 801b758:	eef4 6ac7 	vcmpe.f32	s13, s14
 801b75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b760:	fe37 7a26 	vselgt.f32	s14, s14, s13
 801b764:	febb 7a47 	vrintm.f32	s14, s14
 801b768:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801b76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b770:	eef4 7ae5 	vcmpe.f32	s15, s11
 801b774:	bf56      	itet	pl
 801b776:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 801b77a:	2300      	movmi	r3, #0
 801b77c:	ee17 3a10 	vmovpl	r3, s14
 801b780:	ee07 1a10 	vmov	s14, r1
 801b784:	bf58      	it	pl
 801b786:	b21b      	sxthpl	r3, r3
 801b788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b78c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b790:	8043      	strh	r3, [r0, #2]
 801b792:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801b796:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801b79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b79e:	bf58      	it	pl
 801b7a0:	eef0 7a46 	vmovpl.f32	s15, s12
 801b7a4:	eef4 6ae7 	vcmpe.f32	s13, s15
 801b7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7ac:	bf58      	it	pl
 801b7ae:	eef0 7a66 	vmovpl.f32	s15, s13
 801b7b2:	fefa 7a67 	vrintp.f32	s15, s15
 801b7b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7be:	bfde      	ittt	le
 801b7c0:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801b7c4:	ee17 1a90 	vmovle	r1, s15
 801b7c8:	b209      	sxthle	r1, r1
 801b7ca:	1acb      	subs	r3, r1, r3
 801b7cc:	80c3      	strh	r3, [r0, #6]
 801b7ce:	bd10      	pop	{r4, pc}

0801b7d0 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 801b7d0:	b510      	push	{r4, lr}
 801b7d2:	ed2d 8b04 	vpush	{d8-d9}
 801b7d6:	b084      	sub	sp, #16
 801b7d8:	4604      	mov	r4, r0
 801b7da:	4601      	mov	r1, r0
 801b7dc:	eeb0 8a40 	vmov.f32	s16, s0
 801b7e0:	4668      	mov	r0, sp
 801b7e2:	eef0 8a60 	vmov.f32	s17, s1
 801b7e6:	eeb0 9a41 	vmov.f32	s18, s2
 801b7ea:	f7ff ff46 	bl	801b67a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801b7ee:	6823      	ldr	r3, [r4, #0]
 801b7f0:	4669      	mov	r1, sp
 801b7f2:	4620      	mov	r0, r4
 801b7f4:	691b      	ldr	r3, [r3, #16]
 801b7f6:	4798      	blx	r3
 801b7f8:	6823      	ldr	r3, [r4, #0]
 801b7fa:	eeb0 1a49 	vmov.f32	s2, s18
 801b7fe:	4620      	mov	r0, r4
 801b800:	eef0 0a68 	vmov.f32	s1, s17
 801b804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b806:	eeb0 0a48 	vmov.f32	s0, s16
 801b80a:	4798      	blx	r3
 801b80c:	4621      	mov	r1, r4
 801b80e:	a802      	add	r0, sp, #8
 801b810:	f7ff ff33 	bl	801b67a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801b814:	6823      	ldr	r3, [r4, #0]
 801b816:	a902      	add	r1, sp, #8
 801b818:	4620      	mov	r0, r4
 801b81a:	691b      	ldr	r3, [r3, #16]
 801b81c:	4798      	blx	r3
 801b81e:	b004      	add	sp, #16
 801b820:	ecbd 8b04 	vpop	{d8-d9}
 801b824:	bd10      	pop	{r4, pc}

0801b826 <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 801b826:	b510      	push	{r4, lr}
 801b828:	ed2d 8b02 	vpush	{d8}
 801b82c:	b084      	sub	sp, #16
 801b82e:	4604      	mov	r4, r0
 801b830:	4601      	mov	r1, r0
 801b832:	eeb0 8a40 	vmov.f32	s16, s0
 801b836:	4668      	mov	r0, sp
 801b838:	f7ff ff1f 	bl	801b67a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801b83c:	6823      	ldr	r3, [r4, #0]
 801b83e:	4669      	mov	r1, sp
 801b840:	4620      	mov	r0, r4
 801b842:	691b      	ldr	r3, [r3, #16]
 801b844:	4798      	blx	r3
 801b846:	6823      	ldr	r3, [r4, #0]
 801b848:	eeb0 0a48 	vmov.f32	s0, s16
 801b84c:	4620      	mov	r0, r4
 801b84e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b852:	4798      	blx	r3
 801b854:	4621      	mov	r1, r4
 801b856:	a802      	add	r0, sp, #8
 801b858:	f7ff ff0f 	bl	801b67a <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 801b85c:	6823      	ldr	r3, [r4, #0]
 801b85e:	a902      	add	r1, sp, #8
 801b860:	4620      	mov	r0, r4
 801b862:	691b      	ldr	r3, [r3, #16]
 801b864:	4798      	blx	r3
 801b866:	b004      	add	sp, #16
 801b868:	ecbd 8b02 	vpop	{d8}
 801b86c:	bd10      	pop	{r4, pc}

0801b86e <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 801b86e:	4603      	mov	r3, r0
 801b870:	3026      	adds	r0, #38	; 0x26
 801b872:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801b876:	b90b      	cbnz	r3, 801b87c <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 801b878:	f004 b923 	b.w	801fac2 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 801b87c:	f004 b931 	b.w	801fae2 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>

0801b880 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 801b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b884:	4604      	mov	r4, r0
 801b886:	469b      	mov	fp, r3
 801b888:	ed2d 8b04 	vpush	{d8-d9}
 801b88c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 801b890:	b0b3      	sub	sp, #204	; 0xcc
 801b892:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b896:	f9b1 6000 	ldrsh.w	r6, [r1]
 801b89a:	8888      	ldrh	r0, [r1, #4]
 801b89c:	9206      	str	r2, [sp, #24]
 801b89e:	2200      	movs	r2, #0
 801b8a0:	4430      	add	r0, r6
 801b8a2:	f8dd a100 	ldr.w	sl, [sp, #256]	; 0x100
 801b8a6:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 801b8aa:	b280      	uxth	r0, r0
 801b8ac:	f8dd 8108 	ldr.w	r8, [sp, #264]	; 0x108
 801b8b0:	9f43      	ldr	r7, [sp, #268]	; 0x10c
 801b8b2:	fa0f fe80 	sxth.w	lr, r0
 801b8b6:	9211      	str	r2, [sp, #68]	; 0x44
 801b8b8:	4596      	cmp	lr, r2
 801b8ba:	f340 8129 	ble.w	801bb10 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801b8be:	45b4      	cmp	ip, r6
 801b8c0:	f340 8126 	ble.w	801bb10 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801b8c4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801b8c8:	88ca      	ldrh	r2, [r1, #6]
 801b8ca:	442a      	add	r2, r5
 801b8cc:	b292      	uxth	r2, r2
 801b8ce:	b211      	sxth	r1, r2
 801b8d0:	2900      	cmp	r1, #0
 801b8d2:	f340 811d 	ble.w	801bb10 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801b8d6:	42ab      	cmp	r3, r5
 801b8d8:	f340 811a 	ble.w	801bb10 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 801b8dc:	45f4      	cmp	ip, lr
 801b8de:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801b8e2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801b8e6:	bfb8      	it	lt
 801b8e8:	fa1f f08c 	uxthlt.w	r0, ip
 801b8ec:	428b      	cmp	r3, r1
 801b8ee:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801b8f2:	bfb8      	it	lt
 801b8f4:	b29a      	uxthlt	r2, r3
 801b8f6:	1b80      	subs	r0, r0, r6
 801b8f8:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801b8fc:	1b52      	subs	r2, r2, r5
 801b8fe:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 801b902:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 801b906:	ab11      	add	r3, sp, #68	; 0x44
 801b908:	ad13      	add	r5, sp, #76	; 0x4c
 801b90a:	6822      	ldr	r2, [r4, #0]
 801b90c:	1d26      	adds	r6, r4, #4
 801b90e:	9307      	str	r3, [sp, #28]
 801b910:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801b912:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b916:	e885 0003 	stmia.w	r5, {r0, r1}
 801b91a:	4629      	mov	r1, r5
 801b91c:	4620      	mov	r0, r4
 801b91e:	4790      	blx	r2
 801b920:	4621      	mov	r1, r4
 801b922:	a815      	add	r0, sp, #84	; 0x54
 801b924:	f004 f828 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b928:	a815      	add	r0, sp, #84	; 0x54
 801b92a:	f002 fe4f 	bl	801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b92e:	9b07      	ldr	r3, [sp, #28]
 801b930:	4631      	mov	r1, r6
 801b932:	4618      	mov	r0, r3
 801b934:	f002 fe8e 	bl	801e654 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b938:	4628      	mov	r0, r5
 801b93a:	f104 0526 	add.w	r5, r4, #38	; 0x26
 801b93e:	f002 fe45 	bl	801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b942:	4628      	mov	r0, r5
 801b944:	f005 ffd8 	bl	80218f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b948:	9007      	str	r0, [sp, #28]
 801b94a:	2800      	cmp	r0, #0
 801b94c:	f000 80db 	beq.w	801bb06 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 801b950:	f8db 2000 	ldr.w	r2, [fp]
 801b954:	a90d      	add	r1, sp, #52	; 0x34
 801b956:	a809      	add	r0, sp, #36	; 0x24
 801b958:	9209      	str	r2, [sp, #36]	; 0x24
 801b95a:	f8db 2004 	ldr.w	r2, [fp, #4]
 801b95e:	920a      	str	r2, [sp, #40]	; 0x28
 801b960:	f8db 2008 	ldr.w	r2, [fp, #8]
 801b964:	920b      	str	r2, [sp, #44]	; 0x2c
 801b966:	f8db 200c 	ldr.w	r2, [fp, #12]
 801b96a:	920c      	str	r2, [sp, #48]	; 0x30
 801b96c:	f8da 2000 	ldr.w	r2, [sl]
 801b970:	920d      	str	r2, [sp, #52]	; 0x34
 801b972:	f8da 2004 	ldr.w	r2, [sl, #4]
 801b976:	920e      	str	r2, [sp, #56]	; 0x38
 801b978:	f8da 2008 	ldr.w	r2, [sl, #8]
 801b97c:	920f      	str	r2, [sp, #60]	; 0x3c
 801b97e:	f8da 200c 	ldr.w	r2, [sl, #12]
 801b982:	9210      	str	r2, [sp, #64]	; 0x40
 801b984:	4632      	mov	r2, r6
 801b986:	f002 fe49 	bl	801e61c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b98a:	4632      	mov	r2, r6
 801b98c:	a90e      	add	r1, sp, #56	; 0x38
 801b98e:	a80a      	add	r0, sp, #40	; 0x28
 801b990:	f002 fe44 	bl	801e61c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b994:	4632      	mov	r2, r6
 801b996:	a90f      	add	r1, sp, #60	; 0x3c
 801b998:	a80b      	add	r0, sp, #44	; 0x2c
 801b99a:	f002 fe3f 	bl	801e61c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b99e:	4632      	mov	r2, r6
 801b9a0:	a910      	add	r1, sp, #64	; 0x40
 801b9a2:	a80c      	add	r0, sp, #48	; 0x30
 801b9a4:	f002 fe3a 	bl	801e61c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801b9a8:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801b9ac:	edd7 4a00 	vldr	s9, [r7]
 801b9b0:	eef0 6a67 	vmov.f32	s13, s15
 801b9b4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801b9b8:	edd7 5a01 	vldr	s11, [r7, #4]
 801b9bc:	eeb0 7a67 	vmov.f32	s14, s15
 801b9c0:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 801b9c4:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801b9c8:	ed98 4a00 	vldr	s8, [r8]
 801b9cc:	eeb0 6a67 	vmov.f32	s12, s15
 801b9d0:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 801b9d4:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801b9d8:	ed98 5a01 	vldr	s10, [r8, #4]
 801b9dc:	ed99 9a00 	vldr	s18, [r9]
 801b9e0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801b9e4:	ed99 8a01 	vldr	s16, [r9, #4]
 801b9e8:	edd9 8a02 	vldr	s17, [r9, #8]
 801b9ec:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801b9f0:	ee16 6a10 	vmov	r6, s12
 801b9f4:	eeb0 6a67 	vmov.f32	s12, s15
 801b9f8:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801b9fc:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801ba00:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801ba04:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801ba08:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 801ba0c:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 801ba10:	ee16 0a10 	vmov	r0, s12
 801ba14:	eeb0 6a67 	vmov.f32	s12, s15
 801ba18:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801ba1c:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801ba20:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801ba24:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 801ba28:	edcd 5a27 	vstr	s11, [sp, #156]	; 0x9c
 801ba2c:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801ba30:	ee16 1a10 	vmov	r1, s12
 801ba34:	eeb0 6a67 	vmov.f32	s12, s15
 801ba38:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801ba3c:	f8d8 b008 	ldr.w	fp, [r8, #8]
 801ba40:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801ba44:	68ff      	ldr	r7, [r7, #12]
 801ba46:	9624      	str	r6, [sp, #144]	; 0x90
 801ba48:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 801ba4c:	ed8d 9a20 	vstr	s18, [sp, #128]	; 0x80
 801ba50:	ee16 2a10 	vmov	r2, s12
 801ba54:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 801ba58:	ed8d 8a25 	vstr	s16, [sp, #148]	; 0x94
 801ba5c:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 801ba60:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 801ba64:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 801ba68:	4628      	mov	r0, r5
 801ba6a:	edcd 8a2a 	vstr	s17, [sp, #168]	; 0xa8
 801ba6e:	9b06      	ldr	r3, [sp, #24]
 801ba70:	922d      	str	r2, [sp, #180]	; 0xb4
 801ba72:	4a29      	ldr	r2, [pc, #164]	; (801bb18 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 801ba74:	9317      	str	r3, [sp, #92]	; 0x5c
 801ba76:	8812      	ldrh	r2, [r2, #0]
 801ba78:	9b07      	ldr	r3, [sp, #28]
 801ba7a:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 801ba7e:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 801ba82:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 801ba86:	9218      	str	r2, [sp, #96]	; 0x60
 801ba88:	9319      	str	r3, [sp, #100]	; 0x64
 801ba8a:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 801ba8e:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 801ba92:	9731      	str	r7, [sp, #196]	; 0xc4
 801ba94:	f005 ff62 	bl	802195c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801ba98:	901a      	str	r0, [sp, #104]	; 0x68
 801ba9a:	4628      	mov	r0, r5
 801ba9c:	f005 fe24 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801baa0:	901b      	str	r0, [sp, #108]	; 0x6c
 801baa2:	4628      	mov	r0, r5
 801baa4:	f005 fe5a 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801baa8:	901c      	str	r0, [sp, #112]	; 0x70
 801baaa:	4628      	mov	r0, r5
 801baac:	f005 fe1c 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bab0:	eeb4 9a48 	vcmp.f32	s18, s16
 801bab4:	901d      	str	r0, [sp, #116]	; 0x74
 801bab6:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 801baba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801babe:	d107      	bne.n	801bad0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 801bac0:	eeb4 8a68 	vcmp.f32	s16, s17
 801bac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bacc:	bf08      	it	eq
 801bace:	461e      	moveq	r6, r3
 801bad0:	4b12      	ldr	r3, [pc, #72]	; (801bb1c <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801bad8:	b10a      	cbz	r2, 801bade <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 801bada:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801badc:	b905      	cbnz	r5, 801bae0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 801bade:	689d      	ldr	r5, [r3, #8]
 801bae0:	682b      	ldr	r3, [r5, #0]
 801bae2:	4620      	mov	r0, r4
 801bae4:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 801bae6:	f7ff fec2 	bl	801b86e <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 801baea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801baee:	aa1e      	add	r2, sp, #120	; 0x78
 801baf0:	9604      	str	r6, [sp, #16]
 801baf2:	a917      	add	r1, sp, #92	; 0x5c
 801baf4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801baf8:	ab13      	add	r3, sp, #76	; 0x4c
 801bafa:	4628      	mov	r0, r5
 801bafc:	9301      	str	r3, [sp, #4]
 801bafe:	ab15      	add	r3, sp, #84	; 0x54
 801bb00:	9300      	str	r3, [sp, #0]
 801bb02:	ab19      	add	r3, sp, #100	; 0x64
 801bb04:	47b8      	blx	r7
 801bb06:	b033      	add	sp, #204	; 0xcc
 801bb08:	ecbd 8b04 	vpop	{d8-d9}
 801bb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb10:	2300      	movs	r3, #0
 801bb12:	9312      	str	r3, [sp, #72]	; 0x48
 801bb14:	e6f7      	b.n	801b906 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 801bb16:	bf00      	nop
 801bb18:	2400c8b6 	.word	0x2400c8b6
 801bb1c:	2400c8bc 	.word	0x2400c8bc

0801bb20 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 801bb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb24:	ed2d 8b02 	vpush	{d8}
 801bb28:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801bb2c:	b098      	sub	sp, #96	; 0x60
 801bb2e:	4604      	mov	r4, r0
 801bb30:	4688      	mov	r8, r1
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d077      	beq.n	801bc26 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 801bb36:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801bb3a:	4628      	mov	r0, r5
 801bb3c:	f005 fdd4 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bb40:	ee07 0a90 	vmov	s15, r0
 801bb44:	4628      	mov	r0, r5
 801bb46:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 801bb4a:	f005 fe07 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bb4e:	4b4e      	ldr	r3, [pc, #312]	; (801bc88 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 801bb50:	ee07 0a90 	vmov	s15, r0
 801bb54:	781b      	ldrb	r3, [r3, #0]
 801bb56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801bb5a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801bb5e:	2b01      	cmp	r3, #1
 801bb60:	d066      	beq.n	801bc30 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 801bb62:	eeb0 6a47 	vmov.f32	s12, s14
 801bb66:	ee17 3a10 	vmov	r3, s14
 801bb6a:	eeb0 4a48 	vmov.f32	s8, s16
 801bb6e:	eeb0 7a48 	vmov.f32	s14, s16
 801bb72:	eef0 4a67 	vmov.f32	s9, s15
 801bb76:	eeb0 8a67 	vmov.f32	s16, s15
 801bb7a:	ed94 5a17 	vldr	s10, [r4, #92]	; 0x5c
 801bb7e:	edd4 5a18 	vldr	s11, [r4, #96]	; 0x60
 801bb82:	ed94 3a1b 	vldr	s6, [r4, #108]	; 0x6c
 801bb86:	edd4 2a1d 	vldr	s5, [r4, #116]	; 0x74
 801bb8a:	ee73 1a65 	vsub.f32	s3, s6, s11
 801bb8e:	ed94 2a1a 	vldr	s4, [r4, #104]	; 0x68
 801bb92:	ee72 6ac5 	vsub.f32	s13, s5, s10
 801bb96:	edd4 3a1e 	vldr	s7, [r4, #120]	; 0x78
 801bb9a:	ee32 1a45 	vsub.f32	s2, s4, s10
 801bb9e:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801bba0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801bba2:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 801bba6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801bba8:	ee73 1ae5 	vsub.f32	s3, s7, s11
 801bbac:	f8d4 c080 	ldr.w	ip, [r4, #128]	; 0x80
 801bbb0:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
 801bbb4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801bbb8:	eee1 6a21 	vfma.f32	s13, s2, s3
 801bbbc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801bbc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbc4:	dd3d      	ble.n	801bc42 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 801bbc6:	ed8d 5a04 	vstr	s10, [sp, #16]
 801bbca:	ed8d 2a05 	vstr	s4, [sp, #20]
 801bbce:	edcd 2a06 	vstr	s5, [sp, #24]
 801bbd2:	f8cd c01c 	str.w	ip, [sp, #28]
 801bbd6:	edcd 5a08 	vstr	s11, [sp, #32]
 801bbda:	ed8d 3a09 	vstr	s6, [sp, #36]	; 0x24
 801bbde:	edcd 3a0a 	vstr	s7, [sp, #40]	; 0x28
 801bbe2:	970b      	str	r7, [sp, #44]	; 0x2c
 801bbe4:	960c      	str	r6, [sp, #48]	; 0x30
 801bbe6:	950d      	str	r5, [sp, #52]	; 0x34
 801bbe8:	920e      	str	r2, [sp, #56]	; 0x38
 801bbea:	900f      	str	r0, [sp, #60]	; 0x3c
 801bbec:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 801bbf0:	ed8d 4a11 	vstr	s8, [sp, #68]	; 0x44
 801bbf4:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 801bbf8:	edcd 4a13 	vstr	s9, [sp, #76]	; 0x4c
 801bbfc:	ed8d 8a14 	vstr	s16, [sp, #80]	; 0x50
 801bc00:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 801bc04:	9316      	str	r3, [sp, #88]	; 0x58
 801bc06:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 801bc0a:	ab14      	add	r3, sp, #80	; 0x50
 801bc0c:	2200      	movs	r2, #0
 801bc0e:	4641      	mov	r1, r8
 801bc10:	4620      	mov	r0, r4
 801bc12:	9303      	str	r3, [sp, #12]
 801bc14:	ab10      	add	r3, sp, #64	; 0x40
 801bc16:	9302      	str	r3, [sp, #8]
 801bc18:	ab0c      	add	r3, sp, #48	; 0x30
 801bc1a:	9301      	str	r3, [sp, #4]
 801bc1c:	ab08      	add	r3, sp, #32
 801bc1e:	9300      	str	r3, [sp, #0]
 801bc20:	ab04      	add	r3, sp, #16
 801bc22:	f7ff fe2d 	bl	801b880 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 801bc26:	b018      	add	sp, #96	; 0x60
 801bc28:	ecbd 8b02 	vpop	{d8}
 801bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc30:	eeb0 6a48 	vmov.f32	s12, s16
 801bc34:	ee17 3a90 	vmov	r3, s15
 801bc38:	eef0 4a47 	vmov.f32	s9, s14
 801bc3c:	eeb0 4a67 	vmov.f32	s8, s15
 801bc40:	e79b      	b.n	801bb7a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 801bc42:	ed8d 5a05 	vstr	s10, [sp, #20]
 801bc46:	ed8d 2a04 	vstr	s4, [sp, #16]
 801bc4a:	f8cd c018 	str.w	ip, [sp, #24]
 801bc4e:	edcd 2a07 	vstr	s5, [sp, #28]
 801bc52:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 801bc56:	ed8d 3a08 	vstr	s6, [sp, #32]
 801bc5a:	970a      	str	r7, [sp, #40]	; 0x28
 801bc5c:	edcd 3a0b 	vstr	s7, [sp, #44]	; 0x2c
 801bc60:	960d      	str	r6, [sp, #52]	; 0x34
 801bc62:	950c      	str	r5, [sp, #48]	; 0x30
 801bc64:	900e      	str	r0, [sp, #56]	; 0x38
 801bc66:	920f      	str	r2, [sp, #60]	; 0x3c
 801bc68:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 801bc6c:	ed8d 4a10 	vstr	s8, [sp, #64]	; 0x40
 801bc70:	edcd 4a12 	vstr	s9, [sp, #72]	; 0x48
 801bc74:	ed8d 7a13 	vstr	s14, [sp, #76]	; 0x4c
 801bc78:	ed8d 8a15 	vstr	s16, [sp, #84]	; 0x54
 801bc7c:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
 801bc80:	ed8d 6a16 	vstr	s12, [sp, #88]	; 0x58
 801bc84:	9317      	str	r3, [sp, #92]	; 0x5c
 801bc86:	e7c0      	b.n	801bc0a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 801bc88:	2400c8b4 	.word	0x2400c8b4

0801bc8c <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801bc8c:	6803      	ldr	r3, [r0, #0]
 801bc8e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801bc92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bc94:	4718      	bx	r3

0801bc96 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801bc96:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801bc9a:	2bff      	cmp	r3, #255	; 0xff
 801bc9c:	b510      	push	{r4, lr}
 801bc9e:	d104      	bne.n	801bcaa <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801bca0:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801bca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bca6:	429a      	cmp	r2, r3
 801bca8:	d105      	bne.n	801bcb6 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801bcaa:	2300      	movs	r3, #0
 801bcac:	8003      	strh	r3, [r0, #0]
 801bcae:	8043      	strh	r3, [r0, #2]
 801bcb0:	8083      	strh	r3, [r0, #4]
 801bcb2:	80c3      	strh	r3, [r0, #6]
 801bcb4:	bd10      	pop	{r4, pc}
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801bcbc:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801bcc0:	8003      	strh	r3, [r0, #0]
 801bcc2:	8043      	strh	r3, [r0, #2]
 801bcc4:	8084      	strh	r4, [r0, #4]
 801bcc6:	80c2      	strh	r2, [r0, #6]
 801bcc8:	e7f4      	b.n	801bcb4 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801bcca <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801bcca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bcce:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801bcd2:	b087      	sub	sp, #28
 801bcd4:	4604      	mov	r4, r0
 801bcd6:	4689      	mov	r9, r1
 801bcd8:	b363      	cbz	r3, 801bd34 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801bcda:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801bcdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bce0:	429a      	cmp	r2, r3
 801bce2:	d027      	beq.n	801bd34 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801bce4:	ad06      	add	r5, sp, #24
 801bce6:	2700      	movs	r7, #0
 801bce8:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801bcec:	4628      	mov	r0, r5
 801bcee:	f005 fcfb 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bcf2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801bcf6:	a904      	add	r1, sp, #16
 801bcf8:	f8ad 0014 	strh.w	r0, [sp, #20]
 801bcfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bd00:	4620      	mov	r0, r4
 801bd02:	6823      	ldr	r3, [r4, #0]
 801bd04:	9704      	str	r7, [sp, #16]
 801bd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd08:	4798      	blx	r3
 801bd0a:	f7e8 fba5 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 801bd0e:	6803      	ldr	r3, [r0, #0]
 801bd10:	4606      	mov	r6, r0
 801bd12:	4628      	mov	r0, r5
 801bd14:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801bd18:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801bd1a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bd1e:	f005 fdeb 	bl	80218f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801bd22:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801bd26:	4601      	mov	r1, r0
 801bd28:	9701      	str	r7, [sp, #4]
 801bd2a:	aa04      	add	r2, sp, #16
 801bd2c:	9300      	str	r3, [sp, #0]
 801bd2e:	4630      	mov	r0, r6
 801bd30:	464b      	mov	r3, r9
 801bd32:	47c0      	blx	r8
 801bd34:	b007      	add	sp, #28
 801bd36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801bd3a <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801bd3a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801bd3c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801bd40:	460d      	mov	r5, r1
 801bd42:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801bd46:	2100      	movs	r1, #0
 801bd48:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bd4c:	4604      	mov	r4, r0
 801bd4e:	6803      	ldr	r3, [r0, #0]
 801bd50:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd56:	9100      	str	r1, [sp, #0]
 801bd58:	4669      	mov	r1, sp
 801bd5a:	4798      	blx	r3
 801bd5c:	4621      	mov	r1, r4
 801bd5e:	a802      	add	r0, sp, #8
 801bd60:	f003 fe0a 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bd64:	f7e8 fb78 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 801bd68:	6803      	ldr	r3, [r0, #0]
 801bd6a:	aa02      	add	r2, sp, #8
 801bd6c:	4669      	mov	r1, sp
 801bd6e:	695e      	ldr	r6, [r3, #20]
 801bd70:	462b      	mov	r3, r5
 801bd72:	47b0      	blx	r6
 801bd74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bd78:	2800      	cmp	r0, #0
 801bd7a:	bf08      	it	eq
 801bd7c:	461d      	moveq	r5, r3
 801bd7e:	84e5      	strh	r5, [r4, #38]	; 0x26
 801bd80:	b004      	add	sp, #16
 801bd82:	bd70      	pop	{r4, r5, r6, pc}

0801bd84 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801bd84:	2200      	movs	r2, #0
 801bd86:	8082      	strh	r2, [r0, #4]
 801bd88:	80c2      	strh	r2, [r0, #6]
 801bd8a:	8102      	strh	r2, [r0, #8]
 801bd8c:	8142      	strh	r2, [r0, #10]
 801bd8e:	8182      	strh	r2, [r0, #12]
 801bd90:	81c2      	strh	r2, [r0, #14]
 801bd92:	8202      	strh	r2, [r0, #16]
 801bd94:	8242      	strh	r2, [r0, #18]
 801bd96:	61c2      	str	r2, [r0, #28]
 801bd98:	8402      	strh	r2, [r0, #32]
 801bd9a:	8442      	strh	r2, [r0, #34]	; 0x22
 801bd9c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801bda0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801bda4:	2201      	movs	r2, #1
 801bda6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801bdaa:	4a04      	ldr	r2, [pc, #16]	; (801bdbc <_ZN8touchgfx14SnapshotWidgetC1Ev+0x38>)
 801bdac:	6002      	str	r2, [r0, #0]
 801bdae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bdb2:	84c2      	strh	r2, [r0, #38]	; 0x26
 801bdb4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801bdb8:	4770      	bx	lr
 801bdba:	bf00      	nop
 801bdbc:	0802faec 	.word	0x0802faec

0801bdc0 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801bdc0:	2200      	movs	r2, #0
 801bdc2:	8002      	strh	r2, [r0, #0]
 801bdc4:	8042      	strh	r2, [r0, #2]
 801bdc6:	8082      	strh	r2, [r0, #4]
 801bdc8:	80c2      	strh	r2, [r0, #6]
 801bdca:	4770      	bx	lr

0801bdcc <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801bdcc:	b570      	push	{r4, r5, r6, lr}
 801bdce:	6803      	ldr	r3, [r0, #0]
 801bdd0:	4604      	mov	r4, r0
 801bdd2:	4615      	mov	r5, r2
 801bdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bdd6:	4798      	blx	r3
 801bdd8:	6823      	ldr	r3, [r4, #0]
 801bdda:	4629      	mov	r1, r5
 801bddc:	4620      	mov	r0, r4
 801bdde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801bde0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bde4:	4718      	bx	r3
	...

0801bde8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801bde8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bdea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bdee:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801bdf0:	4299      	cmp	r1, r3
 801bdf2:	d029      	beq.n	801be48 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 801bdf4:	4b15      	ldr	r3, [pc, #84]	; (801be4c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801bdf6:	681b      	ldr	r3, [r3, #0]
 801bdf8:	b92b      	cbnz	r3, 801be06 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801bdfa:	4b15      	ldr	r3, [pc, #84]	; (801be50 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801bdfc:	21ae      	movs	r1, #174	; 0xae
 801bdfe:	4a15      	ldr	r2, [pc, #84]	; (801be54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801be00:	4815      	ldr	r0, [pc, #84]	; (801be58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801be02:	f00f fd31 	bl	802b868 <__assert_func>
 801be06:	4a15      	ldr	r2, [pc, #84]	; (801be5c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 801be08:	8812      	ldrh	r2, [r2, #0]
 801be0a:	428a      	cmp	r2, r1
 801be0c:	d803      	bhi.n	801be16 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801be0e:	4b14      	ldr	r3, [pc, #80]	; (801be60 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 801be10:	21af      	movs	r1, #175	; 0xaf
 801be12:	4a10      	ldr	r2, [pc, #64]	; (801be54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801be14:	e7f4      	b.n	801be00 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801be16:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801be1a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801be1e:	4b11      	ldr	r3, [pc, #68]	; (801be64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 801be20:	7854      	ldrb	r4, [r2, #1]
 801be22:	681b      	ldr	r3, [r3, #0]
 801be24:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801be28:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801be2c:	682b      	ldr	r3, [r5, #0]
 801be2e:	69de      	ldr	r6, [r3, #28]
 801be30:	4b0d      	ldr	r3, [pc, #52]	; (801be68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 801be32:	6818      	ldr	r0, [r3, #0]
 801be34:	f7ec fac6 	bl	80083c4 <_ZNK8touchgfx5Texts7getTextEt>
 801be38:	2300      	movs	r3, #0
 801be3a:	4602      	mov	r2, r0
 801be3c:	4621      	mov	r1, r4
 801be3e:	9300      	str	r3, [sp, #0]
 801be40:	4628      	mov	r0, r5
 801be42:	47b0      	blx	r6
 801be44:	b002      	add	sp, #8
 801be46:	bd70      	pop	{r4, r5, r6, pc}
 801be48:	2000      	movs	r0, #0
 801be4a:	e7fb      	b.n	801be44 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 801be4c:	2400c92c 	.word	0x2400c92c
 801be50:	0802fb50 	.word	0x0802fb50
 801be54:	0802fc88 	.word	0x0802fc88
 801be58:	0802fb92 	.word	0x0802fb92
 801be5c:	2400c930 	.word	0x2400c930
 801be60:	0802fbbb 	.word	0x0802fbbb
 801be64:	2400c934 	.word	0x2400c934
 801be68:	2400c938 	.word	0x2400c938

0801be6c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801be6c:	b570      	push	{r4, r5, r6, lr}
 801be6e:	6803      	ldr	r3, [r0, #0]
 801be70:	4604      	mov	r4, r0
 801be72:	b28d      	uxth	r5, r1
 801be74:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801be76:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 801be78:	4b10      	ldr	r3, [pc, #64]	; (801bebc <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	b92b      	cbnz	r3, 801be8a <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 801be7e:	4b10      	ldr	r3, [pc, #64]	; (801bec0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 801be80:	21ae      	movs	r1, #174	; 0xae
 801be82:	4a10      	ldr	r2, [pc, #64]	; (801bec4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801be84:	4810      	ldr	r0, [pc, #64]	; (801bec8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801be86:	f00f fcef 	bl	802b868 <__assert_func>
 801be8a:	4910      	ldr	r1, [pc, #64]	; (801becc <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 801be8c:	8809      	ldrh	r1, [r1, #0]
 801be8e:	4291      	cmp	r1, r2
 801be90:	d803      	bhi.n	801be9a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 801be92:	4b0f      	ldr	r3, [pc, #60]	; (801bed0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 801be94:	21af      	movs	r1, #175	; 0xaf
 801be96:	4a0b      	ldr	r2, [pc, #44]	; (801bec4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801be98:	e7f4      	b.n	801be84 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 801be9a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801be9e:	4b0d      	ldr	r3, [pc, #52]	; (801bed4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bea6:	6803      	ldr	r3, [r0, #0]
 801bea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801beaa:	4798      	blx	r3
 801beac:	1a29      	subs	r1, r5, r0
 801beae:	4633      	mov	r3, r6
 801beb0:	4620      	mov	r0, r4
 801beb2:	b209      	sxth	r1, r1
 801beb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801beb8:	4718      	bx	r3
 801beba:	bf00      	nop
 801bebc:	2400c92c 	.word	0x2400c92c
 801bec0:	0802fb50 	.word	0x0802fb50
 801bec4:	0802fc88 	.word	0x0802fc88
 801bec8:	0802fb92 	.word	0x0802fb92
 801becc:	2400c930 	.word	0x2400c930
 801bed0:	0802fbbb 	.word	0x0802fbbb
 801bed4:	2400c934 	.word	0x2400c934

0801bed8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801bed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bedc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bee0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801bee2:	b08c      	sub	sp, #48	; 0x30
 801bee4:	4604      	mov	r4, r0
 801bee6:	4293      	cmp	r3, r2
 801bee8:	4688      	mov	r8, r1
 801beea:	d05f      	beq.n	801bfac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801beec:	4e31      	ldr	r6, [pc, #196]	; (801bfb4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 801beee:	6832      	ldr	r2, [r6, #0]
 801bef0:	b92a      	cbnz	r2, 801befe <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801bef2:	4b31      	ldr	r3, [pc, #196]	; (801bfb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801bef4:	21ae      	movs	r1, #174	; 0xae
 801bef6:	4a31      	ldr	r2, [pc, #196]	; (801bfbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801bef8:	4831      	ldr	r0, [pc, #196]	; (801bfc0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 801befa:	f00f fcb5 	bl	802b868 <__assert_func>
 801befe:	4d31      	ldr	r5, [pc, #196]	; (801bfc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 801bf00:	8829      	ldrh	r1, [r5, #0]
 801bf02:	4299      	cmp	r1, r3
 801bf04:	d803      	bhi.n	801bf0e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801bf06:	4b30      	ldr	r3, [pc, #192]	; (801bfc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 801bf08:	21af      	movs	r1, #175	; 0xaf
 801bf0a:	4a2c      	ldr	r2, [pc, #176]	; (801bfbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 801bf0c:	e7f4      	b.n	801bef8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 801bf0e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801bf12:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801bf16:	4b2d      	ldr	r3, [pc, #180]	; (801bfcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 801bf18:	681b      	ldr	r3, [r3, #0]
 801bf1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801bf1e:	2a00      	cmp	r2, #0
 801bf20:	d044      	beq.n	801bfac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801bf22:	784b      	ldrb	r3, [r1, #1]
 801bf24:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801bf28:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 801bf2c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801bf30:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801bf34:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801bf38:	4b25      	ldr	r3, [pc, #148]	; (801bfd0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 801bf3a:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 801bf44:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801bf48:	9207      	str	r2, [sp, #28]
 801bf4a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801bf4c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801bf50:	f88d a020 	strb.w	sl, [sp, #32]
 801bf54:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801bf58:	9009      	str	r0, [sp, #36]	; 0x24
 801bf5a:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801bf5e:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801bf62:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801bf66:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801bf6a:	b10a      	cbz	r2, 801bf70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 801bf6c:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801bf6e:	b907      	cbnz	r7, 801bf72 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 801bf70:	689f      	ldr	r7, [r3, #8]
 801bf72:	f10d 0914 	add.w	r9, sp, #20
 801bf76:	4621      	mov	r1, r4
 801bf78:	4648      	mov	r0, r9
 801bf7a:	f003 fcfd 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bf7e:	6833      	ldr	r3, [r6, #0]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d0b6      	beq.n	801bef2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801bf84:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801bf86:	882b      	ldrh	r3, [r5, #0]
 801bf88:	428b      	cmp	r3, r1
 801bf8a:	d9bc      	bls.n	801bf06 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 801bf8c:	4b11      	ldr	r3, [pc, #68]	; (801bfd4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 801bf8e:	6818      	ldr	r0, [r3, #0]
 801bf90:	f7ec fa18 	bl	80083c4 <_ZNK8touchgfx5Texts7getTextEt>
 801bf94:	2300      	movs	r3, #0
 801bf96:	9001      	str	r0, [sp, #4]
 801bf98:	4638      	mov	r0, r7
 801bf9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bf9e:	ab07      	add	r3, sp, #28
 801bfa0:	9300      	str	r3, [sp, #0]
 801bfa2:	4643      	mov	r3, r8
 801bfa4:	e899 0006 	ldmia.w	r9, {r1, r2}
 801bfa8:	f7ec f99d 	bl	80082e6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801bfac:	b00c      	add	sp, #48	; 0x30
 801bfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfb2:	bf00      	nop
 801bfb4:	2400c92c 	.word	0x2400c92c
 801bfb8:	0802fb50 	.word	0x0802fb50
 801bfbc:	0802fc88 	.word	0x0802fc88
 801bfc0:	0802fb92 	.word	0x0802fb92
 801bfc4:	2400c930 	.word	0x2400c930
 801bfc8:	0802fbbb 	.word	0x0802fbbb
 801bfcc:	2400c934 	.word	0x2400c934
 801bfd0:	2400c8bc 	.word	0x2400c8bc
 801bfd4:	2400c938 	.word	0x2400c938

0801bfd8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801bfd8:	b40e      	push	{r1, r2, r3}
 801bfda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bfde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfe2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801bfe4:	b09c      	sub	sp, #112	; 0x70
 801bfe6:	4604      	mov	r4, r0
 801bfe8:	4293      	cmp	r3, r2
 801bfea:	d06b      	beq.n	801c0c4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 801bfec:	aa26      	add	r2, sp, #152	; 0x98
 801bfee:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 801c0d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 801bff2:	9202      	str	r2, [sp, #8]
 801bff4:	f8da 2000 	ldr.w	r2, [sl]
 801bff8:	b92a      	cbnz	r2, 801c006 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 801bffa:	4b33      	ldr	r3, [pc, #204]	; (801c0c8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 801bffc:	21ae      	movs	r1, #174	; 0xae
 801bffe:	4a33      	ldr	r2, [pc, #204]	; (801c0cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801c000:	4833      	ldr	r0, [pc, #204]	; (801c0d0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 801c002:	f00f fc31 	bl	802b868 <__assert_func>
 801c006:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 801c0dc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 801c00a:	f8b8 1000 	ldrh.w	r1, [r8]
 801c00e:	4299      	cmp	r1, r3
 801c010:	d803      	bhi.n	801c01a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801c012:	4b30      	ldr	r3, [pc, #192]	; (801c0d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 801c014:	21af      	movs	r1, #175	; 0xaf
 801c016:	4a2d      	ldr	r2, [pc, #180]	; (801c0cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801c018:	e7f2      	b.n	801c000 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 801c01a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 801c0e0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 801c01e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801c022:	f8d9 3000 	ldr.w	r3, [r9]
 801c026:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801c02a:	682b      	ldr	r3, [r5, #0]
 801c02c:	4628      	mov	r0, r5
 801c02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c030:	4798      	blx	r3
 801c032:	4606      	mov	r6, r0
 801c034:	b207      	sxth	r7, r0
 801c036:	a803      	add	r0, sp, #12
 801c038:	f004 f982 	bl	8020340 <_ZN8touchgfx12TextProviderC1Ev>
 801c03c:	682b      	ldr	r3, [r5, #0]
 801c03e:	4628      	mov	r0, r5
 801c040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c042:	4798      	blx	r3
 801c044:	682b      	ldr	r3, [r5, #0]
 801c046:	4683      	mov	fp, r0
 801c048:	4628      	mov	r0, r5
 801c04a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c04c:	4798      	blx	r3
 801c04e:	465b      	mov	r3, fp
 801c050:	9000      	str	r0, [sp, #0]
 801c052:	a803      	add	r0, sp, #12
 801c054:	9925      	ldr	r1, [sp, #148]	; 0x94
 801c056:	9a02      	ldr	r2, [sp, #8]
 801c058:	f004 f9c5 	bl	80203e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c05c:	f8da 3000 	ldr.w	r3, [sl]
 801c060:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801c064:	2b00      	cmp	r3, #0
 801c066:	d0c8      	beq.n	801bffa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 801c068:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801c06a:	f8b8 0000 	ldrh.w	r0, [r8]
 801c06e:	4290      	cmp	r0, r2
 801c070:	d9cf      	bls.n	801c012 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801c072:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 801c076:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801c07a:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801c07e:	786a      	ldrb	r2, [r5, #1]
 801c080:	8925      	ldrh	r5, [r4, #8]
 801c082:	f8d9 3000 	ldr.w	r3, [r9]
 801c086:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801c08a:	eba5 050c 	sub.w	r5, r5, ip
 801c08e:	b22d      	sxth	r5, r5
 801c090:	9500      	str	r5, [sp, #0]
 801c092:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801c096:	a803      	add	r0, sp, #12
 801c098:	f001 ffb3 	bl	801e002 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801c09c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801c0a0:	b203      	sxth	r3, r0
 801c0a2:	18b9      	adds	r1, r7, r2
 801c0a4:	2900      	cmp	r1, #0
 801c0a6:	dd0b      	ble.n	801c0c0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 801c0a8:	3b01      	subs	r3, #1
 801c0aa:	fb13 f302 	smulbb	r3, r3, r2
 801c0ae:	fb16 3300 	smlabb	r3, r6, r0, r3
 801c0b2:	b21f      	sxth	r7, r3
 801c0b4:	4638      	mov	r0, r7
 801c0b6:	b01c      	add	sp, #112	; 0x70
 801c0b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0bc:	b003      	add	sp, #12
 801c0be:	4770      	bx	lr
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	dcf7      	bgt.n	801c0b4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 801c0c4:	2700      	movs	r7, #0
 801c0c6:	e7f5      	b.n	801c0b4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 801c0c8:	0802fb50 	.word	0x0802fb50
 801c0cc:	0802fc88 	.word	0x0802fc88
 801c0d0:	0802fb92 	.word	0x0802fb92
 801c0d4:	0802fbbb 	.word	0x0802fbbb
 801c0d8:	2400c92c 	.word	0x2400c92c
 801c0dc:	2400c930 	.word	0x2400c930
 801c0e0:	2400c934 	.word	0x2400c934

0801c0e4 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801c0e4:	b570      	push	{r4, r5, r6, lr}
 801c0e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c0ea:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801c0ec:	4604      	mov	r4, r0
 801c0ee:	4299      	cmp	r1, r3
 801c0f0:	d01e      	beq.n	801c130 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 801c0f2:	6803      	ldr	r3, [r0, #0]
 801c0f4:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801c0f6:	4b0f      	ldr	r3, [pc, #60]	; (801c134 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 801c0f8:	681b      	ldr	r3, [r3, #0]
 801c0fa:	b92b      	cbnz	r3, 801c108 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 801c0fc:	4b0e      	ldr	r3, [pc, #56]	; (801c138 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 801c0fe:	21ae      	movs	r1, #174	; 0xae
 801c100:	4a0e      	ldr	r2, [pc, #56]	; (801c13c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801c102:	480f      	ldr	r0, [pc, #60]	; (801c140 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 801c104:	f00f fbb0 	bl	802b868 <__assert_func>
 801c108:	4b0e      	ldr	r3, [pc, #56]	; (801c144 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 801c10a:	881b      	ldrh	r3, [r3, #0]
 801c10c:	428b      	cmp	r3, r1
 801c10e:	d803      	bhi.n	801c118 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 801c110:	4b0d      	ldr	r3, [pc, #52]	; (801c148 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 801c112:	21af      	movs	r1, #175	; 0xaf
 801c114:	4a09      	ldr	r2, [pc, #36]	; (801c13c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 801c116:	e7f4      	b.n	801c102 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 801c118:	4b0c      	ldr	r3, [pc, #48]	; (801c14c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 801c11a:	6818      	ldr	r0, [r3, #0]
 801c11c:	f7ec f952 	bl	80083c4 <_ZNK8touchgfx5Texts7getTextEt>
 801c120:	2300      	movs	r3, #0
 801c122:	4601      	mov	r1, r0
 801c124:	46ac      	mov	ip, r5
 801c126:	4620      	mov	r0, r4
 801c128:	461a      	mov	r2, r3
 801c12a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c12e:	4760      	bx	ip
 801c130:	2000      	movs	r0, #0
 801c132:	bd70      	pop	{r4, r5, r6, pc}
 801c134:	2400c92c 	.word	0x2400c92c
 801c138:	0802fb50 	.word	0x0802fb50
 801c13c:	0802fc88 	.word	0x0802fc88
 801c140:	0802fb92 	.word	0x0802fb92
 801c144:	2400c930 	.word	0x2400c930
 801c148:	0802fbbb 	.word	0x0802fbbb
 801c14c:	2400c938 	.word	0x2400c938

0801c150 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801c150:	b538      	push	{r3, r4, r5, lr}
 801c152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c156:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801c158:	4604      	mov	r4, r0
 801c15a:	429a      	cmp	r2, r3
 801c15c:	d014      	beq.n	801c188 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801c15e:	6803      	ldr	r3, [r0, #0]
 801c160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c162:	4798      	blx	r3
 801c164:	6823      	ldr	r3, [r4, #0]
 801c166:	4605      	mov	r5, r0
 801c168:	4620      	mov	r0, r4
 801c16a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c16c:	4798      	blx	r3
 801c16e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c172:	b22d      	sxth	r5, r5
 801c174:	4601      	mov	r1, r0
 801c176:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801c17a:	bf06      	itte	eq
 801c17c:	4602      	moveq	r2, r0
 801c17e:	4629      	moveq	r1, r5
 801c180:	462a      	movne	r2, r5
 801c182:	4620      	mov	r0, r4
 801c184:	f7e8 f8cd 	bl	8004322 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801c188:	bd38      	pop	{r3, r4, r5, pc}

0801c18a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801c18a:	888a      	ldrh	r2, [r1, #4]
 801c18c:	8582      	strh	r2, [r0, #44]	; 0x2c
 801c18e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801c192:	b922      	cbnz	r2, 801c19e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801c194:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801c198:	b90b      	cbnz	r3, 801c19e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 801c19a:	f7ff bfd9 	b.w	801c150 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801c19e:	4770      	bx	lr

0801c1a0 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801c1a0:	2300      	movs	r3, #0
 801c1a2:	8083      	strh	r3, [r0, #4]
 801c1a4:	80c3      	strh	r3, [r0, #6]
 801c1a6:	8003      	strh	r3, [r0, #0]
 801c1a8:	8043      	strh	r3, [r0, #2]
 801c1aa:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801c1ae:	2bff      	cmp	r3, #255	; 0xff
 801c1b0:	bf01      	itttt	eq
 801c1b2:	890b      	ldrheq	r3, [r1, #8]
 801c1b4:	8083      	strheq	r3, [r0, #4]
 801c1b6:	894b      	ldrheq	r3, [r1, #10]
 801c1b8:	80c3      	strheq	r3, [r0, #6]
 801c1ba:	4770      	bx	lr

0801c1bc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801c1bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c1be:	4604      	mov	r4, r0
 801c1c0:	466b      	mov	r3, sp
 801c1c2:	6808      	ldr	r0, [r1, #0]
 801c1c4:	6849      	ldr	r1, [r1, #4]
 801c1c6:	c303      	stmia	r3!, {r0, r1}
 801c1c8:	6823      	ldr	r3, [r4, #0]
 801c1ca:	4669      	mov	r1, sp
 801c1cc:	4620      	mov	r0, r4
 801c1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c1d0:	4798      	blx	r3
 801c1d2:	4b08      	ldr	r3, [pc, #32]	; (801c1f4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801c1d4:	681b      	ldr	r3, [r3, #0]
 801c1d6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c1da:	b10a      	cbz	r2, 801c1e0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801c1dc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c1de:	b900      	cbnz	r0, 801c1e2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801c1e0:	6898      	ldr	r0, [r3, #8]
 801c1e2:	6803      	ldr	r3, [r0, #0]
 801c1e4:	4669      	mov	r1, sp
 801c1e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801c1e8:	699d      	ldr	r5, [r3, #24]
 801c1ea:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801c1ee:	47a8      	blx	r5
 801c1f0:	b003      	add	sp, #12
 801c1f2:	bd30      	pop	{r4, r5, pc}
 801c1f4:	2400c8bc 	.word	0x2400c8bc

0801c1f8 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 801c1f8:	b570      	push	{r4, r5, r6, lr}
 801c1fa:	6803      	ldr	r3, [r0, #0]
 801c1fc:	4604      	mov	r4, r0
 801c1fe:	4615      	mov	r5, r2
 801c200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c202:	4798      	blx	r3
 801c204:	6823      	ldr	r3, [r4, #0]
 801c206:	4629      	mov	r1, r5
 801c208:	4620      	mov	r0, r4
 801c20a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c20c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c210:	4718      	bx	r3

0801c212 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801c212:	b570      	push	{r4, r5, r6, lr}
 801c214:	6803      	ldr	r3, [r0, #0]
 801c216:	4604      	mov	r4, r0
 801c218:	460e      	mov	r6, r1
 801c21a:	4615      	mov	r5, r2
 801c21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c21e:	4798      	blx	r3
 801c220:	8030      	strh	r0, [r6, #0]
 801c222:	6823      	ldr	r3, [r4, #0]
 801c224:	4620      	mov	r0, r4
 801c226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c228:	4798      	blx	r3
 801c22a:	8028      	strh	r0, [r5, #0]
 801c22c:	bd70      	pop	{r4, r5, r6, pc}

0801c22e <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801c22e:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801c232:	4770      	bx	lr

0801c234 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801c234:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801c238:	4770      	bx	lr

0801c23a <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801c23a:	b510      	push	{r4, lr}
 801c23c:	4604      	mov	r4, r0
 801c23e:	f000 fcd3 	bl	801cbe8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801c242:	6823      	ldr	r3, [r4, #0]
 801c244:	4620      	mov	r0, r4
 801c246:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801c24a:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801c24e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c254:	4718      	bx	r3

0801c256 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801c256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c258:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801c25c:	4605      	mov	r5, r0
 801c25e:	8541      	strh	r1, [r0, #42]	; 0x2a
 801c260:	4630      	mov	r0, r6
 801c262:	f005 fa41 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c266:	b1a0      	cbz	r0, 801c292 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801c268:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801c26c:	4630      	mov	r0, r6
 801c26e:	f005 fa3b 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c272:	fb97 f4f0 	sdiv	r4, r7, r0
 801c276:	fb04 7410 	mls	r4, r4, r0, r7
 801c27a:	4630      	mov	r0, r6
 801c27c:	f005 fa34 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c280:	4404      	add	r4, r0
 801c282:	4630      	mov	r0, r6
 801c284:	f005 fa30 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c288:	fb94 f3f0 	sdiv	r3, r4, r0
 801c28c:	fb03 4010 	mls	r0, r3, r0, r4
 801c290:	8568      	strh	r0, [r5, #42]	; 0x2a
 801c292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c294 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801c294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c296:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801c29a:	4605      	mov	r5, r0
 801c29c:	8581      	strh	r1, [r0, #44]	; 0x2c
 801c29e:	4630      	mov	r0, r6
 801c2a0:	f005 fa5c 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c2a4:	b1a0      	cbz	r0, 801c2d0 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 801c2a6:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801c2aa:	4630      	mov	r0, r6
 801c2ac:	f005 fa56 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c2b0:	fb97 f4f0 	sdiv	r4, r7, r0
 801c2b4:	fb04 7410 	mls	r4, r4, r0, r7
 801c2b8:	4630      	mov	r0, r6
 801c2ba:	f005 fa4f 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c2be:	4404      	add	r4, r0
 801c2c0:	4630      	mov	r0, r6
 801c2c2:	f005 fa4b 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c2c6:	fb94 f3f0 	sdiv	r3, r4, r0
 801c2ca:	fb03 4010 	mls	r0, r3, r0, r4
 801c2ce:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801c2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c2d4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 801c2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2d8:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 801c2dc:	b093      	sub	sp, #76	; 0x4c
 801c2de:	4607      	mov	r7, r0
 801c2e0:	460e      	mov	r6, r1
 801c2e2:	4658      	mov	r0, fp
 801c2e4:	f005 fa00 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c2e8:	4605      	mov	r5, r0
 801c2ea:	4658      	mov	r0, fp
 801c2ec:	f005 fa36 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c2f0:	4680      	mov	r8, r0
 801c2f2:	2d00      	cmp	r5, #0
 801c2f4:	f000 80c5 	beq.w	801c482 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801c2f8:	2800      	cmp	r0, #0
 801c2fa:	f000 80c2 	beq.w	801c482 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801c2fe:	2300      	movs	r3, #0
 801c300:	a90e      	add	r1, sp, #56	; 0x38
 801c302:	4638      	mov	r0, r7
 801c304:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801c308:	683b      	ldr	r3, [r7, #0]
 801c30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c30c:	4798      	blx	r3
 801c30e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801c312:	f9b6 3000 	ldrsh.w	r3, [r6]
 801c316:	88b1      	ldrh	r1, [r6, #4]
 801c318:	189c      	adds	r4, r3, r2
 801c31a:	440b      	add	r3, r1
 801c31c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801c320:	fa02 f383 	sxtah	r3, r2, r3
 801c324:	3b01      	subs	r3, #1
 801c326:	fb93 f3f5 	sdiv	r3, r3, r5
 801c32a:	fb94 f4f5 	sdiv	r4, r4, r5
 801c32e:	fb13 f305 	smulbb	r3, r3, r5
 801c332:	fb14 f405 	smulbb	r4, r4, r5
 801c336:	b21b      	sxth	r3, r3
 801c338:	1aa4      	subs	r4, r4, r2
 801c33a:	930b      	str	r3, [sp, #44]	; 0x2c
 801c33c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801c340:	b2a4      	uxth	r4, r4
 801c342:	185a      	adds	r2, r3, r1
 801c344:	fb92 f2f8 	sdiv	r2, r2, r8
 801c348:	fb12 f208 	smulbb	r2, r2, r8
 801c34c:	1a52      	subs	r2, r2, r1
 801c34e:	b212      	sxth	r2, r2
 801c350:	920c      	str	r2, [sp, #48]	; 0x30
 801c352:	88f2      	ldrh	r2, [r6, #6]
 801c354:	4413      	add	r3, r2
 801c356:	fa01 f383 	sxtah	r3, r1, r3
 801c35a:	3b01      	subs	r3, #1
 801c35c:	fb93 f3f8 	sdiv	r3, r3, r8
 801c360:	fb13 f308 	smulbb	r3, r3, r8
 801c364:	b21b      	sxth	r3, r3
 801c366:	930d      	str	r3, [sp, #52]	; 0x34
 801c368:	1963      	adds	r3, r4, r5
 801c36a:	fa1f fa83 	uxth.w	sl, r3
 801c36e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c370:	b223      	sxth	r3, r4
 801c372:	4293      	cmp	r3, r2
 801c374:	9305      	str	r3, [sp, #20]
 801c376:	f300 8084 	bgt.w	801c482 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801c37a:	fa0f f38a 	sxth.w	r3, sl
 801c37e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801c382:	930a      	str	r3, [sp, #40]	; 0x28
 801c384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c386:	4599      	cmp	r9, r3
 801c388:	dd04      	ble.n	801c394 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801c38a:	442c      	add	r4, r5
 801c38c:	eb05 030a 	add.w	r3, r5, sl
 801c390:	b2a4      	uxth	r4, r4
 801c392:	e7ea      	b.n	801c36a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801c394:	f9b6 c000 	ldrsh.w	ip, [r6]
 801c398:	88b2      	ldrh	r2, [r6, #4]
 801c39a:	4462      	add	r2, ip
 801c39c:	b292      	uxth	r2, r2
 801c39e:	b213      	sxth	r3, r2
 801c3a0:	9308      	str	r3, [sp, #32]
 801c3a2:	fa1f f389 	uxth.w	r3, r9
 801c3a6:	eb08 0103 	add.w	r1, r8, r3
 801c3aa:	9306      	str	r3, [sp, #24]
 801c3ac:	b289      	uxth	r1, r1
 801c3ae:	b208      	sxth	r0, r1
 801c3b0:	9007      	str	r0, [sp, #28]
 801c3b2:	9805      	ldr	r0, [sp, #20]
 801c3b4:	4603      	mov	r3, r0
 801c3b6:	9808      	ldr	r0, [sp, #32]
 801c3b8:	4283      	cmp	r3, r0
 801c3ba:	da5e      	bge.n	801c47a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801c3bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c3be:	4584      	cmp	ip, r0
 801c3c0:	da5b      	bge.n	801c47a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801c3c2:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801c3c6:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801c3ca:	4486      	add	lr, r0
 801c3cc:	fa1f fe8e 	uxth.w	lr, lr
 801c3d0:	fa0f f38e 	sxth.w	r3, lr
 801c3d4:	4599      	cmp	r9, r3
 801c3d6:	9309      	str	r3, [sp, #36]	; 0x24
 801c3d8:	da4f      	bge.n	801c47a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801c3da:	9b07      	ldr	r3, [sp, #28]
 801c3dc:	4298      	cmp	r0, r3
 801c3de:	da4c      	bge.n	801c47a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801c3e0:	9b05      	ldr	r3, [sp, #20]
 801c3e2:	459c      	cmp	ip, r3
 801c3e4:	bfb8      	it	lt
 801c3e6:	469c      	movlt	ip, r3
 801c3e8:	4548      	cmp	r0, r9
 801c3ea:	9b08      	ldr	r3, [sp, #32]
 801c3ec:	bfb8      	it	lt
 801c3ee:	4648      	movlt	r0, r9
 801c3f0:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 801c3f4:	4699      	mov	r9, r3
 801c3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3f8:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 801c3fc:	4599      	cmp	r9, r3
 801c3fe:	bfc8      	it	gt
 801c400:	4652      	movgt	r2, sl
 801c402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c404:	eba2 020c 	sub.w	r2, r2, ip
 801c408:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 801c40c:	9a07      	ldr	r2, [sp, #28]
 801c40e:	4293      	cmp	r3, r2
 801c410:	bfd8      	it	le
 801c412:	4671      	movle	r1, lr
 801c414:	1a09      	subs	r1, r1, r0
 801c416:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801c41a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801c41e:	9b06      	ldr	r3, [sp, #24]
 801c420:	1b12      	subs	r2, r2, r4
 801c422:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801c426:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801c42a:	1ad2      	subs	r2, r2, r3
 801c42c:	4b16      	ldr	r3, [pc, #88]	; (801c488 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801c42e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801c432:	681a      	ldr	r2, [r3, #0]
 801c434:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801c438:	b109      	cbz	r1, 801c43e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801c43a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801c43c:	b900      	cbnz	r0, 801c440 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801c43e:	6890      	ldr	r0, [r2, #8]
 801c440:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c444:	f04f 0c01 	mov.w	ip, #1
 801c448:	9b06      	ldr	r3, [sp, #24]
 801c44a:	6801      	ldr	r1, [r0, #0]
 801c44c:	4413      	add	r3, r2
 801c44e:	f8cd c008 	str.w	ip, [sp, #8]
 801c452:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801c456:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801c45a:	b21b      	sxth	r3, r3
 801c45c:	4422      	add	r2, r4
 801c45e:	f8cd c004 	str.w	ip, [sp, #4]
 801c462:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801c466:	b212      	sxth	r2, r2
 801c468:	f8cd c000 	str.w	ip, [sp]
 801c46c:	f8d1 9008 	ldr.w	r9, [r1, #8]
 801c470:	4659      	mov	r1, fp
 801c472:	47c8      	blx	r9
 801c474:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801c478:	e784      	b.n	801c384 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801c47a:	2300      	movs	r3, #0
 801c47c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801c480:	e7cb      	b.n	801c41a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801c482:	b013      	add	sp, #76	; 0x4c
 801c484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c488:	2400c8bc 	.word	0x2400c8bc

0801c48c <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 801c48c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c490:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801c494:	4606      	mov	r6, r0
 801c496:	4689      	mov	r9, r1
 801c498:	2bff      	cmp	r3, #255	; 0xff
 801c49a:	d008      	beq.n	801c4ae <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 801c49c:	2300      	movs	r3, #0
 801c49e:	8003      	strh	r3, [r0, #0]
 801c4a0:	8043      	strh	r3, [r0, #2]
 801c4a2:	8083      	strh	r3, [r0, #4]
 801c4a4:	4630      	mov	r0, r6
 801c4a6:	80f3      	strh	r3, [r6, #6]
 801c4a8:	b003      	add	sp, #12
 801c4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4ae:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 801c4b2:	4668      	mov	r0, sp
 801c4b4:	4659      	mov	r1, fp
 801c4b6:	f005 f98b 	bl	80217d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c4ba:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801c4be:	4658      	mov	r0, fp
 801c4c0:	f9bd 7000 	ldrsh.w	r7, [sp]
 801c4c4:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 801c4c8:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 801c4cc:	f005 f90c 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c4d0:	4284      	cmp	r4, r0
 801c4d2:	d10d      	bne.n	801c4f0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 801c4d4:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 801c4d8:	4658      	mov	r0, fp
 801c4da:	f005 f93f 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c4de:	4580      	cmp	r8, r0
 801c4e0:	d12a      	bne.n	801c538 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801c4e2:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801c4e6:	8037      	strh	r7, [r6, #0]
 801c4e8:	f8a6 a002 	strh.w	sl, [r6, #2]
 801c4ec:	80b5      	strh	r5, [r6, #4]
 801c4ee:	e7d9      	b.n	801c4a4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 801c4f0:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 801c4f4:	4658      	mov	r0, fp
 801c4f6:	f005 f8f7 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c4fa:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801c4fe:	1b7f      	subs	r7, r7, r5
 801c500:	b2a3      	uxth	r3, r4
 801c502:	b2bd      	uxth	r5, r7
 801c504:	b22f      	sxth	r7, r5
 801c506:	4428      	add	r0, r5
 801c508:	2f00      	cmp	r7, #0
 801c50a:	b280      	uxth	r0, r0
 801c50c:	bfb8      	it	lt
 801c50e:	18ed      	addlt	r5, r5, r3
 801c510:	4403      	add	r3, r0
 801c512:	bfac      	ite	ge
 801c514:	4625      	movge	r5, r4
 801c516:	2700      	movlt	r7, #0
 801c518:	b29b      	uxth	r3, r3
 801c51a:	bfb8      	it	lt
 801c51c:	b22d      	sxthlt	r5, r5
 801c51e:	b219      	sxth	r1, r3
 801c520:	bfb8      	it	lt
 801c522:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801c526:	4291      	cmp	r1, r2
 801c528:	bfc4      	itt	gt
 801c52a:	1a9c      	subgt	r4, r3, r2
 801c52c:	b224      	sxthgt	r4, r4
 801c52e:	42ac      	cmp	r4, r5
 801c530:	bfc4      	itt	gt
 801c532:	b207      	sxthgt	r7, r0
 801c534:	4625      	movgt	r5, r4
 801c536:	e7cf      	b.n	801c4d8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801c538:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 801c53c:	4658      	mov	r0, fp
 801c53e:	f005 f90d 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c542:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801c546:	ebaa 0404 	sub.w	r4, sl, r4
 801c54a:	fa1f f288 	uxth.w	r2, r8
 801c54e:	b2a4      	uxth	r4, r4
 801c550:	fa0f fa84 	sxth.w	sl, r4
 801c554:	4420      	add	r0, r4
 801c556:	f1ba 0f00 	cmp.w	sl, #0
 801c55a:	b280      	uxth	r0, r0
 801c55c:	bfb8      	it	lt
 801c55e:	18a3      	addlt	r3, r4, r2
 801c560:	4402      	add	r2, r0
 801c562:	bfac      	ite	ge
 801c564:	4643      	movge	r3, r8
 801c566:	f04f 0a00 	movlt.w	sl, #0
 801c56a:	b292      	uxth	r2, r2
 801c56c:	bfb8      	it	lt
 801c56e:	b21b      	sxthlt	r3, r3
 801c570:	b214      	sxth	r4, r2
 801c572:	bfb8      	it	lt
 801c574:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801c578:	428c      	cmp	r4, r1
 801c57a:	bfc4      	itt	gt
 801c57c:	eba2 0801 	subgt.w	r8, r2, r1
 801c580:	fa0f f888 	sxthgt.w	r8, r8
 801c584:	4598      	cmp	r8, r3
 801c586:	bfc4      	itt	gt
 801c588:	fa0f fa80 	sxthgt.w	sl, r0
 801c58c:	4643      	movgt	r3, r8
 801c58e:	e7aa      	b.n	801c4e6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

0801c590 <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 801c590:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	; 0x150
 801c594:	600b      	str	r3, [r1, #0]
 801c596:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	; 0x152
 801c59a:	6013      	str	r3, [r2, #0]
 801c59c:	4770      	bx	lr

0801c59e <_ZN8touchgfx5Gauge8setWidthEs>:
 801c59e:	8101      	strh	r1, [r0, #8]
 801c5a0:	f8a0 10bc 	strh.w	r1, [r0, #188]	; 0xbc
 801c5a4:	f8a0 1160 	strh.w	r1, [r0, #352]	; 0x160
 801c5a8:	4770      	bx	lr

0801c5aa <_ZN8touchgfx5Gauge9setHeightEs>:
 801c5aa:	8141      	strh	r1, [r0, #10]
 801c5ac:	f8a0 10be 	strh.w	r1, [r0, #190]	; 0xbe
 801c5b0:	f8a0 1162 	strh.w	r1, [r0, #354]	; 0x162
 801c5b4:	4770      	bx	lr

0801c5b6 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 801c5b6:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 801c5ba:	4770      	bx	lr

0801c5bc <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 801c5bc:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801c5c0:	4770      	bx	lr

0801c5c2 <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 801c5c2:	4770      	bx	lr

0801c5c4 <_ZN8touchgfx5Gauge8setAlphaEh>:
 801c5c4:	b538      	push	{r3, r4, r5, lr}
 801c5c6:	4604      	mov	r4, r0
 801c5c8:	460d      	mov	r5, r1
 801c5ca:	f7fb fb36 	bl	8017c3a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801c5ce:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
 801c5d2:	f884 5186 	strb.w	r5, [r4, #390]	; 0x186
 801c5d6:	bd38      	pop	{r3, r4, r5, pc}

0801c5d8 <_ZN8touchgfx5GaugeC1Ev>:
 801c5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c5da:	4604      	mov	r4, r0
 801c5dc:	f7fb fc52 	bl	8017e84 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801c5e0:	4b18      	ldr	r3, [pc, #96]	; (801c644 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 801c5e2:	a902      	add	r1, sp, #8
 801c5e4:	4626      	mov	r6, r4
 801c5e6:	2500      	movs	r5, #0
 801c5e8:	f504 77ac 	add.w	r7, r4, #344	; 0x158
 801c5ec:	f846 3bb4 	str.w	r3, [r6], #180
 801c5f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c5f4:	4630      	mov	r0, r6
 801c5f6:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801c5fa:	f7fe fe61 	bl	801b2c0 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 801c5fe:	2301      	movs	r3, #1
 801c600:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 801c604:	4638      	mov	r0, r7
 801c606:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 801c60a:	f884 3145 	strb.w	r3, [r4, #325]	; 0x145
 801c60e:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 801c612:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
 801c616:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 801c61a:	f7fc ffe3 	bl	80195e4 <_ZN8touchgfx6CircleC1Ev>
 801c61e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801c622:	4620      	mov	r0, r4
 801c624:	f7fb fcba 	bl	8017f9c <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 801c628:	4639      	mov	r1, r7
 801c62a:	4620      	mov	r0, r4
 801c62c:	f7fb fce8 	bl	8018000 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801c630:	4620      	mov	r0, r4
 801c632:	4631      	mov	r1, r6
 801c634:	f7fb fce4 	bl	8018000 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801c638:	4620      	mov	r0, r4
 801c63a:	f884 517d 	strb.w	r5, [r4, #381]	; 0x17d
 801c63e:	b003      	add	sp, #12
 801c640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c642:	bf00      	nop
 801c644:	0802fde8 	.word	0x0802fde8

0801c648 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801c648:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
 801c64c:	4770      	bx	lr

0801c64e <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 801c64e:	f880 1145 	strb.w	r1, [r0, #325]	; 0x145
 801c652:	4770      	bx	lr

0801c654 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 801c654:	b538      	push	{r3, r4, r5, lr}
 801c656:	8902      	ldrh	r2, [r0, #8]
 801c658:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 801c65c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801c660:	4604      	mov	r4, r0
 801c662:	f8a0 20bc 	strh.w	r2, [r0, #188]	; 0xbc
 801c666:	2200      	movs	r2, #0
 801c668:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe
 801c66c:	4628      	mov	r0, r5
 801c66e:	4611      	mov	r1, r2
 801c670:	f7e7 fdfb 	bl	800426a <_ZN8touchgfx8Drawable5setXYEss>
 801c674:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	; 0x156
 801c678:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801c67c:	4628      	mov	r0, r5
 801c67e:	1a9b      	subs	r3, r3, r2
 801c680:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	; 0x154
 801c684:	ee07 3a90 	vmov	s15, r3
 801c688:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	; 0x150
 801c68c:	1a9b      	subs	r3, r3, r2
 801c68e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c692:	ee07 3a10 	vmov	s14, r3
 801c696:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
 801c69a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c69e:	ed84 7a38 	vstr	s14, [r4, #224]	; 0xe0
 801c6a2:	f7fe fe59 	bl	801b358 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801c6a6:	4b16      	ldr	r3, [pc, #88]	; (801c700 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 801c6a8:	4628      	mov	r0, r5
 801c6aa:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 801c6ae:	f7fe fe53 	bl	801b358 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801c6b2:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	; 0x152
 801c6b6:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	; 0x150
 801c6ba:	4628      	mov	r0, r5
 801c6bc:	ee07 3a90 	vmov	s15, r3
 801c6c0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 801c6c4:	ee07 2a10 	vmov	s14, r2
 801c6c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c6cc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 801c6d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c6d4:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
 801c6d8:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 801c6dc:	f7fe fe3c 	bl	801b358 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801c6e0:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 801c6e4:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 801c6e8:	4628      	mov	r0, r5
 801c6ea:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 801c6ee:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
 801c6f2:	f7fe fe31 	bl	801b358 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801c6f6:	2301      	movs	r3, #1
 801c6f8:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801c6fc:	bd38      	pop	{r3, r4, r5, pc}
 801c6fe:	bf00      	nop
 801c700:	43960000 	.word	0x43960000

0801c704 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 801c704:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c706:	4604      	mov	r4, r0
 801c708:	a802      	add	r0, sp, #8
 801c70a:	4616      	mov	r6, r2
 801c70c:	461d      	mov	r5, r3
 801c70e:	f820 1d04 	strh.w	r1, [r0, #-4]!
 801c712:	4601      	mov	r1, r0
 801c714:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801c718:	f7fe ff74 	bl	801b604 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 801c71c:	4620      	mov	r0, r4
 801c71e:	f8a4 6154 	strh.w	r6, [r4, #340]	; 0x154
 801c722:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
 801c726:	f7ff ff95 	bl	801c654 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801c72a:	b002      	add	sp, #8
 801c72c:	bd70      	pop	{r4, r5, r6, pc}

0801c72e <_ZN8touchgfx5Gauge9setCenterEii>:
 801c72e:	b570      	push	{r4, r5, r6, lr}
 801c730:	4606      	mov	r6, r0
 801c732:	460d      	mov	r5, r1
 801c734:	4614      	mov	r4, r2
 801c736:	f8a6 1150 	strh.w	r1, [r6, #336]	; 0x150
 801c73a:	f8a6 2152 	strh.w	r2, [r6, #338]	; 0x152
 801c73e:	f7ff ff89 	bl	801c654 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 801c742:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	; 0x15e
 801c746:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	; 0x15c
 801c74a:	1aa4      	subs	r4, r4, r2
 801c74c:	1a6d      	subs	r5, r5, r1
 801c74e:	0164      	lsls	r4, r4, #5
 801c750:	016d      	lsls	r5, r5, #5
 801c752:	3410      	adds	r4, #16
 801c754:	3510      	adds	r5, #16
 801c756:	f8c6 418c 	str.w	r4, [r6, #396]	; 0x18c
 801c75a:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
 801c75e:	bd70      	pop	{r4, r5, r6, pc}

0801c760 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 801c760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c762:	0149      	lsls	r1, r1, #5
 801c764:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801c766:	4604      	mov	r4, r0
 801c768:	4299      	cmp	r1, r3
 801c76a:	9101      	str	r1, [sp, #4]
 801c76c:	d00b      	beq.n	801c786 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 801c76e:	4601      	mov	r1, r0
 801c770:	aa01      	add	r2, sp, #4
 801c772:	a802      	add	r0, sp, #8
 801c774:	f7fd f94f 	bl	8019a16 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 801c778:	9b01      	ldr	r3, [sp, #4]
 801c77a:	a902      	add	r1, sp, #8
 801c77c:	4620      	mov	r0, r4
 801c77e:	6423      	str	r3, [r4, #64]	; 0x40
 801c780:	6823      	ldr	r3, [r4, #0]
 801c782:	691b      	ldr	r3, [r3, #16]
 801c784:	4798      	blx	r3
 801c786:	b004      	add	sp, #16
 801c788:	bd10      	pop	{r4, pc}
	...

0801c78c <_ZN8touchgfx5Gauge8setValueEi>:
 801c78c:	b570      	push	{r4, r5, r6, lr}
 801c78e:	4604      	mov	r4, r0
 801c790:	f7fb fa9c 	bl	8017ccc <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801c794:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 801c798:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 801c79c:	4620      	mov	r0, r4
 801c79e:	429a      	cmp	r2, r3
 801c7a0:	f504 76ac 	add.w	r6, r4, #344	; 0x158
 801c7a4:	bfac      	ite	ge
 801c7a6:	f894 3145 	ldrbge.w	r3, [r4, #325]	; 0x145
 801c7aa:	f894 3144 	ldrblt.w	r3, [r4, #324]	; 0x144
 801c7ae:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
 801c7b2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801c7b6:	1ac9      	subs	r1, r1, r3
 801c7b8:	2900      	cmp	r1, #0
 801c7ba:	bfb8      	it	lt
 801c7bc:	4249      	neglt	r1, r1
 801c7be:	b289      	uxth	r1, r1
 801c7c0:	f7fb fb17 	bl	8017df2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801c7c4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801c7c8:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
 801c7cc:	4605      	mov	r5, r0
 801c7ce:	eddf 6a18 	vldr	s13, [pc, #96]	; 801c830 <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 801c7d2:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801c7d6:	429a      	cmp	r2, r3
 801c7d8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 801c834 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 801c7dc:	da15      	bge.n	801c80a <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 801c7de:	1b5b      	subs	r3, r3, r5
 801c7e0:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801c7e4:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801c7e8:	ee07 3a90 	vmov	s15, r3
 801c7ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c7f0:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801c7f4:	ee21 1a07 	vmul.f32	s2, s2, s14
 801c7f8:	f7fe ffea 	bl	801b7d0 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801c7fc:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801c800:	1b49      	subs	r1, r1, r5
 801c802:	4630      	mov	r0, r6
 801c804:	f7ff ffac 	bl	801c760 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 801c808:	bd70      	pop	{r4, r5, r6, pc}
 801c80a:	442b      	add	r3, r5
 801c80c:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 801c810:	ed94 0a3a 	vldr	s0, [r4, #232]	; 0xe8
 801c814:	ee07 3a90 	vmov	s15, r3
 801c818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c81c:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 801c820:	ee21 1a07 	vmul.f32	s2, s2, s14
 801c824:	f7fe ffd4 	bl	801b7d0 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 801c828:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
 801c82c:	4429      	add	r1, r5
 801c82e:	e7e8      	b.n	801c802 <_ZN8touchgfx5Gauge8setValueEi+0x76>
 801c830:	43340000 	.word	0x43340000
 801c834:	40490fdb 	.word	0x40490fdb

0801c838 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 801c838:	4291      	cmp	r1, r2
 801c83a:	b510      	push	{r4, lr}
 801c83c:	4604      	mov	r4, r0
 801c83e:	d105      	bne.n	801c84c <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x14>
 801c840:	4b0b      	ldr	r3, [pc, #44]	; (801c870 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x38>)
 801c842:	215e      	movs	r1, #94	; 0x5e
 801c844:	4a0b      	ldr	r2, [pc, #44]	; (801c874 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x3c>)
 801c846:	480c      	ldr	r0, [pc, #48]	; (801c878 <_ZN8touchgfx5Gauge16setStartEndAngleEii+0x40>)
 801c848:	f00f f80e 	bl	802b868 <__assert_func>
 801c84c:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
 801c850:	0149      	lsls	r1, r1, #5
 801c852:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 801c856:	0152      	lsls	r2, r2, #5
 801c858:	f8c0 1194 	str.w	r1, [r0, #404]	; 0x194
 801c85c:	f8c0 2198 	str.w	r2, [r0, #408]	; 0x198
 801c860:	f7fb f9e8 	bl	8017c34 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 801c864:	4601      	mov	r1, r0
 801c866:	4620      	mov	r0, r4
 801c868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c86c:	f7ff bf8e 	b.w	801c78c <_ZN8touchgfx5Gauge8setValueEi>
 801c870:	0802fd9c 	.word	0x0802fd9c
 801c874:	0802fec4 	.word	0x0802fec4
 801c878:	0802fdb3 	.word	0x0802fdb3

0801c87c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801c87c:	b570      	push	{r4, r5, r6, lr}
 801c87e:	880b      	ldrh	r3, [r1, #0]
 801c880:	4605      	mov	r5, r0
 801c882:	4604      	mov	r4, r0
 801c884:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801c886:	8813      	ldrh	r3, [r2, #0]
 801c888:	f825 3f30 	strh.w	r3, [r5, #48]!
 801c88c:	4628      	mov	r0, r5
 801c88e:	f004 ff2b 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c892:	4606      	mov	r6, r0
 801c894:	4628      	mov	r0, r5
 801c896:	f004 ff61 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c89a:	6823      	ldr	r3, [r4, #0]
 801c89c:	4605      	mov	r5, r0
 801c89e:	b231      	sxth	r1, r6
 801c8a0:	4620      	mov	r0, r4
 801c8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c8a4:	4798      	blx	r3
 801c8a6:	6823      	ldr	r3, [r4, #0]
 801c8a8:	b229      	sxth	r1, r5
 801c8aa:	4620      	mov	r0, r4
 801c8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c8b2:	4718      	bx	r3

0801c8b4 <_ZNK8touchgfx6Button12getSolidRectEv>:
 801c8b4:	b510      	push	{r4, lr}
 801c8b6:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801c8ba:	4604      	mov	r4, r0
 801c8bc:	2bff      	cmp	r3, #255	; 0xff
 801c8be:	d006      	beq.n	801c8ce <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801c8c0:	2300      	movs	r3, #0
 801c8c2:	8003      	strh	r3, [r0, #0]
 801c8c4:	8043      	strh	r3, [r0, #2]
 801c8c6:	8083      	strh	r3, [r0, #4]
 801c8c8:	80c3      	strh	r3, [r0, #6]
 801c8ca:	4620      	mov	r0, r4
 801c8cc:	bd10      	pop	{r4, pc}
 801c8ce:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801c8d2:	b11b      	cbz	r3, 801c8dc <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801c8d4:	3130      	adds	r1, #48	; 0x30
 801c8d6:	f004 ff7b 	bl	80217d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801c8da:	e7f6      	b.n	801c8ca <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801c8dc:	312e      	adds	r1, #46	; 0x2e
 801c8de:	e7fa      	b.n	801c8d6 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801c8e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801c8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8e4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801c8e8:	b08a      	sub	sp, #40	; 0x28
 801c8ea:	4604      	mov	r4, r0
 801c8ec:	4688      	mov	r8, r1
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d044      	beq.n	801c97c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 801c8f2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801c8f4:	a805      	add	r0, sp, #20
 801c8f6:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c8fa:	f004 fef5 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c8fe:	4605      	mov	r5, r0
 801c900:	b206      	sxth	r6, r0
 801c902:	a805      	add	r0, sp, #20
 801c904:	f004 ff2a 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c908:	f9b8 2000 	ldrsh.w	r2, [r8]
 801c90c:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 801c910:	2300      	movs	r3, #0
 801c912:	fa0f fc80 	sxth.w	ip, r0
 801c916:	4417      	add	r7, r2
 801c918:	9306      	str	r3, [sp, #24]
 801c91a:	b2bf      	uxth	r7, r7
 801c91c:	fa0f fe87 	sxth.w	lr, r7
 801c920:	459e      	cmp	lr, r3
 801c922:	dd2d      	ble.n	801c980 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801c924:	4296      	cmp	r6, r2
 801c926:	dd2b      	ble.n	801c980 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801c928:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801c92c:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 801c930:	4419      	add	r1, r3
 801c932:	b289      	uxth	r1, r1
 801c934:	fa0f f881 	sxth.w	r8, r1
 801c938:	f1b8 0f00 	cmp.w	r8, #0
 801c93c:	dd20      	ble.n	801c980 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801c93e:	459c      	cmp	ip, r3
 801c940:	dd1e      	ble.n	801c980 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 801c942:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801c946:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c94a:	4576      	cmp	r6, lr
 801c94c:	bfa8      	it	ge
 801c94e:	463d      	movge	r5, r7
 801c950:	45c4      	cmp	ip, r8
 801c952:	bfa8      	it	ge
 801c954:	4608      	movge	r0, r1
 801c956:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c95a:	1aad      	subs	r5, r5, r2
 801c95c:	1ac0      	subs	r0, r0, r3
 801c95e:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c962:	f8ad 501c 	strh.w	r5, [sp, #28]
 801c966:	f8ad 001e 	strh.w	r0, [sp, #30]
 801c96a:	4b1f      	ldr	r3, [pc, #124]	; (801c9e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	b953      	cbnz	r3, 801c986 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 801c970:	4b1e      	ldr	r3, [pc, #120]	; (801c9ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801c972:	2187      	movs	r1, #135	; 0x87
 801c974:	4a1e      	ldr	r2, [pc, #120]	; (801c9f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801c976:	481f      	ldr	r0, [pc, #124]	; (801c9f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 801c978:	f00e ff76 	bl	802b868 <__assert_func>
 801c97c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c97e:	e7b9      	b.n	801c8f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801c980:	2300      	movs	r3, #0
 801c982:	9307      	str	r3, [sp, #28]
 801c984:	e7f1      	b.n	801c96a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 801c986:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c98a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c98e:	429a      	cmp	r2, r3
 801c990:	d026      	beq.n	801c9e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801c992:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c996:	2b00      	cmp	r3, #0
 801c998:	dd22      	ble.n	801c9e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801c99a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	dd1e      	ble.n	801c9e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 801c9a2:	2300      	movs	r3, #0
 801c9a4:	a908      	add	r1, sp, #32
 801c9a6:	4620      	mov	r0, r4
 801c9a8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c9ac:	6823      	ldr	r3, [r4, #0]
 801c9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c9b0:	4798      	blx	r3
 801c9b2:	4b11      	ldr	r3, [pc, #68]	; (801c9f8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801c9ba:	b10a      	cbz	r2, 801c9c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801c9bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c9be:	b900      	cbnz	r0, 801c9c2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 801c9c0:	6898      	ldr	r0, [r3, #8]
 801c9c2:	2501      	movs	r5, #1
 801c9c4:	6801      	ldr	r1, [r0, #0]
 801c9c6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c9ca:	9502      	str	r5, [sp, #8]
 801c9cc:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801c9d0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c9d4:	9401      	str	r4, [sp, #4]
 801c9d6:	ac06      	add	r4, sp, #24
 801c9d8:	9400      	str	r4, [sp, #0]
 801c9da:	688c      	ldr	r4, [r1, #8]
 801c9dc:	a905      	add	r1, sp, #20
 801c9de:	47a0      	blx	r4
 801c9e0:	b00a      	add	sp, #40	; 0x28
 801c9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9e6:	bf00      	nop
 801c9e8:	2400c964 	.word	0x2400c964
 801c9ec:	0802fefd 	.word	0x0802fefd
 801c9f0:	0802ffd0 	.word	0x0802ffd0
 801c9f4:	0802ff39 	.word	0x0802ff39
 801c9f8:	2400c8bc 	.word	0x2400c8bc

0801c9fc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 801c9fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c9fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ca02:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801ca04:	4606      	mov	r6, r0
 801ca06:	4299      	cmp	r1, r3
 801ca08:	d02a      	beq.n	801ca60 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 801ca0a:	4b16      	ldr	r3, [pc, #88]	; (801ca64 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	b92b      	cbnz	r3, 801ca1c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 801ca10:	4b15      	ldr	r3, [pc, #84]	; (801ca68 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 801ca12:	21ae      	movs	r1, #174	; 0xae
 801ca14:	4a15      	ldr	r2, [pc, #84]	; (801ca6c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801ca16:	4816      	ldr	r0, [pc, #88]	; (801ca70 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 801ca18:	f00e ff26 	bl	802b868 <__assert_func>
 801ca1c:	4a15      	ldr	r2, [pc, #84]	; (801ca74 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 801ca1e:	8812      	ldrh	r2, [r2, #0]
 801ca20:	428a      	cmp	r2, r1
 801ca22:	d803      	bhi.n	801ca2c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801ca24:	4b14      	ldr	r3, [pc, #80]	; (801ca78 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801ca26:	21af      	movs	r1, #175	; 0xaf
 801ca28:	4a10      	ldr	r2, [pc, #64]	; (801ca6c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 801ca2a:	e7f4      	b.n	801ca16 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 801ca2c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801ca30:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801ca34:	4b11      	ldr	r3, [pc, #68]	; (801ca7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801ca36:	7854      	ldrb	r4, [r2, #1]
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	f3c4 0481 	ubfx	r4, r4, #2, #2
 801ca3e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801ca42:	682b      	ldr	r3, [r5, #0]
 801ca44:	69df      	ldr	r7, [r3, #28]
 801ca46:	4b0e      	ldr	r3, [pc, #56]	; (801ca80 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 801ca48:	6818      	ldr	r0, [r3, #0]
 801ca4a:	f7eb fcbb 	bl	80083c4 <_ZNK8touchgfx5Texts7getTextEt>
 801ca4e:	2300      	movs	r3, #0
 801ca50:	4602      	mov	r2, r0
 801ca52:	4621      	mov	r1, r4
 801ca54:	9300      	str	r3, [sp, #0]
 801ca56:	4628      	mov	r0, r5
 801ca58:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801ca5a:	47b8      	blx	r7
 801ca5c:	b003      	add	sp, #12
 801ca5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca60:	2000      	movs	r0, #0
 801ca62:	e7fb      	b.n	801ca5c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801ca64:	2400c92c 	.word	0x2400c92c
 801ca68:	0802fb50 	.word	0x0802fb50
 801ca6c:	0803007c 	.word	0x0803007c
 801ca70:	0802fb92 	.word	0x0802fb92
 801ca74:	2400c930 	.word	0x2400c930
 801ca78:	0802fbbb 	.word	0x0802fbbb
 801ca7c:	2400c934 	.word	0x2400c934
 801ca80:	2400c938 	.word	0x2400c938

0801ca84 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801ca84:	b570      	push	{r4, r5, r6, lr}
 801ca86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ca8a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801ca8c:	4604      	mov	r4, r0
 801ca8e:	4299      	cmp	r1, r3
 801ca90:	d01e      	beq.n	801cad0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801ca92:	6803      	ldr	r3, [r0, #0]
 801ca94:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801ca96:	4b0f      	ldr	r3, [pc, #60]	; (801cad4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 801ca98:	681b      	ldr	r3, [r3, #0]
 801ca9a:	b92b      	cbnz	r3, 801caa8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 801ca9c:	4b0e      	ldr	r3, [pc, #56]	; (801cad8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801ca9e:	21ae      	movs	r1, #174	; 0xae
 801caa0:	4a0e      	ldr	r2, [pc, #56]	; (801cadc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801caa2:	480f      	ldr	r0, [pc, #60]	; (801cae0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801caa4:	f00e fee0 	bl	802b868 <__assert_func>
 801caa8:	4b0e      	ldr	r3, [pc, #56]	; (801cae4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801caaa:	881b      	ldrh	r3, [r3, #0]
 801caac:	428b      	cmp	r3, r1
 801caae:	d803      	bhi.n	801cab8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801cab0:	4b0d      	ldr	r3, [pc, #52]	; (801cae8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801cab2:	21af      	movs	r1, #175	; 0xaf
 801cab4:	4a09      	ldr	r2, [pc, #36]	; (801cadc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801cab6:	e7f4      	b.n	801caa2 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 801cab8:	4b0c      	ldr	r3, [pc, #48]	; (801caec <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 801caba:	6818      	ldr	r0, [r3, #0]
 801cabc:	f7eb fc82 	bl	80083c4 <_ZNK8touchgfx5Texts7getTextEt>
 801cac0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801cac2:	4601      	mov	r1, r0
 801cac4:	46ac      	mov	ip, r5
 801cac6:	4620      	mov	r0, r4
 801cac8:	2300      	movs	r3, #0
 801caca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cace:	4760      	bx	ip
 801cad0:	2000      	movs	r0, #0
 801cad2:	bd70      	pop	{r4, r5, r6, pc}
 801cad4:	2400c92c 	.word	0x2400c92c
 801cad8:	0802fb50 	.word	0x0802fb50
 801cadc:	0803007c 	.word	0x0803007c
 801cae0:	0802fb92 	.word	0x0802fb92
 801cae4:	2400c930 	.word	0x2400c930
 801cae8:	0802fbbb 	.word	0x0802fbbb
 801caec:	2400c938 	.word	0x2400c938

0801caf0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801caf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801caf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801caf8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801cafa:	b08c      	sub	sp, #48	; 0x30
 801cafc:	4604      	mov	r4, r0
 801cafe:	4293      	cmp	r3, r2
 801cb00:	460e      	mov	r6, r1
 801cb02:	d05d      	beq.n	801cbc0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801cb04:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801cbe4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 801cb08:	f8d8 2000 	ldr.w	r2, [r8]
 801cb0c:	b92a      	cbnz	r2, 801cb1a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801cb0e:	4b2e      	ldr	r3, [pc, #184]	; (801cbc8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801cb10:	21ae      	movs	r1, #174	; 0xae
 801cb12:	4a2e      	ldr	r2, [pc, #184]	; (801cbcc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801cb14:	482e      	ldr	r0, [pc, #184]	; (801cbd0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801cb16:	f00e fea7 	bl	802b868 <__assert_func>
 801cb1a:	4f2e      	ldr	r7, [pc, #184]	; (801cbd4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801cb1c:	8839      	ldrh	r1, [r7, #0]
 801cb1e:	4299      	cmp	r1, r3
 801cb20:	d803      	bhi.n	801cb2a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801cb22:	4b2d      	ldr	r3, [pc, #180]	; (801cbd8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801cb24:	21af      	movs	r1, #175	; 0xaf
 801cb26:	4a29      	ldr	r2, [pc, #164]	; (801cbcc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801cb28:	e7f4      	b.n	801cb14 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801cb2a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801cb2e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801cb32:	4b2a      	ldr	r3, [pc, #168]	; (801cbdc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cb3a:	2a00      	cmp	r2, #0
 801cb3c:	d040      	beq.n	801cbc0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801cb3e:	784b      	ldrb	r3, [r1, #1]
 801cb40:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801cb44:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801cb48:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 801cb4c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801cb50:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801cb54:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801cb58:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 801cb5c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801cb60:	ad05      	add	r5, sp, #20
 801cb62:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801cb64:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801cb68:	9207      	str	r2, [sp, #28]
 801cb6a:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801cb6e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801cb72:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801cb76:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801cb7a:	f88d a020 	strb.w	sl, [sp, #32]
 801cb7e:	9009      	str	r0, [sp, #36]	; 0x24
 801cb80:	f7e7 fc6a 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 801cb84:	4621      	mov	r1, r4
 801cb86:	4681      	mov	r9, r0
 801cb88:	4628      	mov	r0, r5
 801cb8a:	f002 fef5 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb8e:	f8d8 3000 	ldr.w	r3, [r8]
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d0bb      	beq.n	801cb0e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801cb96:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801cb98:	883b      	ldrh	r3, [r7, #0]
 801cb9a:	428b      	cmp	r3, r1
 801cb9c:	d9c1      	bls.n	801cb22 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801cb9e:	4b10      	ldr	r3, [pc, #64]	; (801cbe0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801cba0:	6818      	ldr	r0, [r3, #0]
 801cba2:	f7eb fc0f 	bl	80083c4 <_ZNK8touchgfx5Texts7getTextEt>
 801cba6:	2300      	movs	r3, #0
 801cba8:	9303      	str	r3, [sp, #12]
 801cbaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801cbac:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801cbb0:	ab07      	add	r3, sp, #28
 801cbb2:	4648      	mov	r0, r9
 801cbb4:	9300      	str	r3, [sp, #0]
 801cbb6:	4633      	mov	r3, r6
 801cbb8:	e895 0006 	ldmia.w	r5, {r1, r2}
 801cbbc:	f7eb fb93 	bl	80082e6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801cbc0:	b00c      	add	sp, #48	; 0x30
 801cbc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbc6:	bf00      	nop
 801cbc8:	0802fb50 	.word	0x0802fb50
 801cbcc:	0803007c 	.word	0x0803007c
 801cbd0:	0802fb92 	.word	0x0802fb92
 801cbd4:	2400c930 	.word	0x2400c930
 801cbd8:	0802fbbb 	.word	0x0802fbbb
 801cbdc:	2400c934 	.word	0x2400c934
 801cbe0:	2400c938 	.word	0x2400c938
 801cbe4:	2400c92c 	.word	0x2400c92c

0801cbe8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801cbe8:	b570      	push	{r4, r5, r6, lr}
 801cbea:	880b      	ldrh	r3, [r1, #0]
 801cbec:	460d      	mov	r5, r1
 801cbee:	4604      	mov	r4, r0
 801cbf0:	84c3      	strh	r3, [r0, #38]	; 0x26
 801cbf2:	4608      	mov	r0, r1
 801cbf4:	f004 fd78 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cbf8:	4606      	mov	r6, r0
 801cbfa:	4628      	mov	r0, r5
 801cbfc:	f004 fdae 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cc00:	6823      	ldr	r3, [r4, #0]
 801cc02:	4605      	mov	r5, r0
 801cc04:	b231      	sxth	r1, r6
 801cc06:	4620      	mov	r0, r4
 801cc08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc0a:	4798      	blx	r3
 801cc0c:	6823      	ldr	r3, [r4, #0]
 801cc0e:	b229      	sxth	r1, r5
 801cc10:	4620      	mov	r0, r4
 801cc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc18:	4718      	bx	r3

0801cc1a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801cc1a:	b510      	push	{r4, lr}
 801cc1c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801cc20:	4604      	mov	r4, r0
 801cc22:	2bff      	cmp	r3, #255	; 0xff
 801cc24:	d006      	beq.n	801cc34 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801cc26:	2300      	movs	r3, #0
 801cc28:	8003      	strh	r3, [r0, #0]
 801cc2a:	8043      	strh	r3, [r0, #2]
 801cc2c:	8083      	strh	r3, [r0, #4]
 801cc2e:	80c3      	strh	r3, [r0, #6]
 801cc30:	4620      	mov	r0, r4
 801cc32:	bd10      	pop	{r4, pc}
 801cc34:	3126      	adds	r1, #38	; 0x26
 801cc36:	f004 fdcb 	bl	80217d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801cc3a:	e7f9      	b.n	801cc30 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801cc3c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801cc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc40:	4604      	mov	r4, r0
 801cc42:	b088      	sub	sp, #32
 801cc44:	2500      	movs	r5, #0
 801cc46:	460f      	mov	r7, r1
 801cc48:	f854 3b26 	ldr.w	r3, [r4], #38
 801cc4c:	a904      	add	r1, sp, #16
 801cc4e:	4606      	mov	r6, r0
 801cc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801cc56:	4798      	blx	r3
 801cc58:	4620      	mov	r0, r4
 801cc5a:	f004 fd45 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cc5e:	4680      	mov	r8, r0
 801cc60:	4620      	mov	r0, r4
 801cc62:	f004 fd7b 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cc66:	9506      	str	r5, [sp, #24]
 801cc68:	ad06      	add	r5, sp, #24
 801cc6a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801cc6e:	4639      	mov	r1, r7
 801cc70:	f8ad 801c 	strh.w	r8, [sp, #28]
 801cc74:	4628      	mov	r0, r5
 801cc76:	f7fb fb05 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 801cc7a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	dd19      	ble.n	801ccb6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801cc82:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	dd15      	ble.n	801ccb6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801cc8a:	4b0c      	ldr	r3, [pc, #48]	; (801ccbc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801cc92:	b10a      	cbz	r2, 801cc98 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801cc94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801cc96:	b900      	cbnz	r0, 801cc9a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801cc98:	6898      	ldr	r0, [r3, #8]
 801cc9a:	2701      	movs	r7, #1
 801cc9c:	6801      	ldr	r1, [r0, #0]
 801cc9e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cca2:	9702      	str	r7, [sp, #8]
 801cca4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801cca8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801ccac:	e9cd 5600 	strd	r5, r6, [sp]
 801ccb0:	688d      	ldr	r5, [r1, #8]
 801ccb2:	4621      	mov	r1, r4
 801ccb4:	47a8      	blx	r5
 801ccb6:	b008      	add	sp, #32
 801ccb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccbc:	2400c8bc 	.word	0x2400c8bc

0801ccc0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 801ccc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ccc4:	4604      	mov	r4, r0
 801ccc6:	b08c      	sub	sp, #48	; 0x30
 801ccc8:	4688      	mov	r8, r1
 801ccca:	f7ff fe09 	bl	801c8e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801ccce:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ccd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ccd4:	4293      	cmp	r3, r2
 801ccd6:	f000 809a 	beq.w	801ce0e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801ccda:	4e55      	ldr	r6, [pc, #340]	; (801ce30 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801ccdc:	6832      	ldr	r2, [r6, #0]
 801ccde:	b92a      	cbnz	r2, 801ccec <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 801cce0:	4b54      	ldr	r3, [pc, #336]	; (801ce34 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 801cce2:	21ae      	movs	r1, #174	; 0xae
 801cce4:	4a54      	ldr	r2, [pc, #336]	; (801ce38 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801cce6:	4855      	ldr	r0, [pc, #340]	; (801ce3c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 801cce8:	f00e fdbe 	bl	802b868 <__assert_func>
 801ccec:	4d54      	ldr	r5, [pc, #336]	; (801ce40 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 801ccee:	8829      	ldrh	r1, [r5, #0]
 801ccf0:	4299      	cmp	r1, r3
 801ccf2:	d803      	bhi.n	801ccfc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 801ccf4:	4b53      	ldr	r3, [pc, #332]	; (801ce44 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 801ccf6:	21af      	movs	r1, #175	; 0xaf
 801ccf8:	4a4f      	ldr	r2, [pc, #316]	; (801ce38 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801ccfa:	e7f4      	b.n	801cce6 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 801ccfc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801cd00:	f04f 0c02 	mov.w	ip, #2
 801cd04:	4b50      	ldr	r3, [pc, #320]	; (801ce48 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 801cd06:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cd10:	f1be 0f01 	cmp.w	lr, #1
 801cd14:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801cd18:	f04f 0300 	mov.w	r3, #0
 801cd1c:	b208      	sxth	r0, r1
 801cd1e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801cd22:	9303      	str	r3, [sp, #12]
 801cd24:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801cd28:	d074      	beq.n	801ce14 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801cd2a:	f1be 0f03 	cmp.w	lr, #3
 801cd2e:	d071      	beq.n	801ce14 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801cd30:	1a52      	subs	r2, r2, r1
 801cd32:	f8ad 3010 	strh.w	r3, [sp, #16]
 801cd36:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cd3a:	fb92 f2fc 	sdiv	r2, r2, ip
 801cd3e:	f8ad 200e 	strh.w	r2, [sp, #14]
 801cd42:	f10d 090c 	add.w	r9, sp, #12
 801cd46:	f10d 0a14 	add.w	sl, sp, #20
 801cd4a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801cd4e:	e88a 0003 	stmia.w	sl, {r0, r1}
 801cd52:	4641      	mov	r1, r8
 801cd54:	4650      	mov	r0, sl
 801cd56:	f7fb fa95 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 801cd5a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	dd55      	ble.n	801ce0e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801cd62:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	dd51      	ble.n	801ce0e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801cd6a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801cd6e:	4649      	mov	r1, r9
 801cd70:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801cd74:	4620      	mov	r0, r4
 801cd76:	1a9b      	subs	r3, r3, r2
 801cd78:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801cd7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cd80:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801cd84:	1a9b      	subs	r3, r3, r2
 801cd86:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cd8a:	6823      	ldr	r3, [r4, #0]
 801cd8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd8e:	4798      	blx	r3
 801cd90:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	d047      	beq.n	801ce28 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 801cd98:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801cd9c:	6833      	ldr	r3, [r6, #0]
 801cd9e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d09c      	beq.n	801cce0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 801cda6:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 801cda8:	882d      	ldrh	r5, [r5, #0]
 801cdaa:	428d      	cmp	r5, r1
 801cdac:	d9a2      	bls.n	801ccf4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 801cdae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801cdb2:	6812      	ldr	r2, [r2, #0]
 801cdb4:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 801cdb8:	785b      	ldrb	r3, [r3, #1]
 801cdba:	9209      	str	r2, [sp, #36]	; 0x24
 801cdbc:	f3c3 0501 	ubfx	r5, r3, #0, #2
 801cdc0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801cdc4:	9707      	str	r7, [sp, #28]
 801cdc6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801cdca:	2300      	movs	r3, #0
 801cdcc:	f88d 5020 	strb.w	r5, [sp, #32]
 801cdd0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801cdd4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801cdd8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801cddc:	4b1b      	ldr	r3, [pc, #108]	; (801ce4c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 801cdde:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801cde8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801cdec:	b10a      	cbz	r2, 801cdf2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 801cdee:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801cdf0:	b904      	cbnz	r4, 801cdf4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 801cdf2:	689c      	ldr	r4, [r3, #8]
 801cdf4:	4b16      	ldr	r3, [pc, #88]	; (801ce50 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 801cdf6:	6818      	ldr	r0, [r3, #0]
 801cdf8:	f7eb fae4 	bl	80083c4 <_ZNK8touchgfx5Texts7getTextEt>
 801cdfc:	ab07      	add	r3, sp, #28
 801cdfe:	9001      	str	r0, [sp, #4]
 801ce00:	4620      	mov	r0, r4
 801ce02:	9300      	str	r3, [sp, #0]
 801ce04:	4653      	mov	r3, sl
 801ce06:	e899 0006 	ldmia.w	r9, {r1, r2}
 801ce0a:	f7eb fa6c 	bl	80082e6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801ce0e:	b00c      	add	sp, #48	; 0x30
 801ce10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce14:	1a5b      	subs	r3, r3, r1
 801ce16:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ce1a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ce1e:	fb93 f3fc 	sdiv	r3, r3, ip
 801ce22:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ce26:	e78c      	b.n	801cd42 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 801ce28:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801ce2c:	e7b6      	b.n	801cd9c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 801ce2e:	bf00      	nop
 801ce30:	2400c92c 	.word	0x2400c92c
 801ce34:	0802fb50 	.word	0x0802fb50
 801ce38:	08030184 	.word	0x08030184
 801ce3c:	0802fb92 	.word	0x0802fb92
 801ce40:	2400c930 	.word	0x2400c930
 801ce44:	0802fbbb 	.word	0x0802fbbb
 801ce48:	2400c934 	.word	0x2400c934
 801ce4c:	2400c8bc 	.word	0x2400c8bc
 801ce50:	2400c938 	.word	0x2400c938

0801ce54 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 801ce54:	2101      	movs	r1, #1
 801ce56:	2200      	movs	r2, #0
 801ce58:	b510      	push	{r4, lr}
 801ce5a:	4c13      	ldr	r4, [pc, #76]	; (801cea8 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 801ce5c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801ce60:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801ce64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ce68:	6004      	str	r4, [r0, #0]
 801ce6a:	4c10      	ldr	r4, [pc, #64]	; (801ceac <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 801ce6c:	8082      	strh	r2, [r0, #4]
 801ce6e:	80c2      	strh	r2, [r0, #6]
 801ce70:	8102      	strh	r2, [r0, #8]
 801ce72:	8142      	strh	r2, [r0, #10]
 801ce74:	8182      	strh	r2, [r0, #12]
 801ce76:	81c2      	strh	r2, [r0, #14]
 801ce78:	8202      	strh	r2, [r0, #16]
 801ce7a:	8242      	strh	r2, [r0, #18]
 801ce7c:	61c2      	str	r2, [r0, #28]
 801ce7e:	8402      	strh	r2, [r0, #32]
 801ce80:	8442      	strh	r2, [r0, #34]	; 0x22
 801ce82:	6282      	str	r2, [r0, #40]	; 0x28
 801ce84:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801ce88:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801ce8a:	8601      	strh	r1, [r0, #48]	; 0x30
 801ce8c:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 801ce90:	6344      	str	r4, [r0, #52]	; 0x34
 801ce92:	8701      	strh	r1, [r0, #56]	; 0x38
 801ce94:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801ce98:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 801ce9c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801cea0:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 801cea4:	bd10      	pop	{r4, pc}
 801cea6:	bf00      	nop
 801cea8:	0803011c 	.word	0x0803011c
 801ceac:	0802dd68 	.word	0x0802dd68

0801ceb0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801ceb0:	4b02      	ldr	r3, [pc, #8]	; (801cebc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801ceb2:	6018      	str	r0, [r3, #0]
 801ceb4:	4b02      	ldr	r3, [pc, #8]	; (801cec0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801ceb6:	6019      	str	r1, [r3, #0]
 801ceb8:	4770      	bx	lr
 801ceba:	bf00      	nop
 801cebc:	2400c8c4 	.word	0x2400c8c4
 801cec0:	2400c8d8 	.word	0x2400c8d8

0801cec4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801cec4:	b538      	push	{r3, r4, r5, lr}
 801cec6:	4c2b      	ldr	r4, [pc, #172]	; (801cf74 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801cec8:	4b2b      	ldr	r3, [pc, #172]	; (801cf78 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801ceca:	6821      	ldr	r1, [r4, #0]
 801cecc:	681a      	ldr	r2, [r3, #0]
 801cece:	4281      	cmp	r1, r0
 801ced0:	4d2a      	ldr	r5, [pc, #168]	; (801cf7c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801ced2:	492b      	ldr	r1, [pc, #172]	; (801cf80 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801ced4:	d108      	bne.n	801cee8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801ced6:	682b      	ldr	r3, [r5, #0]
 801ced8:	4293      	cmp	r3, r2
 801ceda:	d105      	bne.n	801cee8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801cedc:	6808      	ldr	r0, [r1, #0]
 801cede:	280f      	cmp	r0, #15
 801cee0:	bf94      	ite	ls
 801cee2:	2000      	movls	r0, #0
 801cee4:	2001      	movhi	r0, #1
 801cee6:	bd38      	pop	{r3, r4, r5, pc}
 801cee8:	4b26      	ldr	r3, [pc, #152]	; (801cf84 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801ceea:	6020      	str	r0, [r4, #0]
 801ceec:	681b      	ldr	r3, [r3, #0]
 801ceee:	602a      	str	r2, [r5, #0]
 801cef0:	4298      	cmp	r0, r3
 801cef2:	d905      	bls.n	801cf00 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801cef4:	4b24      	ldr	r3, [pc, #144]	; (801cf88 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801cef6:	2137      	movs	r1, #55	; 0x37
 801cef8:	4a24      	ldr	r2, [pc, #144]	; (801cf8c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801cefa:	4825      	ldr	r0, [pc, #148]	; (801cf90 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801cefc:	f00e fcb4 	bl	802b868 <__assert_func>
 801cf00:	f010 0403 	ands.w	r4, r0, #3
 801cf04:	bf1f      	itttt	ne
 801cf06:	f1c4 0504 	rsbne	r5, r4, #4
 801cf0a:	3b04      	subne	r3, #4
 801cf0c:	1952      	addne	r2, r2, r5
 801cf0e:	191b      	addne	r3, r3, r4
 801cf10:	4d20      	ldr	r5, [pc, #128]	; (801cf94 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801cf12:	4402      	add	r2, r0
 801cf14:	1a1b      	subs	r3, r3, r0
 801cf16:	3001      	adds	r0, #1
 801cf18:	602a      	str	r2, [r5, #0]
 801cf1a:	f020 0401 	bic.w	r4, r0, #1
 801cf1e:	42a3      	cmp	r3, r4
 801cf20:	d203      	bcs.n	801cf2a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801cf22:	4b19      	ldr	r3, [pc, #100]	; (801cf88 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801cf24:	214a      	movs	r1, #74	; 0x4a
 801cf26:	4a19      	ldr	r2, [pc, #100]	; (801cf8c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801cf28:	e7e7      	b.n	801cefa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801cf2a:	f010 0002 	ands.w	r0, r0, #2
 801cf2e:	bf1f      	itttt	ne
 801cf30:	f1c0 0504 	rsbne	r5, r0, #4
 801cf34:	1952      	addne	r2, r2, r5
 801cf36:	1f05      	subne	r5, r0, #4
 801cf38:	195b      	addne	r3, r3, r5
 801cf3a:	4422      	add	r2, r4
 801cf3c:	4d16      	ldr	r5, [pc, #88]	; (801cf98 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801cf3e:	1b1b      	subs	r3, r3, r4
 801cf40:	602a      	str	r2, [r5, #0]
 801cf42:	429c      	cmp	r4, r3
 801cf44:	d903      	bls.n	801cf4e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801cf46:	4b10      	ldr	r3, [pc, #64]	; (801cf88 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801cf48:	215d      	movs	r1, #93	; 0x5d
 801cf4a:	4a10      	ldr	r2, [pc, #64]	; (801cf8c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801cf4c:	e7d5      	b.n	801cefa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801cf4e:	b120      	cbz	r0, 801cf5a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801cf50:	f1c0 0504 	rsb	r5, r0, #4
 801cf54:	3804      	subs	r0, #4
 801cf56:	442a      	add	r2, r5
 801cf58:	4403      	add	r3, r0
 801cf5a:	1b1b      	subs	r3, r3, r4
 801cf5c:	4422      	add	r2, r4
 801cf5e:	480f      	ldr	r0, [pc, #60]	; (801cf9c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801cf60:	2b0f      	cmp	r3, #15
 801cf62:	600b      	str	r3, [r1, #0]
 801cf64:	6002      	str	r2, [r0, #0]
 801cf66:	d803      	bhi.n	801cf70 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801cf68:	4b0d      	ldr	r3, [pc, #52]	; (801cfa0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801cf6a:	2170      	movs	r1, #112	; 0x70
 801cf6c:	4a07      	ldr	r2, [pc, #28]	; (801cf8c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801cf6e:	e7c4      	b.n	801cefa <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801cf70:	2001      	movs	r0, #1
 801cf72:	e7b8      	b.n	801cee6 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801cf74:	2400c8cc 	.word	0x2400c8cc
 801cf78:	2400c8c4 	.word	0x2400c8c4
 801cf7c:	2400c8d4 	.word	0x2400c8d4
 801cf80:	2400c8dc 	.word	0x2400c8dc
 801cf84:	2400c8d8 	.word	0x2400c8d8
 801cf88:	080301b2 	.word	0x080301b2
 801cf8c:	0803027a 	.word	0x0803027a
 801cf90:	080301eb 	.word	0x080301eb
 801cf94:	2400c8e0 	.word	0x2400c8e0
 801cf98:	2400c8d0 	.word	0x2400c8d0
 801cf9c:	2400c8c8 	.word	0x2400c8c8
 801cfa0:	08030235 	.word	0x08030235

0801cfa4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801cfa4:	4b04      	ldr	r3, [pc, #16]	; (801cfb8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801cfa6:	6818      	ldr	r0, [r3, #0]
 801cfa8:	b120      	cbz	r0, 801cfb4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801cfaa:	4b04      	ldr	r3, [pc, #16]	; (801cfbc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801cfac:	6818      	ldr	r0, [r3, #0]
 801cfae:	3000      	adds	r0, #0
 801cfb0:	bf18      	it	ne
 801cfb2:	2001      	movne	r0, #1
 801cfb4:	4770      	bx	lr
 801cfb6:	bf00      	nop
 801cfb8:	2400c8c4 	.word	0x2400c8c4
 801cfbc:	2400c8d8 	.word	0x2400c8d8

0801cfc0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801cfc0:	4b01      	ldr	r3, [pc, #4]	; (801cfc8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801cfc2:	6818      	ldr	r0, [r3, #0]
 801cfc4:	4770      	bx	lr
 801cfc6:	bf00      	nop
 801cfc8:	2400c8cc 	.word	0x2400c8cc

0801cfcc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801cfcc:	4b01      	ldr	r3, [pc, #4]	; (801cfd4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801cfce:	6818      	ldr	r0, [r3, #0]
 801cfd0:	4770      	bx	lr
 801cfd2:	bf00      	nop
 801cfd4:	2400c8d4 	.word	0x2400c8d4

0801cfd8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801cfd8:	4b01      	ldr	r3, [pc, #4]	; (801cfe0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801cfda:	6818      	ldr	r0, [r3, #0]
 801cfdc:	4770      	bx	lr
 801cfde:	bf00      	nop
 801cfe0:	2400c8e0 	.word	0x2400c8e0

0801cfe4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801cfe4:	4b01      	ldr	r3, [pc, #4]	; (801cfec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801cfe6:	6818      	ldr	r0, [r3, #0]
 801cfe8:	4770      	bx	lr
 801cfea:	bf00      	nop
 801cfec:	2400c8d0 	.word	0x2400c8d0

0801cff0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801cff0:	4b01      	ldr	r3, [pc, #4]	; (801cff8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801cff2:	6818      	ldr	r0, [r3, #0]
 801cff4:	4770      	bx	lr
 801cff6:	bf00      	nop
 801cff8:	2400c8c8 	.word	0x2400c8c8

0801cffc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801cffc:	4b01      	ldr	r3, [pc, #4]	; (801d004 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801cffe:	6818      	ldr	r0, [r3, #0]
 801d000:	4770      	bx	lr
 801d002:	bf00      	nop
 801d004:	2400c8dc 	.word	0x2400c8dc

0801d008 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801d008:	b510      	push	{r4, lr}
 801d00a:	6803      	ldr	r3, [r0, #0]
 801d00c:	460c      	mov	r4, r1
 801d00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d010:	4798      	blx	r3
 801d012:	1b03      	subs	r3, r0, r4
 801d014:	4258      	negs	r0, r3
 801d016:	4158      	adcs	r0, r3
 801d018:	bd10      	pop	{r4, pc}
	...

0801d01c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801d01c:	4b01      	ldr	r3, [pc, #4]	; (801d024 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801d01e:	6019      	str	r1, [r3, #0]
 801d020:	4770      	bx	lr
 801d022:	bf00      	nop
 801d024:	2400c8e4 	.word	0x2400c8e4

0801d028 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801d028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d02c:	4696      	mov	lr, r2
 801d02e:	b097      	sub	sp, #92	; 0x5c
 801d030:	4605      	mov	r5, r0
 801d032:	4614      	mov	r4, r2
 801d034:	460e      	mov	r6, r1
 801d036:	461f      	mov	r7, r3
 801d038:	f10d 0c1c 	add.w	ip, sp, #28
 801d03c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801d040:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801d044:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801d048:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d04c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d050:	f8de 3000 	ldr.w	r3, [lr]
 801d054:	f104 0e14 	add.w	lr, r4, #20
 801d058:	f8cc 3000 	str.w	r3, [ip]
 801d05c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801d060:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d064:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d068:	f8de 3000 	ldr.w	r3, [lr]
 801d06c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801d070:	f8cc 3000 	str.w	r3, [ip]
 801d074:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801d078:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d07c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d080:	f8de 3000 	ldr.w	r3, [lr]
 801d084:	4631      	mov	r1, r6
 801d086:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d088:	4628      	mov	r0, r5
 801d08a:	f8cc 3000 	str.w	r3, [ip]
 801d08e:	682b      	ldr	r3, [r5, #0]
 801d090:	9201      	str	r2, [sp, #4]
 801d092:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d094:	f8cd 8008 	str.w	r8, [sp, #8]
 801d098:	9200      	str	r2, [sp, #0]
 801d09a:	aa07      	add	r2, sp, #28
 801d09c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801d0a0:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 801d0a4:	463b      	mov	r3, r7
 801d0a6:	47d8      	blx	fp
 801d0a8:	46a6      	mov	lr, r4
 801d0aa:	f10d 0c1c 	add.w	ip, sp, #28
 801d0ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d0b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d0b6:	f8de 3000 	ldr.w	r3, [lr]
 801d0ba:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801d0be:	343c      	adds	r4, #60	; 0x3c
 801d0c0:	f8cc 3000 	str.w	r3, [ip]
 801d0c4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801d0c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d0cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d0d0:	f8de 3000 	ldr.w	r3, [lr]
 801d0d4:	f8cc 3000 	str.w	r3, [ip]
 801d0d8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801d0dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d0de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d0e2:	6823      	ldr	r3, [r4, #0]
 801d0e4:	4631      	mov	r1, r6
 801d0e6:	4628      	mov	r0, r5
 801d0e8:	f8cc 3000 	str.w	r3, [ip]
 801d0ec:	682b      	ldr	r3, [r5, #0]
 801d0ee:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801d0f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d0f4:	f8cd 8008 	str.w	r8, [sp, #8]
 801d0f8:	9201      	str	r2, [sp, #4]
 801d0fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d0fc:	9200      	str	r2, [sp, #0]
 801d0fe:	aa07      	add	r2, sp, #28
 801d100:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801d102:	463b      	mov	r3, r7
 801d104:	47a0      	blx	r4
 801d106:	b017      	add	sp, #92	; 0x5c
 801d108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d10c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d10c:	2000      	movs	r0, #0
 801d10e:	4770      	bx	lr

0801d110 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d114:	b08d      	sub	sp, #52	; 0x34
 801d116:	4688      	mov	r8, r1
 801d118:	f8d3 c000 	ldr.w	ip, [r3]
 801d11c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d11e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801d122:	680f      	ldr	r7, [r1, #0]
 801d124:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801d128:	eba7 070c 	sub.w	r7, r7, ip
 801d12c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801d130:	edd3 6a07 	vldr	s13, [r3, #28]
 801d134:	42bc      	cmp	r4, r7
 801d136:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d138:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801d13c:	bfa8      	it	ge
 801d13e:	463c      	movge	r4, r7
 801d140:	f9b1 9000 	ldrsh.w	r9, [r1]
 801d144:	f9ba 1000 	ldrsh.w	r1, [sl]
 801d148:	ee07 4a90 	vmov	s15, r4
 801d14c:	eb09 0e0c 	add.w	lr, r9, ip
 801d150:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801d154:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801d158:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801d15c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801d160:	4571      	cmp	r1, lr
 801d162:	ee25 4a04 	vmul.f32	s8, s10, s8
 801d166:	ee65 4a24 	vmul.f32	s9, s10, s9
 801d16a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801d16e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d172:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801d176:	ee32 1a05 	vadd.f32	s2, s4, s10
 801d17a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801d17e:	ee36 0a84 	vadd.f32	s0, s13, s8
 801d182:	ee61 1a87 	vmul.f32	s3, s3, s14
 801d186:	ee22 2a07 	vmul.f32	s4, s4, s14
 801d18a:	f340 808c 	ble.w	801d2a6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801d18e:	eba1 060e 	sub.w	r6, r1, lr
 801d192:	fb96 f5f4 	sdiv	r5, r6, r4
 801d196:	ee07 5a10 	vmov	s14, r5
 801d19a:	2d00      	cmp	r5, #0
 801d19c:	fb04 6615 	mls	r6, r4, r5, r6
 801d1a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d1a4:	eea7 0a04 	vfma.f32	s0, s14, s8
 801d1a8:	eee7 0a24 	vfma.f32	s1, s14, s9
 801d1ac:	eea7 1a05 	vfma.f32	s2, s14, s10
 801d1b0:	dd12      	ble.n	801d1d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801d1b2:	ee70 6a44 	vsub.f32	s13, s0, s8
 801d1b6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801d1ba:	ee31 2a45 	vsub.f32	s4, s2, s10
 801d1be:	eef5 6a40 	vcmp.f32	s13, #0.0
 801d1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1c6:	bf14      	ite	ne
 801d1c8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801d1cc:	eeb0 7a67 	vmoveq.f32	s14, s15
 801d1d0:	ee61 1a87 	vmul.f32	s3, s3, s14
 801d1d4:	ee22 2a07 	vmul.f32	s4, s4, s14
 801d1d8:	fb05 f204 	mul.w	r2, r5, r4
 801d1dc:	1abf      	subs	r7, r7, r2
 801d1de:	4494      	add	ip, r2
 801d1e0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801d1e4:	4411      	add	r1, r2
 801d1e6:	eb09 020c 	add.w	r2, r9, ip
 801d1ea:	b209      	sxth	r1, r1
 801d1ec:	443a      	add	r2, r7
 801d1ee:	428a      	cmp	r2, r1
 801d1f0:	bfc4      	itt	gt
 801d1f2:	eba1 0209 	subgt.w	r2, r1, r9
 801d1f6:	eba2 070c 	subgt.w	r7, r2, ip
 801d1fa:	2f00      	cmp	r7, #0
 801d1fc:	dd50      	ble.n	801d2a0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801d1fe:	fb97 f1f4 	sdiv	r1, r7, r4
 801d202:	fb04 7211 	mls	r2, r4, r1, r7
 801d206:	b90a      	cbnz	r2, 801d20c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801d208:	3901      	subs	r1, #1
 801d20a:	4622      	mov	r2, r4
 801d20c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801d210:	6840      	ldr	r0, [r0, #4]
 801d212:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801d216:	44b6      	add	lr, r6
 801d218:	f8d0 a000 	ldr.w	sl, [r0]
 801d21c:	2900      	cmp	r1, #0
 801d21e:	bfcc      	ite	gt
 801d220:	46a1      	movgt	r9, r4
 801d222:	4691      	movle	r9, r2
 801d224:	900b      	str	r0, [sp, #44]	; 0x2c
 801d226:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801d228:	fb04 e505 	mla	r5, r4, r5, lr
 801d22c:	eef0 6a42 	vmov.f32	s13, s4
 801d230:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801d234:	9008      	str	r0, [sp, #32]
 801d236:	eeb0 7a61 	vmov.f32	s14, s3
 801d23a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801d23c:	695b      	ldr	r3, [r3, #20]
 801d23e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d242:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801d246:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d24a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d24c:	445b      	add	r3, fp
 801d24e:	9307      	str	r3, [sp, #28]
 801d250:	ee16 3a90 	vmov	r3, s13
 801d254:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801d258:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801d25c:	ee21 3a23 	vmul.f32	s6, s2, s7
 801d260:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801d264:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801d268:	ee17 7a90 	vmov	r7, s15
 801d26c:	ee73 7a42 	vsub.f32	s15, s6, s4
 801d270:	fb97 f7f4 	sdiv	r7, r7, r4
 801d274:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801d278:	ee17 ca90 	vmov	ip, s15
 801d27c:	fb9c fcf4 	sdiv	ip, ip, r4
 801d280:	fb0c 3306 	mla	r3, ip, r6, r3
 801d284:	9302      	str	r3, [sp, #8]
 801d286:	ee17 3a10 	vmov	r3, s14
 801d28a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801d28e:	fb07 3706 	mla	r7, r7, r6, r3
 801d292:	eba9 0306 	sub.w	r3, r9, r6
 801d296:	e9cd 4700 	strd	r4, r7, [sp]
 801d29a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801d29e:	47a0      	blx	r4
 801d2a0:	b00d      	add	sp, #52	; 0x34
 801d2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2a6:	2500      	movs	r5, #0
 801d2a8:	462e      	mov	r6, r5
 801d2aa:	e799      	b.n	801d1e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801d2ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801d2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2b0:	b0db      	sub	sp, #364	; 0x16c
 801d2b2:	461d      	mov	r5, r3
 801d2b4:	4614      	mov	r4, r2
 801d2b6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801d2ba:	910f      	str	r1, [sp, #60]	; 0x3c
 801d2bc:	4629      	mov	r1, r5
 801d2be:	930a      	str	r3, [sp, #40]	; 0x28
 801d2c0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801d2c4:	9009      	str	r0, [sp, #36]	; 0x24
 801d2c6:	930b      	str	r3, [sp, #44]	; 0x2c
 801d2c8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801d2cc:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801d2d0:	9310      	str	r3, [sp, #64]	; 0x40
 801d2d2:	6803      	ldr	r3, [r0, #0]
 801d2d4:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801d2d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801d2da:	47b8      	blx	r7
 801d2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2de:	6058      	str	r0, [r3, #4]
 801d2e0:	2800      	cmp	r0, #0
 801d2e2:	f000 83a1 	beq.w	801da28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d2e6:	682b      	ldr	r3, [r5, #0]
 801d2e8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801d2ec:	ed94 7a02 	vldr	s14, [r4, #8]
 801d2f0:	9314      	str	r3, [sp, #80]	; 0x50
 801d2f2:	686b      	ldr	r3, [r5, #4]
 801d2f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d2f8:	9315      	str	r3, [sp, #84]	; 0x54
 801d2fa:	4bc1      	ldr	r3, [pc, #772]	; (801d600 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801d2fc:	7819      	ldrb	r1, [r3, #0]
 801d2fe:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801d302:	2900      	cmp	r1, #0
 801d304:	bf16      	itet	ne
 801d306:	4619      	movne	r1, r3
 801d308:	4611      	moveq	r1, r2
 801d30a:	4613      	movne	r3, r2
 801d30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d310:	9116      	str	r1, [sp, #88]	; 0x58
 801d312:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801d316:	f240 8387 	bls.w	801da28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d31a:	ed94 7a07 	vldr	s14, [r4, #28]
 801d31e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d326:	f240 837f 	bls.w	801da28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d32a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801d32e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d336:	f240 8377 	bls.w	801da28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d33a:	6822      	ldr	r2, [r4, #0]
 801d33c:	4bb1      	ldr	r3, [pc, #708]	; (801d604 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801d33e:	429a      	cmp	r2, r3
 801d340:	f2c0 8372 	blt.w	801da28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d344:	49b0      	ldr	r1, [pc, #704]	; (801d608 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801d346:	6963      	ldr	r3, [r4, #20]
 801d348:	428a      	cmp	r2, r1
 801d34a:	f300 836d 	bgt.w	801da28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d34e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801d352:	48ae      	ldr	r0, [pc, #696]	; (801d60c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801d354:	33ff      	adds	r3, #255	; 0xff
 801d356:	4283      	cmp	r3, r0
 801d358:	f200 8366 	bhi.w	801da28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d35c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d35e:	4dac      	ldr	r5, [pc, #688]	; (801d610 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801d360:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801d364:	33ff      	adds	r3, #255	; 0xff
 801d366:	42ab      	cmp	r3, r5
 801d368:	f200 835e 	bhi.w	801da28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d36c:	6862      	ldr	r2, [r4, #4]
 801d36e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801d372:	33ff      	adds	r3, #255	; 0xff
 801d374:	4283      	cmp	r3, r0
 801d376:	f200 8357 	bhi.w	801da28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d37a:	69a1      	ldr	r1, [r4, #24]
 801d37c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801d380:	33ff      	adds	r3, #255	; 0xff
 801d382:	4283      	cmp	r3, r0
 801d384:	f200 8350 	bhi.w	801da28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d388:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801d38a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801d38e:	30ff      	adds	r0, #255	; 0xff
 801d390:	42a8      	cmp	r0, r5
 801d392:	f200 8349 	bhi.w	801da28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d396:	428a      	cmp	r2, r1
 801d398:	f280 8110 	bge.w	801d5bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801d39c:	429a      	cmp	r2, r3
 801d39e:	f300 8119 	bgt.w	801d5d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801d3a2:	4299      	cmp	r1, r3
 801d3a4:	f280 811d 	bge.w	801d5e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801d3a8:	2502      	movs	r5, #2
 801d3aa:	2701      	movs	r7, #1
 801d3ac:	46a9      	mov	r9, r5
 801d3ae:	46b8      	mov	r8, r7
 801d3b0:	f04f 0a00 	mov.w	sl, #0
 801d3b4:	4621      	mov	r1, r4
 801d3b6:	a849      	add	r0, sp, #292	; 0x124
 801d3b8:	f003 fee4 	bl	8021184 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801d3bc:	4622      	mov	r2, r4
 801d3be:	4653      	mov	r3, sl
 801d3c0:	a949      	add	r1, sp, #292	; 0x124
 801d3c2:	f8cd 9000 	str.w	r9, [sp]
 801d3c6:	a819      	add	r0, sp, #100	; 0x64
 801d3c8:	f004 f80c 	bl	80213e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801d3cc:	4622      	mov	r2, r4
 801d3ce:	4653      	mov	r3, sl
 801d3d0:	a949      	add	r1, sp, #292	; 0x124
 801d3d2:	f8cd 8000 	str.w	r8, [sp]
 801d3d6:	a829      	add	r0, sp, #164	; 0xa4
 801d3d8:	f004 f804 	bl	80213e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801d3dc:	4643      	mov	r3, r8
 801d3de:	4622      	mov	r2, r4
 801d3e0:	a949      	add	r1, sp, #292	; 0x124
 801d3e2:	f8cd 9000 	str.w	r9, [sp]
 801d3e6:	a839      	add	r0, sp, #228	; 0xe4
 801d3e8:	f003 fffc 	bl	80213e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801d3ec:	42af      	cmp	r7, r5
 801d3ee:	af12      	add	r7, sp, #72	; 0x48
 801d3f0:	bfb7      	itett	lt
 801d3f2:	2300      	movlt	r3, #0
 801d3f4:	2301      	movge	r3, #1
 801d3f6:	ad29      	addlt	r5, sp, #164	; 0xa4
 801d3f8:	ac19      	addlt	r4, sp, #100	; 0x64
 801d3fa:	bfb1      	iteee	lt
 801d3fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d3fe:	ad19      	addge	r5, sp, #100	; 0x64
 801d400:	930e      	strge	r3, [sp, #56]	; 0x38
 801d402:	ac29      	addge	r4, sp, #164	; 0xa4
 801d404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d406:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d40a:	e887 0003 	stmia.w	r7, {r0, r1}
 801d40e:	b928      	cbnz	r0, 801d41c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801d410:	4b80      	ldr	r3, [pc, #512]	; (801d614 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801d412:	6818      	ldr	r0, [r3, #0]
 801d414:	6803      	ldr	r3, [r0, #0]
 801d416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d418:	4798      	blx	r3
 801d41a:	6038      	str	r0, [r7, #0]
 801d41c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d41e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801d422:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d426:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801d428:	930c      	str	r3, [sp, #48]	; 0x30
 801d42a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d42c:	6963      	ldr	r3, [r4, #20]
 801d42e:	440b      	add	r3, r1
 801d430:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801d434:	4408      	add	r0, r1
 801d436:	b200      	sxth	r0, r0
 801d438:	4283      	cmp	r3, r0
 801d43a:	900d      	str	r0, [sp, #52]	; 0x34
 801d43c:	f280 80dd 	bge.w	801d5fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801d440:	428b      	cmp	r3, r1
 801d442:	da08      	bge.n	801d456 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801d444:	2a00      	cmp	r2, #0
 801d446:	dd06      	ble.n	801d456 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801d448:	1acb      	subs	r3, r1, r3
 801d44a:	429a      	cmp	r2, r3
 801d44c:	f2c0 80e4 	blt.w	801d618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801d450:	2b00      	cmp	r3, #0
 801d452:	f300 80e2 	bgt.w	801d61a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801d456:	6967      	ldr	r7, [r4, #20]
 801d458:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801d45c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d45e:	443b      	add	r3, r7
 801d460:	461f      	mov	r7, r3
 801d462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d464:	1bdf      	subs	r7, r3, r7
 801d466:	4297      	cmp	r7, r2
 801d468:	bfa8      	it	ge
 801d46a:	4617      	movge	r7, r2
 801d46c:	2f00      	cmp	r7, #0
 801d46e:	f340 8166 	ble.w	801d73e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801d472:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d474:	6829      	ldr	r1, [r5, #0]
 801d476:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d47a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801d47e:	4411      	add	r1, r2
 801d480:	6820      	ldr	r0, [r4, #0]
 801d482:	4299      	cmp	r1, r3
 801d484:	dd1a      	ble.n	801d4bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801d486:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801d48a:	4402      	add	r2, r0
 801d48c:	440b      	add	r3, r1
 801d48e:	b21b      	sxth	r3, r3
 801d490:	429a      	cmp	r2, r3
 801d492:	dc13      	bgt.n	801d4bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801d494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d496:	a912      	add	r1, sp, #72	; 0x48
 801d498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d49a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d49c:	681b      	ldr	r3, [r3, #0]
 801d49e:	9206      	str	r2, [sp, #24]
 801d4a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d4a2:	9500      	str	r5, [sp, #0]
 801d4a4:	9205      	str	r2, [sp, #20]
 801d4a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d4a8:	e9cd b203 	strd	fp, r2, [sp, #12]
 801d4ac:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801d4ae:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801d4b2:	aa49      	add	r2, sp, #292	; 0x124
 801d4b4:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801d4b8:	4623      	mov	r3, r4
 801d4ba:	47c8      	blx	r9
 801d4bc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801d4c0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801d4c4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801d4c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d4cc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801d4d0:	68a1      	ldr	r1, [r4, #8]
 801d4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d4d6:	ed94 6a08 	vldr	s12, [r4, #32]
 801d4da:	edd4 6a07 	vldr	s13, [r4, #28]
 801d4de:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d4e2:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d4e6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d4ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d4ee:	edc4 6a07 	vstr	s13, [r4, #28]
 801d4f2:	441a      	add	r2, r3
 801d4f4:	6963      	ldr	r3, [r4, #20]
 801d4f6:	3301      	adds	r3, #1
 801d4f8:	6022      	str	r2, [r4, #0]
 801d4fa:	6163      	str	r3, [r4, #20]
 801d4fc:	69a3      	ldr	r3, [r4, #24]
 801d4fe:	3b01      	subs	r3, #1
 801d500:	61a3      	str	r3, [r4, #24]
 801d502:	6923      	ldr	r3, [r4, #16]
 801d504:	440b      	add	r3, r1
 801d506:	68e1      	ldr	r1, [r4, #12]
 801d508:	428b      	cmp	r3, r1
 801d50a:	6123      	str	r3, [r4, #16]
 801d50c:	db15      	blt.n	801d53a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801d50e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801d512:	3201      	adds	r2, #1
 801d514:	1a5b      	subs	r3, r3, r1
 801d516:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d51a:	6022      	str	r2, [r4, #0]
 801d51c:	6123      	str	r3, [r4, #16]
 801d51e:	edc4 6a07 	vstr	s13, [r4, #28]
 801d522:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801d526:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d52a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d52e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801d532:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d536:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d53a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801d53e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801d542:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801d546:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d54a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801d54e:	68a9      	ldr	r1, [r5, #8]
 801d550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d554:	ed95 6a08 	vldr	s12, [r5, #32]
 801d558:	edd5 6a07 	vldr	s13, [r5, #28]
 801d55c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d560:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d564:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d568:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d56c:	edc5 6a07 	vstr	s13, [r5, #28]
 801d570:	441a      	add	r2, r3
 801d572:	696b      	ldr	r3, [r5, #20]
 801d574:	3301      	adds	r3, #1
 801d576:	602a      	str	r2, [r5, #0]
 801d578:	616b      	str	r3, [r5, #20]
 801d57a:	69ab      	ldr	r3, [r5, #24]
 801d57c:	3b01      	subs	r3, #1
 801d57e:	61ab      	str	r3, [r5, #24]
 801d580:	692b      	ldr	r3, [r5, #16]
 801d582:	440b      	add	r3, r1
 801d584:	68e9      	ldr	r1, [r5, #12]
 801d586:	428b      	cmp	r3, r1
 801d588:	612b      	str	r3, [r5, #16]
 801d58a:	db15      	blt.n	801d5b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801d58c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d590:	3201      	adds	r2, #1
 801d592:	1a5b      	subs	r3, r3, r1
 801d594:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d598:	602a      	str	r2, [r5, #0]
 801d59a:	612b      	str	r3, [r5, #16]
 801d59c:	edc5 6a07 	vstr	s13, [r5, #28]
 801d5a0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801d5a4:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d5a8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d5ac:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801d5b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d5b4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d5b8:	3f01      	subs	r7, #1
 801d5ba:	e757      	b.n	801d46c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801d5bc:	4299      	cmp	r1, r3
 801d5be:	dc13      	bgt.n	801d5e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801d5c0:	429a      	cmp	r2, r3
 801d5c2:	da14      	bge.n	801d5ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801d5c4:	2502      	movs	r5, #2
 801d5c6:	2703      	movs	r7, #3
 801d5c8:	f04f 0800 	mov.w	r8, #0
 801d5cc:	46a9      	mov	r9, r5
 801d5ce:	f04f 0a01 	mov.w	sl, #1
 801d5d2:	e6ef      	b.n	801d3b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801d5d4:	2501      	movs	r5, #1
 801d5d6:	2700      	movs	r7, #0
 801d5d8:	46a9      	mov	r9, r5
 801d5da:	46b8      	mov	r8, r7
 801d5dc:	f04f 0a02 	mov.w	sl, #2
 801d5e0:	e6e8      	b.n	801d3b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801d5e2:	2501      	movs	r5, #1
 801d5e4:	2702      	movs	r7, #2
 801d5e6:	e6e1      	b.n	801d3ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801d5e8:	2500      	movs	r5, #0
 801d5ea:	2701      	movs	r7, #1
 801d5ec:	e7f4      	b.n	801d5d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801d5ee:	2702      	movs	r7, #2
 801d5f0:	2503      	movs	r5, #3
 801d5f2:	f04f 0900 	mov.w	r9, #0
 801d5f6:	46b8      	mov	r8, r7
 801d5f8:	e7e9      	b.n	801d5ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801d5fa:	4613      	mov	r3, r2
 801d5fc:	e728      	b.n	801d450 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801d5fe:	bf00      	nop
 801d600:	2400c8b4 	.word	0x2400c8b4
 801d604:	fffd8f01 	.word	0xfffd8f01
 801d608:	00027100 	.word	0x00027100
 801d60c:	0004e1ff 	.word	0x0004e1ff
 801d610:	0004e1fe 	.word	0x0004e1fe
 801d614:	2400c8bc 	.word	0x2400c8bc
 801d618:	4613      	mov	r3, r2
 801d61a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801d61c:	469e      	mov	lr, r3
 801d61e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801d620:	469c      	mov	ip, r3
 801d622:	9111      	str	r1, [sp, #68]	; 0x44
 801d624:	f04f 0900 	mov.w	r9, #0
 801d628:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801d62c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801d630:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801d634:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801d638:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801d63c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801d640:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801d644:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801d648:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801d64c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801d650:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801d654:	f1bc 0f00 	cmp.w	ip, #0
 801d658:	d147      	bne.n	801d6ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801d65a:	eb03 0c07 	add.w	ip, r3, r7
 801d65e:	1ad7      	subs	r7, r2, r3
 801d660:	f1b9 0f00 	cmp.w	r9, #0
 801d664:	d009      	beq.n	801d67a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801d666:	9029      	str	r0, [sp, #164]	; 0xa4
 801d668:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801d66c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801d670:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801d674:	912d      	str	r1, [sp, #180]	; 0xb4
 801d676:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801d67a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801d67c:	f04f 0800 	mov.w	r8, #0
 801d680:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801d684:	9111      	str	r1, [sp, #68]	; 0x44
 801d686:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801d68a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801d68e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801d692:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801d696:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801d69a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801d69e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801d6a2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801d6a6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801d6aa:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801d6ae:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801d6b2:	f1be 0f00 	cmp.w	lr, #0
 801d6b6:	d031      	beq.n	801d71c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801d6b8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d6ba:	4450      	add	r0, sl
 801d6bc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801d6c0:	4431      	add	r1, r6
 801d6c2:	ee37 7a04 	vadd.f32	s14, s14, s8
 801d6c6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801d6ca:	4549      	cmp	r1, r9
 801d6cc:	db08      	blt.n	801d6e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801d6ce:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d6d2:	3001      	adds	r0, #1
 801d6d4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801d6d8:	eba1 0109 	sub.w	r1, r1, r9
 801d6dc:	ee37 7a06 	vadd.f32	s14, s14, s12
 801d6e0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d6e4:	f04f 0801 	mov.w	r8, #1
 801d6e8:	e7e3      	b.n	801d6b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801d6ea:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d6ec:	4450      	add	r0, sl
 801d6ee:	ee37 7a24 	vadd.f32	s14, s14, s9
 801d6f2:	4431      	add	r1, r6
 801d6f4:	ee77 7a84 	vadd.f32	s15, s15, s8
 801d6f8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801d6fc:	4541      	cmp	r1, r8
 801d6fe:	db08      	blt.n	801d712 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801d700:	ee76 6a85 	vadd.f32	s13, s13, s10
 801d704:	3001      	adds	r0, #1
 801d706:	ee37 7a25 	vadd.f32	s14, s14, s11
 801d70a:	eba1 0108 	sub.w	r1, r1, r8
 801d70e:	ee77 7a86 	vadd.f32	s15, s15, s12
 801d712:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d716:	f04f 0901 	mov.w	r9, #1
 801d71a:	e79b      	b.n	801d654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801d71c:	449c      	add	ip, r3
 801d71e:	1aff      	subs	r7, r7, r3
 801d720:	f1b8 0f00 	cmp.w	r8, #0
 801d724:	d009      	beq.n	801d73a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801d726:	9019      	str	r0, [sp, #100]	; 0x64
 801d728:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801d72c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801d730:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801d734:	911d      	str	r1, [sp, #116]	; 0x74
 801d736:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801d73a:	1ad2      	subs	r2, r2, r3
 801d73c:	e68b      	b.n	801d456 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801d73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d740:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801d742:	2b00      	cmp	r3, #0
 801d744:	f000 80d1 	beq.w	801d8ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801d748:	ad19      	add	r5, sp, #100	; 0x64
 801d74a:	ac39      	add	r4, sp, #228	; 0xe4
 801d74c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d74e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801d752:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d756:	930c      	str	r3, [sp, #48]	; 0x30
 801d758:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d75a:	6963      	ldr	r3, [r4, #20]
 801d75c:	440b      	add	r3, r1
 801d75e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801d762:	4408      	add	r0, r1
 801d764:	b200      	sxth	r0, r0
 801d766:	4283      	cmp	r3, r0
 801d768:	900d      	str	r0, [sp, #52]	; 0x34
 801d76a:	f280 80c1 	bge.w	801d8f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801d76e:	428b      	cmp	r3, r1
 801d770:	da08      	bge.n	801d784 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d772:	2a00      	cmp	r2, #0
 801d774:	dd06      	ble.n	801d784 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d776:	1acb      	subs	r3, r1, r3
 801d778:	429a      	cmp	r2, r3
 801d77a:	f2c0 80bb 	blt.w	801d8f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801d77e:	2b00      	cmp	r3, #0
 801d780:	f300 80b9 	bgt.w	801d8f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801d784:	6967      	ldr	r7, [r4, #20]
 801d786:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801d78a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d78c:	443b      	add	r3, r7
 801d78e:	461f      	mov	r7, r3
 801d790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d792:	1bdf      	subs	r7, r3, r7
 801d794:	4297      	cmp	r7, r2
 801d796:	bfa8      	it	ge
 801d798:	4617      	movge	r7, r2
 801d79a:	2f00      	cmp	r7, #0
 801d79c:	f340 813c 	ble.w	801da18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801d7a0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d7a2:	6829      	ldr	r1, [r5, #0]
 801d7a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d7a8:	f9bb 3000 	ldrsh.w	r3, [fp]
 801d7ac:	4411      	add	r1, r2
 801d7ae:	6820      	ldr	r0, [r4, #0]
 801d7b0:	4299      	cmp	r1, r3
 801d7b2:	dd1a      	ble.n	801d7ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801d7b4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801d7b8:	4402      	add	r2, r0
 801d7ba:	440b      	add	r3, r1
 801d7bc:	b21b      	sxth	r3, r3
 801d7be:	429a      	cmp	r2, r3
 801d7c0:	dc13      	bgt.n	801d7ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801d7c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d7c4:	a912      	add	r1, sp, #72	; 0x48
 801d7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d7ca:	681b      	ldr	r3, [r3, #0]
 801d7cc:	9206      	str	r2, [sp, #24]
 801d7ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d7d0:	9500      	str	r5, [sp, #0]
 801d7d2:	9205      	str	r2, [sp, #20]
 801d7d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d7d6:	e9cd b203 	strd	fp, r2, [sp, #12]
 801d7da:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801d7dc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801d7e0:	aa49      	add	r2, sp, #292	; 0x124
 801d7e2:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801d7e6:	4623      	mov	r3, r4
 801d7e8:	47c8      	blx	r9
 801d7ea:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801d7ee:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801d7f2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801d7f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d7fa:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801d7fe:	68a1      	ldr	r1, [r4, #8]
 801d800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d804:	ed94 6a08 	vldr	s12, [r4, #32]
 801d808:	edd4 6a07 	vldr	s13, [r4, #28]
 801d80c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d810:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d814:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d818:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d81c:	edc4 6a07 	vstr	s13, [r4, #28]
 801d820:	441a      	add	r2, r3
 801d822:	6963      	ldr	r3, [r4, #20]
 801d824:	3301      	adds	r3, #1
 801d826:	6022      	str	r2, [r4, #0]
 801d828:	6163      	str	r3, [r4, #20]
 801d82a:	69a3      	ldr	r3, [r4, #24]
 801d82c:	3b01      	subs	r3, #1
 801d82e:	61a3      	str	r3, [r4, #24]
 801d830:	6923      	ldr	r3, [r4, #16]
 801d832:	440b      	add	r3, r1
 801d834:	68e1      	ldr	r1, [r4, #12]
 801d836:	428b      	cmp	r3, r1
 801d838:	6123      	str	r3, [r4, #16]
 801d83a:	db15      	blt.n	801d868 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801d83c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801d840:	3201      	adds	r2, #1
 801d842:	1a5b      	subs	r3, r3, r1
 801d844:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d848:	6022      	str	r2, [r4, #0]
 801d84a:	6123      	str	r3, [r4, #16]
 801d84c:	edc4 6a07 	vstr	s13, [r4, #28]
 801d850:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801d854:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d858:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d85c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801d860:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d864:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d868:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801d86c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801d870:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801d874:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d878:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801d87c:	68a9      	ldr	r1, [r5, #8]
 801d87e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d882:	ed95 6a08 	vldr	s12, [r5, #32]
 801d886:	edd5 6a07 	vldr	s13, [r5, #28]
 801d88a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d88e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d892:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d896:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d89a:	edc5 6a07 	vstr	s13, [r5, #28]
 801d89e:	441a      	add	r2, r3
 801d8a0:	696b      	ldr	r3, [r5, #20]
 801d8a2:	3301      	adds	r3, #1
 801d8a4:	602a      	str	r2, [r5, #0]
 801d8a6:	616b      	str	r3, [r5, #20]
 801d8a8:	69ab      	ldr	r3, [r5, #24]
 801d8aa:	3b01      	subs	r3, #1
 801d8ac:	61ab      	str	r3, [r5, #24]
 801d8ae:	692b      	ldr	r3, [r5, #16]
 801d8b0:	440b      	add	r3, r1
 801d8b2:	68e9      	ldr	r1, [r5, #12]
 801d8b4:	428b      	cmp	r3, r1
 801d8b6:	612b      	str	r3, [r5, #16]
 801d8b8:	db15      	blt.n	801d8e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801d8ba:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d8be:	3201      	adds	r2, #1
 801d8c0:	1a5b      	subs	r3, r3, r1
 801d8c2:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d8c6:	602a      	str	r2, [r5, #0]
 801d8c8:	612b      	str	r3, [r5, #16]
 801d8ca:	edc5 6a07 	vstr	s13, [r5, #28]
 801d8ce:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801d8d2:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d8d6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d8da:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801d8de:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d8e2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d8e6:	3f01      	subs	r7, #1
 801d8e8:	e757      	b.n	801d79a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801d8ea:	ad39      	add	r5, sp, #228	; 0xe4
 801d8ec:	ac19      	add	r4, sp, #100	; 0x64
 801d8ee:	e72d      	b.n	801d74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801d8f0:	4613      	mov	r3, r2
 801d8f2:	e744      	b.n	801d77e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801d8f4:	4613      	mov	r3, r2
 801d8f6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801d8f8:	469e      	mov	lr, r3
 801d8fa:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801d8fe:	461f      	mov	r7, r3
 801d900:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801d904:	f04f 0900 	mov.w	r9, #0
 801d908:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801d90c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801d910:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801d914:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801d918:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801d91c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801d91e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801d922:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801d926:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801d92a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801d92e:	960e      	str	r6, [sp, #56]	; 0x38
 801d930:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801d934:	2f00      	cmp	r7, #0
 801d936:	d146      	bne.n	801d9c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801d938:	449c      	add	ip, r3
 801d93a:	1ad7      	subs	r7, r2, r3
 801d93c:	f1b9 0f00 	cmp.w	r9, #0
 801d940:	d009      	beq.n	801d956 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801d942:	9039      	str	r0, [sp, #228]	; 0xe4
 801d944:	913d      	str	r1, [sp, #244]	; 0xf4
 801d946:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801d94a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801d94e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801d952:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801d956:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801d958:	f04f 0800 	mov.w	r8, #0
 801d95c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801d960:	910e      	str	r1, [sp, #56]	; 0x38
 801d962:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801d966:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801d96a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801d96e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801d972:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801d976:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801d97a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801d97e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801d982:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801d986:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801d98a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801d98e:	f1be 0f00 	cmp.w	lr, #0
 801d992:	d030      	beq.n	801d9f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801d994:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801d996:	4450      	add	r0, sl
 801d998:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801d99c:	4431      	add	r1, r6
 801d99e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801d9a2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801d9a6:	4549      	cmp	r1, r9
 801d9a8:	db08      	blt.n	801d9bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801d9aa:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d9ae:	3001      	adds	r0, #1
 801d9b0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801d9b4:	eba1 0109 	sub.w	r1, r1, r9
 801d9b8:	ee37 7a06 	vadd.f32	s14, s14, s12
 801d9bc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d9c0:	f04f 0801 	mov.w	r8, #1
 801d9c4:	e7e3      	b.n	801d98e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801d9c6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801d9c8:	4450      	add	r0, sl
 801d9ca:	ee37 7a24 	vadd.f32	s14, s14, s9
 801d9ce:	4431      	add	r1, r6
 801d9d0:	ee77 7a84 	vadd.f32	s15, s15, s8
 801d9d4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801d9d8:	4541      	cmp	r1, r8
 801d9da:	db08      	blt.n	801d9ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801d9dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 801d9e0:	3001      	adds	r0, #1
 801d9e2:	ee37 7a25 	vadd.f32	s14, s14, s11
 801d9e6:	eba1 0108 	sub.w	r1, r1, r8
 801d9ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 801d9ee:	3f01      	subs	r7, #1
 801d9f0:	f04f 0901 	mov.w	r9, #1
 801d9f4:	e79e      	b.n	801d934 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801d9f6:	449c      	add	ip, r3
 801d9f8:	1aff      	subs	r7, r7, r3
 801d9fa:	f1b8 0f00 	cmp.w	r8, #0
 801d9fe:	d009      	beq.n	801da14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801da00:	9019      	str	r0, [sp, #100]	; 0x64
 801da02:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801da06:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801da0a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801da0e:	911d      	str	r1, [sp, #116]	; 0x74
 801da10:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801da14:	1ad2      	subs	r2, r2, r3
 801da16:	e6b5      	b.n	801d784 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801da18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801da1a:	681b      	ldr	r3, [r3, #0]
 801da1c:	b923      	cbnz	r3, 801da28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801da1e:	4b04      	ldr	r3, [pc, #16]	; (801da30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801da20:	6818      	ldr	r0, [r3, #0]
 801da22:	6803      	ldr	r3, [r0, #0]
 801da24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da26:	4798      	blx	r3
 801da28:	b05b      	add	sp, #364	; 0x16c
 801da2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da2e:	bf00      	nop
 801da30:	2400c8bc 	.word	0x2400c8bc

0801da34 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801da34:	b570      	push	{r4, r5, r6, lr}
 801da36:	4604      	mov	r4, r0
 801da38:	2500      	movs	r5, #0
 801da3a:	9804      	ldr	r0, [sp, #16]
 801da3c:	7223      	strb	r3, [r4, #8]
 801da3e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801da42:	8025      	strh	r5, [r4, #0]
 801da44:	6061      	str	r1, [r4, #4]
 801da46:	7263      	strb	r3, [r4, #9]
 801da48:	60e0      	str	r0, [r4, #12]
 801da4a:	8222      	strh	r2, [r4, #16]
 801da4c:	8265      	strh	r5, [r4, #18]
 801da4e:	82a5      	strh	r5, [r4, #20]
 801da50:	82e5      	strh	r5, [r4, #22]
 801da52:	8325      	strh	r5, [r4, #24]
 801da54:	8365      	strh	r5, [r4, #26]
 801da56:	83a5      	strh	r5, [r4, #28]
 801da58:	77a5      	strb	r5, [r4, #30]
 801da5a:	6803      	ldr	r3, [r0, #0]
 801da5c:	695b      	ldr	r3, [r3, #20]
 801da5e:	4798      	blx	r3
 801da60:	4606      	mov	r6, r0
 801da62:	b1f8      	cbz	r0, 801daa4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801da64:	68e0      	ldr	r0, [r4, #12]
 801da66:	4631      	mov	r1, r6
 801da68:	6803      	ldr	r3, [r0, #0]
 801da6a:	68db      	ldr	r3, [r3, #12]
 801da6c:	4798      	blx	r3
 801da6e:	7b43      	ldrb	r3, [r0, #13]
 801da70:	7a82      	ldrb	r2, [r0, #10]
 801da72:	4605      	mov	r5, r0
 801da74:	005b      	lsls	r3, r3, #1
 801da76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801da7a:	4313      	orrs	r3, r2
 801da7c:	83a3      	strh	r3, [r4, #28]
 801da7e:	7a63      	ldrb	r3, [r4, #9]
 801da80:	2b04      	cmp	r3, #4
 801da82:	d10f      	bne.n	801daa4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801da84:	68e0      	ldr	r0, [r4, #12]
 801da86:	462a      	mov	r2, r5
 801da88:	4631      	mov	r1, r6
 801da8a:	6803      	ldr	r3, [r0, #0]
 801da8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da8e:	4798      	blx	r3
 801da90:	7b6b      	ldrb	r3, [r5, #13]
 801da92:	005b      	lsls	r3, r3, #1
 801da94:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801da98:	7aab      	ldrb	r3, [r5, #10]
 801da9a:	4313      	orrs	r3, r2
 801da9c:	4418      	add	r0, r3
 801da9e:	8ba3      	ldrh	r3, [r4, #28]
 801daa0:	4418      	add	r0, r3
 801daa2:	83a0      	strh	r0, [r4, #28]
 801daa4:	4620      	mov	r0, r4
 801daa6:	bd70      	pop	{r4, r5, r6, pc}

0801daa8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801daa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daac:	2400      	movs	r4, #0
 801daae:	b085      	sub	sp, #20
 801dab0:	4681      	mov	r9, r0
 801dab2:	4688      	mov	r8, r1
 801dab4:	4692      	mov	sl, r2
 801dab6:	469b      	mov	fp, r3
 801dab8:	4627      	mov	r7, r4
 801daba:	4625      	mov	r5, r4
 801dabc:	4626      	mov	r6, r4
 801dabe:	4554      	cmp	r4, sl
 801dac0:	da2a      	bge.n	801db18 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801dac2:	2300      	movs	r3, #0
 801dac4:	9303      	str	r3, [sp, #12]
 801dac6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801daca:	429d      	cmp	r5, r3
 801dacc:	d004      	beq.n	801dad8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801dace:	f242 030b 	movw	r3, #8203	; 0x200b
 801dad2:	429d      	cmp	r5, r3
 801dad4:	bf18      	it	ne
 801dad6:	462f      	movne	r7, r5
 801dad8:	ab03      	add	r3, sp, #12
 801dada:	4642      	mov	r2, r8
 801dadc:	4659      	mov	r1, fp
 801dade:	4648      	mov	r0, r9
 801dae0:	f002 ff82 	bl	80209e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801dae4:	4605      	mov	r5, r0
 801dae6:	b1b8      	cbz	r0, 801db18 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801dae8:	280a      	cmp	r0, #10
 801daea:	d015      	beq.n	801db18 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801daec:	9a03      	ldr	r2, [sp, #12]
 801daee:	b18a      	cbz	r2, 801db14 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801daf0:	7b50      	ldrb	r0, [r2, #13]
 801daf2:	4639      	mov	r1, r7
 801daf4:	7a93      	ldrb	r3, [r2, #10]
 801daf6:	0040      	lsls	r0, r0, #1
 801daf8:	8895      	ldrh	r5, [r2, #4]
 801dafa:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801dafe:	4303      	orrs	r3, r0
 801db00:	4640      	mov	r0, r8
 801db02:	9301      	str	r3, [sp, #4]
 801db04:	f8d8 3000 	ldr.w	r3, [r8]
 801db08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801db0a:	4798      	blx	r3
 801db0c:	9b01      	ldr	r3, [sp, #4]
 801db0e:	4418      	add	r0, r3
 801db10:	4406      	add	r6, r0
 801db12:	b2b6      	uxth	r6, r6
 801db14:	3401      	adds	r4, #1
 801db16:	e7d2      	b.n	801dabe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801db18:	4630      	mov	r0, r6
 801db1a:	b005      	add	sp, #20
 801db1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801db20 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801db20:	2a02      	cmp	r2, #2
 801db22:	b530      	push	{r4, r5, lr}
 801db24:	d011      	beq.n	801db4a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801db26:	2a03      	cmp	r2, #3
 801db28:	d01c      	beq.n	801db64 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801db2a:	2a01      	cmp	r2, #1
 801db2c:	d10c      	bne.n	801db48 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801db2e:	888b      	ldrh	r3, [r1, #4]
 801db30:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801db34:	8801      	ldrh	r1, [r0, #0]
 801db36:	1a9b      	subs	r3, r3, r2
 801db38:	8844      	ldrh	r4, [r0, #2]
 801db3a:	1a5b      	subs	r3, r3, r1
 801db3c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801db40:	8004      	strh	r4, [r0, #0]
 801db42:	8043      	strh	r3, [r0, #2]
 801db44:	8081      	strh	r1, [r0, #4]
 801db46:	80c2      	strh	r2, [r0, #6]
 801db48:	bd30      	pop	{r4, r5, pc}
 801db4a:	88cb      	ldrh	r3, [r1, #6]
 801db4c:	88c2      	ldrh	r2, [r0, #6]
 801db4e:	1a9b      	subs	r3, r3, r2
 801db50:	8842      	ldrh	r2, [r0, #2]
 801db52:	1a9b      	subs	r3, r3, r2
 801db54:	888a      	ldrh	r2, [r1, #4]
 801db56:	8881      	ldrh	r1, [r0, #4]
 801db58:	8043      	strh	r3, [r0, #2]
 801db5a:	1a52      	subs	r2, r2, r1
 801db5c:	8801      	ldrh	r1, [r0, #0]
 801db5e:	1a52      	subs	r2, r2, r1
 801db60:	8002      	strh	r2, [r0, #0]
 801db62:	e7f1      	b.n	801db48 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801db64:	88cb      	ldrh	r3, [r1, #6]
 801db66:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801db6a:	8841      	ldrh	r1, [r0, #2]
 801db6c:	1a9b      	subs	r3, r3, r2
 801db6e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801db72:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801db76:	1a5b      	subs	r3, r3, r1
 801db78:	8045      	strh	r5, [r0, #2]
 801db7a:	8082      	strh	r2, [r0, #4]
 801db7c:	8003      	strh	r3, [r0, #0]
 801db7e:	80c4      	strh	r4, [r0, #6]
 801db80:	e7e2      	b.n	801db48 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801db82 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801db82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db86:	b09f      	sub	sp, #124	; 0x7c
 801db88:	9116      	str	r1, [sp, #88]	; 0x58
 801db8a:	9317      	str	r3, [sp, #92]	; 0x5c
 801db8c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801db8e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801db90:	8809      	ldrh	r1, [r1, #0]
 801db92:	889b      	ldrh	r3, [r3, #4]
 801db94:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801db98:	440b      	add	r3, r1
 801db9a:	9212      	str	r2, [sp, #72]	; 0x48
 801db9c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801dba0:	b21b      	sxth	r3, r3
 801dba2:	9011      	str	r0, [sp, #68]	; 0x44
 801dba4:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801dba8:	9310      	str	r3, [sp, #64]	; 0x40
 801dbaa:	f8d8 3000 	ldr.w	r3, [r8]
 801dbae:	7a59      	ldrb	r1, [r3, #9]
 801dbb0:	7a1b      	ldrb	r3, [r3, #8]
 801dbb2:	9114      	str	r1, [sp, #80]	; 0x50
 801dbb4:	9315      	str	r3, [sp, #84]	; 0x54
 801dbb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dbb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801dbbc:	2a00      	cmp	r2, #0
 801dbbe:	d067      	beq.n	801dc90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801dbc0:	f898 3010 	ldrb.w	r3, [r8, #16]
 801dbc4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801dbc6:	2b04      	cmp	r3, #4
 801dbc8:	bf14      	ite	ne
 801dbca:	2301      	movne	r3, #1
 801dbcc:	2302      	moveq	r3, #2
 801dbce:	4413      	add	r3, r2
 801dbd0:	f04f 0900 	mov.w	r9, #0
 801dbd4:	930f      	str	r3, [sp, #60]	; 0x3c
 801dbd6:	464c      	mov	r4, r9
 801dbd8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801dbdc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801dbe0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801dbe4:	4293      	cmp	r3, r2
 801dbe6:	f280 808c 	bge.w	801dd02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801dbea:	2300      	movs	r3, #0
 801dbec:	931c      	str	r3, [sp, #112]	; 0x70
 801dbee:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801dbf2:	429c      	cmp	r4, r3
 801dbf4:	d006      	beq.n	801dc04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801dbf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dbf8:	f242 020b 	movw	r2, #8203	; 0x200b
 801dbfc:	4294      	cmp	r4, r2
 801dbfe:	bf18      	it	ne
 801dc00:	4623      	movne	r3, r4
 801dc02:	930d      	str	r3, [sp, #52]	; 0x34
 801dc04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dc06:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801dc08:	f8d8 2000 	ldr.w	r2, [r8]
 801dc0c:	428b      	cmp	r3, r1
 801dc0e:	db41      	blt.n	801dc94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801dc10:	6813      	ldr	r3, [r2, #0]
 801dc12:	4610      	mov	r0, r2
 801dc14:	695b      	ldr	r3, [r3, #20]
 801dc16:	4798      	blx	r3
 801dc18:	4604      	mov	r4, r0
 801dc1a:	f8d8 0000 	ldr.w	r0, [r8]
 801dc1e:	aa1d      	add	r2, sp, #116	; 0x74
 801dc20:	4621      	mov	r1, r4
 801dc22:	6803      	ldr	r3, [r0, #0]
 801dc24:	689e      	ldr	r6, [r3, #8]
 801dc26:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801dc2a:	47b0      	blx	r6
 801dc2c:	901c      	str	r0, [sp, #112]	; 0x70
 801dc2e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801dc32:	429c      	cmp	r4, r3
 801dc34:	f000 80ea 	beq.w	801de0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dc38:	f242 030b 	movw	r3, #8203	; 0x200b
 801dc3c:	429c      	cmp	r4, r3
 801dc3e:	f000 80e5 	beq.w	801de0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dc42:	2c00      	cmp	r4, #0
 801dc44:	f000 80f7 	beq.w	801de36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801dc48:	2c0a      	cmp	r4, #10
 801dc4a:	d060      	beq.n	801dd0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801dc4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801dc4e:	b36a      	cbz	r2, 801dcac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801dc50:	8894      	ldrh	r4, [r2, #4]
 801dc52:	f1bb 0f00 	cmp.w	fp, #0
 801dc56:	d03b      	beq.n	801dcd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801dc58:	f892 900d 	ldrb.w	r9, [r2, #13]
 801dc5c:	f1bb 0f01 	cmp.w	fp, #1
 801dc60:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801dc64:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801dc68:	f892 900a 	ldrb.w	r9, [r2, #10]
 801dc6c:	ea49 0903 	orr.w	r9, r9, r3
 801dc70:	d134      	bne.n	801dcdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801dc72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc74:	eba5 0509 	sub.w	r5, r5, r9
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d14f      	bne.n	801dd1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801dc7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dc7e:	eb09 0305 	add.w	r3, r9, r5
 801dc82:	4413      	add	r3, r2
 801dc84:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dc86:	f9b2 2000 	ldrsh.w	r2, [r2]
 801dc8a:	4293      	cmp	r3, r2
 801dc8c:	da51      	bge.n	801dd32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801dc8e:	e038      	b.n	801dd02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801dc90:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801dc92:	e79d      	b.n	801dbd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801dc94:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801dc98:	4659      	mov	r1, fp
 801dc9a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801dc9c:	9301      	str	r3, [sp, #4]
 801dc9e:	ab1d      	add	r3, sp, #116	; 0x74
 801dca0:	9300      	str	r3, [sp, #0]
 801dca2:	ab1c      	add	r3, sp, #112	; 0x70
 801dca4:	f002 fef8 	bl	8020a98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801dca8:	4604      	mov	r4, r0
 801dcaa:	e7c0      	b.n	801dc2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801dcac:	f8d8 0000 	ldr.w	r0, [r8]
 801dcb0:	6803      	ldr	r3, [r0, #0]
 801dcb2:	691b      	ldr	r3, [r3, #16]
 801dcb4:	4798      	blx	r3
 801dcb6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801dcba:	4298      	cmp	r0, r3
 801dcbc:	f000 80a6 	beq.w	801de0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dcc0:	f242 030b 	movw	r3, #8203	; 0x200b
 801dcc4:	4298      	cmp	r0, r3
 801dcc6:	f000 80a1 	beq.w	801de0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dcca:	f1bb 0f00 	cmp.w	fp, #0
 801dcce:	d100      	bne.n	801dcd2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801dcd0:	444d      	add	r5, r9
 801dcd2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801dcd4:	2a00      	cmp	r2, #0
 801dcd6:	d1bf      	bne.n	801dc58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801dcd8:	4691      	mov	r9, r2
 801dcda:	e097      	b.n	801de0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dcdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	f000 80ab 	beq.w	801de3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801dce4:	f1bb 0f00 	cmp.w	fp, #0
 801dce8:	d118      	bne.n	801dd1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801dcea:	f8d8 0000 	ldr.w	r0, [r8]
 801dcee:	990d      	ldr	r1, [sp, #52]	; 0x34
 801dcf0:	6803      	ldr	r3, [r0, #0]
 801dcf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dcf4:	4798      	blx	r3
 801dcf6:	4405      	add	r5, r0
 801dcf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dcfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dcfc:	1aeb      	subs	r3, r5, r3
 801dcfe:	4293      	cmp	r3, r2
 801dd00:	dd17      	ble.n	801dd32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801dd02:	2c00      	cmp	r4, #0
 801dd04:	f000 8097 	beq.w	801de36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801dd08:	2c0a      	cmp	r4, #10
 801dd0a:	f040 8085 	bne.w	801de18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801dd0e:	240a      	movs	r4, #10
 801dd10:	fab4 f084 	clz	r0, r4
 801dd14:	0940      	lsrs	r0, r0, #5
 801dd16:	b01f      	add	sp, #124	; 0x7c
 801dd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd1c:	f8d8 0000 	ldr.w	r0, [r8]
 801dd20:	990d      	ldr	r1, [sp, #52]	; 0x34
 801dd22:	6803      	ldr	r3, [r0, #0]
 801dd24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dd26:	4798      	blx	r3
 801dd28:	f1bb 0f01 	cmp.w	fp, #1
 801dd2c:	eba5 0500 	sub.w	r5, r5, r0
 801dd30:	d0a4      	beq.n	801dc7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801dd32:	981c      	ldr	r0, [sp, #112]	; 0x70
 801dd34:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801dd36:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801dd3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801dd3e:	7b43      	ldrb	r3, [r0, #13]
 801dd40:	4429      	add	r1, r5
 801dd42:	015b      	lsls	r3, r3, #5
 801dd44:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dd48:	7983      	ldrb	r3, [r0, #6]
 801dd4a:	4313      	orrs	r3, r2
 801dd4c:	440b      	add	r3, r1
 801dd4e:	42b3      	cmp	r3, r6
 801dd50:	db5c      	blt.n	801de0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dd52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dd54:	4299      	cmp	r1, r3
 801dd56:	da59      	bge.n	801de0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801dd58:	f8d8 0000 	ldr.w	r0, [r8]
 801dd5c:	42ae      	cmp	r6, r5
 801dd5e:	6803      	ldr	r3, [r0, #0]
 801dd60:	bfcc      	ite	gt
 801dd62:	1b76      	subgt	r6, r6, r5
 801dd64:	2600      	movle	r6, #0
 801dd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd68:	bfc8      	it	gt
 801dd6a:	b2b6      	uxthgt	r6, r6
 801dd6c:	4798      	blx	r3
 801dd6e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801dd70:	7b5a      	ldrb	r2, [r3, #13]
 801dd72:	00d1      	lsls	r1, r2, #3
 801dd74:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801dd78:	7a19      	ldrb	r1, [r3, #8]
 801dd7a:	4339      	orrs	r1, r7
 801dd7c:	0657      	lsls	r7, r2, #25
 801dd7e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801dd80:	bf48      	it	mi
 801dd82:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801dd86:	4407      	add	r7, r0
 801dd88:	bf48      	it	mi
 801dd8a:	b209      	sxthmi	r1, r1
 801dd8c:	1a7f      	subs	r7, r7, r1
 801dd8e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801dd90:	b2bf      	uxth	r7, r7
 801dd92:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801dd96:	fa0f fa87 	sxth.w	sl, r7
 801dd9a:	4551      	cmp	r1, sl
 801dd9c:	dd3a      	ble.n	801de14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801dd9e:	0112      	lsls	r2, r2, #4
 801dda0:	79d8      	ldrb	r0, [r3, #7]
 801dda2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801dda6:	4302      	orrs	r2, r0
 801dda8:	4492      	add	sl, r2
 801ddaa:	4551      	cmp	r1, sl
 801ddac:	dc2e      	bgt.n	801de0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801ddae:	1bcf      	subs	r7, r1, r7
 801ddb0:	468a      	mov	sl, r1
 801ddb2:	b2bf      	uxth	r7, r7
 801ddb4:	9319      	str	r3, [sp, #100]	; 0x64
 801ddb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ddb8:	f8d8 0000 	ldr.w	r0, [r8]
 801ddbc:	681a      	ldr	r2, [r3, #0]
 801ddbe:	6801      	ldr	r1, [r0, #0]
 801ddc0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801ddc2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ddc4:	9313      	str	r3, [sp, #76]	; 0x4c
 801ddc6:	9218      	str	r2, [sp, #96]	; 0x60
 801ddc8:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801ddca:	4788      	blx	r1
 801ddcc:	f898 1006 	ldrb.w	r1, [r8, #6]
 801ddd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ddd2:	910b      	str	r1, [sp, #44]	; 0x2c
 801ddd4:	f898 100e 	ldrb.w	r1, [r8, #14]
 801ddd8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ddda:	910a      	str	r1, [sp, #40]	; 0x28
 801dddc:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801dde0:	9109      	str	r1, [sp, #36]	; 0x24
 801dde2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801dde6:	9305      	str	r3, [sp, #20]
 801dde8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ddea:	9206      	str	r2, [sp, #24]
 801ddec:	e9cd a601 	strd	sl, r6, [sp, #4]
 801ddf0:	442e      	add	r6, r5
 801ddf2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801ddf6:	b236      	sxth	r6, r6
 801ddf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ddfa:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801ddfe:	9600      	str	r6, [sp, #0]
 801de00:	9916      	ldr	r1, [sp, #88]	; 0x58
 801de02:	681a      	ldr	r2, [r3, #0]
 801de04:	9811      	ldr	r0, [sp, #68]	; 0x44
 801de06:	685b      	ldr	r3, [r3, #4]
 801de08:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801de0a:	47b0      	blx	r6
 801de0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de0e:	3301      	adds	r3, #1
 801de10:	930e      	str	r3, [sp, #56]	; 0x38
 801de12:	e6e5      	b.n	801dbe0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801de14:	2700      	movs	r7, #0
 801de16:	e7cd      	b.n	801ddb4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801de18:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801de1a:	3501      	adds	r5, #1
 801de1c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801de1e:	429d      	cmp	r5, r3
 801de20:	f6bf af76 	bge.w	801dd10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801de24:	4659      	mov	r1, fp
 801de26:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801de28:	f7ea f9ac 	bl	8008184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801de2c:	4604      	mov	r4, r0
 801de2e:	b110      	cbz	r0, 801de36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801de30:	280a      	cmp	r0, #10
 801de32:	d1f2      	bne.n	801de1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801de34:	e76b      	b.n	801dd0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801de36:	2400      	movs	r4, #0
 801de38:	e76a      	b.n	801dd10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801de3a:	f1bb 0f00 	cmp.w	fp, #0
 801de3e:	f43f af5b 	beq.w	801dcf8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801de42:	e776      	b.n	801dd32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801de44 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801de44:	b530      	push	{r4, r5, lr}
 801de46:	8a44      	ldrh	r4, [r0, #18]
 801de48:	8ac5      	ldrh	r5, [r0, #22]
 801de4a:	82c3      	strh	r3, [r0, #22]
 801de4c:	442c      	add	r4, r5
 801de4e:	1ae4      	subs	r4, r4, r3
 801de50:	8b03      	ldrh	r3, [r0, #24]
 801de52:	8244      	strh	r4, [r0, #18]
 801de54:	8a84      	ldrh	r4, [r0, #20]
 801de56:	4422      	add	r2, r4
 801de58:	440c      	add	r4, r1
 801de5a:	1a59      	subs	r1, r3, r1
 801de5c:	8342      	strh	r2, [r0, #26]
 801de5e:	8284      	strh	r4, [r0, #20]
 801de60:	8301      	strh	r1, [r0, #24]
 801de62:	bd30      	pop	{r4, r5, pc}

0801de64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801de64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de68:	7a43      	ldrb	r3, [r0, #9]
 801de6a:	b087      	sub	sp, #28
 801de6c:	4604      	mov	r4, r0
 801de6e:	460f      	mov	r7, r1
 801de70:	1eda      	subs	r2, r3, #3
 801de72:	b2d2      	uxtb	r2, r2
 801de74:	2900      	cmp	r1, #0
 801de76:	d036      	beq.n	801dee6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801de78:	2a01      	cmp	r2, #1
 801de7a:	d932      	bls.n	801dee2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801de7c:	1e58      	subs	r0, r3, #1
 801de7e:	f1d0 0b00 	rsbs	fp, r0, #0
 801de82:	eb4b 0b00 	adc.w	fp, fp, r0
 801de86:	1e99      	subs	r1, r3, #2
 801de88:	424b      	negs	r3, r1
 801de8a:	414b      	adcs	r3, r1
 801de8c:	9303      	str	r3, [sp, #12]
 801de8e:	2300      	movs	r3, #0
 801de90:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801de94:	2500      	movs	r5, #0
 801de96:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801de9a:	46a9      	mov	r9, r5
 801de9c:	8265      	strh	r5, [r4, #18]
 801de9e:	82a5      	strh	r5, [r4, #20]
 801dea0:	2300      	movs	r3, #0
 801dea2:	9305      	str	r3, [sp, #20]
 801dea4:	8823      	ldrh	r3, [r4, #0]
 801dea6:	2b20      	cmp	r3, #32
 801dea8:	d02b      	beq.n	801df02 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801deaa:	eba3 020a 	sub.w	r2, r3, sl
 801deae:	4256      	negs	r6, r2
 801deb0:	4156      	adcs	r6, r2
 801deb2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801deb6:	4293      	cmp	r3, r2
 801deb8:	d004      	beq.n	801dec4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801deba:	4553      	cmp	r3, sl
 801debc:	bf16      	itet	ne
 801debe:	4699      	movne	r9, r3
 801dec0:	2601      	moveq	r6, #1
 801dec2:	2600      	movne	r6, #0
 801dec4:	ab05      	add	r3, sp, #20
 801dec6:	68e2      	ldr	r2, [r4, #12]
 801dec8:	7a21      	ldrb	r1, [r4, #8]
 801deca:	6860      	ldr	r0, [r4, #4]
 801decc:	f002 fd8c 	bl	80209e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ded0:	8020      	strh	r0, [r4, #0]
 801ded2:	b9c8      	cbnz	r0, 801df08 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801ded4:	8b22      	ldrh	r2, [r4, #24]
 801ded6:	2300      	movs	r3, #0
 801ded8:	4611      	mov	r1, r2
 801deda:	4620      	mov	r0, r4
 801dedc:	f7ff ffb2 	bl	801de44 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801dee0:	e066      	b.n	801dfb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801dee2:	468b      	mov	fp, r1
 801dee4:	e7cf      	b.n	801de86 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801dee6:	3b01      	subs	r3, #1
 801dee8:	2a01      	cmp	r2, #1
 801deea:	9103      	str	r1, [sp, #12]
 801deec:	468b      	mov	fp, r1
 801deee:	bf8c      	ite	hi
 801def0:	2200      	movhi	r2, #0
 801def2:	2201      	movls	r2, #1
 801def4:	2b01      	cmp	r3, #1
 801def6:	9202      	str	r2, [sp, #8]
 801def8:	bf8c      	ite	hi
 801defa:	2300      	movhi	r3, #0
 801defc:	2301      	movls	r3, #1
 801defe:	9301      	str	r3, [sp, #4]
 801df00:	e7c8      	b.n	801de94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801df02:	4699      	mov	r9, r3
 801df04:	2601      	movs	r6, #1
 801df06:	e7dd      	b.n	801dec4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801df08:	8ae3      	ldrh	r3, [r4, #22]
 801df0a:	280a      	cmp	r0, #10
 801df0c:	f103 0301 	add.w	r3, r3, #1
 801df10:	82e3      	strh	r3, [r4, #22]
 801df12:	d0df      	beq.n	801ded4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801df14:	9a05      	ldr	r2, [sp, #20]
 801df16:	bb42      	cbnz	r2, 801df6a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801df18:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801df1c:	4298      	cmp	r0, r3
 801df1e:	d001      	beq.n	801df24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801df20:	4550      	cmp	r0, sl
 801df22:	d1bd      	bne.n	801dea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801df24:	8823      	ldrh	r3, [r4, #0]
 801df26:	8b21      	ldrh	r1, [r4, #24]
 801df28:	2b20      	cmp	r3, #32
 801df2a:	d001      	beq.n	801df30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801df2c:	4553      	cmp	r3, sl
 801df2e:	d131      	bne.n	801df94 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801df30:	2e00      	cmp	r6, #0
 801df32:	bf0a      	itet	eq
 801df34:	460d      	moveq	r5, r1
 801df36:	4630      	movne	r0, r6
 801df38:	2001      	moveq	r0, #1
 801df3a:	440a      	add	r2, r1
 801df3c:	8aa3      	ldrh	r3, [r4, #20]
 801df3e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801df42:	b292      	uxth	r2, r2
 801df44:	8322      	strh	r2, [r4, #24]
 801df46:	4413      	add	r3, r2
 801df48:	2f00      	cmp	r7, #0
 801df4a:	d03a      	beq.n	801dfc2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801df4c:	f1bb 0f00 	cmp.w	fp, #0
 801df50:	d102      	bne.n	801df58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801df52:	9903      	ldr	r1, [sp, #12]
 801df54:	b301      	cbz	r1, 801df98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801df56:	b1f8      	cbz	r0, 801df98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801df58:	8ba1      	ldrh	r1, [r4, #28]
 801df5a:	4419      	add	r1, r3
 801df5c:	458c      	cmp	ip, r1
 801df5e:	da2a      	bge.n	801dfb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801df60:	8a61      	ldrh	r1, [r4, #18]
 801df62:	b341      	cbz	r1, 801dfb6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801df64:	4563      	cmp	r3, ip
 801df66:	dd9b      	ble.n	801dea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801df68:	e01c      	b.n	801dfa4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801df6a:	8893      	ldrh	r3, [r2, #4]
 801df6c:	4649      	mov	r1, r9
 801df6e:	8023      	strh	r3, [r4, #0]
 801df70:	f892 800d 	ldrb.w	r8, [r2, #13]
 801df74:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801df78:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801df7c:	f892 800a 	ldrb.w	r8, [r2, #10]
 801df80:	ea48 0800 	orr.w	r8, r8, r0
 801df84:	68e0      	ldr	r0, [r4, #12]
 801df86:	6803      	ldr	r3, [r0, #0]
 801df88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801df8a:	4798      	blx	r3
 801df8c:	eb08 0200 	add.w	r2, r8, r0
 801df90:	b292      	uxth	r2, r2
 801df92:	e7c7      	b.n	801df24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801df94:	2000      	movs	r0, #0
 801df96:	e7d0      	b.n	801df3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801df98:	4563      	cmp	r3, ip
 801df9a:	dd81      	ble.n	801dea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801df9c:	8a63      	ldrh	r3, [r4, #18]
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	f43f af7e 	beq.w	801dea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801dfa4:	2301      	movs	r3, #1
 801dfa6:	8ba2      	ldrh	r2, [r4, #28]
 801dfa8:	77a3      	strb	r3, [r4, #30]
 801dfaa:	8b63      	ldrh	r3, [r4, #26]
 801dfac:	4413      	add	r3, r2
 801dfae:	8363      	strh	r3, [r4, #26]
 801dfb0:	b007      	add	sp, #28
 801dfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfb6:	2300      	movs	r3, #0
 801dfb8:	4611      	mov	r1, r2
 801dfba:	4620      	mov	r0, r4
 801dfbc:	f7ff ff42 	bl	801de44 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801dfc0:	e76e      	b.n	801dea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801dfc2:	4563      	cmp	r3, ip
 801dfc4:	dd14      	ble.n	801dff0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801dfc6:	9b02      	ldr	r3, [sp, #8]
 801dfc8:	b113      	cbz	r3, 801dfd0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801dfca:	2301      	movs	r3, #1
 801dfcc:	460a      	mov	r2, r1
 801dfce:	e783      	b.n	801ded8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801dfd0:	9b01      	ldr	r3, [sp, #4]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	f43f af64 	beq.w	801dea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801dfd8:	2800      	cmp	r0, #0
 801dfda:	f47f af61 	bne.w	801dea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801dfde:	b116      	cbz	r6, 801dfe6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801dfe0:	2301      	movs	r3, #1
 801dfe2:	462a      	mov	r2, r5
 801dfe4:	e779      	b.n	801deda <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801dfe6:	8a63      	ldrh	r3, [r4, #18]
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	f43f af59 	beq.w	801dea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801dfee:	e7df      	b.n	801dfb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801dff0:	2800      	cmp	r0, #0
 801dff2:	f47f af55 	bne.w	801dea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801dff6:	2e00      	cmp	r6, #0
 801dff8:	f43f af52 	beq.w	801dea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801dffc:	2301      	movs	r3, #1
 801dffe:	462a      	mov	r2, r5
 801e000:	e7db      	b.n	801dfba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801e002 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801e002:	b530      	push	{r4, r5, lr}
 801e004:	4605      	mov	r5, r0
 801e006:	b08b      	sub	sp, #44	; 0x2c
 801e008:	b191      	cbz	r1, 801e030 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801e00a:	2401      	movs	r4, #1
 801e00c:	e9cd 3100 	strd	r3, r1, [sp]
 801e010:	4613      	mov	r3, r2
 801e012:	4601      	mov	r1, r0
 801e014:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801e018:	a802      	add	r0, sp, #8
 801e01a:	f7ff fd0b 	bl	801da34 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e01e:	2100      	movs	r1, #0
 801e020:	a802      	add	r0, sp, #8
 801e022:	f7ff ff1f 	bl	801de64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e026:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e02a:	b163      	cbz	r3, 801e046 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801e02c:	3401      	adds	r4, #1
 801e02e:	e7f6      	b.n	801e01e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801e030:	2401      	movs	r4, #1
 801e032:	f002 fdd3 	bl	8020bdc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e036:	280a      	cmp	r0, #10
 801e038:	4628      	mov	r0, r5
 801e03a:	bf08      	it	eq
 801e03c:	3401      	addeq	r4, #1
 801e03e:	f002 fdcd 	bl	8020bdc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e042:	2800      	cmp	r0, #0
 801e044:	d1f7      	bne.n	801e036 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801e046:	b2a0      	uxth	r0, r4
 801e048:	b00b      	add	sp, #44	; 0x2c
 801e04a:	bd30      	pop	{r4, r5, pc}

0801e04c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801e04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e050:	b0e5      	sub	sp, #404	; 0x194
 801e052:	4689      	mov	r9, r1
 801e054:	461c      	mov	r4, r3
 801e056:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801e05a:	900a      	str	r0, [sp, #40]	; 0x28
 801e05c:	f1ba 0f00 	cmp.w	sl, #0
 801e060:	f000 80b4 	beq.w	801e1cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	2b00      	cmp	r3, #0
 801e068:	f000 80b0 	beq.w	801e1cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e06c:	7ba3      	ldrb	r3, [r4, #14]
 801e06e:	2b00      	cmp	r3, #0
 801e070:	f000 80ac 	beq.w	801e1cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e074:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801e078:	6810      	ldr	r0, [r2, #0]
 801e07a:	6851      	ldr	r1, [r2, #4]
 801e07c:	2500      	movs	r5, #0
 801e07e:	4643      	mov	r3, r8
 801e080:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801e084:	950f      	str	r5, [sp, #60]	; 0x3c
 801e086:	af19      	add	r7, sp, #100	; 0x64
 801e088:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801e08c:	79a2      	ldrb	r2, [r4, #6]
 801e08e:	c303      	stmia	r3!, {r0, r1}
 801e090:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801e094:	a90f      	add	r1, sp, #60	; 0x3c
 801e096:	4640      	mov	r0, r8
 801e098:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e09c:	f7ff fd40 	bl	801db20 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e0a0:	a90f      	add	r1, sp, #60	; 0x3c
 801e0a2:	79a2      	ldrb	r2, [r4, #6]
 801e0a4:	4608      	mov	r0, r1
 801e0a6:	f7ff fd3b 	bl	801db20 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e0aa:	4638      	mov	r0, r7
 801e0ac:	f002 f948 	bl	8020340 <_ZN8touchgfx12TextProviderC1Ev>
 801e0b0:	6820      	ldr	r0, [r4, #0]
 801e0b2:	6803      	ldr	r3, [r0, #0]
 801e0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e0b6:	4798      	blx	r3
 801e0b8:	4606      	mov	r6, r0
 801e0ba:	6820      	ldr	r0, [r4, #0]
 801e0bc:	6803      	ldr	r3, [r0, #0]
 801e0be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e0c0:	4798      	blx	r3
 801e0c2:	4633      	mov	r3, r6
 801e0c4:	9000      	str	r0, [sp, #0]
 801e0c6:	4651      	mov	r1, sl
 801e0c8:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801e0ca:	4638      	mov	r0, r7
 801e0cc:	f002 f98b 	bl	80203e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801e0d0:	7923      	ldrb	r3, [r4, #4]
 801e0d2:	6820      	ldr	r0, [r4, #0]
 801e0d4:	9308      	str	r3, [sp, #32]
 801e0d6:	6803      	ldr	r3, [r0, #0]
 801e0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e0da:	4798      	blx	r3
 801e0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0e0:	181e      	adds	r6, r3, r0
 801e0e2:	42ae      	cmp	r6, r5
 801e0e4:	dd06      	ble.n	801e0f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801e0e6:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801e0ea:	4282      	cmp	r2, r0
 801e0ec:	bfa4      	itt	ge
 801e0ee:	189d      	addge	r5, r3, r2
 801e0f0:	fb95 f5f6 	sdivge	r5, r5, r6
 801e0f4:	a832      	add	r0, sp, #200	; 0xc8
 801e0f6:	f002 f923 	bl	8020340 <_ZN8touchgfx12TextProviderC1Ev>
 801e0fa:	7c23      	ldrb	r3, [r4, #16]
 801e0fc:	b17b      	cbz	r3, 801e11e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801e0fe:	6820      	ldr	r0, [r4, #0]
 801e100:	6803      	ldr	r3, [r0, #0]
 801e102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e104:	4798      	blx	r3
 801e106:	4683      	mov	fp, r0
 801e108:	6820      	ldr	r0, [r4, #0]
 801e10a:	6803      	ldr	r3, [r0, #0]
 801e10c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e10e:	4798      	blx	r3
 801e110:	465b      	mov	r3, fp
 801e112:	9000      	str	r0, [sp, #0]
 801e114:	4651      	mov	r1, sl
 801e116:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801e118:	a832      	add	r0, sp, #200	; 0xc8
 801e11a:	f002 f964 	bl	80203e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801e11e:	7be1      	ldrb	r1, [r4, #15]
 801e120:	a811      	add	r0, sp, #68	; 0x44
 801e122:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801e126:	7963      	ldrb	r3, [r4, #5]
 801e128:	1a52      	subs	r2, r2, r1
 801e12a:	7c21      	ldrb	r1, [r4, #16]
 801e12c:	9101      	str	r1, [sp, #4]
 801e12e:	b292      	uxth	r2, r2
 801e130:	6821      	ldr	r1, [r4, #0]
 801e132:	9100      	str	r1, [sp, #0]
 801e134:	a932      	add	r1, sp, #200	; 0xc8
 801e136:	f7ff fc7d 	bl	801da34 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e13a:	7c23      	ldrb	r3, [r4, #16]
 801e13c:	b9bb      	cbnz	r3, 801e16e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801e13e:	fa1f fa86 	uxth.w	sl, r6
 801e142:	2d00      	cmp	r5, #0
 801e144:	dd45      	ble.n	801e1d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801e146:	4638      	mov	r0, r7
 801e148:	f002 fd48 	bl	8020bdc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e14c:	2800      	cmp	r0, #0
 801e14e:	d03d      	beq.n	801e1cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e150:	280a      	cmp	r0, #10
 801e152:	d1f6      	bne.n	801e142 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801e154:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e158:	3d01      	subs	r5, #1
 801e15a:	4453      	add	r3, sl
 801e15c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e160:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801e164:	eba3 030a 	sub.w	r3, r3, sl
 801e168:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e16c:	e7e9      	b.n	801e142 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801e16e:	0073      	lsls	r3, r6, #1
 801e170:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801e174:	fa1f fa86 	uxth.w	sl, r6
 801e178:	9309      	str	r3, [sp, #36]	; 0x24
 801e17a:	2d00      	cmp	r5, #0
 801e17c:	dd29      	ble.n	801e1d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801e17e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801e182:	a811      	add	r0, sp, #68	; 0x44
 801e184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e186:	428b      	cmp	r3, r1
 801e188:	bfd4      	ite	le
 801e18a:	2100      	movle	r1, #0
 801e18c:	2101      	movgt	r1, #1
 801e18e:	f7ff fe69 	bl	801de64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e192:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801e196:	3b01      	subs	r3, #1
 801e198:	b29b      	uxth	r3, r3
 801e19a:	455b      	cmp	r3, fp
 801e19c:	930b      	str	r3, [sp, #44]	; 0x2c
 801e19e:	d005      	beq.n	801e1ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801e1a0:	7961      	ldrb	r1, [r4, #5]
 801e1a2:	4638      	mov	r0, r7
 801e1a4:	f7e9 ffee 	bl	8008184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e1a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e1aa:	e7f4      	b.n	801e196 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801e1ac:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e1b0:	3d01      	subs	r5, #1
 801e1b2:	4453      	add	r3, sl
 801e1b4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e1b8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801e1bc:	eba3 030a 	sub.w	r3, r3, sl
 801e1c0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801e1c4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	d1d6      	bne.n	801e17a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801e1cc:	b065      	add	sp, #404	; 0x194
 801e1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1d2:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801e1d6:	ad4b      	add	r5, sp, #300	; 0x12c
 801e1d8:	f04f 0b00 	mov.w	fp, #0
 801e1dc:	7c23      	ldrb	r3, [r4, #16]
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	d067      	beq.n	801e2b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801e1e2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801e1e6:	a811      	add	r0, sp, #68	; 0x44
 801e1e8:	458a      	cmp	sl, r1
 801e1ea:	bfd4      	ite	le
 801e1ec:	2100      	movle	r1, #0
 801e1ee:	2101      	movgt	r1, #1
 801e1f0:	f7ff fe38 	bl	801de64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e1f4:	9b08      	ldr	r3, [sp, #32]
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	d056      	beq.n	801e2a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801e1fa:	7c23      	ldrb	r3, [r4, #16]
 801e1fc:	2264      	movs	r2, #100	; 0x64
 801e1fe:	4639      	mov	r1, r7
 801e200:	4628      	mov	r0, r5
 801e202:	9309      	str	r3, [sp, #36]	; 0x24
 801e204:	f00d fbae 	bl	802b964 <memcpy>
 801e208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e20a:	2b00      	cmp	r3, #0
 801e20c:	d059      	beq.n	801e2c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801e20e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801e212:	7922      	ldrb	r2, [r4, #4]
 801e214:	2a01      	cmp	r2, #1
 801e216:	d13d      	bne.n	801e294 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801e218:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801e21c:	1ac0      	subs	r0, r0, r3
 801e21e:	2302      	movs	r3, #2
 801e220:	fb90 f0f3 	sdiv	r0, r0, r3
 801e224:	b200      	sxth	r0, r0
 801e226:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801e22a:	4418      	add	r0, r3
 801e22c:	7c23      	ldrb	r3, [r4, #16]
 801e22e:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 801e232:	2b00      	cmp	r3, #0
 801e234:	d03a      	beq.n	801e2ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801e236:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801e23a:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801e23e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801e242:	9500      	str	r5, [sp, #0]
 801e244:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e246:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801e24a:	e9cd b703 	strd	fp, r7, [sp, #12]
 801e24e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801e252:	464a      	mov	r2, r9
 801e254:	2100      	movs	r1, #0
 801e256:	f7ff fc94 	bl	801db82 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801e25a:	2800      	cmp	r0, #0
 801e25c:	d1b6      	bne.n	801e1cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e25e:	b2b2      	uxth	r2, r6
 801e260:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e264:	4611      	mov	r1, r2
 801e266:	4413      	add	r3, r2
 801e268:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801e26c:	b21b      	sxth	r3, r3
 801e26e:	1a52      	subs	r2, r2, r1
 801e270:	7c21      	ldrb	r1, [r4, #16]
 801e272:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e276:	b212      	sxth	r2, r2
 801e278:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801e27c:	b109      	cbz	r1, 801e282 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801e27e:	42b2      	cmp	r2, r6
 801e280:	dba4      	blt.n	801e1cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e282:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801e286:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801e28a:	440a      	add	r2, r1
 801e28c:	b212      	sxth	r2, r2
 801e28e:	4293      	cmp	r3, r2
 801e290:	dda4      	ble.n	801e1dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801e292:	e79b      	b.n	801e1cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801e294:	2a02      	cmp	r2, #2
 801e296:	d105      	bne.n	801e2a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801e298:	7be2      	ldrb	r2, [r4, #15]
 801e29a:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801e29e:	1a80      	subs	r0, r0, r2
 801e2a0:	1ac0      	subs	r0, r0, r3
 801e2a2:	e7bf      	b.n	801e224 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801e2a4:	2000      	movs	r0, #0
 801e2a6:	e7be      	b.n	801e226 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801e2a8:	7be0      	ldrb	r0, [r4, #15]
 801e2aa:	e7bc      	b.n	801e226 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801e2ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e2b0:	e7c3      	b.n	801e23a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801e2b2:	9b08      	ldr	r3, [sp, #32]
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d0f7      	beq.n	801e2a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801e2b8:	2264      	movs	r2, #100	; 0x64
 801e2ba:	4639      	mov	r1, r7
 801e2bc:	4628      	mov	r0, r5
 801e2be:	f00d fb51 	bl	802b964 <memcpy>
 801e2c2:	2300      	movs	r3, #0
 801e2c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e2c8:	6821      	ldr	r1, [r4, #0]
 801e2ca:	4628      	mov	r0, r5
 801e2cc:	f7ff fbec 	bl	801daa8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801e2d0:	b203      	sxth	r3, r0
 801e2d2:	e79e      	b.n	801e212 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801e2d4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801e2d4:	2b02      	cmp	r3, #2
 801e2d6:	b510      	push	{r4, lr}
 801e2d8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e2dc:	d00b      	beq.n	801e2f6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801e2de:	2b03      	cmp	r3, #3
 801e2e0:	d00e      	beq.n	801e300 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801e2e2:	2b01      	cmp	r3, #1
 801e2e4:	d001      	beq.n	801e2ea <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801e2e6:	1860      	adds	r0, r4, r1
 801e2e8:	bd10      	pop	{r4, pc}
 801e2ea:	8880      	ldrh	r0, [r0, #4]
 801e2ec:	4420      	add	r0, r4
 801e2ee:	b200      	sxth	r0, r0
 801e2f0:	1a80      	subs	r0, r0, r2
 801e2f2:	3801      	subs	r0, #1
 801e2f4:	e7f8      	b.n	801e2e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801e2f6:	8880      	ldrh	r0, [r0, #4]
 801e2f8:	4420      	add	r0, r4
 801e2fa:	b200      	sxth	r0, r0
 801e2fc:	1a40      	subs	r0, r0, r1
 801e2fe:	e7f8      	b.n	801e2f2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801e300:	18a0      	adds	r0, r4, r2
 801e302:	e7f1      	b.n	801e2e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801e304 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801e304:	2b02      	cmp	r3, #2
 801e306:	b510      	push	{r4, lr}
 801e308:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801e30c:	d006      	beq.n	801e31c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801e30e:	2b03      	cmp	r3, #3
 801e310:	d00a      	beq.n	801e328 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801e312:	2b01      	cmp	r3, #1
 801e314:	bf14      	ite	ne
 801e316:	18a0      	addne	r0, r4, r2
 801e318:	1860      	addeq	r0, r4, r1
 801e31a:	bd10      	pop	{r4, pc}
 801e31c:	88c0      	ldrh	r0, [r0, #6]
 801e31e:	4420      	add	r0, r4
 801e320:	b200      	sxth	r0, r0
 801e322:	1a80      	subs	r0, r0, r2
 801e324:	3801      	subs	r0, #1
 801e326:	e7f8      	b.n	801e31a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801e328:	88c0      	ldrh	r0, [r0, #6]
 801e32a:	4420      	add	r0, r4
 801e32c:	b200      	sxth	r0, r0
 801e32e:	1a40      	subs	r0, r0, r1
 801e330:	e7f8      	b.n	801e324 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801e334 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801e334:	4b01      	ldr	r3, [pc, #4]	; (801e33c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801e336:	2200      	movs	r2, #0
 801e338:	601a      	str	r2, [r3, #0]
 801e33a:	4770      	bx	lr
 801e33c:	2400c8e4 	.word	0x2400c8e4

0801e340 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801e340:	4603      	mov	r3, r0
 801e342:	b1c8      	cbz	r0, 801e378 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801e344:	0c02      	lsrs	r2, r0, #16
 801e346:	0412      	lsls	r2, r2, #16
 801e348:	b9a2      	cbnz	r2, 801e374 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801e34a:	0403      	lsls	r3, r0, #16
 801e34c:	2010      	movs	r0, #16
 801e34e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801e352:	bf04      	itt	eq
 801e354:	021b      	lsleq	r3, r3, #8
 801e356:	3008      	addeq	r0, #8
 801e358:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801e35c:	bf04      	itt	eq
 801e35e:	011b      	lsleq	r3, r3, #4
 801e360:	3004      	addeq	r0, #4
 801e362:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801e366:	bf04      	itt	eq
 801e368:	009b      	lsleq	r3, r3, #2
 801e36a:	3002      	addeq	r0, #2
 801e36c:	2b00      	cmp	r3, #0
 801e36e:	db04      	blt.n	801e37a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801e370:	3001      	adds	r0, #1
 801e372:	4770      	bx	lr
 801e374:	2000      	movs	r0, #0
 801e376:	e7ea      	b.n	801e34e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801e378:	2020      	movs	r0, #32
 801e37a:	4770      	bx	lr

0801e37c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801e37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e380:	b087      	sub	sp, #28
 801e382:	4681      	mov	r9, r0
 801e384:	4698      	mov	r8, r3
 801e386:	4610      	mov	r0, r2
 801e388:	460d      	mov	r5, r1
 801e38a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801e38e:	b981      	cbnz	r1, 801e3b2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801e390:	b14b      	cbz	r3, 801e3a6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801e392:	460b      	mov	r3, r1
 801e394:	464a      	mov	r2, r9
 801e396:	4641      	mov	r1, r8
 801e398:	e9cd 4700 	strd	r4, r7, [sp]
 801e39c:	f7ff ffee 	bl	801e37c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801e3a0:	b007      	add	sp, #28
 801e3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3a6:	f04f 33ff 	mov.w	r3, #4294967295
 801e3aa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801e3ae:	603b      	str	r3, [r7, #0]
 801e3b0:	e7f6      	b.n	801e3a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801e3b2:	fa32 fa01 	lsrs.w	sl, r2, r1
 801e3b6:	d107      	bne.n	801e3c8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801e3b8:	fb09 f602 	mul.w	r6, r9, r2
 801e3bc:	fbb6 f0f4 	udiv	r0, r6, r4
 801e3c0:	fb04 6610 	mls	r6, r4, r0, r6
 801e3c4:	603e      	str	r6, [r7, #0]
 801e3c6:	e7eb      	b.n	801e3a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801e3c8:	2601      	movs	r6, #1
 801e3ca:	fa09 fb01 	lsl.w	fp, r9, r1
 801e3ce:	408e      	lsls	r6, r1
 801e3d0:	fbbb f3f4 	udiv	r3, fp, r4
 801e3d4:	3e01      	subs	r6, #1
 801e3d6:	9302      	str	r3, [sp, #8]
 801e3d8:	fb0a f303 	mul.w	r3, sl, r3
 801e3dc:	4016      	ands	r6, r2
 801e3de:	9303      	str	r3, [sp, #12]
 801e3e0:	4630      	mov	r0, r6
 801e3e2:	f7ff ffad 	bl	801e340 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801e3e6:	464a      	mov	r2, r9
 801e3e8:	460b      	mov	r3, r1
 801e3ea:	4601      	mov	r1, r0
 801e3ec:	4630      	mov	r0, r6
 801e3ee:	e9cd 4700 	strd	r4, r7, [sp]
 801e3f2:	f7ff ffc3 	bl	801e37c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801e3f6:	9b02      	ldr	r3, [sp, #8]
 801e3f8:	4606      	mov	r6, r0
 801e3fa:	eb05 0108 	add.w	r1, r5, r8
 801e3fe:	fb04 bb13 	mls	fp, r4, r3, fp
 801e402:	4658      	mov	r0, fp
 801e404:	f7ff ff9c 	bl	801e340 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801e408:	ab05      	add	r3, sp, #20
 801e40a:	465a      	mov	r2, fp
 801e40c:	e9cd 4300 	strd	r4, r3, [sp]
 801e410:	4603      	mov	r3, r0
 801e412:	4650      	mov	r0, sl
 801e414:	f7ff ffb2 	bl	801e37c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801e418:	6839      	ldr	r1, [r7, #0]
 801e41a:	9a05      	ldr	r2, [sp, #20]
 801e41c:	9b03      	ldr	r3, [sp, #12]
 801e41e:	4411      	add	r1, r2
 801e420:	fbb1 f2f4 	udiv	r2, r1, r4
 801e424:	18d3      	adds	r3, r2, r3
 801e426:	fb04 1412 	mls	r4, r4, r2, r1
 801e42a:	441e      	add	r6, r3
 801e42c:	603c      	str	r4, [r7, #0]
 801e42e:	4430      	add	r0, r6
 801e430:	e7b6      	b.n	801e3a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801e432 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801e432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e436:	b085      	sub	sp, #20
 801e438:	f1b0 0900 	subs.w	r9, r0, #0
 801e43c:	461d      	mov	r5, r3
 801e43e:	4617      	mov	r7, r2
 801e440:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e442:	bfbb      	ittet	lt
 801e444:	f1c9 0900 	rsblt	r9, r9, #0
 801e448:	f04f 36ff 	movlt.w	r6, #4294967295
 801e44c:	2601      	movge	r6, #1
 801e44e:	6823      	ldrlt	r3, [r4, #0]
 801e450:	bfbc      	itt	lt
 801e452:	425b      	neglt	r3, r3
 801e454:	6023      	strlt	r3, [r4, #0]
 801e456:	2a00      	cmp	r2, #0
 801e458:	da04      	bge.n	801e464 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801e45a:	6823      	ldr	r3, [r4, #0]
 801e45c:	4257      	negs	r7, r2
 801e45e:	4276      	negs	r6, r6
 801e460:	425b      	negs	r3, r3
 801e462:	6023      	str	r3, [r4, #0]
 801e464:	2d00      	cmp	r5, #0
 801e466:	4638      	mov	r0, r7
 801e468:	bfba      	itte	lt
 801e46a:	426d      	neglt	r5, r5
 801e46c:	f04f 38ff 	movlt.w	r8, #4294967295
 801e470:	f04f 0801 	movge.w	r8, #1
 801e474:	f7ff ff64 	bl	801e340 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801e478:	ab03      	add	r3, sp, #12
 801e47a:	463a      	mov	r2, r7
 801e47c:	e9cd 5300 	strd	r5, r3, [sp]
 801e480:	4603      	mov	r3, r0
 801e482:	4648      	mov	r0, r9
 801e484:	f7ff ff7a 	bl	801e37c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801e488:	6823      	ldr	r3, [r4, #0]
 801e48a:	9a03      	ldr	r2, [sp, #12]
 801e48c:	4546      	cmp	r6, r8
 801e48e:	441a      	add	r2, r3
 801e490:	fb92 f3f5 	sdiv	r3, r2, r5
 801e494:	4418      	add	r0, r3
 801e496:	fb05 2313 	mls	r3, r5, r3, r2
 801e49a:	bf18      	it	ne
 801e49c:	4240      	negne	r0, r0
 801e49e:	1c72      	adds	r2, r6, #1
 801e4a0:	6023      	str	r3, [r4, #0]
 801e4a2:	d105      	bne.n	801e4b0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	f1c3 0200 	rsb	r2, r3, #0
 801e4aa:	db0b      	blt.n	801e4c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801e4ac:	6022      	str	r2, [r4, #0]
 801e4ae:	e006      	b.n	801e4be <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801e4b0:	2e01      	cmp	r6, #1
 801e4b2:	d104      	bne.n	801e4be <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801e4b4:	2b00      	cmp	r3, #0
 801e4b6:	da02      	bge.n	801e4be <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801e4b8:	442b      	add	r3, r5
 801e4ba:	3801      	subs	r0, #1
 801e4bc:	6023      	str	r3, [r4, #0]
 801e4be:	b005      	add	sp, #20
 801e4c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e4c4:	3801      	subs	r0, #1
 801e4c6:	1b52      	subs	r2, r2, r5
 801e4c8:	e7f0      	b.n	801e4ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801e4cc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801e4cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801e4d0:	4c1c      	ldr	r4, [pc, #112]	; (801e544 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801e4d2:	4605      	mov	r5, r0
 801e4d4:	6807      	ldr	r7, [r0, #0]
 801e4d6:	69a3      	ldr	r3, [r4, #24]
 801e4d8:	b92b      	cbnz	r3, 801e4e6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801e4da:	6840      	ldr	r0, [r0, #4]
 801e4dc:	e9c5 7000 	strd	r7, r0, [r5]
 801e4e0:	b004      	add	sp, #16
 801e4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e4e6:	f04f 0802 	mov.w	r8, #2
 801e4ea:	68a2      	ldr	r2, [r4, #8]
 801e4ec:	ae04      	add	r6, sp, #16
 801e4ee:	6820      	ldr	r0, [r4, #0]
 801e4f0:	fb93 f1f8 	sdiv	r1, r3, r8
 801e4f4:	440a      	add	r2, r1
 801e4f6:	69e1      	ldr	r1, [r4, #28]
 801e4f8:	f846 2d04 	str.w	r2, [r6, #-4]!
 801e4fc:	463a      	mov	r2, r7
 801e4fe:	9600      	str	r6, [sp, #0]
 801e500:	f7ff ff97 	bl	801e432 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801e504:	69a3      	ldr	r3, [r4, #24]
 801e506:	4607      	mov	r7, r0
 801e508:	686a      	ldr	r2, [r5, #4]
 801e50a:	6a21      	ldr	r1, [r4, #32]
 801e50c:	9600      	str	r6, [sp, #0]
 801e50e:	6860      	ldr	r0, [r4, #4]
 801e510:	f7ff ff8f 	bl	801e432 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801e514:	69a3      	ldr	r3, [r4, #24]
 801e516:	6962      	ldr	r2, [r4, #20]
 801e518:	4407      	add	r7, r0
 801e51a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e51c:	9600      	str	r6, [sp, #0]
 801e51e:	68e0      	ldr	r0, [r4, #12]
 801e520:	fb93 f8f8 	sdiv	r8, r3, r8
 801e524:	4442      	add	r2, r8
 801e526:	9203      	str	r2, [sp, #12]
 801e528:	682a      	ldr	r2, [r5, #0]
 801e52a:	f7ff ff82 	bl	801e432 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801e52e:	4680      	mov	r8, r0
 801e530:	9600      	str	r6, [sp, #0]
 801e532:	69a3      	ldr	r3, [r4, #24]
 801e534:	686a      	ldr	r2, [r5, #4]
 801e536:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801e538:	6920      	ldr	r0, [r4, #16]
 801e53a:	f7ff ff7a 	bl	801e432 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801e53e:	4440      	add	r0, r8
 801e540:	e7cc      	b.n	801e4dc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801e542:	bf00      	nop
 801e544:	2400c8e8 	.word	0x2400c8e8

0801e548 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801e548:	4b07      	ldr	r3, [pc, #28]	; (801e568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801e54a:	781b      	ldrb	r3, [r3, #0]
 801e54c:	2b01      	cmp	r3, #1
 801e54e:	d109      	bne.n	801e564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801e550:	f9b1 3000 	ldrsh.w	r3, [r1]
 801e554:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e558:	8003      	strh	r3, [r0, #0]
 801e55a:	4b04      	ldr	r3, [pc, #16]	; (801e56c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801e55c:	881b      	ldrh	r3, [r3, #0]
 801e55e:	3b01      	subs	r3, #1
 801e560:	1a9b      	subs	r3, r3, r2
 801e562:	800b      	strh	r3, [r1, #0]
 801e564:	4770      	bx	lr
 801e566:	bf00      	nop
 801e568:	2400c8b4 	.word	0x2400c8b4
 801e56c:	2400c8b8 	.word	0x2400c8b8

0801e570 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801e570:	4b07      	ldr	r3, [pc, #28]	; (801e590 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801e572:	b510      	push	{r4, lr}
 801e574:	781b      	ldrb	r3, [r3, #0]
 801e576:	2b01      	cmp	r3, #1
 801e578:	d108      	bne.n	801e58c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801e57a:	4b06      	ldr	r3, [pc, #24]	; (801e594 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801e57c:	880c      	ldrh	r4, [r1, #0]
 801e57e:	881b      	ldrh	r3, [r3, #0]
 801e580:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e584:	3b01      	subs	r3, #1
 801e586:	1b1b      	subs	r3, r3, r4
 801e588:	8003      	strh	r3, [r0, #0]
 801e58a:	800a      	strh	r2, [r1, #0]
 801e58c:	bd10      	pop	{r4, pc}
 801e58e:	bf00      	nop
 801e590:	2400c8b4 	.word	0x2400c8b4
 801e594:	2400c8b8 	.word	0x2400c8b8

0801e598 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801e598:	4b0a      	ldr	r3, [pc, #40]	; (801e5c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801e59a:	b510      	push	{r4, lr}
 801e59c:	781b      	ldrb	r3, [r3, #0]
 801e59e:	2b01      	cmp	r3, #1
 801e5a0:	d10e      	bne.n	801e5c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801e5a2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801e5a6:	8843      	ldrh	r3, [r0, #2]
 801e5a8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e5ac:	18ca      	adds	r2, r1, r3
 801e5ae:	4b06      	ldr	r3, [pc, #24]	; (801e5c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801e5b0:	8044      	strh	r4, [r0, #2]
 801e5b2:	881b      	ldrh	r3, [r3, #0]
 801e5b4:	1a9b      	subs	r3, r3, r2
 801e5b6:	8003      	strh	r3, [r0, #0]
 801e5b8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e5bc:	8081      	strh	r1, [r0, #4]
 801e5be:	80c3      	strh	r3, [r0, #6]
 801e5c0:	bd10      	pop	{r4, pc}
 801e5c2:	bf00      	nop
 801e5c4:	2400c8b4 	.word	0x2400c8b4
 801e5c8:	2400c8b8 	.word	0x2400c8b8

0801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801e5cc:	4b08      	ldr	r3, [pc, #32]	; (801e5f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801e5ce:	781b      	ldrb	r3, [r3, #0]
 801e5d0:	2b01      	cmp	r3, #1
 801e5d2:	d10c      	bne.n	801e5ee <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801e5d4:	8803      	ldrh	r3, [r0, #0]
 801e5d6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801e5da:	8842      	ldrh	r2, [r0, #2]
 801e5dc:	8002      	strh	r2, [r0, #0]
 801e5de:	185a      	adds	r2, r3, r1
 801e5e0:	4b04      	ldr	r3, [pc, #16]	; (801e5f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801e5e2:	881b      	ldrh	r3, [r3, #0]
 801e5e4:	1a9b      	subs	r3, r3, r2
 801e5e6:	8043      	strh	r3, [r0, #2]
 801e5e8:	88c3      	ldrh	r3, [r0, #6]
 801e5ea:	80c1      	strh	r1, [r0, #6]
 801e5ec:	8083      	strh	r3, [r0, #4]
 801e5ee:	4770      	bx	lr
 801e5f0:	2400c8b4 	.word	0x2400c8b4
 801e5f4:	2400c8b8 	.word	0x2400c8b8

0801e5f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801e5f8:	4b07      	ldr	r3, [pc, #28]	; (801e618 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801e5fa:	b510      	push	{r4, lr}
 801e5fc:	781b      	ldrb	r3, [r3, #0]
 801e5fe:	2b01      	cmp	r3, #1
 801e600:	d108      	bne.n	801e614 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801e602:	f9b1 3000 	ldrsh.w	r3, [r1]
 801e606:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e60a:	8003      	strh	r3, [r0, #0]
 801e60c:	8893      	ldrh	r3, [r2, #4]
 801e60e:	3b01      	subs	r3, #1
 801e610:	1b1b      	subs	r3, r3, r4
 801e612:	800b      	strh	r3, [r1, #0]
 801e614:	bd10      	pop	{r4, pc}
 801e616:	bf00      	nop
 801e618:	2400c8b4 	.word	0x2400c8b4

0801e61c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801e61c:	4b0b      	ldr	r3, [pc, #44]	; (801e64c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801e61e:	781b      	ldrb	r3, [r3, #0]
 801e620:	2b01      	cmp	r3, #1
 801e622:	d111      	bne.n	801e648 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801e624:	680b      	ldr	r3, [r1, #0]
 801e626:	ed90 7a00 	vldr	s14, [r0]
 801e62a:	6003      	str	r3, [r0, #0]
 801e62c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801e630:	eddf 6a07 	vldr	s13, [pc, #28]	; 801e650 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801e634:	ee07 3a90 	vmov	s15, r3
 801e638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e63c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e640:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e644:	edc1 7a00 	vstr	s15, [r1]
 801e648:	4770      	bx	lr
 801e64a:	bf00      	nop
 801e64c:	2400c8b4 	.word	0x2400c8b4
 801e650:	38d1b717 	.word	0x38d1b717

0801e654 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801e654:	4b0a      	ldr	r3, [pc, #40]	; (801e680 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801e656:	460a      	mov	r2, r1
 801e658:	b510      	push	{r4, lr}
 801e65a:	781b      	ldrb	r3, [r3, #0]
 801e65c:	2b01      	cmp	r3, #1
 801e65e:	d10d      	bne.n	801e67c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801e660:	8881      	ldrh	r1, [r0, #4]
 801e662:	8803      	ldrh	r3, [r0, #0]
 801e664:	440b      	add	r3, r1
 801e666:	4601      	mov	r1, r0
 801e668:	3b01      	subs	r3, #1
 801e66a:	f821 3b02 	strh.w	r3, [r1], #2
 801e66e:	f7ff ffc3 	bl	801e5f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801e672:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e676:	88c2      	ldrh	r2, [r0, #6]
 801e678:	80c3      	strh	r3, [r0, #6]
 801e67a:	8082      	strh	r2, [r0, #4]
 801e67c:	bd10      	pop	{r4, pc}
 801e67e:	bf00      	nop
 801e680:	2400c8b4 	.word	0x2400c8b4

0801e684 <_ZN8touchgfx11Application13requestRedrawEv>:
 801e684:	4b06      	ldr	r3, [pc, #24]	; (801e6a0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801e686:	2100      	movs	r1, #0
 801e688:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e68c:	4b05      	ldr	r3, [pc, #20]	; (801e6a4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801e68e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801e692:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e696:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801e69a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801e69e:	4770      	bx	lr
 801e6a0:	2400c8b0 	.word	0x2400c8b0
 801e6a4:	2400c8b2 	.word	0x2400c8b2

0801e6a8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801e6a8:	4b03      	ldr	r3, [pc, #12]	; (801e6b8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801e6aa:	6818      	ldr	r0, [r3, #0]
 801e6ac:	b110      	cbz	r0, 801e6b4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801e6ae:	6803      	ldr	r3, [r0, #0]
 801e6b0:	699b      	ldr	r3, [r3, #24]
 801e6b2:	4718      	bx	r3
 801e6b4:	4770      	bx	lr
 801e6b6:	bf00      	nop
 801e6b8:	2400c918 	.word	0x2400c918

0801e6bc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801e6bc:	4770      	bx	lr
	...

0801e6c0 <_ZN8touchgfx11Application4drawEv>:
 801e6c0:	4b09      	ldr	r3, [pc, #36]	; (801e6e8 <_ZN8touchgfx11Application4drawEv+0x28>)
 801e6c2:	b507      	push	{r0, r1, r2, lr}
 801e6c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e6c8:	2100      	movs	r1, #0
 801e6ca:	4b08      	ldr	r3, [pc, #32]	; (801e6ec <_ZN8touchgfx11Application4drawEv+0x2c>)
 801e6cc:	9100      	str	r1, [sp, #0]
 801e6ce:	4669      	mov	r1, sp
 801e6d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e6d4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e6d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e6dc:	6803      	ldr	r3, [r0, #0]
 801e6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e6e0:	4798      	blx	r3
 801e6e2:	b003      	add	sp, #12
 801e6e4:	f85d fb04 	ldr.w	pc, [sp], #4
 801e6e8:	2400c8b0 	.word	0x2400c8b0
 801e6ec:	2400c8b2 	.word	0x2400c8b2

0801e6f0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801e6f0:	4b03      	ldr	r3, [pc, #12]	; (801e700 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801e6f2:	6818      	ldr	r0, [r3, #0]
 801e6f4:	b110      	cbz	r0, 801e6fc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801e6f6:	6803      	ldr	r3, [r0, #0]
 801e6f8:	69db      	ldr	r3, [r3, #28]
 801e6fa:	4718      	bx	r3
 801e6fc:	4770      	bx	lr
 801e6fe:	bf00      	nop
 801e700:	2400c918 	.word	0x2400c918

0801e704 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801e704:	4b03      	ldr	r3, [pc, #12]	; (801e714 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801e706:	6818      	ldr	r0, [r3, #0]
 801e708:	b110      	cbz	r0, 801e710 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801e70a:	6803      	ldr	r3, [r0, #0]
 801e70c:	6a1b      	ldr	r3, [r3, #32]
 801e70e:	4718      	bx	r3
 801e710:	4770      	bx	lr
 801e712:	bf00      	nop
 801e714:	2400c918 	.word	0x2400c918

0801e718 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801e718:	4b03      	ldr	r3, [pc, #12]	; (801e728 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801e71a:	6818      	ldr	r0, [r3, #0]
 801e71c:	b110      	cbz	r0, 801e724 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801e71e:	6803      	ldr	r3, [r0, #0]
 801e720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e722:	4718      	bx	r3
 801e724:	4770      	bx	lr
 801e726:	bf00      	nop
 801e728:	2400c918 	.word	0x2400c918

0801e72c <_ZN8touchgfx11Application15handleTickEventEv>:
 801e72c:	b570      	push	{r4, r5, r6, lr}
 801e72e:	4d38      	ldr	r5, [pc, #224]	; (801e810 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801e730:	4604      	mov	r4, r0
 801e732:	6828      	ldr	r0, [r5, #0]
 801e734:	b140      	cbz	r0, 801e748 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801e736:	7a03      	ldrb	r3, [r0, #8]
 801e738:	b933      	cbnz	r3, 801e748 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801e73a:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801e73e:	6803      	ldr	r3, [r0, #0]
 801e740:	689b      	ldr	r3, [r3, #8]
 801e742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e746:	4718      	bx	r3
 801e748:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801e74c:	b97b      	cbnz	r3, 801e76e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801e74e:	b170      	cbz	r0, 801e76e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801e750:	7a03      	ldrb	r3, [r0, #8]
 801e752:	b163      	cbz	r3, 801e76e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801e754:	4b2f      	ldr	r3, [pc, #188]	; (801e814 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801e756:	6818      	ldr	r0, [r3, #0]
 801e758:	b110      	cbz	r0, 801e760 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801e75a:	6803      	ldr	r3, [r0, #0]
 801e75c:	691b      	ldr	r3, [r3, #16]
 801e75e:	4798      	blx	r3
 801e760:	6828      	ldr	r0, [r5, #0]
 801e762:	6803      	ldr	r3, [r0, #0]
 801e764:	68db      	ldr	r3, [r3, #12]
 801e766:	4798      	blx	r3
 801e768:	2301      	movs	r3, #1
 801e76a:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801e76e:	2500      	movs	r5, #0
 801e770:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801e774:	42a8      	cmp	r0, r5
 801e776:	dd0c      	ble.n	801e792 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801e778:	1963      	adds	r3, r4, r5
 801e77a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801e77e:	b132      	cbz	r2, 801e78e <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801e780:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801e784:	4413      	add	r3, r2
 801e786:	6858      	ldr	r0, [r3, #4]
 801e788:	6803      	ldr	r3, [r0, #0]
 801e78a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e78c:	4798      	blx	r3
 801e78e:	3501      	adds	r5, #1
 801e790:	e7ee      	b.n	801e770 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801e792:	2300      	movs	r3, #0
 801e794:	461a      	mov	r2, r3
 801e796:	4298      	cmp	r0, r3
 801e798:	d10f      	bne.n	801e7ba <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801e79a:	1d25      	adds	r5, r4, #4
 801e79c:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801e7a0:	4291      	cmp	r1, r2
 801e7a2:	dd2d      	ble.n	801e800 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801e7a4:	1e48      	subs	r0, r1, #1
 801e7a6:	b280      	uxth	r0, r0
 801e7a8:	4288      	cmp	r0, r1
 801e7aa:	d31a      	bcc.n	801e7e2 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801e7ac:	4b1a      	ldr	r3, [pc, #104]	; (801e818 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801e7ae:	f240 11a9 	movw	r1, #425	; 0x1a9
 801e7b2:	4a1a      	ldr	r2, [pc, #104]	; (801e81c <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801e7b4:	481a      	ldr	r0, [pc, #104]	; (801e820 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801e7b6:	f00d f857 	bl	802b868 <__assert_func>
 801e7ba:	18e1      	adds	r1, r4, r3
 801e7bc:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801e7c0:	b16d      	cbz	r5, 801e7de <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801e7c2:	429a      	cmp	r2, r3
 801e7c4:	d00a      	beq.n	801e7dc <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801e7c6:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801e7ca:	4431      	add	r1, r6
 801e7cc:	684e      	ldr	r6, [r1, #4]
 801e7ce:	b291      	uxth	r1, r2
 801e7d0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801e7d4:	604e      	str	r6, [r1, #4]
 801e7d6:	18a1      	adds	r1, r4, r2
 801e7d8:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801e7dc:	3201      	adds	r2, #1
 801e7de:	3301      	adds	r3, #1
 801e7e0:	e7d9      	b.n	801e796 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801e7e2:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801e7e6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801e7ea:	3304      	adds	r3, #4
 801e7ec:	428b      	cmp	r3, r1
 801e7ee:	d004      	beq.n	801e7fa <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801e7f0:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801e7f4:	f843 6c04 	str.w	r6, [r3, #-4]
 801e7f8:	e7f8      	b.n	801e7ec <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801e7fa:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801e7fe:	e7cd      	b.n	801e79c <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801e800:	4b04      	ldr	r3, [pc, #16]	; (801e814 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801e802:	6818      	ldr	r0, [r3, #0]
 801e804:	b110      	cbz	r0, 801e80c <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801e806:	6803      	ldr	r3, [r0, #0]
 801e808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e80a:	e79a      	b.n	801e742 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801e80c:	bd70      	pop	{r4, r5, r6, pc}
 801e80e:	bf00      	nop
 801e810:	2400c91c 	.word	0x2400c91c
 801e814:	2400c918 	.word	0x2400c918
 801e818:	0803034c 	.word	0x0803034c
 801e81c:	080305a5 	.word	0x080305a5
 801e820:	0803035a 	.word	0x0803035a

0801e824 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801e824:	b570      	push	{r4, r5, r6, lr}
 801e826:	4606      	mov	r6, r0
 801e828:	460c      	mov	r4, r1
 801e82a:	b929      	cbnz	r1, 801e838 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801e82c:	4b0c      	ldr	r3, [pc, #48]	; (801e860 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801e82e:	2167      	movs	r1, #103	; 0x67
 801e830:	4a0c      	ldr	r2, [pc, #48]	; (801e864 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801e832:	480d      	ldr	r0, [pc, #52]	; (801e868 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801e834:	f00d f818 	bl	802b868 <__assert_func>
 801e838:	2300      	movs	r3, #0
 801e83a:	4d0c      	ldr	r5, [pc, #48]	; (801e86c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801e83c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801e840:	6828      	ldr	r0, [r5, #0]
 801e842:	b110      	cbz	r0, 801e84a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801e844:	6803      	ldr	r3, [r0, #0]
 801e846:	695b      	ldr	r3, [r3, #20]
 801e848:	4798      	blx	r3
 801e84a:	602c      	str	r4, [r5, #0]
 801e84c:	4620      	mov	r0, r4
 801e84e:	6823      	ldr	r3, [r4, #0]
 801e850:	68db      	ldr	r3, [r3, #12]
 801e852:	4798      	blx	r3
 801e854:	6833      	ldr	r3, [r6, #0]
 801e856:	4630      	mov	r0, r6
 801e858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e85a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e85e:	4718      	bx	r3
 801e860:	08030318 	.word	0x08030318
 801e864:	08030420 	.word	0x08030420
 801e868:	08030322 	.word	0x08030322
 801e86c:	2400c918 	.word	0x2400c918

0801e870 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801e870:	b570      	push	{r4, r5, r6, lr}
 801e872:	f9b1 4000 	ldrsh.w	r4, [r1]
 801e876:	f9b0 5000 	ldrsh.w	r5, [r0]
 801e87a:	42ac      	cmp	r4, r5
 801e87c:	db18      	blt.n	801e8b0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e87e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801e882:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e886:	429a      	cmp	r2, r3
 801e888:	db12      	blt.n	801e8b0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e88a:	8886      	ldrh	r6, [r0, #4]
 801e88c:	4435      	add	r5, r6
 801e88e:	888e      	ldrh	r6, [r1, #4]
 801e890:	4434      	add	r4, r6
 801e892:	b22d      	sxth	r5, r5
 801e894:	b224      	sxth	r4, r4
 801e896:	42a5      	cmp	r5, r4
 801e898:	db0a      	blt.n	801e8b0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e89a:	88c0      	ldrh	r0, [r0, #6]
 801e89c:	4418      	add	r0, r3
 801e89e:	88cb      	ldrh	r3, [r1, #6]
 801e8a0:	441a      	add	r2, r3
 801e8a2:	b200      	sxth	r0, r0
 801e8a4:	b212      	sxth	r2, r2
 801e8a6:	4290      	cmp	r0, r2
 801e8a8:	bfb4      	ite	lt
 801e8aa:	2000      	movlt	r0, #0
 801e8ac:	2001      	movge	r0, #1
 801e8ae:	bd70      	pop	{r4, r5, r6, pc}
 801e8b0:	2000      	movs	r0, #0
 801e8b2:	e7fc      	b.n	801e8ae <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801e8b4 <_ZN8touchgfx11Application11getInstanceEv>:
 801e8b4:	4b01      	ldr	r3, [pc, #4]	; (801e8bc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801e8b6:	6818      	ldr	r0, [r3, #0]
 801e8b8:	4770      	bx	lr
 801e8ba:	bf00      	nop
 801e8bc:	2400c928 	.word	0x2400c928

0801e8c0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801e8c0:	b570      	push	{r4, r5, r6, lr}
 801e8c2:	2200      	movs	r2, #0
 801e8c4:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801e8c8:	1d04      	adds	r4, r0, #4
 801e8ca:	b295      	uxth	r5, r2
 801e8cc:	42ab      	cmp	r3, r5
 801e8ce:	d90e      	bls.n	801e8ee <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801e8d0:	f854 6b04 	ldr.w	r6, [r4], #4
 801e8d4:	4615      	mov	r5, r2
 801e8d6:	3201      	adds	r2, #1
 801e8d8:	428e      	cmp	r6, r1
 801e8da:	d1f6      	bne.n	801e8ca <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801e8dc:	4428      	add	r0, r5
 801e8de:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801e8e2:	2bff      	cmp	r3, #255	; 0xff
 801e8e4:	d002      	beq.n	801e8ec <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801e8e6:	3301      	adds	r3, #1
 801e8e8:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801e8ec:	bd70      	pop	{r4, r5, r6, pc}
 801e8ee:	2b20      	cmp	r3, #32
 801e8f0:	d106      	bne.n	801e900 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801e8f2:	4b09      	ldr	r3, [pc, #36]	; (801e918 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801e8f4:	f240 215f 	movw	r1, #607	; 0x25f
 801e8f8:	4a08      	ldr	r2, [pc, #32]	; (801e91c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801e8fa:	4809      	ldr	r0, [pc, #36]	; (801e920 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801e8fc:	f00c ffb4 	bl	802b868 <__assert_func>
 801e900:	18c2      	adds	r2, r0, r3
 801e902:	2401      	movs	r4, #1
 801e904:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801e908:	191a      	adds	r2, r3, r4
 801e90a:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801e90e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801e912:	6041      	str	r1, [r0, #4]
 801e914:	e7ea      	b.n	801e8ec <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801e916:	bf00      	nop
 801e918:	08030383 	.word	0x08030383
 801e91c:	08030464 	.word	0x08030464
 801e920:	08030322 	.word	0x08030322

0801e924 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801e924:	b570      	push	{r4, r5, r6, lr}
 801e926:	2300      	movs	r3, #0
 801e928:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801e92c:	1d04      	adds	r4, r0, #4
 801e92e:	b29a      	uxth	r2, r3
 801e930:	4296      	cmp	r6, r2
 801e932:	d90a      	bls.n	801e94a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801e934:	f854 2b04 	ldr.w	r2, [r4], #4
 801e938:	428a      	cmp	r2, r1
 801e93a:	d107      	bne.n	801e94c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801e93c:	18c5      	adds	r5, r0, r3
 801e93e:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801e942:	b11a      	cbz	r2, 801e94c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801e944:	3a01      	subs	r2, #1
 801e946:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801e94a:	bd70      	pop	{r4, r5, r6, pc}
 801e94c:	3301      	adds	r3, #1
 801e94e:	e7ee      	b.n	801e92e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801e950 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801e950:	2300      	movs	r3, #0
 801e952:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801e956:	30a8      	adds	r0, #168	; 0xa8
 801e958:	f820 3c24 	strh.w	r3, [r0, #-36]
 801e95c:	f802 3b01 	strb.w	r3, [r2], #1
 801e960:	4282      	cmp	r2, r0
 801e962:	d1fb      	bne.n	801e95c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801e964:	4770      	bx	lr

0801e966 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801e966:	4603      	mov	r3, r0
 801e968:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801e96c:	2200      	movs	r2, #0
 801e96e:	801a      	strh	r2, [r3, #0]
 801e970:	3308      	adds	r3, #8
 801e972:	f823 2c06 	strh.w	r2, [r3, #-6]
 801e976:	f823 2c04 	strh.w	r2, [r3, #-4]
 801e97a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801e97e:	428b      	cmp	r3, r1
 801e980:	d1f5      	bne.n	801e96e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801e982:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801e986:	4770      	bx	lr

0801e988 <_ZN8touchgfx11ApplicationC1Ev>:
 801e988:	b570      	push	{r4, r5, r6, lr}
 801e98a:	4b1a      	ldr	r3, [pc, #104]	; (801e9f4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801e98c:	2500      	movs	r5, #0
 801e98e:	4604      	mov	r4, r0
 801e990:	30a8      	adds	r0, #168	; 0xa8
 801e992:	f840 3ca8 	str.w	r3, [r0, #-168]
 801e996:	f820 5c24 	strh.w	r5, [r0, #-36]
 801e99a:	f7ff ffe4 	bl	801e966 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e99e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801e9a2:	f7ff ffe0 	bl	801e966 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e9a6:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801e9aa:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801e9ae:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801e9b2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801e9b6:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801e9ba:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801e9be:	490e      	ldr	r1, [pc, #56]	; (801e9f8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801e9c0:	480e      	ldr	r0, [pc, #56]	; (801e9fc <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801e9c2:	f00b f857 	bl	8029a74 <CRC_Lock>
 801e9c6:	4e0e      	ldr	r6, [pc, #56]	; (801ea00 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801e9c8:	4b0e      	ldr	r3, [pc, #56]	; (801ea04 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801e9ca:	b158      	cbz	r0, 801e9e4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801e9cc:	801d      	strh	r5, [r3, #0]
 801e9ce:	2300      	movs	r3, #0
 801e9d0:	4a0d      	ldr	r2, [pc, #52]	; (801ea08 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801e9d2:	4620      	mov	r0, r4
 801e9d4:	6013      	str	r3, [r2, #0]
 801e9d6:	4a0d      	ldr	r2, [pc, #52]	; (801ea0c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801e9d8:	6033      	str	r3, [r6, #0]
 801e9da:	6013      	str	r3, [r2, #0]
 801e9dc:	f7ff ffb8 	bl	801e950 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801e9e0:	4620      	mov	r0, r4
 801e9e2:	bd70      	pop	{r4, r5, r6, pc}
 801e9e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e9e8:	2002      	movs	r0, #2
 801e9ea:	801a      	strh	r2, [r3, #0]
 801e9ec:	6030      	str	r0, [r6, #0]
 801e9ee:	f001 facb 	bl	801ff88 <_ZN8touchgfx6Screen4drawEv>
 801e9f2:	e7ec      	b.n	801e9ce <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801e9f4:	080303e4 	.word	0x080303e4
 801e9f8:	b5e8b5cd 	.word	0xb5e8b5cd
 801e9fc:	f407a5c2 	.word	0xf407a5c2
 801ea00:	2400c918 	.word	0x2400c918
 801ea04:	24000050 	.word	0x24000050
 801ea08:	2400c928 	.word	0x2400c928
 801ea0c:	2400c91c 	.word	0x2400c91c

0801ea10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ea10:	b510      	push	{r4, lr}
 801ea12:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801ea16:	428b      	cmp	r3, r1
 801ea18:	d806      	bhi.n	801ea28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801ea1a:	4b0b      	ldr	r3, [pc, #44]	; (801ea48 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801ea1c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801ea20:	4a0a      	ldr	r2, [pc, #40]	; (801ea4c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801ea22:	480b      	ldr	r0, [pc, #44]	; (801ea50 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801ea24:	f00c ff20 	bl	802b868 <__assert_func>
 801ea28:	3b01      	subs	r3, #1
 801ea2a:	b29b      	uxth	r3, r3
 801ea2c:	428b      	cmp	r3, r1
 801ea2e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801ea32:	d908      	bls.n	801ea46 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801ea34:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801ea38:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801ea3c:	681a      	ldr	r2, [r3, #0]
 801ea3e:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801ea42:	685a      	ldr	r2, [r3, #4]
 801ea44:	6062      	str	r2, [r4, #4]
 801ea46:	bd10      	pop	{r4, pc}
 801ea48:	0803034c 	.word	0x0803034c
 801ea4c:	080304a9 	.word	0x080304a9
 801ea50:	0803035a 	.word	0x0803035a

0801ea54 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801ea54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ea56:	466b      	mov	r3, sp
 801ea58:	4604      	mov	r4, r0
 801ea5a:	e883 0006 	stmia.w	r3, {r1, r2}
 801ea5e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801ea62:	2a07      	cmp	r2, #7
 801ea64:	d906      	bls.n	801ea74 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801ea66:	4b09      	ldr	r3, [pc, #36]	; (801ea8c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801ea68:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801ea6c:	4a08      	ldr	r2, [pc, #32]	; (801ea90 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801ea6e:	4809      	ldr	r0, [pc, #36]	; (801ea94 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801ea70:	f00c fefa 	bl	802b868 <__assert_func>
 801ea74:	1c51      	adds	r1, r2, #1
 801ea76:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801ea7a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801ea7e:	cb03      	ldmia	r3!, {r0, r1}
 801ea80:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801ea84:	6069      	str	r1, [r5, #4]
 801ea86:	b003      	add	sp, #12
 801ea88:	bd30      	pop	{r4, r5, pc}
 801ea8a:	bf00      	nop
 801ea8c:	080303ab 	.word	0x080303ab
 801ea90:	0803053f 	.word	0x0803053f
 801ea94:	0803035a 	.word	0x0803035a

0801ea98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801ea98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea9c:	b08d      	sub	sp, #52	; 0x34
 801ea9e:	4683      	mov	fp, r0
 801eaa0:	ac08      	add	r4, sp, #32
 801eaa2:	4620      	mov	r0, r4
 801eaa4:	e884 0006 	stmia.w	r4, {r1, r2}
 801eaa8:	f7f9 fc2f 	bl	801830a <_ZNK8touchgfx4Rect7isEmptyEv>
 801eaac:	2800      	cmp	r0, #0
 801eaae:	d16a      	bne.n	801eb86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801eab0:	9402      	str	r4, [sp, #8]
 801eab2:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801eab6:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801eaba:	2400      	movs	r4, #0
 801eabc:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801eac0:	9301      	str	r3, [sp, #4]
 801eac2:	36a0      	adds	r6, #160	; 0xa0
 801eac4:	42a5      	cmp	r5, r4
 801eac6:	d00d      	beq.n	801eae4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801eac8:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801eacc:	9802      	ldr	r0, [sp, #8]
 801eace:	f7ff fecf 	bl	801e870 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ead2:	b128      	cbz	r0, 801eae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801ead4:	1e69      	subs	r1, r5, #1
 801ead6:	9801      	ldr	r0, [sp, #4]
 801ead8:	1b09      	subs	r1, r1, r4
 801eada:	b289      	uxth	r1, r1
 801eadc:	f7ff ff98 	bl	801ea10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801eae0:	3401      	adds	r4, #1
 801eae2:	e7ef      	b.n	801eac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801eae4:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801eae8:	1e7b      	subs	r3, r7, #1
 801eaea:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801eaee:	9703      	str	r7, [sp, #12]
 801eaf0:	9300      	str	r3, [sp, #0]
 801eaf2:	2400      	movs	r4, #0
 801eaf4:	4655      	mov	r5, sl
 801eaf6:	9704      	str	r7, [sp, #16]
 801eaf8:	4626      	mov	r6, r4
 801eafa:	9b04      	ldr	r3, [sp, #16]
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	d078      	beq.n	801ebf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801eb00:	9902      	ldr	r1, [sp, #8]
 801eb02:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801eb06:	f7fb fa0d 	bl	8019f24 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801eb0a:	b360      	cbz	r0, 801eb66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801eb0c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801eb10:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801eb14:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801eb18:	45e6      	cmp	lr, ip
 801eb1a:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801eb1e:	db35      	blt.n	801eb8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801eb20:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801eb24:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801eb28:	4472      	add	r2, lr
 801eb2a:	4463      	add	r3, ip
 801eb2c:	b212      	sxth	r2, r2
 801eb2e:	b21b      	sxth	r3, r3
 801eb30:	429a      	cmp	r2, r3
 801eb32:	dc2b      	bgt.n	801eb8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801eb34:	fa1f f288 	uxth.w	r2, r8
 801eb38:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801eb3c:	45c1      	cmp	r9, r8
 801eb3e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801eb42:	4413      	add	r3, r2
 801eb44:	fa1f fc89 	uxth.w	ip, r9
 801eb48:	b29b      	uxth	r3, r3
 801eb4a:	fa0f fe83 	sxth.w	lr, r3
 801eb4e:	db0f      	blt.n	801eb70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801eb50:	eba3 030c 	sub.w	r3, r3, ip
 801eb54:	1ac9      	subs	r1, r1, r3
 801eb56:	b209      	sxth	r1, r1
 801eb58:	2900      	cmp	r1, #0
 801eb5a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801eb5e:	dd12      	ble.n	801eb86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801eb60:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801eb64:	4604      	mov	r4, r0
 801eb66:	9b04      	ldr	r3, [sp, #16]
 801eb68:	3d08      	subs	r5, #8
 801eb6a:	3b01      	subs	r3, #1
 801eb6c:	9304      	str	r3, [sp, #16]
 801eb6e:	e7c4      	b.n	801eafa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801eb70:	4461      	add	r1, ip
 801eb72:	b209      	sxth	r1, r1
 801eb74:	4571      	cmp	r1, lr
 801eb76:	dc3a      	bgt.n	801ebee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801eb78:	eba2 020c 	sub.w	r2, r2, ip
 801eb7c:	b212      	sxth	r2, r2
 801eb7e:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801eb82:	2a00      	cmp	r2, #0
 801eb84:	dcee      	bgt.n	801eb64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801eb86:	b00d      	add	sp, #52	; 0x34
 801eb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb8c:	45c1      	cmp	r9, r8
 801eb8e:	db2e      	blt.n	801ebee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801eb90:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801eb94:	4499      	add	r9, r3
 801eb96:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801eb9a:	4498      	add	r8, r3
 801eb9c:	fa0f f989 	sxth.w	r9, r9
 801eba0:	fa0f f888 	sxth.w	r8, r8
 801eba4:	45c1      	cmp	r9, r8
 801eba6:	dc22      	bgt.n	801ebee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801eba8:	fa1f f28c 	uxth.w	r2, ip
 801ebac:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801ebb0:	45e6      	cmp	lr, ip
 801ebb2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ebb6:	4413      	add	r3, r2
 801ebb8:	fa1f f88e 	uxth.w	r8, lr
 801ebbc:	b29b      	uxth	r3, r3
 801ebbe:	fa0f f983 	sxth.w	r9, r3
 801ebc2:	db0a      	blt.n	801ebda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801ebc4:	eba3 0308 	sub.w	r3, r3, r8
 801ebc8:	1ac9      	subs	r1, r1, r3
 801ebca:	b209      	sxth	r1, r1
 801ebcc:	2900      	cmp	r1, #0
 801ebce:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801ebd2:	ddd8      	ble.n	801eb86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801ebd4:	f8ad 9020 	strh.w	r9, [sp, #32]
 801ebd8:	e7c4      	b.n	801eb64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801ebda:	4441      	add	r1, r8
 801ebdc:	b209      	sxth	r1, r1
 801ebde:	4549      	cmp	r1, r9
 801ebe0:	dc05      	bgt.n	801ebee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801ebe2:	eba2 0208 	sub.w	r2, r2, r8
 801ebe6:	b212      	sxth	r2, r2
 801ebe8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801ebec:	e7c9      	b.n	801eb82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801ebee:	4606      	mov	r6, r0
 801ebf0:	e7b9      	b.n	801eb66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801ebf2:	2c00      	cmp	r4, #0
 801ebf4:	f47f af7d 	bne.w	801eaf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801ebf8:	2e00      	cmp	r6, #0
 801ebfa:	f000 81dc 	beq.w	801efb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ebfe:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801ec02:	4655      	mov	r5, sl
 801ec04:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801ec08:	b2b9      	uxth	r1, r7
 801ec0a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ec0e:	b2b3      	uxth	r3, r6
 801ec10:	9104      	str	r1, [sp, #16]
 801ec12:	9804      	ldr	r0, [sp, #16]
 801ec14:	441a      	add	r2, r3
 801ec16:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801ec1a:	b292      	uxth	r2, r2
 801ec1c:	4401      	add	r1, r0
 801ec1e:	fa0f f882 	sxth.w	r8, r2
 801ec22:	b289      	uxth	r1, r1
 801ec24:	9105      	str	r1, [sp, #20]
 801ec26:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801ec2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ec2e:	9b03      	ldr	r3, [sp, #12]
 801ec30:	2b00      	cmp	r3, #0
 801ec32:	d054      	beq.n	801ecde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801ec34:	9902      	ldr	r1, [sp, #8]
 801ec36:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801ec3a:	f7fb f973 	bl	8019f24 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ec3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ec42:	b1d8      	cbz	r0, 801ec7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ec44:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801ec48:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801ec4c:	4576      	cmp	r6, lr
 801ec4e:	dc26      	bgt.n	801ec9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801ec50:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801ec54:	44f4      	add	ip, lr
 801ec56:	fa0f fc8c 	sxth.w	ip, ip
 801ec5a:	45e0      	cmp	r8, ip
 801ec5c:	db1f      	blt.n	801ec9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801ec5e:	428f      	cmp	r7, r1
 801ec60:	fa1f fc81 	uxth.w	ip, r1
 801ec64:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801ec68:	dc0f      	bgt.n	801ec8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801ec6a:	9805      	ldr	r0, [sp, #20]
 801ec6c:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801ec70:	eba0 0c0c 	sub.w	ip, r0, ip
 801ec74:	eba1 010c 	sub.w	r1, r1, ip
 801ec78:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801ec7c:	4620      	mov	r0, r4
 801ec7e:	9903      	ldr	r1, [sp, #12]
 801ec80:	3d08      	subs	r5, #8
 801ec82:	4604      	mov	r4, r0
 801ec84:	3901      	subs	r1, #1
 801ec86:	9103      	str	r1, [sp, #12]
 801ec88:	e7cf      	b.n	801ec2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801ec8a:	4461      	add	r1, ip
 801ec8c:	b209      	sxth	r1, r1
 801ec8e:	4549      	cmp	r1, r9
 801ec90:	dcf5      	bgt.n	801ec7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ec92:	9904      	ldr	r1, [sp, #16]
 801ec94:	eba1 0c0c 	sub.w	ip, r1, ip
 801ec98:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801ec9c:	e7ee      	b.n	801ec7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ec9e:	428f      	cmp	r7, r1
 801eca0:	dced      	bgt.n	801ec7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801eca2:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801eca6:	4461      	add	r1, ip
 801eca8:	b209      	sxth	r1, r1
 801ecaa:	4589      	cmp	r9, r1
 801ecac:	dbe7      	blt.n	801ec7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ecae:	4576      	cmp	r6, lr
 801ecb0:	fa1f fc8e 	uxth.w	ip, lr
 801ecb4:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801ecb8:	dc08      	bgt.n	801eccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801ecba:	eba2 0c0c 	sub.w	ip, r2, ip
 801ecbe:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801ecc2:	eba1 010c 	sub.w	r1, r1, ip
 801ecc6:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801ecca:	e7d7      	b.n	801ec7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801eccc:	4461      	add	r1, ip
 801ecce:	b209      	sxth	r1, r1
 801ecd0:	4588      	cmp	r8, r1
 801ecd2:	dbd4      	blt.n	801ec7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ecd4:	eba3 0c0c 	sub.w	ip, r3, ip
 801ecd8:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801ecdc:	e7ce      	b.n	801ec7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801ecde:	2c00      	cmp	r4, #0
 801ece0:	f000 8169 	beq.w	801efb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ece4:	9b00      	ldr	r3, [sp, #0]
 801ece6:	3301      	adds	r3, #1
 801ece8:	f000 8165 	beq.w	801efb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801ecec:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801ecf0:	9802      	ldr	r0, [sp, #8]
 801ecf2:	4621      	mov	r1, r4
 801ecf4:	f7ff fdbc 	bl	801e870 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ecf8:	b120      	cbz	r0, 801ed04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801ecfa:	f8bd 1000 	ldrh.w	r1, [sp]
 801ecfe:	9801      	ldr	r0, [sp, #4]
 801ed00:	f7ff fe86 	bl	801ea10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ed04:	9902      	ldr	r1, [sp, #8]
 801ed06:	4620      	mov	r0, r4
 801ed08:	f7fb f90c 	bl	8019f24 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ed0c:	2800      	cmp	r0, #0
 801ed0e:	f000 809b 	beq.w	801ee48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801ed12:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801ed16:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801ed1a:	fa1f f288 	uxth.w	r2, r8
 801ed1e:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801ed22:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801ed26:	19d5      	adds	r5, r2, r7
 801ed28:	b2a1      	uxth	r1, r4
 801ed2a:	45a0      	cmp	r8, r4
 801ed2c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ed30:	fa1f f985 	uxth.w	r9, r5
 801ed34:	440b      	add	r3, r1
 801ed36:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801ed3a:	fa0f f589 	sxth.w	r5, r9
 801ed3e:	b29b      	uxth	r3, r3
 801ed40:	9503      	str	r5, [sp, #12]
 801ed42:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801ed46:	9507      	str	r5, [sp, #28]
 801ed48:	f340 809d 	ble.w	801ee86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801ed4c:	1a52      	subs	r2, r2, r1
 801ed4e:	4584      	cmp	ip, r0
 801ed50:	fa0f fe83 	sxth.w	lr, r3
 801ed54:	b292      	uxth	r2, r2
 801ed56:	b215      	sxth	r5, r2
 801ed58:	dd2f      	ble.n	801edba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801ed5a:	9e00      	ldr	r6, [sp, #0]
 801ed5c:	fa1f fc8c 	uxth.w	ip, ip
 801ed60:	b280      	uxth	r0, r0
 801ed62:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801ed66:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801ed6a:	9e03      	ldr	r6, [sp, #12]
 801ed6c:	ebac 0300 	sub.w	r3, ip, r0
 801ed70:	448c      	add	ip, r1
 801ed72:	eba6 060e 	sub.w	r6, r6, lr
 801ed76:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801ed7a:	b29b      	uxth	r3, r3
 801ed7c:	4470      	add	r0, lr
 801ed7e:	fa0f fc8c 	sxth.w	ip, ip
 801ed82:	b21c      	sxth	r4, r3
 801ed84:	b200      	sxth	r0, r0
 801ed86:	4366      	muls	r6, r4
 801ed88:	ebac 0000 	sub.w	r0, ip, r0
 801ed8c:	4368      	muls	r0, r5
 801ed8e:	4286      	cmp	r6, r0
 801ed90:	db09      	blt.n	801eda6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801ed92:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801ed96:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801ed9a:	4417      	add	r7, r2
 801ed9c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801eda0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801eda4:	e685      	b.n	801eab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801eda6:	440b      	add	r3, r1
 801eda8:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801edac:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801edb0:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801edb4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801edb8:	e67b      	b.n	801eab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801edba:	9e03      	ldr	r6, [sp, #12]
 801edbc:	45b6      	cmp	lr, r6
 801edbe:	da28      	bge.n	801ee12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801edc0:	9b00      	ldr	r3, [sp, #0]
 801edc2:	eba6 060e 	sub.w	r6, r6, lr
 801edc6:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801edca:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801edce:	eb04 030c 	add.w	r3, r4, ip
 801edd2:	fa1f f883 	uxth.w	r8, r3
 801edd6:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801edda:	4403      	add	r3, r0
 801eddc:	fa0f f988 	sxth.w	r9, r8
 801ede0:	eba0 000c 	sub.w	r0, r0, ip
 801ede4:	eba3 0308 	sub.w	r3, r3, r8
 801ede8:	4368      	muls	r0, r5
 801edea:	b29b      	uxth	r3, r3
 801edec:	fa0f f883 	sxth.w	r8, r3
 801edf0:	fb08 f606 	mul.w	r6, r8, r6
 801edf4:	42b0      	cmp	r0, r6
 801edf6:	dc06      	bgt.n	801ee06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801edf8:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801edfc:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801ee00:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801ee04:	e7c9      	b.n	801ed9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801ee06:	4423      	add	r3, r4
 801ee08:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801ee0c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801ee10:	e64f      	b.n	801eab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ee12:	eba3 0309 	sub.w	r3, r3, r9
 801ee16:	9807      	ldr	r0, [sp, #28]
 801ee18:	b29b      	uxth	r3, r3
 801ee1a:	2806      	cmp	r0, #6
 801ee1c:	fa0f fc83 	sxth.w	ip, r3
 801ee20:	d818      	bhi.n	801ee54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801ee22:	4652      	mov	r2, sl
 801ee24:	ab0a      	add	r3, sp, #40	; 0x28
 801ee26:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801ee2a:	6851      	ldr	r1, [r2, #4]
 801ee2c:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801ee30:	c303      	stmia	r3!, {r0, r1}
 801ee32:	9b03      	ldr	r3, [sp, #12]
 801ee34:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801ee38:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801ee3c:	ab0a      	add	r3, sp, #40	; 0x28
 801ee3e:	9801      	ldr	r0, [sp, #4]
 801ee40:	e893 0006 	ldmia.w	r3, {r1, r2}
 801ee44:	f7ff fe06 	bl	801ea54 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ee48:	9b00      	ldr	r3, [sp, #0]
 801ee4a:	f1aa 0a08 	sub.w	sl, sl, #8
 801ee4e:	3b01      	subs	r3, #1
 801ee50:	9300      	str	r3, [sp, #0]
 801ee52:	e747      	b.n	801ece4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801ee54:	9800      	ldr	r0, [sp, #0]
 801ee56:	45ac      	cmp	ip, r5
 801ee58:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801ee5c:	db0c      	blt.n	801ee78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801ee5e:	4417      	add	r7, r2
 801ee60:	4458      	add	r0, fp
 801ee62:	f8ad 4020 	strh.w	r4, [sp, #32]
 801ee66:	b2bf      	uxth	r7, r7
 801ee68:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801ee6c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801ee70:	440f      	add	r7, r1
 801ee72:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801ee76:	e61c      	b.n	801eab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ee78:	4458      	add	r0, fp
 801ee7a:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801ee7e:	443b      	add	r3, r7
 801ee80:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801ee84:	e615      	b.n	801eab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ee86:	fa1f f18c 	uxth.w	r1, ip
 801ee8a:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801ee8e:	b282      	uxth	r2, r0
 801ee90:	4584      	cmp	ip, r0
 801ee92:	eb01 0e05 	add.w	lr, r1, r5
 801ee96:	9204      	str	r2, [sp, #16]
 801ee98:	fa1f fe8e 	uxth.w	lr, lr
 801ee9c:	9e04      	ldr	r6, [sp, #16]
 801ee9e:	fa0f f28e 	sxth.w	r2, lr
 801eea2:	9205      	str	r2, [sp, #20]
 801eea4:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801eea8:	4432      	add	r2, r6
 801eeaa:	b292      	uxth	r2, r2
 801eeac:	9206      	str	r2, [sp, #24]
 801eeae:	da26      	bge.n	801eefe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801eeb0:	eba3 0309 	sub.w	r3, r3, r9
 801eeb4:	eba2 020e 	sub.w	r2, r2, lr
 801eeb8:	eba0 000c 	sub.w	r0, r0, ip
 801eebc:	eba4 0408 	sub.w	r4, r4, r8
 801eec0:	b29b      	uxth	r3, r3
 801eec2:	b292      	uxth	r2, r2
 801eec4:	fa0f fa83 	sxth.w	sl, r3
 801eec8:	b211      	sxth	r1, r2
 801eeca:	fb0a f000 	mul.w	r0, sl, r0
 801eece:	434c      	muls	r4, r1
 801eed0:	42a0      	cmp	r0, r4
 801eed2:	9800      	ldr	r0, [sp, #0]
 801eed4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801eed8:	dc06      	bgt.n	801eee8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801eeda:	4458      	add	r0, fp
 801eedc:	9a05      	ldr	r2, [sp, #20]
 801eede:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801eee2:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801eee6:	e7ca      	b.n	801ee7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801eee8:	eb0b 0300 	add.w	r3, fp, r0
 801eeec:	9903      	ldr	r1, [sp, #12]
 801eeee:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801eef2:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801eef6:	442a      	add	r2, r5
 801eef8:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801eefc:	e5d9      	b.n	801eab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801eefe:	9e04      	ldr	r6, [sp, #16]
 801ef00:	9a03      	ldr	r2, [sp, #12]
 801ef02:	1b89      	subs	r1, r1, r6
 801ef04:	b21e      	sxth	r6, r3
 801ef06:	b289      	uxth	r1, r1
 801ef08:	4296      	cmp	r6, r2
 801ef0a:	fa0f fc81 	sxth.w	ip, r1
 801ef0e:	dd25      	ble.n	801ef5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801ef10:	eba3 0309 	sub.w	r3, r3, r9
 801ef14:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ef18:	9e05      	ldr	r6, [sp, #20]
 801ef1a:	eba4 0408 	sub.w	r4, r4, r8
 801ef1e:	b29b      	uxth	r3, r3
 801ef20:	eba6 0902 	sub.w	r9, r6, r2
 801ef24:	fb0c f404 	mul.w	r4, ip, r4
 801ef28:	b218      	sxth	r0, r3
 801ef2a:	9a00      	ldr	r2, [sp, #0]
 801ef2c:	fb00 f909 	mul.w	r9, r0, r9
 801ef30:	00d2      	lsls	r2, r2, #3
 801ef32:	454c      	cmp	r4, r9
 801ef34:	db03      	blt.n	801ef3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801ef36:	445a      	add	r2, fp
 801ef38:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801ef3c:	e79f      	b.n	801ee7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801ef3e:	eb0b 0302 	add.w	r3, fp, r2
 801ef42:	9a03      	ldr	r2, [sp, #12]
 801ef44:	4429      	add	r1, r5
 801ef46:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801ef4a:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801ef4e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801ef52:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801ef56:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ef5a:	e5aa      	b.n	801eab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801ef5c:	9b06      	ldr	r3, [sp, #24]
 801ef5e:	9c07      	ldr	r4, [sp, #28]
 801ef60:	eba3 020e 	sub.w	r2, r3, lr
 801ef64:	2c06      	cmp	r4, #6
 801ef66:	b292      	uxth	r2, r2
 801ef68:	b213      	sxth	r3, r2
 801ef6a:	d80d      	bhi.n	801ef88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801ef6c:	4651      	mov	r1, sl
 801ef6e:	aa0a      	add	r2, sp, #40	; 0x28
 801ef70:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801ef74:	6849      	ldr	r1, [r1, #4]
 801ef76:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801ef7a:	9b05      	ldr	r3, [sp, #20]
 801ef7c:	c203      	stmia	r2!, {r0, r1}
 801ef7e:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801ef82:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801ef86:	e759      	b.n	801ee3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801ef88:	9c00      	ldr	r4, [sp, #0]
 801ef8a:	4563      	cmp	r3, ip
 801ef8c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801ef90:	db0d      	blt.n	801efae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801ef92:	4429      	add	r1, r5
 801ef94:	9a04      	ldr	r2, [sp, #16]
 801ef96:	445c      	add	r4, fp
 801ef98:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ef9c:	b289      	uxth	r1, r1
 801ef9e:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801efa2:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801efa6:	4411      	add	r1, r2
 801efa8:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801efac:	e581      	b.n	801eab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801efae:	445c      	add	r4, fp
 801efb0:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801efb4:	e79f      	b.n	801eef6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801efb6:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801efba:	2f07      	cmp	r7, #7
 801efbc:	d806      	bhi.n	801efcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801efbe:	ab08      	add	r3, sp, #32
 801efc0:	9801      	ldr	r0, [sp, #4]
 801efc2:	e893 0006 	ldmia.w	r3, {r1, r2}
 801efc6:	f7ff fd45 	bl	801ea54 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801efca:	e5dc      	b.n	801eb86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801efcc:	f107 39ff 	add.w	r9, r7, #4294967295
 801efd0:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801efd4:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801efd8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801efdc:	f04f 35ff 	mov.w	r5, #4294967295
 801efe0:	2400      	movs	r4, #0
 801efe2:	9304      	str	r3, [sp, #16]
 801efe4:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801efe8:	f109 32ff 	add.w	r2, r9, #4294967295
 801efec:	9300      	str	r3, [sp, #0]
 801efee:	4690      	mov	r8, r2
 801eff0:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801eff4:	9303      	str	r3, [sp, #12]
 801eff6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801effa:	f1b8 3fff 	cmp.w	r8, #4294967295
 801effe:	6818      	ldr	r0, [r3, #0]
 801f000:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801f004:	9206      	str	r2, [sp, #24]
 801f006:	bf16      	itet	ne
 801f008:	9904      	ldrne	r1, [sp, #16]
 801f00a:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801f00e:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801f012:	9305      	str	r3, [sp, #20]
 801f014:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801f018:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801f01c:	fb16 f601 	smulbb	r6, r6, r1
 801f020:	6859      	ldr	r1, [r3, #4]
 801f022:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801f026:	4671      	mov	r1, lr
 801f028:	a80a      	add	r0, sp, #40	; 0x28
 801f02a:	f7fb fdd6 	bl	801abda <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f02e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801f032:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801f036:	9b03      	ldr	r3, [sp, #12]
 801f038:	9a00      	ldr	r2, [sp, #0]
 801f03a:	fb11 f100 	smulbb	r1, r1, r0
 801f03e:	2008      	movs	r0, #8
 801f040:	fb02 6603 	mla	r6, r2, r3, r6
 801f044:	1b8e      	subs	r6, r1, r6
 801f046:	fb91 f1f0 	sdiv	r1, r1, r0
 801f04a:	42b1      	cmp	r1, r6
 801f04c:	dc21      	bgt.n	801f092 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801f04e:	4556      	cmp	r6, sl
 801f050:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801f054:	da03      	bge.n	801f05e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801f056:	b1e6      	cbz	r6, 801f092 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801f058:	46b2      	mov	sl, r6
 801f05a:	4645      	mov	r5, r8
 801f05c:	464c      	mov	r4, r9
 801f05e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f062:	f118 0f02 	cmn.w	r8, #2
 801f066:	d1c8      	bne.n	801effa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801f068:	f1b2 3fff 	cmp.w	r2, #4294967295
 801f06c:	f1a7 0708 	sub.w	r7, r7, #8
 801f070:	4691      	mov	r9, r2
 801f072:	d1b7      	bne.n	801efe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801f074:	9b01      	ldr	r3, [sp, #4]
 801f076:	b2a6      	uxth	r6, r4
 801f078:	00e4      	lsls	r4, r4, #3
 801f07a:	1918      	adds	r0, r3, r4
 801f07c:	1c6b      	adds	r3, r5, #1
 801f07e:	d10b      	bne.n	801f098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801f080:	4601      	mov	r1, r0
 801f082:	9802      	ldr	r0, [sp, #8]
 801f084:	f7fb fda9 	bl	801abda <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f088:	4631      	mov	r1, r6
 801f08a:	9801      	ldr	r0, [sp, #4]
 801f08c:	f7ff fcc0 	bl	801ea10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f090:	e50f      	b.n	801eab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801f092:	4645      	mov	r5, r8
 801f094:	464c      	mov	r4, r9
 801f096:	e7ed      	b.n	801f074 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801f098:	9b01      	ldr	r3, [sp, #4]
 801f09a:	00ed      	lsls	r5, r5, #3
 801f09c:	445c      	add	r4, fp
 801f09e:	1959      	adds	r1, r3, r5
 801f0a0:	445d      	add	r5, fp
 801f0a2:	f7fb fd9a 	bl	801abda <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801f0a6:	9b02      	ldr	r3, [sp, #8]
 801f0a8:	cb03      	ldmia	r3!, {r0, r1}
 801f0aa:	9b02      	ldr	r3, [sp, #8]
 801f0ac:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801f0b0:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801f0b4:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801f0b8:	6861      	ldr	r1, [r4, #4]
 801f0ba:	c303      	stmia	r3!, {r0, r1}
 801f0bc:	e7e4      	b.n	801f088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801f0c0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801f0c0:	4b1d      	ldr	r3, [pc, #116]	; (801f138 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801f0c2:	b530      	push	{r4, r5, lr}
 801f0c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f0c8:	b085      	sub	sp, #20
 801f0ca:	4b1c      	ldr	r3, [pc, #112]	; (801f13c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801f0cc:	460c      	mov	r4, r1
 801f0ce:	2100      	movs	r1, #0
 801f0d0:	4605      	mov	r5, r0
 801f0d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f0d6:	6820      	ldr	r0, [r4, #0]
 801f0d8:	9100      	str	r1, [sp, #0]
 801f0da:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f0de:	ab02      	add	r3, sp, #8
 801f0e0:	6861      	ldr	r1, [r4, #4]
 801f0e2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f0e6:	c303      	stmia	r3!, {r0, r1}
 801f0e8:	4669      	mov	r1, sp
 801f0ea:	a802      	add	r0, sp, #8
 801f0ec:	f7f9 f8ca 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 801f0f0:	ab02      	add	r3, sp, #8
 801f0f2:	cb03      	ldmia	r3!, {r0, r1}
 801f0f4:	4b12      	ldr	r3, [pc, #72]	; (801f140 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801f0f6:	6020      	str	r0, [r4, #0]
 801f0f8:	6818      	ldr	r0, [r3, #0]
 801f0fa:	6061      	str	r1, [r4, #4]
 801f0fc:	b138      	cbz	r0, 801f10e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801f0fe:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801f102:	b133      	cbz	r3, 801f112 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801f104:	6821      	ldr	r1, [r4, #0]
 801f106:	4628      	mov	r0, r5
 801f108:	6862      	ldr	r2, [r4, #4]
 801f10a:	f7ff fcc5 	bl	801ea98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f10e:	b005      	add	sp, #20
 801f110:	bd30      	pop	{r4, r5, pc}
 801f112:	6803      	ldr	r3, [r0, #0]
 801f114:	4621      	mov	r1, r4
 801f116:	689b      	ldr	r3, [r3, #8]
 801f118:	4798      	blx	r3
 801f11a:	4b0a      	ldr	r3, [pc, #40]	; (801f144 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801f11c:	6818      	ldr	r0, [r3, #0]
 801f11e:	b118      	cbz	r0, 801f128 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801f120:	6803      	ldr	r3, [r0, #0]
 801f122:	4621      	mov	r1, r4
 801f124:	689b      	ldr	r3, [r3, #8]
 801f126:	4798      	blx	r3
 801f128:	4b07      	ldr	r3, [pc, #28]	; (801f148 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801f12a:	4621      	mov	r1, r4
 801f12c:	6818      	ldr	r0, [r3, #0]
 801f12e:	6803      	ldr	r3, [r0, #0]
 801f130:	69db      	ldr	r3, [r3, #28]
 801f132:	4798      	blx	r3
 801f134:	e7eb      	b.n	801f10e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801f136:	bf00      	nop
 801f138:	2400c8b0 	.word	0x2400c8b0
 801f13c:	2400c8b2 	.word	0x2400c8b2
 801f140:	2400c918 	.word	0x2400c918
 801f144:	2400c914 	.word	0x2400c914
 801f148:	2400c8bc 	.word	0x2400c8bc

0801f14c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801f14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f150:	4604      	mov	r4, r0
 801f152:	b09b      	sub	sp, #108	; 0x6c
 801f154:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801f158:	b129      	cbz	r1, 801f166 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801f15a:	2300      	movs	r3, #0
 801f15c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801f160:	b01b      	add	sp, #108	; 0x6c
 801f162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f166:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801f16a:	4630      	mov	r0, r6
 801f16c:	f7f9 f8cd 	bl	801830a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f170:	4605      	mov	r5, r0
 801f172:	b940      	cbnz	r0, 801f186 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801f174:	4620      	mov	r0, r4
 801f176:	e896 0006 	ldmia.w	r6, {r1, r2}
 801f17a:	f7ff fc8d 	bl	801ea98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f17e:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801f182:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801f186:	4ba6      	ldr	r3, [pc, #664]	; (801f420 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801f188:	681b      	ldr	r3, [r3, #0]
 801f18a:	b33b      	cbz	r3, 801f1dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801f18c:	4da5      	ldr	r5, [pc, #660]	; (801f424 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801f18e:	4628      	mov	r0, r5
 801f190:	f7f9 f8bb 	bl	801830a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f194:	4606      	mov	r6, r0
 801f196:	bb08      	cbnz	r0, 801f1dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801f198:	4628      	mov	r0, r5
 801f19a:	f7ff f9fd 	bl	801e598 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801f19e:	6829      	ldr	r1, [r5, #0]
 801f1a0:	686a      	ldr	r2, [r5, #4]
 801f1a2:	4620      	mov	r0, r4
 801f1a4:	f7ff fc78 	bl	801ea98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f1a8:	802e      	strh	r6, [r5, #0]
 801f1aa:	806e      	strh	r6, [r5, #2]
 801f1ac:	80ae      	strh	r6, [r5, #4]
 801f1ae:	80ee      	strh	r6, [r5, #6]
 801f1b0:	4f9d      	ldr	r7, [pc, #628]	; (801f428 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801f1b2:	a809      	add	r0, sp, #36	; 0x24
 801f1b4:	f7ff fbd7 	bl	801e966 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801f1b8:	883d      	ldrh	r5, [r7, #0]
 801f1ba:	462e      	mov	r6, r5
 801f1bc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f1c0:	42b3      	cmp	r3, r6
 801f1c2:	d910      	bls.n	801f1e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801f1c4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801f1c8:	3601      	adds	r6, #1
 801f1ca:	a809      	add	r0, sp, #36	; 0x24
 801f1cc:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801f1d0:	b2b6      	uxth	r6, r6
 801f1d2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801f1d6:	f7ff fc3d 	bl	801ea54 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f1da:	e7ef      	b.n	801f1bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801f1dc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	d1e5      	bne.n	801f1b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801f1e4:	e7bc      	b.n	801f160 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f1e6:	462e      	mov	r6, r5
 801f1e8:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801f1ec:	42b3      	cmp	r3, r6
 801f1ee:	d90b      	bls.n	801f208 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801f1f0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801f1f4:	3601      	adds	r6, #1
 801f1f6:	4620      	mov	r0, r4
 801f1f8:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801f1fc:	b2b6      	uxth	r6, r6
 801f1fe:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801f202:	f7ff fc49 	bl	801ea98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f206:	e7ef      	b.n	801f1e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801f208:	4a88      	ldr	r2, [pc, #544]	; (801f42c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801f20a:	6813      	ldr	r3, [r2, #0]
 801f20c:	4690      	mov	r8, r2
 801f20e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801f212:	2b01      	cmp	r3, #1
 801f214:	f040 8094 	bne.w	801f340 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801f218:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801f21c:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801f220:	f04f 0900 	mov.w	r9, #0
 801f224:	33aa      	adds	r3, #170	; 0xaa
 801f226:	42a8      	cmp	r0, r5
 801f228:	f103 0308 	add.w	r3, r3, #8
 801f22c:	dd0a      	ble.n	801f244 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801f22e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801f232:	3501      	adds	r5, #1
 801f234:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801f238:	440a      	add	r2, r1
 801f23a:	b212      	sxth	r2, r2
 801f23c:	4591      	cmp	r9, r2
 801f23e:	bfb8      	it	lt
 801f240:	4691      	movlt	r9, r2
 801f242:	e7f0      	b.n	801f226 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801f244:	4b7a      	ldr	r3, [pc, #488]	; (801f430 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801f246:	4e7b      	ldr	r6, [pc, #492]	; (801f434 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801f248:	881d      	ldrh	r5, [r3, #0]
 801f24a:	2300      	movs	r3, #0
 801f24c:	2d0f      	cmp	r5, #15
 801f24e:	bf8c      	ite	hi
 801f250:	08ed      	lsrhi	r5, r5, #3
 801f252:	2501      	movls	r5, #1
 801f254:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801f258:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f25c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801f260:	f8d8 0000 	ldr.w	r0, [r8]
 801f264:	440b      	add	r3, r1
 801f266:	6802      	ldr	r2, [r0, #0]
 801f268:	b21b      	sxth	r3, r3
 801f26a:	4599      	cmp	r9, r3
 801f26c:	dd4b      	ble.n	801f306 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801f26e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801f272:	4798      	blx	r3
 801f274:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f278:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f27c:	4413      	add	r3, r2
 801f27e:	b21b      	sxth	r3, r3
 801f280:	195a      	adds	r2, r3, r5
 801f282:	4290      	cmp	r0, r2
 801f284:	da07      	bge.n	801f296 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801f286:	4581      	cmp	r9, r0
 801f288:	dd05      	ble.n	801f296 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801f28a:	4298      	cmp	r0, r3
 801f28c:	da33      	bge.n	801f2f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801f28e:	2b00      	cmp	r3, #0
 801f290:	dd31      	ble.n	801f2f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801f292:	4648      	mov	r0, r9
 801f294:	e004      	b.n	801f2a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801f296:	4298      	cmp	r0, r3
 801f298:	dbfb      	blt.n	801f292 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801f29a:	4548      	cmp	r0, r9
 801f29c:	bfa8      	it	ge
 801f29e:	4648      	movge	r0, r9
 801f2a0:	f9b6 2000 	ldrsh.w	r2, [r6]
 801f2a4:	2100      	movs	r1, #0
 801f2a6:	1ac0      	subs	r0, r0, r3
 801f2a8:	f8b7 a000 	ldrh.w	sl, [r7]
 801f2ac:	f8ad 1014 	strh.w	r1, [sp, #20]
 801f2b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f2b4:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f2b8:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f2bc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f2c0:	4553      	cmp	r3, sl
 801f2c2:	d9c9      	bls.n	801f258 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801f2c4:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801f2c8:	ab07      	add	r3, sp, #28
 801f2ca:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f2ce:	6851      	ldr	r1, [r2, #4]
 801f2d0:	c303      	stmia	r3!, {r0, r1}
 801f2d2:	a807      	add	r0, sp, #28
 801f2d4:	a905      	add	r1, sp, #20
 801f2d6:	f7f8 ffd5 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 801f2da:	a807      	add	r0, sp, #28
 801f2dc:	f7f9 f815 	bl	801830a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f2e0:	b920      	cbnz	r0, 801f2ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801f2e2:	6823      	ldr	r3, [r4, #0]
 801f2e4:	a907      	add	r1, sp, #28
 801f2e6:	4620      	mov	r0, r4
 801f2e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f2ea:	4798      	blx	r3
 801f2ec:	f10a 0a01 	add.w	sl, sl, #1
 801f2f0:	fa1f fa8a 	uxth.w	sl, sl
 801f2f4:	e7e2      	b.n	801f2bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801f2f6:	f8d8 0000 	ldr.w	r0, [r8]
 801f2fa:	2101      	movs	r1, #1
 801f2fc:	6803      	ldr	r3, [r0, #0]
 801f2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f302:	4798      	blx	r3
 801f304:	e7a8      	b.n	801f258 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801f306:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801f308:	4798      	blx	r3
 801f30a:	4b4b      	ldr	r3, [pc, #300]	; (801f438 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801f30c:	781b      	ldrb	r3, [r3, #0]
 801f30e:	2b00      	cmp	r3, #0
 801f310:	f43f af26 	beq.w	801f160 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f314:	2300      	movs	r3, #0
 801f316:	883d      	ldrh	r5, [r7, #0]
 801f318:	34ea      	adds	r4, #234	; 0xea
 801f31a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801f31e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801f322:	42ab      	cmp	r3, r5
 801f324:	f67f af1c 	bls.w	801f160 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801f328:	ab1a      	add	r3, sp, #104	; 0x68
 801f32a:	4620      	mov	r0, r4
 801f32c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f330:	3501      	adds	r5, #1
 801f332:	3b44      	subs	r3, #68	; 0x44
 801f334:	b2ad      	uxth	r5, r5
 801f336:	e893 0006 	ldmia.w	r3, {r1, r2}
 801f33a:	f7ff fb8b 	bl	801ea54 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801f33e:	e7ee      	b.n	801f31e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801f340:	2b02      	cmp	r3, #2
 801f342:	f040 813d 	bne.w	801f5c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801f346:	4b3d      	ldr	r3, [pc, #244]	; (801f43c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801f348:	781b      	ldrb	r3, [r3, #0]
 801f34a:	2b01      	cmp	r3, #1
 801f34c:	d02c      	beq.n	801f3a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801f34e:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801f352:	883a      	ldrh	r2, [r7, #0]
 801f354:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801f358:	3201      	adds	r2, #1
 801f35a:	b292      	uxth	r2, r2
 801f35c:	2900      	cmp	r1, #0
 801f35e:	d0d4      	beq.n	801f30a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801f360:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801f364:	4610      	mov	r0, r2
 801f366:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801f36a:	f04f 0a00 	mov.w	sl, #0
 801f36e:	441d      	add	r5, r3
 801f370:	b22d      	sxth	r5, r5
 801f372:	b283      	uxth	r3, r0
 801f374:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801f378:	4299      	cmp	r1, r3
 801f37a:	f240 80c3 	bls.w	801f504 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801f37e:	4426      	add	r6, r4
 801f380:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801f384:	4684      	mov	ip, r0
 801f386:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801f38a:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801f38e:	4573      	cmp	r3, lr
 801f390:	f340 80a5 	ble.w	801f4de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801f394:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801f398:	4475      	add	r5, lr
 801f39a:	b22d      	sxth	r5, r5
 801f39c:	429d      	cmp	r5, r3
 801f39e:	bfa8      	it	ge
 801f3a0:	461d      	movge	r5, r3
 801f3a2:	3001      	adds	r0, #1
 801f3a4:	46e2      	mov	sl, ip
 801f3a6:	e7e4      	b.n	801f372 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801f3a8:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801f3ac:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801f3b0:	f1bb 0f00 	cmp.w	fp, #0
 801f3b4:	d0a9      	beq.n	801f30a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801f3b6:	883b      	ldrh	r3, [r7, #0]
 801f3b8:	2600      	movs	r6, #0
 801f3ba:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801f3be:	3301      	adds	r3, #1
 801f3c0:	b29b      	uxth	r3, r3
 801f3c2:	b299      	uxth	r1, r3
 801f3c4:	00f5      	lsls	r5, r6, #3
 801f3c6:	458b      	cmp	fp, r1
 801f3c8:	d93a      	bls.n	801f440 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801f3ca:	4425      	add	r5, r4
 801f3cc:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801f3d0:	469c      	mov	ip, r3
 801f3d2:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801f3d6:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801f3da:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801f3de:	4408      	add	r0, r1
 801f3e0:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801f3e4:	4471      	add	r1, lr
 801f3e6:	b200      	sxth	r0, r0
 801f3e8:	b209      	sxth	r1, r1
 801f3ea:	4288      	cmp	r0, r1
 801f3ec:	da06      	bge.n	801f3fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801f3ee:	4586      	cmp	lr, r0
 801f3f0:	4672      	mov	r2, lr
 801f3f2:	bfb8      	it	lt
 801f3f4:	4602      	movlt	r2, r0
 801f3f6:	3301      	adds	r3, #1
 801f3f8:	4666      	mov	r6, ip
 801f3fa:	e7e2      	b.n	801f3c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801f3fc:	d10b      	bne.n	801f416 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801f3fe:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801f402:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801f406:	458c      	cmp	ip, r1
 801f408:	bfb4      	ite	lt
 801f40a:	469c      	movlt	ip, r3
 801f40c:	46b4      	movge	ip, r6
 801f40e:	4572      	cmp	r2, lr
 801f410:	bfb8      	it	lt
 801f412:	4672      	movlt	r2, lr
 801f414:	e7ef      	b.n	801f3f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801f416:	428a      	cmp	r2, r1
 801f418:	46b4      	mov	ip, r6
 801f41a:	bfb8      	it	lt
 801f41c:	460a      	movlt	r2, r1
 801f41e:	e7ea      	b.n	801f3f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801f420:	2400c914 	.word	0x2400c914
 801f424:	2400c920 	.word	0x2400c920
 801f428:	24000050 	.word	0x24000050
 801f42c:	2400c8bc 	.word	0x2400c8bc
 801f430:	2400c8b2 	.word	0x2400c8b2
 801f434:	2400c8b0 	.word	0x2400c8b0
 801f438:	2400c8ba 	.word	0x2400c8ba
 801f43c:	2400c8b4 	.word	0x2400c8b4
 801f440:	1961      	adds	r1, r4, r5
 801f442:	ab07      	add	r3, sp, #28
 801f444:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801f448:	6849      	ldr	r1, [r1, #4]
 801f44a:	c303      	stmia	r3!, {r0, r1}
 801f44c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801f450:	a807      	add	r0, sp, #28
 801f452:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f456:	2b13      	cmp	r3, #19
 801f458:	440b      	add	r3, r1
 801f45a:	bfd8      	it	le
 801f45c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801f460:	1a9b      	subs	r3, r3, r2
 801f462:	f8ad 201c 	strh.w	r2, [sp, #28]
 801f466:	f8ad 3020 	strh.w	r3, [sp, #32]
 801f46a:	f7ff f8af 	bl	801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f46e:	a807      	add	r0, sp, #28
 801f470:	f7f8 ff4b 	bl	801830a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f474:	2800      	cmp	r0, #0
 801f476:	d199      	bne.n	801f3ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801f478:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801f47c:	4425      	add	r5, r4
 801f47e:	f8d8 0000 	ldr.w	r0, [r8]
 801f482:	f1bc 0f14 	cmp.w	ip, #20
 801f486:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f48a:	f8d0 e000 	ldr.w	lr, [r0]
 801f48e:	bfa8      	it	ge
 801f490:	f04f 0c14 	movge.w	ip, #20
 801f494:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801f498:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f49c:	fa1f fc8c 	uxth.w	ip, ip
 801f4a0:	f8cd c000 	str.w	ip, [sp]
 801f4a4:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801f4a8:	47d0      	blx	sl
 801f4aa:	4682      	mov	sl, r0
 801f4ac:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801f4b0:	a807      	add	r0, sp, #28
 801f4b2:	f7ff f871 	bl	801e598 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801f4b6:	6823      	ldr	r3, [r4, #0]
 801f4b8:	4620      	mov	r0, r4
 801f4ba:	a907      	add	r1, sp, #28
 801f4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f4be:	4798      	blx	r3
 801f4c0:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801f4c4:	eba0 000a 	sub.w	r0, r0, sl
 801f4c8:	b200      	sxth	r0, r0
 801f4ca:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801f4ce:	2800      	cmp	r0, #0
 801f4d0:	f47f af6c 	bne.w	801f3ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801f4d4:	b2b1      	uxth	r1, r6
 801f4d6:	4648      	mov	r0, r9
 801f4d8:	f7ff fa9a 	bl	801ea10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f4dc:	e766      	b.n	801f3ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801f4de:	d10c      	bne.n	801f4fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801f4e0:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801f4e4:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801f4e8:	45b4      	cmp	ip, r6
 801f4ea:	bfb4      	ite	lt
 801f4ec:	4684      	movlt	ip, r0
 801f4ee:	46d4      	movge	ip, sl
 801f4f0:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801f4f4:	4433      	add	r3, r6
 801f4f6:	b21b      	sxth	r3, r3
 801f4f8:	e750      	b.n	801f39c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801f4fa:	4575      	cmp	r5, lr
 801f4fc:	46d4      	mov	ip, sl
 801f4fe:	bfa8      	it	ge
 801f500:	4675      	movge	r5, lr
 801f502:	e74e      	b.n	801f3a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801f504:	eb0b 0006 	add.w	r0, fp, r6
 801f508:	4426      	add	r6, r4
 801f50a:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801f50e:	f1b9 0f13 	cmp.w	r9, #19
 801f512:	bfdc      	itt	le
 801f514:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801f518:	444d      	addle	r5, r9
 801f51a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801f51e:	bfd8      	it	le
 801f520:	b22d      	sxthle	r5, r5
 801f522:	f7f8 fef2 	bl	801830a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f526:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801f52a:	2800      	cmp	r0, #0
 801f52c:	f47f af16 	bne.w	801f35c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801f530:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801f534:	fa1f f989 	uxth.w	r9, r9
 801f538:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801f53c:	eba5 050c 	sub.w	r5, r5, ip
 801f540:	fa1f f28c 	uxth.w	r2, ip
 801f544:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801f548:	eb02 0009 	add.w	r0, r2, r9
 801f54c:	2d14      	cmp	r5, #20
 801f54e:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801f552:	bfa8      	it	ge
 801f554:	2514      	movge	r5, #20
 801f556:	b200      	sxth	r0, r0
 801f558:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f55c:	b289      	uxth	r1, r1
 801f55e:	fa1f fe85 	uxth.w	lr, r5
 801f562:	eba0 000c 	sub.w	r0, r0, ip
 801f566:	f8ad c01e 	strh.w	ip, [sp, #30]
 801f56a:	4586      	cmp	lr, r0
 801f56c:	f8d8 0000 	ldr.w	r0, [r8]
 801f570:	f8ad 3020 	strh.w	r3, [sp, #32]
 801f574:	b29b      	uxth	r3, r3
 801f576:	bfb8      	it	lt
 801f578:	46f1      	movlt	r9, lr
 801f57a:	6805      	ldr	r5, [r0, #0]
 801f57c:	f8cd 9000 	str.w	r9, [sp]
 801f580:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801f584:	47a8      	blx	r5
 801f586:	6823      	ldr	r3, [r4, #0]
 801f588:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801f58c:	a907      	add	r1, sp, #28
 801f58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f590:	4620      	mov	r0, r4
 801f592:	4798      	blx	r3
 801f594:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801f598:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801f59c:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801f5a0:	1a5b      	subs	r3, r3, r1
 801f5a2:	440a      	add	r2, r1
 801f5a4:	b21b      	sxth	r3, r3
 801f5a6:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801f5aa:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	f47f aecf 	bne.w	801f352 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801f5b4:	fa1f f18a 	uxth.w	r1, sl
 801f5b8:	4658      	mov	r0, fp
 801f5ba:	f7ff fa29 	bl	801ea10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f5be:	e6c8      	b.n	801f352 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801f5c0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f5c4:	42ab      	cmp	r3, r5
 801f5c6:	f67f aea0 	bls.w	801f30a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801f5ca:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801f5ce:	ab07      	add	r3, sp, #28
 801f5d0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f5d4:	6851      	ldr	r1, [r2, #4]
 801f5d6:	c303      	stmia	r3!, {r0, r1}
 801f5d8:	a807      	add	r0, sp, #28
 801f5da:	f7f8 fe96 	bl	801830a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f5de:	b920      	cbnz	r0, 801f5ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801f5e0:	6823      	ldr	r3, [r4, #0]
 801f5e2:	a907      	add	r1, sp, #28
 801f5e4:	4620      	mov	r0, r4
 801f5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f5e8:	4798      	blx	r3
 801f5ea:	3501      	adds	r5, #1
 801f5ec:	b2ad      	uxth	r5, r5
 801f5ee:	e7e7      	b.n	801f5c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801f5f0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801f5f0:	4b03      	ldr	r3, [pc, #12]	; (801f600 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801f5f2:	2200      	movs	r2, #0
 801f5f4:	801a      	strh	r2, [r3, #0]
 801f5f6:	805a      	strh	r2, [r3, #2]
 801f5f8:	809a      	strh	r2, [r3, #4]
 801f5fa:	80da      	strh	r2, [r3, #6]
 801f5fc:	4770      	bx	lr
 801f5fe:	bf00      	nop
 801f600:	2400c920 	.word	0x2400c920

0801f604 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801f604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f608:	b09d      	sub	sp, #116	; 0x74
 801f60a:	4606      	mov	r6, r0
 801f60c:	4614      	mov	r4, r2
 801f60e:	468a      	mov	sl, r1
 801f610:	a803      	add	r0, sp, #12
 801f612:	461d      	mov	r5, r3
 801f614:	f000 fe94 	bl	8020340 <_ZN8touchgfx12TextProviderC1Ev>
 801f618:	6833      	ldr	r3, [r6, #0]
 801f61a:	4630      	mov	r0, r6
 801f61c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801f620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f622:	4798      	blx	r3
 801f624:	6833      	ldr	r3, [r6, #0]
 801f626:	4607      	mov	r7, r0
 801f628:	4630      	mov	r0, r6
 801f62a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f62c:	4798      	blx	r3
 801f62e:	462a      	mov	r2, r5
 801f630:	2500      	movs	r5, #0
 801f632:	4621      	mov	r1, r4
 801f634:	9000      	str	r0, [sp, #0]
 801f636:	463b      	mov	r3, r7
 801f638:	462c      	mov	r4, r5
 801f63a:	46a9      	mov	r9, r5
 801f63c:	46a8      	mov	r8, r5
 801f63e:	a803      	add	r0, sp, #12
 801f640:	f000 fed1 	bl	80203e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f644:	2300      	movs	r3, #0
 801f646:	9302      	str	r3, [sp, #8]
 801f648:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801f64c:	429c      	cmp	r4, r3
 801f64e:	d002      	beq.n	801f656 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801f650:	455c      	cmp	r4, fp
 801f652:	bf18      	it	ne
 801f654:	4625      	movne	r5, r4
 801f656:	ab02      	add	r3, sp, #8
 801f658:	4632      	mov	r2, r6
 801f65a:	4651      	mov	r1, sl
 801f65c:	a803      	add	r0, sp, #12
 801f65e:	f001 f9c3 	bl	80209e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f662:	4604      	mov	r4, r0
 801f664:	b108      	cbz	r0, 801f66a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801f666:	280a      	cmp	r0, #10
 801f668:	d10a      	bne.n	801f680 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801f66a:	45c1      	cmp	r9, r8
 801f66c:	bf38      	it	cc
 801f66e:	46c1      	movcc	r9, r8
 801f670:	f04f 0800 	mov.w	r8, #0
 801f674:	2c00      	cmp	r4, #0
 801f676:	d1e5      	bne.n	801f644 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801f678:	4648      	mov	r0, r9
 801f67a:	b01d      	add	sp, #116	; 0x74
 801f67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f680:	9a02      	ldr	r2, [sp, #8]
 801f682:	2a00      	cmp	r2, #0
 801f684:	d0de      	beq.n	801f644 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801f686:	7b57      	ldrb	r7, [r2, #13]
 801f688:	4629      	mov	r1, r5
 801f68a:	6833      	ldr	r3, [r6, #0]
 801f68c:	007f      	lsls	r7, r7, #1
 801f68e:	8894      	ldrh	r4, [r2, #4]
 801f690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f692:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801f696:	7a97      	ldrb	r7, [r2, #10]
 801f698:	4307      	orrs	r7, r0
 801f69a:	4630      	mov	r0, r6
 801f69c:	4798      	blx	r3
 801f69e:	4438      	add	r0, r7
 801f6a0:	4480      	add	r8, r0
 801f6a2:	fa1f f888 	uxth.w	r8, r8
 801f6a6:	e7e5      	b.n	801f674 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801f6a8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801f6a8:	b508      	push	{r3, lr}
 801f6aa:	6803      	ldr	r3, [r0, #0]
 801f6ac:	68db      	ldr	r3, [r3, #12]
 801f6ae:	4798      	blx	r3
 801f6b0:	b128      	cbz	r0, 801f6be <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801f6b2:	7b43      	ldrb	r3, [r0, #13]
 801f6b4:	7a80      	ldrb	r0, [r0, #10]
 801f6b6:	005b      	lsls	r3, r3, #1
 801f6b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f6bc:	4318      	orrs	r0, r3
 801f6be:	bd08      	pop	{r3, pc}

0801f6c0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801f6c0:	b40e      	push	{r1, r2, r3}
 801f6c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f6c4:	b09e      	sub	sp, #120	; 0x78
 801f6c6:	4605      	mov	r5, r0
 801f6c8:	ab23      	add	r3, sp, #140	; 0x8c
 801f6ca:	a805      	add	r0, sp, #20
 801f6cc:	f853 4b04 	ldr.w	r4, [r3], #4
 801f6d0:	9303      	str	r3, [sp, #12]
 801f6d2:	f000 fe35 	bl	8020340 <_ZN8touchgfx12TextProviderC1Ev>
 801f6d6:	682b      	ldr	r3, [r5, #0]
 801f6d8:	4628      	mov	r0, r5
 801f6da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f6dc:	4798      	blx	r3
 801f6de:	682b      	ldr	r3, [r5, #0]
 801f6e0:	4606      	mov	r6, r0
 801f6e2:	4628      	mov	r0, r5
 801f6e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f6e6:	4798      	blx	r3
 801f6e8:	4633      	mov	r3, r6
 801f6ea:	4621      	mov	r1, r4
 801f6ec:	ae1e      	add	r6, sp, #120	; 0x78
 801f6ee:	2400      	movs	r4, #0
 801f6f0:	9000      	str	r0, [sp, #0]
 801f6f2:	9a03      	ldr	r2, [sp, #12]
 801f6f4:	a805      	add	r0, sp, #20
 801f6f6:	f000 fe76 	bl	80203e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f6fa:	f846 4d68 	str.w	r4, [r6, #-104]!
 801f6fe:	462a      	mov	r2, r5
 801f700:	4633      	mov	r3, r6
 801f702:	4621      	mov	r1, r4
 801f704:	a805      	add	r0, sp, #20
 801f706:	f001 f96f 	bl	80209e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f70a:	b300      	cbz	r0, 801f74e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801f70c:	280a      	cmp	r0, #10
 801f70e:	d01a      	beq.n	801f746 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801f710:	9f04      	ldr	r7, [sp, #16]
 801f712:	b1c7      	cbz	r7, 801f746 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801f714:	7b78      	ldrb	r0, [r7, #13]
 801f716:	7a3b      	ldrb	r3, [r7, #8]
 801f718:	00c1      	lsls	r1, r0, #3
 801f71a:	88aa      	ldrh	r2, [r5, #4]
 801f71c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801f720:	4319      	orrs	r1, r3
 801f722:	0643      	lsls	r3, r0, #25
 801f724:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801f728:	bf48      	it	mi
 801f72a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801f72e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801f732:	bf48      	it	mi
 801f734:	b219      	sxthmi	r1, r3
 801f736:	79fb      	ldrb	r3, [r7, #7]
 801f738:	4303      	orrs	r3, r0
 801f73a:	4413      	add	r3, r2
 801f73c:	1a5b      	subs	r3, r3, r1
 801f73e:	b29b      	uxth	r3, r3
 801f740:	42a3      	cmp	r3, r4
 801f742:	bfc8      	it	gt
 801f744:	b21c      	sxthgt	r4, r3
 801f746:	4633      	mov	r3, r6
 801f748:	462a      	mov	r2, r5
 801f74a:	2100      	movs	r1, #0
 801f74c:	e7da      	b.n	801f704 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801f74e:	b2a0      	uxth	r0, r4
 801f750:	b01e      	add	sp, #120	; 0x78
 801f752:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f756:	b003      	add	sp, #12
 801f758:	4770      	bx	lr

0801f75a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801f75a:	b40e      	push	{r1, r2, r3}
 801f75c:	b570      	push	{r4, r5, r6, lr}
 801f75e:	b09d      	sub	sp, #116	; 0x74
 801f760:	4604      	mov	r4, r0
 801f762:	ab21      	add	r3, sp, #132	; 0x84
 801f764:	a803      	add	r0, sp, #12
 801f766:	f853 5b04 	ldr.w	r5, [r3], #4
 801f76a:	9302      	str	r3, [sp, #8]
 801f76c:	f000 fde8 	bl	8020340 <_ZN8touchgfx12TextProviderC1Ev>
 801f770:	6823      	ldr	r3, [r4, #0]
 801f772:	4620      	mov	r0, r4
 801f774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f776:	4798      	blx	r3
 801f778:	6823      	ldr	r3, [r4, #0]
 801f77a:	4606      	mov	r6, r0
 801f77c:	4620      	mov	r0, r4
 801f77e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f780:	2401      	movs	r4, #1
 801f782:	4798      	blx	r3
 801f784:	4633      	mov	r3, r6
 801f786:	9000      	str	r0, [sp, #0]
 801f788:	4629      	mov	r1, r5
 801f78a:	9a02      	ldr	r2, [sp, #8]
 801f78c:	a803      	add	r0, sp, #12
 801f78e:	f000 fe2a 	bl	80203e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f792:	a803      	add	r0, sp, #12
 801f794:	f001 fa22 	bl	8020bdc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f798:	b2a3      	uxth	r3, r4
 801f79a:	b138      	cbz	r0, 801f7ac <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801f79c:	280a      	cmp	r0, #10
 801f79e:	a803      	add	r0, sp, #12
 801f7a0:	bf04      	itt	eq
 801f7a2:	3301      	addeq	r3, #1
 801f7a4:	b21c      	sxtheq	r4, r3
 801f7a6:	f001 fa19 	bl	8020bdc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f7aa:	e7f5      	b.n	801f798 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801f7ac:	4618      	mov	r0, r3
 801f7ae:	b01d      	add	sp, #116	; 0x74
 801f7b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f7b4:	b003      	add	sp, #12
 801f7b6:	4770      	bx	lr

0801f7b8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801f7b8:	b40e      	push	{r1, r2, r3}
 801f7ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f7bc:	b09e      	sub	sp, #120	; 0x78
 801f7be:	4604      	mov	r4, r0
 801f7c0:	ab23      	add	r3, sp, #140	; 0x8c
 801f7c2:	a805      	add	r0, sp, #20
 801f7c4:	f853 5b04 	ldr.w	r5, [r3], #4
 801f7c8:	9303      	str	r3, [sp, #12]
 801f7ca:	f000 fdb9 	bl	8020340 <_ZN8touchgfx12TextProviderC1Ev>
 801f7ce:	6823      	ldr	r3, [r4, #0]
 801f7d0:	4620      	mov	r0, r4
 801f7d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f7d4:	4798      	blx	r3
 801f7d6:	6823      	ldr	r3, [r4, #0]
 801f7d8:	4606      	mov	r6, r0
 801f7da:	4620      	mov	r0, r4
 801f7dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f7de:	4798      	blx	r3
 801f7e0:	4633      	mov	r3, r6
 801f7e2:	4629      	mov	r1, r5
 801f7e4:	9000      	str	r0, [sp, #0]
 801f7e6:	9a03      	ldr	r2, [sp, #12]
 801f7e8:	a805      	add	r0, sp, #20
 801f7ea:	f000 fdfc 	bl	80203e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f7ee:	ad1e      	add	r5, sp, #120	; 0x78
 801f7f0:	2100      	movs	r1, #0
 801f7f2:	26ff      	movs	r6, #255	; 0xff
 801f7f4:	4622      	mov	r2, r4
 801f7f6:	a805      	add	r0, sp, #20
 801f7f8:	f845 1d68 	str.w	r1, [r5, #-104]!
 801f7fc:	462b      	mov	r3, r5
 801f7fe:	f001 f8f3 	bl	80209e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f802:	b1d8      	cbz	r0, 801f83c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801f804:	280a      	cmp	r0, #10
 801f806:	d012      	beq.n	801f82e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801f808:	9804      	ldr	r0, [sp, #16]
 801f80a:	b180      	cbz	r0, 801f82e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801f80c:	7b47      	ldrb	r7, [r0, #13]
 801f80e:	7922      	ldrb	r2, [r4, #4]
 801f810:	00fb      	lsls	r3, r7, #3
 801f812:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801f816:	7a03      	ldrb	r3, [r0, #8]
 801f818:	430b      	orrs	r3, r1
 801f81a:	0679      	lsls	r1, r7, #25
 801f81c:	bf44      	itt	mi
 801f81e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f822:	b21b      	sxthmi	r3, r3
 801f824:	1ad3      	subs	r3, r2, r3
 801f826:	b2db      	uxtb	r3, r3
 801f828:	429e      	cmp	r6, r3
 801f82a:	bf28      	it	cs
 801f82c:	461e      	movcs	r6, r3
 801f82e:	462b      	mov	r3, r5
 801f830:	4622      	mov	r2, r4
 801f832:	2100      	movs	r1, #0
 801f834:	a805      	add	r0, sp, #20
 801f836:	f001 f8d7 	bl	80209e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f83a:	e7e2      	b.n	801f802 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801f83c:	4630      	mov	r0, r6
 801f83e:	b01e      	add	sp, #120	; 0x78
 801f840:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f844:	b003      	add	sp, #12
 801f846:	4770      	bx	lr

0801f848 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801f848:	b513      	push	{r0, r1, r4, lr}
 801f84a:	6803      	ldr	r3, [r0, #0]
 801f84c:	2400      	movs	r4, #0
 801f84e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801f852:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f856:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f85a:	4669      	mov	r1, sp
 801f85c:	691b      	ldr	r3, [r3, #16]
 801f85e:	9400      	str	r4, [sp, #0]
 801f860:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f864:	4798      	blx	r3
 801f866:	b002      	add	sp, #8
 801f868:	bd10      	pop	{r4, pc}

0801f86a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801f86a:	b538      	push	{r3, r4, r5, lr}
 801f86c:	680b      	ldr	r3, [r1, #0]
 801f86e:	460c      	mov	r4, r1
 801f870:	4605      	mov	r5, r0
 801f872:	68db      	ldr	r3, [r3, #12]
 801f874:	4798      	blx	r3
 801f876:	6823      	ldr	r3, [r4, #0]
 801f878:	4620      	mov	r0, r4
 801f87a:	4629      	mov	r1, r5
 801f87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f87e:	4798      	blx	r3
 801f880:	4628      	mov	r0, r5
 801f882:	bd38      	pop	{r3, r4, r5, pc}

0801f884 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801f884:	b410      	push	{r4}
 801f886:	880a      	ldrh	r2, [r1, #0]
 801f888:	8884      	ldrh	r4, [r0, #4]
 801f88a:	4422      	add	r2, r4
 801f88c:	800a      	strh	r2, [r1, #0]
 801f88e:	884a      	ldrh	r2, [r1, #2]
 801f890:	88c4      	ldrh	r4, [r0, #6]
 801f892:	4422      	add	r2, r4
 801f894:	804a      	strh	r2, [r1, #2]
 801f896:	6940      	ldr	r0, [r0, #20]
 801f898:	b120      	cbz	r0, 801f8a4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801f89a:	6803      	ldr	r3, [r0, #0]
 801f89c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f8a2:	4718      	bx	r3
 801f8a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f8a8:	4770      	bx	lr

0801f8aa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801f8aa:	b570      	push	{r4, r5, r6, lr}
 801f8ac:	8882      	ldrh	r2, [r0, #4]
 801f8ae:	460c      	mov	r4, r1
 801f8b0:	880b      	ldrh	r3, [r1, #0]
 801f8b2:	4605      	mov	r5, r0
 801f8b4:	4413      	add	r3, r2
 801f8b6:	800b      	strh	r3, [r1, #0]
 801f8b8:	884b      	ldrh	r3, [r1, #2]
 801f8ba:	88c2      	ldrh	r2, [r0, #6]
 801f8bc:	4413      	add	r3, r2
 801f8be:	804b      	strh	r3, [r1, #2]
 801f8c0:	1d01      	adds	r1, r0, #4
 801f8c2:	4620      	mov	r0, r4
 801f8c4:	f7f8 fcde 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 801f8c8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f8cc:	2b00      	cmp	r3, #0
 801f8ce:	dd0b      	ble.n	801f8e8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f8d0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	dd07      	ble.n	801f8e8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f8d8:	6968      	ldr	r0, [r5, #20]
 801f8da:	b128      	cbz	r0, 801f8e8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f8dc:	6803      	ldr	r3, [r0, #0]
 801f8de:	4621      	mov	r1, r4
 801f8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f8e6:	4718      	bx	r3
 801f8e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f8ec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801f8ec:	b570      	push	{r4, r5, r6, lr}
 801f8ee:	8882      	ldrh	r2, [r0, #4]
 801f8f0:	460c      	mov	r4, r1
 801f8f2:	880b      	ldrh	r3, [r1, #0]
 801f8f4:	4605      	mov	r5, r0
 801f8f6:	4413      	add	r3, r2
 801f8f8:	800b      	strh	r3, [r1, #0]
 801f8fa:	884b      	ldrh	r3, [r1, #2]
 801f8fc:	88c2      	ldrh	r2, [r0, #6]
 801f8fe:	4413      	add	r3, r2
 801f900:	804b      	strh	r3, [r1, #2]
 801f902:	1d01      	adds	r1, r0, #4
 801f904:	4620      	mov	r0, r4
 801f906:	f7f8 fcbd 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 801f90a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f90e:	2b00      	cmp	r3, #0
 801f910:	dd15      	ble.n	801f93e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801f912:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f916:	2b00      	cmp	r3, #0
 801f918:	dd11      	ble.n	801f93e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801f91a:	6968      	ldr	r0, [r5, #20]
 801f91c:	b128      	cbz	r0, 801f92a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801f91e:	6803      	ldr	r3, [r0, #0]
 801f920:	691b      	ldr	r3, [r3, #16]
 801f922:	4621      	mov	r1, r4
 801f924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f928:	4718      	bx	r3
 801f92a:	4b05      	ldr	r3, [pc, #20]	; (801f940 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801f92c:	681b      	ldr	r3, [r3, #0]
 801f92e:	3304      	adds	r3, #4
 801f930:	429d      	cmp	r5, r3
 801f932:	d104      	bne.n	801f93e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801f934:	f7fe ffbe 	bl	801e8b4 <_ZN8touchgfx11Application11getInstanceEv>
 801f938:	6803      	ldr	r3, [r0, #0]
 801f93a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f93c:	e7f1      	b.n	801f922 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801f93e:	bd70      	pop	{r4, r5, r6, pc}
 801f940:	2400c918 	.word	0x2400c918

0801f944 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801f944:	b570      	push	{r4, r5, r6, lr}
 801f946:	4604      	mov	r4, r0
 801f948:	4616      	mov	r6, r2
 801f94a:	460d      	mov	r5, r1
 801f94c:	b901      	cbnz	r1, 801f950 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801f94e:	b192      	cbz	r2, 801f976 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801f950:	6823      	ldr	r3, [r4, #0]
 801f952:	4620      	mov	r0, r4
 801f954:	695b      	ldr	r3, [r3, #20]
 801f956:	4798      	blx	r3
 801f958:	88e2      	ldrh	r2, [r4, #6]
 801f95a:	88a1      	ldrh	r1, [r4, #4]
 801f95c:	4620      	mov	r0, r4
 801f95e:	4432      	add	r2, r6
 801f960:	4429      	add	r1, r5
 801f962:	b212      	sxth	r2, r2
 801f964:	b209      	sxth	r1, r1
 801f966:	f7e4 fc80 	bl	800426a <_ZN8touchgfx8Drawable5setXYEss>
 801f96a:	6823      	ldr	r3, [r4, #0]
 801f96c:	4620      	mov	r0, r4
 801f96e:	695b      	ldr	r3, [r3, #20]
 801f970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f974:	4718      	bx	r3
 801f976:	bd70      	pop	{r4, r5, r6, pc}

0801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801f978:	b510      	push	{r4, lr}
 801f97a:	2300      	movs	r3, #0
 801f97c:	4604      	mov	r4, r0
 801f97e:	4608      	mov	r0, r1
 801f980:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801f984:	8023      	strh	r3, [r4, #0]
 801f986:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f98a:	8063      	strh	r3, [r4, #2]
 801f98c:	6803      	ldr	r3, [r0, #0]
 801f98e:	80a1      	strh	r1, [r4, #4]
 801f990:	4621      	mov	r1, r4
 801f992:	80e2      	strh	r2, [r4, #6]
 801f994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f996:	4798      	blx	r3
 801f998:	4620      	mov	r0, r4
 801f99a:	bd10      	pop	{r4, pc}

0801f99c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801f99c:	b530      	push	{r4, r5, lr}
 801f99e:	8083      	strh	r3, [r0, #4]
 801f9a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801f9a4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801f9a8:	7183      	strb	r3, [r0, #6]
 801f9aa:	79c3      	ldrb	r3, [r0, #7]
 801f9ac:	6101      	str	r1, [r0, #16]
 801f9ae:	f365 0306 	bfi	r3, r5, #0, #7
 801f9b2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801f9b6:	8282      	strh	r2, [r0, #20]
 801f9b8:	f365 13c7 	bfi	r3, r5, #7, #1
 801f9bc:	71c3      	strb	r3, [r0, #7]
 801f9be:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801f9c2:	7203      	strb	r3, [r0, #8]
 801f9c4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801f9c8:	7243      	strb	r3, [r0, #9]
 801f9ca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f9ce:	8143      	strh	r3, [r0, #10]
 801f9d0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801f9d4:	8183      	strh	r3, [r0, #12]
 801f9d6:	4b01      	ldr	r3, [pc, #4]	; (801f9dc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801f9d8:	6003      	str	r3, [r0, #0]
 801f9da:	bd30      	pop	{r4, r5, pc}
 801f9dc:	080306a8 	.word	0x080306a8

0801f9e0 <_ZNK8touchgfx9ConstFont4findEt>:
 801f9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f9e2:	6904      	ldr	r4, [r0, #16]
 801f9e4:	b3bc      	cbz	r4, 801fa56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f9e6:	88a3      	ldrh	r3, [r4, #4]
 801f9e8:	8a82      	ldrh	r2, [r0, #20]
 801f9ea:	1acb      	subs	r3, r1, r3
 801f9ec:	f102 32ff 	add.w	r2, r2, #4294967295
 801f9f0:	d431      	bmi.n	801fa56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f9f2:	4293      	cmp	r3, r2
 801f9f4:	dd0c      	ble.n	801fa10 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801f9f6:	230e      	movs	r3, #14
 801f9f8:	fb03 4302 	mla	r3, r3, r2, r4
 801f9fc:	889b      	ldrh	r3, [r3, #4]
 801f9fe:	1a5b      	subs	r3, r3, r1
 801fa00:	1ad3      	subs	r3, r2, r3
 801fa02:	429a      	cmp	r2, r3
 801fa04:	db27      	blt.n	801fa56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fa06:	2b00      	cmp	r3, #0
 801fa08:	bfbc      	itt	lt
 801fa0a:	2302      	movlt	r3, #2
 801fa0c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801fa10:	2500      	movs	r5, #0
 801fa12:	260e      	movs	r6, #14
 801fa14:	4295      	cmp	r5, r2
 801fa16:	dc1e      	bgt.n	801fa56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fa18:	fb06 4003 	mla	r0, r6, r3, r4
 801fa1c:	8887      	ldrh	r7, [r0, #4]
 801fa1e:	42b9      	cmp	r1, r7
 801fa20:	d01a      	beq.n	801fa58 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801fa22:	d20d      	bcs.n	801fa40 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801fa24:	1e5a      	subs	r2, r3, #1
 801fa26:	4295      	cmp	r5, r2
 801fa28:	dc15      	bgt.n	801fa56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fa2a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801fa2e:	1a5b      	subs	r3, r3, r1
 801fa30:	1ad3      	subs	r3, r2, r3
 801fa32:	429a      	cmp	r2, r3
 801fa34:	db0f      	blt.n	801fa56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fa36:	429d      	cmp	r5, r3
 801fa38:	ddec      	ble.n	801fa14 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801fa3a:	1953      	adds	r3, r2, r5
 801fa3c:	105b      	asrs	r3, r3, #1
 801fa3e:	e7e9      	b.n	801fa14 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801fa40:	1c5d      	adds	r5, r3, #1
 801fa42:	42aa      	cmp	r2, r5
 801fa44:	db07      	blt.n	801fa56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fa46:	8a43      	ldrh	r3, [r0, #18]
 801fa48:	1acb      	subs	r3, r1, r3
 801fa4a:	442b      	add	r3, r5
 801fa4c:	429d      	cmp	r5, r3
 801fa4e:	dc02      	bgt.n	801fa56 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801fa50:	429a      	cmp	r2, r3
 801fa52:	dadf      	bge.n	801fa14 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801fa54:	e7f1      	b.n	801fa3a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801fa56:	2000      	movs	r0, #0
 801fa58:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fa5a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801fa5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa5c:	4604      	mov	r4, r0
 801fa5e:	4617      	mov	r7, r2
 801fa60:	461e      	mov	r6, r3
 801fa62:	b911      	cbnz	r1, 801fa6a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801fa64:	2500      	movs	r5, #0
 801fa66:	4628      	mov	r0, r5
 801fa68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa6a:	290a      	cmp	r1, #10
 801fa6c:	d0fa      	beq.n	801fa64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fa6e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801fa72:	4291      	cmp	r1, r2
 801fa74:	d0f6      	beq.n	801fa64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fa76:	f242 020b 	movw	r2, #8203	; 0x200b
 801fa7a:	4291      	cmp	r1, r2
 801fa7c:	d0f2      	beq.n	801fa64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fa7e:	f7ff ffaf 	bl	801f9e0 <_ZNK8touchgfx9ConstFont4findEt>
 801fa82:	4605      	mov	r5, r0
 801fa84:	b950      	cbnz	r0, 801fa9c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801fa86:	6823      	ldr	r3, [r4, #0]
 801fa88:	4620      	mov	r0, r4
 801fa8a:	691b      	ldr	r3, [r3, #16]
 801fa8c:	4798      	blx	r3
 801fa8e:	4601      	mov	r1, r0
 801fa90:	4620      	mov	r0, r4
 801fa92:	f7ff ffa5 	bl	801f9e0 <_ZNK8touchgfx9ConstFont4findEt>
 801fa96:	4605      	mov	r5, r0
 801fa98:	2800      	cmp	r0, #0
 801fa9a:	d0e3      	beq.n	801fa64 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801fa9c:	6823      	ldr	r3, [r4, #0]
 801fa9e:	4629      	mov	r1, r5
 801faa0:	4620      	mov	r0, r4
 801faa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801faa4:	4798      	blx	r3
 801faa6:	6038      	str	r0, [r7, #0]
 801faa8:	6823      	ldr	r3, [r4, #0]
 801faaa:	4620      	mov	r0, r4
 801faac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801faae:	4798      	blx	r3
 801fab0:	7030      	strb	r0, [r6, #0]
 801fab2:	e7d8      	b.n	801fa66 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801fab4 <_ZN8touchgfx6memsetEPvhm>:
 801fab4:	4402      	add	r2, r0
 801fab6:	4290      	cmp	r0, r2
 801fab8:	d002      	beq.n	801fac0 <_ZN8touchgfx6memsetEPvhm+0xc>
 801faba:	f800 1b01 	strb.w	r1, [r0], #1
 801fabe:	e7fa      	b.n	801fab6 <_ZN8touchgfx6memsetEPvhm+0x2>
 801fac0:	4770      	bx	lr

0801fac2 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801fac2:	b538      	push	{r3, r4, r5, lr}
 801fac4:	4605      	mov	r5, r0
 801fac6:	f001 ffa1 	bl	8021a0c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801faca:	4604      	mov	r4, r0
 801facc:	4628      	mov	r0, r5
 801face:	f001 fed9 	bl	8021884 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801fad2:	2800      	cmp	r0, #0
 801fad4:	bf14      	ite	ne
 801fad6:	2002      	movne	r0, #2
 801fad8:	2000      	moveq	r0, #0
 801fada:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801fade:	b280      	uxth	r0, r0
 801fae0:	bd38      	pop	{r3, r4, r5, pc}

0801fae2 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801fae2:	b538      	push	{r3, r4, r5, lr}
 801fae4:	4605      	mov	r5, r0
 801fae6:	f001 ff91 	bl	8021a0c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801faea:	4604      	mov	r4, r0
 801faec:	4628      	mov	r0, r5
 801faee:	f001 fec9 	bl	8021884 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801faf2:	2800      	cmp	r0, #0
 801faf4:	bf14      	ite	ne
 801faf6:	2002      	movne	r0, #2
 801faf8:	2000      	moveq	r0, #0
 801fafa:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801fafe:	f040 0001 	orr.w	r0, r0, #1
 801fb02:	b280      	uxth	r0, r0
 801fb04:	bd38      	pop	{r3, r4, r5, pc}

0801fb06 <_ZN8touchgfx4clzuEm>:
 801fb06:	4603      	mov	r3, r0
 801fb08:	b1c8      	cbz	r0, 801fb3e <_ZN8touchgfx4clzuEm+0x38>
 801fb0a:	0c02      	lsrs	r2, r0, #16
 801fb0c:	0412      	lsls	r2, r2, #16
 801fb0e:	b9a2      	cbnz	r2, 801fb3a <_ZN8touchgfx4clzuEm+0x34>
 801fb10:	0403      	lsls	r3, r0, #16
 801fb12:	2010      	movs	r0, #16
 801fb14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801fb18:	bf04      	itt	eq
 801fb1a:	021b      	lsleq	r3, r3, #8
 801fb1c:	3008      	addeq	r0, #8
 801fb1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801fb22:	bf04      	itt	eq
 801fb24:	011b      	lsleq	r3, r3, #4
 801fb26:	3004      	addeq	r0, #4
 801fb28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801fb2c:	bf04      	itt	eq
 801fb2e:	009b      	lsleq	r3, r3, #2
 801fb30:	3002      	addeq	r0, #2
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	db04      	blt.n	801fb40 <_ZN8touchgfx4clzuEm+0x3a>
 801fb36:	3001      	adds	r0, #1
 801fb38:	4770      	bx	lr
 801fb3a:	2000      	movs	r0, #0
 801fb3c:	e7ea      	b.n	801fb14 <_ZN8touchgfx4clzuEm+0xe>
 801fb3e:	2020      	movs	r0, #32
 801fb40:	4770      	bx	lr

0801fb42 <_ZN8touchgfx7muldivuEmmmRm>:
 801fb42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb46:	4680      	mov	r8, r0
 801fb48:	460f      	mov	r7, r1
 801fb4a:	4615      	mov	r5, r2
 801fb4c:	461e      	mov	r6, r3
 801fb4e:	f7ff ffda 	bl	801fb06 <_ZN8touchgfx4clzuEm>
 801fb52:	b998      	cbnz	r0, 801fb7c <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801fb54:	4608      	mov	r0, r1
 801fb56:	f7ff ffd6 	bl	801fb06 <_ZN8touchgfx4clzuEm>
 801fb5a:	2800      	cmp	r0, #0
 801fb5c:	dd08      	ble.n	801fb70 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801fb5e:	4633      	mov	r3, r6
 801fb60:	462a      	mov	r2, r5
 801fb62:	4641      	mov	r1, r8
 801fb64:	4638      	mov	r0, r7
 801fb66:	f7ff ffec 	bl	801fb42 <_ZN8touchgfx7muldivuEmmmRm>
 801fb6a:	b003      	add	sp, #12
 801fb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb70:	f04f 33ff 	mov.w	r3, #4294967295
 801fb74:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801fb78:	6033      	str	r3, [r6, #0]
 801fb7a:	e7f6      	b.n	801fb6a <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801fb7c:	fa31 f900 	lsrs.w	r9, r1, r0
 801fb80:	fb01 f308 	mul.w	r3, r1, r8
 801fb84:	d105      	bne.n	801fb92 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801fb86:	fbb3 f0f5 	udiv	r0, r3, r5
 801fb8a:	fb05 3510 	mls	r5, r5, r0, r3
 801fb8e:	6035      	str	r5, [r6, #0]
 801fb90:	e7eb      	b.n	801fb6a <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801fb92:	2301      	movs	r3, #1
 801fb94:	fa08 fb00 	lsl.w	fp, r8, r0
 801fb98:	462a      	mov	r2, r5
 801fb9a:	4641      	mov	r1, r8
 801fb9c:	fa03 f000 	lsl.w	r0, r3, r0
 801fba0:	4633      	mov	r3, r6
 801fba2:	fbbb faf5 	udiv	sl, fp, r5
 801fba6:	3801      	subs	r0, #1
 801fba8:	fb09 f40a 	mul.w	r4, r9, sl
 801fbac:	4038      	ands	r0, r7
 801fbae:	f7ff ffc8 	bl	801fb42 <_ZN8touchgfx7muldivuEmmmRm>
 801fbb2:	462a      	mov	r2, r5
 801fbb4:	4607      	mov	r7, r0
 801fbb6:	ab01      	add	r3, sp, #4
 801fbb8:	fb05 b11a 	mls	r1, r5, sl, fp
 801fbbc:	4648      	mov	r0, r9
 801fbbe:	f7ff ffc0 	bl	801fb42 <_ZN8touchgfx7muldivuEmmmRm>
 801fbc2:	9b01      	ldr	r3, [sp, #4]
 801fbc4:	6832      	ldr	r2, [r6, #0]
 801fbc6:	441a      	add	r2, r3
 801fbc8:	fbb2 f3f5 	udiv	r3, r2, r5
 801fbcc:	441c      	add	r4, r3
 801fbce:	fb05 2513 	mls	r5, r5, r3, r2
 801fbd2:	443c      	add	r4, r7
 801fbd4:	4420      	add	r0, r4
 801fbd6:	e7da      	b.n	801fb8e <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801fbd8 <_ZN8touchgfx6muldivElllRl>:
 801fbd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fbda:	2800      	cmp	r0, #0
 801fbdc:	461e      	mov	r6, r3
 801fbde:	bfba      	itte	lt
 801fbe0:	4240      	neglt	r0, r0
 801fbe2:	f04f 34ff 	movlt.w	r4, #4294967295
 801fbe6:	2401      	movge	r4, #1
 801fbe8:	2900      	cmp	r1, #0
 801fbea:	bfbc      	itt	lt
 801fbec:	4249      	neglt	r1, r1
 801fbee:	4264      	neglt	r4, r4
 801fbf0:	2a00      	cmp	r2, #0
 801fbf2:	bfb6      	itet	lt
 801fbf4:	4265      	neglt	r5, r4
 801fbf6:	4625      	movge	r5, r4
 801fbf8:	4252      	neglt	r2, r2
 801fbfa:	4288      	cmp	r0, r1
 801fbfc:	bfc2      	ittt	gt
 801fbfe:	4603      	movgt	r3, r0
 801fc00:	4608      	movgt	r0, r1
 801fc02:	4619      	movgt	r1, r3
 801fc04:	ab01      	add	r3, sp, #4
 801fc06:	f7ff ff9c 	bl	801fb42 <_ZN8touchgfx7muldivuEmmmRm>
 801fc0a:	9b01      	ldr	r3, [sp, #4]
 801fc0c:	4368      	muls	r0, r5
 801fc0e:	435c      	muls	r4, r3
 801fc10:	6034      	str	r4, [r6, #0]
 801fc12:	b002      	add	sp, #8
 801fc14:	bd70      	pop	{r4, r5, r6, pc}

0801fc16 <_ZN8touchgfx6muldivElll>:
 801fc16:	b513      	push	{r0, r1, r4, lr}
 801fc18:	4614      	mov	r4, r2
 801fc1a:	ab01      	add	r3, sp, #4
 801fc1c:	f7ff ffdc 	bl	801fbd8 <_ZN8touchgfx6muldivElllRl>
 801fc20:	2800      	cmp	r0, #0
 801fc22:	ea84 72e4 	eor.w	r2, r4, r4, asr #31
 801fc26:	9b01      	ldr	r3, [sp, #4]
 801fc28:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 801fc2c:	db0a      	blt.n	801fc44 <_ZN8touchgfx6muldivElll+0x2e>
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	f102 0201 	add.w	r2, r2, #1
 801fc34:	bfb8      	it	lt
 801fc36:	425b      	neglt	r3, r3
 801fc38:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801fc3c:	db00      	blt.n	801fc40 <_ZN8touchgfx6muldivElll+0x2a>
 801fc3e:	3001      	adds	r0, #1
 801fc40:	b002      	add	sp, #8
 801fc42:	bd10      	pop	{r4, pc}
 801fc44:	2b00      	cmp	r3, #0
 801fc46:	bfb8      	it	lt
 801fc48:	425b      	neglt	r3, r3
 801fc4a:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 801fc4e:	bfc8      	it	gt
 801fc50:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801fc54:	e7f4      	b.n	801fc40 <_ZN8touchgfx6muldivElll+0x2a>

0801fc56 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801fc56:	2000      	movs	r0, #0
 801fc58:	4770      	bx	lr

0801fc5a <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801fc5a:	2001      	movs	r0, #1
 801fc5c:	4770      	bx	lr

0801fc5e <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801fc5e:	2002      	movs	r0, #2
 801fc60:	4770      	bx	lr

0801fc62 <_ZN8touchgfx12GestureEventD1Ev>:
 801fc62:	4770      	bx	lr

0801fc64 <_ZN8touchgfx9DragEventD1Ev>:
 801fc64:	4770      	bx	lr

0801fc66 <_ZN8touchgfx10ClickEventD1Ev>:
 801fc66:	4770      	bx	lr

0801fc68 <_ZN8touchgfx10ClickEventD0Ev>:
 801fc68:	b510      	push	{r4, lr}
 801fc6a:	4604      	mov	r4, r0
 801fc6c:	210c      	movs	r1, #12
 801fc6e:	f00b fc26 	bl	802b4be <_ZdlPvj>
 801fc72:	4620      	mov	r0, r4
 801fc74:	bd10      	pop	{r4, pc}

0801fc76 <_ZN8touchgfx9DragEventD0Ev>:
 801fc76:	b510      	push	{r4, lr}
 801fc78:	4604      	mov	r4, r0
 801fc7a:	2110      	movs	r1, #16
 801fc7c:	f00b fc1f 	bl	802b4be <_ZdlPvj>
 801fc80:	4620      	mov	r0, r4
 801fc82:	bd10      	pop	{r4, pc}

0801fc84 <_ZN8touchgfx12GestureEventD0Ev>:
 801fc84:	b510      	push	{r4, lr}
 801fc86:	4604      	mov	r4, r0
 801fc88:	210c      	movs	r1, #12
 801fc8a:	f00b fc18 	bl	802b4be <_ZdlPvj>
 801fc8e:	4620      	mov	r0, r4
 801fc90:	bd10      	pop	{r4, pc}
	...

0801fc94 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801fc94:	b530      	push	{r4, r5, lr}
 801fc96:	460d      	mov	r5, r1
 801fc98:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801fc9a:	b087      	sub	sp, #28
 801fc9c:	4604      	mov	r4, r0
 801fc9e:	b301      	cbz	r1, 801fce2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801fca0:	a801      	add	r0, sp, #4
 801fca2:	f7ff fe69 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fca6:	892a      	ldrh	r2, [r5, #8]
 801fca8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801fcac:	7928      	ldrb	r0, [r5, #4]
 801fcae:	1ad2      	subs	r2, r2, r3
 801fcb0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801fcb2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801fcb6:	441a      	add	r2, r3
 801fcb8:	896b      	ldrh	r3, [r5, #10]
 801fcba:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801fcbe:	f88d 0010 	strb.w	r0, [sp, #16]
 801fcc2:	1b5b      	subs	r3, r3, r5
 801fcc4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801fcc6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801fcc8:	442b      	add	r3, r5
 801fcca:	4d07      	ldr	r5, [pc, #28]	; (801fce8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801fccc:	f8ad 1012 	strh.w	r1, [sp, #18]
 801fcd0:	a903      	add	r1, sp, #12
 801fcd2:	9503      	str	r5, [sp, #12]
 801fcd4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fcd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fcdc:	6803      	ldr	r3, [r0, #0]
 801fcde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fce0:	4798      	blx	r3
 801fce2:	b007      	add	sp, #28
 801fce4:	bd30      	pop	{r4, r5, pc}
 801fce6:	bf00      	nop
 801fce8:	08030728 	.word	0x08030728

0801fcec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801fcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fcf0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801fcf2:	b08a      	sub	sp, #40	; 0x28
 801fcf4:	4604      	mov	r4, r0
 801fcf6:	460d      	mov	r5, r1
 801fcf8:	b113      	cbz	r3, 801fd00 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801fcfa:	790b      	ldrb	r3, [r1, #4]
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	d044      	beq.n	801fd8a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801fd00:	f104 0804 	add.w	r8, r4, #4
 801fd04:	a803      	add	r0, sp, #12
 801fd06:	4641      	mov	r1, r8
 801fd08:	f7ff fe36 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fd0c:	792b      	ldrb	r3, [r5, #4]
 801fd0e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801fd12:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801fd16:	b983      	cbnz	r3, 801fd3a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801fd18:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801fd1c:	892a      	ldrh	r2, [r5, #8]
 801fd1e:	88e9      	ldrh	r1, [r5, #6]
 801fd20:	4640      	mov	r0, r8
 801fd22:	1b92      	subs	r2, r2, r6
 801fd24:	9301      	str	r3, [sp, #4]
 801fd26:	1bc9      	subs	r1, r1, r7
 801fd28:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801fd2c:	b212      	sxth	r2, r2
 801fd2e:	9300      	str	r3, [sp, #0]
 801fd30:	b209      	sxth	r1, r1
 801fd32:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801fd36:	f7f8 f9c3 	bl	80180c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801fd3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801fd3c:	b329      	cbz	r1, 801fd8a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801fd3e:	a805      	add	r0, sp, #20
 801fd40:	f7ff fe1a 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fd44:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801fd48:	792b      	ldrb	r3, [r5, #4]
 801fd4a:	a907      	add	r1, sp, #28
 801fd4c:	1abf      	subs	r7, r7, r2
 801fd4e:	88ea      	ldrh	r2, [r5, #6]
 801fd50:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801fd52:	4417      	add	r7, r2
 801fd54:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801fd56:	f88d 3020 	strb.w	r3, [sp, #32]
 801fd5a:	4417      	add	r7, r2
 801fd5c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801fd60:	1ab6      	subs	r6, r6, r2
 801fd62:	892a      	ldrh	r2, [r5, #8]
 801fd64:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801fd68:	4416      	add	r6, r2
 801fd6a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801fd6c:	4416      	add	r6, r2
 801fd6e:	4a08      	ldr	r2, [pc, #32]	; (801fd90 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801fd70:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801fd74:	2600      	movs	r6, #0
 801fd76:	9207      	str	r2, [sp, #28]
 801fd78:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801fd7c:	6803      	ldr	r3, [r0, #0]
 801fd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fd80:	4798      	blx	r3
 801fd82:	792b      	ldrb	r3, [r5, #4]
 801fd84:	b10b      	cbz	r3, 801fd8a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801fd86:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801fd8a:	b00a      	add	sp, #40	; 0x28
 801fd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd90:	08030700 	.word	0x08030700

0801fd94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801fd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd98:	460c      	mov	r4, r1
 801fd9a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801fd9c:	b088      	sub	sp, #32
 801fd9e:	4605      	mov	r5, r0
 801fda0:	2900      	cmp	r1, #0
 801fda2:	d06d      	beq.n	801fe80 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801fda4:	4668      	mov	r0, sp
 801fda6:	f7ff fde7 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fdaa:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801fdac:	88e3      	ldrh	r3, [r4, #6]
 801fdae:	f9bd 8000 	ldrsh.w	r8, [sp]
 801fdb2:	440b      	add	r3, r1
 801fdb4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801fdb8:	b21b      	sxth	r3, r3
 801fdba:	4543      	cmp	r3, r8
 801fdbc:	db31      	blt.n	801fe22 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801fdbe:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801fdc2:	44c4      	add	ip, r8
 801fdc4:	fa0f fc8c 	sxth.w	ip, ip
 801fdc8:	4563      	cmp	r3, ip
 801fdca:	da2a      	bge.n	801fe22 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801fdcc:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801fdce:	8926      	ldrh	r6, [r4, #8]
 801fdd0:	4416      	add	r6, r2
 801fdd2:	b236      	sxth	r6, r6
 801fdd4:	42be      	cmp	r6, r7
 801fdd6:	db24      	blt.n	801fe22 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801fdd8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801fddc:	4438      	add	r0, r7
 801fdde:	b200      	sxth	r0, r0
 801fde0:	4286      	cmp	r6, r0
 801fde2:	da1e      	bge.n	801fe22 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801fde4:	8963      	ldrh	r3, [r4, #10]
 801fde6:	4419      	add	r1, r3
 801fde8:	b209      	sxth	r1, r1
 801fdea:	4541      	cmp	r1, r8
 801fdec:	db08      	blt.n	801fe00 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801fdee:	4561      	cmp	r1, ip
 801fdf0:	da06      	bge.n	801fe00 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801fdf2:	89a3      	ldrh	r3, [r4, #12]
 801fdf4:	441a      	add	r2, r3
 801fdf6:	b212      	sxth	r2, r2
 801fdf8:	42ba      	cmp	r2, r7
 801fdfa:	db01      	blt.n	801fe00 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801fdfc:	4282      	cmp	r2, r0
 801fdfe:	db10      	blt.n	801fe22 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801fe00:	4b21      	ldr	r3, [pc, #132]	; (801fe88 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801fe02:	a904      	add	r1, sp, #16
 801fe04:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801fe06:	9304      	str	r3, [sp, #16]
 801fe08:	2302      	movs	r3, #2
 801fe0a:	f88d 3014 	strb.w	r3, [sp, #20]
 801fe0e:	2300      	movs	r3, #0
 801fe10:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fe14:	f8ad 3018 	strh.w	r3, [sp, #24]
 801fe18:	f8ad 301a 	strh.w	r3, [sp, #26]
 801fe1c:	6803      	ldr	r3, [r0, #0]
 801fe1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fe20:	4798      	blx	r3
 801fe22:	1d29      	adds	r1, r5, #4
 801fe24:	a802      	add	r0, sp, #8
 801fe26:	f7ff fda7 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fe2a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801fe2e:	88e0      	ldrh	r0, [r4, #6]
 801fe30:	eba3 0808 	sub.w	r8, r3, r8
 801fe34:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801fe38:	7921      	ldrb	r1, [r4, #4]
 801fe3a:	fa1f f888 	uxth.w	r8, r8
 801fe3e:	1bdf      	subs	r7, r3, r7
 801fe40:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801fe44:	b2bb      	uxth	r3, r7
 801fe46:	4440      	add	r0, r8
 801fe48:	8922      	ldrh	r2, [r4, #8]
 801fe4a:	8967      	ldrh	r7, [r4, #10]
 801fe4c:	4460      	add	r0, ip
 801fe4e:	89a4      	ldrh	r4, [r4, #12]
 801fe50:	441a      	add	r2, r3
 801fe52:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801fe54:	44b8      	add	r8, r7
 801fe56:	4423      	add	r3, r4
 801fe58:	f8ad 0016 	strh.w	r0, [sp, #22]
 801fe5c:	4432      	add	r2, r6
 801fe5e:	44e0      	add	r8, ip
 801fe60:	4433      	add	r3, r6
 801fe62:	4c0a      	ldr	r4, [pc, #40]	; (801fe8c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801fe64:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801fe66:	f88d 1014 	strb.w	r1, [sp, #20]
 801fe6a:	a904      	add	r1, sp, #16
 801fe6c:	9404      	str	r4, [sp, #16]
 801fe6e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801fe72:	f8ad 801a 	strh.w	r8, [sp, #26]
 801fe76:	f8ad 301c 	strh.w	r3, [sp, #28]
 801fe7a:	6803      	ldr	r3, [r0, #0]
 801fe7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fe7e:	4798      	blx	r3
 801fe80:	b008      	add	sp, #32
 801fe82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe86:	bf00      	nop
 801fe88:	08030700 	.word	0x08030700
 801fe8c:	08030714 	.word	0x08030714

0801fe90 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801fe90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fe92:	4604      	mov	r4, r0
 801fe94:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801fe98:	3201      	adds	r2, #1
 801fe9a:	d112      	bne.n	801fec2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801fe9c:	2500      	movs	r5, #0
 801fe9e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801fea2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801fea6:	6803      	ldr	r3, [r0, #0]
 801fea8:	9500      	str	r5, [sp, #0]
 801feaa:	466d      	mov	r5, sp
 801feac:	f8ad 1004 	strh.w	r1, [sp, #4]
 801feb0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801feb4:	4629      	mov	r1, r5
 801feb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801feb8:	4798      	blx	r3
 801feba:	e895 0003 	ldmia.w	r5, {r0, r1}
 801febe:	e884 0003 	stmia.w	r4, {r0, r1}
 801fec2:	4620      	mov	r0, r4
 801fec4:	b003      	add	sp, #12
 801fec6:	bd30      	pop	{r4, r5, pc}

0801fec8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801fec8:	b513      	push	{r0, r1, r4, lr}
 801feca:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801fece:	4604      	mov	r4, r0
 801fed0:	3301      	adds	r3, #1
 801fed2:	d109      	bne.n	801fee8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801fed4:	4601      	mov	r1, r0
 801fed6:	4668      	mov	r0, sp
 801fed8:	f7ff fd4e 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fedc:	f8bd 3000 	ldrh.w	r3, [sp]
 801fee0:	8423      	strh	r3, [r4, #32]
 801fee2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801fee6:	8463      	strh	r3, [r4, #34]	; 0x22
 801fee8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801feec:	b002      	add	sp, #8
 801feee:	bd10      	pop	{r4, pc}

0801fef0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801fef0:	b513      	push	{r0, r1, r4, lr}
 801fef2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801fef6:	4604      	mov	r4, r0
 801fef8:	3301      	adds	r3, #1
 801fefa:	d109      	bne.n	801ff10 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801fefc:	4601      	mov	r1, r0
 801fefe:	4668      	mov	r0, sp
 801ff00:	f7ff fd3a 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ff04:	f8bd 3000 	ldrh.w	r3, [sp]
 801ff08:	8423      	strh	r3, [r4, #32]
 801ff0a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ff0e:	8463      	strh	r3, [r4, #34]	; 0x22
 801ff10:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801ff14:	b002      	add	sp, #8
 801ff16:	bd10      	pop	{r4, pc}

0801ff18 <_ZN8touchgfx6ScreenC1Ev>:
 801ff18:	b570      	push	{r4, r5, r6, lr}
 801ff1a:	4b17      	ldr	r3, [pc, #92]	; (801ff78 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801ff1c:	4605      	mov	r5, r0
 801ff1e:	4a17      	ldr	r2, [pc, #92]	; (801ff7c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801ff20:	2101      	movs	r1, #1
 801ff22:	f845 3b04 	str.w	r3, [r5], #4
 801ff26:	2300      	movs	r3, #0
 801ff28:	6042      	str	r2, [r0, #4]
 801ff2a:	4604      	mov	r4, r0
 801ff2c:	8103      	strh	r3, [r0, #8]
 801ff2e:	8143      	strh	r3, [r0, #10]
 801ff30:	8183      	strh	r3, [r0, #12]
 801ff32:	81c3      	strh	r3, [r0, #14]
 801ff34:	8203      	strh	r3, [r0, #16]
 801ff36:	8243      	strh	r3, [r0, #18]
 801ff38:	8283      	strh	r3, [r0, #20]
 801ff3a:	82c3      	strh	r3, [r0, #22]
 801ff3c:	6203      	str	r3, [r0, #32]
 801ff3e:	8483      	strh	r3, [r0, #36]	; 0x24
 801ff40:	84c3      	strh	r3, [r0, #38]	; 0x26
 801ff42:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801ff46:	6343      	str	r3, [r0, #52]	; 0x34
 801ff48:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801ff4c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801ff50:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801ff54:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801ff58:	4b09      	ldr	r3, [pc, #36]	; (801ff80 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801ff5a:	4628      	mov	r0, r5
 801ff5c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ff60:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801ff62:	4a08      	ldr	r2, [pc, #32]	; (801ff84 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801ff64:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ff68:	4798      	blx	r3
 801ff6a:	6863      	ldr	r3, [r4, #4]
 801ff6c:	4628      	mov	r0, r5
 801ff6e:	4631      	mov	r1, r6
 801ff70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ff72:	4798      	blx	r3
 801ff74:	4620      	mov	r0, r4
 801ff76:	bd70      	pop	{r4, r5, r6, pc}
 801ff78:	0803073c 	.word	0x0803073c
 801ff7c:	0802e82c 	.word	0x0802e82c
 801ff80:	2400c8b2 	.word	0x2400c8b2
 801ff84:	2400c8b0 	.word	0x2400c8b0

0801ff88 <_ZN8touchgfx6Screen4drawEv>:
 801ff88:	4b09      	ldr	r3, [pc, #36]	; (801ffb0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801ff8a:	b507      	push	{r0, r1, r2, lr}
 801ff8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ff90:	2100      	movs	r1, #0
 801ff92:	4b08      	ldr	r3, [pc, #32]	; (801ffb4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801ff94:	9100      	str	r1, [sp, #0]
 801ff96:	4669      	mov	r1, sp
 801ff98:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ff9c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ffa0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ffa4:	6803      	ldr	r3, [r0, #0]
 801ffa6:	689b      	ldr	r3, [r3, #8]
 801ffa8:	4798      	blx	r3
 801ffaa:	b003      	add	sp, #12
 801ffac:	f85d fb04 	ldr.w	pc, [sp], #4
 801ffb0:	2400c8b0 	.word	0x2400c8b0
 801ffb4:	2400c8b2 	.word	0x2400c8b2

0801ffb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801ffb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffbc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801ffc0:	b089      	sub	sp, #36	; 0x24
 801ffc2:	4680      	mov	r8, r0
 801ffc4:	460c      	mov	r4, r1
 801ffc6:	2b00      	cmp	r3, #0
 801ffc8:	4615      	mov	r5, r2
 801ffca:	dd0e      	ble.n	801ffea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ffcc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801ffd0:	2b00      	cmp	r3, #0
 801ffd2:	dd0a      	ble.n	801ffea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ffd4:	4628      	mov	r0, r5
 801ffd6:	f7ff ff5b 	bl	801fe90 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ffda:	4621      	mov	r1, r4
 801ffdc:	f7f9 ffa2 	bl	8019f24 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ffe0:	69eb      	ldr	r3, [r5, #28]
 801ffe2:	b928      	cbnz	r0, 801fff0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801ffe4:	461d      	mov	r5, r3
 801ffe6:	2b00      	cmp	r3, #0
 801ffe8:	d1f4      	bne.n	801ffd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801ffea:	b009      	add	sp, #36	; 0x24
 801ffec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fff0:	ae04      	add	r6, sp, #16
 801fff2:	2b00      	cmp	r3, #0
 801fff4:	f000 80b5 	beq.w	8020162 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801fff8:	682b      	ldr	r3, [r5, #0]
 801fffa:	4629      	mov	r1, r5
 801fffc:	a802      	add	r0, sp, #8
 801fffe:	68db      	ldr	r3, [r3, #12]
 8020000:	4798      	blx	r3
 8020002:	4628      	mov	r0, r5
 8020004:	f7ff ff60 	bl	801fec8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8020008:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 802000c:	4407      	add	r7, r0
 802000e:	4628      	mov	r0, r5
 8020010:	f7ff ff6e 	bl	801fef0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8020014:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020018:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 802001c:	b23f      	sxth	r7, r7
 802001e:	4418      	add	r0, r3
 8020020:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8020024:	4621      	mov	r1, r4
 8020026:	f8ad 2014 	strh.w	r2, [sp, #20]
 802002a:	f8ad 0012 	strh.w	r0, [sp, #18]
 802002e:	4630      	mov	r0, r6
 8020030:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020034:	f8ad 7010 	strh.w	r7, [sp, #16]
 8020038:	f7f8 f924 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 802003c:	4628      	mov	r0, r5
 802003e:	f7ff ff27 	bl	801fe90 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8020042:	ab06      	add	r3, sp, #24
 8020044:	4602      	mov	r2, r0
 8020046:	e896 0003 	ldmia.w	r6, {r0, r1}
 802004a:	e883 0003 	stmia.w	r3, {r0, r1}
 802004e:	4611      	mov	r1, r2
 8020050:	4618      	mov	r0, r3
 8020052:	f7f8 f917 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 8020056:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802005a:	f9b4 1000 	ldrsh.w	r1, [r4]
 802005e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8020062:	4299      	cmp	r1, r3
 8020064:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8020068:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 802006c:	d10b      	bne.n	8020086 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 802006e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020072:	4552      	cmp	r2, sl
 8020074:	d107      	bne.n	8020086 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8020076:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802007a:	455a      	cmp	r2, fp
 802007c:	d103      	bne.n	8020086 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 802007e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8020082:	454a      	cmp	r2, r9
 8020084:	d06d      	beq.n	8020162 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8020086:	f1bb 0f00 	cmp.w	fp, #0
 802008a:	dd65      	ble.n	8020158 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 802008c:	f1b9 0f00 	cmp.w	r9, #0
 8020090:	dd62      	ble.n	8020158 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8020092:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020096:	fa1f f08a 	uxth.w	r0, sl
 802009a:	4552      	cmp	r2, sl
 802009c:	9000      	str	r0, [sp, #0]
 802009e:	da12      	bge.n	80200c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80200a0:	9301      	str	r3, [sp, #4]
 80200a2:	9b00      	ldr	r3, [sp, #0]
 80200a4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80200a8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80200ac:	1a9a      	subs	r2, r3, r2
 80200ae:	f8ad 1010 	strh.w	r1, [sp, #16]
 80200b2:	4631      	mov	r1, r6
 80200b4:	f8ad 0014 	strh.w	r0, [sp, #20]
 80200b8:	4640      	mov	r0, r8
 80200ba:	f8ad 2016 	strh.w	r2, [sp, #22]
 80200be:	69ea      	ldr	r2, [r5, #28]
 80200c0:	f7ff ff7a 	bl	801ffb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80200c4:	9b01      	ldr	r3, [sp, #4]
 80200c6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80200ca:	b29f      	uxth	r7, r3
 80200cc:	429a      	cmp	r2, r3
 80200ce:	da0d      	bge.n	80200ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80200d0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80200d4:	1aba      	subs	r2, r7, r2
 80200d6:	f8ad a012 	strh.w	sl, [sp, #18]
 80200da:	4631      	mov	r1, r6
 80200dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80200e0:	4640      	mov	r0, r8
 80200e2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80200e6:	69ea      	ldr	r2, [r5, #28]
 80200e8:	f7ff ff66 	bl	801ffb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80200ec:	8822      	ldrh	r2, [r4, #0]
 80200ee:	445f      	add	r7, fp
 80200f0:	88a3      	ldrh	r3, [r4, #4]
 80200f2:	b2bf      	uxth	r7, r7
 80200f4:	4413      	add	r3, r2
 80200f6:	b23a      	sxth	r2, r7
 80200f8:	b29b      	uxth	r3, r3
 80200fa:	b219      	sxth	r1, r3
 80200fc:	4291      	cmp	r1, r2
 80200fe:	dd0d      	ble.n	802011c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8020100:	1bdb      	subs	r3, r3, r7
 8020102:	f8ad 2010 	strh.w	r2, [sp, #16]
 8020106:	f8ad a012 	strh.w	sl, [sp, #18]
 802010a:	4631      	mov	r1, r6
 802010c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8020110:	4640      	mov	r0, r8
 8020112:	f8ad 9016 	strh.w	r9, [sp, #22]
 8020116:	69ea      	ldr	r2, [r5, #28]
 8020118:	f7ff ff4e 	bl	801ffb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 802011c:	88e2      	ldrh	r2, [r4, #6]
 802011e:	8863      	ldrh	r3, [r4, #2]
 8020120:	4413      	add	r3, r2
 8020122:	9a00      	ldr	r2, [sp, #0]
 8020124:	444a      	add	r2, r9
 8020126:	b29b      	uxth	r3, r3
 8020128:	fa1f f982 	uxth.w	r9, r2
 802012c:	b219      	sxth	r1, r3
 802012e:	fa0f f289 	sxth.w	r2, r9
 8020132:	428a      	cmp	r2, r1
 8020134:	da15      	bge.n	8020162 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8020136:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802013a:	eba3 0309 	sub.w	r3, r3, r9
 802013e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020142:	f8ad 1014 	strh.w	r1, [sp, #20]
 8020146:	4631      	mov	r1, r6
 8020148:	f8ad 0010 	strh.w	r0, [sp, #16]
 802014c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8020150:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020154:	69ea      	ldr	r2, [r5, #28]
 8020156:	e001      	b.n	802015c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8020158:	69ea      	ldr	r2, [r5, #28]
 802015a:	4621      	mov	r1, r4
 802015c:	4640      	mov	r0, r8
 802015e:	f7ff ff2b 	bl	801ffb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8020162:	4628      	mov	r0, r5
 8020164:	f7ff fe94 	bl	801fe90 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8020168:	6861      	ldr	r1, [r4, #4]
 802016a:	4602      	mov	r2, r0
 802016c:	4633      	mov	r3, r6
 802016e:	6820      	ldr	r0, [r4, #0]
 8020170:	c303      	stmia	r3!, {r0, r1}
 8020172:	4611      	mov	r1, r2
 8020174:	4630      	mov	r0, r6
 8020176:	f7f8 f885 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 802017a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802017e:	2b00      	cmp	r3, #0
 8020180:	f77f af33 	ble.w	801ffea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8020184:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8020188:	2b00      	cmp	r3, #0
 802018a:	f77f af2e 	ble.w	801ffea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 802018e:	4628      	mov	r0, r5
 8020190:	f7ff fe9a 	bl	801fec8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8020194:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8020198:	1a18      	subs	r0, r3, r0
 802019a:	f8ad 0010 	strh.w	r0, [sp, #16]
 802019e:	4628      	mov	r0, r5
 80201a0:	f7ff fea6 	bl	801fef0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80201a4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80201a8:	4631      	mov	r1, r6
 80201aa:	1a18      	subs	r0, r3, r0
 80201ac:	f8ad 0012 	strh.w	r0, [sp, #18]
 80201b0:	4628      	mov	r0, r5
 80201b2:	682b      	ldr	r3, [r5, #0]
 80201b4:	689b      	ldr	r3, [r3, #8]
 80201b6:	4798      	blx	r3
 80201b8:	e717      	b.n	801ffea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080201ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80201ba:	b570      	push	{r4, r5, r6, lr}
 80201bc:	1d06      	adds	r6, r0, #4
 80201be:	b086      	sub	sp, #24
 80201c0:	460c      	mov	r4, r1
 80201c2:	2300      	movs	r3, #0
 80201c4:	4631      	mov	r1, r6
 80201c6:	4605      	mov	r5, r0
 80201c8:	a802      	add	r0, sp, #8
 80201ca:	9301      	str	r3, [sp, #4]
 80201cc:	f7ff fbd4 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80201d0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80201d4:	8822      	ldrh	r2, [r4, #0]
 80201d6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80201da:	1ad2      	subs	r2, r2, r3
 80201dc:	8863      	ldrh	r3, [r4, #2]
 80201de:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80201e2:	1a5b      	subs	r3, r3, r1
 80201e4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80201e8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80201ec:	aa01      	add	r2, sp, #4
 80201ee:	f8ad 0014 	strh.w	r0, [sp, #20]
 80201f2:	4630      	mov	r0, r6
 80201f4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80201f8:	a904      	add	r1, sp, #16
 80201fa:	f8ad 3012 	strh.w	r3, [sp, #18]
 80201fe:	f7f8 f919 	bl	8018434 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8020202:	9a01      	ldr	r2, [sp, #4]
 8020204:	b11a      	cbz	r2, 802020e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8020206:	4621      	mov	r1, r4
 8020208:	4628      	mov	r0, r5
 802020a:	f7ff fed5 	bl	801ffb8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 802020e:	b006      	add	sp, #24
 8020210:	bd70      	pop	{r4, r5, r6, pc}

08020212 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8020212:	4602      	mov	r2, r0
 8020214:	b530      	push	{r4, r5, lr}
 8020216:	4604      	mov	r4, r0
 8020218:	b085      	sub	sp, #20
 802021a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 802021e:	460d      	mov	r5, r1
 8020220:	466b      	mov	r3, sp
 8020222:	6851      	ldr	r1, [r2, #4]
 8020224:	c303      	stmia	r3!, {r0, r1}
 8020226:	4629      	mov	r1, r5
 8020228:	4668      	mov	r0, sp
 802022a:	f7f8 f82b 	bl	8018284 <_ZN8touchgfx4RectaNERKS0_>
 802022e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8020232:	b12b      	cbz	r3, 8020240 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8020234:	4669      	mov	r1, sp
 8020236:	4620      	mov	r0, r4
 8020238:	f7ff ffbf 	bl	80201ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 802023c:	b005      	add	sp, #20
 802023e:	bd30      	pop	{r4, r5, pc}
 8020240:	3404      	adds	r4, #4
 8020242:	a802      	add	r0, sp, #8
 8020244:	4621      	mov	r1, r4
 8020246:	f7ff fb97 	bl	801f978 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 802024a:	f8bd 3000 	ldrh.w	r3, [sp]
 802024e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8020252:	4669      	mov	r1, sp
 8020254:	4620      	mov	r0, r4
 8020256:	1a9b      	subs	r3, r3, r2
 8020258:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802025c:	f8ad 3000 	strh.w	r3, [sp]
 8020260:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8020264:	1a9b      	subs	r3, r3, r2
 8020266:	f8ad 3002 	strh.w	r3, [sp, #2]
 802026a:	f7f8 f8aa 	bl	80183c2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 802026e:	e7e5      	b.n	802023c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08020270 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8020270:	460b      	mov	r3, r1
 8020272:	680a      	ldr	r2, [r1, #0]
 8020274:	1d01      	adds	r1, r0, #4
 8020276:	6992      	ldr	r2, [r2, #24]
 8020278:	4618      	mov	r0, r3
 802027a:	4710      	bx	r2

0802027c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 802027c:	4298      	cmp	r0, r3
 802027e:	d200      	bcs.n	8020282 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 8020280:	b913      	cbnz	r3, 8020288 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 8020282:	440a      	add	r2, r1
 8020284:	b210      	sxth	r0, r2
 8020286:	4770      	bx	lr
 8020288:	ee07 0a90 	vmov	s15, r0
 802028c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8020290:	ee07 3a90 	vmov	s15, r3
 8020294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802029c:	ee07 2a90 	vmov	s15, r2
 80202a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80202a4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80202a8:	ee07 1a90 	vmov	s15, r1
 80202ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80202b0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80202b4:	ee67 5a07 	vmul.f32	s11, s14, s14
 80202b8:	eee5 6a87 	vfma.f32	s13, s11, s14
 80202bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80202c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80202c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80202c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202cc:	bfcc      	ite	gt
 80202ce:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80202d2:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80202d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80202da:	ee17 3a90 	vmov	r3, s15
 80202de:	b218      	sxth	r0, r3
 80202e0:	4770      	bx	lr

080202e2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 80202e2:	4298      	cmp	r0, r3
 80202e4:	d200      	bcs.n	80202e8 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 80202e6:	b913      	cbnz	r3, 80202ee <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 80202e8:	440a      	add	r2, r1
 80202ea:	b210      	sxth	r0, r2
 80202ec:	4770      	bx	lr
 80202ee:	ee07 2a90 	vmov	s15, r2
 80202f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80202f6:	ee07 0a90 	vmov	s15, r0
 80202fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80202fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020302:	ee07 3a10 	vmov	s14, r3
 8020306:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 802030a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 802030e:	ee07 1a90 	vmov	s15, r1
 8020312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020316:	ee77 7a27 	vadd.f32	s15, s14, s15
 802031a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802031e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020326:	bfcc      	ite	gt
 8020328:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 802032c:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 8020330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020334:	ee17 3a90 	vmov	r3, s15
 8020338:	b218      	sxth	r0, r3
 802033a:	4770      	bx	lr

0802033c <_ZN8touchgfx15EasingEquations12linearEaseInEtsst>:
 802033c:	f7ff bfd1 	b.w	80202e2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

08020340 <_ZN8touchgfx12TextProviderC1Ev>:
 8020340:	b538      	push	{r3, r4, r5, lr}
 8020342:	2500      	movs	r5, #0
 8020344:	2302      	movs	r3, #2
 8020346:	4604      	mov	r4, r0
 8020348:	220e      	movs	r2, #14
 802034a:	7403      	strb	r3, [r0, #16]
 802034c:	4629      	mov	r1, r5
 802034e:	6145      	str	r5, [r0, #20]
 8020350:	7605      	strb	r5, [r0, #24]
 8020352:	83c5      	strh	r5, [r0, #30]
 8020354:	8405      	strh	r5, [r0, #32]
 8020356:	86c5      	strh	r5, [r0, #54]	; 0x36
 8020358:	8705      	strh	r5, [r0, #56]	; 0x38
 802035a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 802035c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8020360:	e9c0 5500 	strd	r5, r5, [r0]
 8020364:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8020368:	304c      	adds	r0, #76	; 0x4c
 802036a:	f00b fb09 	bl	802b980 <memset>
 802036e:	2301      	movs	r3, #1
 8020370:	4620      	mov	r0, r4
 8020372:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8020376:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 802037a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 802037e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8020382:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8020386:	f7e7 ffa3 	bl	80082d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 802038a:	4620      	mov	r0, r4
 802038c:	bd38      	pop	{r3, r4, r5, pc}

0802038e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 802038e:	b530      	push	{r4, r5, lr}
 8020390:	2500      	movs	r5, #0
 8020392:	2401      	movs	r4, #1
 8020394:	6843      	ldr	r3, [r0, #4]
 8020396:	b913      	cbnz	r3, 802039e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8020398:	6803      	ldr	r3, [r0, #0]
 802039a:	b313      	cbz	r3, 80203e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 802039c:	6043      	str	r3, [r0, #4]
 802039e:	7e03      	ldrb	r3, [r0, #24]
 80203a0:	b143      	cbz	r3, 80203b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80203a2:	6943      	ldr	r3, [r0, #20]
 80203a4:	b12b      	cbz	r3, 80203b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80203a6:	881a      	ldrh	r2, [r3, #0]
 80203a8:	b11a      	cbz	r2, 80203b2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80203aa:	1c9a      	adds	r2, r3, #2
 80203ac:	6142      	str	r2, [r0, #20]
 80203ae:	8818      	ldrh	r0, [r3, #0]
 80203b0:	bd30      	pop	{r4, r5, pc}
 80203b2:	7605      	strb	r5, [r0, #24]
 80203b4:	6843      	ldr	r3, [r0, #4]
 80203b6:	8819      	ldrh	r1, [r3, #0]
 80203b8:	b199      	cbz	r1, 80203e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80203ba:	1c9a      	adds	r2, r3, #2
 80203bc:	2902      	cmp	r1, #2
 80203be:	6042      	str	r2, [r0, #4]
 80203c0:	d1f5      	bne.n	80203ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80203c2:	7c03      	ldrb	r3, [r0, #16]
 80203c4:	2b01      	cmp	r3, #1
 80203c6:	d8e5      	bhi.n	8020394 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80203c8:	1c5a      	adds	r2, r3, #1
 80203ca:	3302      	adds	r3, #2
 80203cc:	7402      	strb	r2, [r0, #16]
 80203ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80203d2:	6143      	str	r3, [r0, #20]
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	d0dd      	beq.n	8020394 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80203d8:	881b      	ldrh	r3, [r3, #0]
 80203da:	2b00      	cmp	r3, #0
 80203dc:	d0da      	beq.n	8020394 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80203de:	7604      	strb	r4, [r0, #24]
 80203e0:	e7d8      	b.n	8020394 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80203e2:	2000      	movs	r0, #0
 80203e4:	e7e4      	b.n	80203b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080203e6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80203e6:	b430      	push	{r4, r5}
 80203e8:	6815      	ldr	r5, [r2, #0]
 80203ea:	6085      	str	r5, [r0, #8]
 80203ec:	6852      	ldr	r2, [r2, #4]
 80203ee:	6443      	str	r3, [r0, #68]	; 0x44
 80203f0:	60c2      	str	r2, [r0, #12]
 80203f2:	2200      	movs	r2, #0
 80203f4:	9b02      	ldr	r3, [sp, #8]
 80203f6:	7402      	strb	r2, [r0, #16]
 80203f8:	6001      	str	r1, [r0, #0]
 80203fa:	6483      	str	r3, [r0, #72]	; 0x48
 80203fc:	6042      	str	r2, [r0, #4]
 80203fe:	6142      	str	r2, [r0, #20]
 8020400:	7602      	strb	r2, [r0, #24]
 8020402:	8702      	strh	r2, [r0, #56]	; 0x38
 8020404:	8402      	strh	r2, [r0, #32]
 8020406:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 802040a:	bc30      	pop	{r4, r5}
 802040c:	f7e7 bf60 	b.w	80082d0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08020410 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8020410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020412:	4605      	mov	r5, r0
 8020414:	4608      	mov	r0, r1
 8020416:	b1f1      	cbz	r1, 8020456 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8020418:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 802041c:	460b      	mov	r3, r1
 802041e:	f101 0708 	add.w	r7, r1, #8
 8020422:	4622      	mov	r2, r4
 8020424:	6818      	ldr	r0, [r3, #0]
 8020426:	3308      	adds	r3, #8
 8020428:	f853 1c04 	ldr.w	r1, [r3, #-4]
 802042c:	4626      	mov	r6, r4
 802042e:	42bb      	cmp	r3, r7
 8020430:	c603      	stmia	r6!, {r0, r1}
 8020432:	4634      	mov	r4, r6
 8020434:	d1f6      	bne.n	8020424 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8020436:	6818      	ldr	r0, [r3, #0]
 8020438:	6030      	str	r0, [r6, #0]
 802043a:	4610      	mov	r0, r2
 802043c:	889b      	ldrh	r3, [r3, #4]
 802043e:	80b3      	strh	r3, [r6, #4]
 8020440:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8020444:	015b      	lsls	r3, r3, #5
 8020446:	f403 7180 	and.w	r1, r3, #256	; 0x100
 802044a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 802044e:	430b      	orrs	r3, r1
 8020450:	425b      	negs	r3, r3
 8020452:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8020456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020458 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8020458:	b538      	push	{r3, r4, r5, lr}
 802045a:	460c      	mov	r4, r1
 802045c:	6811      	ldr	r1, [r2, #0]
 802045e:	4610      	mov	r0, r2
 8020460:	68cd      	ldr	r5, [r1, #12]
 8020462:	4619      	mov	r1, r3
 8020464:	47a8      	blx	r5
 8020466:	2800      	cmp	r0, #0
 8020468:	bf08      	it	eq
 802046a:	4620      	moveq	r0, r4
 802046c:	bd38      	pop	{r3, r4, r5, pc}
	...

08020470 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8020470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020472:	4604      	mov	r4, r0
 8020474:	4615      	mov	r5, r2
 8020476:	4608      	mov	r0, r1
 8020478:	b93a      	cbnz	r2, 802048a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 802047a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 802047e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8020482:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8020486:	4628      	mov	r0, r5
 8020488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802048a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 802048e:	8893      	ldrh	r3, [r2, #4]
 8020490:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8020494:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8020498:	79ee      	ldrb	r6, [r5, #7]
 802049a:	4316      	orrs	r6, r2
 802049c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 80204a0:	189a      	adds	r2, r3, r2
 80204a2:	b2b7      	uxth	r7, r6
 80204a4:	b291      	uxth	r1, r2
 80204a6:	291d      	cmp	r1, #29
 80204a8:	f200 8084 	bhi.w	80205b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80204ac:	2201      	movs	r2, #1
 80204ae:	10f6      	asrs	r6, r6, #3
 80204b0:	408a      	lsls	r2, r1
 80204b2:	4978      	ldr	r1, [pc, #480]	; (8020694 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 80204b4:	420a      	tst	r2, r1
 80204b6:	d12e      	bne.n	8020516 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 80204b8:	f412 7f60 	tst.w	r2, #896	; 0x380
 80204bc:	d07a      	beq.n	80205b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 80204be:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80204c2:	462b      	mov	r3, r5
 80204c4:	f105 0e08 	add.w	lr, r5, #8
 80204c8:	4615      	mov	r5, r2
 80204ca:	6818      	ldr	r0, [r3, #0]
 80204cc:	3308      	adds	r3, #8
 80204ce:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80204d2:	4694      	mov	ip, r2
 80204d4:	4573      	cmp	r3, lr
 80204d6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80204da:	4662      	mov	r2, ip
 80204dc:	d1f5      	bne.n	80204ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 80204de:	6818      	ldr	r0, [r3, #0]
 80204e0:	f8cc 0000 	str.w	r0, [ip]
 80204e4:	889b      	ldrh	r3, [r3, #4]
 80204e6:	f8ac 3004 	strh.w	r3, [ip, #4]
 80204ea:	b2b3      	uxth	r3, r6
 80204ec:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80204f0:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80204f4:	1aca      	subs	r2, r1, r3
 80204f6:	1bcf      	subs	r7, r1, r7
 80204f8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80204fc:	b292      	uxth	r2, r2
 80204fe:	1afb      	subs	r3, r7, r3
 8020500:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8020504:	10d2      	asrs	r2, r2, #3
 8020506:	f002 0260 	and.w	r2, r2, #96	; 0x60
 802050a:	4302      	orrs	r2, r0
 802050c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8020510:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8020514:	e7b7      	b.n	8020486 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8020516:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020518:	b92b      	cbnz	r3, 8020526 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 802051a:	4b5f      	ldr	r3, [pc, #380]	; (8020698 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 802051c:	21c0      	movs	r1, #192	; 0xc0
 802051e:	4a5f      	ldr	r2, [pc, #380]	; (802069c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8020520:	485f      	ldr	r0, [pc, #380]	; (80206a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8020522:	f00b f9a1 	bl	802b868 <__assert_func>
 8020526:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8020528:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802052c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 802052e:	f640 6333 	movw	r3, #3635	; 0xe33
 8020532:	4299      	cmp	r1, r3
 8020534:	d110      	bne.n	8020558 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8020536:	6803      	ldr	r3, [r0, #0]
 8020538:	68db      	ldr	r3, [r3, #12]
 802053a:	4798      	blx	r3
 802053c:	7b41      	ldrb	r1, [r0, #13]
 802053e:	00cb      	lsls	r3, r1, #3
 8020540:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020544:	7a03      	ldrb	r3, [r0, #8]
 8020546:	0648      	lsls	r0, r1, #25
 8020548:	ea43 0302 	orr.w	r3, r3, r2
 802054c:	bf44      	itt	mi
 802054e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020552:	b21b      	sxthmi	r3, r3
 8020554:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8020558:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 802055c:	462a      	mov	r2, r5
 802055e:	f105 0c08 	add.w	ip, r5, #8
 8020562:	443b      	add	r3, r7
 8020564:	4433      	add	r3, r6
 8020566:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 802056a:	b29b      	uxth	r3, r3
 802056c:	4635      	mov	r5, r6
 802056e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8020572:	6810      	ldr	r0, [r2, #0]
 8020574:	3208      	adds	r2, #8
 8020576:	f852 1c04 	ldr.w	r1, [r2, #-4]
 802057a:	4637      	mov	r7, r6
 802057c:	4562      	cmp	r2, ip
 802057e:	c703      	stmia	r7!, {r0, r1}
 8020580:	463e      	mov	r6, r7
 8020582:	d1f6      	bne.n	8020572 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8020584:	6810      	ldr	r0, [r2, #0]
 8020586:	6038      	str	r0, [r7, #0]
 8020588:	8892      	ldrh	r2, [r2, #4]
 802058a:	80ba      	strh	r2, [r7, #4]
 802058c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8020590:	10db      	asrs	r3, r3, #3
 8020592:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8020596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802059a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 802059e:	4313      	orrs	r3, r2
 80205a0:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80205a4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80205a8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80205ac:	1a9b      	subs	r3, r3, r2
 80205ae:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80205b2:	e768      	b.n	8020486 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80205b4:	f023 0204 	bic.w	r2, r3, #4
 80205b8:	f640 611b 	movw	r1, #3611	; 0xe1b
 80205bc:	428a      	cmp	r2, r1
 80205be:	d003      	beq.n	80205c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 80205c0:	f640 621d 	movw	r2, #3613	; 0xe1d
 80205c4:	4293      	cmp	r3, r2
 80205c6:	d120      	bne.n	802060a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 80205c8:	3b01      	subs	r3, #1
 80205ca:	4602      	mov	r2, r0
 80205cc:	4629      	mov	r1, r5
 80205ce:	4620      	mov	r0, r4
 80205d0:	b29b      	uxth	r3, r3
 80205d2:	f7ff ff41 	bl	8020458 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80205d6:	7b41      	ldrb	r1, [r0, #13]
 80205d8:	00cb      	lsls	r3, r1, #3
 80205da:	0649      	lsls	r1, r1, #25
 80205dc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80205e0:	7a03      	ldrb	r3, [r0, #8]
 80205e2:	ea43 0302 	orr.w	r3, r3, r2
 80205e6:	bf44      	itt	mi
 80205e8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80205ec:	b21b      	sxthmi	r3, r3
 80205ee:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80205f2:	7b6b      	ldrb	r3, [r5, #13]
 80205f4:	7aaa      	ldrb	r2, [r5, #10]
 80205f6:	005b      	lsls	r3, r3, #1
 80205f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80205fc:	4313      	orrs	r3, r2
 80205fe:	115a      	asrs	r2, r3, #5
 8020600:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8020604:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8020608:	e035      	b.n	8020676 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 802060a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 802060e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8020612:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8020616:	7a2a      	ldrb	r2, [r5, #8]
 8020618:	ea42 0201 	orr.w	r2, r2, r1
 802061c:	f640 6109 	movw	r1, #3593	; 0xe09
 8020620:	bf1c      	itt	ne
 8020622:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8020626:	b212      	sxthne	r2, r2
 8020628:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 802062c:	f023 0210 	bic.w	r2, r3, #16
 8020630:	428a      	cmp	r2, r1
 8020632:	d003      	beq.n	802063c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8020634:	f640 6213 	movw	r2, #3603	; 0xe13
 8020638:	4293      	cmp	r3, r2
 802063a:	d129      	bne.n	8020690 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 802063c:	7b6e      	ldrb	r6, [r5, #13]
 802063e:	4629      	mov	r1, r5
 8020640:	0076      	lsls	r6, r6, #1
 8020642:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8020646:	7aae      	ldrb	r6, [r5, #10]
 8020648:	4316      	orrs	r6, r2
 802064a:	f640 6213 	movw	r2, #3603	; 0xe13
 802064e:	4293      	cmp	r3, r2
 8020650:	4602      	mov	r2, r0
 8020652:	4620      	mov	r0, r4
 8020654:	bf16      	itet	ne
 8020656:	f103 33ff 	addne.w	r3, r3, #4294967295
 802065a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 802065e:	b29b      	uxthne	r3, r3
 8020660:	f7ff fefa 	bl	8020458 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8020664:	7b43      	ldrb	r3, [r0, #13]
 8020666:	7a82      	ldrb	r2, [r0, #10]
 8020668:	005b      	lsls	r3, r3, #1
 802066a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802066e:	4313      	orrs	r3, r2
 8020670:	1af6      	subs	r6, r6, r3
 8020672:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8020676:	7b69      	ldrb	r1, [r5, #13]
 8020678:	00cb      	lsls	r3, r1, #3
 802067a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 802067e:	7a2b      	ldrb	r3, [r5, #8]
 8020680:	4313      	orrs	r3, r2
 8020682:	064a      	lsls	r2, r1, #25
 8020684:	bf44      	itt	mi
 8020686:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 802068a:	b21b      	sxthmi	r3, r3
 802068c:	1bdb      	subs	r3, r3, r7
 802068e:	e73f      	b.n	8020510 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8020690:	2300      	movs	r3, #0
 8020692:	e7b7      	b.n	8020604 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8020694:	3fc00079 	.word	0x3fc00079
 8020698:	08030768 	.word	0x08030768
 802069c:	080309da 	.word	0x080309da
 80206a0:	08030771 	.word	0x08030771

080206a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80206a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80206a8:	4604      	mov	r4, r0
 80206aa:	b942      	cbnz	r2, 80206be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80206ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80206b0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80206b4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80206b8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80206bc:	e046      	b.n	802074c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 80206be:	7b51      	ldrb	r1, [r2, #13]
 80206c0:	8893      	ldrh	r3, [r2, #4]
 80206c2:	010f      	lsls	r7, r1, #4
 80206c4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80206c8:	79d7      	ldrb	r7, [r2, #7]
 80206ca:	4307      	orrs	r7, r0
 80206cc:	2f04      	cmp	r7, #4
 80206ce:	b2bd      	uxth	r5, r7
 80206d0:	bfcc      	ite	gt
 80206d2:	08bf      	lsrgt	r7, r7, #2
 80206d4:	2701      	movle	r7, #1
 80206d6:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80206da:	f200 80ab 	bhi.w	8020834 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80206de:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80206e2:	4283      	cmp	r3, r0
 80206e4:	d216      	bcs.n	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80206e6:	f240 605b 	movw	r0, #1627	; 0x65b
 80206ea:	4283      	cmp	r3, r0
 80206ec:	d859      	bhi.n	80207a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80206ee:	f240 6057 	movw	r0, #1623	; 0x657
 80206f2:	4283      	cmp	r3, r0
 80206f4:	d20e      	bcs.n	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80206f6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80206fa:	d24a      	bcs.n	8020792 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80206fc:	f240 604e 	movw	r0, #1614	; 0x64e
 8020700:	4283      	cmp	r3, r0
 8020702:	d207      	bcs.n	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020704:	f240 601a 	movw	r0, #1562	; 0x61a
 8020708:	4283      	cmp	r3, r0
 802070a:	d02a      	beq.n	8020762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 802070c:	d821      	bhi.n	8020752 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 802070e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8020712:	d35b      	bcc.n	80207cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8020714:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8020718:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802071c:	f040 80d0 	bne.w	80208c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8020720:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8020724:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8020728:	f040 80ca 	bne.w	80208c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 802072c:	00cb      	lsls	r3, r1, #3
 802072e:	0649      	lsls	r1, r1, #25
 8020730:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8020734:	7a13      	ldrb	r3, [r2, #8]
 8020736:	ea43 0300 	orr.w	r3, r3, r0
 802073a:	bf44      	itt	mi
 802073c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020740:	b21b      	sxthmi	r3, r3
 8020742:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8020746:	1b5d      	subs	r5, r3, r5
 8020748:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 802074c:	4610      	mov	r0, r2
 802074e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020752:	f240 604b 	movw	r0, #1611	; 0x64b
 8020756:	4283      	cmp	r3, r0
 8020758:	d338      	bcc.n	80207cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 802075a:	f240 604c 	movw	r0, #1612	; 0x64c
 802075e:	4283      	cmp	r3, r0
 8020760:	d9d8      	bls.n	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020762:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8020766:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 802076a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 802076e:	f040 80f2 	bne.w	8020956 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8020772:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8020776:	f040 80ee 	bne.w	8020956 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 802077a:	00cb      	lsls	r3, r1, #3
 802077c:	064e      	lsls	r6, r1, #25
 802077e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8020782:	7a13      	ldrb	r3, [r2, #8]
 8020784:	ea43 0300 	orr.w	r3, r3, r0
 8020788:	bf44      	itt	mi
 802078a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 802078e:	b21b      	sxthmi	r3, r3
 8020790:	e7d9      	b.n	8020746 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8020792:	f240 6054 	movw	r0, #1620	; 0x654
 8020796:	4283      	cmp	r3, r0
 8020798:	d8e3      	bhi.n	8020762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 802079a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 802079e:	d9e0      	bls.n	8020762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80207a0:	e7b8      	b.n	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80207a2:	f240 6074 	movw	r0, #1652	; 0x674
 80207a6:	4283      	cmp	r3, r0
 80207a8:	d0b4      	beq.n	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80207aa:	d82d      	bhi.n	8020808 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 80207ac:	f240 605e 	movw	r0, #1630	; 0x65e
 80207b0:	4283      	cmp	r3, r0
 80207b2:	d804      	bhi.n	80207be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 80207b4:	f240 605d 	movw	r0, #1629	; 0x65d
 80207b8:	4283      	cmp	r3, r0
 80207ba:	d3d2      	bcc.n	8020762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80207bc:	e7aa      	b.n	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80207be:	f240 605f 	movw	r0, #1631	; 0x65f
 80207c2:	4283      	cmp	r3, r0
 80207c4:	d0cd      	beq.n	8020762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80207c6:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80207ca:	d0a3      	beq.n	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80207cc:	00cb      	lsls	r3, r1, #3
 80207ce:	0649      	lsls	r1, r1, #25
 80207d0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80207d4:	7a13      	ldrb	r3, [r2, #8]
 80207d6:	ea43 0300 	orr.w	r3, r3, r0
 80207da:	bf44      	itt	mi
 80207dc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80207e0:	b21b      	sxthmi	r3, r3
 80207e2:	1b5d      	subs	r5, r3, r5
 80207e4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80207e8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80207ec:	7b53      	ldrb	r3, [r2, #13]
 80207ee:	015b      	lsls	r3, r3, #5
 80207f0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80207f4:	7993      	ldrb	r3, [r2, #6]
 80207f6:	430b      	orrs	r3, r1
 80207f8:	2105      	movs	r1, #5
 80207fa:	005b      	lsls	r3, r3, #1
 80207fc:	fb93 f3f1 	sdiv	r3, r3, r1
 8020800:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8020804:	440b      	add	r3, r1
 8020806:	e757      	b.n	80206b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8020808:	f240 60e2 	movw	r0, #1762	; 0x6e2
 802080c:	4283      	cmp	r3, r0
 802080e:	d809      	bhi.n	8020824 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 8020810:	f240 60df 	movw	r0, #1759	; 0x6df
 8020814:	4283      	cmp	r3, r0
 8020816:	f4bf af7d 	bcs.w	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 802081a:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 802081e:	2b05      	cmp	r3, #5
 8020820:	d8d4      	bhi.n	80207cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8020822:	e777      	b.n	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020824:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8020828:	4283      	cmp	r3, r0
 802082a:	d09a      	beq.n	8020762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 802082c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8020830:	4283      	cmp	r3, r0
 8020832:	e7ca      	b.n	80207ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 8020834:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8020838:	d22b      	bcs.n	8020892 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 802083a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 802083e:	4283      	cmp	r3, r0
 8020840:	d28f      	bcs.n	8020762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020842:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8020846:	4283      	cmp	r3, r0
 8020848:	d816      	bhi.n	8020878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 802084a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 802084e:	4283      	cmp	r3, r0
 8020850:	f4bf af60 	bcs.w	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020854:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8020858:	4283      	cmp	r3, r0
 802085a:	d80a      	bhi.n	8020872 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 802085c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8020860:	4283      	cmp	r3, r0
 8020862:	f4bf af57 	bcs.w	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020866:	f240 60ea 	movw	r0, #1770	; 0x6ea
 802086a:	4283      	cmp	r3, r0
 802086c:	f43f af79 	beq.w	8020762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020870:	e7ac      	b.n	80207cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8020872:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8020876:	e7f8      	b.n	802086a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8020878:	f640 00e8 	movw	r0, #2280	; 0x8e8
 802087c:	4283      	cmp	r3, r0
 802087e:	d802      	bhi.n	8020886 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8020880:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8020884:	e798      	b.n	80207b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8020886:	f640 00e9 	movw	r0, #2281	; 0x8e9
 802088a:	4283      	cmp	r3, r0
 802088c:	f47f af42 	bne.w	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8020890:	e767      	b.n	8020762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8020892:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8020896:	4283      	cmp	r3, r0
 8020898:	f43f af63 	beq.w	8020762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 802089c:	d802      	bhi.n	80208a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 802089e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80208a2:	e7f2      	b.n	802088a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 80208a4:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80208a8:	4283      	cmp	r3, r0
 80208aa:	d805      	bhi.n	80208b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 80208ac:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80208b0:	4283      	cmp	r3, r0
 80208b2:	f4ff af2f 	bcc.w	8020714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80208b6:	e754      	b.n	8020762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80208b8:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80208bc:	4283      	cmp	r3, r0
 80208be:	e7af      	b.n	8020820 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 80208c0:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80208c4:	4617      	mov	r7, r2
 80208c6:	f102 0808 	add.w	r8, r2, #8
 80208ca:	4666      	mov	r6, ip
 80208cc:	6838      	ldr	r0, [r7, #0]
 80208ce:	3708      	adds	r7, #8
 80208d0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80208d4:	46e6      	mov	lr, ip
 80208d6:	4547      	cmp	r7, r8
 80208d8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80208dc:	46f4      	mov	ip, lr
 80208de:	d1f5      	bne.n	80208cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80208e0:	6838      	ldr	r0, [r7, #0]
 80208e2:	f8ce 0000 	str.w	r0, [lr]
 80208e6:	88b9      	ldrh	r1, [r7, #4]
 80208e8:	f8ae 1004 	strh.w	r1, [lr, #4]
 80208ec:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80208f0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80208f4:	d009      	beq.n	802090a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80208f6:	7b51      	ldrb	r1, [r2, #13]
 80208f8:	7992      	ldrb	r2, [r2, #6]
 80208fa:	0149      	lsls	r1, r1, #5
 80208fc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8020900:	4311      	orrs	r1, r2
 8020902:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8020906:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 802090a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802090e:	d00d      	beq.n	802092c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 8020910:	442b      	add	r3, r5
 8020912:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8020916:	b29b      	uxth	r3, r3
 8020918:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 802091c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8020920:	10db      	asrs	r3, r3, #3
 8020922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8020926:	4313      	orrs	r3, r2
 8020928:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802092c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8020930:	00cb      	lsls	r3, r1, #3
 8020932:	064f      	lsls	r7, r1, #25
 8020934:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020938:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 802093c:	ea43 0302 	orr.w	r3, r3, r2
 8020940:	bf44      	itt	mi
 8020942:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020946:	b21b      	sxthmi	r3, r3
 8020948:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 802094c:	1b5d      	subs	r5, r3, r5
 802094e:	4632      	mov	r2, r6
 8020950:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8020954:	e6fa      	b.n	802074c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8020956:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 802095a:	4694      	mov	ip, r2
 802095c:	f102 0908 	add.w	r9, r2, #8
 8020960:	4676      	mov	r6, lr
 8020962:	f8dc 0000 	ldr.w	r0, [ip]
 8020966:	f10c 0c08 	add.w	ip, ip, #8
 802096a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 802096e:	46f0      	mov	r8, lr
 8020970:	45cc      	cmp	ip, r9
 8020972:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8020976:	46c6      	mov	lr, r8
 8020978:	d1f3      	bne.n	8020962 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 802097a:	f8dc 0000 	ldr.w	r0, [ip]
 802097e:	f8c8 0000 	str.w	r0, [r8]
 8020982:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8020986:	f8a8 1004 	strh.w	r1, [r8, #4]
 802098a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 802098e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8020992:	d009      	beq.n	80209a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8020994:	7b51      	ldrb	r1, [r2, #13]
 8020996:	7992      	ldrb	r2, [r2, #6]
 8020998:	0149      	lsls	r1, r1, #5
 802099a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 802099e:	4311      	orrs	r1, r2
 80209a0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80209a4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80209a8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80209ac:	d00d      	beq.n	80209ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 80209ae:	1bdb      	subs	r3, r3, r7
 80209b0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80209b4:	b29b      	uxth	r3, r3
 80209b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80209ba:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80209be:	10db      	asrs	r3, r3, #3
 80209c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80209c4:	4313      	orrs	r3, r2
 80209c6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80209ca:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80209ce:	00cb      	lsls	r3, r1, #3
 80209d0:	0648      	lsls	r0, r1, #25
 80209d2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80209d6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80209da:	ea43 0302 	orr.w	r3, r3, r2
 80209de:	bf44      	itt	mi
 80209e0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80209e4:	b21b      	sxthmi	r3, r3
 80209e6:	e7b1      	b.n	802094c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080209e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80209e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80209ec:	461e      	mov	r6, r3
 80209ee:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80209f0:	4604      	mov	r4, r0
 80209f2:	4617      	mov	r7, r2
 80209f4:	b92b      	cbnz	r3, 8020a02 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80209f6:	4b25      	ldr	r3, [pc, #148]	; (8020a8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80209f8:	21c0      	movs	r1, #192	; 0xc0
 80209fa:	4a25      	ldr	r2, [pc, #148]	; (8020a90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80209fc:	4825      	ldr	r0, [pc, #148]	; (8020a94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80209fe:	f00a ff33 	bl	802b868 <__assert_func>
 8020a02:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8020a04:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020a08:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8020a0c:	f7e7 fbba 	bl	8008184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020a10:	4605      	mov	r5, r0
 8020a12:	b918      	cbnz	r0, 8020a1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 8020a14:	6030      	str	r0, [r6, #0]
 8020a16:	4628      	mov	r0, r5
 8020a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a1c:	683b      	ldr	r3, [r7, #0]
 8020a1e:	4601      	mov	r1, r0
 8020a20:	4638      	mov	r0, r7
 8020a22:	68db      	ldr	r3, [r3, #12]
 8020a24:	4798      	blx	r3
 8020a26:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8020a2a:	4602      	mov	r2, r0
 8020a2c:	6030      	str	r0, [r6, #0]
 8020a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8020a32:	d213      	bcs.n	8020a5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8020a34:	4643      	mov	r3, r8
 8020a36:	4639      	mov	r1, r7
 8020a38:	4620      	mov	r0, r4
 8020a3a:	f7ff fe33 	bl	80206a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8020a3e:	6030      	str	r0, [r6, #0]
 8020a40:	6833      	ldr	r3, [r6, #0]
 8020a42:	b143      	cbz	r3, 8020a56 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8020a44:	7b5a      	ldrb	r2, [r3, #13]
 8020a46:	7a9b      	ldrb	r3, [r3, #10]
 8020a48:	0052      	lsls	r2, r2, #1
 8020a4a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8020a4e:	4313      	orrs	r3, r2
 8020a50:	bf0c      	ite	eq
 8020a52:	2301      	moveq	r3, #1
 8020a54:	2300      	movne	r3, #0
 8020a56:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8020a5a:	e7dc      	b.n	8020a16 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8020a5c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8020a60:	b29b      	uxth	r3, r3
 8020a62:	2b7f      	cmp	r3, #127	; 0x7f
 8020a64:	d804      	bhi.n	8020a70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8020a66:	4639      	mov	r1, r7
 8020a68:	4620      	mov	r0, r4
 8020a6a:	f7ff fd01 	bl	8020470 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8020a6e:	e7e6      	b.n	8020a3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8020a70:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d0e3      	beq.n	8020a40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8020a78:	f640 1302 	movw	r3, #2306	; 0x902
 8020a7c:	429d      	cmp	r5, r3
 8020a7e:	d1df      	bne.n	8020a40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8020a80:	4601      	mov	r1, r0
 8020a82:	4620      	mov	r0, r4
 8020a84:	f7ff fcc4 	bl	8020410 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020a88:	e7d9      	b.n	8020a3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8020a8a:	bf00      	nop
 8020a8c:	08030768 	.word	0x08030768
 8020a90:	080309da 	.word	0x080309da
 8020a94:	08030771 	.word	0x08030771

08020a98 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8020a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020a9c:	461e      	mov	r6, r3
 8020a9e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8020aa0:	4604      	mov	r4, r0
 8020aa2:	4617      	mov	r7, r2
 8020aa4:	b92b      	cbnz	r3, 8020ab2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8020aa6:	4b26      	ldr	r3, [pc, #152]	; (8020b40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8020aa8:	21c0      	movs	r1, #192	; 0xc0
 8020aaa:	4a26      	ldr	r2, [pc, #152]	; (8020b44 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 8020aac:	4826      	ldr	r0, [pc, #152]	; (8020b48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 8020aae:	f00a fedb 	bl	802b868 <__assert_func>
 8020ab2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8020ab4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020ab8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8020abc:	f7e7 fb62 	bl	8008184 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020ac0:	4605      	mov	r5, r0
 8020ac2:	b918      	cbnz	r0, 8020acc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8020ac4:	6030      	str	r0, [r6, #0]
 8020ac6:	4628      	mov	r0, r5
 8020ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020acc:	683b      	ldr	r3, [r7, #0]
 8020ace:	4601      	mov	r1, r0
 8020ad0:	4638      	mov	r0, r7
 8020ad2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8020ad6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8020ada:	47c8      	blx	r9
 8020adc:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8020ae0:	4602      	mov	r2, r0
 8020ae2:	6030      	str	r0, [r6, #0]
 8020ae4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8020ae8:	d213      	bcs.n	8020b12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 8020aea:	4643      	mov	r3, r8
 8020aec:	4639      	mov	r1, r7
 8020aee:	4620      	mov	r0, r4
 8020af0:	f7ff fdd8 	bl	80206a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8020af4:	6030      	str	r0, [r6, #0]
 8020af6:	6833      	ldr	r3, [r6, #0]
 8020af8:	b143      	cbz	r3, 8020b0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 8020afa:	7b5a      	ldrb	r2, [r3, #13]
 8020afc:	7a9b      	ldrb	r3, [r3, #10]
 8020afe:	0052      	lsls	r2, r2, #1
 8020b00:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8020b04:	4313      	orrs	r3, r2
 8020b06:	bf0c      	ite	eq
 8020b08:	2301      	moveq	r3, #1
 8020b0a:	2300      	movne	r3, #0
 8020b0c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8020b10:	e7d9      	b.n	8020ac6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 8020b12:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8020b16:	b29b      	uxth	r3, r3
 8020b18:	2b7f      	cmp	r3, #127	; 0x7f
 8020b1a:	d804      	bhi.n	8020b26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 8020b1c:	4639      	mov	r1, r7
 8020b1e:	4620      	mov	r0, r4
 8020b20:	f7ff fca6 	bl	8020470 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8020b24:	e7e6      	b.n	8020af4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8020b26:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8020b2a:	2b00      	cmp	r3, #0
 8020b2c:	d0e3      	beq.n	8020af6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8020b2e:	f640 1302 	movw	r3, #2306	; 0x902
 8020b32:	429d      	cmp	r5, r3
 8020b34:	d1df      	bne.n	8020af6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 8020b36:	4601      	mov	r1, r0
 8020b38:	4620      	mov	r0, r4
 8020b3a:	f7ff fc69 	bl	8020410 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020b3e:	e7d9      	b.n	8020af4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8020b40:	08030768 	.word	0x08030768
 8020b44:	080309da 	.word	0x080309da
 8020b48:	08030771 	.word	0x08030771

08020b4c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8020b4c:	b510      	push	{r4, lr}
 8020b4e:	4604      	mov	r4, r0
 8020b50:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8020b54:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020b56:	b9d9      	cbnz	r1, 8020b90 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 8020b58:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020b5a:	2b0a      	cmp	r3, #10
 8020b5c:	d037      	beq.n	8020bce <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8020b5e:	4620      	mov	r0, r4
 8020b60:	f7ff fc15 	bl	802038e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8020b64:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020b66:	2b09      	cmp	r3, #9
 8020b68:	d906      	bls.n	8020b78 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8020b6a:	4b19      	ldr	r3, [pc, #100]	; (8020bd0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8020b6c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8020b70:	4a18      	ldr	r2, [pc, #96]	; (8020bd4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8020b72:	4819      	ldr	r0, [pc, #100]	; (8020bd8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 8020b74:	f00a fe78 	bl	802b868 <__assert_func>
 8020b78:	1c5a      	adds	r2, r3, #1
 8020b7a:	8722      	strh	r2, [r4, #56]	; 0x38
 8020b7c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8020b7e:	4413      	add	r3, r2
 8020b80:	b29b      	uxth	r3, r3
 8020b82:	2b09      	cmp	r3, #9
 8020b84:	bf88      	it	hi
 8020b86:	3b0a      	subhi	r3, #10
 8020b88:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020b8c:	8458      	strh	r0, [r3, #34]	; 0x22
 8020b8e:	e7e3      	b.n	8020b58 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8020b90:	2b0a      	cmp	r3, #10
 8020b92:	d01c      	beq.n	8020bce <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8020b94:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8020b96:	3901      	subs	r1, #1
 8020b98:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8020b9c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8020b9e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8020ba2:	1c51      	adds	r1, r2, #1
 8020ba4:	b289      	uxth	r1, r1
 8020ba6:	2901      	cmp	r1, #1
 8020ba8:	bf8a      	itet	hi
 8020baa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8020bae:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8020bb0:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8020bb2:	2b09      	cmp	r3, #9
 8020bb4:	d8d9      	bhi.n	8020b6a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8020bb6:	1c5a      	adds	r2, r3, #1
 8020bb8:	8722      	strh	r2, [r4, #56]	; 0x38
 8020bba:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8020bbc:	4413      	add	r3, r2
 8020bbe:	b29b      	uxth	r3, r3
 8020bc0:	2b09      	cmp	r3, #9
 8020bc2:	bf88      	it	hi
 8020bc4:	3b0a      	subhi	r3, #10
 8020bc6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020bca:	8458      	strh	r0, [r3, #34]	; 0x22
 8020bcc:	e7c0      	b.n	8020b50 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8020bce:	bd10      	pop	{r4, pc}
 8020bd0:	0803079d 	.word	0x0803079d
 8020bd4:	08030b30 	.word	0x08030b30
 8020bd8:	08030771 	.word	0x08030771

08020bdc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8020bdc:	b538      	push	{r3, r4, r5, lr}
 8020bde:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8020be0:	4604      	mov	r4, r0
 8020be2:	b92a      	cbnz	r2, 8020bf0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8020be4:	4b13      	ldr	r3, [pc, #76]	; (8020c34 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8020be6:	21d5      	movs	r1, #213	; 0xd5
 8020be8:	4a13      	ldr	r2, [pc, #76]	; (8020c38 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8020bea:	4814      	ldr	r0, [pc, #80]	; (8020c3c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8020bec:	f00a fe3c 	bl	802b868 <__assert_func>
 8020bf0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8020bf2:	3a01      	subs	r2, #1
 8020bf4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8020bf8:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 8020bfa:	8702      	strh	r2, [r0, #56]	; 0x38
 8020bfc:	1c5a      	adds	r2, r3, #1
 8020bfe:	b292      	uxth	r2, r2
 8020c00:	2a09      	cmp	r2, #9
 8020c02:	bf8a      	itet	hi
 8020c04:	3b09      	subhi	r3, #9
 8020c06:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8020c08:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8020c0a:	f7ff ff9f 	bl	8020b4c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8020c0e:	8c23      	ldrh	r3, [r4, #32]
 8020c10:	2b01      	cmp	r3, #1
 8020c12:	bf9c      	itt	ls
 8020c14:	3301      	addls	r3, #1
 8020c16:	8423      	strhls	r3, [r4, #32]
 8020c18:	8be3      	ldrh	r3, [r4, #30]
 8020c1a:	b90b      	cbnz	r3, 8020c20 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8020c1c:	2302      	movs	r3, #2
 8020c1e:	83e3      	strh	r3, [r4, #30]
 8020c20:	8be3      	ldrh	r3, [r4, #30]
 8020c22:	4628      	mov	r0, r5
 8020c24:	3b01      	subs	r3, #1
 8020c26:	b29b      	uxth	r3, r3
 8020c28:	83e3      	strh	r3, [r4, #30]
 8020c2a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020c2e:	8365      	strh	r5, [r4, #26]
 8020c30:	bd38      	pop	{r3, r4, r5, pc}
 8020c32:	bf00      	nop
 8020c34:	08030768 	.word	0x08030768
 8020c38:	08030a85 	.word	0x08030a85
 8020c3c:	08030771 	.word	0x08030771

08020c40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8020c40:	428a      	cmp	r2, r1
 8020c42:	b538      	push	{r3, r4, r5, lr}
 8020c44:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8020c46:	d90c      	bls.n	8020c62 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8020c48:	b92c      	cbnz	r4, 8020c56 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8020c4a:	4b1c      	ldr	r3, [pc, #112]	; (8020cbc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8020c4c:	21e1      	movs	r1, #225	; 0xe1
 8020c4e:	4a1c      	ldr	r2, [pc, #112]	; (8020cc0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8020c50:	481c      	ldr	r0, [pc, #112]	; (8020cc4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8020c52:	f00a fe09 	bl	802b868 <__assert_func>
 8020c56:	3c01      	subs	r4, #1
 8020c58:	4b1b      	ldr	r3, [pc, #108]	; (8020cc8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8020c5a:	4a1c      	ldr	r2, [pc, #112]	; (8020ccc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8020c5c:	21c5      	movs	r1, #197	; 0xc5
 8020c5e:	8704      	strh	r4, [r0, #56]	; 0x38
 8020c60:	e7f6      	b.n	8020c50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8020c62:	428c      	cmp	r4, r1
 8020c64:	d203      	bcs.n	8020c6e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8020c66:	4b1a      	ldr	r3, [pc, #104]	; (8020cd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8020c68:	21cb      	movs	r1, #203	; 0xcb
 8020c6a:	4a1a      	ldr	r2, [pc, #104]	; (8020cd4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8020c6c:	e7f0      	b.n	8020c50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8020c6e:	1a64      	subs	r4, r4, r1
 8020c70:	250a      	movs	r5, #10
 8020c72:	8704      	strh	r4, [r0, #56]	; 0x38
 8020c74:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8020c76:	4421      	add	r1, r4
 8020c78:	b289      	uxth	r1, r1
 8020c7a:	2909      	cmp	r1, #9
 8020c7c:	bf88      	it	hi
 8020c7e:	390a      	subhi	r1, #10
 8020c80:	86c1      	strh	r1, [r0, #54]	; 0x36
 8020c82:	b1ba      	cbz	r2, 8020cb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8020c84:	3a01      	subs	r2, #1
 8020c86:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8020c88:	b292      	uxth	r2, r2
 8020c8a:	2909      	cmp	r1, #9
 8020c8c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8020c90:	d903      	bls.n	8020c9a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8020c92:	4b11      	ldr	r3, [pc, #68]	; (8020cd8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8020c94:	21e6      	movs	r1, #230	; 0xe6
 8020c96:	4a11      	ldr	r2, [pc, #68]	; (8020cdc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8020c98:	e7da      	b.n	8020c50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8020c9a:	3101      	adds	r1, #1
 8020c9c:	8701      	strh	r1, [r0, #56]	; 0x38
 8020c9e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8020ca0:	b901      	cbnz	r1, 8020ca4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8020ca2:	86c5      	strh	r5, [r0, #54]	; 0x36
 8020ca4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8020ca6:	3901      	subs	r1, #1
 8020ca8:	b289      	uxth	r1, r1
 8020caa:	86c1      	strh	r1, [r0, #54]	; 0x36
 8020cac:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8020cb0:	844c      	strh	r4, [r1, #34]	; 0x22
 8020cb2:	e7e6      	b.n	8020c82 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8020cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020cb8:	f7ff bf48 	b.w	8020b4c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8020cbc:	08030768 	.word	0x08030768
 8020cc0:	0803085e 	.word	0x0803085e
 8020cc4:	08030771 	.word	0x08030771
 8020cc8:	080307a9 	.word	0x080307a9
 8020ccc:	08030908 	.word	0x08030908
 8020cd0:	080307b7 	.word	0x080307b7
 8020cd4:	08030bdf 	.word	0x08030bdf
 8020cd8:	080307c3 	.word	0x080307c3
 8020cdc:	080307d6 	.word	0x080307d6

08020ce0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8020ce0:	3a01      	subs	r2, #1
 8020ce2:	b570      	push	{r4, r5, r6, lr}
 8020ce4:	b292      	uxth	r2, r2
 8020ce6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8020cea:	42b2      	cmp	r2, r6
 8020cec:	d019      	beq.n	8020d22 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8020cee:	8c04      	ldrh	r4, [r0, #32]
 8020cf0:	f831 5b02 	ldrh.w	r5, [r1], #2
 8020cf4:	4294      	cmp	r4, r2
 8020cf6:	d805      	bhi.n	8020d04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8020cf8:	4b19      	ldr	r3, [pc, #100]	; (8020d60 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8020cfa:	4a1a      	ldr	r2, [pc, #104]	; (8020d64 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8020cfc:	21c5      	movs	r1, #197	; 0xc5
 8020cfe:	481a      	ldr	r0, [pc, #104]	; (8020d68 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8020d00:	f00a fdb2 	bl	802b868 <__assert_func>
 8020d04:	8bc4      	ldrh	r4, [r0, #30]
 8020d06:	4414      	add	r4, r2
 8020d08:	3a01      	subs	r2, #1
 8020d0a:	b2a4      	uxth	r4, r4
 8020d0c:	b292      	uxth	r2, r2
 8020d0e:	2c01      	cmp	r4, #1
 8020d10:	bf88      	it	hi
 8020d12:	3c02      	subhi	r4, #2
 8020d14:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020d18:	8b64      	ldrh	r4, [r4, #26]
 8020d1a:	42ac      	cmp	r4, r5
 8020d1c:	d0e5      	beq.n	8020cea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8020d1e:	2000      	movs	r0, #0
 8020d20:	bd70      	pop	{r4, r5, r6, pc}
 8020d22:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020d26:	2400      	movs	r4, #0
 8020d28:	4413      	add	r3, r2
 8020d2a:	b2a2      	uxth	r2, r4
 8020d2c:	429a      	cmp	r2, r3
 8020d2e:	da14      	bge.n	8020d5a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8020d30:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 8020d32:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8020d36:	4296      	cmp	r6, r2
 8020d38:	d802      	bhi.n	8020d40 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8020d3a:	4b09      	ldr	r3, [pc, #36]	; (8020d60 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8020d3c:	4a0b      	ldr	r2, [pc, #44]	; (8020d6c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8020d3e:	e7dd      	b.n	8020cfc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8020d40:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8020d42:	3401      	adds	r4, #1
 8020d44:	4432      	add	r2, r6
 8020d46:	b292      	uxth	r2, r2
 8020d48:	2a09      	cmp	r2, #9
 8020d4a:	bf88      	it	hi
 8020d4c:	3a0a      	subhi	r2, #10
 8020d4e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020d52:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8020d54:	42aa      	cmp	r2, r5
 8020d56:	d0e8      	beq.n	8020d2a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8020d58:	e7e1      	b.n	8020d1e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8020d5a:	2001      	movs	r0, #1
 8020d5c:	e7e0      	b.n	8020d20 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8020d5e:	bf00      	nop
 8020d60:	080307a9 	.word	0x080307a9
 8020d64:	08030c63 	.word	0x08030c63
 8020d68:	08030771 	.word	0x08030771
 8020d6c:	08030908 	.word	0x08030908

08020d70 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8020d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d74:	4605      	mov	r5, r0
 8020d76:	4616      	mov	r6, r2
 8020d78:	1c8c      	adds	r4, r1, #2
 8020d7a:	8809      	ldrh	r1, [r1, #0]
 8020d7c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8020d80:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8020d84:	42b3      	cmp	r3, r6
 8020d86:	d124      	bne.n	8020dd2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8020d88:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8020d8c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8020d90:	f001 070f 	and.w	r7, r1, #15
 8020d94:	4652      	mov	r2, sl
 8020d96:	f8cd 8000 	str.w	r8, [sp]
 8020d9a:	464b      	mov	r3, r9
 8020d9c:	4621      	mov	r1, r4
 8020d9e:	4628      	mov	r0, r5
 8020da0:	f7ff ff9e 	bl	8020ce0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8020da4:	4683      	mov	fp, r0
 8020da6:	b168      	cbz	r0, 8020dc4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8020da8:	eb0a 0109 	add.w	r1, sl, r9
 8020dac:	463a      	mov	r2, r7
 8020dae:	4628      	mov	r0, r5
 8020db0:	4441      	add	r1, r8
 8020db2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8020db6:	4649      	mov	r1, r9
 8020db8:	f7ff ff42 	bl	8020c40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8020dbc:	4658      	mov	r0, fp
 8020dbe:	b003      	add	sp, #12
 8020dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dc4:	eb07 010a 	add.w	r1, r7, sl
 8020dc8:	4449      	add	r1, r9
 8020dca:	4441      	add	r1, r8
 8020dcc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8020dd0:	e7d2      	b.n	8020d78 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8020dd2:	f04f 0b00 	mov.w	fp, #0
 8020dd6:	e7f1      	b.n	8020dbc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08020dd8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8020dd8:	b570      	push	{r4, r5, r6, lr}
 8020dda:	8810      	ldrh	r0, [r2, #0]
 8020ddc:	4298      	cmp	r0, r3
 8020dde:	d817      	bhi.n	8020e10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020de0:	1e48      	subs	r0, r1, #1
 8020de2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8020de6:	4298      	cmp	r0, r3
 8020de8:	d312      	bcc.n	8020e10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020dea:	2400      	movs	r4, #0
 8020dec:	428c      	cmp	r4, r1
 8020dee:	d20f      	bcs.n	8020e10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020df0:	1860      	adds	r0, r4, r1
 8020df2:	1040      	asrs	r0, r0, #1
 8020df4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8020df8:	0085      	lsls	r5, r0, #2
 8020dfa:	42b3      	cmp	r3, r6
 8020dfc:	d902      	bls.n	8020e04 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8020dfe:	3001      	adds	r0, #1
 8020e00:	b284      	uxth	r4, r0
 8020e02:	e7f3      	b.n	8020dec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020e04:	d201      	bcs.n	8020e0a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8020e06:	b281      	uxth	r1, r0
 8020e08:	e7f0      	b.n	8020dec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020e0a:	442a      	add	r2, r5
 8020e0c:	8850      	ldrh	r0, [r2, #2]
 8020e0e:	bd70      	pop	{r4, r5, r6, pc}
 8020e10:	2000      	movs	r0, #0
 8020e12:	e7fc      	b.n	8020e0e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08020e14 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8020e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e18:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8020e1a:	4604      	mov	r4, r0
 8020e1c:	260b      	movs	r6, #11
 8020e1e:	886f      	ldrh	r7, [r5, #2]
 8020e20:	087f      	lsrs	r7, r7, #1
 8020e22:	3e01      	subs	r6, #1
 8020e24:	d01b      	beq.n	8020e5e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8020e26:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020e28:	b92b      	cbnz	r3, 8020e36 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8020e2a:	4b0e      	ldr	r3, [pc, #56]	; (8020e64 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8020e2c:	21c0      	movs	r1, #192	; 0xc0
 8020e2e:	4a0e      	ldr	r2, [pc, #56]	; (8020e68 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8020e30:	480e      	ldr	r0, [pc, #56]	; (8020e6c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8020e32:	f00a fd19 	bl	802b868 <__assert_func>
 8020e36:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8020e38:	462a      	mov	r2, r5
 8020e3a:	4639      	mov	r1, r7
 8020e3c:	4620      	mov	r0, r4
 8020e3e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020e42:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8020e46:	4643      	mov	r3, r8
 8020e48:	f7ff ffc6 	bl	8020dd8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8020e4c:	b138      	cbz	r0, 8020e5e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8020e4e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8020e52:	4642      	mov	r2, r8
 8020e54:	4620      	mov	r0, r4
 8020e56:	f7ff ff8b 	bl	8020d70 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8020e5a:	2800      	cmp	r0, #0
 8020e5c:	d1e1      	bne.n	8020e22 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8020e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e62:	bf00      	nop
 8020e64:	08030768 	.word	0x08030768
 8020e68:	080309da 	.word	0x080309da
 8020e6c:	08030771 	.word	0x08030771

08020e70 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 8020e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e72:	2300      	movs	r3, #0
 8020e74:	b08d      	sub	sp, #52	; 0x34
 8020e76:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8020e7a:	f101 0710 	add.w	r7, r1, #16
 8020e7e:	9304      	str	r3, [sp, #16]
 8020e80:	aa04      	add	r2, sp, #16
 8020e82:	9305      	str	r3, [sp, #20]
 8020e84:	9306      	str	r3, [sp, #24]
 8020e86:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8020e8a:	9307      	str	r3, [sp, #28]
 8020e8c:	4613      	mov	r3, r2
 8020e8e:	460c      	mov	r4, r1
 8020e90:	4605      	mov	r5, r0
 8020e92:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8020ecc <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 8020e96:	ecb4 7a01 	vldmia	r4!, {s14}
 8020e9a:	ecf5 6a01 	vldmia	r5!, {s13}
 8020e9e:	42bc      	cmp	r4, r7
 8020ea0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020ea4:	d1f7      	bne.n	8020e96 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 8020ea6:	3010      	adds	r0, #16
 8020ea8:	ece2 7a01 	vstmia	r2!, {s15}
 8020eac:	42b0      	cmp	r0, r6
 8020eae:	d1ee      	bne.n	8020e8e <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 8020eb0:	ac0c      	add	r4, sp, #48	; 0x30
 8020eb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8020eb4:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8020eb8:	ed9d 0a08 	vldr	s0, [sp, #32]
 8020ebc:	eddd 0a09 	vldr	s1, [sp, #36]	; 0x24
 8020ec0:	ed9d 1a0a 	vldr	s2, [sp, #40]	; 0x28
 8020ec4:	eddd 1a0b 	vldr	s3, [sp, #44]	; 0x2c
 8020ec8:	b00d      	add	sp, #52	; 0x34
 8020eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ecc:	00000000 	.word	0x00000000

08020ed0 <_ZN8touchgfx9Matrix4x4C1Ev>:
 8020ed0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8020ed4:	2300      	movs	r3, #0
 8020ed6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8020efc <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 8020eda:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 8020ede:	2200      	movs	r2, #0
 8020ee0:	4293      	cmp	r3, r2
 8020ee2:	f102 0201 	add.w	r2, r2, #1
 8020ee6:	fe47 6a87 	vseleq.f32	s13, s15, s14
 8020eea:	2a04      	cmp	r2, #4
 8020eec:	ece1 6a01 	vstmia	r1!, {s13}
 8020ef0:	d1f6      	bne.n	8020ee0 <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 8020ef2:	3301      	adds	r3, #1
 8020ef4:	2b04      	cmp	r3, #4
 8020ef6:	d1f0      	bne.n	8020eda <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 8020ef8:	4770      	bx	lr
 8020efa:	bf00      	nop
 8020efc:	00000000 	.word	0x00000000

08020f00 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 8020f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020f04:	460c      	mov	r4, r1
 8020f06:	4605      	mov	r5, r0
 8020f08:	4690      	mov	r8, r2
 8020f0a:	f7ff ffe1 	bl	8020ed0 <_ZN8touchgfx9Matrix4x4C1Ev>
 8020f0e:	4628      	mov	r0, r5
 8020f10:	4621      	mov	r1, r4
 8020f12:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8020f16:	2300      	movs	r3, #0
 8020f18:	eb08 0603 	add.w	r6, r8, r3
 8020f1c:	460f      	mov	r7, r1
 8020f1e:	2400      	movs	r4, #0
 8020f20:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8020f54 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 8020f24:	4632      	mov	r2, r6
 8020f26:	3401      	adds	r4, #1
 8020f28:	ecf7 6a01 	vldmia	r7!, {s13}
 8020f2c:	3610      	adds	r6, #16
 8020f2e:	ed92 7a00 	vldr	s14, [r2]
 8020f32:	2c04      	cmp	r4, #4
 8020f34:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020f38:	d1f4      	bne.n	8020f24 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 8020f3a:	18c2      	adds	r2, r0, r3
 8020f3c:	3304      	adds	r3, #4
 8020f3e:	2b10      	cmp	r3, #16
 8020f40:	edc2 7a00 	vstr	s15, [r2]
 8020f44:	d1e8      	bne.n	8020f18 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 8020f46:	3110      	adds	r1, #16
 8020f48:	3010      	adds	r0, #16
 8020f4a:	4561      	cmp	r1, ip
 8020f4c:	d1e3      	bne.n	8020f16 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 8020f4e:	4628      	mov	r0, r5
 8020f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020f54:	00000000 	.word	0x00000000

08020f58 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 8020f58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8020f5c:	f100 0320 	add.w	r3, r0, #32
 8020f60:	3030      	adds	r0, #48	; 0x30
 8020f62:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8020f66:	ecf3 7a01 	vldmia	r3!, {s15}
 8020f6a:	4283      	cmp	r3, r0
 8020f6c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8020f70:	edc3 7a03 	vstr	s15, [r3, #12]
 8020f74:	d1f7      	bne.n	8020f66 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 8020f76:	4770      	bx	lr

08020f78 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 8020f78:	b510      	push	{r4, lr}
 8020f7a:	ed2d 8b02 	vpush	{d8}
 8020f7e:	eef0 8a40 	vmov.f32	s17, s0
 8020f82:	4604      	mov	r4, r0
 8020f84:	f00a fbc8 	bl	802b718 <sinf>
 8020f88:	eeb0 8a40 	vmov.f32	s16, s0
 8020f8c:	eeb0 0a68 	vmov.f32	s0, s17
 8020f90:	f00a faea 	bl	802b568 <cosf>
 8020f94:	eeb1 6a48 	vneg.f32	s12, s16
 8020f98:	f104 0310 	add.w	r3, r4, #16
 8020f9c:	f104 0220 	add.w	r2, r4, #32
 8020fa0:	edd3 7a04 	vldr	s15, [r3, #16]
 8020fa4:	edd3 6a00 	vldr	s13, [r3]
 8020fa8:	ee26 7a27 	vmul.f32	s14, s12, s15
 8020fac:	ee67 7a80 	vmul.f32	s15, s15, s0
 8020fb0:	eea6 7a80 	vfma.f32	s14, s13, s0
 8020fb4:	eee6 7a88 	vfma.f32	s15, s13, s16
 8020fb8:	eca3 7a01 	vstmia	r3!, {s14}
 8020fbc:	429a      	cmp	r2, r3
 8020fbe:	edc3 7a03 	vstr	s15, [r3, #12]
 8020fc2:	d1ed      	bne.n	8020fa0 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 8020fc4:	4620      	mov	r0, r4
 8020fc6:	ecbd 8b02 	vpop	{d8}
 8020fca:	bd10      	pop	{r4, pc}

08020fcc <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 8020fcc:	b510      	push	{r4, lr}
 8020fce:	ed2d 8b02 	vpush	{d8}
 8020fd2:	eef0 8a40 	vmov.f32	s17, s0
 8020fd6:	4604      	mov	r4, r0
 8020fd8:	f00a fb9e 	bl	802b718 <sinf>
 8020fdc:	eeb0 8a40 	vmov.f32	s16, s0
 8020fe0:	eeb0 0a68 	vmov.f32	s0, s17
 8020fe4:	f00a fac0 	bl	802b568 <cosf>
 8020fe8:	eeb1 6a48 	vneg.f32	s12, s16
 8020fec:	4623      	mov	r3, r4
 8020fee:	f104 0210 	add.w	r2, r4, #16
 8020ff2:	edd3 7a08 	vldr	s15, [r3, #32]
 8020ff6:	edd3 6a00 	vldr	s13, [r3]
 8020ffa:	ee27 7a88 	vmul.f32	s14, s15, s16
 8020ffe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021002:	eea6 7a80 	vfma.f32	s14, s13, s0
 8021006:	eee6 7a26 	vfma.f32	s15, s12, s13
 802100a:	eca3 7a01 	vstmia	r3!, {s14}
 802100e:	429a      	cmp	r2, r3
 8021010:	edc3 7a07 	vstr	s15, [r3, #28]
 8021014:	d1ed      	bne.n	8020ff2 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 8021016:	4620      	mov	r0, r4
 8021018:	ecbd 8b02 	vpop	{d8}
 802101c:	bd10      	pop	{r4, pc}

0802101e <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 802101e:	b510      	push	{r4, lr}
 8021020:	ed2d 8b02 	vpush	{d8}
 8021024:	eef0 8a40 	vmov.f32	s17, s0
 8021028:	4604      	mov	r4, r0
 802102a:	f00a fb75 	bl	802b718 <sinf>
 802102e:	eeb0 8a40 	vmov.f32	s16, s0
 8021032:	eeb0 0a68 	vmov.f32	s0, s17
 8021036:	f00a fa97 	bl	802b568 <cosf>
 802103a:	eeb1 6a48 	vneg.f32	s12, s16
 802103e:	4623      	mov	r3, r4
 8021040:	f104 0210 	add.w	r2, r4, #16
 8021044:	edd3 7a04 	vldr	s15, [r3, #16]
 8021048:	edd3 6a00 	vldr	s13, [r3]
 802104c:	ee26 7a27 	vmul.f32	s14, s12, s15
 8021050:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021054:	eea6 7a80 	vfma.f32	s14, s13, s0
 8021058:	eee6 7a88 	vfma.f32	s15, s13, s16
 802105c:	eca3 7a01 	vstmia	r3!, {s14}
 8021060:	429a      	cmp	r2, r3
 8021062:	edc3 7a03 	vstr	s15, [r3, #12]
 8021066:	d1ed      	bne.n	8021044 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 8021068:	4620      	mov	r0, r4
 802106a:	ecbd 8b02 	vpop	{d8}
 802106e:	bd10      	pop	{r4, pc}

08021070 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 8021070:	4603      	mov	r3, r0
 8021072:	f100 0210 	add.w	r2, r0, #16
 8021076:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 802107a:	edd3 7a00 	vldr	s15, [r3]
 802107e:	eee7 7a00 	vfma.f32	s15, s14, s0
 8021082:	ece3 7a01 	vstmia	r3!, {s15}
 8021086:	4293      	cmp	r3, r2
 8021088:	d1f5      	bne.n	8021076 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 802108a:	4770      	bx	lr

0802108c <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 802108c:	f100 0310 	add.w	r3, r0, #16
 8021090:	f100 0220 	add.w	r2, r0, #32
 8021094:	ed93 7a08 	vldr	s14, [r3, #32]
 8021098:	edd3 7a00 	vldr	s15, [r3]
 802109c:	eee7 7a00 	vfma.f32	s15, s14, s0
 80210a0:	ece3 7a01 	vstmia	r3!, {s15}
 80210a4:	4293      	cmp	r3, r2
 80210a6:	d1f5      	bne.n	8021094 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 80210a8:	4770      	bx	lr

080210aa <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 80210aa:	f100 0320 	add.w	r3, r0, #32
 80210ae:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80210b2:	ed93 7a04 	vldr	s14, [r3, #16]
 80210b6:	edd3 7a00 	vldr	s15, [r3]
 80210ba:	eee7 7a00 	vfma.f32	s15, s14, s0
 80210be:	ece3 7a01 	vstmia	r3!, {s15}
 80210c2:	4293      	cmp	r3, r2
 80210c4:	d1f5      	bne.n	80210b2 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 80210c6:	4770      	bx	lr

080210c8 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 80210c8:	4603      	mov	r3, r0
 80210ca:	f100 0210 	add.w	r2, r0, #16
 80210ce:	edd3 7a00 	vldr	s15, [r3]
 80210d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80210d6:	ece3 7a01 	vstmia	r3!, {s15}
 80210da:	4293      	cmp	r3, r2
 80210dc:	d1f7      	bne.n	80210ce <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 80210de:	4770      	bx	lr

080210e0 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 80210e0:	f100 0310 	add.w	r3, r0, #16
 80210e4:	f100 0220 	add.w	r2, r0, #32
 80210e8:	edd3 7a00 	vldr	s15, [r3]
 80210ec:	ee67 7a80 	vmul.f32	s15, s15, s0
 80210f0:	ece3 7a01 	vstmia	r3!, {s15}
 80210f4:	4293      	cmp	r3, r2
 80210f6:	d1f7      	bne.n	80210e8 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 80210f8:	4770      	bx	lr

080210fa <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 80210fa:	f100 0320 	add.w	r3, r0, #32
 80210fe:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8021102:	edd3 7a00 	vldr	s15, [r3]
 8021106:	ee67 7a80 	vmul.f32	s15, s15, s0
 802110a:	ece3 7a01 	vstmia	r3!, {s15}
 802110e:	4293      	cmp	r3, r2
 8021110:	d1f7      	bne.n	8021102 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 8021112:	4770      	bx	lr

08021114 <_ZN8touchgfx8ceil28_4El>:
 8021114:	f110 030f 	adds.w	r3, r0, #15
 8021118:	d401      	bmi.n	802111e <_ZN8touchgfx8ceil28_4El+0xa>
 802111a:	1118      	asrs	r0, r3, #4
 802111c:	4770      	bx	lr
 802111e:	2210      	movs	r2, #16
 8021120:	f1c0 0001 	rsb	r0, r0, #1
 8021124:	fb93 f3f2 	sdiv	r3, r3, r2
 8021128:	f010 000f 	ands.w	r0, r0, #15
 802112c:	bf18      	it	ne
 802112e:	2001      	movne	r0, #1
 8021130:	1a18      	subs	r0, r3, r0
 8021132:	4770      	bx	lr

08021134 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8021134:	2900      	cmp	r1, #0
 8021136:	b538      	push	{r3, r4, r5, lr}
 8021138:	dc05      	bgt.n	8021146 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 802113a:	4b0f      	ldr	r3, [pc, #60]	; (8021178 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 802113c:	21f7      	movs	r1, #247	; 0xf7
 802113e:	4a0f      	ldr	r2, [pc, #60]	; (802117c <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8021140:	480f      	ldr	r0, [pc, #60]	; (8021180 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8021142:	f00a fb91 	bl	802b868 <__assert_func>
 8021146:	2800      	cmp	r0, #0
 8021148:	db06      	blt.n	8021158 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 802114a:	fb90 f4f1 	sdiv	r4, r0, r1
 802114e:	fb01 0114 	mls	r1, r1, r4, r0
 8021152:	6014      	str	r4, [r2, #0]
 8021154:	6019      	str	r1, [r3, #0]
 8021156:	bd38      	pop	{r3, r4, r5, pc}
 8021158:	4240      	negs	r0, r0
 802115a:	fb90 f4f1 	sdiv	r4, r0, r1
 802115e:	4265      	negs	r5, r4
 8021160:	fb01 0014 	mls	r0, r1, r4, r0
 8021164:	6015      	str	r5, [r2, #0]
 8021166:	6018      	str	r0, [r3, #0]
 8021168:	2800      	cmp	r0, #0
 802116a:	d0f4      	beq.n	8021156 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 802116c:	6810      	ldr	r0, [r2, #0]
 802116e:	3801      	subs	r0, #1
 8021170:	6010      	str	r0, [r2, #0]
 8021172:	6818      	ldr	r0, [r3, #0]
 8021174:	1a09      	subs	r1, r1, r0
 8021176:	e7ed      	b.n	8021154 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8021178:	08030d34 	.word	0x08030d34
 802117c:	08030d73 	.word	0x08030d73
 8021180:	08030d44 	.word	0x08030d44

08021184 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8021184:	b570      	push	{r4, r5, r6, lr}
 8021186:	694a      	ldr	r2, [r1, #20]
 8021188:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 802118a:	684b      	ldr	r3, [r1, #4]
 802118c:	1b54      	subs	r4, r2, r5
 802118e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8021190:	f000 8106 	beq.w	80213a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8021194:	1b9b      	subs	r3, r3, r6
 8021196:	d003      	beq.n	80211a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8021198:	4363      	muls	r3, r4
 802119a:	2210      	movs	r2, #16
 802119c:	fb93 f3f2 	sdiv	r3, r3, r2
 80211a0:	680c      	ldr	r4, [r1, #0]
 80211a2:	698a      	ldr	r2, [r1, #24]
 80211a4:	1b65      	subs	r5, r4, r5
 80211a6:	f000 80fd 	beq.w	80213a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80211aa:	1b92      	subs	r2, r2, r6
 80211ac:	d003      	beq.n	80211b6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80211ae:	436a      	muls	r2, r5
 80211b0:	2410      	movs	r4, #16
 80211b2:	fb92 f2f4 	sdiv	r2, r2, r4
 80211b6:	1a9b      	subs	r3, r3, r2
 80211b8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80213e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80211bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80211c0:	460a      	mov	r2, r1
 80211c2:	ee07 3a90 	vmov	s15, r3
 80211c6:	f100 040c 	add.w	r4, r0, #12
 80211ca:	4603      	mov	r3, r0
 80211cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80211d0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80211d4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80211d8:	eeb1 6a43 	vneg.f32	s12, s6
 80211dc:	edd2 7a02 	vldr	s15, [r2, #8]
 80211e0:	3214      	adds	r2, #20
 80211e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80211e6:	ece3 6a01 	vstmia	r3!, {s13}
 80211ea:	429c      	cmp	r4, r3
 80211ec:	ed52 7a02 	vldr	s15, [r2, #-8]
 80211f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80211f4:	edc3 7a02 	vstr	s15, [r3, #8]
 80211f8:	ed52 7a01 	vldr	s15, [r2, #-4]
 80211fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021200:	edc3 7a05 	vstr	s15, [r3, #20]
 8021204:	d1ea      	bne.n	80211dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8021206:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8021208:	698b      	ldr	r3, [r1, #24]
 802120a:	edd0 4a02 	vldr	s9, [r0, #8]
 802120e:	1a9b      	subs	r3, r3, r2
 8021210:	edd0 3a00 	vldr	s7, [r0]
 8021214:	edd0 6a01 	vldr	s13, [r0, #4]
 8021218:	ee07 3a90 	vmov	s15, r3
 802121c:	684b      	ldr	r3, [r1, #4]
 802121e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8021222:	ed90 5a05 	vldr	s10, [r0, #20]
 8021226:	1a9b      	subs	r3, r3, r2
 8021228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802122c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8021230:	ed90 2a03 	vldr	s4, [r0, #12]
 8021234:	ee07 3a10 	vmov	s14, r3
 8021238:	edd0 5a04 	vldr	s11, [r0, #16]
 802123c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8021240:	ed90 1a07 	vldr	s2, [r0, #28]
 8021244:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021248:	edd0 2a06 	vldr	s5, [r0, #24]
 802124c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8021250:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8021254:	ee27 7a04 	vmul.f32	s14, s14, s8
 8021258:	ee32 5a45 	vsub.f32	s10, s4, s10
 802125c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021260:	ee67 7a83 	vmul.f32	s15, s15, s6
 8021264:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8021268:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 802126a:	694a      	ldr	r2, [r1, #20]
 802126c:	1b13      	subs	r3, r2, r4
 802126e:	ee07 3a10 	vmov	s14, r3
 8021272:	680b      	ldr	r3, [r1, #0]
 8021274:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021278:	1b1b      	subs	r3, r3, r4
 802127a:	ee27 7a04 	vmul.f32	s14, s14, s8
 802127e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8021282:	ee07 3a10 	vmov	s14, r3
 8021286:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802128a:	ee27 7a04 	vmul.f32	s14, s14, s8
 802128e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8021292:	ee64 4a86 	vmul.f32	s9, s9, s12
 8021296:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 802129a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 802129c:	698b      	ldr	r3, [r1, #24]
 802129e:	1a9b      	subs	r3, r3, r2
 80212a0:	ee06 3a90 	vmov	s13, r3
 80212a4:	684b      	ldr	r3, [r1, #4]
 80212a6:	1a9b      	subs	r3, r3, r2
 80212a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80212ac:	ee07 3a10 	vmov	s14, r3
 80212b0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80212b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80212b8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80212bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80212c0:	eee5 6a87 	vfma.f32	s13, s11, s14
 80212c4:	ee66 6a83 	vmul.f32	s13, s13, s6
 80212c8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80212cc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80212ce:	694a      	ldr	r2, [r1, #20]
 80212d0:	1b13      	subs	r3, r2, r4
 80212d2:	ee07 3a10 	vmov	s14, r3
 80212d6:	680b      	ldr	r3, [r1, #0]
 80212d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80212dc:	1b1b      	subs	r3, r3, r4
 80212de:	ee27 7a04 	vmul.f32	s14, s14, s8
 80212e2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80212e6:	ee07 3a10 	vmov	s14, r3
 80212ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80212ee:	ee27 7a04 	vmul.f32	s14, s14, s8
 80212f2:	eea5 5a87 	vfma.f32	s10, s11, s14
 80212f6:	edd0 5a08 	vldr	s11, [r0, #32]
 80212fa:	ee31 1a65 	vsub.f32	s2, s2, s11
 80212fe:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8021302:	ee25 5a06 	vmul.f32	s10, s10, s12
 8021306:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 802130a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 802130c:	698b      	ldr	r3, [r1, #24]
 802130e:	1a9b      	subs	r3, r3, r2
 8021310:	ee07 3a10 	vmov	s14, r3
 8021314:	684b      	ldr	r3, [r1, #4]
 8021316:	1a9b      	subs	r3, r3, r2
 8021318:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802131c:	ee01 3a90 	vmov	s3, r3
 8021320:	ee27 7a04 	vmul.f32	s14, s14, s8
 8021324:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8021328:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 802132c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8021330:	eea1 7a21 	vfma.f32	s14, s2, s3
 8021334:	ee27 7a03 	vmul.f32	s14, s14, s6
 8021338:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 802133c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 802133e:	694a      	ldr	r2, [r1, #20]
 8021340:	1b13      	subs	r3, r2, r4
 8021342:	ee03 3a10 	vmov	s6, r3
 8021346:	680b      	ldr	r3, [r1, #0]
 8021348:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 802134c:	1b1b      	subs	r3, r3, r4
 802134e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8021352:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8021356:	ee03 3a10 	vmov	s6, r3
 802135a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 802135e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8021362:	eee1 5a04 	vfma.f32	s11, s2, s8
 8021366:	ee25 6a86 	vmul.f32	s12, s11, s12
 802136a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 802136e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8021372:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8021376:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 802137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802137e:	dd13      	ble.n	80213a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8021380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021384:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8021388:	63c3      	str	r3, [r0, #60]	; 0x3c
 802138a:	eee3 7a87 	vfma.f32	s15, s7, s14
 802138e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021396:	dd15      	ble.n	80213c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8021398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802139c:	6403      	str	r3, [r0, #64]	; 0x40
 802139e:	bd70      	pop	{r4, r5, r6, pc}
 80213a0:	4623      	mov	r3, r4
 80213a2:	e6fd      	b.n	80211a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80213a4:	462a      	mov	r2, r5
 80213a6:	e706      	b.n	80211b6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80213a8:	d502      	bpl.n	80213b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80213aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80213ae:	e7e9      	b.n	8021384 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80213b0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80213b4:	eea3 2a85 	vfma.f32	s4, s7, s10
 80213b8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80213bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213c0:	dade      	bge.n	8021380 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80213c2:	e7f2      	b.n	80213aa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80213c4:	d502      	bpl.n	80213cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80213c6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80213ca:	e7e7      	b.n	802139c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80213cc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80213d0:	eee3 4a86 	vfma.f32	s9, s7, s12
 80213d4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80213d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213dc:	dadc      	bge.n	8021398 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80213de:	e7f2      	b.n	80213c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80213e0:	3d800000 	.word	0x3d800000

080213e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80213e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213e8:	f04f 0814 	mov.w	r8, #20
 80213ec:	4604      	mov	r4, r0
 80213ee:	4617      	mov	r7, r2
 80213f0:	460d      	mov	r5, r1
 80213f2:	fb08 f903 	mul.w	r9, r8, r3
 80213f6:	461e      	mov	r6, r3
 80213f8:	eb02 0a09 	add.w	sl, r2, r9
 80213fc:	f8da 0004 	ldr.w	r0, [sl, #4]
 8021400:	f7ff fe88 	bl	8021114 <_ZN8touchgfx8ceil28_4El>
 8021404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021406:	6160      	str	r0, [r4, #20]
 8021408:	fb08 f803 	mul.w	r8, r8, r3
 802140c:	9001      	str	r0, [sp, #4]
 802140e:	eb07 0b08 	add.w	fp, r7, r8
 8021412:	f8db 0004 	ldr.w	r0, [fp, #4]
 8021416:	f7ff fe7d 	bl	8021114 <_ZN8touchgfx8ceil28_4El>
 802141a:	9a01      	ldr	r2, [sp, #4]
 802141c:	1a80      	subs	r0, r0, r2
 802141e:	61a0      	str	r0, [r4, #24]
 8021420:	2800      	cmp	r0, #0
 8021422:	f000 8088 	beq.w	8021536 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 8021426:	f857 3009 	ldr.w	r3, [r7, r9]
 802142a:	f857 c008 	ldr.w	ip, [r7, r8]
 802142e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8021432:	ebac 0c03 	sub.w	ip, ip, r3
 8021436:	f8da 1004 	ldr.w	r1, [sl, #4]
 802143a:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 802143e:	1a40      	subs	r0, r0, r1
 8021440:	fb0b f202 	mul.w	r2, fp, r2
 8021444:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8021448:	fb0c 2211 	mls	r2, ip, r1, r2
 802144c:	4641      	mov	r1, r8
 802144e:	fb00 2003 	mla	r0, r0, r3, r2
 8021452:	f104 0310 	add.w	r3, r4, #16
 8021456:	4622      	mov	r2, r4
 8021458:	3801      	subs	r0, #1
 802145a:	4440      	add	r0, r8
 802145c:	f7ff fe6a 	bl	8021134 <_ZN8touchgfx11floorDivModEllRlS0_>
 8021460:	f104 0308 	add.w	r3, r4, #8
 8021464:	1d22      	adds	r2, r4, #4
 8021466:	4641      	mov	r1, r8
 8021468:	4658      	mov	r0, fp
 802146a:	f7ff fe63 	bl	8021134 <_ZN8touchgfx11floorDivModEllRlS0_>
 802146e:	f8c4 800c 	str.w	r8, [r4, #12]
 8021472:	6962      	ldr	r2, [r4, #20]
 8021474:	f8da 3004 	ldr.w	r3, [sl, #4]
 8021478:	eddf 6a31 	vldr	s13, [pc, #196]	; 8021540 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 802147c:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8021480:	6822      	ldr	r2, [r4, #0]
 8021482:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8021486:	ee07 3a10 	vmov	s14, r3
 802148a:	f857 3009 	ldr.w	r3, [r7, r9]
 802148e:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 8021492:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021496:	ee07 3a90 	vmov	s15, r3
 802149a:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 802149e:	ee27 7a26 	vmul.f32	s14, s14, s13
 80214a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80214a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80214aa:	edd3 6a00 	vldr	s13, [r3]
 80214ae:	eee6 6a07 	vfma.f32	s13, s12, s14
 80214b2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80214b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80214ba:	edc4 6a07 	vstr	s13, [r4, #28]
 80214be:	edd4 6a01 	vldr	s13, [r4, #4]
 80214c2:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 80214c6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80214ca:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 80214ce:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80214d2:	ed84 6a08 	vstr	s12, [r4, #32]
 80214d6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80214d8:	6262      	str	r2, [r4, #36]	; 0x24
 80214da:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 80214de:	ed93 6a03 	vldr	s12, [r3, #12]
 80214e2:	eea5 6a87 	vfma.f32	s12, s11, s14
 80214e6:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80214ea:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80214ee:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 80214f2:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 80214f6:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 80214fa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80214fe:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 8021502:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8021504:	6322      	str	r2, [r4, #48]	; 0x30
 8021506:	ed93 6a06 	vldr	s12, [r3, #24]
 802150a:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 802150e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8021512:	eeb0 7a46 	vmov.f32	s14, s12
 8021516:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 802151a:	eea6 7a27 	vfma.f32	s14, s12, s15
 802151e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 8021522:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8021526:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 802152a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802152e:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8021532:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8021534:	63e3      	str	r3, [r4, #60]	; 0x3c
 8021536:	4620      	mov	r0, r4
 8021538:	b003      	add	sp, #12
 802153a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802153e:	bf00      	nop
 8021540:	3d800000 	.word	0x3d800000

08021544 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8021544:	4b01      	ldr	r3, [pc, #4]	; (802154c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8021546:	6018      	str	r0, [r3, #0]
 8021548:	4770      	bx	lr
 802154a:	bf00      	nop
 802154c:	2400c93c 	.word	0x2400c93c

08021550 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8021550:	4b06      	ldr	r3, [pc, #24]	; (802156c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8021552:	881a      	ldrh	r2, [r3, #0]
 8021554:	4282      	cmp	r2, r0
 8021556:	d807      	bhi.n	8021568 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8021558:	4b05      	ldr	r3, [pc, #20]	; (8021570 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 802155a:	881b      	ldrh	r3, [r3, #0]
 802155c:	4413      	add	r3, r2
 802155e:	4298      	cmp	r0, r3
 8021560:	bfac      	ite	ge
 8021562:	2000      	movge	r0, #0
 8021564:	2001      	movlt	r0, #1
 8021566:	4770      	bx	lr
 8021568:	2000      	movs	r0, #0
 802156a:	4770      	bx	lr
 802156c:	2400c95c 	.word	0x2400c95c
 8021570:	2400c960 	.word	0x2400c960

08021574 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8021574:	b508      	push	{r3, lr}
 8021576:	4601      	mov	r1, r0
 8021578:	f7ff ffea 	bl	8021550 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 802157c:	b118      	cbz	r0, 8021586 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 802157e:	4b02      	ldr	r3, [pc, #8]	; (8021588 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8021580:	681b      	ldr	r3, [r3, #0]
 8021582:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8021586:	bd08      	pop	{r3, pc}
 8021588:	2400c940 	.word	0x2400c940

0802158c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 802158c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021590:	4d28      	ldr	r5, [pc, #160]	; (8021634 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8021592:	682b      	ldr	r3, [r5, #0]
 8021594:	2b00      	cmp	r3, #0
 8021596:	d04a      	beq.n	802162e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 8021598:	4a27      	ldr	r2, [pc, #156]	; (8021638 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 802159a:	4e28      	ldr	r6, [pc, #160]	; (802163c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 802159c:	8810      	ldrh	r0, [r2, #0]
 802159e:	f8b6 8000 	ldrh.w	r8, [r6]
 80215a2:	4c27      	ldr	r4, [pc, #156]	; (8021640 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80215a4:	4440      	add	r0, r8
 80215a6:	4f27      	ldr	r7, [pc, #156]	; (8021644 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80215a8:	1c41      	adds	r1, r0, #1
 80215aa:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 80215ae:	f021 0101 	bic.w	r1, r1, #1
 80215b2:	eb03 020e 	add.w	r2, r3, lr
 80215b6:	0409      	lsls	r1, r1, #16
 80215b8:	6022      	str	r2, [r4, #0]
 80215ba:	0c09      	lsrs	r1, r1, #16
 80215bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80215c0:	eb0e 010c 	add.w	r1, lr, ip
 80215c4:	185a      	adds	r2, r3, r1
 80215c6:	603a      	str	r2, [r7, #0]
 80215c8:	220e      	movs	r2, #14
 80215ca:	fb02 f208 	mul.w	r2, r2, r8
 80215ce:	3203      	adds	r2, #3
 80215d0:	f022 0203 	bic.w	r2, r2, #3
 80215d4:	4411      	add	r1, r2
 80215d6:	440b      	add	r3, r1
 80215d8:	491b      	ldr	r1, [pc, #108]	; (8021648 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 80215da:	600b      	str	r3, [r1, #0]
 80215dc:	2300      	movs	r3, #0
 80215de:	491b      	ldr	r1, [pc, #108]	; (802164c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 80215e0:	800b      	strh	r3, [r1, #0]
 80215e2:	491b      	ldr	r1, [pc, #108]	; (8021650 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 80215e4:	6809      	ldr	r1, [r1, #0]
 80215e6:	eba1 010e 	sub.w	r1, r1, lr
 80215ea:	eba1 010c 	sub.w	r1, r1, ip
 80215ee:	469c      	mov	ip, r3
 80215f0:	1a8a      	subs	r2, r1, r2
 80215f2:	4918      	ldr	r1, [pc, #96]	; (8021654 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 80215f4:	600a      	str	r2, [r1, #0]
 80215f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80215fa:	4a17      	ldr	r2, [pc, #92]	; (8021658 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 80215fc:	8013      	strh	r3, [r2, #0]
 80215fe:	4283      	cmp	r3, r0
 8021600:	d10d      	bne.n	802161e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8021602:	8835      	ldrh	r5, [r6, #0]
 8021604:	2300      	movs	r3, #0
 8021606:	6838      	ldr	r0, [r7, #0]
 8021608:	240e      	movs	r4, #14
 802160a:	429d      	cmp	r5, r3
 802160c:	d90f      	bls.n	802162e <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 802160e:	fb04 0203 	mla	r2, r4, r3, r0
 8021612:	3301      	adds	r3, #1
 8021614:	7b11      	ldrb	r1, [r2, #12]
 8021616:	f36f 1145 	bfc	r1, #5, #1
 802161a:	7311      	strb	r1, [r2, #12]
 802161c:	e7f5      	b.n	802160a <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 802161e:	682a      	ldr	r2, [r5, #0]
 8021620:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8021624:	6822      	ldr	r2, [r4, #0]
 8021626:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 802162a:	3301      	adds	r3, #1
 802162c:	e7e7      	b.n	80215fe <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 802162e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021632:	bf00      	nop
 8021634:	2400c940 	.word	0x2400c940
 8021638:	2400c95c 	.word	0x2400c95c
 802163c:	2400c960 	.word	0x2400c960
 8021640:	2400c954 	.word	0x2400c954
 8021644:	2400c944 	.word	0x2400c944
 8021648:	2400c94c 	.word	0x2400c94c
 802164c:	2400c95e 	.word	0x2400c95e
 8021650:	2400c948 	.word	0x2400c948
 8021654:	2400c958 	.word	0x2400c958
 8021658:	2400c950 	.word	0x2400c950

0802165c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 802165c:	4b10      	ldr	r3, [pc, #64]	; (80216a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 802165e:	b510      	push	{r4, lr}
 8021660:	681b      	ldr	r3, [r3, #0]
 8021662:	b9db      	cbnz	r3, 802169c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8021664:	b1d1      	cbz	r1, 802169c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8021666:	4b0f      	ldr	r3, [pc, #60]	; (80216a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8021668:	240e      	movs	r4, #14
 802166a:	801a      	strh	r2, [r3, #0]
 802166c:	b292      	uxth	r2, r2
 802166e:	4b0e      	ldr	r3, [pc, #56]	; (80216a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8021670:	881b      	ldrh	r3, [r3, #0]
 8021672:	4413      	add	r3, r2
 8021674:	4362      	muls	r2, r4
 8021676:	2406      	movs	r4, #6
 8021678:	fb04 2203 	mla	r2, r4, r3, r2
 802167c:	428a      	cmp	r2, r1
 802167e:	d305      	bcc.n	802168c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8021680:	4b0a      	ldr	r3, [pc, #40]	; (80216ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8021682:	2135      	movs	r1, #53	; 0x35
 8021684:	4a0a      	ldr	r2, [pc, #40]	; (80216b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8021686:	480b      	ldr	r0, [pc, #44]	; (80216b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8021688:	f00a f8ee 	bl	802b868 <__assert_func>
 802168c:	4b0a      	ldr	r3, [pc, #40]	; (80216b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 802168e:	6019      	str	r1, [r3, #0]
 8021690:	4b0a      	ldr	r3, [pc, #40]	; (80216bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8021692:	6018      	str	r0, [r3, #0]
 8021694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021698:	f7ff bf78 	b.w	802158c <_ZN8touchgfx6Bitmap10clearCacheEv>
 802169c:	bd10      	pop	{r4, pc}
 802169e:	bf00      	nop
 80216a0:	2400c94c 	.word	0x2400c94c
 80216a4:	2400c960 	.word	0x2400c960
 80216a8:	2400c95c 	.word	0x2400c95c
 80216ac:	08030e11 	.word	0x08030e11
 80216b0:	08030e6a 	.word	0x08030e6a
 80216b4:	08030dec 	.word	0x08030dec
 80216b8:	2400c948 	.word	0x2400c948
 80216bc:	2400c940 	.word	0x2400c940

080216c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80216c0:	b470      	push	{r4, r5, r6}
 80216c2:	4c07      	ldr	r4, [pc, #28]	; (80216e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80216c4:	4605      	mov	r5, r0
 80216c6:	4610      	mov	r0, r2
 80216c8:	9a03      	ldr	r2, [sp, #12]
 80216ca:	6826      	ldr	r6, [r4, #0]
 80216cc:	b936      	cbnz	r6, 80216dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80216ce:	6025      	str	r5, [r4, #0]
 80216d0:	4c04      	ldr	r4, [pc, #16]	; (80216e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80216d2:	8021      	strh	r1, [r4, #0]
 80216d4:	4619      	mov	r1, r3
 80216d6:	bc70      	pop	{r4, r5, r6}
 80216d8:	f7ff bfc0 	b.w	802165c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80216dc:	bc70      	pop	{r4, r5, r6}
 80216de:	4770      	bx	lr
 80216e0:	2400c964 	.word	0x2400c964
 80216e4:	2400c95c 	.word	0x2400c95c

080216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80216e8:	b508      	push	{r3, lr}
 80216ea:	4b14      	ldr	r3, [pc, #80]	; (802173c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80216ec:	6819      	ldr	r1, [r3, #0]
 80216ee:	b931      	cbnz	r1, 80216fe <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 80216f0:	4b13      	ldr	r3, [pc, #76]	; (8021740 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80216f2:	f240 4185 	movw	r1, #1157	; 0x485
 80216f6:	4a13      	ldr	r2, [pc, #76]	; (8021744 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80216f8:	4813      	ldr	r0, [pc, #76]	; (8021748 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80216fa:	f00a f8b5 	bl	802b868 <__assert_func>
 80216fe:	4a13      	ldr	r2, [pc, #76]	; (802174c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8021700:	8803      	ldrh	r3, [r0, #0]
 8021702:	8812      	ldrh	r2, [r2, #0]
 8021704:	4293      	cmp	r3, r2
 8021706:	d204      	bcs.n	8021712 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8021708:	2214      	movs	r2, #20
 802170a:	fb02 1303 	mla	r3, r2, r3, r1
 802170e:	8918      	ldrh	r0, [r3, #8]
 8021710:	bd08      	pop	{r3, pc}
 8021712:	490f      	ldr	r1, [pc, #60]	; (8021750 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8021714:	8809      	ldrh	r1, [r1, #0]
 8021716:	4411      	add	r1, r2
 8021718:	428b      	cmp	r3, r1
 802171a:	da06      	bge.n	802172a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 802171c:	1a9b      	subs	r3, r3, r2
 802171e:	4a0d      	ldr	r2, [pc, #52]	; (8021754 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8021720:	210e      	movs	r1, #14
 8021722:	6812      	ldr	r2, [r2, #0]
 8021724:	fb01 2303 	mla	r3, r1, r3, r2
 8021728:	e7f1      	b.n	802170e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 802172a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802172e:	4293      	cmp	r3, r2
 8021730:	bf0a      	itet	eq
 8021732:	4b09      	ldreq	r3, [pc, #36]	; (8021758 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8021734:	2000      	movne	r0, #0
 8021736:	8818      	ldrheq	r0, [r3, #0]
 8021738:	e7ea      	b.n	8021710 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 802173a:	bf00      	nop
 802173c:	2400c964 	.word	0x2400c964
 8021740:	0802fefd 	.word	0x0802fefd
 8021744:	08030f17 	.word	0x08030f17
 8021748:	08030dec 	.word	0x08030dec
 802174c:	2400c95c 	.word	0x2400c95c
 8021750:	2400c960 	.word	0x2400c960
 8021754:	2400c944 	.word	0x2400c944
 8021758:	2400c8b0 	.word	0x2400c8b0

0802175c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 802175c:	b508      	push	{r3, lr}
 802175e:	4b14      	ldr	r3, [pc, #80]	; (80217b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8021760:	6819      	ldr	r1, [r3, #0]
 8021762:	b931      	cbnz	r1, 8021772 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8021764:	4b13      	ldr	r3, [pc, #76]	; (80217b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8021766:	f240 4199 	movw	r1, #1177	; 0x499
 802176a:	4a13      	ldr	r2, [pc, #76]	; (80217b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 802176c:	4813      	ldr	r0, [pc, #76]	; (80217bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 802176e:	f00a f87b 	bl	802b868 <__assert_func>
 8021772:	4a13      	ldr	r2, [pc, #76]	; (80217c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8021774:	8803      	ldrh	r3, [r0, #0]
 8021776:	8812      	ldrh	r2, [r2, #0]
 8021778:	4293      	cmp	r3, r2
 802177a:	d204      	bcs.n	8021786 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 802177c:	2214      	movs	r2, #20
 802177e:	fb02 1303 	mla	r3, r2, r3, r1
 8021782:	8958      	ldrh	r0, [r3, #10]
 8021784:	bd08      	pop	{r3, pc}
 8021786:	490f      	ldr	r1, [pc, #60]	; (80217c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8021788:	8809      	ldrh	r1, [r1, #0]
 802178a:	4411      	add	r1, r2
 802178c:	428b      	cmp	r3, r1
 802178e:	da06      	bge.n	802179e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8021790:	1a9b      	subs	r3, r3, r2
 8021792:	4a0d      	ldr	r2, [pc, #52]	; (80217c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8021794:	210e      	movs	r1, #14
 8021796:	6812      	ldr	r2, [r2, #0]
 8021798:	fb01 2303 	mla	r3, r1, r3, r2
 802179c:	e7f1      	b.n	8021782 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 802179e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80217a2:	4293      	cmp	r3, r2
 80217a4:	bf0a      	itet	eq
 80217a6:	4b09      	ldreq	r3, [pc, #36]	; (80217cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80217a8:	2000      	movne	r0, #0
 80217aa:	8818      	ldrheq	r0, [r3, #0]
 80217ac:	e7ea      	b.n	8021784 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 80217ae:	bf00      	nop
 80217b0:	2400c964 	.word	0x2400c964
 80217b4:	0802fefd 	.word	0x0802fefd
 80217b8:	08030f43 	.word	0x08030f43
 80217bc:	08030dec 	.word	0x08030dec
 80217c0:	2400c95c 	.word	0x2400c95c
 80217c4:	2400c960 	.word	0x2400c960
 80217c8:	2400c944 	.word	0x2400c944
 80217cc:	2400c8b2 	.word	0x2400c8b2

080217d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80217d0:	4b23      	ldr	r3, [pc, #140]	; (8021860 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80217d2:	b510      	push	{r4, lr}
 80217d4:	681c      	ldr	r4, [r3, #0]
 80217d6:	b934      	cbnz	r4, 80217e6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80217d8:	4b22      	ldr	r3, [pc, #136]	; (8021864 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80217da:	f240 41ad 	movw	r1, #1197	; 0x4ad
 80217de:	4a22      	ldr	r2, [pc, #136]	; (8021868 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80217e0:	4822      	ldr	r0, [pc, #136]	; (802186c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80217e2:	f00a f841 	bl	802b868 <__assert_func>
 80217e6:	4a22      	ldr	r2, [pc, #136]	; (8021870 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80217e8:	880b      	ldrh	r3, [r1, #0]
 80217ea:	8812      	ldrh	r2, [r2, #0]
 80217ec:	4293      	cmp	r3, r2
 80217ee:	d211      	bcs.n	8021814 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 80217f0:	2214      	movs	r2, #20
 80217f2:	fb02 4303 	mla	r3, r2, r3, r4
 80217f6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80217fa:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80217fe:	8a1a      	ldrh	r2, [r3, #16]
 8021800:	8a5b      	ldrh	r3, [r3, #18]
 8021802:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8021806:	8004      	strh	r4, [r0, #0]
 8021808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802180c:	8041      	strh	r1, [r0, #2]
 802180e:	8082      	strh	r2, [r0, #4]
 8021810:	80c3      	strh	r3, [r0, #6]
 8021812:	e00e      	b.n	8021832 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8021814:	4917      	ldr	r1, [pc, #92]	; (8021874 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8021816:	8809      	ldrh	r1, [r1, #0]
 8021818:	4411      	add	r1, r2
 802181a:	428b      	cmp	r3, r1
 802181c:	da0a      	bge.n	8021834 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 802181e:	1a9b      	subs	r3, r3, r2
 8021820:	4a15      	ldr	r2, [pc, #84]	; (8021878 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8021822:	210e      	movs	r1, #14
 8021824:	6812      	ldr	r2, [r2, #0]
 8021826:	fb01 2303 	mla	r3, r1, r3, r2
 802182a:	681a      	ldr	r2, [r3, #0]
 802182c:	6002      	str	r2, [r0, #0]
 802182e:	685a      	ldr	r2, [r3, #4]
 8021830:	6042      	str	r2, [r0, #4]
 8021832:	bd10      	pop	{r4, pc}
 8021834:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021838:	4293      	cmp	r3, r2
 802183a:	d10b      	bne.n	8021854 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 802183c:	4b0f      	ldr	r3, [pc, #60]	; (802187c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 802183e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8021842:	4b0f      	ldr	r3, [pc, #60]	; (8021880 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8021844:	8081      	strh	r1, [r0, #4]
 8021846:	f9b3 2000 	ldrsh.w	r2, [r3]
 802184a:	2300      	movs	r3, #0
 802184c:	80c2      	strh	r2, [r0, #6]
 802184e:	8003      	strh	r3, [r0, #0]
 8021850:	8043      	strh	r3, [r0, #2]
 8021852:	e7ee      	b.n	8021832 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8021854:	2300      	movs	r3, #0
 8021856:	8003      	strh	r3, [r0, #0]
 8021858:	8043      	strh	r3, [r0, #2]
 802185a:	8083      	strh	r3, [r0, #4]
 802185c:	e7d8      	b.n	8021810 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 802185e:	bf00      	nop
 8021860:	2400c964 	.word	0x2400c964
 8021864:	0802fefd 	.word	0x0802fefd
 8021868:	08030eb0 	.word	0x08030eb0
 802186c:	08030dec 	.word	0x08030dec
 8021870:	2400c95c 	.word	0x2400c95c
 8021874:	2400c960 	.word	0x2400c960
 8021878:	2400c944 	.word	0x2400c944
 802187c:	2400c8b0 	.word	0x2400c8b0
 8021880:	2400c8b2 	.word	0x2400c8b2

08021884 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8021884:	4b18      	ldr	r3, [pc, #96]	; (80218e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8021886:	681b      	ldr	r3, [r3, #0]
 8021888:	b34b      	cbz	r3, 80218de <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 802188a:	4a18      	ldr	r2, [pc, #96]	; (80218ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 802188c:	8800      	ldrh	r0, [r0, #0]
 802188e:	8812      	ldrh	r2, [r2, #0]
 8021890:	4290      	cmp	r0, r2
 8021892:	d211      	bcs.n	80218b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8021894:	2214      	movs	r2, #20
 8021896:	fb02 3300 	mla	r3, r2, r0, r3
 802189a:	8a1a      	ldrh	r2, [r3, #16]
 802189c:	8919      	ldrh	r1, [r3, #8]
 802189e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80218a2:	428a      	cmp	r2, r1
 80218a4:	db1d      	blt.n	80218e2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80218a6:	8a58      	ldrh	r0, [r3, #18]
 80218a8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80218ac:	895b      	ldrh	r3, [r3, #10]
 80218ae:	4298      	cmp	r0, r3
 80218b0:	bfac      	ite	ge
 80218b2:	2000      	movge	r0, #0
 80218b4:	2001      	movlt	r0, #1
 80218b6:	4770      	bx	lr
 80218b8:	4b0d      	ldr	r3, [pc, #52]	; (80218f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80218ba:	881b      	ldrh	r3, [r3, #0]
 80218bc:	4413      	add	r3, r2
 80218be:	4298      	cmp	r0, r3
 80218c0:	da0d      	bge.n	80218de <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80218c2:	4b0c      	ldr	r3, [pc, #48]	; (80218f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 80218c4:	1a80      	subs	r0, r0, r2
 80218c6:	220e      	movs	r2, #14
 80218c8:	681b      	ldr	r3, [r3, #0]
 80218ca:	fb02 3300 	mla	r3, r2, r0, r3
 80218ce:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80218d2:	891a      	ldrh	r2, [r3, #8]
 80218d4:	4291      	cmp	r1, r2
 80218d6:	db04      	blt.n	80218e2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80218d8:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80218dc:	e7e6      	b.n	80218ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 80218de:	2000      	movs	r0, #0
 80218e0:	4770      	bx	lr
 80218e2:	2001      	movs	r0, #1
 80218e4:	4770      	bx	lr
 80218e6:	bf00      	nop
 80218e8:	2400c964 	.word	0x2400c964
 80218ec:	2400c95c 	.word	0x2400c95c
 80218f0:	2400c960 	.word	0x2400c960
 80218f4:	2400c944 	.word	0x2400c944

080218f8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80218f8:	b508      	push	{r3, lr}
 80218fa:	4b12      	ldr	r3, [pc, #72]	; (8021944 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80218fc:	6819      	ldr	r1, [r3, #0]
 80218fe:	b931      	cbnz	r1, 802190e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8021900:	4b11      	ldr	r3, [pc, #68]	; (8021948 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8021902:	f240 41d1 	movw	r1, #1233	; 0x4d1
 8021906:	4a11      	ldr	r2, [pc, #68]	; (802194c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8021908:	4811      	ldr	r0, [pc, #68]	; (8021950 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 802190a:	f009 ffad 	bl	802b868 <__assert_func>
 802190e:	8803      	ldrh	r3, [r0, #0]
 8021910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021914:	4293      	cmp	r3, r2
 8021916:	d012      	beq.n	802193e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8021918:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802191c:	4293      	cmp	r3, r2
 802191e:	d103      	bne.n	8021928 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8021920:	4b0c      	ldr	r3, [pc, #48]	; (8021954 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8021922:	681b      	ldr	r3, [r3, #0]
 8021924:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8021926:	bd08      	pop	{r3, pc}
 8021928:	4a0b      	ldr	r2, [pc, #44]	; (8021958 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 802192a:	6812      	ldr	r2, [r2, #0]
 802192c:	b11a      	cbz	r2, 8021936 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 802192e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021932:	2800      	cmp	r0, #0
 8021934:	d1f7      	bne.n	8021926 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021936:	2214      	movs	r2, #20
 8021938:	4353      	muls	r3, r2
 802193a:	58c8      	ldr	r0, [r1, r3]
 802193c:	e7f3      	b.n	8021926 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 802193e:	2000      	movs	r0, #0
 8021940:	e7f1      	b.n	8021926 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8021942:	bf00      	nop
 8021944:	2400c964 	.word	0x2400c964
 8021948:	0802fefd 	.word	0x0802fefd
 802194c:	08030ee6 	.word	0x08030ee6
 8021950:	08030dec 	.word	0x08030dec
 8021954:	2400c8bc 	.word	0x2400c8bc
 8021958:	2400c940 	.word	0x2400c940

0802195c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 802195c:	8802      	ldrh	r2, [r0, #0]
 802195e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8021962:	429a      	cmp	r2, r3
 8021964:	d845      	bhi.n	80219f2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8021966:	4b24      	ldr	r3, [pc, #144]	; (80219f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8021968:	8818      	ldrh	r0, [r3, #0]
 802196a:	4282      	cmp	r2, r0
 802196c:	d221      	bcs.n	80219b2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 802196e:	4b23      	ldr	r3, [pc, #140]	; (80219fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8021970:	6819      	ldr	r1, [r3, #0]
 8021972:	2314      	movs	r3, #20
 8021974:	fb03 1302 	mla	r3, r3, r2, r1
 8021978:	6858      	ldr	r0, [r3, #4]
 802197a:	2800      	cmp	r0, #0
 802197c:	d03a      	beq.n	80219f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 802197e:	4920      	ldr	r1, [pc, #128]	; (8021a00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8021980:	6809      	ldr	r1, [r1, #0]
 8021982:	2900      	cmp	r1, #0
 8021984:	d036      	beq.n	80219f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8021986:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 802198a:	2900      	cmp	r1, #0
 802198c:	d032      	beq.n	80219f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 802198e:	891a      	ldrh	r2, [r3, #8]
 8021990:	8958      	ldrh	r0, [r3, #10]
 8021992:	4350      	muls	r0, r2
 8021994:	7c5a      	ldrb	r2, [r3, #17]
 8021996:	7cdb      	ldrb	r3, [r3, #19]
 8021998:	0952      	lsrs	r2, r2, #5
 802199a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 802199e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80219a2:	2b0b      	cmp	r3, #11
 80219a4:	bf18      	it	ne
 80219a6:	0040      	lslne	r0, r0, #1
 80219a8:	3003      	adds	r0, #3
 80219aa:	f020 0003 	bic.w	r0, r0, #3
 80219ae:	4408      	add	r0, r1
 80219b0:	4770      	bx	lr
 80219b2:	4b14      	ldr	r3, [pc, #80]	; (8021a04 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 80219b4:	881b      	ldrh	r3, [r3, #0]
 80219b6:	4403      	add	r3, r0
 80219b8:	429a      	cmp	r2, r3
 80219ba:	da1a      	bge.n	80219f2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80219bc:	4b12      	ldr	r3, [pc, #72]	; (8021a08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 80219be:	1a10      	subs	r0, r2, r0
 80219c0:	210e      	movs	r1, #14
 80219c2:	681b      	ldr	r3, [r3, #0]
 80219c4:	fb01 3000 	mla	r0, r1, r0, r3
 80219c8:	7b03      	ldrb	r3, [r0, #12]
 80219ca:	f003 031f 	and.w	r3, r3, #31
 80219ce:	2b0b      	cmp	r3, #11
 80219d0:	d10b      	bne.n	80219ea <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80219d2:	8903      	ldrh	r3, [r0, #8]
 80219d4:	8940      	ldrh	r0, [r0, #10]
 80219d6:	4358      	muls	r0, r3
 80219d8:	4b09      	ldr	r3, [pc, #36]	; (8021a00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80219da:	3003      	adds	r0, #3
 80219dc:	6819      	ldr	r1, [r3, #0]
 80219de:	f020 0303 	bic.w	r3, r0, #3
 80219e2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80219e6:	4418      	add	r0, r3
 80219e8:	4770      	bx	lr
 80219ea:	2b0d      	cmp	r3, #13
 80219ec:	d101      	bne.n	80219f2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80219ee:	300d      	adds	r0, #13
 80219f0:	4770      	bx	lr
 80219f2:	2000      	movs	r0, #0
 80219f4:	4770      	bx	lr
 80219f6:	bf00      	nop
 80219f8:	2400c95c 	.word	0x2400c95c
 80219fc:	2400c964 	.word	0x2400c964
 8021a00:	2400c940 	.word	0x2400c940
 8021a04:	2400c960 	.word	0x2400c960
 8021a08:	2400c944 	.word	0x2400c944

08021a0c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8021a0c:	4b17      	ldr	r3, [pc, #92]	; (8021a6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8021a0e:	b510      	push	{r4, lr}
 8021a10:	6819      	ldr	r1, [r3, #0]
 8021a12:	8803      	ldrh	r3, [r0, #0]
 8021a14:	b1e9      	cbz	r1, 8021a52 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8021a16:	4a16      	ldr	r2, [pc, #88]	; (8021a70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8021a18:	8812      	ldrh	r2, [r2, #0]
 8021a1a:	429a      	cmp	r2, r3
 8021a1c:	d90a      	bls.n	8021a34 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 8021a1e:	2214      	movs	r2, #20
 8021a20:	fb02 1303 	mla	r3, r2, r3, r1
 8021a24:	7c58      	ldrb	r0, [r3, #17]
 8021a26:	0942      	lsrs	r2, r0, #5
 8021a28:	7cd8      	ldrb	r0, [r3, #19]
 8021a2a:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8021a2e:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8021a32:	bd10      	pop	{r4, pc}
 8021a34:	490f      	ldr	r1, [pc, #60]	; (8021a74 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8021a36:	8809      	ldrh	r1, [r1, #0]
 8021a38:	4411      	add	r1, r2
 8021a3a:	428b      	cmp	r3, r1
 8021a3c:	da09      	bge.n	8021a52 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8021a3e:	1a9b      	subs	r3, r3, r2
 8021a40:	4a0d      	ldr	r2, [pc, #52]	; (8021a78 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8021a42:	210e      	movs	r1, #14
 8021a44:	6812      	ldr	r2, [r2, #0]
 8021a46:	fb01 2303 	mla	r3, r1, r3, r2
 8021a4a:	7b18      	ldrb	r0, [r3, #12]
 8021a4c:	f000 001f 	and.w	r0, r0, #31
 8021a50:	e7ef      	b.n	8021a32 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8021a52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021a56:	4293      	cmp	r3, r2
 8021a58:	d106      	bne.n	8021a68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8021a5a:	f7e2 fcfd 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 8021a5e:	6803      	ldr	r3, [r0, #0]
 8021a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021a66:	4718      	bx	r3
 8021a68:	2000      	movs	r0, #0
 8021a6a:	e7e2      	b.n	8021a32 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8021a6c:	2400c964 	.word	0x2400c964
 8021a70:	2400c95c 	.word	0x2400c95c
 8021a74:	2400c960 	.word	0x2400c960
 8021a78:	2400c944 	.word	0x2400c944

08021a7c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8021a7c:	2018      	movs	r0, #24
 8021a7e:	4770      	bx	lr

08021a80 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8021a80:	2001      	movs	r0, #1
 8021a82:	4770      	bx	lr

08021a84 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a88:	b085      	sub	sp, #20
 8021a8a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021a8c:	9203      	str	r2, [sp, #12]
 8021a8e:	6870      	ldr	r0, [r6, #4]
 8021a90:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8021a94:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8021a98:	9101      	str	r1, [sp, #4]
 8021a9a:	fa1f f885 	uxth.w	r8, r5
 8021a9e:	43ed      	mvns	r5, r5
 8021aa0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021aa4:	b2ed      	uxtb	r5, r5
 8021aa6:	fb00 2404 	mla	r4, r0, r4, r2
 8021aaa:	6832      	ldr	r2, [r6, #0]
 8021aac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021ab0:	4414      	add	r4, r2
 8021ab2:	f8dc 2000 	ldr.w	r2, [ip]
 8021ab6:	9202      	str	r2, [sp, #8]
 8021ab8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8021abc:	f102 0e04 	add.w	lr, r2, #4
 8021ac0:	9a01      	ldr	r2, [sp, #4]
 8021ac2:	2a00      	cmp	r2, #0
 8021ac4:	dc03      	bgt.n	8021ace <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021ac6:	9a03      	ldr	r2, [sp, #12]
 8021ac8:	2a00      	cmp	r2, #0
 8021aca:	f340 8116 	ble.w	8021cfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021ace:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021ad0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8021ad4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021ad8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021ada:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8021ade:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021ae2:	2b00      	cmp	r3, #0
 8021ae4:	dd0e      	ble.n	8021b04 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021ae6:	1406      	asrs	r6, r0, #16
 8021ae8:	d405      	bmi.n	8021af6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021aea:	4556      	cmp	r6, sl
 8021aec:	da03      	bge.n	8021af6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021aee:	1416      	asrs	r6, r2, #16
 8021af0:	d401      	bmi.n	8021af6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021af2:	454e      	cmp	r6, r9
 8021af4:	db07      	blt.n	8021b06 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021af6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021af8:	3b01      	subs	r3, #1
 8021afa:	3403      	adds	r4, #3
 8021afc:	4430      	add	r0, r6
 8021afe:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8021b00:	4432      	add	r2, r6
 8021b02:	e7ee      	b.n	8021ae2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021b04:	d063      	beq.n	8021bce <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8021b06:	1e5e      	subs	r6, r3, #1
 8021b08:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8021b0a:	fb07 0706 	mla	r7, r7, r6, r0
 8021b0e:	143f      	asrs	r7, r7, #16
 8021b10:	d454      	bmi.n	8021bbc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8021b12:	4557      	cmp	r7, sl
 8021b14:	da52      	bge.n	8021bbc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8021b16:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021b18:	fb07 2606 	mla	r6, r7, r6, r2
 8021b1c:	1436      	asrs	r6, r6, #16
 8021b1e:	d44d      	bmi.n	8021bbc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8021b20:	454e      	cmp	r6, r9
 8021b22:	da4b      	bge.n	8021bbc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8021b24:	1ce6      	adds	r6, r4, #3
 8021b26:	4699      	mov	r9, r3
 8021b28:	f1b9 0f00 	cmp.w	r9, #0
 8021b2c:	f106 0603 	add.w	r6, r6, #3
 8021b30:	dd48      	ble.n	8021bc4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8021b32:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8021b36:	1417      	asrs	r7, r2, #16
 8021b38:	9902      	ldr	r1, [sp, #8]
 8021b3a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8021b3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8021b42:	fb0b 1707 	mla	r7, fp, r7, r1
 8021b46:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8021b4a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021b4c:	f817 700a 	ldrb.w	r7, [r7, sl]
 8021b50:	fb1b fb05 	smulbb	fp, fp, r5
 8021b54:	4408      	add	r0, r1
 8021b56:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021b58:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021b5c:	440a      	add	r2, r1
 8021b5e:	eb0e 0a07 	add.w	sl, lr, r7
 8021b62:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8021b66:	fb07 b708 	mla	r7, r7, r8, fp
 8021b6a:	b2bf      	uxth	r7, r7
 8021b6c:	f107 0b01 	add.w	fp, r7, #1
 8021b70:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8021b74:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8021b78:	fb1b fb05 	smulbb	fp, fp, r5
 8021b7c:	123f      	asrs	r7, r7, #8
 8021b7e:	f806 7c06 	strb.w	r7, [r6, #-6]
 8021b82:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8021b86:	fb07 b708 	mla	r7, r7, r8, fp
 8021b8a:	b2bf      	uxth	r7, r7
 8021b8c:	f107 0b01 	add.w	fp, r7, #1
 8021b90:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8021b94:	123f      	asrs	r7, r7, #8
 8021b96:	f806 7c05 	strb.w	r7, [r6, #-5]
 8021b9a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8021b9e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8021ba2:	fb1a fa05 	smulbb	sl, sl, r5
 8021ba6:	fb07 a708 	mla	r7, r7, r8, sl
 8021baa:	b2bf      	uxth	r7, r7
 8021bac:	f107 0a01 	add.w	sl, r7, #1
 8021bb0:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8021bb4:	123f      	asrs	r7, r7, #8
 8021bb6:	f806 7c04 	strb.w	r7, [r6, #-4]
 8021bba:	e7b5      	b.n	8021b28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8021bbc:	2700      	movs	r7, #0
 8021bbe:	1bde      	subs	r6, r3, r7
 8021bc0:	2e00      	cmp	r6, #0
 8021bc2:	dc42      	bgt.n	8021c4a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8021bc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021bc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021bcc:	441c      	add	r4, r3
 8021bce:	9b01      	ldr	r3, [sp, #4]
 8021bd0:	2b00      	cmp	r3, #0
 8021bd2:	f340 8092 	ble.w	8021cfa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021bd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021bdc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021be0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021be4:	eef0 6a62 	vmov.f32	s13, s5
 8021be8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021bec:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021bf0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021bf4:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8021bf8:	eef0 6a43 	vmov.f32	s13, s6
 8021bfc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021c00:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8021c04:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021c08:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021c0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021c10:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021c14:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021c18:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021c1c:	ee12 2a90 	vmov	r2, s5
 8021c20:	eef0 2a47 	vmov.f32	s5, s14
 8021c24:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c28:	ee13 2a10 	vmov	r2, s6
 8021c2c:	9311      	str	r3, [sp, #68]	; 0x44
 8021c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c30:	eeb0 3a67 	vmov.f32	s6, s15
 8021c34:	fb92 f3f3 	sdiv	r3, r2, r3
 8021c38:	9312      	str	r3, [sp, #72]	; 0x48
 8021c3a:	9b01      	ldr	r3, [sp, #4]
 8021c3c:	9a03      	ldr	r2, [sp, #12]
 8021c3e:	3b01      	subs	r3, #1
 8021c40:	9301      	str	r3, [sp, #4]
 8021c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c44:	bf08      	it	eq
 8021c46:	4613      	moveq	r3, r2
 8021c48:	e73a      	b.n	8021ac0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021c4a:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8021c4e:	d44e      	bmi.n	8021cee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021c50:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8021c54:	4556      	cmp	r6, sl
 8021c56:	dd4a      	ble.n	8021cee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021c58:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8021c5c:	d447      	bmi.n	8021cee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021c5e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8021c62:	4559      	cmp	r1, fp
 8021c64:	dd43      	ble.n	8021cee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021c66:	fa0f f986 	sxth.w	r9, r6
 8021c6a:	9902      	ldr	r1, [sp, #8]
 8021c6c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8021c70:	fb0b 1909 	mla	r9, fp, r9, r1
 8021c74:	f814 b006 	ldrb.w	fp, [r4, r6]
 8021c78:	f819 900a 	ldrb.w	r9, [r9, sl]
 8021c7c:	fb1b fb05 	smulbb	fp, fp, r5
 8021c80:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021c84:	eb0e 0a09 	add.w	sl, lr, r9
 8021c88:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8021c8c:	fb09 b908 	mla	r9, r9, r8, fp
 8021c90:	fa1f f989 	uxth.w	r9, r9
 8021c94:	f109 0b01 	add.w	fp, r9, #1
 8021c98:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021c9c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021ca0:	f804 9006 	strb.w	r9, [r4, r6]
 8021ca4:	4426      	add	r6, r4
 8021ca6:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8021caa:	f896 b001 	ldrb.w	fp, [r6, #1]
 8021cae:	fb1b fb05 	smulbb	fp, fp, r5
 8021cb2:	fb09 b908 	mla	r9, r9, r8, fp
 8021cb6:	fa1f f989 	uxth.w	r9, r9
 8021cba:	f109 0b01 	add.w	fp, r9, #1
 8021cbe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021cc2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021cc6:	f886 9001 	strb.w	r9, [r6, #1]
 8021cca:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8021cce:	f896 a002 	ldrb.w	sl, [r6, #2]
 8021cd2:	fb1a fa05 	smulbb	sl, sl, r5
 8021cd6:	fb09 a908 	mla	r9, r9, r8, sl
 8021cda:	fa1f f989 	uxth.w	r9, r9
 8021cde:	f109 0a01 	add.w	sl, r9, #1
 8021ce2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8021ce6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021cea:	f886 9002 	strb.w	r9, [r6, #2]
 8021cee:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021cf0:	3701      	adds	r7, #1
 8021cf2:	4408      	add	r0, r1
 8021cf4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021cf6:	440a      	add	r2, r1
 8021cf8:	e761      	b.n	8021bbe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8021cfa:	b005      	add	sp, #20
 8021cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021d00 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d04:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021d06:	4693      	mov	fp, r2
 8021d08:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8021d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021d0e:	6868      	ldr	r0, [r5, #4]
 8021d10:	6877      	ldr	r7, [r6, #4]
 8021d12:	9100      	str	r1, [sp, #0]
 8021d14:	3704      	adds	r7, #4
 8021d16:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8021d1a:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8021d1e:	fb00 2404 	mla	r4, r0, r4, r2
 8021d22:	682a      	ldr	r2, [r5, #0]
 8021d24:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021d28:	4414      	add	r4, r2
 8021d2a:	6832      	ldr	r2, [r6, #0]
 8021d2c:	9201      	str	r2, [sp, #4]
 8021d2e:	9a00      	ldr	r2, [sp, #0]
 8021d30:	2a00      	cmp	r2, #0
 8021d32:	dc03      	bgt.n	8021d3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021d34:	f1bb 0f00 	cmp.w	fp, #0
 8021d38:	f340 80bc 	ble.w	8021eb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8021d3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021d3e:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8021d42:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021d46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021d48:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8021d4c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021d50:	2b00      	cmp	r3, #0
 8021d52:	dd0c      	ble.n	8021d6e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021d54:	1405      	asrs	r5, r0, #16
 8021d56:	d405      	bmi.n	8021d64 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8021d58:	4555      	cmp	r5, sl
 8021d5a:	da03      	bge.n	8021d64 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8021d5c:	1415      	asrs	r5, r2, #16
 8021d5e:	d401      	bmi.n	8021d64 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8021d60:	454d      	cmp	r5, r9
 8021d62:	db05      	blt.n	8021d70 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021d64:	4440      	add	r0, r8
 8021d66:	4472      	add	r2, lr
 8021d68:	3b01      	subs	r3, #1
 8021d6a:	3403      	adds	r4, #3
 8021d6c:	e7f0      	b.n	8021d50 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8021d6e:	d03f      	beq.n	8021df0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8021d70:	1e5d      	subs	r5, r3, #1
 8021d72:	fb08 0c05 	mla	ip, r8, r5, r0
 8021d76:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8021d7a:	d42e      	bmi.n	8021dda <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8021d7c:	45d4      	cmp	ip, sl
 8021d7e:	da2c      	bge.n	8021dda <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8021d80:	fb0e 2505 	mla	r5, lr, r5, r2
 8021d84:	142d      	asrs	r5, r5, #16
 8021d86:	d428      	bmi.n	8021dda <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8021d88:	454d      	cmp	r5, r9
 8021d8a:	da26      	bge.n	8021dda <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8021d8c:	1ce5      	adds	r5, r4, #3
 8021d8e:	469c      	mov	ip, r3
 8021d90:	f1bc 0f00 	cmp.w	ip, #0
 8021d94:	f105 0503 	add.w	r5, r5, #3
 8021d98:	dd25      	ble.n	8021de6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8021d9a:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8021d9e:	ea4f 4922 	mov.w	r9, r2, asr #16
 8021da2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021da6:	4472      	add	r2, lr
 8021da8:	468a      	mov	sl, r1
 8021daa:	9901      	ldr	r1, [sp, #4]
 8021dac:	fb0a 1909 	mla	r9, sl, r9, r1
 8021db0:	1401      	asrs	r1, r0, #16
 8021db2:	4440      	add	r0, r8
 8021db4:	f819 9001 	ldrb.w	r9, [r9, r1]
 8021db8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021dbc:	eb07 0a09 	add.w	sl, r7, r9
 8021dc0:	f817 9009 	ldrb.w	r9, [r7, r9]
 8021dc4:	f805 9c06 	strb.w	r9, [r5, #-6]
 8021dc8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8021dcc:	f805 9c05 	strb.w	r9, [r5, #-5]
 8021dd0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8021dd4:	f805 9c04 	strb.w	r9, [r5, #-4]
 8021dd8:	e7da      	b.n	8021d90 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021dda:	2500      	movs	r5, #0
 8021ddc:	eba3 0c05 	sub.w	ip, r3, r5
 8021de0:	f1bc 0f00 	cmp.w	ip, #0
 8021de4:	dc3b      	bgt.n	8021e5e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8021de6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021dea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021dee:	441c      	add	r4, r3
 8021df0:	9b00      	ldr	r3, [sp, #0]
 8021df2:	2b00      	cmp	r3, #0
 8021df4:	dd5e      	ble.n	8021eb4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8021df6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021dfc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021e00:	eeb0 6a62 	vmov.f32	s12, s5
 8021e04:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021e08:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021e0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021e10:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8021e14:	eeb0 6a43 	vmov.f32	s12, s6
 8021e18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021e1c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8021e20:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021e24:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021e28:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021e2c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021e30:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021e34:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021e38:	ee12 2a90 	vmov	r2, s5
 8021e3c:	eef0 2a47 	vmov.f32	s5, s14
 8021e40:	fb92 f8f3 	sdiv	r8, r2, r3
 8021e44:	ee13 2a10 	vmov	r2, s6
 8021e48:	eeb0 3a67 	vmov.f32	s6, s15
 8021e4c:	fb92 fef3 	sdiv	lr, r2, r3
 8021e50:	9b00      	ldr	r3, [sp, #0]
 8021e52:	3b01      	subs	r3, #1
 8021e54:	9300      	str	r3, [sp, #0]
 8021e56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e58:	bf08      	it	eq
 8021e5a:	465b      	moveq	r3, fp
 8021e5c:	e767      	b.n	8021d2e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8021e5e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8021e62:	d423      	bmi.n	8021eac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021e64:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8021e68:	45cc      	cmp	ip, r9
 8021e6a:	dd1f      	ble.n	8021eac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021e6c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8021e70:	d41c      	bmi.n	8021eac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021e72:	68f1      	ldr	r1, [r6, #12]
 8021e74:	4551      	cmp	r1, sl
 8021e76:	dd19      	ble.n	8021eac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021e78:	fa0f fc8c 	sxth.w	ip, ip
 8021e7c:	9901      	ldr	r1, [sp, #4]
 8021e7e:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8021e82:	f81c c009 	ldrb.w	ip, [ip, r9]
 8021e86:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021e8a:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8021e8e:	eb07 090c 	add.w	r9, r7, ip
 8021e92:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8021e96:	f804 a00c 	strb.w	sl, [r4, ip]
 8021e9a:	44a4      	add	ip, r4
 8021e9c:	f899 a001 	ldrb.w	sl, [r9, #1]
 8021ea0:	f88c a001 	strb.w	sl, [ip, #1]
 8021ea4:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021ea8:	f88c 9002 	strb.w	r9, [ip, #2]
 8021eac:	4440      	add	r0, r8
 8021eae:	4472      	add	r2, lr
 8021eb0:	3501      	adds	r5, #1
 8021eb2:	e793      	b.n	8021ddc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8021eb4:	b003      	add	sp, #12
 8021eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021eba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021eba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ebe:	b085      	sub	sp, #20
 8021ec0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021ec4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021ec6:	9202      	str	r2, [sp, #8]
 8021ec8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8021ecc:	6860      	ldr	r0, [r4, #4]
 8021ece:	9203      	str	r2, [sp, #12]
 8021ed0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8021ed4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8021ed8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8021edc:	fb00 2505 	mla	r5, r0, r5, r2
 8021ee0:	6822      	ldr	r2, [r4, #0]
 8021ee2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021ee6:	4415      	add	r5, r2
 8021ee8:	f8dc 2000 	ldr.w	r2, [ip]
 8021eec:	9200      	str	r2, [sp, #0]
 8021eee:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8021ef2:	3204      	adds	r2, #4
 8021ef4:	9201      	str	r2, [sp, #4]
 8021ef6:	2900      	cmp	r1, #0
 8021ef8:	dc03      	bgt.n	8021f02 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021efa:	9a02      	ldr	r2, [sp, #8]
 8021efc:	2a00      	cmp	r2, #0
 8021efe:	f340 8127 	ble.w	8022150 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8021f02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021f04:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8021f08:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8021f0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021f0e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8021f12:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021f16:	2b00      	cmp	r3, #0
 8021f18:	dd0d      	ble.n	8021f36 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021f1a:	1422      	asrs	r2, r4, #16
 8021f1c:	d405      	bmi.n	8021f2a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021f1e:	4542      	cmp	r2, r8
 8021f20:	da03      	bge.n	8021f2a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021f22:	1402      	asrs	r2, r0, #16
 8021f24:	d401      	bmi.n	8021f2a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021f26:	42ba      	cmp	r2, r7
 8021f28:	db06      	blt.n	8021f38 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021f2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021f2c:	4474      	add	r4, lr
 8021f2e:	3b01      	subs	r3, #1
 8021f30:	3503      	adds	r5, #3
 8021f32:	4410      	add	r0, r2
 8021f34:	e7ef      	b.n	8021f16 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021f36:	d075      	beq.n	8022024 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8021f38:	1e5a      	subs	r2, r3, #1
 8021f3a:	fb0e 4602 	mla	r6, lr, r2, r4
 8021f3e:	1436      	asrs	r6, r6, #16
 8021f40:	d465      	bmi.n	802200e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021f42:	4546      	cmp	r6, r8
 8021f44:	da63      	bge.n	802200e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021f46:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8021f48:	fb06 0202 	mla	r2, r6, r2, r0
 8021f4c:	1412      	asrs	r2, r2, #16
 8021f4e:	d45e      	bmi.n	802200e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021f50:	42ba      	cmp	r2, r7
 8021f52:	da5c      	bge.n	802200e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021f54:	1cef      	adds	r7, r5, #3
 8021f56:	4699      	mov	r9, r3
 8021f58:	f1b9 0f00 	cmp.w	r9, #0
 8021f5c:	dd5d      	ble.n	802201a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8021f5e:	1402      	asrs	r2, r0, #16
 8021f60:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8021f64:	1426      	asrs	r6, r4, #16
 8021f66:	4692      	mov	sl, r2
 8021f68:	9a00      	ldr	r2, [sp, #0]
 8021f6a:	fb08 220a 	mla	r2, r8, sl, r2
 8021f6e:	5d92      	ldrb	r2, [r2, r6]
 8021f70:	9e01      	ldr	r6, [sp, #4]
 8021f72:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8021f76:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8021f7a:	d041      	beq.n	8022000 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8021f7c:	9a03      	ldr	r2, [sp, #12]
 8021f7e:	fa5f fb86 	uxtb.w	fp, r6
 8021f82:	fb02 f808 	mul.w	r8, r2, r8
 8021f86:	f108 0201 	add.w	r2, r8, #1
 8021f8a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8021f8e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8021f92:	1212      	asrs	r2, r2, #8
 8021f94:	fa1f fa82 	uxth.w	sl, r2
 8021f98:	43d2      	mvns	r2, r2
 8021f9a:	fb1b fb0a 	smulbb	fp, fp, sl
 8021f9e:	b2d2      	uxtb	r2, r2
 8021fa0:	fb08 b802 	mla	r8, r8, r2, fp
 8021fa4:	fa1f f888 	uxth.w	r8, r8
 8021fa8:	f108 0b01 	add.w	fp, r8, #1
 8021fac:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021fb0:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8021fb4:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8021fb8:	fb1b fb0a 	smulbb	fp, fp, sl
 8021fbc:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021fc0:	fb16 fa0a 	smulbb	sl, r6, sl
 8021fc4:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8021fc8:	f807 8c03 	strb.w	r8, [r7, #-3]
 8021fcc:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8021fd0:	fb06 aa02 	mla	sl, r6, r2, sl
 8021fd4:	fb08 b802 	mla	r8, r8, r2, fp
 8021fd8:	fa1f fa8a 	uxth.w	sl, sl
 8021fdc:	fa1f f888 	uxth.w	r8, r8
 8021fe0:	f10a 0601 	add.w	r6, sl, #1
 8021fe4:	f108 0b01 	add.w	fp, r8, #1
 8021fe8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8021fec:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8021ff0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021ff4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021ff8:	f807 ac01 	strb.w	sl, [r7, #-1]
 8021ffc:	f807 8c02 	strb.w	r8, [r7, #-2]
 8022000:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022002:	4474      	add	r4, lr
 8022004:	3703      	adds	r7, #3
 8022006:	f109 39ff 	add.w	r9, r9, #4294967295
 802200a:	4410      	add	r0, r2
 802200c:	e7a4      	b.n	8021f58 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802200e:	f04f 0800 	mov.w	r8, #0
 8022012:	eba3 0208 	sub.w	r2, r3, r8
 8022016:	2a00      	cmp	r2, #0
 8022018:	dc3b      	bgt.n	8022092 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802201a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802201e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022022:	441d      	add	r5, r3
 8022024:	2900      	cmp	r1, #0
 8022026:	f340 8093 	ble.w	8022150 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802202a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802202e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022030:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022034:	3901      	subs	r1, #1
 8022036:	eeb0 6a62 	vmov.f32	s12, s5
 802203a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802203e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022042:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022046:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802204a:	eeb0 6a43 	vmov.f32	s12, s6
 802204e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022052:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8022056:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802205a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802205e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022062:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022066:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802206a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802206e:	ee12 2a90 	vmov	r2, s5
 8022072:	eef0 2a47 	vmov.f32	s5, s14
 8022076:	fb92 fef3 	sdiv	lr, r2, r3
 802207a:	ee13 2a10 	vmov	r2, s6
 802207e:	eeb0 3a67 	vmov.f32	s6, s15
 8022082:	fb92 f3f3 	sdiv	r3, r2, r3
 8022086:	9a02      	ldr	r2, [sp, #8]
 8022088:	9312      	str	r3, [sp, #72]	; 0x48
 802208a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802208c:	bf08      	it	eq
 802208e:	4613      	moveq	r3, r2
 8022090:	e731      	b.n	8021ef6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022092:	1427      	asrs	r7, r4, #16
 8022094:	d456      	bmi.n	8022144 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022096:	f8dc 6008 	ldr.w	r6, [ip, #8]
 802209a:	42be      	cmp	r6, r7
 802209c:	dd52      	ble.n	8022144 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802209e:	ea5f 4920 	movs.w	r9, r0, asr #16
 80220a2:	d44f      	bmi.n	8022144 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80220a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80220a8:	454a      	cmp	r2, r9
 80220aa:	dd4b      	ble.n	8022144 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80220ac:	9a00      	ldr	r2, [sp, #0]
 80220ae:	b236      	sxth	r6, r6
 80220b0:	fb09 2606 	mla	r6, r9, r6, r2
 80220b4:	5df2      	ldrb	r2, [r6, r7]
 80220b6:	9e01      	ldr	r6, [sp, #4]
 80220b8:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80220bc:	0e3a      	lsrs	r2, r7, #24
 80220be:	d041      	beq.n	8022144 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80220c0:	9e03      	ldr	r6, [sp, #12]
 80220c2:	fa5f fb87 	uxtb.w	fp, r7
 80220c6:	4372      	muls	r2, r6
 80220c8:	1c56      	adds	r6, r2, #1
 80220ca:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80220ce:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80220d2:	1212      	asrs	r2, r2, #8
 80220d4:	f815 9006 	ldrb.w	r9, [r5, r6]
 80220d8:	fa1f fa82 	uxth.w	sl, r2
 80220dc:	43d2      	mvns	r2, r2
 80220de:	fb1b fb0a 	smulbb	fp, fp, sl
 80220e2:	b2d2      	uxtb	r2, r2
 80220e4:	fb09 b902 	mla	r9, r9, r2, fp
 80220e8:	fa1f f989 	uxth.w	r9, r9
 80220ec:	f109 0b01 	add.w	fp, r9, #1
 80220f0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80220f4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80220f8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80220fc:	fb1b fb0a 	smulbb	fp, fp, sl
 8022100:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022104:	fb17 fa0a 	smulbb	sl, r7, sl
 8022108:	f805 9006 	strb.w	r9, [r5, r6]
 802210c:	442e      	add	r6, r5
 802210e:	78b7      	ldrb	r7, [r6, #2]
 8022110:	f896 9001 	ldrb.w	r9, [r6, #1]
 8022114:	fb07 aa02 	mla	sl, r7, r2, sl
 8022118:	fb09 b902 	mla	r9, r9, r2, fp
 802211c:	fa1f fa8a 	uxth.w	sl, sl
 8022120:	fa1f f989 	uxth.w	r9, r9
 8022124:	f10a 0701 	add.w	r7, sl, #1
 8022128:	f109 0b01 	add.w	fp, r9, #1
 802212c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022130:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022134:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022138:	ea4f 2929 	mov.w	r9, r9, asr #8
 802213c:	f886 a002 	strb.w	sl, [r6, #2]
 8022140:	f886 9001 	strb.w	r9, [r6, #1]
 8022144:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022146:	4474      	add	r4, lr
 8022148:	f108 0801 	add.w	r8, r8, #1
 802214c:	4410      	add	r0, r2
 802214e:	e760      	b.n	8022012 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8022150:	b005      	add	sp, #20
 8022152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022156 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802215a:	b085      	sub	sp, #20
 802215c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022160:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022162:	9203      	str	r2, [sp, #12]
 8022164:	6868      	ldr	r0, [r5, #4]
 8022166:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 802216a:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 802216e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8022172:	fb00 2404 	mla	r4, r0, r4, r2
 8022176:	682a      	ldr	r2, [r5, #0]
 8022178:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802217c:	4414      	add	r4, r2
 802217e:	f8dc 2000 	ldr.w	r2, [ip]
 8022182:	9201      	str	r2, [sp, #4]
 8022184:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8022188:	3204      	adds	r2, #4
 802218a:	9202      	str	r2, [sp, #8]
 802218c:	2900      	cmp	r1, #0
 802218e:	dc03      	bgt.n	8022198 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8022190:	9a03      	ldr	r2, [sp, #12]
 8022192:	2a00      	cmp	r2, #0
 8022194:	f340 8137 	ble.w	8022406 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022198:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802219a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802219e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80221a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80221a4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80221a8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80221ac:	2b00      	cmp	r3, #0
 80221ae:	dd0d      	ble.n	80221cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80221b0:	1405      	asrs	r5, r0, #16
 80221b2:	d405      	bmi.n	80221c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80221b4:	4545      	cmp	r5, r8
 80221b6:	da03      	bge.n	80221c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80221b8:	1415      	asrs	r5, r2, #16
 80221ba:	d401      	bmi.n	80221c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80221bc:	42bd      	cmp	r5, r7
 80221be:	db06      	blt.n	80221ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80221c0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80221c2:	4470      	add	r0, lr
 80221c4:	3b01      	subs	r3, #1
 80221c6:	3403      	adds	r4, #3
 80221c8:	442a      	add	r2, r5
 80221ca:	e7ef      	b.n	80221ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80221cc:	d070      	beq.n	80222b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80221ce:	1e5d      	subs	r5, r3, #1
 80221d0:	fb0e 0605 	mla	r6, lr, r5, r0
 80221d4:	1436      	asrs	r6, r6, #16
 80221d6:	d462      	bmi.n	802229e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80221d8:	4546      	cmp	r6, r8
 80221da:	da60      	bge.n	802229e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80221dc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80221de:	fb06 2505 	mla	r5, r6, r5, r2
 80221e2:	142d      	asrs	r5, r5, #16
 80221e4:	d45b      	bmi.n	802229e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80221e6:	42bd      	cmp	r5, r7
 80221e8:	da59      	bge.n	802229e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80221ea:	1ce5      	adds	r5, r4, #3
 80221ec:	469a      	mov	sl, r3
 80221ee:	f1ba 0f00 	cmp.w	sl, #0
 80221f2:	dd58      	ble.n	80222a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80221f4:	1416      	asrs	r6, r2, #16
 80221f6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80221fa:	1407      	asrs	r7, r0, #16
 80221fc:	46b1      	mov	r9, r6
 80221fe:	9e01      	ldr	r6, [sp, #4]
 8022200:	fb08 6609 	mla	r6, r8, r9, r6
 8022204:	5df6      	ldrb	r6, [r6, r7]
 8022206:	9f02      	ldr	r7, [sp, #8]
 8022208:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 802220c:	0e37      	lsrs	r7, r6, #24
 802220e:	2fff      	cmp	r7, #255	; 0xff
 8022210:	f000 80f0 	beq.w	80223f4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8022214:	fa5f f887 	uxtb.w	r8, r7
 8022218:	b3d7      	cbz	r7, 8022290 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802221a:	fa1f f788 	uxth.w	r7, r8
 802221e:	ea6f 0808 	mvn.w	r8, r8
 8022222:	fa5f fb86 	uxtb.w	fp, r6
 8022226:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 802222a:	fa5f f888 	uxtb.w	r8, r8
 802222e:	fb1b fb07 	smulbb	fp, fp, r7
 8022232:	fb09 b908 	mla	r9, r9, r8, fp
 8022236:	fa1f f989 	uxth.w	r9, r9
 802223a:	f109 0b01 	add.w	fp, r9, #1
 802223e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022242:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8022246:	fb1b fb08 	smulbb	fp, fp, r8
 802224a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802224e:	f805 9c03 	strb.w	r9, [r5, #-3]
 8022252:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8022256:	f3c6 4607 	ubfx	r6, r6, #16, #8
 802225a:	fb09 b907 	mla	r9, r9, r7, fp
 802225e:	fa1f f989 	uxth.w	r9, r9
 8022262:	f109 0b01 	add.w	fp, r9, #1
 8022266:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802226a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802226e:	f805 9c02 	strb.w	r9, [r5, #-2]
 8022272:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8022276:	fb19 f808 	smulbb	r8, r9, r8
 802227a:	fb06 8607 	mla	r6, r6, r7, r8
 802227e:	b2b6      	uxth	r6, r6
 8022280:	f106 0801 	add.w	r8, r6, #1
 8022284:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8022288:	ea4f 2828 	mov.w	r8, r8, asr #8
 802228c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8022290:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8022292:	4470      	add	r0, lr
 8022294:	3503      	adds	r5, #3
 8022296:	f10a 3aff 	add.w	sl, sl, #4294967295
 802229a:	4432      	add	r2, r6
 802229c:	e7a7      	b.n	80221ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802229e:	2600      	movs	r6, #0
 80222a0:	1b9d      	subs	r5, r3, r6
 80222a2:	2d00      	cmp	r5, #0
 80222a4:	dc3b      	bgt.n	802231e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80222a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80222aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80222ae:	441c      	add	r4, r3
 80222b0:	2900      	cmp	r1, #0
 80222b2:	f340 80a8 	ble.w	8022406 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80222b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80222ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80222bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80222c0:	3901      	subs	r1, #1
 80222c2:	eeb0 6a62 	vmov.f32	s12, s5
 80222c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80222ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80222ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80222d2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80222d6:	eeb0 6a43 	vmov.f32	s12, s6
 80222da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80222de:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80222e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80222e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80222ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80222ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80222f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80222f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80222fa:	ee12 2a90 	vmov	r2, s5
 80222fe:	eef0 2a47 	vmov.f32	s5, s14
 8022302:	fb92 fef3 	sdiv	lr, r2, r3
 8022306:	ee13 2a10 	vmov	r2, s6
 802230a:	eeb0 3a67 	vmov.f32	s6, s15
 802230e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022312:	9a03      	ldr	r2, [sp, #12]
 8022314:	9312      	str	r3, [sp, #72]	; 0x48
 8022316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022318:	bf08      	it	eq
 802231a:	4613      	moveq	r3, r2
 802231c:	e736      	b.n	802218c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802231e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8022322:	d457      	bmi.n	80223d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022324:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8022328:	4547      	cmp	r7, r8
 802232a:	dd53      	ble.n	80223d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802232c:	ea5f 4922 	movs.w	r9, r2, asr #16
 8022330:	d450      	bmi.n	80223d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022332:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8022336:	454d      	cmp	r5, r9
 8022338:	dd4c      	ble.n	80223d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802233a:	9d01      	ldr	r5, [sp, #4]
 802233c:	b23f      	sxth	r7, r7
 802233e:	fb09 5707 	mla	r7, r9, r7, r5
 8022342:	f817 5008 	ldrb.w	r5, [r7, r8]
 8022346:	9f02      	ldr	r7, [sp, #8]
 8022348:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 802234c:	0e2f      	lsrs	r7, r5, #24
 802234e:	2fff      	cmp	r7, #255	; 0xff
 8022350:	d045      	beq.n	80223de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8022352:	fa5f f987 	uxtb.w	r9, r7
 8022356:	b3ef      	cbz	r7, 80223d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022358:	fa1f f889 	uxth.w	r8, r9
 802235c:	ea6f 0909 	mvn.w	r9, r9
 8022360:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8022364:	fa5f fb85 	uxtb.w	fp, r5
 8022368:	f814 a007 	ldrb.w	sl, [r4, r7]
 802236c:	fa5f f989 	uxtb.w	r9, r9
 8022370:	fb1b fb08 	smulbb	fp, fp, r8
 8022374:	fb0a ba09 	mla	sl, sl, r9, fp
 8022378:	fa1f fa8a 	uxth.w	sl, sl
 802237c:	f10a 0b01 	add.w	fp, sl, #1
 8022380:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8022384:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022388:	f804 a007 	strb.w	sl, [r4, r7]
 802238c:	4427      	add	r7, r4
 802238e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8022392:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8022396:	f897 b001 	ldrb.w	fp, [r7, #1]
 802239a:	fb1b fb09 	smulbb	fp, fp, r9
 802239e:	fb0a ba08 	mla	sl, sl, r8, fp
 80223a2:	fa1f fa8a 	uxth.w	sl, sl
 80223a6:	f10a 0b01 	add.w	fp, sl, #1
 80223aa:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80223ae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80223b2:	f887 a001 	strb.w	sl, [r7, #1]
 80223b6:	f897 a002 	ldrb.w	sl, [r7, #2]
 80223ba:	fb1a f909 	smulbb	r9, sl, r9
 80223be:	fb05 9508 	mla	r5, r5, r8, r9
 80223c2:	b2ad      	uxth	r5, r5
 80223c4:	f105 0901 	add.w	r9, r5, #1
 80223c8:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80223cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80223d0:	f887 9002 	strb.w	r9, [r7, #2]
 80223d4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80223d6:	4470      	add	r0, lr
 80223d8:	3601      	adds	r6, #1
 80223da:	442a      	add	r2, r5
 80223dc:	e760      	b.n	80222a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80223de:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80223e2:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80223e6:	55e5      	strb	r5, [r4, r7]
 80223e8:	4427      	add	r7, r4
 80223ea:	0c2d      	lsrs	r5, r5, #16
 80223ec:	f887 8001 	strb.w	r8, [r7, #1]
 80223f0:	70bd      	strb	r5, [r7, #2]
 80223f2:	e7ef      	b.n	80223d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80223f4:	0a37      	lsrs	r7, r6, #8
 80223f6:	f805 6c03 	strb.w	r6, [r5, #-3]
 80223fa:	0c36      	lsrs	r6, r6, #16
 80223fc:	f805 7c02 	strb.w	r7, [r5, #-2]
 8022400:	f805 6c01 	strb.w	r6, [r5, #-1]
 8022404:	e744      	b.n	8022290 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022406:	b005      	add	sp, #20
 8022408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802240c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802240c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022410:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022412:	9201      	str	r2, [sp, #4]
 8022414:	6870      	ldr	r0, [r6, #4]
 8022416:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 802241a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 802241e:	fa1f fe85 	uxth.w	lr, r5
 8022422:	43ed      	mvns	r5, r5
 8022424:	f8dc 8000 	ldr.w	r8, [ip]
 8022428:	b2ed      	uxtb	r5, r5
 802242a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 802242e:	fb00 2404 	mla	r4, r0, r4, r2
 8022432:	6832      	ldr	r2, [r6, #0]
 8022434:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022438:	4414      	add	r4, r2
 802243a:	2900      	cmp	r1, #0
 802243c:	dc03      	bgt.n	8022446 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802243e:	9a01      	ldr	r2, [sp, #4]
 8022440:	2a00      	cmp	r2, #0
 8022442:	f340 810d 	ble.w	8022660 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8022446:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022448:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 802244c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022450:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022452:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8022456:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802245a:	2b00      	cmp	r3, #0
 802245c:	dd0e      	ble.n	802247c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802245e:	1406      	asrs	r6, r0, #16
 8022460:	d405      	bmi.n	802246e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022462:	4556      	cmp	r6, sl
 8022464:	da03      	bge.n	802246e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022466:	1416      	asrs	r6, r2, #16
 8022468:	d401      	bmi.n	802246e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802246a:	454e      	cmp	r6, r9
 802246c:	db07      	blt.n	802247e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802246e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8022470:	3b01      	subs	r3, #1
 8022472:	3403      	adds	r4, #3
 8022474:	4430      	add	r0, r6
 8022476:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022478:	4432      	add	r2, r6
 802247a:	e7ee      	b.n	802245a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802247c:	d060      	beq.n	8022540 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802247e:	1e5e      	subs	r6, r3, #1
 8022480:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022482:	fb07 0706 	mla	r7, r7, r6, r0
 8022486:	143f      	asrs	r7, r7, #16
 8022488:	d451      	bmi.n	802252e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802248a:	4557      	cmp	r7, sl
 802248c:	da4f      	bge.n	802252e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802248e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8022490:	fb07 2606 	mla	r6, r7, r6, r2
 8022494:	1436      	asrs	r6, r6, #16
 8022496:	d44a      	bmi.n	802252e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8022498:	454e      	cmp	r6, r9
 802249a:	da48      	bge.n	802252e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802249c:	1ce6      	adds	r6, r4, #3
 802249e:	4699      	mov	r9, r3
 80224a0:	f1b9 0f00 	cmp.w	r9, #0
 80224a4:	f106 0603 	add.w	r6, r6, #3
 80224a8:	dd45      	ble.n	8022536 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80224aa:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80224ae:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80224b2:	1417      	asrs	r7, r2, #16
 80224b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80224b8:	fb0b a707 	mla	r7, fp, r7, sl
 80224bc:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80224c0:	fb1b fb05 	smulbb	fp, fp, r5
 80224c4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80224c8:	eb08 0a07 	add.w	sl, r8, r7
 80224cc:	f818 7007 	ldrb.w	r7, [r8, r7]
 80224d0:	fb07 b70e 	mla	r7, r7, lr, fp
 80224d4:	b2bf      	uxth	r7, r7
 80224d6:	f107 0b01 	add.w	fp, r7, #1
 80224da:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80224de:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80224e2:	fb1b fb05 	smulbb	fp, fp, r5
 80224e6:	123f      	asrs	r7, r7, #8
 80224e8:	f806 7c06 	strb.w	r7, [r6, #-6]
 80224ec:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80224f0:	fb07 b70e 	mla	r7, r7, lr, fp
 80224f4:	b2bf      	uxth	r7, r7
 80224f6:	f107 0b01 	add.w	fp, r7, #1
 80224fa:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80224fe:	123f      	asrs	r7, r7, #8
 8022500:	f806 7c05 	strb.w	r7, [r6, #-5]
 8022504:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8022508:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 802250c:	fb1a fa05 	smulbb	sl, sl, r5
 8022510:	fb07 a70e 	mla	r7, r7, lr, sl
 8022514:	b2bf      	uxth	r7, r7
 8022516:	f107 0a01 	add.w	sl, r7, #1
 802251a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 802251e:	123f      	asrs	r7, r7, #8
 8022520:	f806 7c04 	strb.w	r7, [r6, #-4]
 8022524:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022526:	4438      	add	r0, r7
 8022528:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802252a:	443a      	add	r2, r7
 802252c:	e7b8      	b.n	80224a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802252e:	2700      	movs	r7, #0
 8022530:	1bde      	subs	r6, r3, r7
 8022532:	2e00      	cmp	r6, #0
 8022534:	dc3f      	bgt.n	80225b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8022536:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802253a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802253e:	441c      	add	r4, r3
 8022540:	2900      	cmp	r1, #0
 8022542:	f340 808d 	ble.w	8022660 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8022546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802254a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802254c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022550:	3901      	subs	r1, #1
 8022552:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022556:	eef0 6a62 	vmov.f32	s13, s5
 802255a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802255e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022562:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022566:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 802256a:	eef0 6a43 	vmov.f32	s13, s6
 802256e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022572:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8022576:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802257a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802257e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022582:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022586:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802258a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802258e:	ee12 2a90 	vmov	r2, s5
 8022592:	eef0 2a47 	vmov.f32	s5, s14
 8022596:	fb92 f3f3 	sdiv	r3, r2, r3
 802259a:	ee13 2a10 	vmov	r2, s6
 802259e:	930f      	str	r3, [sp, #60]	; 0x3c
 80225a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80225a2:	eeb0 3a67 	vmov.f32	s6, s15
 80225a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80225aa:	9a01      	ldr	r2, [sp, #4]
 80225ac:	9310      	str	r3, [sp, #64]	; 0x40
 80225ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80225b0:	bf08      	it	eq
 80225b2:	4613      	moveq	r3, r2
 80225b4:	e741      	b.n	802243a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80225b6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80225ba:	d44b      	bmi.n	8022654 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80225bc:	f8dc b008 	ldr.w	fp, [ip, #8]
 80225c0:	45cb      	cmp	fp, r9
 80225c2:	dd47      	ble.n	8022654 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80225c4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80225c8:	d444      	bmi.n	8022654 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80225ca:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80225ce:	4556      	cmp	r6, sl
 80225d0:	dd40      	ble.n	8022654 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80225d2:	fa0f f68b 	sxth.w	r6, fp
 80225d6:	fb0a 9906 	mla	r9, sl, r6, r9
 80225da:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80225de:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80225e2:	f814 b006 	ldrb.w	fp, [r4, r6]
 80225e6:	fb1b fb05 	smulbb	fp, fp, r5
 80225ea:	eb08 0a09 	add.w	sl, r8, r9
 80225ee:	f818 9009 	ldrb.w	r9, [r8, r9]
 80225f2:	fb09 b90e 	mla	r9, r9, lr, fp
 80225f6:	fa1f f989 	uxth.w	r9, r9
 80225fa:	f109 0b01 	add.w	fp, r9, #1
 80225fe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022602:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022606:	f804 9006 	strb.w	r9, [r4, r6]
 802260a:	4426      	add	r6, r4
 802260c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8022610:	f896 b001 	ldrb.w	fp, [r6, #1]
 8022614:	fb1b fb05 	smulbb	fp, fp, r5
 8022618:	fb09 b90e 	mla	r9, r9, lr, fp
 802261c:	fa1f f989 	uxth.w	r9, r9
 8022620:	f109 0b01 	add.w	fp, r9, #1
 8022624:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022628:	ea4f 2929 	mov.w	r9, r9, asr #8
 802262c:	f886 9001 	strb.w	r9, [r6, #1]
 8022630:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8022634:	f896 a002 	ldrb.w	sl, [r6, #2]
 8022638:	fb1a fa05 	smulbb	sl, sl, r5
 802263c:	fb09 a90e 	mla	r9, r9, lr, sl
 8022640:	fa1f f989 	uxth.w	r9, r9
 8022644:	f109 0a01 	add.w	sl, r9, #1
 8022648:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 802264c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022650:	f886 9002 	strb.w	r9, [r6, #2]
 8022654:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8022656:	3701      	adds	r7, #1
 8022658:	4430      	add	r0, r6
 802265a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802265c:	4432      	add	r2, r6
 802265e:	e767      	b.n	8022530 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8022660:	b003      	add	sp, #12
 8022662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022666 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022666:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802266a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802266c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022670:	9201      	str	r2, [sp, #4]
 8022672:	6868      	ldr	r0, [r5, #4]
 8022674:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8022676:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 802267a:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 802267e:	fb00 2404 	mla	r4, r0, r4, r2
 8022682:	682a      	ldr	r2, [r5, #0]
 8022684:	f8d7 8000 	ldr.w	r8, [r7]
 8022688:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802268c:	4414      	add	r4, r2
 802268e:	2900      	cmp	r1, #0
 8022690:	dc03      	bgt.n	802269a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022692:	9a01      	ldr	r2, [sp, #4]
 8022694:	2a00      	cmp	r2, #0
 8022696:	f340 80af 	ble.w	80227f8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 802269a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802269c:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80226a0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80226a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80226a6:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80226aa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80226ae:	2b00      	cmp	r3, #0
 80226b0:	dd0c      	ble.n	80226cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80226b2:	1405      	asrs	r5, r0, #16
 80226b4:	d405      	bmi.n	80226c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80226b6:	4555      	cmp	r5, sl
 80226b8:	da03      	bge.n	80226c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80226ba:	1415      	asrs	r5, r2, #16
 80226bc:	d401      	bmi.n	80226c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80226be:	454d      	cmp	r5, r9
 80226c0:	db05      	blt.n	80226ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80226c2:	4470      	add	r0, lr
 80226c4:	4462      	add	r2, ip
 80226c6:	3b01      	subs	r3, #1
 80226c8:	3403      	adds	r4, #3
 80226ca:	e7f0      	b.n	80226ae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80226cc:	d038      	beq.n	8022740 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80226ce:	1e5d      	subs	r5, r3, #1
 80226d0:	fb0e 0605 	mla	r6, lr, r5, r0
 80226d4:	1436      	asrs	r6, r6, #16
 80226d6:	d42a      	bmi.n	802272e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80226d8:	4556      	cmp	r6, sl
 80226da:	da28      	bge.n	802272e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80226dc:	fb0c 2505 	mla	r5, ip, r5, r2
 80226e0:	142d      	asrs	r5, r5, #16
 80226e2:	d424      	bmi.n	802272e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80226e4:	454d      	cmp	r5, r9
 80226e6:	da22      	bge.n	802272e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80226e8:	1ce6      	adds	r6, r4, #3
 80226ea:	4699      	mov	r9, r3
 80226ec:	f1b9 0f00 	cmp.w	r9, #0
 80226f0:	f106 0603 	add.w	r6, r6, #3
 80226f4:	dd1f      	ble.n	8022736 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80226f6:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80226fa:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80226fe:	1415      	asrs	r5, r2, #16
 8022700:	4470      	add	r0, lr
 8022702:	4462      	add	r2, ip
 8022704:	f109 39ff 	add.w	r9, r9, #4294967295
 8022708:	fb0b a505 	mla	r5, fp, r5, sl
 802270c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022710:	eb08 0a05 	add.w	sl, r8, r5
 8022714:	f818 5005 	ldrb.w	r5, [r8, r5]
 8022718:	f806 5c06 	strb.w	r5, [r6, #-6]
 802271c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8022720:	f806 5c05 	strb.w	r5, [r6, #-5]
 8022724:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8022728:	f806 5c04 	strb.w	r5, [r6, #-4]
 802272c:	e7de      	b.n	80226ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802272e:	2600      	movs	r6, #0
 8022730:	1b9d      	subs	r5, r3, r6
 8022732:	2d00      	cmp	r5, #0
 8022734:	dc38      	bgt.n	80227a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8022736:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802273a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802273e:	441c      	add	r4, r3
 8022740:	2900      	cmp	r1, #0
 8022742:	dd59      	ble.n	80227f8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8022744:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802274a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802274e:	3901      	subs	r1, #1
 8022750:	eeb0 6a62 	vmov.f32	s12, s5
 8022754:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022758:	ee31 1a05 	vadd.f32	s2, s2, s10
 802275c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022760:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8022764:	eeb0 6a43 	vmov.f32	s12, s6
 8022768:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802276c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8022770:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022774:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022778:	ee77 2a62 	vsub.f32	s5, s14, s5
 802277c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022780:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022784:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022788:	ee12 2a90 	vmov	r2, s5
 802278c:	eef0 2a47 	vmov.f32	s5, s14
 8022790:	fb92 fef3 	sdiv	lr, r2, r3
 8022794:	ee13 2a10 	vmov	r2, s6
 8022798:	eeb0 3a67 	vmov.f32	s6, s15
 802279c:	fb92 fcf3 	sdiv	ip, r2, r3
 80227a0:	9a01      	ldr	r2, [sp, #4]
 80227a2:	bf08      	it	eq
 80227a4:	4613      	moveq	r3, r2
 80227a6:	e772      	b.n	802268e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80227a8:	ea5f 4920 	movs.w	r9, r0, asr #16
 80227ac:	d420      	bmi.n	80227f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80227ae:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80227b2:	45cb      	cmp	fp, r9
 80227b4:	dd1c      	ble.n	80227f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80227b6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80227ba:	d419      	bmi.n	80227f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80227bc:	68fd      	ldr	r5, [r7, #12]
 80227be:	4555      	cmp	r5, sl
 80227c0:	dd16      	ble.n	80227f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80227c2:	fa0f f58b 	sxth.w	r5, fp
 80227c6:	fb0a 9505 	mla	r5, sl, r5, r9
 80227ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80227ce:	f818 9005 	ldrb.w	r9, [r8, r5]
 80227d2:	eb08 0b05 	add.w	fp, r8, r5
 80227d6:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 80227da:	f804 9005 	strb.w	r9, [r4, r5]
 80227de:	4425      	add	r5, r4
 80227e0:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80227e4:	f885 9001 	strb.w	r9, [r5, #1]
 80227e8:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80227ec:	f885 9002 	strb.w	r9, [r5, #2]
 80227f0:	4470      	add	r0, lr
 80227f2:	4462      	add	r2, ip
 80227f4:	3601      	adds	r6, #1
 80227f6:	e79b      	b.n	8022730 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80227f8:	b003      	add	sp, #12
 80227fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080227fe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80227fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022802:	b085      	sub	sp, #20
 8022804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022808:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802280a:	9202      	str	r2, [sp, #8]
 802280c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8022810:	6860      	ldr	r0, [r4, #4]
 8022812:	9203      	str	r2, [sp, #12]
 8022814:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8022818:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 802281c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8022820:	fb00 2505 	mla	r5, r0, r5, r2
 8022824:	6822      	ldr	r2, [r4, #0]
 8022826:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802282a:	4415      	add	r5, r2
 802282c:	f8dc 2000 	ldr.w	r2, [ip]
 8022830:	9201      	str	r2, [sp, #4]
 8022832:	2900      	cmp	r1, #0
 8022834:	dc03      	bgt.n	802283e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8022836:	9a02      	ldr	r2, [sp, #8]
 8022838:	2a00      	cmp	r2, #0
 802283a:	f340 8122 	ble.w	8022a82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802283e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022840:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8022844:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022848:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802284a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802284e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022852:	2b00      	cmp	r3, #0
 8022854:	dd0d      	ble.n	8022872 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022856:	1422      	asrs	r2, r4, #16
 8022858:	d405      	bmi.n	8022866 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802285a:	4542      	cmp	r2, r8
 802285c:	da03      	bge.n	8022866 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802285e:	1402      	asrs	r2, r0, #16
 8022860:	d401      	bmi.n	8022866 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022862:	42ba      	cmp	r2, r7
 8022864:	db06      	blt.n	8022874 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022866:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022868:	4474      	add	r4, lr
 802286a:	3b01      	subs	r3, #1
 802286c:	3503      	adds	r5, #3
 802286e:	4410      	add	r0, r2
 8022870:	e7ef      	b.n	8022852 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8022872:	d072      	beq.n	802295a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8022874:	1e5a      	subs	r2, r3, #1
 8022876:	fb0e 4602 	mla	r6, lr, r2, r4
 802287a:	1436      	asrs	r6, r6, #16
 802287c:	d462      	bmi.n	8022944 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802287e:	4546      	cmp	r6, r8
 8022880:	da60      	bge.n	8022944 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8022882:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8022884:	fb06 0202 	mla	r2, r6, r2, r0
 8022888:	1412      	asrs	r2, r2, #16
 802288a:	d45b      	bmi.n	8022944 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 802288c:	42ba      	cmp	r2, r7
 802288e:	da59      	bge.n	8022944 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8022890:	1cef      	adds	r7, r5, #3
 8022892:	4699      	mov	r9, r3
 8022894:	f1b9 0f00 	cmp.w	r9, #0
 8022898:	dd5a      	ble.n	8022950 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802289a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 802289e:	1426      	asrs	r6, r4, #16
 80228a0:	1402      	asrs	r2, r0, #16
 80228a2:	fb08 6202 	mla	r2, r8, r2, r6
 80228a6:	9e01      	ldr	r6, [sp, #4]
 80228a8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80228ac:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80228b0:	d041      	beq.n	8022936 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80228b2:	9a03      	ldr	r2, [sp, #12]
 80228b4:	fa5f fb86 	uxtb.w	fp, r6
 80228b8:	fb02 f808 	mul.w	r8, r2, r8
 80228bc:	f108 0201 	add.w	r2, r8, #1
 80228c0:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80228c4:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80228c8:	1212      	asrs	r2, r2, #8
 80228ca:	fa1f fa82 	uxth.w	sl, r2
 80228ce:	43d2      	mvns	r2, r2
 80228d0:	fb1b fb0a 	smulbb	fp, fp, sl
 80228d4:	b2d2      	uxtb	r2, r2
 80228d6:	fb08 b802 	mla	r8, r8, r2, fp
 80228da:	fa1f f888 	uxth.w	r8, r8
 80228de:	f108 0b01 	add.w	fp, r8, #1
 80228e2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80228e6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80228ea:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80228ee:	fb1b fb0a 	smulbb	fp, fp, sl
 80228f2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80228f6:	fb16 fa0a 	smulbb	sl, r6, sl
 80228fa:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80228fe:	f807 8c03 	strb.w	r8, [r7, #-3]
 8022902:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8022906:	fb06 aa02 	mla	sl, r6, r2, sl
 802290a:	fb08 b802 	mla	r8, r8, r2, fp
 802290e:	fa1f fa8a 	uxth.w	sl, sl
 8022912:	fa1f f888 	uxth.w	r8, r8
 8022916:	f10a 0601 	add.w	r6, sl, #1
 802291a:	f108 0b01 	add.w	fp, r8, #1
 802291e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8022922:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022926:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802292a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802292e:	f807 ac01 	strb.w	sl, [r7, #-1]
 8022932:	f807 8c02 	strb.w	r8, [r7, #-2]
 8022936:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022938:	4474      	add	r4, lr
 802293a:	3703      	adds	r7, #3
 802293c:	f109 39ff 	add.w	r9, r9, #4294967295
 8022940:	4410      	add	r0, r2
 8022942:	e7a7      	b.n	8022894 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022944:	f04f 0800 	mov.w	r8, #0
 8022948:	eba3 0208 	sub.w	r2, r3, r8
 802294c:	2a00      	cmp	r2, #0
 802294e:	dc3b      	bgt.n	80229c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8022950:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022954:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022958:	441d      	add	r5, r3
 802295a:	2900      	cmp	r1, #0
 802295c:	f340 8091 	ble.w	8022a82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8022960:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022966:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802296a:	3901      	subs	r1, #1
 802296c:	eeb0 6a62 	vmov.f32	s12, s5
 8022970:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022974:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022978:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802297c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8022980:	eeb0 6a43 	vmov.f32	s12, s6
 8022984:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022988:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802298c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022990:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022994:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022998:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802299c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80229a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80229a4:	ee12 2a90 	vmov	r2, s5
 80229a8:	eef0 2a47 	vmov.f32	s5, s14
 80229ac:	fb92 fef3 	sdiv	lr, r2, r3
 80229b0:	ee13 2a10 	vmov	r2, s6
 80229b4:	eeb0 3a67 	vmov.f32	s6, s15
 80229b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80229bc:	9a02      	ldr	r2, [sp, #8]
 80229be:	9312      	str	r3, [sp, #72]	; 0x48
 80229c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80229c2:	bf08      	it	eq
 80229c4:	4613      	moveq	r3, r2
 80229c6:	e734      	b.n	8022832 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80229c8:	1427      	asrs	r7, r4, #16
 80229ca:	d454      	bmi.n	8022a76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80229cc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80229d0:	42be      	cmp	r6, r7
 80229d2:	dd50      	ble.n	8022a76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80229d4:	ea5f 4920 	movs.w	r9, r0, asr #16
 80229d8:	d44d      	bmi.n	8022a76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80229da:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80229de:	454a      	cmp	r2, r9
 80229e0:	dd49      	ble.n	8022a76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80229e2:	b236      	sxth	r6, r6
 80229e4:	9a01      	ldr	r2, [sp, #4]
 80229e6:	fb09 7606 	mla	r6, r9, r6, r7
 80229ea:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80229ee:	0e3a      	lsrs	r2, r7, #24
 80229f0:	d041      	beq.n	8022a76 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80229f2:	9e03      	ldr	r6, [sp, #12]
 80229f4:	fa5f fb87 	uxtb.w	fp, r7
 80229f8:	4372      	muls	r2, r6
 80229fa:	1c56      	adds	r6, r2, #1
 80229fc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8022a00:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8022a04:	1212      	asrs	r2, r2, #8
 8022a06:	f815 9006 	ldrb.w	r9, [r5, r6]
 8022a0a:	fa1f fa82 	uxth.w	sl, r2
 8022a0e:	43d2      	mvns	r2, r2
 8022a10:	fb1b fb0a 	smulbb	fp, fp, sl
 8022a14:	b2d2      	uxtb	r2, r2
 8022a16:	fb09 b902 	mla	r9, r9, r2, fp
 8022a1a:	fa1f f989 	uxth.w	r9, r9
 8022a1e:	f109 0b01 	add.w	fp, r9, #1
 8022a22:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022a26:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8022a2a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8022a2e:	fb1b fb0a 	smulbb	fp, fp, sl
 8022a32:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022a36:	fb17 fa0a 	smulbb	sl, r7, sl
 8022a3a:	f805 9006 	strb.w	r9, [r5, r6]
 8022a3e:	442e      	add	r6, r5
 8022a40:	78b7      	ldrb	r7, [r6, #2]
 8022a42:	f896 9001 	ldrb.w	r9, [r6, #1]
 8022a46:	fb07 aa02 	mla	sl, r7, r2, sl
 8022a4a:	fb09 b902 	mla	r9, r9, r2, fp
 8022a4e:	fa1f fa8a 	uxth.w	sl, sl
 8022a52:	fa1f f989 	uxth.w	r9, r9
 8022a56:	f10a 0701 	add.w	r7, sl, #1
 8022a5a:	f109 0b01 	add.w	fp, r9, #1
 8022a5e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022a62:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022a66:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022a6a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022a6e:	f886 a002 	strb.w	sl, [r6, #2]
 8022a72:	f886 9001 	strb.w	r9, [r6, #1]
 8022a76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022a78:	4474      	add	r4, lr
 8022a7a:	f108 0801 	add.w	r8, r8, #1
 8022a7e:	4410      	add	r0, r2
 8022a80:	e762      	b.n	8022948 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8022a82:	b005      	add	sp, #20
 8022a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022a88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a8c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022a92:	9201      	str	r2, [sp, #4]
 8022a94:	6860      	ldr	r0, [r4, #4]
 8022a96:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8022a9a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8022a9e:	fb00 2505 	mla	r5, r0, r5, r2
 8022aa2:	6822      	ldr	r2, [r4, #0]
 8022aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022aa8:	4415      	add	r5, r2
 8022aaa:	f8dc 2000 	ldr.w	r2, [ip]
 8022aae:	9200      	str	r2, [sp, #0]
 8022ab0:	2900      	cmp	r1, #0
 8022ab2:	dc03      	bgt.n	8022abc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022ab4:	9a01      	ldr	r2, [sp, #4]
 8022ab6:	2a00      	cmp	r2, #0
 8022ab8:	f340 812b 	ble.w	8022d12 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022abc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022abe:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8022ac2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022ac8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8022acc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022ad0:	2b00      	cmp	r3, #0
 8022ad2:	dd0e      	ble.n	8022af2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022ad4:	1422      	asrs	r2, r4, #16
 8022ad6:	d405      	bmi.n	8022ae4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8022ad8:	4572      	cmp	r2, lr
 8022ada:	da03      	bge.n	8022ae4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8022adc:	1402      	asrs	r2, r0, #16
 8022ade:	d401      	bmi.n	8022ae4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8022ae0:	42ba      	cmp	r2, r7
 8022ae2:	db07      	blt.n	8022af4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022ae4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022ae6:	3b01      	subs	r3, #1
 8022ae8:	3503      	adds	r5, #3
 8022aea:	4414      	add	r4, r2
 8022aec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022aee:	4410      	add	r0, r2
 8022af0:	e7ee      	b.n	8022ad0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022af2:	d06f      	beq.n	8022bd4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8022af4:	1e5a      	subs	r2, r3, #1
 8022af6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8022af8:	fb06 4602 	mla	r6, r6, r2, r4
 8022afc:	1436      	asrs	r6, r6, #16
 8022afe:	d45e      	bmi.n	8022bbe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8022b00:	4576      	cmp	r6, lr
 8022b02:	da5c      	bge.n	8022bbe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8022b04:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8022b06:	fb06 0202 	mla	r2, r6, r2, r0
 8022b0a:	1412      	asrs	r2, r2, #16
 8022b0c:	d457      	bmi.n	8022bbe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8022b0e:	42ba      	cmp	r2, r7
 8022b10:	da55      	bge.n	8022bbe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8022b12:	1cee      	adds	r6, r5, #3
 8022b14:	469a      	mov	sl, r3
 8022b16:	f1ba 0f00 	cmp.w	sl, #0
 8022b1a:	dd56      	ble.n	8022bca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8022b1c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8022b20:	1427      	asrs	r7, r4, #16
 8022b22:	1402      	asrs	r2, r0, #16
 8022b24:	fb0e 7202 	mla	r2, lr, r2, r7
 8022b28:	9f00      	ldr	r7, [sp, #0]
 8022b2a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8022b2e:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8022b32:	d03c      	beq.n	8022bae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8022b34:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022b38:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8022b3c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8022b40:	fa5f f28e 	uxtb.w	r2, lr
 8022b44:	b2ff      	uxtb	r7, r7
 8022b46:	f000 80dd 	beq.w	8022d04 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022b4a:	fa1f f882 	uxth.w	r8, r2
 8022b4e:	43d2      	mvns	r2, r2
 8022b50:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8022b54:	fb17 f708 	smulbb	r7, r7, r8
 8022b58:	b2d2      	uxtb	r2, r2
 8022b5a:	fb19 f908 	smulbb	r9, r9, r8
 8022b5e:	fb0e 7702 	mla	r7, lr, r2, r7
 8022b62:	fb1b f808 	smulbb	r8, fp, r8
 8022b66:	b2bf      	uxth	r7, r7
 8022b68:	f107 0e01 	add.w	lr, r7, #1
 8022b6c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8022b70:	123f      	asrs	r7, r7, #8
 8022b72:	f806 7c03 	strb.w	r7, [r6, #-3]
 8022b76:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8022b7a:	fb07 9902 	mla	r9, r7, r2, r9
 8022b7e:	fa1f f989 	uxth.w	r9, r9
 8022b82:	f109 0701 	add.w	r7, r9, #1
 8022b86:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022b8a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8022b8e:	fb07 8802 	mla	r8, r7, r2, r8
 8022b92:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b96:	fa1f f888 	uxth.w	r8, r8
 8022b9a:	f806 9c02 	strb.w	r9, [r6, #-2]
 8022b9e:	f108 0201 	add.w	r2, r8, #1
 8022ba2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022ba6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022baa:	f806 8c01 	strb.w	r8, [r6, #-1]
 8022bae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022bb0:	3603      	adds	r6, #3
 8022bb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022bb6:	4414      	add	r4, r2
 8022bb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022bba:	4410      	add	r0, r2
 8022bbc:	e7ab      	b.n	8022b16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022bbe:	f04f 0e00 	mov.w	lr, #0
 8022bc2:	eba3 020e 	sub.w	r2, r3, lr
 8022bc6:	2a00      	cmp	r2, #0
 8022bc8:	dc3d      	bgt.n	8022c46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8022bca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022bce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022bd2:	441d      	add	r5, r3
 8022bd4:	2900      	cmp	r1, #0
 8022bd6:	f340 809c 	ble.w	8022d12 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022bda:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022be0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022be4:	3901      	subs	r1, #1
 8022be6:	eeb0 6a62 	vmov.f32	s12, s5
 8022bea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022bee:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022bf2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022bf6:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8022bfa:	eeb0 6a43 	vmov.f32	s12, s6
 8022bfe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022c02:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8022c06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022c0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022c0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022c12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022c16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022c1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022c1e:	ee12 2a90 	vmov	r2, s5
 8022c22:	eef0 2a47 	vmov.f32	s5, s14
 8022c26:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c2a:	ee13 2a10 	vmov	r2, s6
 8022c2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c32:	eeb0 3a67 	vmov.f32	s6, s15
 8022c36:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c3a:	9a01      	ldr	r2, [sp, #4]
 8022c3c:	9310      	str	r3, [sp, #64]	; 0x40
 8022c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c40:	bf08      	it	eq
 8022c42:	4613      	moveq	r3, r2
 8022c44:	e734      	b.n	8022ab0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8022c46:	1427      	asrs	r7, r4, #16
 8022c48:	d44d      	bmi.n	8022ce6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022c4a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8022c4e:	42be      	cmp	r6, r7
 8022c50:	dd49      	ble.n	8022ce6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022c52:	ea5f 4820 	movs.w	r8, r0, asr #16
 8022c56:	d446      	bmi.n	8022ce6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022c58:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8022c5c:	4542      	cmp	r2, r8
 8022c5e:	dd42      	ble.n	8022ce6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022c60:	b236      	sxth	r6, r6
 8022c62:	9a00      	ldr	r2, [sp, #0]
 8022c64:	fb08 7606 	mla	r6, r8, r6, r7
 8022c68:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8022c6c:	0e3a      	lsrs	r2, r7, #24
 8022c6e:	d03a      	beq.n	8022ce6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022c70:	2aff      	cmp	r2, #255	; 0xff
 8022c72:	b2d6      	uxtb	r6, r2
 8022c74:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8022c78:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8022c7c:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8022c80:	b2ff      	uxtb	r7, r7
 8022c82:	d037      	beq.n	8022cf4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8022c84:	fa1f f986 	uxth.w	r9, r6
 8022c88:	4472      	add	r2, lr
 8022c8a:	43f6      	mvns	r6, r6
 8022c8c:	f815 8002 	ldrb.w	r8, [r5, r2]
 8022c90:	fb17 f709 	smulbb	r7, r7, r9
 8022c94:	fb1a fa09 	smulbb	sl, sl, r9
 8022c98:	b2f6      	uxtb	r6, r6
 8022c9a:	fb1b f909 	smulbb	r9, fp, r9
 8022c9e:	fb08 7706 	mla	r7, r8, r6, r7
 8022ca2:	b2bf      	uxth	r7, r7
 8022ca4:	f107 0801 	add.w	r8, r7, #1
 8022ca8:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8022cac:	123f      	asrs	r7, r7, #8
 8022cae:	54af      	strb	r7, [r5, r2]
 8022cb0:	442a      	add	r2, r5
 8022cb2:	7857      	ldrb	r7, [r2, #1]
 8022cb4:	fb07 aa06 	mla	sl, r7, r6, sl
 8022cb8:	fa1f fa8a 	uxth.w	sl, sl
 8022cbc:	f10a 0701 	add.w	r7, sl, #1
 8022cc0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022cc4:	7897      	ldrb	r7, [r2, #2]
 8022cc6:	fb07 9906 	mla	r9, r7, r6, r9
 8022cca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022cce:	fa1f f989 	uxth.w	r9, r9
 8022cd2:	f882 a001 	strb.w	sl, [r2, #1]
 8022cd6:	f109 0601 	add.w	r6, r9, #1
 8022cda:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8022cde:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022ce2:	f882 9002 	strb.w	r9, [r2, #2]
 8022ce6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022ce8:	f10e 0e01 	add.w	lr, lr, #1
 8022cec:	4414      	add	r4, r2
 8022cee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022cf0:	4410      	add	r0, r2
 8022cf2:	e766      	b.n	8022bc2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022cf4:	4472      	add	r2, lr
 8022cf6:	54af      	strb	r7, [r5, r2]
 8022cf8:	442a      	add	r2, r5
 8022cfa:	f882 a001 	strb.w	sl, [r2, #1]
 8022cfe:	f882 b002 	strb.w	fp, [r2, #2]
 8022d02:	e7f0      	b.n	8022ce6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8022d04:	f806 7c03 	strb.w	r7, [r6, #-3]
 8022d08:	f806 9c02 	strb.w	r9, [r6, #-2]
 8022d0c:	f806 bc01 	strb.w	fp, [r6, #-1]
 8022d10:	e74d      	b.n	8022bae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8022d12:	b003      	add	sp, #12
 8022d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022d18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d1c:	b087      	sub	sp, #28
 8022d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022d22:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022d24:	9204      	str	r2, [sp, #16]
 8022d26:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8022d2a:	6860      	ldr	r0, [r4, #4]
 8022d2c:	9205      	str	r2, [sp, #20]
 8022d2e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8022d32:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8022d36:	9101      	str	r1, [sp, #4]
 8022d38:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8022d3c:	fb00 2505 	mla	r5, r0, r5, r2
 8022d40:	6822      	ldr	r2, [r4, #0]
 8022d42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022d46:	4415      	add	r5, r2
 8022d48:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8022d4c:	3201      	adds	r2, #1
 8022d4e:	f022 0201 	bic.w	r2, r2, #1
 8022d52:	9202      	str	r2, [sp, #8]
 8022d54:	f8dc 2000 	ldr.w	r2, [ip]
 8022d58:	9203      	str	r2, [sp, #12]
 8022d5a:	9a01      	ldr	r2, [sp, #4]
 8022d5c:	2a00      	cmp	r2, #0
 8022d5e:	dc03      	bgt.n	8022d68 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8022d60:	9a04      	ldr	r2, [sp, #16]
 8022d62:	2a00      	cmp	r2, #0
 8022d64:	f340 8135 	ble.w	8022fd2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8022d68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022d6a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8022d6e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022d72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022d74:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8022d78:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022d7c:	2b00      	cmp	r3, #0
 8022d7e:	dd0d      	ble.n	8022d9c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022d80:	1422      	asrs	r2, r4, #16
 8022d82:	d405      	bmi.n	8022d90 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022d84:	4542      	cmp	r2, r8
 8022d86:	da03      	bge.n	8022d90 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022d88:	1402      	asrs	r2, r0, #16
 8022d8a:	d401      	bmi.n	8022d90 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022d8c:	42ba      	cmp	r2, r7
 8022d8e:	db06      	blt.n	8022d9e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022d90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022d92:	4474      	add	r4, lr
 8022d94:	3b01      	subs	r3, #1
 8022d96:	3503      	adds	r5, #3
 8022d98:	4410      	add	r0, r2
 8022d9a:	e7ef      	b.n	8022d7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8022d9c:	d077      	beq.n	8022e8e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8022d9e:	1e5a      	subs	r2, r3, #1
 8022da0:	fb0e 4602 	mla	r6, lr, r2, r4
 8022da4:	1436      	asrs	r6, r6, #16
 8022da6:	d469      	bmi.n	8022e7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022da8:	4546      	cmp	r6, r8
 8022daa:	da67      	bge.n	8022e7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022dac:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8022dae:	fb06 0202 	mla	r2, r6, r2, r0
 8022db2:	1412      	asrs	r2, r2, #16
 8022db4:	d462      	bmi.n	8022e7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022db6:	42ba      	cmp	r2, r7
 8022db8:	da60      	bge.n	8022e7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8022dba:	1cee      	adds	r6, r5, #3
 8022dbc:	4699      	mov	r9, r3
 8022dbe:	f1b9 0f00 	cmp.w	r9, #0
 8022dc2:	dd5f      	ble.n	8022e84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8022dc4:	1422      	asrs	r2, r4, #16
 8022dc6:	9902      	ldr	r1, [sp, #8]
 8022dc8:	1407      	asrs	r7, r0, #16
 8022dca:	fb01 2707 	mla	r7, r1, r7, r2
 8022dce:	9903      	ldr	r1, [sp, #12]
 8022dd0:	087a      	lsrs	r2, r7, #1
 8022dd2:	5c8a      	ldrb	r2, [r1, r2]
 8022dd4:	07f9      	lsls	r1, r7, #31
 8022dd6:	bf54      	ite	pl
 8022dd8:	f002 020f 	andpl.w	r2, r2, #15
 8022ddc:	1112      	asrmi	r2, r2, #4
 8022dde:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022de2:	b2d2      	uxtb	r2, r2
 8022de4:	2a00      	cmp	r2, #0
 8022de6:	d042      	beq.n	8022e6e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8022de8:	497b      	ldr	r1, [pc, #492]	; (8022fd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8022dea:	680f      	ldr	r7, [r1, #0]
 8022dec:	9905      	ldr	r1, [sp, #20]
 8022dee:	fa5f fb87 	uxtb.w	fp, r7
 8022df2:	434a      	muls	r2, r1
 8022df4:	f102 0801 	add.w	r8, r2, #1
 8022df8:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8022dfc:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8022e00:	1212      	asrs	r2, r2, #8
 8022e02:	fa1f fa82 	uxth.w	sl, r2
 8022e06:	43d2      	mvns	r2, r2
 8022e08:	fb1b fb0a 	smulbb	fp, fp, sl
 8022e0c:	b2d2      	uxtb	r2, r2
 8022e0e:	fb08 b802 	mla	r8, r8, r2, fp
 8022e12:	fa1f f888 	uxth.w	r8, r8
 8022e16:	f108 0b01 	add.w	fp, r8, #1
 8022e1a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022e1e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8022e22:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8022e26:	fb1b fb0a 	smulbb	fp, fp, sl
 8022e2a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022e2e:	fb17 fa0a 	smulbb	sl, r7, sl
 8022e32:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8022e36:	f806 8c03 	strb.w	r8, [r6, #-3]
 8022e3a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8022e3e:	fb07 aa02 	mla	sl, r7, r2, sl
 8022e42:	fb08 b802 	mla	r8, r8, r2, fp
 8022e46:	fa1f fa8a 	uxth.w	sl, sl
 8022e4a:	fa1f f888 	uxth.w	r8, r8
 8022e4e:	f10a 0701 	add.w	r7, sl, #1
 8022e52:	f108 0b01 	add.w	fp, r8, #1
 8022e56:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022e5a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8022e5e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022e62:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022e66:	f806 ac01 	strb.w	sl, [r6, #-1]
 8022e6a:	f806 8c02 	strb.w	r8, [r6, #-2]
 8022e6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022e70:	4474      	add	r4, lr
 8022e72:	3603      	adds	r6, #3
 8022e74:	f109 39ff 	add.w	r9, r9, #4294967295
 8022e78:	4410      	add	r0, r2
 8022e7a:	e7a0      	b.n	8022dbe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022e7c:	2700      	movs	r7, #0
 8022e7e:	1bda      	subs	r2, r3, r7
 8022e80:	2a00      	cmp	r2, #0
 8022e82:	dc3e      	bgt.n	8022f02 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022e84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022e88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022e8c:	441d      	add	r5, r3
 8022e8e:	9b01      	ldr	r3, [sp, #4]
 8022e90:	2b00      	cmp	r3, #0
 8022e92:	f340 809e 	ble.w	8022fd2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8022e96:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022e9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022e9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022ea0:	eeb0 6a62 	vmov.f32	s12, s5
 8022ea4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022ea8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022eac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022eb0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022eb4:	eeb0 6a43 	vmov.f32	s12, s6
 8022eb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022ebc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022ec0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022ec4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022ec8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022ecc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022ed0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022ed4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022ed8:	ee12 2a90 	vmov	r2, s5
 8022edc:	eef0 2a47 	vmov.f32	s5, s14
 8022ee0:	fb92 fef3 	sdiv	lr, r2, r3
 8022ee4:	ee13 2a10 	vmov	r2, s6
 8022ee8:	eeb0 3a67 	vmov.f32	s6, s15
 8022eec:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ef0:	9314      	str	r3, [sp, #80]	; 0x50
 8022ef2:	9b01      	ldr	r3, [sp, #4]
 8022ef4:	9a04      	ldr	r2, [sp, #16]
 8022ef6:	3b01      	subs	r3, #1
 8022ef8:	9301      	str	r3, [sp, #4]
 8022efa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022efc:	bf08      	it	eq
 8022efe:	4613      	moveq	r3, r2
 8022f00:	e72b      	b.n	8022d5a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8022f02:	1426      	asrs	r6, r4, #16
 8022f04:	d460      	bmi.n	8022fc8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022f06:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8022f0a:	42b2      	cmp	r2, r6
 8022f0c:	dd5c      	ble.n	8022fc8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022f0e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8022f12:	d459      	bmi.n	8022fc8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022f14:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8022f18:	4542      	cmp	r2, r8
 8022f1a:	dd55      	ble.n	8022fc8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022f1c:	9a02      	ldr	r2, [sp, #8]
 8022f1e:	9903      	ldr	r1, [sp, #12]
 8022f20:	fb08 6602 	mla	r6, r8, r2, r6
 8022f24:	0872      	lsrs	r2, r6, #1
 8022f26:	07f6      	lsls	r6, r6, #31
 8022f28:	5c8a      	ldrb	r2, [r1, r2]
 8022f2a:	bf54      	ite	pl
 8022f2c:	f002 020f 	andpl.w	r2, r2, #15
 8022f30:	1112      	asrmi	r2, r2, #4
 8022f32:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022f36:	b2d2      	uxtb	r2, r2
 8022f38:	2a00      	cmp	r2, #0
 8022f3a:	d045      	beq.n	8022fc8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022f3c:	4926      	ldr	r1, [pc, #152]	; (8022fd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8022f3e:	f8d1 8000 	ldr.w	r8, [r1]
 8022f42:	9905      	ldr	r1, [sp, #20]
 8022f44:	fa5f fb88 	uxtb.w	fp, r8
 8022f48:	434a      	muls	r2, r1
 8022f4a:	1c56      	adds	r6, r2, #1
 8022f4c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8022f50:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8022f54:	1212      	asrs	r2, r2, #8
 8022f56:	f815 9006 	ldrb.w	r9, [r5, r6]
 8022f5a:	fa1f fa82 	uxth.w	sl, r2
 8022f5e:	43d2      	mvns	r2, r2
 8022f60:	fb1b fb0a 	smulbb	fp, fp, sl
 8022f64:	b2d2      	uxtb	r2, r2
 8022f66:	fb09 b902 	mla	r9, r9, r2, fp
 8022f6a:	fa1f f989 	uxth.w	r9, r9
 8022f6e:	f109 0b01 	add.w	fp, r9, #1
 8022f72:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022f76:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8022f7a:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8022f7e:	fb1b fb0a 	smulbb	fp, fp, sl
 8022f82:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022f86:	fb18 fa0a 	smulbb	sl, r8, sl
 8022f8a:	f805 9006 	strb.w	r9, [r5, r6]
 8022f8e:	442e      	add	r6, r5
 8022f90:	f896 8002 	ldrb.w	r8, [r6, #2]
 8022f94:	f896 9001 	ldrb.w	r9, [r6, #1]
 8022f98:	fb08 aa02 	mla	sl, r8, r2, sl
 8022f9c:	fb09 b902 	mla	r9, r9, r2, fp
 8022fa0:	fa1f fa8a 	uxth.w	sl, sl
 8022fa4:	fa1f f989 	uxth.w	r9, r9
 8022fa8:	f10a 0801 	add.w	r8, sl, #1
 8022fac:	f109 0b01 	add.w	fp, r9, #1
 8022fb0:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8022fb4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022fb8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022fbc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022fc0:	f886 a002 	strb.w	sl, [r6, #2]
 8022fc4:	f886 9001 	strb.w	r9, [r6, #1]
 8022fc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022fca:	4474      	add	r4, lr
 8022fcc:	3701      	adds	r7, #1
 8022fce:	4410      	add	r0, r2
 8022fd0:	e755      	b.n	8022e7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8022fd2:	b007      	add	sp, #28
 8022fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fd8:	2400c8e4 	.word	0x2400c8e4

08022fdc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fe0:	b085      	sub	sp, #20
 8022fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022fe6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022fe8:	9203      	str	r2, [sp, #12]
 8022fea:	6860      	ldr	r0, [r4, #4]
 8022fec:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8022ff0:	9100      	str	r1, [sp, #0]
 8022ff2:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8022ff6:	fb00 2606 	mla	r6, r0, r6, r2
 8022ffa:	6822      	ldr	r2, [r4, #0]
 8022ffc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023000:	4416      	add	r6, r2
 8023002:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8023006:	3201      	adds	r2, #1
 8023008:	f022 0201 	bic.w	r2, r2, #1
 802300c:	9201      	str	r2, [sp, #4]
 802300e:	f8dc 2000 	ldr.w	r2, [ip]
 8023012:	9202      	str	r2, [sp, #8]
 8023014:	9a00      	ldr	r2, [sp, #0]
 8023016:	2a00      	cmp	r2, #0
 8023018:	dc03      	bgt.n	8023022 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802301a:	9a03      	ldr	r2, [sp, #12]
 802301c:	2a00      	cmp	r2, #0
 802301e:	f340 8140 	ble.w	80232a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8023022:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023024:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8023028:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 802302c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802302e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8023032:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8023036:	2b00      	cmp	r3, #0
 8023038:	dd0e      	ble.n	8023058 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802303a:	142a      	asrs	r2, r5, #16
 802303c:	d405      	bmi.n	802304a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802303e:	4572      	cmp	r2, lr
 8023040:	da03      	bge.n	802304a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023042:	1422      	asrs	r2, r4, #16
 8023044:	d401      	bmi.n	802304a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023046:	42ba      	cmp	r2, r7
 8023048:	db07      	blt.n	802305a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802304a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802304c:	3b01      	subs	r3, #1
 802304e:	3603      	adds	r6, #3
 8023050:	4415      	add	r5, r2
 8023052:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023054:	4414      	add	r4, r2
 8023056:	e7ee      	b.n	8023036 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8023058:	d072      	beq.n	8023140 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802305a:	1e5a      	subs	r2, r3, #1
 802305c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802305e:	fb00 5002 	mla	r0, r0, r2, r5
 8023062:	1400      	asrs	r0, r0, #16
 8023064:	d463      	bmi.n	802312e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8023066:	4570      	cmp	r0, lr
 8023068:	da61      	bge.n	802312e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802306a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802306c:	fb00 4202 	mla	r2, r0, r2, r4
 8023070:	1412      	asrs	r2, r2, #16
 8023072:	d45c      	bmi.n	802312e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8023074:	42ba      	cmp	r2, r7
 8023076:	da5a      	bge.n	802312e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8023078:	1cf0      	adds	r0, r6, #3
 802307a:	469a      	mov	sl, r3
 802307c:	f1ba 0f00 	cmp.w	sl, #0
 8023080:	dd59      	ble.n	8023136 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8023082:	142a      	asrs	r2, r5, #16
 8023084:	9901      	ldr	r1, [sp, #4]
 8023086:	1427      	asrs	r7, r4, #16
 8023088:	fb01 2707 	mla	r7, r1, r7, r2
 802308c:	9902      	ldr	r1, [sp, #8]
 802308e:	087a      	lsrs	r2, r7, #1
 8023090:	5c8a      	ldrb	r2, [r1, r2]
 8023092:	07f9      	lsls	r1, r7, #31
 8023094:	bf54      	ite	pl
 8023096:	f002 020f 	andpl.w	r2, r2, #15
 802309a:	1112      	asrmi	r2, r2, #4
 802309c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80230a0:	b2d2      	uxtb	r2, r2
 80230a2:	2a00      	cmp	r2, #0
 80230a4:	d03b      	beq.n	802311e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80230a6:	4980      	ldr	r1, [pc, #512]	; (80232a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80230a8:	2aff      	cmp	r2, #255	; 0xff
 80230aa:	680f      	ldr	r7, [r1, #0]
 80230ac:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80230b0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80230b4:	b2ff      	uxtb	r7, r7
 80230b6:	f000 80ed 	beq.w	8023294 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80230ba:	fa1f f882 	uxth.w	r8, r2
 80230be:	43d2      	mvns	r2, r2
 80230c0:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80230c4:	fb17 f708 	smulbb	r7, r7, r8
 80230c8:	b2d2      	uxtb	r2, r2
 80230ca:	fb19 f908 	smulbb	r9, r9, r8
 80230ce:	fb0e 7702 	mla	r7, lr, r2, r7
 80230d2:	fb1b f808 	smulbb	r8, fp, r8
 80230d6:	b2bf      	uxth	r7, r7
 80230d8:	f107 0e01 	add.w	lr, r7, #1
 80230dc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80230e0:	123f      	asrs	r7, r7, #8
 80230e2:	f800 7c03 	strb.w	r7, [r0, #-3]
 80230e6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80230ea:	fb07 9902 	mla	r9, r7, r2, r9
 80230ee:	fa1f f989 	uxth.w	r9, r9
 80230f2:	f109 0701 	add.w	r7, r9, #1
 80230f6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80230fa:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80230fe:	fb07 8802 	mla	r8, r7, r2, r8
 8023102:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023106:	fa1f f888 	uxth.w	r8, r8
 802310a:	f800 9c02 	strb.w	r9, [r0, #-2]
 802310e:	f108 0201 	add.w	r2, r8, #1
 8023112:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8023116:	ea4f 2828 	mov.w	r8, r8, asr #8
 802311a:	f800 8c01 	strb.w	r8, [r0, #-1]
 802311e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023120:	3003      	adds	r0, #3
 8023122:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023126:	4415      	add	r5, r2
 8023128:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802312a:	4414      	add	r4, r2
 802312c:	e7a6      	b.n	802307c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802312e:	2700      	movs	r7, #0
 8023130:	1bda      	subs	r2, r3, r7
 8023132:	2a00      	cmp	r2, #0
 8023134:	dc40      	bgt.n	80231b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8023136:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802313a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802313e:	441e      	add	r6, r3
 8023140:	9b00      	ldr	r3, [sp, #0]
 8023142:	2b00      	cmp	r3, #0
 8023144:	f340 80ad 	ble.w	80232a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8023148:	ee30 0a04 	vadd.f32	s0, s0, s8
 802314c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802314e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023152:	eeb0 6a62 	vmov.f32	s12, s5
 8023156:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802315a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802315e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023162:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8023166:	eeb0 6a43 	vmov.f32	s12, s6
 802316a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802316e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8023172:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023176:	ee61 7a27 	vmul.f32	s15, s2, s15
 802317a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802317e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023182:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023186:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802318a:	ee12 2a90 	vmov	r2, s5
 802318e:	eef0 2a47 	vmov.f32	s5, s14
 8023192:	fb92 f3f3 	sdiv	r3, r2, r3
 8023196:	ee13 2a10 	vmov	r2, s6
 802319a:	9311      	str	r3, [sp, #68]	; 0x44
 802319c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802319e:	eeb0 3a67 	vmov.f32	s6, s15
 80231a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80231a6:	9312      	str	r3, [sp, #72]	; 0x48
 80231a8:	9b00      	ldr	r3, [sp, #0]
 80231aa:	9a03      	ldr	r2, [sp, #12]
 80231ac:	3b01      	subs	r3, #1
 80231ae:	9300      	str	r3, [sp, #0]
 80231b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80231b2:	bf08      	it	eq
 80231b4:	4613      	moveq	r3, r2
 80231b6:	e72d      	b.n	8023014 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80231b8:	1428      	asrs	r0, r5, #16
 80231ba:	d45c      	bmi.n	8023276 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80231bc:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80231c0:	4282      	cmp	r2, r0
 80231c2:	dd58      	ble.n	8023276 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80231c4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80231c8:	d455      	bmi.n	8023276 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80231ca:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80231ce:	4572      	cmp	r2, lr
 80231d0:	dd51      	ble.n	8023276 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80231d2:	9a01      	ldr	r2, [sp, #4]
 80231d4:	9902      	ldr	r1, [sp, #8]
 80231d6:	fb0e 0002 	mla	r0, lr, r2, r0
 80231da:	0842      	lsrs	r2, r0, #1
 80231dc:	07c0      	lsls	r0, r0, #31
 80231de:	5c8a      	ldrb	r2, [r1, r2]
 80231e0:	bf54      	ite	pl
 80231e2:	f002 020f 	andpl.w	r2, r2, #15
 80231e6:	1112      	asrmi	r2, r2, #4
 80231e8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80231ec:	b2d2      	uxtb	r2, r2
 80231ee:	2a00      	cmp	r2, #0
 80231f0:	d041      	beq.n	8023276 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80231f2:	492d      	ldr	r1, [pc, #180]	; (80232a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80231f4:	2aff      	cmp	r2, #255	; 0xff
 80231f6:	6808      	ldr	r0, [r1, #0]
 80231f8:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80231fc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8023200:	fa5f fe80 	uxtb.w	lr, r0
 8023204:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8023208:	d03b      	beq.n	8023282 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802320a:	fa1f f982 	uxth.w	r9, r2
 802320e:	4438      	add	r0, r7
 8023210:	43d2      	mvns	r2, r2
 8023212:	f816 8000 	ldrb.w	r8, [r6, r0]
 8023216:	fb1e fe09 	smulbb	lr, lr, r9
 802321a:	fb1a fa09 	smulbb	sl, sl, r9
 802321e:	b2d2      	uxtb	r2, r2
 8023220:	fb1b f909 	smulbb	r9, fp, r9
 8023224:	fb08 ee02 	mla	lr, r8, r2, lr
 8023228:	fa1f fe8e 	uxth.w	lr, lr
 802322c:	f10e 0801 	add.w	r8, lr, #1
 8023230:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8023234:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8023238:	f806 e000 	strb.w	lr, [r6, r0]
 802323c:	4430      	add	r0, r6
 802323e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8023242:	fb0e aa02 	mla	sl, lr, r2, sl
 8023246:	fa1f fa8a 	uxth.w	sl, sl
 802324a:	f10a 0e01 	add.w	lr, sl, #1
 802324e:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8023252:	f890 e002 	ldrb.w	lr, [r0, #2]
 8023256:	fb0e 9902 	mla	r9, lr, r2, r9
 802325a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802325e:	fa1f f989 	uxth.w	r9, r9
 8023262:	f880 a001 	strb.w	sl, [r0, #1]
 8023266:	f109 0201 	add.w	r2, r9, #1
 802326a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802326e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8023272:	f880 9002 	strb.w	r9, [r0, #2]
 8023276:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023278:	3701      	adds	r7, #1
 802327a:	4415      	add	r5, r2
 802327c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802327e:	4414      	add	r4, r2
 8023280:	e756      	b.n	8023130 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8023282:	4438      	add	r0, r7
 8023284:	f806 e000 	strb.w	lr, [r6, r0]
 8023288:	4430      	add	r0, r6
 802328a:	f880 a001 	strb.w	sl, [r0, #1]
 802328e:	f880 b002 	strb.w	fp, [r0, #2]
 8023292:	e7f0      	b.n	8023276 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023294:	f800 7c03 	strb.w	r7, [r0, #-3]
 8023298:	f800 9c02 	strb.w	r9, [r0, #-2]
 802329c:	f800 bc01 	strb.w	fp, [r0, #-1]
 80232a0:	e73d      	b.n	802311e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80232a2:	b005      	add	sp, #20
 80232a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232a8:	2400c8e4 	.word	0x2400c8e4

080232ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80232ac:	4770      	bx	lr

080232ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80232ae:	4770      	bx	lr

080232b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80232b0:	4770      	bx	lr

080232b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80232b2:	4770      	bx	lr

080232b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80232b4:	4770      	bx	lr

080232b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80232b6:	4770      	bx	lr

080232b8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80232b8:	4770      	bx	lr

080232ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80232ba:	4770      	bx	lr

080232bc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80232bc:	4770      	bx	lr

080232be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80232be:	4770      	bx	lr

080232c0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80232c0:	4770      	bx	lr

080232c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80232c2:	4770      	bx	lr

080232c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80232c4:	4770      	bx	lr

080232c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80232c6:	4770      	bx	lr

080232c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80232c8:	4770      	bx	lr

080232ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80232ca:	4770      	bx	lr

080232cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80232cc:	4770      	bx	lr

080232ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80232ce:	4770      	bx	lr

080232d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80232d0:	4770      	bx	lr

080232d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80232d2:	4770      	bx	lr

080232d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80232d4:	2bff      	cmp	r3, #255	; 0xff
 80232d6:	b508      	push	{r3, lr}
 80232d8:	d04f      	beq.n	802337a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80232da:	2a2c      	cmp	r2, #44	; 0x2c
 80232dc:	d032      	beq.n	8023344 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 80232de:	d80f      	bhi.n	8023300 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 80232e0:	2a08      	cmp	r2, #8
 80232e2:	d046      	beq.n	8023372 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80232e4:	d805      	bhi.n	80232f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 80232e6:	2a04      	cmp	r2, #4
 80232e8:	d041      	beq.n	802336e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80232ea:	2a05      	cmp	r2, #5
 80232ec:	d03d      	beq.n	802336a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80232ee:	2000      	movs	r0, #0
 80232f0:	e027      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80232f2:	2a0a      	cmp	r2, #10
 80232f4:	d03d      	beq.n	8023372 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80232f6:	d301      	bcc.n	80232fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80232f8:	2a0b      	cmp	r2, #11
 80232fa:	d1f8      	bne.n	80232ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80232fc:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80232fe:	e020      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023300:	2a30      	cmp	r2, #48	; 0x30
 8023302:	d038      	beq.n	8023376 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8023304:	d808      	bhi.n	8023318 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8023306:	2a2e      	cmp	r2, #46	; 0x2e
 8023308:	684b      	ldr	r3, [r1, #4]
 802330a:	d029      	beq.n	8023360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 802330c:	d90b      	bls.n	8023326 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 802330e:	781b      	ldrb	r3, [r3, #0]
 8023310:	2b00      	cmp	r3, #0
 8023312:	d1ec      	bne.n	80232ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023314:	6a00      	ldr	r0, [r0, #32]
 8023316:	e014      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023318:	2a32      	cmp	r2, #50	; 0x32
 802331a:	d02c      	beq.n	8023376 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 802331c:	d301      	bcc.n	8023322 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 802331e:	2a33      	cmp	r2, #51	; 0x33
 8023320:	d1e5      	bne.n	80232ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023322:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8023324:	e00d      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023326:	781b      	ldrb	r3, [r3, #0]
 8023328:	2b01      	cmp	r3, #1
 802332a:	d009      	beq.n	8023340 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 802332c:	d3f2      	bcc.n	8023314 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 802332e:	2b02      	cmp	r3, #2
 8023330:	d1dd      	bne.n	80232ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023332:	4b39      	ldr	r3, [pc, #228]	; (8023418 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8023334:	f240 4109 	movw	r1, #1033	; 0x409
 8023338:	4a38      	ldr	r2, [pc, #224]	; (802341c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 802333a:	4839      	ldr	r0, [pc, #228]	; (8023420 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 802333c:	f008 fa94 	bl	802b868 <__assert_func>
 8023340:	6900      	ldr	r0, [r0, #16]
 8023342:	bd08      	pop	{r3, pc}
 8023344:	684b      	ldr	r3, [r1, #4]
 8023346:	781b      	ldrb	r3, [r3, #0]
 8023348:	2b01      	cmp	r3, #1
 802334a:	d007      	beq.n	802335c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 802334c:	d30b      	bcc.n	8023366 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 802334e:	2b02      	cmp	r3, #2
 8023350:	d1cd      	bne.n	80232ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023352:	4b31      	ldr	r3, [pc, #196]	; (8023418 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8023354:	f240 4115 	movw	r1, #1045	; 0x415
 8023358:	4a30      	ldr	r2, [pc, #192]	; (802341c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 802335a:	e7ee      	b.n	802333a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 802335c:	6880      	ldr	r0, [r0, #8]
 802335e:	e7f0      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023360:	781b      	ldrb	r3, [r3, #0]
 8023362:	2b00      	cmp	r3, #0
 8023364:	d1c3      	bne.n	80232ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023366:	6980      	ldr	r0, [r0, #24]
 8023368:	e7eb      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802336a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 802336c:	e7e9      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802336e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8023370:	e7e7      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023372:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8023374:	e7e5      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023376:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8023378:	e7e3      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802337a:	2a2c      	cmp	r2, #44	; 0x2c
 802337c:	d030      	beq.n	80233e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 802337e:	d80f      	bhi.n	80233a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8023380:	2a08      	cmp	r2, #8
 8023382:	d044      	beq.n	802340e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8023384:	d805      	bhi.n	8023392 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8023386:	2a04      	cmp	r2, #4
 8023388:	d03f      	beq.n	802340a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 802338a:	2a05      	cmp	r2, #5
 802338c:	d1af      	bne.n	80232ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802338e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8023390:	e7d7      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023392:	2a0a      	cmp	r2, #10
 8023394:	d03b      	beq.n	802340e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8023396:	d301      	bcc.n	802339c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 8023398:	2a0b      	cmp	r2, #11
 802339a:	d1a8      	bne.n	80232ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802339c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 802339e:	e7d0      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80233a0:	2a30      	cmp	r2, #48	; 0x30
 80233a2:	d036      	beq.n	8023412 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80233a4:	d808      	bhi.n	80233b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 80233a6:	2a2e      	cmp	r2, #46	; 0x2e
 80233a8:	684b      	ldr	r3, [r1, #4]
 80233aa:	d028      	beq.n	80233fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 80233ac:	d90b      	bls.n	80233c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 80233ae:	781b      	ldrb	r3, [r3, #0]
 80233b0:	2b00      	cmp	r3, #0
 80233b2:	d19c      	bne.n	80232ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80233b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80233b6:	e7c4      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80233b8:	2a32      	cmp	r2, #50	; 0x32
 80233ba:	d02a      	beq.n	8023412 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80233bc:	d301      	bcc.n	80233c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80233be:	2a33      	cmp	r2, #51	; 0x33
 80233c0:	d195      	bne.n	80232ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80233c2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80233c4:	e7bd      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80233c6:	781b      	ldrb	r3, [r3, #0]
 80233c8:	2b01      	cmp	r3, #1
 80233ca:	d007      	beq.n	80233dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 80233cc:	d3f2      	bcc.n	80233b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 80233ce:	2b02      	cmp	r3, #2
 80233d0:	d18d      	bne.n	80232ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80233d2:	4b11      	ldr	r3, [pc, #68]	; (8023418 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80233d4:	f240 4146 	movw	r1, #1094	; 0x446
 80233d8:	4a10      	ldr	r2, [pc, #64]	; (802341c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80233da:	e7ae      	b.n	802333a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80233dc:	6940      	ldr	r0, [r0, #20]
 80233de:	e7b0      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80233e0:	684b      	ldr	r3, [r1, #4]
 80233e2:	781b      	ldrb	r3, [r3, #0]
 80233e4:	2b01      	cmp	r3, #1
 80233e6:	d008      	beq.n	80233fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80233e8:	d30d      	bcc.n	8023406 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80233ea:	2b02      	cmp	r3, #2
 80233ec:	f47f af7f 	bne.w	80232ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80233f0:	4b09      	ldr	r3, [pc, #36]	; (8023418 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80233f2:	f240 4152 	movw	r1, #1106	; 0x452
 80233f6:	4a09      	ldr	r2, [pc, #36]	; (802341c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80233f8:	e79f      	b.n	802333a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80233fa:	68c0      	ldr	r0, [r0, #12]
 80233fc:	e7a1      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80233fe:	781b      	ldrb	r3, [r3, #0]
 8023400:	2b00      	cmp	r3, #0
 8023402:	f47f af74 	bne.w	80232ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8023406:	69c0      	ldr	r0, [r0, #28]
 8023408:	e79b      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802340a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 802340c:	e799      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802340e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8023410:	e797      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023412:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8023414:	e795      	b.n	8023342 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8023416:	bf00      	nop
 8023418:	0803108c 	.word	0x0803108c
 802341c:	0803183f 	.word	0x0803183f
 8023420:	080310d8 	.word	0x080310d8

08023424 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8023424:	b508      	push	{r3, lr}
 8023426:	4b06      	ldr	r3, [pc, #24]	; (8023440 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8023428:	8818      	ldrh	r0, [r3, #0]
 802342a:	b928      	cbnz	r0, 8023438 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 802342c:	4b05      	ldr	r3, [pc, #20]	; (8023444 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 802342e:	214d      	movs	r1, #77	; 0x4d
 8023430:	4a05      	ldr	r2, [pc, #20]	; (8023448 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 8023432:	4806      	ldr	r0, [pc, #24]	; (802344c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8023434:	f008 fa18 	bl	802b868 <__assert_func>
 8023438:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802343c:	b280      	uxth	r0, r0
 802343e:	bd08      	pop	{r3, pc}
 8023440:	2400c8b6 	.word	0x2400c8b6
 8023444:	08031325 	.word	0x08031325
 8023448:	08031804 	.word	0x08031804
 802344c:	08031367 	.word	0x08031367

08023450 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8023450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023454:	b08b      	sub	sp, #44	; 0x2c
 8023456:	460d      	mov	r5, r1
 8023458:	4616      	mov	r6, r2
 802345a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 802345e:	f1b8 0f00 	cmp.w	r8, #0
 8023462:	d047      	beq.n	80234f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8023464:	6810      	ldr	r0, [r2, #0]
 8023466:	ac06      	add	r4, sp, #24
 8023468:	6851      	ldr	r1, [r2, #4]
 802346a:	4f51      	ldr	r7, [pc, #324]	; (80235b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 802346c:	c403      	stmia	r4!, {r0, r1}
 802346e:	6818      	ldr	r0, [r3, #0]
 8023470:	ac08      	add	r4, sp, #32
 8023472:	6859      	ldr	r1, [r3, #4]
 8023474:	c403      	stmia	r4!, {r0, r1}
 8023476:	a806      	add	r0, sp, #24
 8023478:	f7fb f8a8 	bl	801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802347c:	4631      	mov	r1, r6
 802347e:	a808      	add	r0, sp, #32
 8023480:	f7fb f8e8 	bl	801e654 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023484:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023488:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802348c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8023490:	6838      	ldr	r0, [r7, #0]
 8023492:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023496:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 802349a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 802349e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80234a2:	440d      	add	r5, r1
 80234a4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80234a8:	440a      	add	r2, r1
 80234aa:	f8ad 2020 	strh.w	r2, [sp, #32]
 80234ae:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80234b2:	4413      	add	r3, r2
 80234b4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80234b8:	6803      	ldr	r3, [r0, #0]
 80234ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80234bc:	4798      	blx	r3
 80234be:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80234c2:	d01a      	beq.n	80234fa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80234c4:	f010 0f04 	tst.w	r0, #4
 80234c8:	6838      	ldr	r0, [r7, #0]
 80234ca:	d019      	beq.n	8023500 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80234cc:	2100      	movs	r1, #0
 80234ce:	6807      	ldr	r7, [r0, #0]
 80234d0:	b2a4      	uxth	r4, r4
 80234d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80234d6:	b2b6      	uxth	r6, r6
 80234d8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80234dc:	9401      	str	r4, [sp, #4]
 80234de:	9600      	str	r6, [sp, #0]
 80234e0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80234e4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80234e8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80234ec:	9102      	str	r1, [sp, #8]
 80234ee:	4629      	mov	r1, r5
 80234f0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80234f2:	47a0      	blx	r4
 80234f4:	b00b      	add	sp, #44	; 0x2c
 80234f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80234fa:	f010 0f01 	tst.w	r0, #1
 80234fe:	e7e3      	b.n	80234c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8023500:	6803      	ldr	r3, [r0, #0]
 8023502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023504:	4798      	blx	r3
 8023506:	4a2b      	ldr	r2, [pc, #172]	; (80235b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8023508:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 802350c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023510:	8813      	ldrh	r3, [r2, #0]
 8023512:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8023516:	fb03 f404 	mul.w	r4, r3, r4
 802351a:	fb03 c101 	mla	r1, r3, r1, ip
 802351e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023522:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023526:	4408      	add	r0, r1
 8023528:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 802352c:	4404      	add	r4, r0
 802352e:	d02e      	beq.n	802358e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8023530:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8023534:	1b9b      	subs	r3, r3, r6
 8023536:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 802353a:	1b96      	subs	r6, r2, r6
 802353c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023540:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023544:	42a0      	cmp	r0, r4
 8023546:	d22d      	bcs.n	80235a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8023548:	eb00 0e01 	add.w	lr, r0, r1
 802354c:	4570      	cmp	r0, lr
 802354e:	d210      	bcs.n	8023572 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8023550:	f890 9000 	ldrb.w	r9, [r0]
 8023554:	f815 2b01 	ldrb.w	r2, [r5], #1
 8023558:	fb19 f90c 	smulbb	r9, r9, ip
 802355c:	fb02 9208 	mla	r2, r2, r8, r9
 8023560:	b292      	uxth	r2, r2
 8023562:	f102 0901 	add.w	r9, r2, #1
 8023566:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 802356a:	1212      	asrs	r2, r2, #8
 802356c:	f800 2b01 	strb.w	r2, [r0], #1
 8023570:	e7ec      	b.n	802354c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8023572:	4418      	add	r0, r3
 8023574:	4435      	add	r5, r6
 8023576:	e7e5      	b.n	8023544 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8023578:	8813      	ldrh	r3, [r2, #0]
 802357a:	1b9b      	subs	r3, r3, r6
 802357c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023580:	4418      	add	r0, r3
 8023582:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8023586:	1b9b      	subs	r3, r3, r6
 8023588:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802358c:	441d      	add	r5, r3
 802358e:	42a0      	cmp	r0, r4
 8023590:	d208      	bcs.n	80235a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8023592:	eb00 0c01 	add.w	ip, r0, r1
 8023596:	4560      	cmp	r0, ip
 8023598:	d2ee      	bcs.n	8023578 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 802359a:	f815 3b01 	ldrb.w	r3, [r5], #1
 802359e:	f800 3b01 	strb.w	r3, [r0], #1
 80235a2:	e7f8      	b.n	8023596 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80235a4:	6838      	ldr	r0, [r7, #0]
 80235a6:	6803      	ldr	r3, [r0, #0]
 80235a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80235aa:	4798      	blx	r3
 80235ac:	e7a2      	b.n	80234f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80235ae:	bf00      	nop
 80235b0:	2400c8bc 	.word	0x2400c8bc
 80235b4:	2400c8b6 	.word	0x2400c8b6

080235b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80235b8:	b510      	push	{r4, lr}
 80235ba:	4604      	mov	r4, r0
 80235bc:	2104      	movs	r1, #4
 80235be:	f007 ff7e 	bl	802b4be <_ZdlPvj>
 80235c2:	4620      	mov	r0, r4
 80235c4:	bd10      	pop	{r4, pc}

080235c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80235c6:	b510      	push	{r4, lr}
 80235c8:	4604      	mov	r4, r0
 80235ca:	2104      	movs	r1, #4
 80235cc:	f007 ff77 	bl	802b4be <_ZdlPvj>
 80235d0:	4620      	mov	r0, r4
 80235d2:	bd10      	pop	{r4, pc}

080235d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80235d4:	b510      	push	{r4, lr}
 80235d6:	4604      	mov	r4, r0
 80235d8:	2104      	movs	r1, #4
 80235da:	f007 ff70 	bl	802b4be <_ZdlPvj>
 80235de:	4620      	mov	r0, r4
 80235e0:	bd10      	pop	{r4, pc}

080235e2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80235e2:	b510      	push	{r4, lr}
 80235e4:	4604      	mov	r4, r0
 80235e6:	2104      	movs	r1, #4
 80235e8:	f007 ff69 	bl	802b4be <_ZdlPvj>
 80235ec:	4620      	mov	r0, r4
 80235ee:	bd10      	pop	{r4, pc}

080235f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80235f0:	b510      	push	{r4, lr}
 80235f2:	4604      	mov	r4, r0
 80235f4:	2104      	movs	r1, #4
 80235f6:	f007 ff62 	bl	802b4be <_ZdlPvj>
 80235fa:	4620      	mov	r0, r4
 80235fc:	bd10      	pop	{r4, pc}

080235fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80235fe:	b510      	push	{r4, lr}
 8023600:	4604      	mov	r4, r0
 8023602:	2104      	movs	r1, #4
 8023604:	f007 ff5b 	bl	802b4be <_ZdlPvj>
 8023608:	4620      	mov	r0, r4
 802360a:	bd10      	pop	{r4, pc}

0802360c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802360c:	b510      	push	{r4, lr}
 802360e:	4604      	mov	r4, r0
 8023610:	2104      	movs	r1, #4
 8023612:	f007 ff54 	bl	802b4be <_ZdlPvj>
 8023616:	4620      	mov	r0, r4
 8023618:	bd10      	pop	{r4, pc}

0802361a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802361a:	b510      	push	{r4, lr}
 802361c:	4604      	mov	r4, r0
 802361e:	2104      	movs	r1, #4
 8023620:	f007 ff4d 	bl	802b4be <_ZdlPvj>
 8023624:	4620      	mov	r0, r4
 8023626:	bd10      	pop	{r4, pc}

08023628 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8023628:	b510      	push	{r4, lr}
 802362a:	4604      	mov	r4, r0
 802362c:	2104      	movs	r1, #4
 802362e:	f007 ff46 	bl	802b4be <_ZdlPvj>
 8023632:	4620      	mov	r0, r4
 8023634:	bd10      	pop	{r4, pc}

08023636 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8023636:	b510      	push	{r4, lr}
 8023638:	4604      	mov	r4, r0
 802363a:	2104      	movs	r1, #4
 802363c:	f007 ff3f 	bl	802b4be <_ZdlPvj>
 8023640:	4620      	mov	r0, r4
 8023642:	bd10      	pop	{r4, pc}

08023644 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8023644:	b510      	push	{r4, lr}
 8023646:	4604      	mov	r4, r0
 8023648:	2104      	movs	r1, #4
 802364a:	f007 ff38 	bl	802b4be <_ZdlPvj>
 802364e:	4620      	mov	r0, r4
 8023650:	bd10      	pop	{r4, pc}

08023652 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8023652:	b510      	push	{r4, lr}
 8023654:	4604      	mov	r4, r0
 8023656:	2104      	movs	r1, #4
 8023658:	f007 ff31 	bl	802b4be <_ZdlPvj>
 802365c:	4620      	mov	r0, r4
 802365e:	bd10      	pop	{r4, pc}

08023660 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8023660:	b510      	push	{r4, lr}
 8023662:	4604      	mov	r4, r0
 8023664:	2104      	movs	r1, #4
 8023666:	f007 ff2a 	bl	802b4be <_ZdlPvj>
 802366a:	4620      	mov	r0, r4
 802366c:	bd10      	pop	{r4, pc}

0802366e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802366e:	b510      	push	{r4, lr}
 8023670:	4604      	mov	r4, r0
 8023672:	2104      	movs	r1, #4
 8023674:	f007 ff23 	bl	802b4be <_ZdlPvj>
 8023678:	4620      	mov	r0, r4
 802367a:	bd10      	pop	{r4, pc}

0802367c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802367c:	b510      	push	{r4, lr}
 802367e:	4604      	mov	r4, r0
 8023680:	2104      	movs	r1, #4
 8023682:	f007 ff1c 	bl	802b4be <_ZdlPvj>
 8023686:	4620      	mov	r0, r4
 8023688:	bd10      	pop	{r4, pc}

0802368a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802368a:	b510      	push	{r4, lr}
 802368c:	4604      	mov	r4, r0
 802368e:	2104      	movs	r1, #4
 8023690:	f007 ff15 	bl	802b4be <_ZdlPvj>
 8023694:	4620      	mov	r0, r4
 8023696:	bd10      	pop	{r4, pc}

08023698 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8023698:	b510      	push	{r4, lr}
 802369a:	4604      	mov	r4, r0
 802369c:	2104      	movs	r1, #4
 802369e:	f007 ff0e 	bl	802b4be <_ZdlPvj>
 80236a2:	4620      	mov	r0, r4
 80236a4:	bd10      	pop	{r4, pc}

080236a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80236a6:	b510      	push	{r4, lr}
 80236a8:	4604      	mov	r4, r0
 80236aa:	2104      	movs	r1, #4
 80236ac:	f007 ff07 	bl	802b4be <_ZdlPvj>
 80236b0:	4620      	mov	r0, r4
 80236b2:	bd10      	pop	{r4, pc}

080236b4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80236b4:	b510      	push	{r4, lr}
 80236b6:	4604      	mov	r4, r0
 80236b8:	2104      	movs	r1, #4
 80236ba:	f007 ff00 	bl	802b4be <_ZdlPvj>
 80236be:	4620      	mov	r0, r4
 80236c0:	bd10      	pop	{r4, pc}

080236c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80236c2:	b510      	push	{r4, lr}
 80236c4:	4604      	mov	r4, r0
 80236c6:	2104      	movs	r1, #4
 80236c8:	f007 fef9 	bl	802b4be <_ZdlPvj>
 80236cc:	4620      	mov	r0, r4
 80236ce:	bd10      	pop	{r4, pc}

080236d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80236d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236d4:	4db4      	ldr	r5, [pc, #720]	; (80239a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2d8>)
 80236d6:	4690      	mov	r8, r2
 80236d8:	b08d      	sub	sp, #52	; 0x34
 80236da:	4604      	mov	r4, r0
 80236dc:	682a      	ldr	r2, [r5, #0]
 80236de:	4689      	mov	r9, r1
 80236e0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80236e4:	2a02      	cmp	r2, #2
 80236e6:	d106      	bne.n	80236f6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80236e8:	4bb0      	ldr	r3, [pc, #704]	; (80239ac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2dc>)
 80236ea:	f240 11ed 	movw	r1, #493	; 0x1ed
 80236ee:	4ab0      	ldr	r2, [pc, #704]	; (80239b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 80236f0:	48b0      	ldr	r0, [pc, #704]	; (80239b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e4>)
 80236f2:	f008 f8b9 	bl	802b868 <__assert_func>
 80236f6:	ae0c      	add	r6, sp, #48	; 0x30
 80236f8:	f826 3d1c 	strh.w	r3, [r6, #-28]!
 80236fc:	4630      	mov	r0, r6
 80236fe:	f7fe f985 	bl	8021a0c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023702:	6823      	ldr	r3, [r4, #0]
 8023704:	4607      	mov	r7, r0
 8023706:	4620      	mov	r0, r4
 8023708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802370a:	4798      	blx	r3
 802370c:	4287      	cmp	r7, r0
 802370e:	d004      	beq.n	802371a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8023710:	4ba9      	ldr	r3, [pc, #676]	; (80239b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e8>)
 8023712:	f240 11ef 	movw	r1, #495	; 0x1ef
 8023716:	4aa6      	ldr	r2, [pc, #664]	; (80239b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8023718:	e7ea      	b.n	80236f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802371a:	4630      	mov	r0, r6
 802371c:	f7fe f8ec 	bl	80218f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023720:	4607      	mov	r7, r0
 8023722:	b920      	cbnz	r0, 802372e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8023724:	4ba5      	ldr	r3, [pc, #660]	; (80239bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ec>)
 8023726:	f240 11f1 	movw	r1, #497	; 0x1f1
 802372a:	4aa1      	ldr	r2, [pc, #644]	; (80239b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 802372c:	e7e0      	b.n	80236f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 802372e:	f8d8 0000 	ldr.w	r0, [r8]
 8023732:	ab06      	add	r3, sp, #24
 8023734:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8023738:	f9b8 a000 	ldrsh.w	sl, [r8]
 802373c:	c303      	stmia	r3!, {r0, r1}
 802373e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8023742:	ab08      	add	r3, sp, #32
 8023744:	f8d9 0000 	ldr.w	r0, [r9]
 8023748:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 802374c:	c303      	stmia	r3!, {r0, r1}
 802374e:	4630      	mov	r0, r6
 8023750:	f7fd ffca 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023754:	4680      	mov	r8, r0
 8023756:	4630      	mov	r0, r6
 8023758:	f7fe f800 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 802375c:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8023760:	f10d 0920 	add.w	r9, sp, #32
 8023764:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8023768:	a806      	add	r0, sp, #24
 802376a:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 802376e:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8023772:	f7fa ff2b 	bl	801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023776:	4648      	mov	r0, r9
 8023778:	f7fa ff28 	bl	801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802377c:	a80a      	add	r0, sp, #40	; 0x28
 802377e:	f7fa ff25 	bl	801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023782:	4b8f      	ldr	r3, [pc, #572]	; (80239c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 8023784:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023788:	881e      	ldrh	r6, [r3, #0]
 802378a:	4b8e      	ldr	r3, [pc, #568]	; (80239c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 802378c:	fa0f fb86 	sxth.w	fp, r6
 8023790:	8819      	ldrh	r1, [r3, #0]
 8023792:	4593      	cmp	fp, r2
 8023794:	dd75      	ble.n	8023882 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 8023796:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 802379a:	4494      	add	ip, r2
 802379c:	fa1f fc8c 	uxth.w	ip, ip
 80237a0:	fa0f fa8c 	sxth.w	sl, ip
 80237a4:	f1ba 0f00 	cmp.w	sl, #0
 80237a8:	dd6b      	ble.n	8023882 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 80237aa:	fa0f f881 	sxth.w	r8, r1
 80237ae:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80237b2:	4598      	cmp	r8, r3
 80237b4:	dd65      	ble.n	8023882 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 80237b6:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
 80237ba:	4418      	add	r0, r3
 80237bc:	b280      	uxth	r0, r0
 80237be:	fa0f fe80 	sxth.w	lr, r0
 80237c2:	f1be 0f00 	cmp.w	lr, #0
 80237c6:	dd5c      	ble.n	8023882 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1b2>
 80237c8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80237cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80237d0:	45d3      	cmp	fp, sl
 80237d2:	bfc8      	it	gt
 80237d4:	4666      	movgt	r6, ip
 80237d6:	45f0      	cmp	r8, lr
 80237d8:	bfc8      	it	gt
 80237da:	4601      	movgt	r1, r0
 80237dc:	f8ad 2020 	strh.w	r2, [sp, #32]
 80237e0:	1ab6      	subs	r6, r6, r2
 80237e2:	1ac9      	subs	r1, r1, r3
 80237e4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80237e8:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80237ec:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80237f0:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 80237f4:	f1bc 0f00 	cmp.w	ip, #0
 80237f8:	f340 80aa 	ble.w	8023950 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 80237fc:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8023800:	2e00      	cmp	r6, #0
 8023802:	f340 80a5 	ble.w	8023950 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 8023806:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 802380a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 802380e:	4288      	cmp	r0, r1
 8023810:	db3b      	blt.n	802388a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 8023812:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8023816:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 802381a:	429a      	cmp	r2, r3
 802381c:	db35      	blt.n	802388a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 802381e:	4460      	add	r0, ip
 8023820:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8023824:	4461      	add	r1, ip
 8023826:	b200      	sxth	r0, r0
 8023828:	b209      	sxth	r1, r1
 802382a:	4288      	cmp	r0, r1
 802382c:	dc2d      	bgt.n	802388a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 802382e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8023832:	4432      	add	r2, r6
 8023834:	440b      	add	r3, r1
 8023836:	b212      	sxth	r2, r2
 8023838:	b21b      	sxth	r3, r3
 802383a:	429a      	cmp	r2, r3
 802383c:	dc25      	bgt.n	802388a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ba>
 802383e:	6823      	ldr	r3, [r4, #0]
 8023840:	4620      	mov	r0, r4
 8023842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023844:	4798      	blx	r3
 8023846:	4682      	mov	sl, r0
 8023848:	6828      	ldr	r0, [r5, #0]
 802384a:	6803      	ldr	r3, [r0, #0]
 802384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802384e:	4798      	blx	r3
 8023850:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8023854:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8023858:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 802385c:	9303      	str	r3, [sp, #12]
 802385e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8023862:	1a9b      	subs	r3, r3, r2
 8023864:	b29b      	uxth	r3, r3
 8023866:	b21c      	sxth	r4, r3
 8023868:	2c00      	cmp	r4, #0
 802386a:	dc13      	bgt.n	8023894 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1c4>
 802386c:	bf18      	it	ne
 802386e:	f8ad 2020 	strhne.w	r2, [sp, #32]
 8023872:	463c      	mov	r4, r7
 8023874:	bf1e      	ittt	ne
 8023876:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 802387a:	189b      	addne	r3, r3, r2
 802387c:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8023880:	e00f      	b.n	80238a2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1d2>
 8023882:	2300      	movs	r3, #0
 8023884:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8023888:	e7b2      	b.n	80237f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x120>
 802388a:	4b4f      	ldr	r3, [pc, #316]	; (80239c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f8>)
 802388c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8023890:	4a47      	ldr	r2, [pc, #284]	; (80239b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2e0>)
 8023892:	e72d      	b.n	80236f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8023894:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023898:	ebab 0303 	sub.w	r3, fp, r3
 802389c:	443c      	add	r4, r7
 802389e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80238a2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80238a6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80238aa:	1a9b      	subs	r3, r3, r2
 80238ac:	b29b      	uxth	r3, r3
 80238ae:	b219      	sxth	r1, r3
 80238b0:	2900      	cmp	r1, #0
 80238b2:	dd51      	ble.n	8023958 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>
 80238b4:	9a03      	ldr	r2, [sp, #12]
 80238b6:	fb02 4401 	mla	r4, r2, r1, r4
 80238ba:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80238be:	1ad3      	subs	r3, r2, r3
 80238c0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80238c4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80238c8:	2b00      	cmp	r3, #0
 80238ca:	dd41      	ble.n	8023950 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 80238cc:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80238d0:	2e00      	cmp	r6, #0
 80238d2:	dd3d      	ble.n	8023950 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 80238d4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 80238d8:	f04f 0803 	mov.w	r8, #3
 80238dc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80238e0:	fb0a f10c 	mul.w	r1, sl, ip
 80238e4:	fb12 1808 	smlabb	r8, r2, r8, r1
 80238e8:	4935      	ldr	r1, [pc, #212]	; (80239c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f0>)
 80238ea:	4480      	add	r8, r0
 80238ec:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 80238f0:	8809      	ldrh	r1, [r1, #0]
 80238f2:	4283      	cmp	r3, r0
 80238f4:	eba1 0202 	sub.w	r2, r1, r2
 80238f8:	bfa8      	it	ge
 80238fa:	4603      	movge	r3, r0
 80238fc:	4293      	cmp	r3, r2
 80238fe:	bfa8      	it	ge
 8023900:	4613      	movge	r3, r2
 8023902:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8023906:	4296      	cmp	r6, r2
 8023908:	bfa8      	it	ge
 802390a:	4616      	movge	r6, r2
 802390c:	4a2d      	ldr	r2, [pc, #180]	; (80239c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2f4>)
 802390e:	8812      	ldrh	r2, [r2, #0]
 8023910:	eba2 0c0c 	sub.w	ip, r2, ip
 8023914:	4632      	mov	r2, r6
 8023916:	4566      	cmp	r6, ip
 8023918:	bfa8      	it	ge
 802391a:	4662      	movge	r2, ip
 802391c:	4299      	cmp	r1, r3
 802391e:	9202      	str	r2, [sp, #8]
 8023920:	d12d      	bne.n	802397e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8023922:	4559      	cmp	r1, fp
 8023924:	d12b      	bne.n	802397e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ae>
 8023926:	6828      	ldr	r0, [r5, #0]
 8023928:	6803      	ldr	r3, [r0, #0]
 802392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802392c:	4798      	blx	r3
 802392e:	07c3      	lsls	r3, r0, #31
 8023930:	d51b      	bpl.n	802396a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29a>
 8023932:	6828      	ldr	r0, [r5, #0]
 8023934:	9b02      	ldr	r3, [sp, #8]
 8023936:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 802393a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 802393e:	6803      	ldr	r3, [r0, #0]
 8023940:	f8cd b000 	str.w	fp, [sp]
 8023944:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8023946:	4623      	mov	r3, r4
 8023948:	e899 0006 	ldmia.w	r9, {r1, r2}
 802394c:	47a8      	blx	r5
 802394e:	4607      	mov	r7, r0
 8023950:	4638      	mov	r0, r7
 8023952:	b00d      	add	sp, #52	; 0x34
 8023954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023958:	bf1f      	itttt	ne
 802395a:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 802395e:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8023962:	189b      	addne	r3, r3, r2
 8023964:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8023968:	e7ac      	b.n	80238c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f4>
 802396a:	6828      	ldr	r0, [r5, #0]
 802396c:	4642      	mov	r2, r8
 802396e:	4621      	mov	r1, r4
 8023970:	6803      	ldr	r3, [r0, #0]
 8023972:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8023974:	9b02      	ldr	r3, [sp, #8]
 8023976:	fb03 f30a 	mul.w	r3, r3, sl
 802397a:	47a8      	blx	r5
 802397c:	e7e8      	b.n	8023950 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 802397e:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8023982:	f04f 0900 	mov.w	r9, #0
 8023986:	9b02      	ldr	r3, [sp, #8]
 8023988:	454b      	cmp	r3, r9
 802398a:	dde1      	ble.n	8023950 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 802398c:	6828      	ldr	r0, [r5, #0]
 802398e:	4642      	mov	r2, r8
 8023990:	4621      	mov	r1, r4
 8023992:	44d0      	add	r8, sl
 8023994:	6803      	ldr	r3, [r0, #0]
 8023996:	f109 0901 	add.w	r9, r9, #1
 802399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802399c:	461e      	mov	r6, r3
 802399e:	465b      	mov	r3, fp
 80239a0:	47b0      	blx	r6
 80239a2:	9b03      	ldr	r3, [sp, #12]
 80239a4:	441c      	add	r4, r3
 80239a6:	e7ee      	b.n	8023986 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2b6>
 80239a8:	2400c8bc 	.word	0x2400c8bc
 80239ac:	0803110a 	.word	0x0803110a
 80239b0:	080318e9 	.word	0x080318e9
 80239b4:	080310d8 	.word	0x080310d8
 80239b8:	080311bc 	.word	0x080311bc
 80239bc:	08031211 	.word	0x08031211
 80239c0:	2400c8b6 	.word	0x2400c8b6
 80239c4:	2400c8b8 	.word	0x2400c8b8
 80239c8:	0803124f 	.word	0x0803124f

080239cc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80239cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80239d0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80239d4:	9c06      	ldr	r4, [sp, #24]
 80239d6:	2800      	cmp	r0, #0
 80239d8:	d06e      	beq.n	8023ab8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80239da:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80239de:	2d00      	cmp	r5, #0
 80239e0:	dd6a      	ble.n	8023ab8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80239e2:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 80239e6:	f1bc 0f00 	cmp.w	ip, #0
 80239ea:	dd65      	ble.n	8023ab8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80239ec:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 80239f0:	28ff      	cmp	r0, #255	; 0xff
 80239f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80239f6:	f3c4 2707 	ubfx	r7, r4, #8, #8
 80239fa:	fb02 3306 	mla	r3, r2, r6, r3
 80239fe:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8023a02:	b2e4      	uxtb	r4, r4
 8023a04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023a08:	4419      	add	r1, r3
 8023a0a:	fb02 f30c 	mul.w	r3, r2, ip
 8023a0e:	eba2 0205 	sub.w	r2, r2, r5
 8023a12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023a16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023a1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023a1e:	440b      	add	r3, r1
 8023a20:	d03e      	beq.n	8023aa0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8023a22:	fa1f fc80 	uxth.w	ip, r0
 8023a26:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8023a2a:	fb06 f60c 	mul.w	r6, r6, ip
 8023a2e:	b280      	uxth	r0, r0
 8023a30:	fb07 f70c 	mul.w	r7, r7, ip
 8023a34:	fb04 f40c 	mul.w	r4, r4, ip
 8023a38:	4299      	cmp	r1, r3
 8023a3a:	d23d      	bcs.n	8023ab8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8023a3c:	eb01 0c05 	add.w	ip, r1, r5
 8023a40:	458c      	cmp	ip, r1
 8023a42:	f101 0e03 	add.w	lr, r1, #3
 8023a46:	d928      	bls.n	8023a9a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8023a48:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023a4c:	fb11 f100 	smulbb	r1, r1, r0
 8023a50:	4421      	add	r1, r4
 8023a52:	b289      	uxth	r1, r1
 8023a54:	f101 0801 	add.w	r8, r1, #1
 8023a58:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8023a5c:	1209      	asrs	r1, r1, #8
 8023a5e:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023a62:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8023a66:	fb11 f100 	smulbb	r1, r1, r0
 8023a6a:	4439      	add	r1, r7
 8023a6c:	b289      	uxth	r1, r1
 8023a6e:	f101 0801 	add.w	r8, r1, #1
 8023a72:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8023a76:	1209      	asrs	r1, r1, #8
 8023a78:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8023a7c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023a80:	fb11 f100 	smulbb	r1, r1, r0
 8023a84:	4431      	add	r1, r6
 8023a86:	b289      	uxth	r1, r1
 8023a88:	f101 0801 	add.w	r8, r1, #1
 8023a8c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8023a90:	1209      	asrs	r1, r1, #8
 8023a92:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8023a96:	4671      	mov	r1, lr
 8023a98:	e7d2      	b.n	8023a40 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8023a9a:	4411      	add	r1, r2
 8023a9c:	e7cc      	b.n	8023a38 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8023a9e:	4411      	add	r1, r2
 8023aa0:	4299      	cmp	r1, r3
 8023aa2:	d209      	bcs.n	8023ab8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8023aa4:	1948      	adds	r0, r1, r5
 8023aa6:	4281      	cmp	r1, r0
 8023aa8:	d2f9      	bcs.n	8023a9e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8023aaa:	700c      	strb	r4, [r1, #0]
 8023aac:	3103      	adds	r1, #3
 8023aae:	f801 7c02 	strb.w	r7, [r1, #-2]
 8023ab2:	f801 6c01 	strb.w	r6, [r1, #-1]
 8023ab6:	e7f6      	b.n	8023aa6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8023ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023abc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8023abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023abe:	4606      	mov	r6, r0
 8023ac0:	b087      	sub	sp, #28
 8023ac2:	4615      	mov	r5, r2
 8023ac4:	461f      	mov	r7, r3
 8023ac6:	b353      	cbz	r3, 8023b1e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023ac8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8023acc:	2b00      	cmp	r3, #0
 8023ace:	dd26      	ble.n	8023b1e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023ad0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8023ad4:	2b00      	cmp	r3, #0
 8023ad6:	dd22      	ble.n	8023b1e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023ad8:	6808      	ldr	r0, [r1, #0]
 8023ada:	aa04      	add	r2, sp, #16
 8023adc:	6849      	ldr	r1, [r1, #4]
 8023ade:	4c1b      	ldr	r4, [pc, #108]	; (8023b4c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8023ae0:	c203      	stmia	r2!, {r0, r1}
 8023ae2:	a804      	add	r0, sp, #16
 8023ae4:	f7fa fd72 	bl	801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023ae8:	6820      	ldr	r0, [r4, #0]
 8023aea:	6803      	ldr	r3, [r0, #0]
 8023aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023aee:	4798      	blx	r3
 8023af0:	2fff      	cmp	r7, #255	; 0xff
 8023af2:	d016      	beq.n	8023b22 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8023af4:	f010 0f08 	tst.w	r0, #8
 8023af8:	6820      	ldr	r0, [r4, #0]
 8023afa:	d015      	beq.n	8023b28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8023afc:	2400      	movs	r4, #0
 8023afe:	6801      	ldr	r1, [r0, #0]
 8023b00:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8023b04:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023b08:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8023b0c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8023b10:	9401      	str	r4, [sp, #4]
 8023b12:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8023b16:	9400      	str	r4, [sp, #0]
 8023b18:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8023b1a:	4629      	mov	r1, r5
 8023b1c:	47a0      	blx	r4
 8023b1e:	b007      	add	sp, #28
 8023b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b22:	f010 0f02 	tst.w	r0, #2
 8023b26:	e7e7      	b.n	8023af8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8023b28:	6803      	ldr	r3, [r0, #0]
 8023b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023b2c:	4798      	blx	r3
 8023b2e:	4b08      	ldr	r3, [pc, #32]	; (8023b50 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8023b30:	4601      	mov	r1, r0
 8023b32:	4630      	mov	r0, r6
 8023b34:	881a      	ldrh	r2, [r3, #0]
 8023b36:	6833      	ldr	r3, [r6, #0]
 8023b38:	e9cd 5700 	strd	r5, r7, [sp]
 8023b3c:	69dd      	ldr	r5, [r3, #28]
 8023b3e:	ab04      	add	r3, sp, #16
 8023b40:	47a8      	blx	r5
 8023b42:	6820      	ldr	r0, [r4, #0]
 8023b44:	6803      	ldr	r3, [r0, #0]
 8023b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023b48:	4798      	blx	r3
 8023b4a:	e7e8      	b.n	8023b1e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023b4c:	2400c8bc 	.word	0x2400c8bc
 8023b50:	2400c8b6 	.word	0x2400c8b6

08023b54 <_ZN8touchgfx8LCD24bppC1Ev>:
 8023b54:	2200      	movs	r2, #0
 8023b56:	490c      	ldr	r1, [pc, #48]	; (8023b88 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8023b58:	6042      	str	r2, [r0, #4]
 8023b5a:	6001      	str	r1, [r0, #0]
 8023b5c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8023b60:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8023b64:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8023b68:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8023b6c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8023b70:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8023b74:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8023b78:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8023b7c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8023b80:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8023b84:	4770      	bx	lr
 8023b86:	bf00      	nop
 8023b88:	08031534 	.word	0x08031534

08023b8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8023b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b90:	b091      	sub	sp, #68	; 0x44
 8023b92:	880d      	ldrh	r5, [r1, #0]
 8023b94:	4607      	mov	r7, r0
 8023b96:	4688      	mov	r8, r1
 8023b98:	4616      	mov	r6, r2
 8023b9a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8023b9e:	b12d      	cbz	r5, 8023bac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8023ba0:	4b69      	ldr	r3, [pc, #420]	; (8023d48 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8023ba2:	2160      	movs	r1, #96	; 0x60
 8023ba4:	4a69      	ldr	r2, [pc, #420]	; (8023d4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8023ba6:	486a      	ldr	r0, [pc, #424]	; (8023d50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8023ba8:	f007 fe5e 	bl	802b868 <__assert_func>
 8023bac:	6810      	ldr	r0, [r2, #0]
 8023bae:	ac0c      	add	r4, sp, #48	; 0x30
 8023bb0:	6851      	ldr	r1, [r2, #4]
 8023bb2:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8023d54 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8023bb6:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8023d58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8023bba:	c403      	stmia	r4!, {r0, r1}
 8023bbc:	6818      	ldr	r0, [r3, #0]
 8023bbe:	ac0e      	add	r4, sp, #56	; 0x38
 8023bc0:	6859      	ldr	r1, [r3, #4]
 8023bc2:	c403      	stmia	r4!, {r0, r1}
 8023bc4:	a80c      	add	r0, sp, #48	; 0x30
 8023bc6:	f7fa fd01 	bl	801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023bca:	4631      	mov	r1, r6
 8023bcc:	a80e      	add	r0, sp, #56	; 0x38
 8023bce:	f7fa fd41 	bl	801e654 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023bd2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8023bd6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023bda:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8023bde:	f8da 0000 	ldr.w	r0, [sl]
 8023be2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023be6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8023bea:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8023bee:	440f      	add	r7, r1
 8023bf0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8023bf4:	440a      	add	r2, r1
 8023bf6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8023bfa:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8023bfe:	4413      	add	r3, r2
 8023c00:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8023c04:	6803      	ldr	r3, [r0, #0]
 8023c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023c08:	4798      	blx	r3
 8023c0a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8023c0e:	f8da 0000 	ldr.w	r0, [sl]
 8023c12:	d01e      	beq.n	8023c52 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 8023c14:	6801      	ldr	r1, [r0, #0]
 8023c16:	2201      	movs	r2, #1
 8023c18:	9509      	str	r5, [sp, #36]	; 0x24
 8023c1a:	250b      	movs	r5, #11
 8023c1c:	b2a4      	uxth	r4, r4
 8023c1e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8023c22:	b2b6      	uxth	r6, r6
 8023c24:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8023c28:	f8bb 5000 	ldrh.w	r5, [fp]
 8023c2c:	f8cd 9010 	str.w	r9, [sp, #16]
 8023c30:	9602      	str	r6, [sp, #8]
 8023c32:	9401      	str	r4, [sp, #4]
 8023c34:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8023c38:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8023c3c:	9203      	str	r2, [sp, #12]
 8023c3e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8023c42:	9200      	str	r2, [sp, #0]
 8023c44:	4642      	mov	r2, r8
 8023c46:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8023c48:	4639      	mov	r1, r7
 8023c4a:	47a0      	blx	r4
 8023c4c:	b011      	add	sp, #68	; 0x44
 8023c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c52:	6803      	ldr	r3, [r0, #0]
 8023c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023c56:	4798      	blx	r3
 8023c58:	f8bb 5000 	ldrh.w	r5, [fp]
 8023c5c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8023c60:	f04f 0e04 	mov.w	lr, #4
 8023c64:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023c68:	436e      	muls	r6, r5
 8023c6a:	fb05 2303 	mla	r3, r5, r3, r2
 8023c6e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023c72:	1b2d      	subs	r5, r5, r4
 8023c74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023c78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023c7c:	4418      	add	r0, r3
 8023c7e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023c82:	1982      	adds	r2, r0, r6
 8023c84:	1b1b      	subs	r3, r3, r4
 8023c86:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023c8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8023c8c:	4290      	cmp	r0, r2
 8023c8e:	d254      	bcs.n	8023d3a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8023c90:	eb00 0a04 	add.w	sl, r0, r4
 8023c94:	4550      	cmp	r0, sl
 8023c96:	d24c      	bcs.n	8023d32 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8023c98:	f817 1b01 	ldrb.w	r1, [r7], #1
 8023c9c:	fb1e e101 	smlabb	r1, lr, r1, lr
 8023ca0:	eb08 0c01 	add.w	ip, r8, r1
 8023ca4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8023ca8:	b173      	cbz	r3, 8023cc8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8023caa:	2bff      	cmp	r3, #255	; 0xff
 8023cac:	f818 b001 	ldrb.w	fp, [r8, r1]
 8023cb0:	d10c      	bne.n	8023ccc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8023cb2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023cb6:	d109      	bne.n	8023ccc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8023cb8:	f880 b000 	strb.w	fp, [r0]
 8023cbc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023cc0:	7043      	strb	r3, [r0, #1]
 8023cc2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8023cc6:	7083      	strb	r3, [r0, #2]
 8023cc8:	3003      	adds	r0, #3
 8023cca:	e7e3      	b.n	8023c94 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8023ccc:	fb09 f103 	mul.w	r1, r9, r3
 8023cd0:	1c4b      	adds	r3, r1, #1
 8023cd2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8023cd6:	7801      	ldrb	r1, [r0, #0]
 8023cd8:	121b      	asrs	r3, r3, #8
 8023cda:	b29e      	uxth	r6, r3
 8023cdc:	43db      	mvns	r3, r3
 8023cde:	fb1b fb06 	smulbb	fp, fp, r6
 8023ce2:	b2db      	uxtb	r3, r3
 8023ce4:	fb01 b103 	mla	r1, r1, r3, fp
 8023ce8:	b289      	uxth	r1, r1
 8023cea:	f101 0b01 	add.w	fp, r1, #1
 8023cee:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8023cf2:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023cf6:	fb1b fb03 	smulbb	fp, fp, r3
 8023cfa:	1209      	asrs	r1, r1, #8
 8023cfc:	7001      	strb	r1, [r0, #0]
 8023cfe:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8023d02:	fb01 b106 	mla	r1, r1, r6, fp
 8023d06:	b289      	uxth	r1, r1
 8023d08:	f101 0b01 	add.w	fp, r1, #1
 8023d0c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8023d10:	1209      	asrs	r1, r1, #8
 8023d12:	7041      	strb	r1, [r0, #1]
 8023d14:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8023d18:	f890 c002 	ldrb.w	ip, [r0, #2]
 8023d1c:	fb1c f303 	smulbb	r3, ip, r3
 8023d20:	fb01 3606 	mla	r6, r1, r6, r3
 8023d24:	b2b6      	uxth	r6, r6
 8023d26:	1c73      	adds	r3, r6, #1
 8023d28:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023d2c:	1236      	asrs	r6, r6, #8
 8023d2e:	7086      	strb	r6, [r0, #2]
 8023d30:	e7ca      	b.n	8023cc8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8023d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d34:	4428      	add	r0, r5
 8023d36:	441f      	add	r7, r3
 8023d38:	e7a8      	b.n	8023c8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 8023d3a:	4b06      	ldr	r3, [pc, #24]	; (8023d54 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8023d3c:	6818      	ldr	r0, [r3, #0]
 8023d3e:	6803      	ldr	r3, [r0, #0]
 8023d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d42:	4798      	blx	r3
 8023d44:	e782      	b.n	8023c4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8023d46:	bf00      	nop
 8023d48:	0803103c 	.word	0x0803103c
 8023d4c:	0803170b 	.word	0x0803170b
 8023d50:	080310d8 	.word	0x080310d8
 8023d54:	2400c8bc 	.word	0x2400c8bc
 8023d58:	2400c8b6 	.word	0x2400c8b6

08023d5c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8023d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d60:	f8b1 9000 	ldrh.w	r9, [r1]
 8023d64:	b091      	sub	sp, #68	; 0x44
 8023d66:	4604      	mov	r4, r0
 8023d68:	460e      	mov	r6, r1
 8023d6a:	f1b9 0f01 	cmp.w	r9, #1
 8023d6e:	4690      	mov	r8, r2
 8023d70:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8023d74:	d005      	beq.n	8023d82 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 8023d76:	4b69      	ldr	r3, [pc, #420]	; (8023f1c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8023d78:	21ae      	movs	r1, #174	; 0xae
 8023d7a:	4a69      	ldr	r2, [pc, #420]	; (8023f20 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8023d7c:	4869      	ldr	r0, [pc, #420]	; (8023f24 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8023d7e:	f007 fd73 	bl	802b868 <__assert_func>
 8023d82:	6810      	ldr	r0, [r2, #0]
 8023d84:	ad0c      	add	r5, sp, #48	; 0x30
 8023d86:	6851      	ldr	r1, [r2, #4]
 8023d88:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8023f28 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8023d8c:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8023f2c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8023d90:	c503      	stmia	r5!, {r0, r1}
 8023d92:	6818      	ldr	r0, [r3, #0]
 8023d94:	ad0e      	add	r5, sp, #56	; 0x38
 8023d96:	6859      	ldr	r1, [r3, #4]
 8023d98:	c503      	stmia	r5!, {r0, r1}
 8023d9a:	a80c      	add	r0, sp, #48	; 0x30
 8023d9c:	f7fa fc16 	bl	801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023da0:	4641      	mov	r1, r8
 8023da2:	a80e      	add	r0, sp, #56	; 0x38
 8023da4:	f7fa fc56 	bl	801e654 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023da8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8023dac:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023db0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8023db4:	f8da 0000 	ldr.w	r0, [sl]
 8023db8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023dbc:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8023dc0:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8023dc4:	440c      	add	r4, r1
 8023dc6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8023dca:	440a      	add	r2, r1
 8023dcc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8023dd0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8023dd4:	4413      	add	r3, r2
 8023dd6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8023dda:	6803      	ldr	r3, [r0, #0]
 8023ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023dde:	4798      	blx	r3
 8023de0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8023de4:	f8da 0000 	ldr.w	r0, [sl]
 8023de8:	d020      	beq.n	8023e2c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 8023dea:	2200      	movs	r2, #0
 8023dec:	f04f 0c0b 	mov.w	ip, #11
 8023df0:	6801      	ldr	r1, [r0, #0]
 8023df2:	b2ad      	uxth	r5, r5
 8023df4:	f8cd c01c 	str.w	ip, [sp, #28]
 8023df8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8023dfc:	e9cd 9208 	strd	r9, r2, [sp, #32]
 8023e00:	f8bb c000 	ldrh.w	ip, [fp]
 8023e04:	9704      	str	r7, [sp, #16]
 8023e06:	9502      	str	r5, [sp, #8]
 8023e08:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8023e0c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8023e10:	9203      	str	r2, [sp, #12]
 8023e12:	fa1f f288 	uxth.w	r2, r8
 8023e16:	9201      	str	r2, [sp, #4]
 8023e18:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8023e1c:	9200      	str	r2, [sp, #0]
 8023e1e:	4632      	mov	r2, r6
 8023e20:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8023e22:	4621      	mov	r1, r4
 8023e24:	47a8      	blx	r5
 8023e26:	b011      	add	sp, #68	; 0x44
 8023e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e2c:	6803      	ldr	r3, [r0, #0]
 8023e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023e30:	4798      	blx	r3
 8023e32:	f8bb 2000 	ldrh.w	r2, [fp]
 8023e36:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023e3a:	f04f 0e03 	mov.w	lr, #3
 8023e3e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8023e42:	4355      	muls	r5, r2
 8023e44:	fa1f fc87 	uxth.w	ip, r7
 8023e48:	fb02 1303 	mla	r3, r2, r3, r1
 8023e4c:	eba2 0208 	sub.w	r2, r2, r8
 8023e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023e54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023e58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023e5c:	4418      	add	r0, r3
 8023e5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8023e60:	1943      	adds	r3, r0, r5
 8023e62:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8023e66:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8023e6a:	eba2 0208 	sub.w	r2, r2, r8
 8023e6e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8023e72:	b2ad      	uxth	r5, r5
 8023e74:	4298      	cmp	r0, r3
 8023e76:	d24a      	bcs.n	8023f0e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 8023e78:	eb00 0908 	add.w	r9, r0, r8
 8023e7c:	4621      	mov	r1, r4
 8023e7e:	4548      	cmp	r0, r9
 8023e80:	460c      	mov	r4, r1
 8023e82:	d240      	bcs.n	8023f06 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8023e84:	f04f 0a04 	mov.w	sl, #4
 8023e88:	7824      	ldrb	r4, [r4, #0]
 8023e8a:	2fff      	cmp	r7, #255	; 0xff
 8023e8c:	f101 0101 	add.w	r1, r1, #1
 8023e90:	fb1e a404 	smlabb	r4, lr, r4, sl
 8023e94:	eb06 0a04 	add.w	sl, r6, r4
 8023e98:	f816 b004 	ldrb.w	fp, [r6, r4]
 8023e9c:	d02b      	beq.n	8023ef6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8023e9e:	7804      	ldrb	r4, [r0, #0]
 8023ea0:	fb14 f405 	smulbb	r4, r4, r5
 8023ea4:	fb0b 440c 	mla	r4, fp, ip, r4
 8023ea8:	b2a4      	uxth	r4, r4
 8023eaa:	f104 0b01 	add.w	fp, r4, #1
 8023eae:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8023eb2:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023eb6:	fb1b fb05 	smulbb	fp, fp, r5
 8023eba:	1224      	asrs	r4, r4, #8
 8023ebc:	7004      	strb	r4, [r0, #0]
 8023ebe:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8023ec2:	fb04 b40c 	mla	r4, r4, ip, fp
 8023ec6:	b2a4      	uxth	r4, r4
 8023ec8:	f104 0b01 	add.w	fp, r4, #1
 8023ecc:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8023ed0:	1224      	asrs	r4, r4, #8
 8023ed2:	7044      	strb	r4, [r0, #1]
 8023ed4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8023ed8:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023edc:	fb1a fa05 	smulbb	sl, sl, r5
 8023ee0:	fb04 a40c 	mla	r4, r4, ip, sl
 8023ee4:	b2a4      	uxth	r4, r4
 8023ee6:	f104 0a01 	add.w	sl, r4, #1
 8023eea:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8023eee:	1224      	asrs	r4, r4, #8
 8023ef0:	7084      	strb	r4, [r0, #2]
 8023ef2:	3003      	adds	r0, #3
 8023ef4:	e7c3      	b.n	8023e7e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 8023ef6:	f880 b000 	strb.w	fp, [r0]
 8023efa:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8023efe:	7044      	strb	r4, [r0, #1]
 8023f00:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8023f04:	e7f4      	b.n	8023ef0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 8023f06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023f08:	4420      	add	r0, r4
 8023f0a:	188c      	adds	r4, r1, r2
 8023f0c:	e7b2      	b.n	8023e74 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8023f0e:	4b06      	ldr	r3, [pc, #24]	; (8023f28 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8023f10:	6818      	ldr	r0, [r3, #0]
 8023f12:	6803      	ldr	r3, [r0, #0]
 8023f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023f16:	4798      	blx	r3
 8023f18:	e785      	b.n	8023e26 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 8023f1a:	bf00      	nop
 8023f1c:	08030fbb 	.word	0x08030fbb
 8023f20:	080315fe 	.word	0x080315fe
 8023f24:	080310d8 	.word	0x080310d8
 8023f28:	2400c8bc 	.word	0x2400c8bc
 8023f2c:	2400c8b6 	.word	0x2400c8b6

08023f30 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8023f30:	b570      	push	{r4, r5, r6, lr}
 8023f32:	780d      	ldrb	r5, [r1, #0]
 8023f34:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8023f38:	2d01      	cmp	r5, #1
 8023f3a:	d00d      	beq.n	8023f58 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8023f3c:	d307      	bcc.n	8023f4e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8023f3e:	2d02      	cmp	r5, #2
 8023f40:	d10f      	bne.n	8023f62 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8023f42:	4b08      	ldr	r3, [pc, #32]	; (8023f64 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8023f44:	2153      	movs	r1, #83	; 0x53
 8023f46:	4a08      	ldr	r2, [pc, #32]	; (8023f68 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8023f48:	4808      	ldr	r0, [pc, #32]	; (8023f6c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8023f4a:	f007 fc8d 	bl	802b868 <__assert_func>
 8023f4e:	9404      	str	r4, [sp, #16]
 8023f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023f54:	f7ff be1a 	b.w	8023b8c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8023f58:	9404      	str	r4, [sp, #16]
 8023f5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023f5e:	f7ff befd 	b.w	8023d5c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8023f62:	bd70      	pop	{r4, r5, r6, pc}
 8023f64:	08030f70 	.word	0x08030f70
 8023f68:	0803157c 	.word	0x0803157c
 8023f6c:	080310d8 	.word	0x080310d8

08023f70 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8023f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023f74:	4605      	mov	r5, r0
 8023f76:	b08f      	sub	sp, #60	; 0x3c
 8023f78:	460c      	mov	r4, r1
 8023f7a:	461f      	mov	r7, r3
 8023f7c:	2b00      	cmp	r3, #0
 8023f7e:	d052      	beq.n	8024026 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8023f80:	6808      	ldr	r0, [r1, #0]
 8023f82:	ab0a      	add	r3, sp, #40	; 0x28
 8023f84:	6849      	ldr	r1, [r1, #4]
 8023f86:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8024150 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8023f8a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8024154 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8023f8e:	c303      	stmia	r3!, {r0, r1}
 8023f90:	6810      	ldr	r0, [r2, #0]
 8023f92:	ab0c      	add	r3, sp, #48	; 0x30
 8023f94:	6851      	ldr	r1, [r2, #4]
 8023f96:	c303      	stmia	r3!, {r0, r1}
 8023f98:	a80a      	add	r0, sp, #40	; 0x28
 8023f9a:	f7fa fb17 	bl	801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023f9e:	4621      	mov	r1, r4
 8023fa0:	a80c      	add	r0, sp, #48	; 0x30
 8023fa2:	f7fa fb57 	bl	801e654 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023fa6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8023faa:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8023fae:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8023fb2:	f8d8 0000 	ldr.w	r0, [r8]
 8023fb6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023fba:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8023fbe:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8023fc2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8023fc6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8023fca:	440a      	add	r2, r1
 8023fcc:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8023fd0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8023fd4:	4413      	add	r3, r2
 8023fd6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8023fda:	6803      	ldr	r3, [r0, #0]
 8023fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023fde:	4798      	blx	r3
 8023fe0:	2fff      	cmp	r7, #255	; 0xff
 8023fe2:	d023      	beq.n	802402c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8023fe4:	f010 0f04 	tst.w	r0, #4
 8023fe8:	f8d8 0000 	ldr.w	r0, [r8]
 8023fec:	d021      	beq.n	8024032 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8023fee:	2100      	movs	r1, #0
 8023ff0:	f04f 0e01 	mov.w	lr, #1
 8023ff4:	f8d0 c000 	ldr.w	ip, [r0]
 8023ff8:	b2a4      	uxth	r4, r4
 8023ffa:	9106      	str	r1, [sp, #24]
 8023ffc:	b2b6      	uxth	r6, r6
 8023ffe:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8024002:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8024006:	e9cd e107 	strd	lr, r1, [sp, #28]
 802400a:	f8b9 e000 	ldrh.w	lr, [r9]
 802400e:	9703      	str	r7, [sp, #12]
 8024010:	9401      	str	r4, [sp, #4]
 8024012:	9600      	str	r6, [sp, #0]
 8024014:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8024018:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802401c:	9102      	str	r1, [sp, #8]
 802401e:	4629      	mov	r1, r5
 8024020:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8024024:	47a0      	blx	r4
 8024026:	b00f      	add	sp, #60	; 0x3c
 8024028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802402c:	f010 0f01 	tst.w	r0, #1
 8024030:	e7da      	b.n	8023fe8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8024032:	6803      	ldr	r3, [r0, #0]
 8024034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024036:	4798      	blx	r3
 8024038:	f8b9 1000 	ldrh.w	r1, [r9]
 802403c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8024040:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8024044:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8024048:	434c      	muls	r4, r1
 802404a:	2fff      	cmp	r7, #255	; 0xff
 802404c:	fb01 2303 	mla	r3, r1, r3, r2
 8024050:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024054:	eba1 0106 	sub.w	r1, r1, r6
 8024058:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802405c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024060:	4418      	add	r0, r3
 8024062:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8024066:	eba3 0606 	sub.w	r6, r3, r6
 802406a:	4404      	add	r4, r0
 802406c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8024070:	d04a      	beq.n	8024108 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8024072:	43fa      	mvns	r2, r7
 8024074:	b2bb      	uxth	r3, r7
 8024076:	b2d7      	uxtb	r7, r2
 8024078:	42a0      	cmp	r0, r4
 802407a:	d263      	bcs.n	8024144 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 802407c:	eb00 0e0c 	add.w	lr, r0, ip
 8024080:	4586      	cmp	lr, r0
 8024082:	f100 0803 	add.w	r8, r0, #3
 8024086:	d93a      	bls.n	80240fe <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8024088:	f835 2b02 	ldrh.w	r2, [r5], #2
 802408c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8024090:	00d0      	lsls	r0, r2, #3
 8024092:	fb19 f907 	smulbb	r9, r9, r7
 8024096:	b2c0      	uxtb	r0, r0
 8024098:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802409c:	fb00 9003 	mla	r0, r0, r3, r9
 80240a0:	b280      	uxth	r0, r0
 80240a2:	f100 0901 	add.w	r9, r0, #1
 80240a6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80240aa:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80240ae:	fb19 f907 	smulbb	r9, r9, r7
 80240b2:	1200      	asrs	r0, r0, #8
 80240b4:	f808 0c03 	strb.w	r0, [r8, #-3]
 80240b8:	10d0      	asrs	r0, r2, #3
 80240ba:	1212      	asrs	r2, r2, #8
 80240bc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80240c0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80240c4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80240c8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80240cc:	fb00 9003 	mla	r0, r0, r3, r9
 80240d0:	b280      	uxth	r0, r0
 80240d2:	f100 0901 	add.w	r9, r0, #1
 80240d6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80240da:	1200      	asrs	r0, r0, #8
 80240dc:	f808 0c02 	strb.w	r0, [r8, #-2]
 80240e0:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 80240e4:	fb10 f007 	smulbb	r0, r0, r7
 80240e8:	fb02 0203 	mla	r2, r2, r3, r0
 80240ec:	b292      	uxth	r2, r2
 80240ee:	1c50      	adds	r0, r2, #1
 80240f0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80240f4:	4640      	mov	r0, r8
 80240f6:	1212      	asrs	r2, r2, #8
 80240f8:	f808 2c01 	strb.w	r2, [r8, #-1]
 80240fc:	e7c0      	b.n	8024080 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80240fe:	4408      	add	r0, r1
 8024100:	4435      	add	r5, r6
 8024102:	e7b9      	b.n	8024078 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8024104:	4408      	add	r0, r1
 8024106:	4435      	add	r5, r6
 8024108:	42a0      	cmp	r0, r4
 802410a:	d21b      	bcs.n	8024144 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 802410c:	eb00 070c 	add.w	r7, r0, ip
 8024110:	42b8      	cmp	r0, r7
 8024112:	d2f7      	bcs.n	8024104 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8024114:	f835 3b02 	ldrh.w	r3, [r5], #2
 8024118:	3003      	adds	r0, #3
 802411a:	00da      	lsls	r2, r3, #3
 802411c:	b2d2      	uxtb	r2, r2
 802411e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8024122:	f800 2c03 	strb.w	r2, [r0, #-3]
 8024126:	10da      	asrs	r2, r3, #3
 8024128:	121b      	asrs	r3, r3, #8
 802412a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802412e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024132:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8024136:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802413a:	f800 2c02 	strb.w	r2, [r0, #-2]
 802413e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8024142:	e7e5      	b.n	8024110 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8024144:	4b02      	ldr	r3, [pc, #8]	; (8024150 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8024146:	6818      	ldr	r0, [r3, #0]
 8024148:	6803      	ldr	r3, [r0, #0]
 802414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802414c:	4798      	blx	r3
 802414e:	e76a      	b.n	8024026 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8024150:	2400c8bc 	.word	0x2400c8bc
 8024154:	2400c8b6 	.word	0x2400c8b6

08024158 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8024158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802415c:	b08a      	sub	sp, #40	; 0x28
 802415e:	460d      	mov	r5, r1
 8024160:	4604      	mov	r4, r0
 8024162:	461e      	mov	r6, r3
 8024164:	6808      	ldr	r0, [r1, #0]
 8024166:	ab06      	add	r3, sp, #24
 8024168:	6849      	ldr	r1, [r1, #4]
 802416a:	4f5d      	ldr	r7, [pc, #372]	; (80242e0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 802416c:	c303      	stmia	r3!, {r0, r1}
 802416e:	6810      	ldr	r0, [r2, #0]
 8024170:	ab08      	add	r3, sp, #32
 8024172:	6851      	ldr	r1, [r2, #4]
 8024174:	c303      	stmia	r3!, {r0, r1}
 8024176:	a806      	add	r0, sp, #24
 8024178:	f7fa fa28 	bl	801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802417c:	4629      	mov	r1, r5
 802417e:	a808      	add	r0, sp, #32
 8024180:	f7fa fa68 	bl	801e654 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024184:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8024188:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802418c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8024190:	6838      	ldr	r0, [r7, #0]
 8024192:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024196:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 802419a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802419e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80241a2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80241a6:	440a      	add	r2, r1
 80241a8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80241ac:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80241b0:	4413      	add	r3, r2
 80241b2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80241b6:	6803      	ldr	r3, [r0, #0]
 80241b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80241ba:	4798      	blx	r3
 80241bc:	2eff      	cmp	r6, #255	; 0xff
 80241be:	d119      	bne.n	80241f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80241c0:	f010 0f20 	tst.w	r0, #32
 80241c4:	6838      	ldr	r0, [r7, #0]
 80241c6:	d018      	beq.n	80241fa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80241c8:	b2ad      	uxth	r5, r5
 80241ca:	2700      	movs	r7, #0
 80241cc:	6801      	ldr	r1, [r0, #0]
 80241ce:	9501      	str	r5, [sp, #4]
 80241d0:	fa1f f588 	uxth.w	r5, r8
 80241d4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80241d8:	9500      	str	r5, [sp, #0]
 80241da:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80241de:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80241e2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80241e6:	9602      	str	r6, [sp, #8]
 80241e8:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80241ea:	4621      	mov	r1, r4
 80241ec:	47a8      	blx	r5
 80241ee:	b00a      	add	sp, #40	; 0x28
 80241f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80241f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80241f8:	e7e4      	b.n	80241c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 80241fa:	6803      	ldr	r3, [r0, #0]
 80241fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80241fe:	4798      	blx	r3
 8024200:	4b38      	ldr	r3, [pc, #224]	; (80242e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8024202:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8024206:	f8b3 c000 	ldrh.w	ip, [r3]
 802420a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802420e:	fb0c f505 	mul.w	r5, ip, r5
 8024212:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8024216:	fb0c 2303 	mla	r3, ip, r3, r2
 802421a:	ebac 0c08 	sub.w	ip, ip, r8
 802421e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024222:	ebae 0e08 	sub.w	lr, lr, r8
 8024226:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802422a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802422e:	4418      	add	r0, r3
 8024230:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8024234:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8024238:	4405      	add	r5, r0
 802423a:	42a8      	cmp	r0, r5
 802423c:	d24a      	bcs.n	80242d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 802423e:	eb00 0803 	add.w	r8, r0, r3
 8024242:	4540      	cmp	r0, r8
 8024244:	d243      	bcs.n	80242ce <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8024246:	78e2      	ldrb	r2, [r4, #3]
 8024248:	b15a      	cbz	r2, 8024262 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 802424a:	2aff      	cmp	r2, #255	; 0xff
 802424c:	f894 9000 	ldrb.w	r9, [r4]
 8024250:	d10a      	bne.n	8024268 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8024252:	2eff      	cmp	r6, #255	; 0xff
 8024254:	d108      	bne.n	8024268 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8024256:	f880 9000 	strb.w	r9, [r0]
 802425a:	7862      	ldrb	r2, [r4, #1]
 802425c:	7042      	strb	r2, [r0, #1]
 802425e:	78a2      	ldrb	r2, [r4, #2]
 8024260:	7082      	strb	r2, [r0, #2]
 8024262:	3003      	adds	r0, #3
 8024264:	3404      	adds	r4, #4
 8024266:	e7ec      	b.n	8024242 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8024268:	4372      	muls	r2, r6
 802426a:	1c51      	adds	r1, r2, #1
 802426c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8024270:	1209      	asrs	r1, r1, #8
 8024272:	fa1f fa81 	uxth.w	sl, r1
 8024276:	43c9      	mvns	r1, r1
 8024278:	fb19 f90a 	smulbb	r9, r9, sl
 802427c:	b2ca      	uxtb	r2, r1
 802427e:	7801      	ldrb	r1, [r0, #0]
 8024280:	fb01 9902 	mla	r9, r1, r2, r9
 8024284:	fa1f f989 	uxth.w	r9, r9
 8024288:	f109 0101 	add.w	r1, r9, #1
 802428c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8024290:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024294:	f880 9000 	strb.w	r9, [r0]
 8024298:	f890 9001 	ldrb.w	r9, [r0, #1]
 802429c:	7861      	ldrb	r1, [r4, #1]
 802429e:	fb19 f902 	smulbb	r9, r9, r2
 80242a2:	fb01 910a 	mla	r1, r1, sl, r9
 80242a6:	b289      	uxth	r1, r1
 80242a8:	f101 0901 	add.w	r9, r1, #1
 80242ac:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80242b0:	1209      	asrs	r1, r1, #8
 80242b2:	7041      	strb	r1, [r0, #1]
 80242b4:	7881      	ldrb	r1, [r0, #2]
 80242b6:	f894 9002 	ldrb.w	r9, [r4, #2]
 80242ba:	fb11 f202 	smulbb	r2, r1, r2
 80242be:	fb09 220a 	mla	r2, r9, sl, r2
 80242c2:	b292      	uxth	r2, r2
 80242c4:	1c51      	adds	r1, r2, #1
 80242c6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80242ca:	1212      	asrs	r2, r2, #8
 80242cc:	e7c8      	b.n	8024260 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80242ce:	4460      	add	r0, ip
 80242d0:	4474      	add	r4, lr
 80242d2:	e7b2      	b.n	802423a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80242d4:	6838      	ldr	r0, [r7, #0]
 80242d6:	6803      	ldr	r3, [r0, #0]
 80242d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80242da:	4798      	blx	r3
 80242dc:	e787      	b.n	80241ee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80242de:	bf00      	nop
 80242e0:	2400c8bc 	.word	0x2400c8bc
 80242e4:	2400c8b6 	.word	0x2400c8b6

080242e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80242e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80242ec:	b085      	sub	sp, #20
 80242ee:	4606      	mov	r6, r0
 80242f0:	460c      	mov	r4, r1
 80242f2:	4691      	mov	r9, r2
 80242f4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80242f8:	4698      	mov	r8, r3
 80242fa:	b31d      	cbz	r5, 8024344 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80242fc:	4608      	mov	r0, r1
 80242fe:	f7fd f9f3 	bl	80216e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8024302:	4607      	mov	r7, r0
 8024304:	4620      	mov	r0, r4
 8024306:	f7fd fa29 	bl	802175c <_ZNK8touchgfx6Bitmap9getHeightEv>
 802430a:	f8ad 000e 	strh.w	r0, [sp, #14]
 802430e:	4620      	mov	r0, r4
 8024310:	f8ad 9008 	strh.w	r9, [sp, #8]
 8024314:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024318:	f8ad 700c 	strh.w	r7, [sp, #12]
 802431c:	f7fd fb76 	bl	8021a0c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8024320:	280b      	cmp	r0, #11
 8024322:	d838      	bhi.n	8024396 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 8024324:	e8df f000 	tbb	[pc, r0]
 8024328:	37062920 	.word	0x37062920
 802432c:	37373737 	.word	0x37373737
 8024330:	11373737 	.word	0x11373737
 8024334:	4620      	mov	r0, r4
 8024336:	f7fd fadf 	bl	80218f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 802433a:	462b      	mov	r3, r5
 802433c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802433e:	a902      	add	r1, sp, #8
 8024340:	f7ff ff0a 	bl	8024158 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8024344:	b005      	add	sp, #20
 8024346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802434a:	4620      	mov	r0, r4
 802434c:	f7fd fad4 	bl	80218f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024350:	4606      	mov	r6, r0
 8024352:	4620      	mov	r0, r4
 8024354:	f7fd fb02 	bl	802195c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8024358:	9500      	str	r5, [sp, #0]
 802435a:	4601      	mov	r1, r0
 802435c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802435e:	aa02      	add	r2, sp, #8
 8024360:	4630      	mov	r0, r6
 8024362:	f7ff fde5 	bl	8023f30 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8024366:	e7ed      	b.n	8024344 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8024368:	4620      	mov	r0, r4
 802436a:	f7fd fac5 	bl	80218f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 802436e:	462b      	mov	r3, r5
 8024370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024372:	a902      	add	r1, sp, #8
 8024374:	f7ff fdfc 	bl	8023f70 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8024378:	e7e4      	b.n	8024344 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802437a:	6833      	ldr	r3, [r6, #0]
 802437c:	4620      	mov	r0, r4
 802437e:	68df      	ldr	r7, [r3, #12]
 8024380:	f7fd faba 	bl	80218f8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024384:	2300      	movs	r3, #0
 8024386:	4601      	mov	r1, r0
 8024388:	aa02      	add	r2, sp, #8
 802438a:	4630      	mov	r0, r6
 802438c:	e9cd 5300 	strd	r5, r3, [sp]
 8024390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024392:	47b8      	blx	r7
 8024394:	e7d6      	b.n	8024344 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8024396:	4b03      	ldr	r3, [pc, #12]	; (80243a4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 8024398:	2147      	movs	r1, #71	; 0x47
 802439a:	4a03      	ldr	r2, [pc, #12]	; (80243a8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 802439c:	4803      	ldr	r0, [pc, #12]	; (80243ac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 802439e:	f007 fa63 	bl	802b868 <__assert_func>
 80243a2:	bf00      	nop
 80243a4:	08031009 	.word	0x08031009
 80243a8:	08031687 	.word	0x08031687
 80243ac:	080310d8 	.word	0x080310d8

080243b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80243b0:	b570      	push	{r4, r5, r6, lr}
 80243b2:	9d04      	ldr	r5, [sp, #16]
 80243b4:	460c      	mov	r4, r1
 80243b6:	4619      	mov	r1, r3
 80243b8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80243bc:	2a0d      	cmp	r2, #13
 80243be:	d826      	bhi.n	802440e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 80243c0:	e8df f002 	tbb	[pc, r2]
 80243c4:	200e1407 	.word	0x200e1407
 80243c8:	20202020 	.word	0x20202020
 80243cc:	20202020 	.word	0x20202020
 80243d0:	2020      	.short	0x2020
 80243d2:	4b0f      	ldr	r3, [pc, #60]	; (8024410 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 80243d4:	f240 11d3 	movw	r1, #467	; 0x1d3
 80243d8:	4a0e      	ldr	r2, [pc, #56]	; (8024414 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80243da:	480f      	ldr	r0, [pc, #60]	; (8024418 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80243dc:	f007 fa44 	bl	802b868 <__assert_func>
 80243e0:	462a      	mov	r2, r5
 80243e2:	4620      	mov	r0, r4
 80243e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80243e8:	f7ff beb6 	b.w	8024158 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80243ec:	6802      	ldr	r2, [r0, #0]
 80243ee:	2600      	movs	r6, #0
 80243f0:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80243f4:	68d6      	ldr	r6, [r2, #12]
 80243f6:	462b      	mov	r3, r5
 80243f8:	460a      	mov	r2, r1
 80243fa:	4621      	mov	r1, r4
 80243fc:	46b4      	mov	ip, r6
 80243fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024402:	4760      	bx	ip
 8024404:	4b05      	ldr	r3, [pc, #20]	; (802441c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 8024406:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 802440a:	4a02      	ldr	r2, [pc, #8]	; (8024414 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 802440c:	e7e5      	b.n	80243da <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 802440e:	bd70      	pop	{r4, r5, r6, pc}
 8024410:	080312af 	.word	0x080312af
 8024414:	0803196f 	.word	0x0803196f
 8024418:	080310d8 	.word	0x080310d8
 802441c:	080312f0 	.word	0x080312f0

08024420 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8024420:	b158      	cbz	r0, 802443a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8024422:	2902      	cmp	r1, #2
 8024424:	d00f      	beq.n	8024446 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 8024426:	2903      	cmp	r1, #3
 8024428:	d010      	beq.n	802444c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 802442a:	2901      	cmp	r1, #1
 802442c:	d101      	bne.n	8024432 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 802442e:	2001      	movs	r0, #1
 8024430:	4770      	bx	lr
 8024432:	4b08      	ldr	r3, [pc, #32]	; (8024454 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8024434:	8819      	ldrh	r1, [r3, #0]
 8024436:	4248      	negs	r0, r1
 8024438:	4770      	bx	lr
 802443a:	2902      	cmp	r1, #2
 802443c:	d006      	beq.n	802444c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 802443e:	2903      	cmp	r1, #3
 8024440:	d0f7      	beq.n	8024432 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8024442:	2901      	cmp	r1, #1
 8024444:	d1f3      	bne.n	802442e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 8024446:	4b03      	ldr	r3, [pc, #12]	; (8024454 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8024448:	8818      	ldrh	r0, [r3, #0]
 802444a:	4770      	bx	lr
 802444c:	f04f 30ff 	mov.w	r0, #4294967295
 8024450:	4770      	bx	lr
 8024452:	bf00      	nop
 8024454:	2400c8b6 	.word	0x2400c8b6

08024458 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8024458:	b170      	cbz	r0, 8024478 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 802445a:	2902      	cmp	r1, #2
 802445c:	d012      	beq.n	8024484 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 802445e:	2903      	cmp	r1, #3
 8024460:	d006      	beq.n	8024470 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8024462:	2901      	cmp	r1, #1
 8024464:	d001      	beq.n	802446a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8024466:	2001      	movs	r0, #1
 8024468:	4770      	bx	lr
 802446a:	4b08      	ldr	r3, [pc, #32]	; (802448c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 802446c:	8818      	ldrh	r0, [r3, #0]
 802446e:	4770      	bx	lr
 8024470:	4b06      	ldr	r3, [pc, #24]	; (802448c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8024472:	8818      	ldrh	r0, [r3, #0]
 8024474:	4240      	negs	r0, r0
 8024476:	4770      	bx	lr
 8024478:	2902      	cmp	r1, #2
 802447a:	d0f9      	beq.n	8024470 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 802447c:	2903      	cmp	r1, #3
 802447e:	d0f2      	beq.n	8024466 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8024480:	2901      	cmp	r1, #1
 8024482:	d1f2      	bne.n	802446a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8024484:	f04f 30ff 	mov.w	r0, #4294967295
 8024488:	4770      	bx	lr
 802448a:	bf00      	nop
 802448c:	2400c8b6 	.word	0x2400c8b6

08024490 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8024490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024494:	b097      	sub	sp, #92	; 0x5c
 8024496:	910b      	str	r1, [sp, #44]	; 0x2c
 8024498:	a912      	add	r1, sp, #72	; 0x48
 802449a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 802449e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 80244a2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80244a6:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 80244aa:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 80244ae:	e881 000c 	stmia.w	r1, {r2, r3}
 80244b2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80244b6:	930a      	str	r3, [sp, #40]	; 0x28
 80244b8:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80244bc:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80244c0:	9311      	str	r3, [sp, #68]	; 0x44
 80244c2:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80244c6:	798d      	ldrb	r5, [r1, #6]
 80244c8:	930c      	str	r3, [sp, #48]	; 0x30
 80244ca:	7b4b      	ldrb	r3, [r1, #13]
 80244cc:	0158      	lsls	r0, r3, #5
 80244ce:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80244d2:	4328      	orrs	r0, r5
 80244d4:	9009      	str	r0, [sp, #36]	; 0x24
 80244d6:	f000 817d 	beq.w	80247d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80244da:	011b      	lsls	r3, r3, #4
 80244dc:	79c8      	ldrb	r0, [r1, #7]
 80244de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80244e2:	4303      	orrs	r3, r0
 80244e4:	930e      	str	r3, [sp, #56]	; 0x38
 80244e6:	f000 8175 	beq.w	80247d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80244ea:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80244ee:	b29b      	uxth	r3, r3
 80244f0:	2f00      	cmp	r7, #0
 80244f2:	f000 8117 	beq.w	8024724 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 80244f6:	1aff      	subs	r7, r7, r3
 80244f8:	b2bf      	uxth	r7, r7
 80244fa:	043b      	lsls	r3, r7, #16
 80244fc:	d502      	bpl.n	8024504 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80244fe:	1bf6      	subs	r6, r6, r7
 8024500:	2700      	movs	r7, #0
 8024502:	b236      	sxth	r6, r6
 8024504:	f9b2 1000 	ldrsh.w	r1, [r2]
 8024508:	a812      	add	r0, sp, #72	; 0x48
 802450a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 802450e:	428e      	cmp	r6, r1
 8024510:	b28b      	uxth	r3, r1
 8024512:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8024516:	bfbf      	itttt	lt
 8024518:	18ff      	addlt	r7, r7, r3
 802451a:	1bbe      	sublt	r6, r7, r6
 802451c:	b2b7      	uxthlt	r7, r6
 802451e:	460e      	movlt	r6, r1
 8024520:	8891      	ldrh	r1, [r2, #4]
 8024522:	440b      	add	r3, r1
 8024524:	4631      	mov	r1, r6
 8024526:	b21b      	sxth	r3, r3
 8024528:	9310      	str	r3, [sp, #64]	; 0x40
 802452a:	88d3      	ldrh	r3, [r2, #6]
 802452c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802452e:	449a      	add	sl, r3
 8024530:	fa0f f38a 	sxth.w	r3, sl
 8024534:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8024538:	930f      	str	r3, [sp, #60]	; 0x3c
 802453a:	4bb6      	ldr	r3, [pc, #728]	; (8024814 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 802453c:	f893 b000 	ldrb.w	fp, [r3]
 8024540:	f10b 3cff 	add.w	ip, fp, #4294967295
 8024544:	f1dc 0300 	rsbs	r3, ip, #0
 8024548:	eb43 030c 	adc.w	r3, r3, ip
 802454c:	930d      	str	r3, [sp, #52]	; 0x34
 802454e:	464b      	mov	r3, r9
 8024550:	f7f9 fec0 	bl	801e2d4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8024554:	4631      	mov	r1, r6
 8024556:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 802455a:	464b      	mov	r3, r9
 802455c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802455e:	a812      	add	r0, sp, #72	; 0x48
 8024560:	f7f9 fed0 	bl	801e304 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8024564:	a916      	add	r1, sp, #88	; 0x58
 8024566:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802456a:	a815      	add	r0, sp, #84	; 0x54
 802456c:	f7f9 ffec 	bl	801e548 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8024570:	f1b9 0f00 	cmp.w	r9, #0
 8024574:	f040 80d9 	bne.w	802472a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 8024578:	f1bb 0f01 	cmp.w	fp, #1
 802457c:	f040 80dd 	bne.w	802473a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8024580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024582:	b153      	cbz	r3, 802459a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8024584:	2508      	movs	r5, #8
 8024586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024588:	fb95 f3f8 	sdiv	r3, r5, r8
 802458c:	1e5d      	subs	r5, r3, #1
 802458e:	4415      	add	r5, r2
 8024590:	fb95 f5f3 	sdiv	r5, r5, r3
 8024594:	fb15 f503 	smulbb	r5, r5, r3
 8024598:	b2ad      	uxth	r5, r5
 802459a:	b907      	cbnz	r7, 802459e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 802459c:	b16c      	cbz	r4, 80245ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 802459e:	fb04 7305 	mla	r3, r4, r5, r7
 80245a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80245a4:	ebaa 0a04 	sub.w	sl, sl, r4
 80245a8:	fb08 f303 	mul.w	r3, r8, r3
 80245ac:	fa1f fa8a 	uxth.w	sl, sl
 80245b0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80245b4:	f003 0407 	and.w	r4, r3, #7
 80245b8:	9226      	str	r2, [sp, #152]	; 0x98
 80245ba:	4649      	mov	r1, r9
 80245bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80245be:	f7ff ff2f 	bl	8024420 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80245c2:	4649      	mov	r1, r9
 80245c4:	4683      	mov	fp, r0
 80245c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80245c8:	f7ff ff46 	bl	8024458 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80245cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80245ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80245d0:	4681      	mov	r9, r0
 80245d2:	1a9b      	subs	r3, r3, r2
 80245d4:	459a      	cmp	sl, r3
 80245d6:	bfa8      	it	ge
 80245d8:	469a      	movge	sl, r3
 80245da:	f1ba 0f00 	cmp.w	sl, #0
 80245de:	f340 80f9 	ble.w	80247d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80245e2:	1bf6      	subs	r6, r6, r7
 80245e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80245e6:	1b9e      	subs	r6, r3, r6
 80245e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245ea:	429e      	cmp	r6, r3
 80245ec:	bfd4      	ite	le
 80245ee:	ebc7 0706 	rsble	r7, r7, r6
 80245f2:	ebc7 0703 	rsbgt	r7, r7, r3
 80245f6:	2f00      	cmp	r7, #0
 80245f8:	f340 80ec 	ble.w	80247d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80245fc:	1bed      	subs	r5, r5, r7
 80245fe:	fb08 f305 	mul.w	r3, r8, r5
 8024602:	930d      	str	r3, [sp, #52]	; 0x34
 8024604:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024606:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802460a:	930e      	str	r3, [sp, #56]	; 0x38
 802460c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802460e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024612:	930f      	str	r3, [sp, #60]	; 0x3c
 8024614:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024616:	b2db      	uxtb	r3, r3
 8024618:	9310      	str	r3, [sp, #64]	; 0x40
 802461a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802461c:	2b00      	cmp	r3, #0
 802461e:	f040 80de 	bne.w	80247de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 8024622:	4b7d      	ldr	r3, [pc, #500]	; (8024818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8024624:	6818      	ldr	r0, [r3, #0]
 8024626:	6803      	ldr	r3, [r0, #0]
 8024628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802462a:	4798      	blx	r3
 802462c:	2301      	movs	r3, #1
 802462e:	4a7b      	ldr	r2, [pc, #492]	; (802481c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8024630:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8024634:	fb07 9b1b 	mls	fp, r7, fp, r9
 8024638:	fa03 f308 	lsl.w	r3, r3, r8
 802463c:	8811      	ldrh	r1, [r2, #0]
 802463e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8024642:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8024646:	3b01      	subs	r3, #1
 8024648:	fb06 bb07 	mla	fp, r6, r7, fp
 802464c:	b2db      	uxtb	r3, r3
 802464e:	930a      	str	r3, [sp, #40]	; 0x28
 8024650:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8024654:	fb01 2303 	mla	r3, r1, r3, r2
 8024658:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802465c:	18c3      	adds	r3, r0, r3
 802465e:	9309      	str	r3, [sp, #36]	; 0x24
 8024660:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024662:	781a      	ldrb	r2, [r3, #0]
 8024664:	4122      	asrs	r2, r4
 8024666:	b2d2      	uxtb	r2, r2
 8024668:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802466c:	f0c0 80d8 	bcc.w	8024820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8024670:	46be      	mov	lr, r7
 8024672:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024674:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8024678:	f0c0 80ba 	bcc.w	80247f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 802467c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802467e:	4013      	ands	r3, r2
 8024680:	d041      	beq.n	8024706 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8024682:	20ff      	movs	r0, #255	; 0xff
 8024684:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024686:	fb90 f5f5 	sdiv	r5, r0, r5
 802468a:	436b      	muls	r3, r5
 802468c:	2bfe      	cmp	r3, #254	; 0xfe
 802468e:	dd03      	ble.n	8024698 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8024690:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024692:	4285      	cmp	r5, r0
 8024694:	f000 80a5 	beq.w	80247e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8024698:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802469a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802469c:	fb15 f303 	smulbb	r3, r5, r3
 80246a0:	b29b      	uxth	r3, r3
 80246a2:	1c5d      	adds	r5, r3, #1
 80246a4:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80246a8:	780d      	ldrb	r5, [r1, #0]
 80246aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80246ae:	fa1f fc83 	uxth.w	ip, r3
 80246b2:	43db      	mvns	r3, r3
 80246b4:	fb10 f90c 	smulbb	r9, r0, ip
 80246b8:	b2db      	uxtb	r3, r3
 80246ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80246bc:	fb05 9503 	mla	r5, r5, r3, r9
 80246c0:	b2ad      	uxth	r5, r5
 80246c2:	f105 0901 	add.w	r9, r5, #1
 80246c6:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80246ca:	fb10 f90c 	smulbb	r9, r0, ip
 80246ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 80246d0:	122d      	asrs	r5, r5, #8
 80246d2:	fb10 fc0c 	smulbb	ip, r0, ip
 80246d6:	700d      	strb	r5, [r1, #0]
 80246d8:	784d      	ldrb	r5, [r1, #1]
 80246da:	fb05 9503 	mla	r5, r5, r3, r9
 80246de:	b2ad      	uxth	r5, r5
 80246e0:	f105 0901 	add.w	r9, r5, #1
 80246e4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80246e8:	122d      	asrs	r5, r5, #8
 80246ea:	704d      	strb	r5, [r1, #1]
 80246ec:	788d      	ldrb	r5, [r1, #2]
 80246ee:	fb05 cc03 	mla	ip, r5, r3, ip
 80246f2:	fa1f fc8c 	uxth.w	ip, ip
 80246f6:	f10c 0301 	add.w	r3, ip, #1
 80246fa:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80246fe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024702:	f881 c002 	strb.w	ip, [r1, #2]
 8024706:	4444      	add	r4, r8
 8024708:	4431      	add	r1, r6
 802470a:	b2a4      	uxth	r4, r4
 802470c:	2c07      	cmp	r4, #7
 802470e:	bf89      	itett	hi
 8024710:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8024712:	fa42 f208 	asrls.w	r2, r2, r8
 8024716:	2400      	movhi	r4, #0
 8024718:	785a      	ldrbhi	r2, [r3, #1]
 802471a:	bf8a      	itet	hi
 802471c:	3301      	addhi	r3, #1
 802471e:	b2d2      	uxtbls	r2, r2
 8024720:	9326      	strhi	r3, [sp, #152]	; 0x98
 8024722:	e7a7      	b.n	8024674 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 8024724:	441e      	add	r6, r3
 8024726:	b236      	sxth	r6, r6
 8024728:	e6ec      	b.n	8024504 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 802472a:	f1b9 0f01 	cmp.w	r9, #1
 802472e:	f47f af27 	bne.w	8024580 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024732:	f1bb 0f01 	cmp.w	fp, #1
 8024736:	f47f af23 	bne.w	8024580 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802473a:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8024818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 802473e:	f8db 0000 	ldr.w	r0, [fp]
 8024742:	6803      	ldr	r3, [r0, #0]
 8024744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024746:	4798      	blx	r3
 8024748:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 802474c:	465a      	mov	r2, fp
 802474e:	d006      	beq.n	802475e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8024750:	f1b8 0f04 	cmp.w	r8, #4
 8024754:	d141      	bne.n	80247da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 8024756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024758:	3300      	adds	r3, #0
 802475a:	bf18      	it	ne
 802475c:	2301      	movne	r3, #1
 802475e:	0580      	lsls	r0, r0, #22
 8024760:	d567      	bpl.n	8024832 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8024762:	f1b8 0f08 	cmp.w	r8, #8
 8024766:	d164      	bne.n	8024832 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 8024768:	2b00      	cmp	r3, #0
 802476a:	bf0c      	ite	eq
 802476c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8024770:	f44f 7180 	movne.w	r1, #256	; 0x100
 8024774:	2f00      	cmp	r7, #0
 8024776:	f47f af03 	bne.w	8024580 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802477a:	2c00      	cmp	r4, #0
 802477c:	f47f af00 	bne.w	8024580 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024782:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024784:	18f3      	adds	r3, r6, r3
 8024786:	4283      	cmp	r3, r0
 8024788:	f73f aefa 	bgt.w	8024580 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802478c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802478e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024790:	4403      	add	r3, r0
 8024792:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024794:	4283      	cmp	r3, r0
 8024796:	f73f aef3 	bgt.w	8024580 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 802479a:	f1b8 0f08 	cmp.w	r8, #8
 802479e:	6810      	ldr	r0, [r2, #0]
 80247a0:	f04f 0600 	mov.w	r6, #0
 80247a4:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80247a8:	bf18      	it	ne
 80247aa:	3501      	addne	r5, #1
 80247ac:	6804      	ldr	r4, [r0, #0]
 80247ae:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80247b2:	bf18      	it	ne
 80247b4:	f025 0501 	bicne.w	r5, r5, #1
 80247b8:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80247bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80247be:	bf18      	it	ne
 80247c0:	b2ad      	uxthne	r5, r5
 80247c2:	9104      	str	r1, [sp, #16]
 80247c4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80247c6:	e9cd 5a00 	strd	r5, sl, [sp]
 80247ca:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80247ce:	9926      	ldr	r1, [sp, #152]	; 0x98
 80247d0:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80247d2:	47a0      	blx	r4
 80247d4:	b017      	add	sp, #92	; 0x5c
 80247d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247da:	2300      	movs	r3, #0
 80247dc:	e7bf      	b.n	802475e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80247de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80247e0:	e724      	b.n	802462c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 80247e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80247e4:	700b      	strb	r3, [r1, #0]
 80247e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80247e8:	704b      	strb	r3, [r1, #1]
 80247ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80247ec:	708b      	strb	r3, [r1, #2]
 80247ee:	e78a      	b.n	8024706 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 80247f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80247f2:	b153      	cbz	r3, 802480a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 80247f4:	441c      	add	r4, r3
 80247f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80247f8:	b2a4      	uxth	r4, r4
 80247fa:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80247fe:	f004 0407 	and.w	r4, r4, #7
 8024802:	781a      	ldrb	r2, [r3, #0]
 8024804:	9326      	str	r3, [sp, #152]	; 0x98
 8024806:	4122      	asrs	r2, r4
 8024808:	b2d2      	uxtb	r2, r2
 802480a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802480c:	445b      	add	r3, fp
 802480e:	9309      	str	r3, [sp, #36]	; 0x24
 8024810:	e72a      	b.n	8024668 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 8024812:	bf00      	nop
 8024814:	2400c8b4 	.word	0x2400c8b4
 8024818:	2400c8bc 	.word	0x2400c8bc
 802481c:	2400c8b6 	.word	0x2400c8b6
 8024820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024822:	2b00      	cmp	r3, #0
 8024824:	d1d6      	bne.n	80247d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8024826:	4b06      	ldr	r3, [pc, #24]	; (8024840 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8024828:	6818      	ldr	r0, [r3, #0]
 802482a:	6803      	ldr	r3, [r0, #0]
 802482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802482e:	4798      	blx	r3
 8024830:	e7d0      	b.n	80247d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8024832:	2b00      	cmp	r3, #0
 8024834:	f43f aea4 	beq.w	8024580 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8024838:	f44f 7180 	mov.w	r1, #256	; 0x100
 802483c:	e79a      	b.n	8024774 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 802483e:	bf00      	nop
 8024840:	2400c8bc 	.word	0x2400c8bc

08024844 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8024844:	b538      	push	{r3, r4, r5, lr}
 8024846:	4c15      	ldr	r4, [pc, #84]	; (802489c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8024848:	4605      	mov	r5, r0
 802484a:	7823      	ldrb	r3, [r4, #0]
 802484c:	f3bf 8f5b 	dmb	ish
 8024850:	07da      	lsls	r2, r3, #31
 8024852:	d40b      	bmi.n	802486c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8024854:	4620      	mov	r0, r4
 8024856:	f006 fe34 	bl	802b4c2 <__cxa_guard_acquire>
 802485a:	b138      	cbz	r0, 802486c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802485c:	4620      	mov	r0, r4
 802485e:	f006 fe3c 	bl	802b4da <__cxa_guard_release>
 8024862:	4a0f      	ldr	r2, [pc, #60]	; (80248a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024864:	490f      	ldr	r1, [pc, #60]	; (80248a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8024866:	4810      	ldr	r0, [pc, #64]	; (80248a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8024868:	f006 fe24 	bl	802b4b4 <__aeabi_atexit>
 802486c:	4c0f      	ldr	r4, [pc, #60]	; (80248ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802486e:	7823      	ldrb	r3, [r4, #0]
 8024870:	f3bf 8f5b 	dmb	ish
 8024874:	07db      	lsls	r3, r3, #31
 8024876:	d40b      	bmi.n	8024890 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024878:	4620      	mov	r0, r4
 802487a:	f006 fe22 	bl	802b4c2 <__cxa_guard_acquire>
 802487e:	b138      	cbz	r0, 8024890 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8024880:	4620      	mov	r0, r4
 8024882:	f006 fe2a 	bl	802b4da <__cxa_guard_release>
 8024886:	4a06      	ldr	r2, [pc, #24]	; (80248a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024888:	4909      	ldr	r1, [pc, #36]	; (80248b0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802488a:	480a      	ldr	r0, [pc, #40]	; (80248b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802488c:	f006 fe12 	bl	802b4b4 <__aeabi_atexit>
 8024890:	4b05      	ldr	r3, [pc, #20]	; (80248a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8024892:	612b      	str	r3, [r5, #16]
 8024894:	4b07      	ldr	r3, [pc, #28]	; (80248b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024896:	616b      	str	r3, [r5, #20]
 8024898:	bd38      	pop	{r3, r4, r5, pc}
 802489a:	bf00      	nop
 802489c:	2400c9a8 	.word	0x2400c9a8
 80248a0:	24000000 	.word	0x24000000
 80248a4:	080232cf 	.word	0x080232cf
 80248a8:	24000094 	.word	0x24000094
 80248ac:	2400c9ac 	.word	0x2400c9ac
 80248b0:	080232cd 	.word	0x080232cd
 80248b4:	24000098 	.word	0x24000098

080248b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80248b8:	b538      	push	{r3, r4, r5, lr}
 80248ba:	4c15      	ldr	r4, [pc, #84]	; (8024910 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80248bc:	4605      	mov	r5, r0
 80248be:	7823      	ldrb	r3, [r4, #0]
 80248c0:	f3bf 8f5b 	dmb	ish
 80248c4:	07da      	lsls	r2, r3, #31
 80248c6:	d40b      	bmi.n	80248e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80248c8:	4620      	mov	r0, r4
 80248ca:	f006 fdfa 	bl	802b4c2 <__cxa_guard_acquire>
 80248ce:	b138      	cbz	r0, 80248e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80248d0:	4620      	mov	r0, r4
 80248d2:	f006 fe02 	bl	802b4da <__cxa_guard_release>
 80248d6:	4a0f      	ldr	r2, [pc, #60]	; (8024914 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80248d8:	490f      	ldr	r1, [pc, #60]	; (8024918 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80248da:	4810      	ldr	r0, [pc, #64]	; (802491c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80248dc:	f006 fdea 	bl	802b4b4 <__aeabi_atexit>
 80248e0:	4c0f      	ldr	r4, [pc, #60]	; (8024920 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80248e2:	7823      	ldrb	r3, [r4, #0]
 80248e4:	f3bf 8f5b 	dmb	ish
 80248e8:	07db      	lsls	r3, r3, #31
 80248ea:	d40b      	bmi.n	8024904 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80248ec:	4620      	mov	r0, r4
 80248ee:	f006 fde8 	bl	802b4c2 <__cxa_guard_acquire>
 80248f2:	b138      	cbz	r0, 8024904 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80248f4:	4620      	mov	r0, r4
 80248f6:	f006 fdf0 	bl	802b4da <__cxa_guard_release>
 80248fa:	4a06      	ldr	r2, [pc, #24]	; (8024914 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80248fc:	4909      	ldr	r1, [pc, #36]	; (8024924 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80248fe:	480a      	ldr	r0, [pc, #40]	; (8024928 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024900:	f006 fdd8 	bl	802b4b4 <__aeabi_atexit>
 8024904:	4b05      	ldr	r3, [pc, #20]	; (802491c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024906:	60ab      	str	r3, [r5, #8]
 8024908:	4b07      	ldr	r3, [pc, #28]	; (8024928 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802490a:	60eb      	str	r3, [r5, #12]
 802490c:	bd38      	pop	{r3, r4, r5, pc}
 802490e:	bf00      	nop
 8024910:	2400c988 	.word	0x2400c988
 8024914:	24000000 	.word	0x24000000
 8024918:	080232d3 	.word	0x080232d3
 802491c:	24000074 	.word	0x24000074
 8024920:	2400c98c 	.word	0x2400c98c
 8024924:	080232d1 	.word	0x080232d1
 8024928:	24000078 	.word	0x24000078

0802492c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 802492c:	b510      	push	{r4, lr}
 802492e:	4604      	mov	r4, r0
 8024930:	f7ff ff88 	bl	8024844 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8024934:	4620      	mov	r0, r4
 8024936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802493a:	f7ff bfbd 	b.w	80248b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08024940 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8024940:	b538      	push	{r3, r4, r5, lr}
 8024942:	4c15      	ldr	r4, [pc, #84]	; (8024998 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8024944:	4605      	mov	r5, r0
 8024946:	7823      	ldrb	r3, [r4, #0]
 8024948:	f3bf 8f5b 	dmb	ish
 802494c:	07da      	lsls	r2, r3, #31
 802494e:	d40b      	bmi.n	8024968 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024950:	4620      	mov	r0, r4
 8024952:	f006 fdb6 	bl	802b4c2 <__cxa_guard_acquire>
 8024956:	b138      	cbz	r0, 8024968 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024958:	4620      	mov	r0, r4
 802495a:	f006 fdbe 	bl	802b4da <__cxa_guard_release>
 802495e:	4a0f      	ldr	r2, [pc, #60]	; (802499c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024960:	490f      	ldr	r1, [pc, #60]	; (80249a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8024962:	4810      	ldr	r0, [pc, #64]	; (80249a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8024964:	f006 fda6 	bl	802b4b4 <__aeabi_atexit>
 8024968:	4c0f      	ldr	r4, [pc, #60]	; (80249a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802496a:	7823      	ldrb	r3, [r4, #0]
 802496c:	f3bf 8f5b 	dmb	ish
 8024970:	07db      	lsls	r3, r3, #31
 8024972:	d40b      	bmi.n	802498c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8024974:	4620      	mov	r0, r4
 8024976:	f006 fda4 	bl	802b4c2 <__cxa_guard_acquire>
 802497a:	b138      	cbz	r0, 802498c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802497c:	4620      	mov	r0, r4
 802497e:	f006 fdac 	bl	802b4da <__cxa_guard_release>
 8024982:	4a06      	ldr	r2, [pc, #24]	; (802499c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024984:	4909      	ldr	r1, [pc, #36]	; (80249ac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8024986:	480a      	ldr	r0, [pc, #40]	; (80249b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8024988:	f006 fd94 	bl	802b4b4 <__aeabi_atexit>
 802498c:	4b05      	ldr	r3, [pc, #20]	; (80249a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802498e:	622b      	str	r3, [r5, #32]
 8024990:	4b07      	ldr	r3, [pc, #28]	; (80249b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8024992:	626b      	str	r3, [r5, #36]	; 0x24
 8024994:	bd38      	pop	{r3, r4, r5, pc}
 8024996:	bf00      	nop
 8024998:	2400c9b0 	.word	0x2400c9b0
 802499c:	24000000 	.word	0x24000000
 80249a0:	080232c7 	.word	0x080232c7
 80249a4:	2400009c 	.word	0x2400009c
 80249a8:	2400c9b4 	.word	0x2400c9b4
 80249ac:	080232c5 	.word	0x080232c5
 80249b0:	240000a0 	.word	0x240000a0

080249b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80249b4:	b538      	push	{r3, r4, r5, lr}
 80249b6:	4c15      	ldr	r4, [pc, #84]	; (8024a0c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80249b8:	4605      	mov	r5, r0
 80249ba:	7823      	ldrb	r3, [r4, #0]
 80249bc:	f3bf 8f5b 	dmb	ish
 80249c0:	07da      	lsls	r2, r3, #31
 80249c2:	d40b      	bmi.n	80249dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80249c4:	4620      	mov	r0, r4
 80249c6:	f006 fd7c 	bl	802b4c2 <__cxa_guard_acquire>
 80249ca:	b138      	cbz	r0, 80249dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80249cc:	4620      	mov	r0, r4
 80249ce:	f006 fd84 	bl	802b4da <__cxa_guard_release>
 80249d2:	4a0f      	ldr	r2, [pc, #60]	; (8024a10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80249d4:	490f      	ldr	r1, [pc, #60]	; (8024a14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80249d6:	4810      	ldr	r0, [pc, #64]	; (8024a18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80249d8:	f006 fd6c 	bl	802b4b4 <__aeabi_atexit>
 80249dc:	4c0f      	ldr	r4, [pc, #60]	; (8024a1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80249de:	7823      	ldrb	r3, [r4, #0]
 80249e0:	f3bf 8f5b 	dmb	ish
 80249e4:	07db      	lsls	r3, r3, #31
 80249e6:	d40b      	bmi.n	8024a00 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80249e8:	4620      	mov	r0, r4
 80249ea:	f006 fd6a 	bl	802b4c2 <__cxa_guard_acquire>
 80249ee:	b138      	cbz	r0, 8024a00 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80249f0:	4620      	mov	r0, r4
 80249f2:	f006 fd72 	bl	802b4da <__cxa_guard_release>
 80249f6:	4a06      	ldr	r2, [pc, #24]	; (8024a10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80249f8:	4909      	ldr	r1, [pc, #36]	; (8024a20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80249fa:	480a      	ldr	r0, [pc, #40]	; (8024a24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80249fc:	f006 fd5a 	bl	802b4b4 <__aeabi_atexit>
 8024a00:	4b05      	ldr	r3, [pc, #20]	; (8024a18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8024a02:	61ab      	str	r3, [r5, #24]
 8024a04:	4b07      	ldr	r3, [pc, #28]	; (8024a24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8024a06:	61eb      	str	r3, [r5, #28]
 8024a08:	bd38      	pop	{r3, r4, r5, pc}
 8024a0a:	bf00      	nop
 8024a0c:	2400c990 	.word	0x2400c990
 8024a10:	24000000 	.word	0x24000000
 8024a14:	080232cb 	.word	0x080232cb
 8024a18:	2400007c 	.word	0x2400007c
 8024a1c:	2400c994 	.word	0x2400c994
 8024a20:	080232c9 	.word	0x080232c9
 8024a24:	24000080 	.word	0x24000080

08024a28 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8024a28:	b510      	push	{r4, lr}
 8024a2a:	4604      	mov	r4, r0
 8024a2c:	f7ff ff88 	bl	8024940 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8024a30:	4620      	mov	r0, r4
 8024a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024a36:	f7ff bfbd 	b.w	80249b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08024a3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8024a3c:	b538      	push	{r3, r4, r5, lr}
 8024a3e:	4c15      	ldr	r4, [pc, #84]	; (8024a94 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8024a40:	4605      	mov	r5, r0
 8024a42:	7823      	ldrb	r3, [r4, #0]
 8024a44:	f3bf 8f5b 	dmb	ish
 8024a48:	07da      	lsls	r2, r3, #31
 8024a4a:	d40b      	bmi.n	8024a64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8024a4c:	4620      	mov	r0, r4
 8024a4e:	f006 fd38 	bl	802b4c2 <__cxa_guard_acquire>
 8024a52:	b138      	cbz	r0, 8024a64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8024a54:	4620      	mov	r0, r4
 8024a56:	f006 fd40 	bl	802b4da <__cxa_guard_release>
 8024a5a:	4a0f      	ldr	r2, [pc, #60]	; (8024a98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8024a5c:	490f      	ldr	r1, [pc, #60]	; (8024a9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8024a5e:	4810      	ldr	r0, [pc, #64]	; (8024aa0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8024a60:	f006 fd28 	bl	802b4b4 <__aeabi_atexit>
 8024a64:	4c0f      	ldr	r4, [pc, #60]	; (8024aa4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8024a66:	7823      	ldrb	r3, [r4, #0]
 8024a68:	f3bf 8f5b 	dmb	ish
 8024a6c:	07db      	lsls	r3, r3, #31
 8024a6e:	d40b      	bmi.n	8024a88 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8024a70:	4620      	mov	r0, r4
 8024a72:	f006 fd26 	bl	802b4c2 <__cxa_guard_acquire>
 8024a76:	b138      	cbz	r0, 8024a88 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8024a78:	4620      	mov	r0, r4
 8024a7a:	f006 fd2e 	bl	802b4da <__cxa_guard_release>
 8024a7e:	4a06      	ldr	r2, [pc, #24]	; (8024a98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8024a80:	4909      	ldr	r1, [pc, #36]	; (8024aa8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8024a82:	480a      	ldr	r0, [pc, #40]	; (8024aac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8024a84:	f006 fd16 	bl	802b4b4 <__aeabi_atexit>
 8024a88:	4b05      	ldr	r3, [pc, #20]	; (8024aa0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8024a8a:	632b      	str	r3, [r5, #48]	; 0x30
 8024a8c:	4b07      	ldr	r3, [pc, #28]	; (8024aac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8024a8e:	636b      	str	r3, [r5, #52]	; 0x34
 8024a90:	bd38      	pop	{r3, r4, r5, pc}
 8024a92:	bf00      	nop
 8024a94:	2400c998 	.word	0x2400c998
 8024a98:	24000000 	.word	0x24000000
 8024a9c:	080232bf 	.word	0x080232bf
 8024aa0:	24000084 	.word	0x24000084
 8024aa4:	2400c99c 	.word	0x2400c99c
 8024aa8:	080232bd 	.word	0x080232bd
 8024aac:	24000088 	.word	0x24000088

08024ab0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8024ab0:	b538      	push	{r3, r4, r5, lr}
 8024ab2:	4c15      	ldr	r4, [pc, #84]	; (8024b08 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8024ab4:	4605      	mov	r5, r0
 8024ab6:	7823      	ldrb	r3, [r4, #0]
 8024ab8:	f3bf 8f5b 	dmb	ish
 8024abc:	07da      	lsls	r2, r3, #31
 8024abe:	d40b      	bmi.n	8024ad8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8024ac0:	4620      	mov	r0, r4
 8024ac2:	f006 fcfe 	bl	802b4c2 <__cxa_guard_acquire>
 8024ac6:	b138      	cbz	r0, 8024ad8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8024ac8:	4620      	mov	r0, r4
 8024aca:	f006 fd06 	bl	802b4da <__cxa_guard_release>
 8024ace:	4a0f      	ldr	r2, [pc, #60]	; (8024b0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8024ad0:	490f      	ldr	r1, [pc, #60]	; (8024b10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8024ad2:	4810      	ldr	r0, [pc, #64]	; (8024b14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8024ad4:	f006 fcee 	bl	802b4b4 <__aeabi_atexit>
 8024ad8:	4c0f      	ldr	r4, [pc, #60]	; (8024b18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8024ada:	7823      	ldrb	r3, [r4, #0]
 8024adc:	f3bf 8f5b 	dmb	ish
 8024ae0:	07db      	lsls	r3, r3, #31
 8024ae2:	d40b      	bmi.n	8024afc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8024ae4:	4620      	mov	r0, r4
 8024ae6:	f006 fcec 	bl	802b4c2 <__cxa_guard_acquire>
 8024aea:	b138      	cbz	r0, 8024afc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8024aec:	4620      	mov	r0, r4
 8024aee:	f006 fcf4 	bl	802b4da <__cxa_guard_release>
 8024af2:	4a06      	ldr	r2, [pc, #24]	; (8024b0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8024af4:	4909      	ldr	r1, [pc, #36]	; (8024b1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8024af6:	480a      	ldr	r0, [pc, #40]	; (8024b20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8024af8:	f006 fcdc 	bl	802b4b4 <__aeabi_atexit>
 8024afc:	4b05      	ldr	r3, [pc, #20]	; (8024b14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8024afe:	62ab      	str	r3, [r5, #40]	; 0x28
 8024b00:	4b07      	ldr	r3, [pc, #28]	; (8024b20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8024b02:	62eb      	str	r3, [r5, #44]	; 0x2c
 8024b04:	bd38      	pop	{r3, r4, r5, pc}
 8024b06:	bf00      	nop
 8024b08:	2400c970 	.word	0x2400c970
 8024b0c:	24000000 	.word	0x24000000
 8024b10:	080232c3 	.word	0x080232c3
 8024b14:	2400005c 	.word	0x2400005c
 8024b18:	2400c974 	.word	0x2400c974
 8024b1c:	080232c1 	.word	0x080232c1
 8024b20:	24000060 	.word	0x24000060

08024b24 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8024b24:	b510      	push	{r4, lr}
 8024b26:	4604      	mov	r4, r0
 8024b28:	f7ff ff88 	bl	8024a3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8024b2c:	4620      	mov	r0, r4
 8024b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024b32:	f7ff bfbd 	b.w	8024ab0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08024b38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8024b38:	b538      	push	{r3, r4, r5, lr}
 8024b3a:	4c15      	ldr	r4, [pc, #84]	; (8024b90 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8024b3c:	4605      	mov	r5, r0
 8024b3e:	7823      	ldrb	r3, [r4, #0]
 8024b40:	f3bf 8f5b 	dmb	ish
 8024b44:	07da      	lsls	r2, r3, #31
 8024b46:	d40b      	bmi.n	8024b60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024b48:	4620      	mov	r0, r4
 8024b4a:	f006 fcba 	bl	802b4c2 <__cxa_guard_acquire>
 8024b4e:	b138      	cbz	r0, 8024b60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024b50:	4620      	mov	r0, r4
 8024b52:	f006 fcc2 	bl	802b4da <__cxa_guard_release>
 8024b56:	4a0f      	ldr	r2, [pc, #60]	; (8024b94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024b58:	490f      	ldr	r1, [pc, #60]	; (8024b98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8024b5a:	4810      	ldr	r0, [pc, #64]	; (8024b9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024b5c:	f006 fcaa 	bl	802b4b4 <__aeabi_atexit>
 8024b60:	4c0f      	ldr	r4, [pc, #60]	; (8024ba0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8024b62:	7823      	ldrb	r3, [r4, #0]
 8024b64:	f3bf 8f5b 	dmb	ish
 8024b68:	07db      	lsls	r3, r3, #31
 8024b6a:	d40b      	bmi.n	8024b84 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024b6c:	4620      	mov	r0, r4
 8024b6e:	f006 fca8 	bl	802b4c2 <__cxa_guard_acquire>
 8024b72:	b138      	cbz	r0, 8024b84 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024b74:	4620      	mov	r0, r4
 8024b76:	f006 fcb0 	bl	802b4da <__cxa_guard_release>
 8024b7a:	4a06      	ldr	r2, [pc, #24]	; (8024b94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024b7c:	4909      	ldr	r1, [pc, #36]	; (8024ba4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8024b7e:	480a      	ldr	r0, [pc, #40]	; (8024ba8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024b80:	f006 fc98 	bl	802b4b4 <__aeabi_atexit>
 8024b84:	4b05      	ldr	r3, [pc, #20]	; (8024b9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024b86:	642b      	str	r3, [r5, #64]	; 0x40
 8024b88:	4b07      	ldr	r3, [pc, #28]	; (8024ba8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024b8a:	646b      	str	r3, [r5, #68]	; 0x44
 8024b8c:	bd38      	pop	{r3, r4, r5, pc}
 8024b8e:	bf00      	nop
 8024b90:	2400c9a0 	.word	0x2400c9a0
 8024b94:	24000000 	.word	0x24000000
 8024b98:	080232b7 	.word	0x080232b7
 8024b9c:	2400008c 	.word	0x2400008c
 8024ba0:	2400c9a4 	.word	0x2400c9a4
 8024ba4:	080232b5 	.word	0x080232b5
 8024ba8:	24000090 	.word	0x24000090

08024bac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8024bac:	b538      	push	{r3, r4, r5, lr}
 8024bae:	4c15      	ldr	r4, [pc, #84]	; (8024c04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8024bb0:	4605      	mov	r5, r0
 8024bb2:	7823      	ldrb	r3, [r4, #0]
 8024bb4:	f3bf 8f5b 	dmb	ish
 8024bb8:	07da      	lsls	r2, r3, #31
 8024bba:	d40b      	bmi.n	8024bd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024bbc:	4620      	mov	r0, r4
 8024bbe:	f006 fc80 	bl	802b4c2 <__cxa_guard_acquire>
 8024bc2:	b138      	cbz	r0, 8024bd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024bc4:	4620      	mov	r0, r4
 8024bc6:	f006 fc88 	bl	802b4da <__cxa_guard_release>
 8024bca:	4a0f      	ldr	r2, [pc, #60]	; (8024c08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024bcc:	490f      	ldr	r1, [pc, #60]	; (8024c0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8024bce:	4810      	ldr	r0, [pc, #64]	; (8024c10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024bd0:	f006 fc70 	bl	802b4b4 <__aeabi_atexit>
 8024bd4:	4c0f      	ldr	r4, [pc, #60]	; (8024c14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8024bd6:	7823      	ldrb	r3, [r4, #0]
 8024bd8:	f3bf 8f5b 	dmb	ish
 8024bdc:	07db      	lsls	r3, r3, #31
 8024bde:	d40b      	bmi.n	8024bf8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024be0:	4620      	mov	r0, r4
 8024be2:	f006 fc6e 	bl	802b4c2 <__cxa_guard_acquire>
 8024be6:	b138      	cbz	r0, 8024bf8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024be8:	4620      	mov	r0, r4
 8024bea:	f006 fc76 	bl	802b4da <__cxa_guard_release>
 8024bee:	4a06      	ldr	r2, [pc, #24]	; (8024c08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024bf0:	4909      	ldr	r1, [pc, #36]	; (8024c18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8024bf2:	480a      	ldr	r0, [pc, #40]	; (8024c1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024bf4:	f006 fc5e 	bl	802b4b4 <__aeabi_atexit>
 8024bf8:	4b05      	ldr	r3, [pc, #20]	; (8024c10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024bfa:	63ab      	str	r3, [r5, #56]	; 0x38
 8024bfc:	4b07      	ldr	r3, [pc, #28]	; (8024c1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024bfe:	63eb      	str	r3, [r5, #60]	; 0x3c
 8024c00:	bd38      	pop	{r3, r4, r5, pc}
 8024c02:	bf00      	nop
 8024c04:	2400c980 	.word	0x2400c980
 8024c08:	24000000 	.word	0x24000000
 8024c0c:	080232bb 	.word	0x080232bb
 8024c10:	2400006c 	.word	0x2400006c
 8024c14:	2400c984 	.word	0x2400c984
 8024c18:	080232b9 	.word	0x080232b9
 8024c1c:	24000070 	.word	0x24000070

08024c20 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8024c20:	b510      	push	{r4, lr}
 8024c22:	4604      	mov	r4, r0
 8024c24:	f7ff ff88 	bl	8024b38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8024c28:	4620      	mov	r0, r4
 8024c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024c2e:	f7ff bfbd 	b.w	8024bac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08024c34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8024c34:	b538      	push	{r3, r4, r5, lr}
 8024c36:	4c15      	ldr	r4, [pc, #84]	; (8024c8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8024c38:	4605      	mov	r5, r0
 8024c3a:	7823      	ldrb	r3, [r4, #0]
 8024c3c:	f3bf 8f5b 	dmb	ish
 8024c40:	07da      	lsls	r2, r3, #31
 8024c42:	d40b      	bmi.n	8024c5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024c44:	4620      	mov	r0, r4
 8024c46:	f006 fc3c 	bl	802b4c2 <__cxa_guard_acquire>
 8024c4a:	b138      	cbz	r0, 8024c5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024c4c:	4620      	mov	r0, r4
 8024c4e:	f006 fc44 	bl	802b4da <__cxa_guard_release>
 8024c52:	4a0f      	ldr	r2, [pc, #60]	; (8024c90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024c54:	490f      	ldr	r1, [pc, #60]	; (8024c94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8024c56:	4810      	ldr	r0, [pc, #64]	; (8024c98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024c58:	f006 fc2c 	bl	802b4b4 <__aeabi_atexit>
 8024c5c:	4c0f      	ldr	r4, [pc, #60]	; (8024c9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8024c5e:	7823      	ldrb	r3, [r4, #0]
 8024c60:	f3bf 8f5b 	dmb	ish
 8024c64:	07db      	lsls	r3, r3, #31
 8024c66:	d40b      	bmi.n	8024c80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024c68:	4620      	mov	r0, r4
 8024c6a:	f006 fc2a 	bl	802b4c2 <__cxa_guard_acquire>
 8024c6e:	b138      	cbz	r0, 8024c80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024c70:	4620      	mov	r0, r4
 8024c72:	f006 fc32 	bl	802b4da <__cxa_guard_release>
 8024c76:	4a06      	ldr	r2, [pc, #24]	; (8024c90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024c78:	4909      	ldr	r1, [pc, #36]	; (8024ca0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8024c7a:	480a      	ldr	r0, [pc, #40]	; (8024ca4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024c7c:	f006 fc1a 	bl	802b4b4 <__aeabi_atexit>
 8024c80:	4b05      	ldr	r3, [pc, #20]	; (8024c98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024c82:	652b      	str	r3, [r5, #80]	; 0x50
 8024c84:	4b07      	ldr	r3, [pc, #28]	; (8024ca4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024c86:	656b      	str	r3, [r5, #84]	; 0x54
 8024c88:	bd38      	pop	{r3, r4, r5, pc}
 8024c8a:	bf00      	nop
 8024c8c:	2400c978 	.word	0x2400c978
 8024c90:	24000000 	.word	0x24000000
 8024c94:	080232af 	.word	0x080232af
 8024c98:	24000064 	.word	0x24000064
 8024c9c:	2400c97c 	.word	0x2400c97c
 8024ca0:	080232ad 	.word	0x080232ad
 8024ca4:	24000068 	.word	0x24000068

08024ca8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8024ca8:	b538      	push	{r3, r4, r5, lr}
 8024caa:	4c15      	ldr	r4, [pc, #84]	; (8024d00 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024cac:	4605      	mov	r5, r0
 8024cae:	7823      	ldrb	r3, [r4, #0]
 8024cb0:	f3bf 8f5b 	dmb	ish
 8024cb4:	07da      	lsls	r2, r3, #31
 8024cb6:	d40b      	bmi.n	8024cd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024cb8:	4620      	mov	r0, r4
 8024cba:	f006 fc02 	bl	802b4c2 <__cxa_guard_acquire>
 8024cbe:	b138      	cbz	r0, 8024cd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024cc0:	4620      	mov	r0, r4
 8024cc2:	f006 fc0a 	bl	802b4da <__cxa_guard_release>
 8024cc6:	4a0f      	ldr	r2, [pc, #60]	; (8024d04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024cc8:	490f      	ldr	r1, [pc, #60]	; (8024d08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8024cca:	4810      	ldr	r0, [pc, #64]	; (8024d0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024ccc:	f006 fbf2 	bl	802b4b4 <__aeabi_atexit>
 8024cd0:	4c0f      	ldr	r4, [pc, #60]	; (8024d10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8024cd2:	7823      	ldrb	r3, [r4, #0]
 8024cd4:	f3bf 8f5b 	dmb	ish
 8024cd8:	07db      	lsls	r3, r3, #31
 8024cda:	d40b      	bmi.n	8024cf4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024cdc:	4620      	mov	r0, r4
 8024cde:	f006 fbf0 	bl	802b4c2 <__cxa_guard_acquire>
 8024ce2:	b138      	cbz	r0, 8024cf4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024ce4:	4620      	mov	r0, r4
 8024ce6:	f006 fbf8 	bl	802b4da <__cxa_guard_release>
 8024cea:	4a06      	ldr	r2, [pc, #24]	; (8024d04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024cec:	4909      	ldr	r1, [pc, #36]	; (8024d14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8024cee:	480a      	ldr	r0, [pc, #40]	; (8024d18 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024cf0:	f006 fbe0 	bl	802b4b4 <__aeabi_atexit>
 8024cf4:	4b05      	ldr	r3, [pc, #20]	; (8024d0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024cf6:	64ab      	str	r3, [r5, #72]	; 0x48
 8024cf8:	4b07      	ldr	r3, [pc, #28]	; (8024d18 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024cfa:	64eb      	str	r3, [r5, #76]	; 0x4c
 8024cfc:	bd38      	pop	{r3, r4, r5, pc}
 8024cfe:	bf00      	nop
 8024d00:	2400c968 	.word	0x2400c968
 8024d04:	24000000 	.word	0x24000000
 8024d08:	080232b3 	.word	0x080232b3
 8024d0c:	24000054 	.word	0x24000054
 8024d10:	2400c96c 	.word	0x2400c96c
 8024d14:	080232b1 	.word	0x080232b1
 8024d18:	24000058 	.word	0x24000058

08024d1c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8024d1c:	b510      	push	{r4, lr}
 8024d1e:	4604      	mov	r4, r0
 8024d20:	f7ff ff88 	bl	8024c34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8024d24:	4620      	mov	r0, r4
 8024d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d2a:	f7ff bfbd 	b.w	8024ca8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08024d2e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8024d2e:	b510      	push	{r4, lr}
 8024d30:	4604      	mov	r4, r0
 8024d32:	f7ff fff3 	bl	8024d1c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8024d36:	4620      	mov	r0, r4
 8024d38:	f7ff ff72 	bl	8024c20 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8024d3c:	4620      	mov	r0, r4
 8024d3e:	f7ff fe73 	bl	8024a28 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8024d42:	4620      	mov	r0, r4
 8024d44:	f7ff fdf2 	bl	802492c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8024d48:	4620      	mov	r0, r4
 8024d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d4e:	f7ff bee9 	b.w	8024b24 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08024d54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8024d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d58:	b087      	sub	sp, #28
 8024d5a:	7888      	ldrb	r0, [r1, #2]
 8024d5c:	4616      	mov	r6, r2
 8024d5e:	9001      	str	r0, [sp, #4]
 8024d60:	7848      	ldrb	r0, [r1, #1]
 8024d62:	9100      	str	r1, [sp, #0]
 8024d64:	9002      	str	r0, [sp, #8]
 8024d66:	7808      	ldrb	r0, [r1, #0]
 8024d68:	9901      	ldr	r1, [sp, #4]
 8024d6a:	9003      	str	r0, [sp, #12]
 8024d6c:	9802      	ldr	r0, [sp, #8]
 8024d6e:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8024d72:	0200      	lsls	r0, r0, #8
 8024d74:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8024d78:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8024d7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8024d80:	9903      	ldr	r1, [sp, #12]
 8024d82:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8024d86:	4308      	orrs	r0, r1
 8024d88:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8024d8c:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8024d90:	9005      	str	r0, [sp, #20]
 8024d92:	fb05 ca0e 	mla	sl, r5, lr, ip
 8024d96:	2d00      	cmp	r5, #0
 8024d98:	eb06 080a 	add.w	r8, r6, sl
 8024d9c:	db4a      	blt.n	8024e34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8024d9e:	45a9      	cmp	r9, r5
 8024da0:	dd48      	ble.n	8024e34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8024da2:	f1bc 0f00 	cmp.w	ip, #0
 8024da6:	db43      	blt.n	8024e30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8024da8:	45e6      	cmp	lr, ip
 8024daa:	dd41      	ble.n	8024e30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8024dac:	f816 600a 	ldrb.w	r6, [r6, sl]
 8024db0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024db4:	441e      	add	r6, r3
 8024db6:	f11c 0001 	adds.w	r0, ip, #1
 8024dba:	d43e      	bmi.n	8024e3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8024dbc:	4586      	cmp	lr, r0
 8024dbe:	dd3c      	ble.n	8024e3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8024dc0:	2a00      	cmp	r2, #0
 8024dc2:	d03a      	beq.n	8024e3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8024dc4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8024dc8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024dcc:	4418      	add	r0, r3
 8024dce:	3501      	adds	r5, #1
 8024dd0:	d437      	bmi.n	8024e42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8024dd2:	45a9      	cmp	r9, r5
 8024dd4:	dd35      	ble.n	8024e42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8024dd6:	b3a4      	cbz	r4, 8024e42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8024dd8:	f1bc 0f00 	cmp.w	ip, #0
 8024ddc:	db2f      	blt.n	8024e3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8024dde:	45e6      	cmp	lr, ip
 8024de0:	dd2d      	ble.n	8024e3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8024de2:	f818 500e 	ldrb.w	r5, [r8, lr]
 8024de6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024dea:	441d      	add	r5, r3
 8024dec:	f11c 0c01 	adds.w	ip, ip, #1
 8024df0:	d42a      	bmi.n	8024e48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8024df2:	45e6      	cmp	lr, ip
 8024df4:	dd28      	ble.n	8024e48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8024df6:	b33a      	cbz	r2, 8024e48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8024df8:	44c6      	add	lr, r8
 8024dfa:	f89e c001 	ldrb.w	ip, [lr, #1]
 8024dfe:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024e02:	4463      	add	r3, ip
 8024e04:	ea6f 0c07 	mvn.w	ip, r7
 8024e08:	2a0f      	cmp	r2, #15
 8024e0a:	f896 a000 	ldrb.w	sl, [r6]
 8024e0e:	fa5f fc8c 	uxtb.w	ip, ip
 8024e12:	f890 b000 	ldrb.w	fp, [r0]
 8024e16:	f895 9000 	ldrb.w	r9, [r5]
 8024e1a:	7819      	ldrb	r1, [r3, #0]
 8024e1c:	d801      	bhi.n	8024e22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8024e1e:	2c0f      	cmp	r4, #15
 8024e20:	d914      	bls.n	8024e4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 8024e22:	4b40      	ldr	r3, [pc, #256]	; (8024f24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 8024e24:	f240 1157 	movw	r1, #343	; 0x157
 8024e28:	4a3f      	ldr	r2, [pc, #252]	; (8024f28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8024e2a:	4840      	ldr	r0, [pc, #256]	; (8024f2c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8024e2c:	f006 fd1c 	bl	802b868 <__assert_func>
 8024e30:	ae05      	add	r6, sp, #20
 8024e32:	e7c0      	b.n	8024db6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 8024e34:	a805      	add	r0, sp, #20
 8024e36:	4606      	mov	r6, r0
 8024e38:	e7c9      	b.n	8024dce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8024e3a:	a805      	add	r0, sp, #20
 8024e3c:	e7c7      	b.n	8024dce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8024e3e:	ad05      	add	r5, sp, #20
 8024e40:	e7d4      	b.n	8024dec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 8024e42:	ab05      	add	r3, sp, #20
 8024e44:	461d      	mov	r5, r3
 8024e46:	e7dd      	b.n	8024e04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8024e48:	ab05      	add	r3, sp, #20
 8024e4a:	e7db      	b.n	8024e04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8024e4c:	b292      	uxth	r2, r2
 8024e4e:	b2a4      	uxth	r4, r4
 8024e50:	fa1f fc8c 	uxth.w	ip, ip
 8024e54:	fb02 f804 	mul.w	r8, r2, r4
 8024e58:	0112      	lsls	r2, r2, #4
 8024e5a:	b2bf      	uxth	r7, r7
 8024e5c:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8024e60:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8024e64:	eba2 0208 	sub.w	r2, r2, r8
 8024e68:	b2a4      	uxth	r4, r4
 8024e6a:	b292      	uxth	r2, r2
 8024e6c:	ebae 0e04 	sub.w	lr, lr, r4
 8024e70:	fb02 fb0b 	mul.w	fp, r2, fp
 8024e74:	fa1f fe8e 	uxth.w	lr, lr
 8024e78:	fb0e ba0a 	mla	sl, lr, sl, fp
 8024e7c:	fb04 aa09 	mla	sl, r4, r9, sl
 8024e80:	fb08 aa01 	mla	sl, r8, r1, sl
 8024e84:	9903      	ldr	r1, [sp, #12]
 8024e86:	fb11 f90c 	smulbb	r9, r1, ip
 8024e8a:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8024e8e:	9900      	ldr	r1, [sp, #0]
 8024e90:	fb0a 9a07 	mla	sl, sl, r7, r9
 8024e94:	fa1f fa8a 	uxth.w	sl, sl
 8024e98:	f10a 0901 	add.w	r9, sl, #1
 8024e9c:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8024ea0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8024ea4:	f881 a000 	strb.w	sl, [r1]
 8024ea8:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024eac:	f896 9001 	ldrb.w	r9, [r6, #1]
 8024eb0:	fb02 fa0a 	mul.w	sl, r2, sl
 8024eb4:	9902      	ldr	r1, [sp, #8]
 8024eb6:	fb0e aa09 	mla	sl, lr, r9, sl
 8024eba:	f895 9001 	ldrb.w	r9, [r5, #1]
 8024ebe:	fb04 aa09 	mla	sl, r4, r9, sl
 8024ec2:	f893 9001 	ldrb.w	r9, [r3, #1]
 8024ec6:	fb08 a909 	mla	r9, r8, r9, sl
 8024eca:	fb11 fa0c 	smulbb	sl, r1, ip
 8024ece:	9900      	ldr	r1, [sp, #0]
 8024ed0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8024ed4:	fb09 a907 	mla	r9, r9, r7, sl
 8024ed8:	fa1f f989 	uxth.w	r9, r9
 8024edc:	f109 0a01 	add.w	sl, r9, #1
 8024ee0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8024ee4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024ee8:	f881 9001 	strb.w	r9, [r1, #1]
 8024eec:	7880      	ldrb	r0, [r0, #2]
 8024eee:	78b6      	ldrb	r6, [r6, #2]
 8024ef0:	4342      	muls	r2, r0
 8024ef2:	78a8      	ldrb	r0, [r5, #2]
 8024ef4:	789b      	ldrb	r3, [r3, #2]
 8024ef6:	fb0e 2206 	mla	r2, lr, r6, r2
 8024efa:	fb04 2400 	mla	r4, r4, r0, r2
 8024efe:	fb08 4803 	mla	r8, r8, r3, r4
 8024f02:	9b01      	ldr	r3, [sp, #4]
 8024f04:	fb13 fc0c 	smulbb	ip, r3, ip
 8024f08:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8024f0c:	fb08 c707 	mla	r7, r8, r7, ip
 8024f10:	b2bf      	uxth	r7, r7
 8024f12:	f107 0c01 	add.w	ip, r7, #1
 8024f16:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8024f1a:	123f      	asrs	r7, r7, #8
 8024f1c:	708f      	strb	r7, [r1, #2]
 8024f1e:	b007      	add	sp, #28
 8024f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f24:	0803129e 	.word	0x0803129e
 8024f28:	08031796 	.word	0x08031796
 8024f2c:	08031367 	.word	0x08031367

08024f30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f34:	ed2d 8b08 	vpush	{d8-d11}
 8024f38:	b093      	sub	sp, #76	; 0x4c
 8024f3a:	eeb0 aa40 	vmov.f32	s20, s0
 8024f3e:	eef0 9a60 	vmov.f32	s19, s1
 8024f42:	9210      	str	r2, [sp, #64]	; 0x40
 8024f44:	eeb0 9a41 	vmov.f32	s18, s2
 8024f48:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024f4a:	eeb0 8a62 	vmov.f32	s16, s5
 8024f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8024f50:	eef0 8a43 	vmov.f32	s17, s6
 8024f54:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8024f58:	eef0 ba44 	vmov.f32	s23, s8
 8024f5c:	9011      	str	r0, [sp, #68]	; 0x44
 8024f5e:	eeb0 ba64 	vmov.f32	s22, s9
 8024f62:	930e      	str	r3, [sp, #56]	; 0x38
 8024f64:	eef0 aa45 	vmov.f32	s21, s10
 8024f68:	6850      	ldr	r0, [r2, #4]
 8024f6a:	910d      	str	r1, [sp, #52]	; 0x34
 8024f6c:	6812      	ldr	r2, [r2, #0]
 8024f6e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024f72:	fb00 1303 	mla	r3, r0, r3, r1
 8024f76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024f7a:	18d3      	adds	r3, r2, r3
 8024f7c:	930a      	str	r3, [sp, #40]	; 0x28
 8024f7e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f80:	681b      	ldr	r3, [r3, #0]
 8024f82:	930c      	str	r3, [sp, #48]	; 0x30
 8024f84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f86:	685c      	ldr	r4, [r3, #4]
 8024f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024f8a:	3404      	adds	r4, #4
 8024f8c:	43db      	mvns	r3, r3
 8024f8e:	b2db      	uxtb	r3, r3
 8024f90:	930b      	str	r3, [sp, #44]	; 0x2c
 8024f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024f94:	2b00      	cmp	r3, #0
 8024f96:	dc03      	bgt.n	8024fa0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8024f98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024f9a:	2b00      	cmp	r3, #0
 8024f9c:	f340 8250 	ble.w	8025440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8024fa0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024fa2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024fa6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024faa:	1e48      	subs	r0, r1, #1
 8024fac:	1e55      	subs	r5, r2, #1
 8024fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fb0:	2b00      	cmp	r3, #0
 8024fb2:	f340 80ee 	ble.w	8025192 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8024fb6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8024fb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024fba:	1436      	asrs	r6, r6, #16
 8024fbc:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024fc0:	d406      	bmi.n	8024fd0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024fc2:	4286      	cmp	r6, r0
 8024fc4:	da04      	bge.n	8024fd0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024fc6:	2b00      	cmp	r3, #0
 8024fc8:	db02      	blt.n	8024fd0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8024fca:	42ab      	cmp	r3, r5
 8024fcc:	f2c0 80e2 	blt.w	8025194 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8024fd0:	3601      	adds	r6, #1
 8024fd2:	f100 80cf 	bmi.w	8025174 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024fd6:	42b1      	cmp	r1, r6
 8024fd8:	f2c0 80cc 	blt.w	8025174 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024fdc:	3301      	adds	r3, #1
 8024fde:	f100 80c9 	bmi.w	8025174 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024fe2:	429a      	cmp	r2, r3
 8024fe4:	f2c0 80c6 	blt.w	8025174 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8024fe8:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8024fec:	f1bb 0f00 	cmp.w	fp, #0
 8024ff0:	f340 80f1 	ble.w	80251d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8024ff4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024ff6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024ff8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8024ffa:	141d      	asrs	r5, r3, #16
 8024ffc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024ffe:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025002:	68c7      	ldr	r7, [r0, #12]
 8025004:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8025006:	1418      	asrs	r0, r3, #16
 8025008:	f3c3 3803 	ubfx	r8, r3, #12, #4
 802500c:	6892      	ldr	r2, [r2, #8]
 802500e:	f100 8137 	bmi.w	8025280 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025012:	f102 3cff 	add.w	ip, r2, #4294967295
 8025016:	4560      	cmp	r0, ip
 8025018:	f280 8132 	bge.w	8025280 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802501c:	2d00      	cmp	r5, #0
 802501e:	f2c0 812f 	blt.w	8025280 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8025022:	f107 3cff 	add.w	ip, r7, #4294967295
 8025026:	4565      	cmp	r5, ip
 8025028:	f280 812a 	bge.w	8025280 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802502c:	b212      	sxth	r2, r2
 802502e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025030:	fb05 0002 	mla	r0, r5, r2, r0
 8025034:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025036:	f817 c000 	ldrb.w	ip, [r7, r0]
 802503a:	4405      	add	r5, r0
 802503c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025040:	eb04 0e0c 	add.w	lr, r4, ip
 8025044:	f1b8 0f00 	cmp.w	r8, #0
 8025048:	f000 810c 	beq.w	8025264 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 802504c:	786f      	ldrb	r7, [r5, #1]
 802504e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025052:	4427      	add	r7, r4
 8025054:	2900      	cmp	r1, #0
 8025056:	f000 810d 	beq.w	8025274 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802505a:	18a8      	adds	r0, r5, r2
 802505c:	5caa      	ldrb	r2, [r5, r2]
 802505e:	7840      	ldrb	r0, [r0, #1]
 8025060:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025064:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025068:	4422      	add	r2, r4
 802506a:	4420      	add	r0, r4
 802506c:	fa1f f388 	uxth.w	r3, r8
 8025070:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8025074:	b289      	uxth	r1, r1
 8025076:	f897 c000 	ldrb.w	ip, [r7]
 802507a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 802507e:	fb03 f901 	mul.w	r9, r3, r1
 8025082:	011b      	lsls	r3, r3, #4
 8025084:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025088:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 802508c:	eba3 0309 	sub.w	r3, r3, r9
 8025090:	b289      	uxth	r1, r1
 8025092:	b29b      	uxth	r3, r3
 8025094:	eba8 0801 	sub.w	r8, r8, r1
 8025098:	fb03 fc0c 	mul.w	ip, r3, ip
 802509c:	fa1f f888 	uxth.w	r8, r8
 80250a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80250a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250a4:	fb08 cc0a 	mla	ip, r8, sl, ip
 80250a8:	f892 a000 	ldrb.w	sl, [r2]
 80250ac:	fb01 cc0a 	mla	ip, r1, sl, ip
 80250b0:	f890 a000 	ldrb.w	sl, [r0]
 80250b4:	fb09 cc0a 	mla	ip, r9, sl, ip
 80250b8:	f896 a000 	ldrb.w	sl, [r6]
 80250bc:	fb1a fa03 	smulbb	sl, sl, r3
 80250c0:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80250c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80250c6:	fb0c ac05 	mla	ip, ip, r5, sl
 80250ca:	fa1f fc8c 	uxth.w	ip, ip
 80250ce:	f10c 0a01 	add.w	sl, ip, #1
 80250d2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80250d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80250da:	f886 a000 	strb.w	sl, [r6]
 80250de:	f897 c001 	ldrb.w	ip, [r7, #1]
 80250e2:	f89e a001 	ldrb.w	sl, [lr, #1]
 80250e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80250ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250ec:	fb08 cc0a 	mla	ip, r8, sl, ip
 80250f0:	f892 a001 	ldrb.w	sl, [r2, #1]
 80250f4:	fb01 cc0a 	mla	ip, r1, sl, ip
 80250f8:	f890 a001 	ldrb.w	sl, [r0, #1]
 80250fc:	fb09 cc0a 	mla	ip, r9, sl, ip
 8025100:	f896 a001 	ldrb.w	sl, [r6, #1]
 8025104:	fb1a fa03 	smulbb	sl, sl, r3
 8025108:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802510c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802510e:	fb0c ac05 	mla	ip, ip, r5, sl
 8025112:	fa1f fc8c 	uxth.w	ip, ip
 8025116:	f10c 0a01 	add.w	sl, ip, #1
 802511a:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 802511e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025122:	f886 c001 	strb.w	ip, [r6, #1]
 8025126:	78bf      	ldrb	r7, [r7, #2]
 8025128:	f89e c002 	ldrb.w	ip, [lr, #2]
 802512c:	437b      	muls	r3, r7
 802512e:	fb08 330c 	mla	r3, r8, ip, r3
 8025132:	f892 c002 	ldrb.w	ip, [r2, #2]
 8025136:	7882      	ldrb	r2, [r0, #2]
 8025138:	fb01 310c 	mla	r1, r1, ip, r3
 802513c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802513e:	fb09 1902 	mla	r9, r9, r2, r1
 8025142:	78b1      	ldrb	r1, [r6, #2]
 8025144:	fb11 f103 	smulbb	r1, r1, r3
 8025148:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802514c:	fb09 1505 	mla	r5, r9, r5, r1
 8025150:	b2ad      	uxth	r5, r5
 8025152:	1c6b      	adds	r3, r5, #1
 8025154:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025158:	122d      	asrs	r5, r5, #8
 802515a:	70b5      	strb	r5, [r6, #2]
 802515c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802515e:	3603      	adds	r6, #3
 8025160:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8025162:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025166:	4413      	add	r3, r2
 8025168:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802516a:	9325      	str	r3, [sp, #148]	; 0x94
 802516c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802516e:	4413      	add	r3, r2
 8025170:	9326      	str	r3, [sp, #152]	; 0x98
 8025172:	e73b      	b.n	8024fec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8025174:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025176:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8025178:	4433      	add	r3, r6
 802517a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 802517c:	9325      	str	r3, [sp, #148]	; 0x94
 802517e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025180:	4433      	add	r3, r6
 8025182:	9326      	str	r3, [sp, #152]	; 0x98
 8025184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025186:	3b01      	subs	r3, #1
 8025188:	9309      	str	r3, [sp, #36]	; 0x24
 802518a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802518c:	3303      	adds	r3, #3
 802518e:	930a      	str	r3, [sp, #40]	; 0x28
 8025190:	e70d      	b.n	8024fae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8025192:	d028      	beq.n	80251e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8025194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025196:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8025198:	3b01      	subs	r3, #1
 802519a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 802519c:	fb00 5003 	mla	r0, r0, r3, r5
 80251a0:	1400      	asrs	r0, r0, #16
 80251a2:	f53f af21 	bmi.w	8024fe8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80251a6:	3901      	subs	r1, #1
 80251a8:	4288      	cmp	r0, r1
 80251aa:	f6bf af1d 	bge.w	8024fe8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80251ae:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80251b0:	9826      	ldr	r0, [sp, #152]	; 0x98
 80251b2:	fb01 0303 	mla	r3, r1, r3, r0
 80251b6:	141b      	asrs	r3, r3, #16
 80251b8:	f53f af16 	bmi.w	8024fe8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80251bc:	3a01      	subs	r2, #1
 80251be:	4293      	cmp	r3, r2
 80251c0:	f6bf af12 	bge.w	8024fe8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80251c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80251c6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80251ca:	1cdf      	adds	r7, r3, #3
 80251cc:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80251d0:	f1b9 0f00 	cmp.w	r9, #0
 80251d4:	dc73      	bgt.n	80252be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80251d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80251da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80251de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80251e2:	441a      	add	r2, r3
 80251e4:	920a      	str	r2, [sp, #40]	; 0x28
 80251e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80251e8:	2b00      	cmp	r3, #0
 80251ea:	f340 8129 	ble.w	8025440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80251ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80251f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80251f4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80251f8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80251fc:	eef0 6a48 	vmov.f32	s13, s16
 8025200:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025204:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025208:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802520c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8025210:	eef0 6a68 	vmov.f32	s13, s17
 8025214:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025218:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 802521c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025220:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025224:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025228:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802522c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025230:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025234:	ee18 2a10 	vmov	r2, s16
 8025238:	eeb0 8a47 	vmov.f32	s16, s14
 802523c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025240:	ee18 2a90 	vmov	r2, s17
 8025244:	9327      	str	r3, [sp, #156]	; 0x9c
 8025246:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025248:	eef0 8a67 	vmov.f32	s17, s15
 802524c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025250:	9328      	str	r3, [sp, #160]	; 0xa0
 8025252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025254:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025256:	3b01      	subs	r3, #1
 8025258:	930d      	str	r3, [sp, #52]	; 0x34
 802525a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802525c:	bf08      	it	eq
 802525e:	4613      	moveq	r3, r2
 8025260:	9309      	str	r3, [sp, #36]	; 0x24
 8025262:	e696      	b.n	8024f92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8025264:	b149      	cbz	r1, 802527a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8025266:	5caa      	ldrb	r2, [r5, r2]
 8025268:	4670      	mov	r0, lr
 802526a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802526e:	4422      	add	r2, r4
 8025270:	4677      	mov	r7, lr
 8025272:	e6fb      	b.n	802506c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025274:	4670      	mov	r0, lr
 8025276:	4672      	mov	r2, lr
 8025278:	e6f8      	b.n	802506c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802527a:	4670      	mov	r0, lr
 802527c:	4672      	mov	r2, lr
 802527e:	e7f7      	b.n	8025270 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8025280:	f110 0c01 	adds.w	ip, r0, #1
 8025284:	f53f af6a 	bmi.w	802515c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8025288:	4562      	cmp	r2, ip
 802528a:	f6ff af67 	blt.w	802515c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 802528e:	f115 0c01 	adds.w	ip, r5, #1
 8025292:	f53f af63 	bmi.w	802515c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8025296:	4567      	cmp	r7, ip
 8025298:	f6ff af60 	blt.w	802515c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 802529c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802529e:	b23f      	sxth	r7, r7
 80252a0:	b212      	sxth	r2, r2
 80252a2:	9002      	str	r0, [sp, #8]
 80252a4:	9701      	str	r7, [sp, #4]
 80252a6:	9200      	str	r2, [sp, #0]
 80252a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80252aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80252ac:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80252b0:	e9cd 5803 	strd	r5, r8, [sp, #12]
 80252b4:	4623      	mov	r3, r4
 80252b6:	4631      	mov	r1, r6
 80252b8:	f7ff fd4c 	bl	8024d54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80252bc:	e74e      	b.n	802515c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80252be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80252c0:	9826      	ldr	r0, [sp, #152]	; 0x98
 80252c2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80252c6:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80252c8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80252ca:	1400      	asrs	r0, r0, #16
 80252cc:	142d      	asrs	r5, r5, #16
 80252ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80252d0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80252d4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80252d8:	fb02 5000 	mla	r0, r2, r0, r5
 80252dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80252de:	f815 e000 	ldrb.w	lr, [r5, r0]
 80252e2:	eb05 0c00 	add.w	ip, r5, r0
 80252e6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80252ea:	eb04 060e 	add.w	r6, r4, lr
 80252ee:	2b00      	cmp	r3, #0
 80252f0:	f000 8097 	beq.w	8025422 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80252f4:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80252f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80252fc:	4425      	add	r5, r4
 80252fe:	2900      	cmp	r1, #0
 8025300:	f000 8098 	beq.w	8025434 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8025304:	eb0c 0002 	add.w	r0, ip, r2
 8025308:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802530c:	7840      	ldrb	r0, [r0, #1]
 802530e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025312:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025316:	4422      	add	r2, r4
 8025318:	4420      	add	r0, r4
 802531a:	b29b      	uxth	r3, r3
 802531c:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8025320:	b289      	uxth	r1, r1
 8025322:	f895 e000 	ldrb.w	lr, [r5]
 8025326:	3703      	adds	r7, #3
 8025328:	f109 39ff 	add.w	r9, r9, #4294967295
 802532c:	fb03 f801 	mul.w	r8, r3, r1
 8025330:	011b      	lsls	r3, r3, #4
 8025332:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8025336:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 802533a:	eba3 0308 	sub.w	r3, r3, r8
 802533e:	b289      	uxth	r1, r1
 8025340:	b29b      	uxth	r3, r3
 8025342:	ebac 0c01 	sub.w	ip, ip, r1
 8025346:	fb03 fe0e 	mul.w	lr, r3, lr
 802534a:	fa1f fc8c 	uxth.w	ip, ip
 802534e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025352:	fb0c ee0b 	mla	lr, ip, fp, lr
 8025356:	f892 b000 	ldrb.w	fp, [r2]
 802535a:	fb01 ee0b 	mla	lr, r1, fp, lr
 802535e:	f890 b000 	ldrb.w	fp, [r0]
 8025362:	fb08 ee0b 	mla	lr, r8, fp, lr
 8025366:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 802536a:	fb1b fb03 	smulbb	fp, fp, r3
 802536e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8025372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025374:	fb0e be0a 	mla	lr, lr, sl, fp
 8025378:	fa1f fe8e 	uxth.w	lr, lr
 802537c:	f10e 0b01 	add.w	fp, lr, #1
 8025380:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8025384:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025388:	f807 ec06 	strb.w	lr, [r7, #-6]
 802538c:	f895 e001 	ldrb.w	lr, [r5, #1]
 8025390:	f896 b001 	ldrb.w	fp, [r6, #1]
 8025394:	fb03 fe0e 	mul.w	lr, r3, lr
 8025398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802539a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802539e:	f892 b001 	ldrb.w	fp, [r2, #1]
 80253a2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80253a6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80253aa:	fb08 ee0b 	mla	lr, r8, fp, lr
 80253ae:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 80253b2:	fb1b fb03 	smulbb	fp, fp, r3
 80253b6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80253ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80253bc:	fb0e be0a 	mla	lr, lr, sl, fp
 80253c0:	fa1f fe8e 	uxth.w	lr, lr
 80253c4:	f10e 0b01 	add.w	fp, lr, #1
 80253c8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80253cc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80253d0:	f807 ec05 	strb.w	lr, [r7, #-5]
 80253d4:	78ad      	ldrb	r5, [r5, #2]
 80253d6:	78b6      	ldrb	r6, [r6, #2]
 80253d8:	436b      	muls	r3, r5
 80253da:	7895      	ldrb	r5, [r2, #2]
 80253dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80253de:	fb0c 3306 	mla	r3, ip, r6, r3
 80253e2:	fb01 3305 	mla	r3, r1, r5, r3
 80253e6:	7885      	ldrb	r5, [r0, #2]
 80253e8:	fb08 3805 	mla	r8, r8, r5, r3
 80253ec:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80253f0:	fb13 f302 	smulbb	r3, r3, r2
 80253f4:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80253f8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80253fa:	fb08 380a 	mla	r8, r8, sl, r3
 80253fe:	fa1f f888 	uxth.w	r8, r8
 8025402:	f108 0301 	add.w	r3, r8, #1
 8025406:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 802540a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802540c:	4413      	add	r3, r2
 802540e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025410:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025414:	9325      	str	r3, [sp, #148]	; 0x94
 8025416:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025418:	f807 8c04 	strb.w	r8, [r7, #-4]
 802541c:	4413      	add	r3, r2
 802541e:	9326      	str	r3, [sp, #152]	; 0x98
 8025420:	e6d6      	b.n	80251d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8025422:	b151      	cbz	r1, 802543a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8025424:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8025428:	4630      	mov	r0, r6
 802542a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802542e:	4422      	add	r2, r4
 8025430:	4635      	mov	r5, r6
 8025432:	e772      	b.n	802531a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8025434:	4630      	mov	r0, r6
 8025436:	4632      	mov	r2, r6
 8025438:	e76f      	b.n	802531a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 802543a:	4630      	mov	r0, r6
 802543c:	4632      	mov	r2, r6
 802543e:	e7f7      	b.n	8025430 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8025440:	b013      	add	sp, #76	; 0x4c
 8025442:	ecbd 8b08 	vpop	{d8-d11}
 8025446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802544c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 802544c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025450:	784d      	ldrb	r5, [r1, #1]
 8025452:	f891 9002 	ldrb.w	r9, [r1, #2]
 8025456:	022d      	lsls	r5, r5, #8
 8025458:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 802545c:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8025460:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8025464:	f891 9000 	ldrb.w	r9, [r1]
 8025468:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 802546c:	ea45 0509 	orr.w	r5, r5, r9
 8025470:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8025474:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8025478:	9501      	str	r5, [sp, #4]
 802547a:	fb06 470c 	mla	r7, r6, ip, r4
 802547e:	2e00      	cmp	r6, #0
 8025480:	eb02 0e07 	add.w	lr, r2, r7
 8025484:	db46      	blt.n	8025514 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8025486:	45b0      	cmp	r8, r6
 8025488:	dd44      	ble.n	8025514 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 802548a:	2c00      	cmp	r4, #0
 802548c:	db40      	blt.n	8025510 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 802548e:	45a4      	cmp	ip, r4
 8025490:	dd3e      	ble.n	8025510 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8025492:	5dd7      	ldrb	r7, [r2, r7]
 8025494:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025498:	441f      	add	r7, r3
 802549a:	1c62      	adds	r2, r4, #1
 802549c:	d43d      	bmi.n	802551a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 802549e:	4594      	cmp	ip, r2
 80254a0:	dd3b      	ble.n	802551a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 80254a2:	f1ba 0f00 	cmp.w	sl, #0
 80254a6:	d038      	beq.n	802551a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 80254a8:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80254ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80254b0:	441d      	add	r5, r3
 80254b2:	3601      	adds	r6, #1
 80254b4:	d435      	bmi.n	8025522 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 80254b6:	45b0      	cmp	r8, r6
 80254b8:	dd33      	ble.n	8025522 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 80254ba:	b390      	cbz	r0, 8025522 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 80254bc:	2c00      	cmp	r4, #0
 80254be:	db2e      	blt.n	802551e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 80254c0:	45a4      	cmp	ip, r4
 80254c2:	dd2c      	ble.n	802551e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 80254c4:	f81e 600c 	ldrb.w	r6, [lr, ip]
 80254c8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80254cc:	441e      	add	r6, r3
 80254ce:	1c62      	adds	r2, r4, #1
 80254d0:	d42a      	bmi.n	8025528 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80254d2:	4594      	cmp	ip, r2
 80254d4:	dd28      	ble.n	8025528 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80254d6:	f1ba 0f00 	cmp.w	sl, #0
 80254da:	d025      	beq.n	8025528 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 80254dc:	44f4      	add	ip, lr
 80254de:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80254e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80254e6:	4413      	add	r3, r2
 80254e8:	f1ba 0f0f 	cmp.w	sl, #15
 80254ec:	f897 8000 	ldrb.w	r8, [r7]
 80254f0:	f895 9000 	ldrb.w	r9, [r5]
 80254f4:	f896 e000 	ldrb.w	lr, [r6]
 80254f8:	f893 c000 	ldrb.w	ip, [r3]
 80254fc:	d801      	bhi.n	8025502 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 80254fe:	280f      	cmp	r0, #15
 8025500:	d914      	bls.n	802552c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 8025502:	4b29      	ldr	r3, [pc, #164]	; (80255a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 8025504:	f240 1157 	movw	r1, #343	; 0x157
 8025508:	4a28      	ldr	r2, [pc, #160]	; (80255ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 802550a:	4829      	ldr	r0, [pc, #164]	; (80255b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 802550c:	f006 f9ac 	bl	802b868 <__assert_func>
 8025510:	af01      	add	r7, sp, #4
 8025512:	e7c2      	b.n	802549a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 8025514:	ad01      	add	r5, sp, #4
 8025516:	462f      	mov	r7, r5
 8025518:	e7cb      	b.n	80254b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 802551a:	ad01      	add	r5, sp, #4
 802551c:	e7c9      	b.n	80254b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 802551e:	ae01      	add	r6, sp, #4
 8025520:	e7d5      	b.n	80254ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 8025522:	ab01      	add	r3, sp, #4
 8025524:	461e      	mov	r6, r3
 8025526:	e7df      	b.n	80254e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 8025528:	ab01      	add	r3, sp, #4
 802552a:	e7dd      	b.n	80254e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 802552c:	fa1f f48a 	uxth.w	r4, sl
 8025530:	b280      	uxth	r0, r0
 8025532:	fb04 fa00 	mul.w	sl, r4, r0
 8025536:	0124      	lsls	r4, r4, #4
 8025538:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802553c:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8025540:	b282      	uxth	r2, r0
 8025542:	eba4 000a 	sub.w	r0, r4, sl
 8025546:	ebab 0b02 	sub.w	fp, fp, r2
 802554a:	b280      	uxth	r0, r0
 802554c:	fa1f fb8b 	uxth.w	fp, fp
 8025550:	fb00 f909 	mul.w	r9, r0, r9
 8025554:	fb0b 9808 	mla	r8, fp, r8, r9
 8025558:	fb02 8e0e 	mla	lr, r2, lr, r8
 802555c:	fb0a ec0c 	mla	ip, sl, ip, lr
 8025560:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025564:	f881 c000 	strb.w	ip, [r1]
 8025568:	786c      	ldrb	r4, [r5, #1]
 802556a:	f897 c001 	ldrb.w	ip, [r7, #1]
 802556e:	4344      	muls	r4, r0
 8025570:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8025574:	7874      	ldrb	r4, [r6, #1]
 8025576:	fb02 cc04 	mla	ip, r2, r4, ip
 802557a:	785c      	ldrb	r4, [r3, #1]
 802557c:	fb0a c404 	mla	r4, sl, r4, ip
 8025580:	1224      	asrs	r4, r4, #8
 8025582:	704c      	strb	r4, [r1, #1]
 8025584:	78ad      	ldrb	r5, [r5, #2]
 8025586:	78bc      	ldrb	r4, [r7, #2]
 8025588:	4368      	muls	r0, r5
 802558a:	fb0b 0b04 	mla	fp, fp, r4, r0
 802558e:	78b0      	ldrb	r0, [r6, #2]
 8025590:	fb02 b000 	mla	r0, r2, r0, fp
 8025594:	789a      	ldrb	r2, [r3, #2]
 8025596:	fb0a 0a02 	mla	sl, sl, r2, r0
 802559a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802559e:	f881 a002 	strb.w	sl, [r1, #2]
 80255a2:	b003      	add	sp, #12
 80255a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255a8:	0803129e 	.word	0x0803129e
 80255ac:	08031796 	.word	0x08031796
 80255b0:	08031367 	.word	0x08031367

080255b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80255b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255b8:	ed2d 8b0a 	vpush	{d8-d12}
 80255bc:	b08d      	sub	sp, #52	; 0x34
 80255be:	eeb0 aa40 	vmov.f32	s20, s0
 80255c2:	eef0 9a60 	vmov.f32	s19, s1
 80255c6:	900b      	str	r0, [sp, #44]	; 0x2c
 80255c8:	eeb0 9a41 	vmov.f32	s18, s2
 80255cc:	9306      	str	r3, [sp, #24]
 80255ce:	eeb0 8a62 	vmov.f32	s16, s5
 80255d2:	eef0 8a43 	vmov.f32	s17, s6
 80255d6:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80255d8:	eeb0 ca44 	vmov.f32	s24, s8
 80255dc:	eef0 ba64 	vmov.f32	s23, s9
 80255e0:	eeb0 ba45 	vmov.f32	s22, s10
 80255e4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80255e8:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80255ec:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80255ee:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80255f2:	6850      	ldr	r0, [r2, #4]
 80255f4:	6812      	ldr	r2, [r2, #0]
 80255f6:	fb00 1303 	mla	r3, r0, r3, r1
 80255fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80255fe:	18d3      	adds	r3, r2, r3
 8025600:	9307      	str	r3, [sp, #28]
 8025602:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025604:	681b      	ldr	r3, [r3, #0]
 8025606:	9308      	str	r3, [sp, #32]
 8025608:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802560a:	685d      	ldr	r5, [r3, #4]
 802560c:	3504      	adds	r5, #4
 802560e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025610:	2b00      	cmp	r3, #0
 8025612:	dc03      	bgt.n	802561c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8025614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025616:	2b00      	cmp	r3, #0
 8025618:	f340 81e6 	ble.w	80259e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802561c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802561e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025622:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025626:	1e48      	subs	r0, r1, #1
 8025628:	1e56      	subs	r6, r2, #1
 802562a:	9b06      	ldr	r3, [sp, #24]
 802562c:	2b00      	cmp	r3, #0
 802562e:	f340 80bd 	ble.w	80257ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8025632:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025634:	1427      	asrs	r7, r4, #16
 8025636:	ea4f 4323 	mov.w	r3, r3, asr #16
 802563a:	d406      	bmi.n	802564a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802563c:	4287      	cmp	r7, r0
 802563e:	da04      	bge.n	802564a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025640:	2b00      	cmp	r3, #0
 8025642:	db02      	blt.n	802564a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025644:	42b3      	cmp	r3, r6
 8025646:	f2c0 80b2 	blt.w	80257ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802564a:	3701      	adds	r7, #1
 802564c:	f100 80a1 	bmi.w	8025792 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8025650:	42b9      	cmp	r1, r7
 8025652:	f2c0 809e 	blt.w	8025792 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8025656:	3301      	adds	r3, #1
 8025658:	f100 809b 	bmi.w	8025792 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 802565c:	429a      	cmp	r2, r3
 802565e:	f2c0 8098 	blt.w	8025792 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8025662:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8025666:	f1bb 0f00 	cmp.w	fp, #0
 802566a:	f340 80bf 	ble.w	80257ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802566e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025670:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025672:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025674:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025678:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 802567c:	1420      	asrs	r0, r4, #16
 802567e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025680:	ea4f 4723 	mov.w	r7, r3, asr #16
 8025684:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8025688:	6892      	ldr	r2, [r2, #8]
 802568a:	f100 8103 	bmi.w	8025894 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802568e:	f102 3eff 	add.w	lr, r2, #4294967295
 8025692:	4570      	cmp	r0, lr
 8025694:	f280 80fe 	bge.w	8025894 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8025698:	2f00      	cmp	r7, #0
 802569a:	f2c0 80fb 	blt.w	8025894 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802569e:	f10c 3eff 	add.w	lr, ip, #4294967295
 80256a2:	4577      	cmp	r7, lr
 80256a4:	f280 80f6 	bge.w	8025894 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80256a8:	b212      	sxth	r2, r2
 80256aa:	fb07 0002 	mla	r0, r7, r2, r0
 80256ae:	9f08      	ldr	r7, [sp, #32]
 80256b0:	f817 8000 	ldrb.w	r8, [r7, r0]
 80256b4:	eb07 0e00 	add.w	lr, r7, r0
 80256b8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80256bc:	eb05 0c08 	add.w	ip, r5, r8
 80256c0:	2b00      	cmp	r3, #0
 80256c2:	f000 80d8 	beq.w	8025876 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 80256c6:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80256ca:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80256ce:	442f      	add	r7, r5
 80256d0:	2900      	cmp	r1, #0
 80256d2:	f000 80d9 	beq.w	8025888 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80256d6:	eb0e 0002 	add.w	r0, lr, r2
 80256da:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80256de:	7840      	ldrb	r0, [r0, #1]
 80256e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80256e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80256e8:	442a      	add	r2, r5
 80256ea:	4428      	add	r0, r5
 80256ec:	b29b      	uxth	r3, r3
 80256ee:	f815 a008 	ldrb.w	sl, [r5, r8]
 80256f2:	b289      	uxth	r1, r1
 80256f4:	f897 8000 	ldrb.w	r8, [r7]
 80256f8:	fb03 f901 	mul.w	r9, r3, r1
 80256fc:	011b      	lsls	r3, r3, #4
 80256fe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025702:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025706:	eba3 0309 	sub.w	r3, r3, r9
 802570a:	b289      	uxth	r1, r1
 802570c:	b29b      	uxth	r3, r3
 802570e:	ebae 0e01 	sub.w	lr, lr, r1
 8025712:	fb03 f808 	mul.w	r8, r3, r8
 8025716:	fa1f fe8e 	uxth.w	lr, lr
 802571a:	fb0e 880a 	mla	r8, lr, sl, r8
 802571e:	f892 a000 	ldrb.w	sl, [r2]
 8025722:	fb01 880a 	mla	r8, r1, sl, r8
 8025726:	f890 a000 	ldrb.w	sl, [r0]
 802572a:	fb09 880a 	mla	r8, r9, sl, r8
 802572e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8025732:	f886 8000 	strb.w	r8, [r6]
 8025736:	f897 8001 	ldrb.w	r8, [r7, #1]
 802573a:	f89c a001 	ldrb.w	sl, [ip, #1]
 802573e:	fb03 f808 	mul.w	r8, r3, r8
 8025742:	fb0e 880a 	mla	r8, lr, sl, r8
 8025746:	f892 a001 	ldrb.w	sl, [r2, #1]
 802574a:	fb01 880a 	mla	r8, r1, sl, r8
 802574e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025752:	fb09 880a 	mla	r8, r9, sl, r8
 8025756:	ea4f 2828 	mov.w	r8, r8, asr #8
 802575a:	f886 8001 	strb.w	r8, [r6, #1]
 802575e:	78bf      	ldrb	r7, [r7, #2]
 8025760:	f89c c002 	ldrb.w	ip, [ip, #2]
 8025764:	437b      	muls	r3, r7
 8025766:	7892      	ldrb	r2, [r2, #2]
 8025768:	fb0e 330c 	mla	r3, lr, ip, r3
 802576c:	fb01 3102 	mla	r1, r1, r2, r3
 8025770:	7882      	ldrb	r2, [r0, #2]
 8025772:	fb09 1902 	mla	r9, r9, r2, r1
 8025776:	ea4f 2929 	mov.w	r9, r9, asr #8
 802577a:	f886 9002 	strb.w	r9, [r6, #2]
 802577e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025780:	3603      	adds	r6, #3
 8025782:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8025784:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025788:	441c      	add	r4, r3
 802578a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802578c:	4413      	add	r3, r2
 802578e:	9322      	str	r3, [sp, #136]	; 0x88
 8025790:	e769      	b.n	8025666 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025792:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025794:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8025796:	441c      	add	r4, r3
 8025798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802579a:	443b      	add	r3, r7
 802579c:	9322      	str	r3, [sp, #136]	; 0x88
 802579e:	9b06      	ldr	r3, [sp, #24]
 80257a0:	3b01      	subs	r3, #1
 80257a2:	9306      	str	r3, [sp, #24]
 80257a4:	9b07      	ldr	r3, [sp, #28]
 80257a6:	3303      	adds	r3, #3
 80257a8:	9307      	str	r3, [sp, #28]
 80257aa:	e73e      	b.n	802562a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80257ac:	d026      	beq.n	80257fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80257ae:	9b06      	ldr	r3, [sp, #24]
 80257b0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80257b2:	3b01      	subs	r3, #1
 80257b4:	fb00 4003 	mla	r0, r0, r3, r4
 80257b8:	1400      	asrs	r0, r0, #16
 80257ba:	f53f af52 	bmi.w	8025662 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80257be:	3901      	subs	r1, #1
 80257c0:	4288      	cmp	r0, r1
 80257c2:	f6bf af4e 	bge.w	8025662 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80257c6:	9924      	ldr	r1, [sp, #144]	; 0x90
 80257c8:	9822      	ldr	r0, [sp, #136]	; 0x88
 80257ca:	fb01 0303 	mla	r3, r1, r3, r0
 80257ce:	141b      	asrs	r3, r3, #16
 80257d0:	f53f af47 	bmi.w	8025662 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80257d4:	3a01      	subs	r2, #1
 80257d6:	4293      	cmp	r3, r2
 80257d8:	f6bf af43 	bge.w	8025662 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80257dc:	9b07      	ldr	r3, [sp, #28]
 80257de:	f8dd a018 	ldr.w	sl, [sp, #24]
 80257e2:	f103 0803 	add.w	r8, r3, #3
 80257e6:	f1ba 0f00 	cmp.w	sl, #0
 80257ea:	dc71      	bgt.n	80258d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80257ec:	9b06      	ldr	r3, [sp, #24]
 80257ee:	9a07      	ldr	r2, [sp, #28]
 80257f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80257f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80257f8:	441a      	add	r2, r3
 80257fa:	9207      	str	r2, [sp, #28]
 80257fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257fe:	2b00      	cmp	r3, #0
 8025800:	f340 80f2 	ble.w	80259e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025804:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8025808:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802580a:	ee79 9aab 	vadd.f32	s19, s19, s23
 802580e:	eef0 6a48 	vmov.f32	s13, s16
 8025812:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8025816:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802581a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802581e:	ee16 4a90 	vmov	r4, s13
 8025822:	eef0 6a68 	vmov.f32	s13, s17
 8025826:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802582a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 802582e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025832:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025836:	ee37 8a48 	vsub.f32	s16, s14, s16
 802583a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802583e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025842:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025846:	ee18 2a10 	vmov	r2, s16
 802584a:	eeb0 8a47 	vmov.f32	s16, s14
 802584e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025852:	ee18 2a90 	vmov	r2, s17
 8025856:	9323      	str	r3, [sp, #140]	; 0x8c
 8025858:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802585a:	eef0 8a67 	vmov.f32	s17, s15
 802585e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025862:	9324      	str	r3, [sp, #144]	; 0x90
 8025864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025866:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025868:	3b01      	subs	r3, #1
 802586a:	9309      	str	r3, [sp, #36]	; 0x24
 802586c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802586e:	bf08      	it	eq
 8025870:	4613      	moveq	r3, r2
 8025872:	9306      	str	r3, [sp, #24]
 8025874:	e6cb      	b.n	802560e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8025876:	b151      	cbz	r1, 802588e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025878:	f81e 2002 	ldrb.w	r2, [lr, r2]
 802587c:	4660      	mov	r0, ip
 802587e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025882:	442a      	add	r2, r5
 8025884:	4667      	mov	r7, ip
 8025886:	e731      	b.n	80256ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8025888:	4660      	mov	r0, ip
 802588a:	4662      	mov	r2, ip
 802588c:	e72e      	b.n	80256ec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802588e:	4660      	mov	r0, ip
 8025890:	4662      	mov	r2, ip
 8025892:	e7f7      	b.n	8025884 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8025894:	f110 0e01 	adds.w	lr, r0, #1
 8025898:	f53f af71 	bmi.w	802577e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 802589c:	4572      	cmp	r2, lr
 802589e:	f6ff af6e 	blt.w	802577e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80258a2:	f117 0e01 	adds.w	lr, r7, #1
 80258a6:	f53f af6a 	bmi.w	802577e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80258aa:	45f4      	cmp	ip, lr
 80258ac:	f6ff af67 	blt.w	802577e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80258b0:	b212      	sxth	r2, r2
 80258b2:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80258b6:	fa0f f38c 	sxth.w	r3, ip
 80258ba:	9200      	str	r2, [sp, #0]
 80258bc:	4631      	mov	r1, r6
 80258be:	9a08      	ldr	r2, [sp, #32]
 80258c0:	9301      	str	r3, [sp, #4]
 80258c2:	462b      	mov	r3, r5
 80258c4:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80258c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80258ca:	f7ff fdbf 	bl	802544c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80258ce:	e756      	b.n	802577e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80258d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80258d2:	1426      	asrs	r6, r4, #16
 80258d4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80258d6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80258da:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80258de:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80258e0:	1400      	asrs	r0, r0, #16
 80258e2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80258e6:	fb02 6000 	mla	r0, r2, r0, r6
 80258ea:	9e08      	ldr	r6, [sp, #32]
 80258ec:	f816 e000 	ldrb.w	lr, [r6, r0]
 80258f0:	eb06 0c00 	add.w	ip, r6, r0
 80258f4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80258f8:	eb05 070e 	add.w	r7, r5, lr
 80258fc:	2b00      	cmp	r3, #0
 80258fe:	d064      	beq.n	80259ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8025900:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8025904:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025908:	442e      	add	r6, r5
 802590a:	2900      	cmp	r1, #0
 802590c:	d066      	beq.n	80259dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802590e:	eb0c 0002 	add.w	r0, ip, r2
 8025912:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8025916:	7840      	ldrb	r0, [r0, #1]
 8025918:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802591c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025920:	442a      	add	r2, r5
 8025922:	4428      	add	r0, r5
 8025924:	b29b      	uxth	r3, r3
 8025926:	f815 b00e 	ldrb.w	fp, [r5, lr]
 802592a:	b289      	uxth	r1, r1
 802592c:	f896 e000 	ldrb.w	lr, [r6]
 8025930:	f108 0803 	add.w	r8, r8, #3
 8025934:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025938:	fb03 f901 	mul.w	r9, r3, r1
 802593c:	011b      	lsls	r3, r3, #4
 802593e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025942:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8025946:	eba3 0309 	sub.w	r3, r3, r9
 802594a:	b289      	uxth	r1, r1
 802594c:	b29b      	uxth	r3, r3
 802594e:	ebac 0c01 	sub.w	ip, ip, r1
 8025952:	fb03 fe0e 	mul.w	lr, r3, lr
 8025956:	fa1f fc8c 	uxth.w	ip, ip
 802595a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802595e:	f892 b000 	ldrb.w	fp, [r2]
 8025962:	fb01 ee0b 	mla	lr, r1, fp, lr
 8025966:	f890 b000 	ldrb.w	fp, [r0]
 802596a:	fb09 ee0b 	mla	lr, r9, fp, lr
 802596e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025972:	f808 ec06 	strb.w	lr, [r8, #-6]
 8025976:	f896 e001 	ldrb.w	lr, [r6, #1]
 802597a:	f897 b001 	ldrb.w	fp, [r7, #1]
 802597e:	fb03 fe0e 	mul.w	lr, r3, lr
 8025982:	fb0c ee0b 	mla	lr, ip, fp, lr
 8025986:	f892 b001 	ldrb.w	fp, [r2, #1]
 802598a:	fb01 ee0b 	mla	lr, r1, fp, lr
 802598e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025992:	fb09 ee0b 	mla	lr, r9, fp, lr
 8025996:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802599a:	f808 ec05 	strb.w	lr, [r8, #-5]
 802599e:	78b6      	ldrb	r6, [r6, #2]
 80259a0:	78bf      	ldrb	r7, [r7, #2]
 80259a2:	4373      	muls	r3, r6
 80259a4:	7896      	ldrb	r6, [r2, #2]
 80259a6:	7882      	ldrb	r2, [r0, #2]
 80259a8:	fb0c 3307 	mla	r3, ip, r7, r3
 80259ac:	fb01 3306 	mla	r3, r1, r6, r3
 80259b0:	fb09 3902 	mla	r9, r9, r2, r3
 80259b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80259b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80259b8:	441c      	add	r4, r3
 80259ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80259bc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80259c0:	4413      	add	r3, r2
 80259c2:	f808 9c04 	strb.w	r9, [r8, #-4]
 80259c6:	9322      	str	r3, [sp, #136]	; 0x88
 80259c8:	e70d      	b.n	80257e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80259ca:	b151      	cbz	r1, 80259e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80259cc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80259d0:	4638      	mov	r0, r7
 80259d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80259d6:	442a      	add	r2, r5
 80259d8:	463e      	mov	r6, r7
 80259da:	e7a3      	b.n	8025924 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80259dc:	4638      	mov	r0, r7
 80259de:	463a      	mov	r2, r7
 80259e0:	e7a0      	b.n	8025924 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80259e2:	4638      	mov	r0, r7
 80259e4:	463a      	mov	r2, r7
 80259e6:	e7f7      	b.n	80259d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80259e8:	b00d      	add	sp, #52	; 0x34
 80259ea:	ecbd 8b0a 	vpop	{d8-d12}
 80259ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080259f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80259f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259f8:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 80259fc:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8025a00:	2d00      	cmp	r5, #0
 8025a02:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8025a06:	fb05 040e 	mla	r4, r5, lr, r0
 8025a0a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8025a0e:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8025a12:	eb02 0804 	add.w	r8, r2, r4
 8025a16:	db40      	blt.n	8025a9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8025a18:	45a9      	cmp	r9, r5
 8025a1a:	dd3e      	ble.n	8025a9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8025a1c:	2800      	cmp	r0, #0
 8025a1e:	db3a      	blt.n	8025a96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8025a20:	4586      	cmp	lr, r0
 8025a22:	dd38      	ble.n	8025a96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8025a24:	5d12      	ldrb	r2, [r2, r4]
 8025a26:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8025a2a:	1c42      	adds	r2, r0, #1
 8025a2c:	d438      	bmi.n	8025aa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8025a2e:	4596      	cmp	lr, r2
 8025a30:	dd36      	ble.n	8025aa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8025a32:	b3bf      	cbz	r7, 8025aa4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8025a34:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025a38:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8025a3c:	3501      	adds	r5, #1
 8025a3e:	d435      	bmi.n	8025aac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8025a40:	45a9      	cmp	r9, r5
 8025a42:	dd33      	ble.n	8025aac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8025a44:	f1bc 0f00 	cmp.w	ip, #0
 8025a48:	d033      	beq.n	8025ab2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8025a4a:	2800      	cmp	r0, #0
 8025a4c:	db2c      	blt.n	8025aa8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8025a4e:	4586      	cmp	lr, r0
 8025a50:	dd2a      	ble.n	8025aa8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8025a52:	f818 200e 	ldrb.w	r2, [r8, lr]
 8025a56:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8025a5a:	3001      	adds	r0, #1
 8025a5c:	d42c      	bmi.n	8025ab8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8025a5e:	4586      	cmp	lr, r0
 8025a60:	dd2a      	ble.n	8025ab8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8025a62:	b35f      	cbz	r7, 8025abc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8025a64:	44c6      	add	lr, r8
 8025a66:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025a6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025a6e:	2f0f      	cmp	r7, #15
 8025a70:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8025a74:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8025a78:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8025a7c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8025a80:	d802      	bhi.n	8025a88 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8025a82:	f1bc 0f0f 	cmp.w	ip, #15
 8025a86:	d91b      	bls.n	8025ac0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8025a88:	4b77      	ldr	r3, [pc, #476]	; (8025c68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8025a8a:	f240 1157 	movw	r1, #343	; 0x157
 8025a8e:	4a77      	ldr	r2, [pc, #476]	; (8025c6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8025a90:	4877      	ldr	r0, [pc, #476]	; (8025c70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8025a92:	f005 fee9 	bl	802b868 <__assert_func>
 8025a96:	2600      	movs	r6, #0
 8025a98:	e7c7      	b.n	8025a2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8025a9a:	2400      	movs	r4, #0
 8025a9c:	4626      	mov	r6, r4
 8025a9e:	e7cd      	b.n	8025a3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8025aa0:	2400      	movs	r4, #0
 8025aa2:	e7cb      	b.n	8025a3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8025aa4:	463c      	mov	r4, r7
 8025aa6:	e7c9      	b.n	8025a3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8025aa8:	2500      	movs	r5, #0
 8025aaa:	e7d6      	b.n	8025a5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8025aac:	2200      	movs	r2, #0
 8025aae:	4615      	mov	r5, r2
 8025ab0:	e7dd      	b.n	8025a6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8025ab2:	4662      	mov	r2, ip
 8025ab4:	4665      	mov	r5, ip
 8025ab6:	e7da      	b.n	8025a6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8025ab8:	2200      	movs	r2, #0
 8025aba:	e7d8      	b.n	8025a6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8025abc:	463a      	mov	r2, r7
 8025abe:	e7d6      	b.n	8025a6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8025ac0:	b2bf      	uxth	r7, r7
 8025ac2:	fa1f f08c 	uxth.w	r0, ip
 8025ac6:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8025aca:	fb00 fe07 	mul.w	lr, r0, r7
 8025ace:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8025ad2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8025ad6:	ebac 070e 	sub.w	r7, ip, lr
 8025ada:	b280      	uxth	r0, r0
 8025adc:	b2bf      	uxth	r7, r7
 8025ade:	1a1b      	subs	r3, r3, r0
 8025ae0:	fb07 fc0a 	mul.w	ip, r7, sl
 8025ae4:	b29b      	uxth	r3, r3
 8025ae6:	fb03 cc0b 	mla	ip, r3, fp, ip
 8025aea:	9300      	str	r3, [sp, #0]
 8025aec:	fb00 cc09 	mla	ip, r0, r9, ip
 8025af0:	fb0e cc08 	mla	ip, lr, r8, ip
 8025af4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8025af8:	9301      	str	r3, [sp, #4]
 8025afa:	2b00      	cmp	r3, #0
 8025afc:	f000 80b0 	beq.w	8025c60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8025b00:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8025b04:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025b08:	fb0b fc0c 	mul.w	ip, fp, ip
 8025b0c:	fb0b f606 	mul.w	r6, fp, r6
 8025b10:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8025b14:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025b18:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8025b1c:	44dc      	add	ip, fp
 8025b1e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025b22:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025b26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b2a:	fb0a fb0b 	mul.w	fp, sl, fp
 8025b2e:	fb0a fa04 	mul.w	sl, sl, r4
 8025b32:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8025b36:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8025b3a:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8025b3e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8025b42:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8025b46:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025b4a:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8025b4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b52:	0a36      	lsrs	r6, r6, #8
 8025b54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025b58:	44dc      	add	ip, fp
 8025b5a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8025b5e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025b62:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025b66:	fb09 fb0b 	mul.w	fp, r9, fp
 8025b6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025b6e:	fb09 f905 	mul.w	r9, r9, r5
 8025b72:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025b76:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8025b7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025b7e:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8025b82:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025b86:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025b8a:	fb0c fc07 	mul.w	ip, ip, r7
 8025b8e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8025b92:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8025b96:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025b9a:	445c      	add	r4, fp
 8025b9c:	fb08 f505 	mul.w	r5, r8, r5
 8025ba0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025ba4:	fb08 f802 	mul.w	r8, r8, r2
 8025ba8:	0a24      	lsrs	r4, r4, #8
 8025baa:	0a2a      	lsrs	r2, r5, #8
 8025bac:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8025bb0:	fb07 f70a 	mul.w	r7, r7, sl
 8025bb4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025bb8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025bbc:	4415      	add	r5, r2
 8025bbe:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8025bc2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8025bc6:	9a00      	ldr	r2, [sp, #0]
 8025bc8:	0a2d      	lsrs	r5, r5, #8
 8025bca:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025bce:	fb03 cc02 	mla	ip, r3, r2, ip
 8025bd2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025bd6:	fb02 7306 	mla	r3, r2, r6, r7
 8025bda:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025bde:	9a01      	ldr	r2, [sp, #4]
 8025be0:	fb05 c50e 	mla	r5, r5, lr, ip
 8025be4:	fb0e 3e08 	mla	lr, lr, r8, r3
 8025be8:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8025bec:	fb04 5400 	mla	r4, r4, r0, r5
 8025bf0:	fb00 e303 	mla	r3, r0, r3, lr
 8025bf4:	0a24      	lsrs	r4, r4, #8
 8025bf6:	0a1b      	lsrs	r3, r3, #8
 8025bf8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025bfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025c00:	431c      	orrs	r4, r3
 8025c02:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8025c06:	b29b      	uxth	r3, r3
 8025c08:	b2e0      	uxtb	r0, r4
 8025c0a:	435a      	muls	r2, r3
 8025c0c:	fb10 f003 	smulbb	r0, r0, r3
 8025c10:	1c55      	adds	r5, r2, #1
 8025c12:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8025c16:	780a      	ldrb	r2, [r1, #0]
 8025c18:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8025c1c:	b2ed      	uxtb	r5, r5
 8025c1e:	fb02 0205 	mla	r2, r2, r5, r0
 8025c22:	b292      	uxth	r2, r2
 8025c24:	1c50      	adds	r0, r2, #1
 8025c26:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025c2a:	7848      	ldrb	r0, [r1, #1]
 8025c2c:	fb10 f005 	smulbb	r0, r0, r5
 8025c30:	1212      	asrs	r2, r2, #8
 8025c32:	700a      	strb	r2, [r1, #0]
 8025c34:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8025c38:	0c24      	lsrs	r4, r4, #16
 8025c3a:	fb02 0203 	mla	r2, r2, r3, r0
 8025c3e:	b292      	uxth	r2, r2
 8025c40:	1c50      	adds	r0, r2, #1
 8025c42:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025c46:	1212      	asrs	r2, r2, #8
 8025c48:	704a      	strb	r2, [r1, #1]
 8025c4a:	788a      	ldrb	r2, [r1, #2]
 8025c4c:	fb12 f505 	smulbb	r5, r2, r5
 8025c50:	fb04 5303 	mla	r3, r4, r3, r5
 8025c54:	b29b      	uxth	r3, r3
 8025c56:	1c5a      	adds	r2, r3, #1
 8025c58:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025c5c:	121b      	asrs	r3, r3, #8
 8025c5e:	708b      	strb	r3, [r1, #2]
 8025c60:	b003      	add	sp, #12
 8025c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c66:	bf00      	nop
 8025c68:	0803129e 	.word	0x0803129e
 8025c6c:	08031796 	.word	0x08031796
 8025c70:	08031367 	.word	0x08031367

08025c74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c78:	ed2d 8b08 	vpush	{d8-d11}
 8025c7c:	b09f      	sub	sp, #124	; 0x7c
 8025c7e:	eeb0 aa40 	vmov.f32	s20, s0
 8025c82:	eef0 9a60 	vmov.f32	s19, s1
 8025c86:	921b      	str	r2, [sp, #108]	; 0x6c
 8025c88:	eeb0 9a41 	vmov.f32	s18, s2
 8025c8c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8025c8e:	eeb0 8a62 	vmov.f32	s16, s5
 8025c92:	9309      	str	r3, [sp, #36]	; 0x24
 8025c94:	eef0 8a43 	vmov.f32	s17, s6
 8025c98:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8025c9c:	eef0 ba44 	vmov.f32	s23, s8
 8025ca0:	901d      	str	r0, [sp, #116]	; 0x74
 8025ca2:	eeb0 ba64 	vmov.f32	s22, s9
 8025ca6:	931c      	str	r3, [sp, #112]	; 0x70
 8025ca8:	eef0 aa45 	vmov.f32	s21, s10
 8025cac:	6850      	ldr	r0, [r2, #4]
 8025cae:	9119      	str	r1, [sp, #100]	; 0x64
 8025cb0:	6812      	ldr	r2, [r2, #0]
 8025cb2:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8025cb4:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8025cb8:	fb00 1303 	mla	r3, r0, r3, r1
 8025cbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025cc0:	18d3      	adds	r3, r2, r3
 8025cc2:	930c      	str	r3, [sp, #48]	; 0x30
 8025cc4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025cc6:	681b      	ldr	r3, [r3, #0]
 8025cc8:	9312      	str	r3, [sp, #72]	; 0x48
 8025cca:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025ccc:	685e      	ldr	r6, [r3, #4]
 8025cce:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8025cd2:	3604      	adds	r6, #4
 8025cd4:	930d      	str	r3, [sp, #52]	; 0x34
 8025cd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025cd8:	2b00      	cmp	r3, #0
 8025cda:	dc03      	bgt.n	8025ce4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8025cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025cde:	2b00      	cmp	r3, #0
 8025ce0:	f340 8378 	ble.w	80263d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8025ce4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025ce6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025cea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025cee:	1e48      	subs	r0, r1, #1
 8025cf0:	1e57      	subs	r7, r2, #1
 8025cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025cf4:	2b00      	cmp	r3, #0
 8025cf6:	f340 818c 	ble.w	8026012 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8025cfa:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8025cfc:	142b      	asrs	r3, r5, #16
 8025cfe:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025d02:	d406      	bmi.n	8025d12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8025d04:	4584      	cmp	ip, r0
 8025d06:	da04      	bge.n	8025d12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8025d08:	2b00      	cmp	r3, #0
 8025d0a:	db02      	blt.n	8025d12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8025d0c:	42bb      	cmp	r3, r7
 8025d0e:	f2c0 8181 	blt.w	8026014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8025d12:	f11c 0c01 	adds.w	ip, ip, #1
 8025d16:	f100 816f 	bmi.w	8025ff8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025d1a:	4561      	cmp	r1, ip
 8025d1c:	f2c0 816c 	blt.w	8025ff8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025d20:	3301      	adds	r3, #1
 8025d22:	f100 8169 	bmi.w	8025ff8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025d26:	429a      	cmp	r2, r3
 8025d28:	f2c0 8166 	blt.w	8025ff8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8025d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d2e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025d30:	931a      	str	r3, [sp, #104]	; 0x68
 8025d32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8025d34:	2b00      	cmp	r3, #0
 8025d36:	f340 818c 	ble.w	8026052 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8025d3a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8025d3c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025d40:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025d44:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025d48:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025d4a:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8025d4e:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8025d50:	141b      	asrs	r3, r3, #16
 8025d52:	f100 81d0 	bmi.w	80260f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8025d56:	f100 38ff 	add.w	r8, r0, #4294967295
 8025d5a:	4543      	cmp	r3, r8
 8025d5c:	f280 81cb 	bge.w	80260f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8025d60:	f1bc 0f00 	cmp.w	ip, #0
 8025d64:	f2c0 81c7 	blt.w	80260f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8025d68:	f10e 38ff 	add.w	r8, lr, #4294967295
 8025d6c:	45c4      	cmp	ip, r8
 8025d6e:	f280 81c2 	bge.w	80260f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8025d72:	b200      	sxth	r0, r0
 8025d74:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025d76:	fb0c 3300 	mla	r3, ip, r0, r3
 8025d7a:	eb04 0803 	add.w	r8, r4, r3
 8025d7e:	5ce3      	ldrb	r3, [r4, r3]
 8025d80:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025d84:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8025d88:	2a00      	cmp	r2, #0
 8025d8a:	f000 81a9 	beq.w	80260e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8025d8e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025d92:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025d96:	940e      	str	r4, [sp, #56]	; 0x38
 8025d98:	0e24      	lsrs	r4, r4, #24
 8025d9a:	9415      	str	r4, [sp, #84]	; 0x54
 8025d9c:	b179      	cbz	r1, 8025dbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8025d9e:	eb08 0c00 	add.w	ip, r8, r0
 8025da2:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025da6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025daa:	900a      	str	r0, [sp, #40]	; 0x28
 8025dac:	0e00      	lsrs	r0, r0, #24
 8025dae:	9013      	str	r0, [sp, #76]	; 0x4c
 8025db0:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8025db4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025db8:	900f      	str	r0, [sp, #60]	; 0x3c
 8025dba:	0e00      	lsrs	r0, r0, #24
 8025dbc:	9016      	str	r0, [sp, #88]	; 0x58
 8025dbe:	b292      	uxth	r2, r2
 8025dc0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025dc2:	b289      	uxth	r1, r1
 8025dc4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025dc6:	fb02 f901 	mul.w	r9, r2, r1
 8025dca:	0112      	lsls	r2, r2, #4
 8025dcc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025dd0:	eba2 0809 	sub.w	r8, r2, r9
 8025dd4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025dd8:	b289      	uxth	r1, r1
 8025dda:	fa1f f888 	uxth.w	r8, r8
 8025dde:	1a52      	subs	r2, r2, r1
 8025de0:	fb08 f000 	mul.w	r0, r8, r0
 8025de4:	b292      	uxth	r2, r2
 8025de6:	fb02 000e 	mla	r0, r2, lr, r0
 8025dea:	fb01 0004 	mla	r0, r1, r4, r0
 8025dee:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025df0:	fb09 0004 	mla	r0, r9, r4, r0
 8025df4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025df8:	2800      	cmp	r0, #0
 8025dfa:	f000 80f2 	beq.w	8025fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8025dfe:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025e02:	d01b      	beq.n	8025e3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8025e04:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025e08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025e0c:	fb0e fa0a 	mul.w	sl, lr, sl
 8025e10:	fb0e fe03 	mul.w	lr, lr, r3
 8025e14:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025e18:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025e1c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025e20:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025e24:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025e28:	4453      	add	r3, sl
 8025e2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e2e:	0a1b      	lsrs	r3, r3, #8
 8025e30:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025e34:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025e38:	ea43 030c 	orr.w	r3, r3, ip
 8025e3c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025e3e:	2cff      	cmp	r4, #255	; 0xff
 8025e40:	d021      	beq.n	8025e86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8025e42:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025e44:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025e48:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025e4a:	fb04 fb0b 	mul.w	fp, r4, fp
 8025e4e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025e50:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025e54:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025e56:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025e5a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025e5e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025e62:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025e66:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025e6a:	44de      	add	lr, fp
 8025e6c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025e70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025e74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025e78:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025e7c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025e80:	ea4e 040a 	orr.w	r4, lr, sl
 8025e84:	940e      	str	r4, [sp, #56]	; 0x38
 8025e86:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025e88:	2cff      	cmp	r4, #255	; 0xff
 8025e8a:	d021      	beq.n	8025ed0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8025e8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025e8e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025e92:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025e94:	fb04 fb0b 	mul.w	fp, r4, fp
 8025e98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025e9a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025e9e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025ea0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025ea4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025ea8:	fb04 fa0a 	mul.w	sl, r4, sl
 8025eac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025eb0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025eb4:	44de      	add	lr, fp
 8025eb6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025eba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025ebe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ec2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ec6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025eca:	ea4e 040a 	orr.w	r4, lr, sl
 8025ece:	940a      	str	r4, [sp, #40]	; 0x28
 8025ed0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025ed2:	2cff      	cmp	r4, #255	; 0xff
 8025ed4:	d021      	beq.n	8025f1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8025ed6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025ed8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025edc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025ede:	fb04 fb0b 	mul.w	fp, r4, fp
 8025ee2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025ee4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025ee8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025eea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025eee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025ef2:	fb04 fa0a 	mul.w	sl, r4, sl
 8025ef6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025efa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025efe:	44de      	add	lr, fp
 8025f00:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025f04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025f0c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025f10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025f14:	ea4e 040a 	orr.w	r4, lr, sl
 8025f18:	940f      	str	r4, [sp, #60]	; 0x3c
 8025f1a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025f1c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025f20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025f24:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025f28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025f2a:	fb08 fc0c 	mul.w	ip, r8, ip
 8025f2e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025f32:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025f36:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025f38:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025f3c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025f40:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025f42:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025f46:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025f4a:	fb08 f80e 	mul.w	r8, r8, lr
 8025f4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025f52:	fb02 8303 	mla	r3, r2, r3, r8
 8025f56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025f58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f5c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025f60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025f62:	fb01 330a 	mla	r3, r1, sl, r3
 8025f66:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8025f6a:	fb09 3901 	mla	r9, r9, r1, r3
 8025f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025f70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025f72:	4343      	muls	r3, r0
 8025f74:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025f78:	1c58      	adds	r0, r3, #1
 8025f7a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025f7e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025f82:	ea4c 0c09 	orr.w	ip, ip, r9
 8025f86:	783b      	ldrb	r3, [r7, #0]
 8025f88:	fa5f f28c 	uxtb.w	r2, ip
 8025f8c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025f90:	fb12 f201 	smulbb	r2, r2, r1
 8025f94:	b2c0      	uxtb	r0, r0
 8025f96:	fb03 2300 	mla	r3, r3, r0, r2
 8025f9a:	b29b      	uxth	r3, r3
 8025f9c:	1c5a      	adds	r2, r3, #1
 8025f9e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025fa2:	787a      	ldrb	r2, [r7, #1]
 8025fa4:	fb12 f200 	smulbb	r2, r2, r0
 8025fa8:	121b      	asrs	r3, r3, #8
 8025faa:	703b      	strb	r3, [r7, #0]
 8025fac:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8025fb0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025fb4:	fb03 2301 	mla	r3, r3, r1, r2
 8025fb8:	b29b      	uxth	r3, r3
 8025fba:	1c5a      	adds	r2, r3, #1
 8025fbc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025fc0:	121b      	asrs	r3, r3, #8
 8025fc2:	707b      	strb	r3, [r7, #1]
 8025fc4:	78bb      	ldrb	r3, [r7, #2]
 8025fc6:	fb13 f000 	smulbb	r0, r3, r0
 8025fca:	fb0c 0c01 	mla	ip, ip, r1, r0
 8025fce:	fa1f fc8c 	uxth.w	ip, ip
 8025fd2:	f10c 0301 	add.w	r3, ip, #1
 8025fd6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025fda:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025fde:	f887 c002 	strb.w	ip, [r7, #2]
 8025fe2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025fe4:	3703      	adds	r7, #3
 8025fe6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8025fe8:	441a      	add	r2, r3
 8025fea:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025fec:	441d      	add	r5, r3
 8025fee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8025ff0:	9231      	str	r2, [sp, #196]	; 0xc4
 8025ff2:	3b01      	subs	r3, #1
 8025ff4:	931a      	str	r3, [sp, #104]	; 0x68
 8025ff6:	e69c      	b.n	8025d32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8025ff8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025ffa:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8025ffc:	441c      	add	r4, r3
 8025ffe:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026000:	441d      	add	r5, r3
 8026002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026004:	9431      	str	r4, [sp, #196]	; 0xc4
 8026006:	3b01      	subs	r3, #1
 8026008:	9309      	str	r3, [sp, #36]	; 0x24
 802600a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802600c:	3303      	adds	r3, #3
 802600e:	930c      	str	r3, [sp, #48]	; 0x30
 8026010:	e66f      	b.n	8025cf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8026012:	d026      	beq.n	8026062 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026016:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8026018:	3b01      	subs	r3, #1
 802601a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802601c:	fb00 4003 	mla	r0, r0, r3, r4
 8026020:	1400      	asrs	r0, r0, #16
 8026022:	f53f ae83 	bmi.w	8025d2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8026026:	3901      	subs	r1, #1
 8026028:	4288      	cmp	r0, r1
 802602a:	f6bf ae7f 	bge.w	8025d2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802602e:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8026030:	fb01 5303 	mla	r3, r1, r3, r5
 8026034:	141b      	asrs	r3, r3, #16
 8026036:	f53f ae79 	bmi.w	8025d2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802603a:	3a01      	subs	r2, #1
 802603c:	4293      	cmp	r3, r2
 802603e:	f6bf ae75 	bge.w	8025d2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8026042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026044:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8026048:	f103 0e03 	add.w	lr, r3, #3
 802604c:	f1bb 0f00 	cmp.w	fp, #0
 8026050:	dc71      	bgt.n	8026136 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8026052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026054:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802605a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802605e:	4423      	add	r3, r4
 8026060:	930c      	str	r3, [sp, #48]	; 0x30
 8026062:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026064:	2b00      	cmp	r3, #0
 8026066:	f340 81b5 	ble.w	80263d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 802606a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802606e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026070:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026074:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026078:	eef0 6a48 	vmov.f32	s13, s16
 802607c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026080:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026084:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026088:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 802608c:	eef0 6a68 	vmov.f32	s13, s17
 8026090:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026094:	ee16 5a90 	vmov	r5, s13
 8026098:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802609c:	ee69 7a27 	vmul.f32	s15, s18, s15
 80260a0:	ee37 8a48 	vsub.f32	s16, s14, s16
 80260a4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80260a8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80260ac:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80260b0:	ee18 2a10 	vmov	r2, s16
 80260b4:	eeb0 8a47 	vmov.f32	s16, s14
 80260b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80260bc:	ee18 2a90 	vmov	r2, s17
 80260c0:	9333      	str	r3, [sp, #204]	; 0xcc
 80260c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80260c4:	eef0 8a67 	vmov.f32	s17, s15
 80260c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80260cc:	9334      	str	r3, [sp, #208]	; 0xd0
 80260ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80260d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80260d2:	3b01      	subs	r3, #1
 80260d4:	9319      	str	r3, [sp, #100]	; 0x64
 80260d6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80260d8:	bf08      	it	eq
 80260da:	4613      	moveq	r3, r2
 80260dc:	9309      	str	r3, [sp, #36]	; 0x24
 80260de:	e5fa      	b.n	8025cd6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80260e0:	2900      	cmp	r1, #0
 80260e2:	f43f ae6c 	beq.w	8025dbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80260e6:	f818 0000 	ldrb.w	r0, [r8, r0]
 80260ea:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80260ee:	900a      	str	r0, [sp, #40]	; 0x28
 80260f0:	0e00      	lsrs	r0, r0, #24
 80260f2:	9013      	str	r0, [sp, #76]	; 0x4c
 80260f4:	e663      	b.n	8025dbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80260f6:	f113 0801 	adds.w	r8, r3, #1
 80260fa:	f53f af72 	bmi.w	8025fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80260fe:	4540      	cmp	r0, r8
 8026100:	f6ff af6f 	blt.w	8025fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026104:	f11c 0801 	adds.w	r8, ip, #1
 8026108:	f53f af6b 	bmi.w	8025fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802610c:	45c6      	cmp	lr, r8
 802610e:	f6ff af68 	blt.w	8025fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026112:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026114:	b200      	sxth	r0, r0
 8026116:	9302      	str	r3, [sp, #8]
 8026118:	fa0f f38e 	sxth.w	r3, lr
 802611c:	9000      	str	r0, [sp, #0]
 802611e:	9301      	str	r3, [sp, #4]
 8026120:	4633      	mov	r3, r6
 8026122:	981d      	ldr	r0, [sp, #116]	; 0x74
 8026124:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8026128:	e9cd c203 	strd	ip, r2, [sp, #12]
 802612c:	4639      	mov	r1, r7
 802612e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026130:	f7ff fc60 	bl	80259f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8026134:	e755      	b.n	8025fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026136:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8026138:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802613c:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802613e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026142:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8026144:	1427      	asrs	r7, r4, #16
 8026146:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026148:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802614c:	142b      	asrs	r3, r5, #16
 802614e:	fb01 7303 	mla	r3, r1, r3, r7
 8026152:	18e7      	adds	r7, r4, r3
 8026154:	5ce3      	ldrb	r3, [r4, r3]
 8026156:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802615a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802615e:	2a00      	cmp	r2, #0
 8026160:	f000 812e 	beq.w	80263c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 8026164:	f897 8001 	ldrb.w	r8, [r7, #1]
 8026168:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 802616c:	9410      	str	r4, [sp, #64]	; 0x40
 802616e:	0e24      	lsrs	r4, r4, #24
 8026170:	9417      	str	r4, [sp, #92]	; 0x5c
 8026172:	b170      	cbz	r0, 8026192 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 8026174:	eb07 0801 	add.w	r8, r7, r1
 8026178:	5c79      	ldrb	r1, [r7, r1]
 802617a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802617e:	910b      	str	r1, [sp, #44]	; 0x2c
 8026180:	0e09      	lsrs	r1, r1, #24
 8026182:	9114      	str	r1, [sp, #80]	; 0x50
 8026184:	f898 1001 	ldrb.w	r1, [r8, #1]
 8026188:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802618c:	9111      	str	r1, [sp, #68]	; 0x44
 802618e:	0e09      	lsrs	r1, r1, #24
 8026190:	9118      	str	r1, [sp, #96]	; 0x60
 8026192:	b292      	uxth	r2, r2
 8026194:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8026196:	b280      	uxth	r0, r0
 8026198:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802619a:	fb02 f900 	mul.w	r9, r2, r0
 802619e:	0112      	lsls	r2, r2, #4
 80261a0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80261a4:	eba2 0809 	sub.w	r8, r2, r9
 80261a8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80261ac:	b280      	uxth	r0, r0
 80261ae:	fa1f f888 	uxth.w	r8, r8
 80261b2:	1a12      	subs	r2, r2, r0
 80261b4:	fb08 f101 	mul.w	r1, r8, r1
 80261b8:	b292      	uxth	r2, r2
 80261ba:	fb02 110c 	mla	r1, r2, ip, r1
 80261be:	fb00 1104 	mla	r1, r0, r4, r1
 80261c2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80261c4:	fb09 1104 	mla	r1, r9, r4, r1
 80261c8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80261cc:	2900      	cmp	r1, #0
 80261ce:	f000 80ec 	beq.w	80263aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 80261d2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80261d6:	d019      	beq.n	802620c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 80261d8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80261dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80261e0:	fb0c fa0a 	mul.w	sl, ip, sl
 80261e4:	fb0c fc03 	mul.w	ip, ip, r3
 80261e8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80261ec:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80261f0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80261f4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80261f8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80261fc:	4453      	add	r3, sl
 80261fe:	0a3f      	lsrs	r7, r7, #8
 8026200:	0a1b      	lsrs	r3, r3, #8
 8026202:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026206:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802620a:	433b      	orrs	r3, r7
 802620c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802620e:	2cff      	cmp	r4, #255	; 0xff
 8026210:	d020      	beq.n	8026254 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 8026212:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026214:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026218:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802621a:	4367      	muls	r7, r4
 802621c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802621e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026222:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026226:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026228:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802622c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026230:	fb04 fa0a 	mul.w	sl, r4, sl
 8026234:	44bc      	add	ip, r7
 8026236:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802623a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802623e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026242:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026246:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802624a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802624e:	ea4c 040a 	orr.w	r4, ip, sl
 8026252:	9410      	str	r4, [sp, #64]	; 0x40
 8026254:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026256:	2cff      	cmp	r4, #255	; 0xff
 8026258:	d020      	beq.n	802629c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 802625a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802625c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026260:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026262:	4367      	muls	r7, r4
 8026264:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026266:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802626a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802626e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026270:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026274:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026278:	fb04 fa0a 	mul.w	sl, r4, sl
 802627c:	44bc      	add	ip, r7
 802627e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026282:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026286:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802628a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802628e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026292:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026296:	ea4c 040a 	orr.w	r4, ip, sl
 802629a:	940b      	str	r4, [sp, #44]	; 0x2c
 802629c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802629e:	2cff      	cmp	r4, #255	; 0xff
 80262a0:	d020      	beq.n	80262e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 80262a2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80262a4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80262a8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80262aa:	4367      	muls	r7, r4
 80262ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80262ae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80262b2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80262b6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80262b8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80262bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80262c0:	fb04 fa0a 	mul.w	sl, r4, sl
 80262c4:	44bc      	add	ip, r7
 80262c6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80262ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80262ce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80262d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80262d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80262da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80262de:	ea4c 040a 	orr.w	r4, ip, sl
 80262e2:	9411      	str	r4, [sp, #68]	; 0x44
 80262e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80262e6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80262ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80262ee:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80262f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80262f4:	fb08 f707 	mul.w	r7, r8, r7
 80262f8:	fb02 770c 	mla	r7, r2, ip, r7
 80262fc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026300:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026302:	fb00 770c 	mla	r7, r0, ip, r7
 8026306:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802630a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802630c:	fb09 770c 	mla	r7, r9, ip, r7
 8026310:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026314:	fb08 f80c 	mul.w	r8, r8, ip
 8026318:	0a3f      	lsrs	r7, r7, #8
 802631a:	fb02 8303 	mla	r3, r2, r3, r8
 802631e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026320:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026324:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026328:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802632a:	fb00 330a 	mla	r3, r0, sl, r3
 802632e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8026332:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026334:	fb09 3c0c 	mla	ip, r9, ip, r3
 8026338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802633a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802633e:	434b      	muls	r3, r1
 8026340:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026344:	1c59      	adds	r1, r3, #1
 8026346:	ea47 070c 	orr.w	r7, r7, ip
 802634a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802634e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8026352:	b2fa      	uxtb	r2, r7
 8026354:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026358:	fb12 f200 	smulbb	r2, r2, r0
 802635c:	b2c9      	uxtb	r1, r1
 802635e:	fb03 2301 	mla	r3, r3, r1, r2
 8026362:	b29b      	uxth	r3, r3
 8026364:	1c5a      	adds	r2, r3, #1
 8026366:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802636a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802636e:	fb12 f201 	smulbb	r2, r2, r1
 8026372:	121b      	asrs	r3, r3, #8
 8026374:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8026378:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802637c:	0c3f      	lsrs	r7, r7, #16
 802637e:	fb03 2300 	mla	r3, r3, r0, r2
 8026382:	b29b      	uxth	r3, r3
 8026384:	1c5a      	adds	r2, r3, #1
 8026386:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802638a:	121b      	asrs	r3, r3, #8
 802638c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8026390:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8026394:	fb13 f101 	smulbb	r1, r3, r1
 8026398:	fb07 1700 	mla	r7, r7, r0, r1
 802639c:	b2bf      	uxth	r7, r7
 802639e:	1c7b      	adds	r3, r7, #1
 80263a0:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80263a4:	123f      	asrs	r7, r7, #8
 80263a6:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80263aa:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80263ac:	f10e 0e03 	add.w	lr, lr, #3
 80263b0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80263b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80263b6:	441a      	add	r2, r3
 80263b8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80263ba:	9231      	str	r2, [sp, #196]	; 0xc4
 80263bc:	441d      	add	r5, r3
 80263be:	e645      	b.n	802604c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 80263c0:	2800      	cmp	r0, #0
 80263c2:	f43f aee6 	beq.w	8026192 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80263c6:	5c79      	ldrb	r1, [r7, r1]
 80263c8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80263cc:	910b      	str	r1, [sp, #44]	; 0x2c
 80263ce:	0e09      	lsrs	r1, r1, #24
 80263d0:	9114      	str	r1, [sp, #80]	; 0x50
 80263d2:	e6de      	b.n	8026192 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 80263d4:	b01f      	add	sp, #124	; 0x7c
 80263d6:	ecbd 8b08 	vpop	{d8-d11}
 80263da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080263e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80263e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80263e4:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 80263e8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80263ec:	2c00      	cmp	r4, #0
 80263ee:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80263f2:	fb04 060c 	mla	r6, r4, ip, r0
 80263f6:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80263fa:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80263fe:	eb02 0e06 	add.w	lr, r2, r6
 8026402:	db3d      	blt.n	8026480 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8026404:	45a0      	cmp	r8, r4
 8026406:	dd3b      	ble.n	8026480 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 8026408:	2800      	cmp	r0, #0
 802640a:	db37      	blt.n	802647c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802640c:	4584      	cmp	ip, r0
 802640e:	dd35      	ble.n	802647c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8026410:	5d92      	ldrb	r2, [r2, r6]
 8026412:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026416:	1c46      	adds	r6, r0, #1
 8026418:	d435      	bmi.n	8026486 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 802641a:	45b4      	cmp	ip, r6
 802641c:	dd33      	ble.n	8026486 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 802641e:	b3a5      	cbz	r5, 802648a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 8026420:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026424:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8026428:	3401      	adds	r4, #1
 802642a:	d432      	bmi.n	8026492 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 802642c:	45a0      	cmp	r8, r4
 802642e:	dd30      	ble.n	8026492 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8026430:	b397      	cbz	r7, 8026498 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 8026432:	2800      	cmp	r0, #0
 8026434:	db2b      	blt.n	802648e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 8026436:	4584      	cmp	ip, r0
 8026438:	dd29      	ble.n	802648e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 802643a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802643e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8026442:	3001      	adds	r0, #1
 8026444:	d42b      	bmi.n	802649e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 8026446:	4584      	cmp	ip, r0
 8026448:	dd29      	ble.n	802649e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 802644a:	b355      	cbz	r5, 80264a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 802644c:	44f4      	add	ip, lr
 802644e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8026452:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8026456:	2d0f      	cmp	r5, #15
 8026458:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802645c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026460:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026464:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8026468:	d801      	bhi.n	802646e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 802646a:	2f0f      	cmp	r7, #15
 802646c:	d91b      	bls.n	80264a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 802646e:	4b7f      	ldr	r3, [pc, #508]	; (802666c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8026470:	f240 1157 	movw	r1, #343	; 0x157
 8026474:	4a7e      	ldr	r2, [pc, #504]	; (8026670 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8026476:	487f      	ldr	r0, [pc, #508]	; (8026674 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8026478:	f005 f9f6 	bl	802b868 <__assert_func>
 802647c:	2200      	movs	r2, #0
 802647e:	e7ca      	b.n	8026416 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 8026480:	2600      	movs	r6, #0
 8026482:	4632      	mov	r2, r6
 8026484:	e7d0      	b.n	8026428 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 8026486:	2600      	movs	r6, #0
 8026488:	e7ce      	b.n	8026428 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 802648a:	462e      	mov	r6, r5
 802648c:	e7cc      	b.n	8026428 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 802648e:	2400      	movs	r4, #0
 8026490:	e7d7      	b.n	8026442 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 8026492:	2300      	movs	r3, #0
 8026494:	461c      	mov	r4, r3
 8026496:	e7de      	b.n	8026456 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 8026498:	463b      	mov	r3, r7
 802649a:	463c      	mov	r4, r7
 802649c:	e7db      	b.n	8026456 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 802649e:	2300      	movs	r3, #0
 80264a0:	e7d9      	b.n	8026456 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80264a2:	462b      	mov	r3, r5
 80264a4:	e7d7      	b.n	8026456 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 80264a6:	b2a8      	uxth	r0, r5
 80264a8:	b2bf      	uxth	r7, r7
 80264aa:	fb07 fe00 	mul.w	lr, r7, r0
 80264ae:	0100      	lsls	r0, r0, #4
 80264b0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80264b4:	eba0 0c0e 	sub.w	ip, r0, lr
 80264b8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80264bc:	b2bf      	uxth	r7, r7
 80264be:	fa1f fc8c 	uxth.w	ip, ip
 80264c2:	1bc5      	subs	r5, r0, r7
 80264c4:	fb0c f00a 	mul.w	r0, ip, sl
 80264c8:	b2ad      	uxth	r5, r5
 80264ca:	fb05 000b 	mla	r0, r5, fp, r0
 80264ce:	fb07 0009 	mla	r0, r7, r9, r0
 80264d2:	fb0e 0008 	mla	r0, lr, r8, r0
 80264d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80264da:	9001      	str	r0, [sp, #4]
 80264dc:	2800      	cmp	r0, #0
 80264de:	f000 80c2 	beq.w	8026666 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 80264e2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80264e6:	d018      	beq.n	802651a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 80264e8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80264ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80264f0:	fb0b f000 	mul.w	r0, fp, r0
 80264f4:	fb0b fb02 	mul.w	fp, fp, r2
 80264f8:	0a02      	lsrs	r2, r0, #8
 80264fa:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80264fe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026502:	4402      	add	r2, r0
 8026504:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8026508:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802650c:	0a12      	lsrs	r2, r2, #8
 802650e:	0a00      	lsrs	r0, r0, #8
 8026510:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026514:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026518:	4302      	orrs	r2, r0
 802651a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802651e:	d01a      	beq.n	8026556 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 8026520:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8026524:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026528:	fb0a f000 	mul.w	r0, sl, r0
 802652c:	fb0a fa06 	mul.w	sl, sl, r6
 8026530:	0a06      	lsrs	r6, r0, #8
 8026532:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8026536:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802653a:	4406      	add	r6, r0
 802653c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8026540:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8026544:	0a36      	lsrs	r6, r6, #8
 8026546:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802654a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802654e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026552:	ea46 060a 	orr.w	r6, r6, sl
 8026556:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802655a:	d01b      	beq.n	8026594 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 802655c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026560:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026564:	fb09 fa0a 	mul.w	sl, r9, sl
 8026568:	fb09 f004 	mul.w	r0, r9, r4
 802656c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026570:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026574:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8026578:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802657c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8026580:	4454      	add	r4, sl
 8026582:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026586:	0a24      	lsrs	r4, r4, #8
 8026588:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802658c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026590:	ea44 0409 	orr.w	r4, r4, r9
 8026594:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026598:	d01b      	beq.n	80265d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 802659a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802659e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80265a2:	fb08 f909 	mul.w	r9, r8, r9
 80265a6:	fb08 f003 	mul.w	r0, r8, r3
 80265aa:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80265ae:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80265b2:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80265b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80265ba:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80265be:	444b      	add	r3, r9
 80265c0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80265c4:	0a1b      	lsrs	r3, r3, #8
 80265c6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80265ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80265ce:	ea43 0308 	orr.w	r3, r3, r8
 80265d2:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80265d6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80265da:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 80265de:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80265e2:	fb0c f000 	mul.w	r0, ip, r0
 80265e6:	fb0c f606 	mul.w	r6, ip, r6
 80265ea:	fb05 0808 	mla	r8, r5, r8, r0
 80265ee:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80265f2:	fb05 6502 	mla	r5, r5, r2, r6
 80265f6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80265fa:	fb07 8800 	mla	r8, r7, r0, r8
 80265fe:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8026602:	fb07 5704 	mla	r7, r7, r4, r5
 8026606:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802660a:	fb0e 8000 	mla	r0, lr, r0, r8
 802660e:	780a      	ldrb	r2, [r1, #0]
 8026610:	fb0e 7e03 	mla	lr, lr, r3, r7
 8026614:	9b01      	ldr	r3, [sp, #4]
 8026616:	0a00      	lsrs	r0, r0, #8
 8026618:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802661c:	43db      	mvns	r3, r3
 802661e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026622:	b2db      	uxtb	r3, r3
 8026624:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026628:	ea40 0e0e 	orr.w	lr, r0, lr
 802662c:	fb02 f003 	mul.w	r0, r2, r3
 8026630:	1c42      	adds	r2, r0, #1
 8026632:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026636:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802663a:	700a      	strb	r2, [r1, #0]
 802663c:	784a      	ldrb	r2, [r1, #1]
 802663e:	435a      	muls	r2, r3
 8026640:	1c50      	adds	r0, r2, #1
 8026642:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026646:	ea4f 221e 	mov.w	r2, lr, lsr #8
 802664a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802664e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026652:	704a      	strb	r2, [r1, #1]
 8026654:	788a      	ldrb	r2, [r1, #2]
 8026656:	4353      	muls	r3, r2
 8026658:	1c5a      	adds	r2, r3, #1
 802665a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802665e:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8026662:	f881 e002 	strb.w	lr, [r1, #2]
 8026666:	b003      	add	sp, #12
 8026668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802666c:	0803129e 	.word	0x0803129e
 8026670:	08031796 	.word	0x08031796
 8026674:	08031367 	.word	0x08031367

08026678 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802667c:	ed2d 8b0a 	vpush	{d8-d12}
 8026680:	b09b      	sub	sp, #108	; 0x6c
 8026682:	eeb0 aa40 	vmov.f32	s20, s0
 8026686:	eef0 9a60 	vmov.f32	s19, s1
 802668a:	9218      	str	r2, [sp, #96]	; 0x60
 802668c:	eeb0 9a41 	vmov.f32	s18, s2
 8026690:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8026692:	eeb0 8a62 	vmov.f32	s16, s5
 8026696:	9019      	str	r0, [sp, #100]	; 0x64
 8026698:	eef0 8a43 	vmov.f32	s17, s6
 802669c:	6850      	ldr	r0, [r2, #4]
 802669e:	eeb0 ca44 	vmov.f32	s24, s8
 80266a2:	9116      	str	r1, [sp, #88]	; 0x58
 80266a4:	eef0 ba64 	vmov.f32	s23, s9
 80266a8:	9307      	str	r3, [sp, #28]
 80266aa:	eeb0 ba45 	vmov.f32	s22, s10
 80266ae:	6812      	ldr	r2, [r2, #0]
 80266b0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80266b4:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 80266b6:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 80266ba:	fb00 1303 	mla	r3, r0, r3, r1
 80266be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80266c2:	18d3      	adds	r3, r2, r3
 80266c4:	930a      	str	r3, [sp, #40]	; 0x28
 80266c6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80266c8:	681b      	ldr	r3, [r3, #0]
 80266ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80266cc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80266ce:	685e      	ldr	r6, [r3, #4]
 80266d0:	3604      	adds	r6, #4
 80266d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80266d4:	2b00      	cmp	r3, #0
 80266d6:	dc03      	bgt.n	80266e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80266d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80266da:	2b00      	cmp	r3, #0
 80266dc:	f340 834f 	ble.w	8026d7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80266e0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80266e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80266e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80266ea:	1e48      	subs	r0, r1, #1
 80266ec:	1e57      	subs	r7, r2, #1
 80266ee:	9b07      	ldr	r3, [sp, #28]
 80266f0:	2b00      	cmp	r3, #0
 80266f2:	f340 8178 	ble.w	80269e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80266f6:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80266f8:	142b      	asrs	r3, r5, #16
 80266fa:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80266fe:	d406      	bmi.n	802670e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026700:	4584      	cmp	ip, r0
 8026702:	da04      	bge.n	802670e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026704:	2b00      	cmp	r3, #0
 8026706:	db02      	blt.n	802670e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026708:	42bb      	cmp	r3, r7
 802670a:	f2c0 816d 	blt.w	80269e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802670e:	f11c 0c01 	adds.w	ip, ip, #1
 8026712:	f100 815b 	bmi.w	80269cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8026716:	4561      	cmp	r1, ip
 8026718:	f2c0 8158 	blt.w	80269cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802671c:	3301      	adds	r3, #1
 802671e:	f100 8155 	bmi.w	80269cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8026722:	429a      	cmp	r2, r3
 8026724:	f2c0 8152 	blt.w	80269cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8026728:	9b07      	ldr	r3, [sp, #28]
 802672a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802672c:	9317      	str	r3, [sp, #92]	; 0x5c
 802672e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026730:	2b00      	cmp	r3, #0
 8026732:	f340 8178 	ble.w	8026a26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026736:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026738:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802673c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026740:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026744:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026746:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802674a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 802674c:	141b      	asrs	r3, r3, #16
 802674e:	f100 81ba 	bmi.w	8026ac6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8026752:	f101 38ff 	add.w	r8, r1, #4294967295
 8026756:	4543      	cmp	r3, r8
 8026758:	f280 81b5 	bge.w	8026ac6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802675c:	f1bc 0f00 	cmp.w	ip, #0
 8026760:	f2c0 81b1 	blt.w	8026ac6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8026764:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026768:	45c4      	cmp	ip, r8
 802676a:	f280 81ac 	bge.w	8026ac6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802676e:	b209      	sxth	r1, r1
 8026770:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026772:	fb0c 3301 	mla	r3, ip, r1, r3
 8026776:	eb04 0803 	add.w	r8, r4, r3
 802677a:	5ce3      	ldrb	r3, [r4, r3]
 802677c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026780:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026784:	2a00      	cmp	r2, #0
 8026786:	f000 8193 	beq.w	8026ab0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 802678a:	f898 c001 	ldrb.w	ip, [r8, #1]
 802678e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026792:	940b      	str	r4, [sp, #44]	; 0x2c
 8026794:	0e24      	lsrs	r4, r4, #24
 8026796:	9412      	str	r4, [sp, #72]	; 0x48
 8026798:	b178      	cbz	r0, 80267ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 802679a:	eb08 0c01 	add.w	ip, r8, r1
 802679e:	f818 1001 	ldrb.w	r1, [r8, r1]
 80267a2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80267a6:	9108      	str	r1, [sp, #32]
 80267a8:	0e09      	lsrs	r1, r1, #24
 80267aa:	9110      	str	r1, [sp, #64]	; 0x40
 80267ac:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80267b0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80267b4:	910c      	str	r1, [sp, #48]	; 0x30
 80267b6:	0e09      	lsrs	r1, r1, #24
 80267b8:	9113      	str	r1, [sp, #76]	; 0x4c
 80267ba:	b292      	uxth	r2, r2
 80267bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80267be:	b280      	uxth	r0, r0
 80267c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80267c2:	fb02 f900 	mul.w	r9, r2, r0
 80267c6:	0112      	lsls	r2, r2, #4
 80267c8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80267cc:	eba2 0809 	sub.w	r8, r2, r9
 80267d0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80267d4:	b280      	uxth	r0, r0
 80267d6:	fa1f f888 	uxth.w	r8, r8
 80267da:	1a12      	subs	r2, r2, r0
 80267dc:	fb08 f101 	mul.w	r1, r8, r1
 80267e0:	b292      	uxth	r2, r2
 80267e2:	fb02 110e 	mla	r1, r2, lr, r1
 80267e6:	fb00 1104 	mla	r1, r0, r4, r1
 80267ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80267ec:	fb09 1104 	mla	r1, r9, r4, r1
 80267f0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80267f4:	2900      	cmp	r1, #0
 80267f6:	f000 80de 	beq.w	80269b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 80267fa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80267fe:	d01b      	beq.n	8026838 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8026800:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026804:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026808:	fb0e fa0a 	mul.w	sl, lr, sl
 802680c:	fb0e fe03 	mul.w	lr, lr, r3
 8026810:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026814:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026818:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802681c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026820:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026824:	4453      	add	r3, sl
 8026826:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802682a:	0a1b      	lsrs	r3, r3, #8
 802682c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026830:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026834:	ea43 030c 	orr.w	r3, r3, ip
 8026838:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802683a:	2cff      	cmp	r4, #255	; 0xff
 802683c:	d021      	beq.n	8026882 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802683e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026840:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026844:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026846:	fb04 fb0b 	mul.w	fp, r4, fp
 802684a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802684c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026850:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026852:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026856:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802685a:	fb04 fa0a 	mul.w	sl, r4, sl
 802685e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026862:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026866:	44de      	add	lr, fp
 8026868:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802686c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026870:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026874:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026878:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802687c:	ea4e 040a 	orr.w	r4, lr, sl
 8026880:	940b      	str	r4, [sp, #44]	; 0x2c
 8026882:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026884:	2cff      	cmp	r4, #255	; 0xff
 8026886:	d021      	beq.n	80268cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8026888:	9c08      	ldr	r4, [sp, #32]
 802688a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802688e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026890:	fb04 fb0b 	mul.w	fp, r4, fp
 8026894:	9c08      	ldr	r4, [sp, #32]
 8026896:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802689a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802689c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80268a0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80268a4:	fb04 fa0a 	mul.w	sl, r4, sl
 80268a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80268ac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80268b0:	44de      	add	lr, fp
 80268b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80268b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80268ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80268be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80268c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80268c6:	ea4e 040a 	orr.w	r4, lr, sl
 80268ca:	9408      	str	r4, [sp, #32]
 80268cc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80268ce:	2cff      	cmp	r4, #255	; 0xff
 80268d0:	d021      	beq.n	8026916 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80268d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80268d4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80268d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80268da:	fb04 fb0b 	mul.w	fp, r4, fp
 80268de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80268e0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80268e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80268e6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80268ea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80268ee:	fb04 fa0a 	mul.w	sl, r4, sl
 80268f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80268f6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80268fa:	44de      	add	lr, fp
 80268fc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026900:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026904:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026908:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802690c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026910:	ea4e 040a 	orr.w	r4, lr, sl
 8026914:	940c      	str	r4, [sp, #48]	; 0x30
 8026916:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026918:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802691c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026920:	43c9      	mvns	r1, r1
 8026922:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026926:	9c08      	ldr	r4, [sp, #32]
 8026928:	b2c9      	uxtb	r1, r1
 802692a:	fb08 fc0c 	mul.w	ip, r8, ip
 802692e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026932:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026936:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026938:	fb00 cc0e 	mla	ip, r0, lr, ip
 802693c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026940:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026942:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026946:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802694a:	fb08 f80e 	mul.w	r8, r8, lr
 802694e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026952:	fb02 8303 	mla	r3, r2, r3, r8
 8026956:	9a08      	ldr	r2, [sp, #32]
 8026958:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802695c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026962:	fb00 330a 	mla	r3, r0, sl, r3
 8026966:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802696a:	fb09 3900 	mla	r9, r9, r0, r3
 802696e:	783b      	ldrb	r3, [r7, #0]
 8026970:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026974:	fb03 f201 	mul.w	r2, r3, r1
 8026978:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802697c:	1c53      	adds	r3, r2, #1
 802697e:	ea4c 0c09 	orr.w	ip, ip, r9
 8026982:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026986:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802698a:	703b      	strb	r3, [r7, #0]
 802698c:	787b      	ldrb	r3, [r7, #1]
 802698e:	434b      	muls	r3, r1
 8026990:	1c5a      	adds	r2, r3, #1
 8026992:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026996:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802699a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802699e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80269a2:	707b      	strb	r3, [r7, #1]
 80269a4:	78bb      	ldrb	r3, [r7, #2]
 80269a6:	4359      	muls	r1, r3
 80269a8:	1c4b      	adds	r3, r1, #1
 80269aa:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80269ae:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80269b2:	f887 c002 	strb.w	ip, [r7, #2]
 80269b6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80269b8:	3703      	adds	r7, #3
 80269ba:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80269bc:	441a      	add	r2, r3
 80269be:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80269c0:	441d      	add	r5, r3
 80269c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80269c4:	922f      	str	r2, [sp, #188]	; 0xbc
 80269c6:	3b01      	subs	r3, #1
 80269c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80269ca:	e6b0      	b.n	802672e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80269cc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80269ce:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80269d0:	441c      	add	r4, r3
 80269d2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80269d4:	441d      	add	r5, r3
 80269d6:	9b07      	ldr	r3, [sp, #28]
 80269d8:	942f      	str	r4, [sp, #188]	; 0xbc
 80269da:	3b01      	subs	r3, #1
 80269dc:	9307      	str	r3, [sp, #28]
 80269de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80269e0:	3303      	adds	r3, #3
 80269e2:	930a      	str	r3, [sp, #40]	; 0x28
 80269e4:	e683      	b.n	80266ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80269e6:	d026      	beq.n	8026a36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80269e8:	9b07      	ldr	r3, [sp, #28]
 80269ea:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80269ec:	3b01      	subs	r3, #1
 80269ee:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 80269f0:	fb00 4003 	mla	r0, r0, r3, r4
 80269f4:	1400      	asrs	r0, r0, #16
 80269f6:	f53f ae97 	bmi.w	8026728 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80269fa:	3901      	subs	r1, #1
 80269fc:	4288      	cmp	r0, r1
 80269fe:	f6bf ae93 	bge.w	8026728 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8026a02:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8026a04:	fb01 5303 	mla	r3, r1, r3, r5
 8026a08:	141b      	asrs	r3, r3, #16
 8026a0a:	f53f ae8d 	bmi.w	8026728 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8026a0e:	3a01      	subs	r2, #1
 8026a10:	4293      	cmp	r3, r2
 8026a12:	f6bf ae89 	bge.w	8026728 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8026a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026a18:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026a1c:	f103 0e03 	add.w	lr, r3, #3
 8026a20:	f1bb 0f00 	cmp.w	fp, #0
 8026a24:	dc6d      	bgt.n	8026b02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8026a26:	9b07      	ldr	r3, [sp, #28]
 8026a28:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026a2e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026a32:	4423      	add	r3, r4
 8026a34:	930a      	str	r3, [sp, #40]	; 0x28
 8026a36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026a38:	2b00      	cmp	r3, #0
 8026a3a:	f340 81a0 	ble.w	8026d7e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8026a3e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8026a42:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026a44:	ee79 9aab 	vadd.f32	s19, s19, s23
 8026a48:	eef0 6a48 	vmov.f32	s13, s16
 8026a4c:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8026a50:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8026a54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a58:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 8026a5c:	eef0 6a68 	vmov.f32	s13, s17
 8026a60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a64:	ee16 5a90 	vmov	r5, s13
 8026a68:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026a6c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026a70:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026a74:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026a78:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026a7c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026a80:	ee18 2a10 	vmov	r2, s16
 8026a84:	eeb0 8a47 	vmov.f32	s16, s14
 8026a88:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a8c:	ee18 2a90 	vmov	r2, s17
 8026a90:	9331      	str	r3, [sp, #196]	; 0xc4
 8026a92:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026a94:	eef0 8a67 	vmov.f32	s17, s15
 8026a98:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a9c:	9332      	str	r3, [sp, #200]	; 0xc8
 8026a9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026aa0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8026aa2:	3b01      	subs	r3, #1
 8026aa4:	9316      	str	r3, [sp, #88]	; 0x58
 8026aa6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026aa8:	bf08      	it	eq
 8026aaa:	4613      	moveq	r3, r2
 8026aac:	9307      	str	r3, [sp, #28]
 8026aae:	e610      	b.n	80266d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8026ab0:	2800      	cmp	r0, #0
 8026ab2:	f43f ae82 	beq.w	80267ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8026ab6:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026aba:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026abe:	9108      	str	r1, [sp, #32]
 8026ac0:	0e09      	lsrs	r1, r1, #24
 8026ac2:	9110      	str	r1, [sp, #64]	; 0x40
 8026ac4:	e679      	b.n	80267ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8026ac6:	f113 0801 	adds.w	r8, r3, #1
 8026aca:	f53f af74 	bmi.w	80269b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8026ace:	4541      	cmp	r1, r8
 8026ad0:	f6ff af71 	blt.w	80269b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8026ad4:	f11c 0801 	adds.w	r8, ip, #1
 8026ad8:	f53f af6d 	bmi.w	80269b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8026adc:	45c6      	cmp	lr, r8
 8026ade:	f6ff af6a 	blt.w	80269b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8026ae2:	b209      	sxth	r1, r1
 8026ae4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8026ae8:	fa0f f38e 	sxth.w	r3, lr
 8026aec:	9100      	str	r1, [sp, #0]
 8026aee:	4639      	mov	r1, r7
 8026af0:	9301      	str	r3, [sp, #4]
 8026af2:	4633      	mov	r3, r6
 8026af4:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8026af8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026afa:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026afc:	f7ff fc70 	bl	80263e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8026b00:	e759      	b.n	80269b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8026b02:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026b04:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026b08:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8026b0a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026b0e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026b10:	1427      	asrs	r7, r4, #16
 8026b12:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026b14:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026b18:	142b      	asrs	r3, r5, #16
 8026b1a:	fb01 7303 	mla	r3, r1, r3, r7
 8026b1e:	18e7      	adds	r7, r4, r3
 8026b20:	5ce3      	ldrb	r3, [r4, r3]
 8026b22:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026b26:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026b2a:	2a00      	cmp	r2, #0
 8026b2c:	f000 811d 	beq.w	8026d6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8026b30:	f897 8001 	ldrb.w	r8, [r7, #1]
 8026b34:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8026b38:	940d      	str	r4, [sp, #52]	; 0x34
 8026b3a:	0e24      	lsrs	r4, r4, #24
 8026b3c:	9414      	str	r4, [sp, #80]	; 0x50
 8026b3e:	b170      	cbz	r0, 8026b5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8026b40:	eb07 0801 	add.w	r8, r7, r1
 8026b44:	5c79      	ldrb	r1, [r7, r1]
 8026b46:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026b4a:	9109      	str	r1, [sp, #36]	; 0x24
 8026b4c:	0e09      	lsrs	r1, r1, #24
 8026b4e:	9111      	str	r1, [sp, #68]	; 0x44
 8026b50:	f898 1001 	ldrb.w	r1, [r8, #1]
 8026b54:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026b58:	910e      	str	r1, [sp, #56]	; 0x38
 8026b5a:	0e09      	lsrs	r1, r1, #24
 8026b5c:	9115      	str	r1, [sp, #84]	; 0x54
 8026b5e:	b292      	uxth	r2, r2
 8026b60:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026b62:	b280      	uxth	r0, r0
 8026b64:	fb02 f900 	mul.w	r9, r2, r0
 8026b68:	0112      	lsls	r2, r2, #4
 8026b6a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026b6e:	eba2 0809 	sub.w	r8, r2, r9
 8026b72:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8026b76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026b78:	b280      	uxth	r0, r0
 8026b7a:	fa1f f888 	uxth.w	r8, r8
 8026b7e:	1a09      	subs	r1, r1, r0
 8026b80:	fb08 f202 	mul.w	r2, r8, r2
 8026b84:	b289      	uxth	r1, r1
 8026b86:	fb01 220c 	mla	r2, r1, ip, r2
 8026b8a:	fb00 2204 	mla	r2, r0, r4, r2
 8026b8e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026b90:	fb09 2204 	mla	r2, r9, r4, r2
 8026b94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026b98:	2a00      	cmp	r2, #0
 8026b9a:	f000 80db 	beq.w	8026d54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8026b9e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026ba2:	d019      	beq.n	8026bd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 8026ba4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026ba8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026bac:	fb0c fa0a 	mul.w	sl, ip, sl
 8026bb0:	fb0c fc03 	mul.w	ip, ip, r3
 8026bb4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026bb8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026bbc:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026bc0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026bc4:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026bc8:	4453      	add	r3, sl
 8026bca:	0a3f      	lsrs	r7, r7, #8
 8026bcc:	0a1b      	lsrs	r3, r3, #8
 8026bce:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026bd2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026bd6:	433b      	orrs	r3, r7
 8026bd8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026bda:	2cff      	cmp	r4, #255	; 0xff
 8026bdc:	d020      	beq.n	8026c20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 8026bde:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026be0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026be4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026be6:	4367      	muls	r7, r4
 8026be8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026bea:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026bee:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026bf2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026bf4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026bf8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026bfc:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c00:	44bc      	add	ip, r7
 8026c02:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026c06:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c0a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026c0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c12:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c16:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026c1a:	ea4c 040a 	orr.w	r4, ip, sl
 8026c1e:	940d      	str	r4, [sp, #52]	; 0x34
 8026c20:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026c22:	2cff      	cmp	r4, #255	; 0xff
 8026c24:	d020      	beq.n	8026c68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 8026c26:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026c28:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026c2c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026c2e:	4367      	muls	r7, r4
 8026c30:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026c32:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026c36:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026c3a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026c3c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026c40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c44:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c48:	44bc      	add	ip, r7
 8026c4a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026c4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c52:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026c56:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c5a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c5e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026c62:	ea4c 040a 	orr.w	r4, ip, sl
 8026c66:	9409      	str	r4, [sp, #36]	; 0x24
 8026c68:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026c6a:	2cff      	cmp	r4, #255	; 0xff
 8026c6c:	d020      	beq.n	8026cb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 8026c6e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026c70:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026c74:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026c76:	4367      	muls	r7, r4
 8026c78:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026c7a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026c7e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026c82:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026c84:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026c88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026c8c:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c90:	44bc      	add	ip, r7
 8026c92:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026c96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026c9a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026c9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ca2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ca6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026caa:	ea4c 040a 	orr.w	r4, ip, sl
 8026cae:	940e      	str	r4, [sp, #56]	; 0x38
 8026cb0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026cb2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026cb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026cba:	43d2      	mvns	r2, r2
 8026cbc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026cc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026cc2:	b2d2      	uxtb	r2, r2
 8026cc4:	fb08 f707 	mul.w	r7, r8, r7
 8026cc8:	fb01 770c 	mla	r7, r1, ip, r7
 8026ccc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026cd0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026cd2:	fb00 770c 	mla	r7, r0, ip, r7
 8026cd6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026cda:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026cdc:	fb09 770c 	mla	r7, r9, ip, r7
 8026ce0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026ce4:	fb08 f80c 	mul.w	r8, r8, ip
 8026ce8:	0a3f      	lsrs	r7, r7, #8
 8026cea:	fb01 8303 	mla	r3, r1, r3, r8
 8026cee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026cf0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026cf4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8026cf8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026cfa:	fb00 330a 	mla	r3, r0, sl, r3
 8026cfe:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8026d02:	fb09 3c0c 	mla	ip, r9, ip, r3
 8026d06:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8026d0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d0e:	fb03 f102 	mul.w	r1, r3, r2
 8026d12:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026d16:	1c4b      	adds	r3, r1, #1
 8026d18:	ea47 070c 	orr.w	r7, r7, ip
 8026d1c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026d20:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8026d24:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8026d28:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8026d2c:	4353      	muls	r3, r2
 8026d2e:	1c59      	adds	r1, r3, #1
 8026d30:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026d34:	0a3b      	lsrs	r3, r7, #8
 8026d36:	0c3f      	lsrs	r7, r7, #16
 8026d38:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026d3c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8026d40:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8026d44:	435a      	muls	r2, r3
 8026d46:	1c53      	adds	r3, r2, #1
 8026d48:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026d4c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8026d50:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8026d54:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8026d56:	f10e 0e03 	add.w	lr, lr, #3
 8026d5a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8026d5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026d60:	441a      	add	r2, r3
 8026d62:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8026d64:	922f      	str	r2, [sp, #188]	; 0xbc
 8026d66:	441d      	add	r5, r3
 8026d68:	e65a      	b.n	8026a20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8026d6a:	2800      	cmp	r0, #0
 8026d6c:	f43f aef7 	beq.w	8026b5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8026d70:	5c79      	ldrb	r1, [r7, r1]
 8026d72:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026d76:	9109      	str	r1, [sp, #36]	; 0x24
 8026d78:	0e09      	lsrs	r1, r1, #24
 8026d7a:	9111      	str	r1, [sp, #68]	; 0x44
 8026d7c:	e6ef      	b.n	8026b5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8026d7e:	b01b      	add	sp, #108	; 0x6c
 8026d80:	ecbd 8b0a 	vpop	{d8-d12}
 8026d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026d88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8026d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d8c:	b08d      	sub	sp, #52	; 0x34
 8026d8e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8026d92:	9103      	str	r1, [sp, #12]
 8026d94:	fb07 5803 	mla	r8, r7, r3, r5
 8026d98:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8026d9c:	9803      	ldr	r0, [sp, #12]
 8026d9e:	2f00      	cmp	r7, #0
 8026da0:	910b      	str	r1, [sp, #44]	; 0x2c
 8026da2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8026da6:	9903      	ldr	r1, [sp, #12]
 8026da8:	9c03      	ldr	r4, [sp, #12]
 8026daa:	eb02 0608 	add.w	r6, r2, r8
 8026dae:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8026db2:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8026db6:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8026dba:	7809      	ldrb	r1, [r1, #0]
 8026dbc:	7840      	ldrb	r0, [r0, #1]
 8026dbe:	78a4      	ldrb	r4, [r4, #2]
 8026dc0:	db51      	blt.n	8026e66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8026dc2:	45be      	cmp	lr, r7
 8026dc4:	dd4f      	ble.n	8026e66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8026dc6:	2d00      	cmp	r5, #0
 8026dc8:	db49      	blt.n	8026e5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8026dca:	42ab      	cmp	r3, r5
 8026dcc:	dd47      	ble.n	8026e5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8026dce:	f812 2008 	ldrb.w	r2, [r2, r8]
 8026dd2:	9204      	str	r2, [sp, #16]
 8026dd4:	7872      	ldrb	r2, [r6, #1]
 8026dd6:	9205      	str	r2, [sp, #20]
 8026dd8:	78b2      	ldrb	r2, [r6, #2]
 8026dda:	9206      	str	r2, [sp, #24]
 8026ddc:	1c6a      	adds	r2, r5, #1
 8026dde:	d449      	bmi.n	8026e74 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8026de0:	4293      	cmp	r3, r2
 8026de2:	dd47      	ble.n	8026e74 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8026de4:	f1bc 0f00 	cmp.w	ip, #0
 8026de8:	d044      	beq.n	8026e74 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8026dea:	7972      	ldrb	r2, [r6, #5]
 8026dec:	f896 b003 	ldrb.w	fp, [r6, #3]
 8026df0:	f896 a004 	ldrb.w	sl, [r6, #4]
 8026df4:	9201      	str	r2, [sp, #4]
 8026df6:	3701      	adds	r7, #1
 8026df8:	d444      	bmi.n	8026e84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8026dfa:	45be      	cmp	lr, r7
 8026dfc:	dd42      	ble.n	8026e84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8026dfe:	f1b9 0f00 	cmp.w	r9, #0
 8026e02:	f000 80c1 	beq.w	8026f88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8026e06:	2d00      	cmp	r5, #0
 8026e08:	db38      	blt.n	8026e7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8026e0a:	42ab      	cmp	r3, r5
 8026e0c:	dd36      	ble.n	8026e7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8026e0e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8026e12:	f816 8002 	ldrb.w	r8, [r6, r2]
 8026e16:	2203      	movs	r2, #3
 8026e18:	fb03 6702 	mla	r7, r3, r2, r6
 8026e1c:	fb03 6202 	mla	r2, r3, r2, r6
 8026e20:	787f      	ldrb	r7, [r7, #1]
 8026e22:	f892 e002 	ldrb.w	lr, [r2, #2]
 8026e26:	9702      	str	r7, [sp, #8]
 8026e28:	3501      	adds	r5, #1
 8026e2a:	d432      	bmi.n	8026e92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8026e2c:	42ab      	cmp	r3, r5
 8026e2e:	dd30      	ble.n	8026e92 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8026e30:	f1bc 0f00 	cmp.w	ip, #0
 8026e34:	d031      	beq.n	8026e9a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8026e36:	2703      	movs	r7, #3
 8026e38:	fb13 7207 	smlabb	r2, r3, r7, r7
 8026e3c:	5cb5      	ldrb	r5, [r6, r2]
 8026e3e:	fb03 6207 	mla	r2, r3, r7, r6
 8026e42:	fb03 6307 	mla	r3, r3, r7, r6
 8026e46:	7912      	ldrb	r2, [r2, #4]
 8026e48:	795e      	ldrb	r6, [r3, #5]
 8026e4a:	f1bc 0f0f 	cmp.w	ip, #15
 8026e4e:	d927      	bls.n	8026ea0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 8026e50:	4b53      	ldr	r3, [pc, #332]	; (8026fa0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 8026e52:	f240 1157 	movw	r1, #343	; 0x157
 8026e56:	4a53      	ldr	r2, [pc, #332]	; (8026fa4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8026e58:	4853      	ldr	r0, [pc, #332]	; (8026fa8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8026e5a:	f004 fd05 	bl	802b868 <__assert_func>
 8026e5e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8026e62:	9104      	str	r1, [sp, #16]
 8026e64:	e7ba      	b.n	8026ddc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8026e66:	9401      	str	r4, [sp, #4]
 8026e68:	4682      	mov	sl, r0
 8026e6a:	468b      	mov	fp, r1
 8026e6c:	9104      	str	r1, [sp, #16]
 8026e6e:	e9cd 0405 	strd	r0, r4, [sp, #20]
 8026e72:	e7c0      	b.n	8026df6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8026e74:	9401      	str	r4, [sp, #4]
 8026e76:	4682      	mov	sl, r0
 8026e78:	468b      	mov	fp, r1
 8026e7a:	e7bc      	b.n	8026df6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8026e7c:	46a6      	mov	lr, r4
 8026e7e:	9002      	str	r0, [sp, #8]
 8026e80:	4688      	mov	r8, r1
 8026e82:	e7d1      	b.n	8026e28 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8026e84:	4626      	mov	r6, r4
 8026e86:	4602      	mov	r2, r0
 8026e88:	460d      	mov	r5, r1
 8026e8a:	46a6      	mov	lr, r4
 8026e8c:	9002      	str	r0, [sp, #8]
 8026e8e:	4688      	mov	r8, r1
 8026e90:	e7db      	b.n	8026e4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8026e92:	4626      	mov	r6, r4
 8026e94:	4602      	mov	r2, r0
 8026e96:	460d      	mov	r5, r1
 8026e98:	e7d7      	b.n	8026e4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8026e9a:	4626      	mov	r6, r4
 8026e9c:	4602      	mov	r2, r0
 8026e9e:	460d      	mov	r5, r1
 8026ea0:	f1b9 0f0f 	cmp.w	r9, #15
 8026ea4:	d8d4      	bhi.n	8026e50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8026ea6:	fa1f f38c 	uxth.w	r3, ip
 8026eaa:	fa1f fc89 	uxth.w	ip, r9
 8026eae:	fb03 f70c 	mul.w	r7, r3, ip
 8026eb2:	011b      	lsls	r3, r3, #4
 8026eb4:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8026eb8:	9707      	str	r7, [sp, #28]
 8026eba:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8026ebe:	fa1f fc8c 	uxth.w	ip, ip
 8026ec2:	eba7 070c 	sub.w	r7, r7, ip
 8026ec6:	b2bf      	uxth	r7, r7
 8026ec8:	9709      	str	r7, [sp, #36]	; 0x24
 8026eca:	9f07      	ldr	r7, [sp, #28]
 8026ecc:	1bdb      	subs	r3, r3, r7
 8026ece:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8026ed2:	b29b      	uxth	r3, r3
 8026ed4:	9708      	str	r7, [sp, #32]
 8026ed6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8026ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8026eda:	ea6f 0907 	mvn.w	r9, r7
 8026ede:	fb03 fb0b 	mul.w	fp, r3, fp
 8026ee2:	9f04      	ldr	r7, [sp, #16]
 8026ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ee6:	fa5f f989 	uxtb.w	r9, r9
 8026eea:	fb03 bb07 	mla	fp, r3, r7, fp
 8026eee:	9f07      	ldr	r7, [sp, #28]
 8026ef0:	fb11 f109 	smulbb	r1, r1, r9
 8026ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026ef6:	fb0c b808 	mla	r8, ip, r8, fp
 8026efa:	fb10 f009 	smulbb	r0, r0, r9
 8026efe:	fb14 f409 	smulbb	r4, r4, r9
 8026f02:	fb07 8805 	mla	r8, r7, r5, r8
 8026f06:	9d08      	ldr	r5, [sp, #32]
 8026f08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026f0a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8026f0e:	fb08 1805 	mla	r8, r8, r5, r1
 8026f12:	9d05      	ldr	r5, [sp, #20]
 8026f14:	fa1f f888 	uxth.w	r8, r8
 8026f18:	f108 0101 	add.w	r1, r8, #1
 8026f1c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8026f20:	9903      	ldr	r1, [sp, #12]
 8026f22:	ea4f 2828 	mov.w	r8, r8, asr #8
 8026f26:	f881 8000 	strb.w	r8, [r1]
 8026f2a:	fb03 f10a 	mul.w	r1, r3, sl
 8026f2e:	fb07 1105 	mla	r1, r7, r5, r1
 8026f32:	9d02      	ldr	r5, [sp, #8]
 8026f34:	fb0c 1105 	mla	r1, ip, r5, r1
 8026f38:	9d07      	ldr	r5, [sp, #28]
 8026f3a:	fb05 1102 	mla	r1, r5, r2, r1
 8026f3e:	9a08      	ldr	r2, [sp, #32]
 8026f40:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026f44:	fb01 0102 	mla	r1, r1, r2, r0
 8026f48:	9a03      	ldr	r2, [sp, #12]
 8026f4a:	b289      	uxth	r1, r1
 8026f4c:	1c48      	adds	r0, r1, #1
 8026f4e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8026f52:	1209      	asrs	r1, r1, #8
 8026f54:	7051      	strb	r1, [r2, #1]
 8026f56:	9a01      	ldr	r2, [sp, #4]
 8026f58:	4353      	muls	r3, r2
 8026f5a:	9a06      	ldr	r2, [sp, #24]
 8026f5c:	fb07 3702 	mla	r7, r7, r2, r3
 8026f60:	9b08      	ldr	r3, [sp, #32]
 8026f62:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8026f66:	fb05 c606 	mla	r6, r5, r6, ip
 8026f6a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026f6e:	fb06 4603 	mla	r6, r6, r3, r4
 8026f72:	9b03      	ldr	r3, [sp, #12]
 8026f74:	b2b6      	uxth	r6, r6
 8026f76:	f106 0e01 	add.w	lr, r6, #1
 8026f7a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8026f7e:	1236      	asrs	r6, r6, #8
 8026f80:	709e      	strb	r6, [r3, #2]
 8026f82:	b00d      	add	sp, #52	; 0x34
 8026f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f88:	f1bc 0f0f 	cmp.w	ip, #15
 8026f8c:	f63f af60 	bhi.w	8026e50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8026f90:	4626      	mov	r6, r4
 8026f92:	4602      	mov	r2, r0
 8026f94:	460d      	mov	r5, r1
 8026f96:	46a6      	mov	lr, r4
 8026f98:	9002      	str	r0, [sp, #8]
 8026f9a:	4688      	mov	r8, r1
 8026f9c:	e783      	b.n	8026ea6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8026f9e:	bf00      	nop
 8026fa0:	0803129e 	.word	0x0803129e
 8026fa4:	08031796 	.word	0x08031796
 8026fa8:	08031367 	.word	0x08031367

08026fac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fb0:	ed2d 8b08 	vpush	{d8-d11}
 8026fb4:	b09f      	sub	sp, #124	; 0x7c
 8026fb6:	eeb0 aa40 	vmov.f32	s20, s0
 8026fba:	eef0 9a60 	vmov.f32	s19, s1
 8026fbe:	920e      	str	r2, [sp, #56]	; 0x38
 8026fc0:	eeb0 9a41 	vmov.f32	s18, s2
 8026fc4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8026fc6:	eeb0 8a62 	vmov.f32	s16, s5
 8026fca:	9307      	str	r3, [sp, #28]
 8026fcc:	eef0 8a43 	vmov.f32	s17, s6
 8026fd0:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8026fd4:	eef0 ba44 	vmov.f32	s23, s8
 8026fd8:	901d      	str	r0, [sp, #116]	; 0x74
 8026fda:	eeb0 ba64 	vmov.f32	s22, s9
 8026fde:	930c      	str	r3, [sp, #48]	; 0x30
 8026fe0:	eef0 aa45 	vmov.f32	s21, s10
 8026fe4:	6850      	ldr	r0, [r2, #4]
 8026fe6:	910b      	str	r1, [sp, #44]	; 0x2c
 8026fe8:	6812      	ldr	r2, [r2, #0]
 8026fea:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8026fee:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 8026ff2:	fb00 1303 	mla	r3, r0, r3, r1
 8026ff6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026ffa:	18d3      	adds	r3, r2, r3
 8026ffc:	9308      	str	r3, [sp, #32]
 8026ffe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8027000:	681b      	ldr	r3, [r3, #0]
 8027002:	930a      	str	r3, [sp, #40]	; 0x28
 8027004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027006:	43db      	mvns	r3, r3
 8027008:	b2db      	uxtb	r3, r3
 802700a:	9309      	str	r3, [sp, #36]	; 0x24
 802700c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802700e:	2b00      	cmp	r3, #0
 8027010:	dc03      	bgt.n	802701a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027014:	2b00      	cmp	r3, #0
 8027016:	f340 81f5 	ble.w	8027404 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 802701a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802701c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027020:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027024:	1e48      	subs	r0, r1, #1
 8027026:	1e54      	subs	r4, r2, #1
 8027028:	9b07      	ldr	r3, [sp, #28]
 802702a:	2b00      	cmp	r3, #0
 802702c:	f340 80d5 	ble.w	80271da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8027030:	ea5f 452a 	movs.w	r5, sl, asr #16
 8027034:	ea4f 4328 	mov.w	r3, r8, asr #16
 8027038:	d406      	bmi.n	8027048 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802703a:	4285      	cmp	r5, r0
 802703c:	da04      	bge.n	8027048 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802703e:	2b00      	cmp	r3, #0
 8027040:	db02      	blt.n	8027048 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8027042:	42a3      	cmp	r3, r4
 8027044:	f2c0 80ca 	blt.w	80271dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8027048:	3501      	adds	r5, #1
 802704a:	f100 80bb 	bmi.w	80271c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802704e:	42a9      	cmp	r1, r5
 8027050:	f2c0 80b8 	blt.w	80271c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8027054:	3301      	adds	r3, #1
 8027056:	f100 80b5 	bmi.w	80271c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802705a:	429a      	cmp	r2, r3
 802705c:	f2c0 80b2 	blt.w	80271c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8027060:	9b07      	ldr	r3, [sp, #28]
 8027062:	9d08      	ldr	r5, [sp, #32]
 8027064:	930d      	str	r3, [sp, #52]	; 0x34
 8027066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027068:	2b00      	cmp	r3, #0
 802706a:	f340 80d6 	ble.w	802721a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802706e:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8027070:	ea4f 4428 	mov.w	r4, r8, asr #16
 8027074:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8027076:	f3ca 3203 	ubfx	r2, sl, #12, #4
 802707a:	68c6      	ldr	r6, [r0, #12]
 802707c:	ea5f 402a 	movs.w	r0, sl, asr #16
 8027080:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8027084:	689b      	ldr	r3, [r3, #8]
 8027086:	f100 810f 	bmi.w	80272a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802708a:	1e5f      	subs	r7, r3, #1
 802708c:	42b8      	cmp	r0, r7
 802708e:	f280 810b 	bge.w	80272a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027092:	2c00      	cmp	r4, #0
 8027094:	f2c0 8108 	blt.w	80272a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027098:	1e77      	subs	r7, r6, #1
 802709a:	42bc      	cmp	r4, r7
 802709c:	f280 8104 	bge.w	80272a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80270a0:	b21b      	sxth	r3, r3
 80270a2:	fb04 0003 	mla	r0, r4, r3, r0
 80270a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80270a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80270ac:	1826      	adds	r6, r4, r0
 80270ae:	5c24      	ldrb	r4, [r4, r0]
 80270b0:	78b7      	ldrb	r7, [r6, #2]
 80270b2:	7870      	ldrb	r0, [r6, #1]
 80270b4:	970f      	str	r7, [sp, #60]	; 0x3c
 80270b6:	7977      	ldrb	r7, [r6, #5]
 80270b8:	f896 e003 	ldrb.w	lr, [r6, #3]
 80270bc:	f896 c004 	ldrb.w	ip, [r6, #4]
 80270c0:	9710      	str	r7, [sp, #64]	; 0x40
 80270c2:	b1c9      	cbz	r1, 80270f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80270c4:	f04f 0b03 	mov.w	fp, #3
 80270c8:	f06f 0904 	mvn.w	r9, #4
 80270cc:	3605      	adds	r6, #5
 80270ce:	fb13 930b 	smlabb	r3, r3, fp, r9
 80270d2:	eb06 0b03 	add.w	fp, r6, r3
 80270d6:	5cf3      	ldrb	r3, [r6, r3]
 80270d8:	9311      	str	r3, [sp, #68]	; 0x44
 80270da:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80270de:	9313      	str	r3, [sp, #76]	; 0x4c
 80270e0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80270e4:	9315      	str	r3, [sp, #84]	; 0x54
 80270e6:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80270ea:	9312      	str	r3, [sp, #72]	; 0x48
 80270ec:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80270f0:	9314      	str	r3, [sp, #80]	; 0x50
 80270f2:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80270f6:	9316      	str	r3, [sp, #88]	; 0x58
 80270f8:	b292      	uxth	r2, r2
 80270fa:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80270fc:	b289      	uxth	r1, r1
 80270fe:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8027102:	fb02 f601 	mul.w	r6, r2, r1
 8027106:	0112      	lsls	r2, r2, #4
 8027108:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 802710c:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8027110:	1b92      	subs	r2, r2, r6
 8027112:	b289      	uxth	r1, r1
 8027114:	b292      	uxth	r2, r2
 8027116:	eba9 0901 	sub.w	r9, r9, r1
 802711a:	fb02 fe0e 	mul.w	lr, r2, lr
 802711e:	fa1f f989 	uxth.w	r9, r9
 8027122:	fb02 fc0c 	mul.w	ip, r2, ip
 8027126:	fb09 e404 	mla	r4, r9, r4, lr
 802712a:	f895 e000 	ldrb.w	lr, [r5]
 802712e:	fb09 c000 	mla	r0, r9, r0, ip
 8027132:	fb01 4407 	mla	r4, r1, r7, r4
 8027136:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8027138:	fb06 4407 	mla	r4, r6, r7, r4
 802713c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802713e:	fb1e fe07 	smulbb	lr, lr, r7
 8027142:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8027146:	fb04 e403 	mla	r4, r4, r3, lr
 802714a:	b2a4      	uxth	r4, r4
 802714c:	f104 0e01 	add.w	lr, r4, #1
 8027150:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8027154:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027156:	fb01 0004 	mla	r0, r1, r4, r0
 802715a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802715c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8027160:	fb06 0004 	mla	r0, r6, r4, r0
 8027164:	786c      	ldrb	r4, [r5, #1]
 8027166:	f885 e000 	strb.w	lr, [r5]
 802716a:	fb14 f407 	smulbb	r4, r4, r7
 802716e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027172:	fb00 4003 	mla	r0, r0, r3, r4
 8027176:	b280      	uxth	r0, r0
 8027178:	1c44      	adds	r4, r0, #1
 802717a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802717e:	1200      	asrs	r0, r0, #8
 8027180:	7068      	strb	r0, [r5, #1]
 8027182:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027184:	4342      	muls	r2, r0
 8027186:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027188:	fb09 2200 	mla	r2, r9, r0, r2
 802718c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802718e:	fb01 2100 	mla	r1, r1, r0, r2
 8027192:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8027194:	fb06 1602 	mla	r6, r6, r2, r1
 8027198:	78a9      	ldrb	r1, [r5, #2]
 802719a:	fb11 f107 	smulbb	r1, r1, r7
 802719e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80271a2:	fb06 1303 	mla	r3, r6, r3, r1
 80271a6:	b29b      	uxth	r3, r3
 80271a8:	1c5e      	adds	r6, r3, #1
 80271aa:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80271ae:	121b      	asrs	r3, r3, #8
 80271b0:	70ab      	strb	r3, [r5, #2]
 80271b2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80271b4:	3503      	adds	r5, #3
 80271b6:	449a      	add	sl, r3
 80271b8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80271ba:	4498      	add	r8, r3
 80271bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80271be:	3b01      	subs	r3, #1
 80271c0:	930d      	str	r3, [sp, #52]	; 0x34
 80271c2:	e750      	b.n	8027066 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80271c4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80271c6:	449a      	add	sl, r3
 80271c8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80271ca:	4498      	add	r8, r3
 80271cc:	9b07      	ldr	r3, [sp, #28]
 80271ce:	3b01      	subs	r3, #1
 80271d0:	9307      	str	r3, [sp, #28]
 80271d2:	9b08      	ldr	r3, [sp, #32]
 80271d4:	3303      	adds	r3, #3
 80271d6:	9308      	str	r3, [sp, #32]
 80271d8:	e726      	b.n	8027028 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80271da:	d026      	beq.n	802722a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80271dc:	9b07      	ldr	r3, [sp, #28]
 80271de:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80271e0:	3b01      	subs	r3, #1
 80271e2:	fb00 a003 	mla	r0, r0, r3, sl
 80271e6:	1400      	asrs	r0, r0, #16
 80271e8:	f53f af3a 	bmi.w	8027060 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80271ec:	3901      	subs	r1, #1
 80271ee:	4288      	cmp	r0, r1
 80271f0:	f6bf af36 	bge.w	8027060 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80271f4:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80271f6:	fb01 8303 	mla	r3, r1, r3, r8
 80271fa:	141b      	asrs	r3, r3, #16
 80271fc:	f53f af30 	bmi.w	8027060 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027200:	3a01      	subs	r2, #1
 8027202:	4293      	cmp	r3, r2
 8027204:	f6bf af2c 	bge.w	8027060 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027208:	9b08      	ldr	r3, [sp, #32]
 802720a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802720e:	1cdd      	adds	r5, r3, #3
 8027210:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8027214:	f1bc 0f00 	cmp.w	ip, #0
 8027218:	dc5f      	bgt.n	80272da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802721a:	9b07      	ldr	r3, [sp, #28]
 802721c:	9a08      	ldr	r2, [sp, #32]
 802721e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8027222:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027226:	441a      	add	r2, r3
 8027228:	9208      	str	r2, [sp, #32]
 802722a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802722c:	2b00      	cmp	r3, #0
 802722e:	f340 80e9 	ble.w	8027404 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 8027232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027236:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027238:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802723c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027240:	eef0 6a48 	vmov.f32	s13, s16
 8027244:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027248:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802724c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027250:	ee16 aa90 	vmov	sl, s13
 8027254:	eef0 6a68 	vmov.f32	s13, s17
 8027258:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802725c:	ee16 8a90 	vmov	r8, s13
 8027260:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027264:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027268:	ee37 8a48 	vsub.f32	s16, s14, s16
 802726c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027270:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027274:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027278:	ee18 2a10 	vmov	r2, s16
 802727c:	eeb0 8a47 	vmov.f32	s16, s14
 8027280:	fb92 f3f3 	sdiv	r3, r2, r3
 8027284:	ee18 2a90 	vmov	r2, s17
 8027288:	9333      	str	r3, [sp, #204]	; 0xcc
 802728a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802728c:	eef0 8a67 	vmov.f32	s17, s15
 8027290:	fb92 f3f3 	sdiv	r3, r2, r3
 8027294:	9334      	str	r3, [sp, #208]	; 0xd0
 8027296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802729a:	3b01      	subs	r3, #1
 802729c:	930b      	str	r3, [sp, #44]	; 0x2c
 802729e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80272a0:	bf08      	it	eq
 80272a2:	4613      	moveq	r3, r2
 80272a4:	9307      	str	r3, [sp, #28]
 80272a6:	e6b1      	b.n	802700c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80272a8:	1c47      	adds	r7, r0, #1
 80272aa:	d482      	bmi.n	80271b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80272ac:	42bb      	cmp	r3, r7
 80272ae:	db80      	blt.n	80271b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80272b0:	1c67      	adds	r7, r4, #1
 80272b2:	f53f af7e 	bmi.w	80271b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80272b6:	42be      	cmp	r6, r7
 80272b8:	f6ff af7b 	blt.w	80271b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80272bc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80272be:	b236      	sxth	r6, r6
 80272c0:	9001      	str	r0, [sp, #4]
 80272c2:	b21b      	sxth	r3, r3
 80272c4:	9600      	str	r6, [sp, #0]
 80272c6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80272c8:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80272cc:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80272d0:	4629      	mov	r1, r5
 80272d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80272d4:	f7ff fd58 	bl	8026d88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80272d8:	e76b      	b.n	80271b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80272da:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80272dc:	ea4f 402a 	mov.w	r0, sl, asr #16
 80272e0:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80272e4:	f3ca 3303 	ubfx	r3, sl, #12, #4
 80272e8:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80272ec:	ea4f 4128 	mov.w	r1, r8, asr #16
 80272f0:	fb07 0101 	mla	r1, r7, r1, r0
 80272f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80272f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80272fa:	1844      	adds	r4, r0, r1
 80272fc:	5c40      	ldrb	r0, [r0, r1]
 80272fe:	78a6      	ldrb	r6, [r4, #2]
 8027300:	7861      	ldrb	r1, [r4, #1]
 8027302:	960f      	str	r6, [sp, #60]	; 0x3c
 8027304:	78e6      	ldrb	r6, [r4, #3]
 8027306:	910d      	str	r1, [sp, #52]	; 0x34
 8027308:	9610      	str	r6, [sp, #64]	; 0x40
 802730a:	f894 9004 	ldrb.w	r9, [r4, #4]
 802730e:	f894 b005 	ldrb.w	fp, [r4, #5]
 8027312:	b192      	cbz	r2, 802733a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8027314:	f06f 0604 	mvn.w	r6, #4
 8027318:	2103      	movs	r1, #3
 802731a:	3405      	adds	r4, #5
 802731c:	fb17 6701 	smlabb	r7, r7, r1, r6
 8027320:	19e6      	adds	r6, r4, r7
 8027322:	5de4      	ldrb	r4, [r4, r7]
 8027324:	9417      	str	r4, [sp, #92]	; 0x5c
 8027326:	7874      	ldrb	r4, [r6, #1]
 8027328:	9419      	str	r4, [sp, #100]	; 0x64
 802732a:	78b4      	ldrb	r4, [r6, #2]
 802732c:	941b      	str	r4, [sp, #108]	; 0x6c
 802732e:	78f4      	ldrb	r4, [r6, #3]
 8027330:	9418      	str	r4, [sp, #96]	; 0x60
 8027332:	7934      	ldrb	r4, [r6, #4]
 8027334:	941a      	str	r4, [sp, #104]	; 0x68
 8027336:	7974      	ldrb	r4, [r6, #5]
 8027338:	941c      	str	r4, [sp, #112]	; 0x70
 802733a:	b29b      	uxth	r3, r3
 802733c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802733e:	b292      	uxth	r2, r2
 8027340:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027342:	3503      	adds	r5, #3
 8027344:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027348:	fb03 f402 	mul.w	r4, r3, r2
 802734c:	011b      	lsls	r3, r3, #4
 802734e:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8027352:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8027356:	1b1b      	subs	r3, r3, r4
 8027358:	b292      	uxth	r2, r2
 802735a:	b29b      	uxth	r3, r3
 802735c:	1ab6      	subs	r6, r6, r2
 802735e:	435f      	muls	r7, r3
 8027360:	b2b6      	uxth	r6, r6
 8027362:	fb03 f909 	mul.w	r9, r3, r9
 8027366:	fb03 fb0b 	mul.w	fp, r3, fp
 802736a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802736c:	fb06 7000 	mla	r0, r6, r0, r7
 8027370:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8027372:	fb06 bb03 	mla	fp, r6, r3, fp
 8027376:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027378:	fb02 0007 	mla	r0, r2, r7, r0
 802737c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 802737e:	fb02 bb03 	mla	fp, r2, r3, fp
 8027382:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027384:	fb04 0007 	mla	r0, r4, r7, r0
 8027388:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 802738c:	fb17 f701 	smulbb	r7, r7, r1
 8027390:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027394:	990d      	ldr	r1, [sp, #52]	; 0x34
 8027396:	fb00 700e 	mla	r0, r0, lr, r7
 802739a:	fb06 9101 	mla	r1, r6, r1, r9
 802739e:	b280      	uxth	r0, r0
 80273a0:	1c47      	adds	r7, r0, #1
 80273a2:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80273a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80273a8:	1200      	asrs	r0, r0, #8
 80273aa:	f805 0c06 	strb.w	r0, [r5, #-6]
 80273ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80273b0:	fb02 1100 	mla	r1, r2, r0, r1
 80273b4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80273b6:	fb04 1100 	mla	r1, r4, r0, r1
 80273ba:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80273be:	fb04 b403 	mla	r4, r4, r3, fp
 80273c2:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80273c6:	fb10 f007 	smulbb	r0, r0, r7
 80273ca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80273ce:	fb13 f307 	smulbb	r3, r3, r7
 80273d2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80273d6:	fb01 010e 	mla	r1, r1, lr, r0
 80273da:	fb04 340e 	mla	r4, r4, lr, r3
 80273de:	b289      	uxth	r1, r1
 80273e0:	b2a4      	uxth	r4, r4
 80273e2:	1c48      	adds	r0, r1, #1
 80273e4:	1c63      	adds	r3, r4, #1
 80273e6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80273ea:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80273ee:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80273f0:	1209      	asrs	r1, r1, #8
 80273f2:	1224      	asrs	r4, r4, #8
 80273f4:	449a      	add	sl, r3
 80273f6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80273f8:	f805 1c05 	strb.w	r1, [r5, #-5]
 80273fc:	f805 4c04 	strb.w	r4, [r5, #-4]
 8027400:	4498      	add	r8, r3
 8027402:	e707      	b.n	8027214 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8027404:	b01f      	add	sp, #124	; 0x7c
 8027406:	ecbd 8b08 	vpop	{d8-d11}
 802740a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027410 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8027410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027414:	b085      	sub	sp, #20
 8027416:	784d      	ldrb	r5, [r1, #1]
 8027418:	788e      	ldrb	r6, [r1, #2]
 802741a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 802741e:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8027422:	9403      	str	r4, [sp, #12]
 8027424:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8027428:	780c      	ldrb	r4, [r1, #0]
 802742a:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802742e:	fb07 ce03 	mla	lr, r7, r3, ip
 8027432:	2f00      	cmp	r7, #0
 8027434:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8027438:	eb02 0b0e 	add.w	fp, r2, lr
 802743c:	db56      	blt.n	80274ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 802743e:	45b9      	cmp	r9, r7
 8027440:	dd54      	ble.n	80274ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8027442:	f1bc 0f00 	cmp.w	ip, #0
 8027446:	db4d      	blt.n	80274e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8027448:	4563      	cmp	r3, ip
 802744a:	dd4b      	ble.n	80274e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 802744c:	f812 200e 	ldrb.w	r2, [r2, lr]
 8027450:	9200      	str	r2, [sp, #0]
 8027452:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8027456:	9201      	str	r2, [sp, #4]
 8027458:	f89b 2002 	ldrb.w	r2, [fp, #2]
 802745c:	9202      	str	r2, [sp, #8]
 802745e:	f11c 0201 	adds.w	r2, ip, #1
 8027462:	d44a      	bmi.n	80274fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8027464:	4293      	cmp	r3, r2
 8027466:	dd48      	ble.n	80274fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8027468:	2800      	cmp	r0, #0
 802746a:	d046      	beq.n	80274fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 802746c:	f89b e003 	ldrb.w	lr, [fp, #3]
 8027470:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8027474:	f89b a005 	ldrb.w	sl, [fp, #5]
 8027478:	3701      	adds	r7, #1
 802747a:	d446      	bmi.n	802750a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 802747c:	45b9      	cmp	r9, r7
 802747e:	dd44      	ble.n	802750a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8027480:	9a03      	ldr	r2, [sp, #12]
 8027482:	2a00      	cmp	r2, #0
 8027484:	d045      	beq.n	8027512 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8027486:	f1bc 0f00 	cmp.w	ip, #0
 802748a:	db3a      	blt.n	8027502 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 802748c:	4563      	cmp	r3, ip
 802748e:	dd38      	ble.n	8027502 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8027490:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8027494:	f04f 0903 	mov.w	r9, #3
 8027498:	f81b 7002 	ldrb.w	r7, [fp, r2]
 802749c:	fb03 b209 	mla	r2, r3, r9, fp
 80274a0:	fb03 b909 	mla	r9, r3, r9, fp
 80274a4:	7852      	ldrb	r2, [r2, #1]
 80274a6:	f899 9002 	ldrb.w	r9, [r9, #2]
 80274aa:	f11c 0c01 	adds.w	ip, ip, #1
 80274ae:	d40d      	bmi.n	80274cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80274b0:	4563      	cmp	r3, ip
 80274b2:	dd0b      	ble.n	80274cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 80274b4:	b160      	cbz	r0, 80274d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 80274b6:	2603      	movs	r6, #3
 80274b8:	fb13 6406 	smlabb	r4, r3, r6, r6
 80274bc:	fb03 b506 	mla	r5, r3, r6, fp
 80274c0:	fb03 b306 	mla	r3, r3, r6, fp
 80274c4:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80274c8:	792d      	ldrb	r5, [r5, #4]
 80274ca:	795e      	ldrb	r6, [r3, #5]
 80274cc:	280f      	cmp	r0, #15
 80274ce:	d802      	bhi.n	80274d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 80274d0:	9b03      	ldr	r3, [sp, #12]
 80274d2:	2b0f      	cmp	r3, #15
 80274d4:	d922      	bls.n	802751c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 80274d6:	4b2f      	ldr	r3, [pc, #188]	; (8027594 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 80274d8:	f240 1157 	movw	r1, #343	; 0x157
 80274dc:	4a2e      	ldr	r2, [pc, #184]	; (8027598 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 80274de:	482f      	ldr	r0, [pc, #188]	; (802759c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 80274e0:	f004 f9c2 	bl	802b868 <__assert_func>
 80274e4:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80274e8:	9400      	str	r4, [sp, #0]
 80274ea:	e7b8      	b.n	802745e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 80274ec:	46b2      	mov	sl, r6
 80274ee:	46a8      	mov	r8, r5
 80274f0:	46a6      	mov	lr, r4
 80274f2:	9400      	str	r4, [sp, #0]
 80274f4:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80274f8:	e7be      	b.n	8027478 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 80274fa:	46b2      	mov	sl, r6
 80274fc:	46a8      	mov	r8, r5
 80274fe:	46a6      	mov	lr, r4
 8027500:	e7ba      	b.n	8027478 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8027502:	46b1      	mov	r9, r6
 8027504:	462a      	mov	r2, r5
 8027506:	4627      	mov	r7, r4
 8027508:	e7cf      	b.n	80274aa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 802750a:	46b1      	mov	r9, r6
 802750c:	462a      	mov	r2, r5
 802750e:	4627      	mov	r7, r4
 8027510:	e7dc      	b.n	80274cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8027512:	280f      	cmp	r0, #15
 8027514:	d8df      	bhi.n	80274d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8027516:	46b1      	mov	r9, r6
 8027518:	462a      	mov	r2, r5
 802751a:	4627      	mov	r7, r4
 802751c:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8027520:	b280      	uxth	r0, r0
 8027522:	fb00 f30b 	mul.w	r3, r0, fp
 8027526:	0100      	lsls	r0, r0, #4
 8027528:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 802752c:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8027530:	1ac0      	subs	r0, r0, r3
 8027532:	fa1f fb8b 	uxth.w	fp, fp
 8027536:	b280      	uxth	r0, r0
 8027538:	ebac 0c0b 	sub.w	ip, ip, fp
 802753c:	9003      	str	r0, [sp, #12]
 802753e:	fa1f fc8c 	uxth.w	ip, ip
 8027542:	fb00 fe0e 	mul.w	lr, r0, lr
 8027546:	9800      	ldr	r0, [sp, #0]
 8027548:	fb0c ee00 	mla	lr, ip, r0, lr
 802754c:	9803      	ldr	r0, [sp, #12]
 802754e:	fb00 f808 	mul.w	r8, r0, r8
 8027552:	9801      	ldr	r0, [sp, #4]
 8027554:	fb0b ee07 	mla	lr, fp, r7, lr
 8027558:	fb0c 8800 	mla	r8, ip, r0, r8
 802755c:	fb03 ee04 	mla	lr, r3, r4, lr
 8027560:	fb0b 8202 	mla	r2, fp, r2, r8
 8027564:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8027568:	fb03 2505 	mla	r5, r3, r5, r2
 802756c:	9a03      	ldr	r2, [sp, #12]
 802756e:	f881 e000 	strb.w	lr, [r1]
 8027572:	fb02 f00a 	mul.w	r0, r2, sl
 8027576:	9a02      	ldr	r2, [sp, #8]
 8027578:	122d      	asrs	r5, r5, #8
 802757a:	fb0c 0c02 	mla	ip, ip, r2, r0
 802757e:	704d      	strb	r5, [r1, #1]
 8027580:	fb0b c909 	mla	r9, fp, r9, ip
 8027584:	fb03 9606 	mla	r6, r3, r6, r9
 8027588:	1236      	asrs	r6, r6, #8
 802758a:	708e      	strb	r6, [r1, #2]
 802758c:	b005      	add	sp, #20
 802758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027592:	bf00      	nop
 8027594:	0803129e 	.word	0x0803129e
 8027598:	08031796 	.word	0x08031796
 802759c:	08031367 	.word	0x08031367

080275a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80275a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80275a4:	ed2d 8b08 	vpush	{d8-d11}
 80275a8:	b09b      	sub	sp, #108	; 0x6c
 80275aa:	eeb0 aa40 	vmov.f32	s20, s0
 80275ae:	eef0 9a60 	vmov.f32	s19, s1
 80275b2:	920b      	str	r2, [sp, #44]	; 0x2c
 80275b4:	eeb0 9a41 	vmov.f32	s18, s2
 80275b8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80275ba:	eeb0 8a62 	vmov.f32	s16, s5
 80275be:	9019      	str	r0, [sp, #100]	; 0x64
 80275c0:	eef0 8a43 	vmov.f32	s17, s6
 80275c4:	6850      	ldr	r0, [r2, #4]
 80275c6:	eef0 ba44 	vmov.f32	s23, s8
 80275ca:	9109      	str	r1, [sp, #36]	; 0x24
 80275cc:	eeb0 ba64 	vmov.f32	s22, s9
 80275d0:	9306      	str	r3, [sp, #24]
 80275d2:	eef0 aa45 	vmov.f32	s21, s10
 80275d6:	6812      	ldr	r2, [r2, #0]
 80275d8:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80275dc:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 80275e0:	fb00 1303 	mla	r3, r0, r3, r1
 80275e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80275e8:	18d3      	adds	r3, r2, r3
 80275ea:	9307      	str	r3, [sp, #28]
 80275ec:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80275ee:	681b      	ldr	r3, [r3, #0]
 80275f0:	9308      	str	r3, [sp, #32]
 80275f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80275f4:	2b00      	cmp	r3, #0
 80275f6:	dc03      	bgt.n	8027600 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80275f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80275fa:	2b00      	cmp	r3, #0
 80275fc:	f340 81ab 	ble.w	8027956 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 8027600:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8027602:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027606:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802760a:	1e48      	subs	r0, r1, #1
 802760c:	1e55      	subs	r5, r2, #1
 802760e:	9b06      	ldr	r3, [sp, #24]
 8027610:	2b00      	cmp	r3, #0
 8027612:	f340 80b1 	ble.w	8027778 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8027616:	ea5f 462b 	movs.w	r6, fp, asr #16
 802761a:	ea4f 4324 	mov.w	r3, r4, asr #16
 802761e:	d406      	bmi.n	802762e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027620:	4286      	cmp	r6, r0
 8027622:	da04      	bge.n	802762e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027624:	2b00      	cmp	r3, #0
 8027626:	db02      	blt.n	802762e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027628:	42ab      	cmp	r3, r5
 802762a:	f2c0 80a6 	blt.w	802777a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802762e:	3601      	adds	r6, #1
 8027630:	f100 8097 	bmi.w	8027762 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027634:	42b1      	cmp	r1, r6
 8027636:	f2c0 8094 	blt.w	8027762 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802763a:	3301      	adds	r3, #1
 802763c:	f100 8091 	bmi.w	8027762 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027640:	429a      	cmp	r2, r3
 8027642:	f2c0 808e 	blt.w	8027762 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027646:	9b06      	ldr	r3, [sp, #24]
 8027648:	9e07      	ldr	r6, [sp, #28]
 802764a:	930a      	str	r3, [sp, #40]	; 0x28
 802764c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802764e:	2b00      	cmp	r3, #0
 8027650:	f340 80b0 	ble.w	80277b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8027654:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8027656:	1425      	asrs	r5, r4, #16
 8027658:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802765a:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802765e:	68c7      	ldr	r7, [r0, #12]
 8027660:	ea5f 402b 	movs.w	r0, fp, asr #16
 8027664:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027668:	689b      	ldr	r3, [r3, #8]
 802766a:	f100 80ea 	bmi.w	8027842 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802766e:	f103 3cff 	add.w	ip, r3, #4294967295
 8027672:	4560      	cmp	r0, ip
 8027674:	f280 80e5 	bge.w	8027842 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8027678:	2d00      	cmp	r5, #0
 802767a:	f2c0 80e2 	blt.w	8027842 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802767e:	f107 3cff 	add.w	ip, r7, #4294967295
 8027682:	4565      	cmp	r5, ip
 8027684:	f280 80dd 	bge.w	8027842 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8027688:	b21b      	sxth	r3, r3
 802768a:	fb05 0003 	mla	r0, r5, r3, r0
 802768e:	9d08      	ldr	r5, [sp, #32]
 8027690:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027694:	182f      	adds	r7, r5, r0
 8027696:	5c2d      	ldrb	r5, [r5, r0]
 8027698:	7878      	ldrb	r0, [r7, #1]
 802769a:	f897 e002 	ldrb.w	lr, [r7, #2]
 802769e:	900c      	str	r0, [sp, #48]	; 0x30
 80276a0:	f897 9003 	ldrb.w	r9, [r7, #3]
 80276a4:	f897 8004 	ldrb.w	r8, [r7, #4]
 80276a8:	f897 a005 	ldrb.w	sl, [r7, #5]
 80276ac:	b1c9      	cbz	r1, 80276e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80276ae:	f04f 0c03 	mov.w	ip, #3
 80276b2:	f06f 0004 	mvn.w	r0, #4
 80276b6:	3705      	adds	r7, #5
 80276b8:	fb13 030c 	smlabb	r3, r3, ip, r0
 80276bc:	eb07 0c03 	add.w	ip, r7, r3
 80276c0:	5cfb      	ldrb	r3, [r7, r3]
 80276c2:	930d      	str	r3, [sp, #52]	; 0x34
 80276c4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80276c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80276ca:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80276ce:	9311      	str	r3, [sp, #68]	; 0x44
 80276d0:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80276d4:	930e      	str	r3, [sp, #56]	; 0x38
 80276d6:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80276da:	9310      	str	r3, [sp, #64]	; 0x40
 80276dc:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80276e0:	9312      	str	r3, [sp, #72]	; 0x48
 80276e2:	b292      	uxth	r2, r2
 80276e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80276e6:	b289      	uxth	r1, r1
 80276e8:	fb02 f301 	mul.w	r3, r2, r1
 80276ec:	0112      	lsls	r2, r2, #4
 80276ee:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80276f2:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80276f6:	1ad2      	subs	r2, r2, r3
 80276f8:	b289      	uxth	r1, r1
 80276fa:	b292      	uxth	r2, r2
 80276fc:	1a7f      	subs	r7, r7, r1
 80276fe:	fb02 f909 	mul.w	r9, r2, r9
 8027702:	b2bf      	uxth	r7, r7
 8027704:	fb02 f808 	mul.w	r8, r2, r8
 8027708:	fb02 fa0a 	mul.w	sl, r2, sl
 802770c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802770e:	fb07 9905 	mla	r9, r7, r5, r9
 8027712:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027714:	fb07 8800 	mla	r8, r7, r0, r8
 8027718:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802771a:	fb07 aa0e 	mla	sl, r7, lr, sl
 802771e:	fb01 9905 	mla	r9, r1, r5, r9
 8027722:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027724:	fb01 8800 	mla	r8, r1, r0, r8
 8027728:	9810      	ldr	r0, [sp, #64]	; 0x40
 802772a:	fb01 a102 	mla	r1, r1, r2, sl
 802772e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027730:	fb03 9905 	mla	r9, r3, r5, r9
 8027734:	fb03 8800 	mla	r8, r3, r0, r8
 8027738:	fb03 1302 	mla	r3, r3, r2, r1
 802773c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027740:	ea4f 2828 	mov.w	r8, r8, asr #8
 8027744:	121b      	asrs	r3, r3, #8
 8027746:	f886 9000 	strb.w	r9, [r6]
 802774a:	f886 8001 	strb.w	r8, [r6, #1]
 802774e:	70b3      	strb	r3, [r6, #2]
 8027750:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8027752:	3603      	adds	r6, #3
 8027754:	449b      	add	fp, r3
 8027756:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027758:	441c      	add	r4, r3
 802775a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802775c:	3b01      	subs	r3, #1
 802775e:	930a      	str	r3, [sp, #40]	; 0x28
 8027760:	e774      	b.n	802764c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8027762:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8027764:	449b      	add	fp, r3
 8027766:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027768:	441c      	add	r4, r3
 802776a:	9b06      	ldr	r3, [sp, #24]
 802776c:	3b01      	subs	r3, #1
 802776e:	9306      	str	r3, [sp, #24]
 8027770:	9b07      	ldr	r3, [sp, #28]
 8027772:	3303      	adds	r3, #3
 8027774:	9307      	str	r3, [sp, #28]
 8027776:	e74a      	b.n	802760e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027778:	d024      	beq.n	80277c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802777a:	9b06      	ldr	r3, [sp, #24]
 802777c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 802777e:	3b01      	subs	r3, #1
 8027780:	fb00 b003 	mla	r0, r0, r3, fp
 8027784:	1400      	asrs	r0, r0, #16
 8027786:	f53f af5e 	bmi.w	8027646 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802778a:	3901      	subs	r1, #1
 802778c:	4288      	cmp	r0, r1
 802778e:	f6bf af5a 	bge.w	8027646 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8027792:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8027794:	fb01 4303 	mla	r3, r1, r3, r4
 8027798:	141b      	asrs	r3, r3, #16
 802779a:	f53f af54 	bmi.w	8027646 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802779e:	3a01      	subs	r2, #1
 80277a0:	4293      	cmp	r3, r2
 80277a2:	f6bf af50 	bge.w	8027646 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80277a6:	9b07      	ldr	r3, [sp, #28]
 80277a8:	f8dd e018 	ldr.w	lr, [sp, #24]
 80277ac:	1cde      	adds	r6, r3, #3
 80277ae:	f1be 0f00 	cmp.w	lr, #0
 80277b2:	dc5f      	bgt.n	8027874 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80277b4:	9b06      	ldr	r3, [sp, #24]
 80277b6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80277ba:	9b07      	ldr	r3, [sp, #28]
 80277bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80277c0:	4423      	add	r3, r4
 80277c2:	9307      	str	r3, [sp, #28]
 80277c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80277c6:	2b00      	cmp	r3, #0
 80277c8:	f340 80c5 	ble.w	8027956 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 80277cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80277d0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80277d2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80277d6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80277da:	eef0 6a48 	vmov.f32	s13, s16
 80277de:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80277e2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80277e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277ea:	ee16 ba90 	vmov	fp, s13
 80277ee:	eef0 6a68 	vmov.f32	s13, s17
 80277f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277f6:	ee16 4a90 	vmov	r4, s13
 80277fa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80277fe:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027802:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027806:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802780a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802780e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027812:	ee18 2a10 	vmov	r2, s16
 8027816:	eeb0 8a47 	vmov.f32	s16, s14
 802781a:	fb92 f3f3 	sdiv	r3, r2, r3
 802781e:	ee18 2a90 	vmov	r2, s17
 8027822:	932f      	str	r3, [sp, #188]	; 0xbc
 8027824:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027826:	eef0 8a67 	vmov.f32	s17, s15
 802782a:	fb92 f3f3 	sdiv	r3, r2, r3
 802782e:	9330      	str	r3, [sp, #192]	; 0xc0
 8027830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027834:	3b01      	subs	r3, #1
 8027836:	9309      	str	r3, [sp, #36]	; 0x24
 8027838:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802783a:	bf08      	it	eq
 802783c:	4613      	moveq	r3, r2
 802783e:	9306      	str	r3, [sp, #24]
 8027840:	e6d7      	b.n	80275f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8027842:	f110 0c01 	adds.w	ip, r0, #1
 8027846:	d483      	bmi.n	8027750 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027848:	4563      	cmp	r3, ip
 802784a:	db81      	blt.n	8027750 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802784c:	f115 0c01 	adds.w	ip, r5, #1
 8027850:	f53f af7e 	bmi.w	8027750 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027854:	4567      	cmp	r7, ip
 8027856:	f6ff af7b 	blt.w	8027750 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802785a:	b23f      	sxth	r7, r7
 802785c:	b21b      	sxth	r3, r3
 802785e:	9700      	str	r7, [sp, #0]
 8027860:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8027864:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8027868:	9a08      	ldr	r2, [sp, #32]
 802786a:	4631      	mov	r1, r6
 802786c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802786e:	f7ff fdcf 	bl	8027410 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8027872:	e76d      	b.n	8027750 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027874:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8027876:	ea4f 402b 	mov.w	r0, fp, asr #16
 802787a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802787e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027882:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8027886:	1421      	asrs	r1, r4, #16
 8027888:	930a      	str	r3, [sp, #40]	; 0x28
 802788a:	fb0c 0101 	mla	r1, ip, r1, r0
 802788e:	9808      	ldr	r0, [sp, #32]
 8027890:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027894:	1845      	adds	r5, r0, r1
 8027896:	5c40      	ldrb	r0, [r0, r1]
 8027898:	796f      	ldrb	r7, [r5, #5]
 802789a:	7869      	ldrb	r1, [r5, #1]
 802789c:	f895 8002 	ldrb.w	r8, [r5, #2]
 80278a0:	f895 a003 	ldrb.w	sl, [r5, #3]
 80278a4:	f895 9004 	ldrb.w	r9, [r5, #4]
 80278a8:	970c      	str	r7, [sp, #48]	; 0x30
 80278aa:	b1a2      	cbz	r2, 80278d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 80278ac:	2703      	movs	r7, #3
 80278ae:	f06f 0304 	mvn.w	r3, #4
 80278b2:	3505      	adds	r5, #5
 80278b4:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 80278b8:	eb05 070c 	add.w	r7, r5, ip
 80278bc:	f815 500c 	ldrb.w	r5, [r5, ip]
 80278c0:	9513      	str	r5, [sp, #76]	; 0x4c
 80278c2:	787d      	ldrb	r5, [r7, #1]
 80278c4:	9515      	str	r5, [sp, #84]	; 0x54
 80278c6:	78bd      	ldrb	r5, [r7, #2]
 80278c8:	9517      	str	r5, [sp, #92]	; 0x5c
 80278ca:	78fd      	ldrb	r5, [r7, #3]
 80278cc:	9514      	str	r5, [sp, #80]	; 0x50
 80278ce:	793d      	ldrb	r5, [r7, #4]
 80278d0:	9516      	str	r5, [sp, #88]	; 0x58
 80278d2:	797d      	ldrb	r5, [r7, #5]
 80278d4:	9518      	str	r5, [sp, #96]	; 0x60
 80278d6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80278da:	b292      	uxth	r2, r2
 80278dc:	3603      	adds	r6, #3
 80278de:	f10e 3eff 	add.w	lr, lr, #4294967295
 80278e2:	fb03 f502 	mul.w	r5, r3, r2
 80278e6:	011b      	lsls	r3, r3, #4
 80278e8:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80278ec:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80278f0:	1b5b      	subs	r3, r3, r5
 80278f2:	b292      	uxth	r2, r2
 80278f4:	b29b      	uxth	r3, r3
 80278f6:	1abf      	subs	r7, r7, r2
 80278f8:	fb03 f909 	mul.w	r9, r3, r9
 80278fc:	b2bf      	uxth	r7, r7
 80278fe:	fb03 fa0a 	mul.w	sl, r3, sl
 8027902:	fb07 9901 	mla	r9, r7, r1, r9
 8027906:	9915      	ldr	r1, [sp, #84]	; 0x54
 8027908:	fb07 aa00 	mla	sl, r7, r0, sl
 802790c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802790e:	fb02 9901 	mla	r9, r2, r1, r9
 8027912:	9916      	ldr	r1, [sp, #88]	; 0x58
 8027914:	fb02 aa00 	mla	sl, r2, r0, sl
 8027918:	9814      	ldr	r0, [sp, #80]	; 0x50
 802791a:	fb05 9901 	mla	r9, r5, r1, r9
 802791e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027920:	fb05 aa00 	mla	sl, r5, r0, sl
 8027924:	434b      	muls	r3, r1
 8027926:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8027928:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802792c:	fb07 3308 	mla	r3, r7, r8, r3
 8027930:	ea4f 2929 	mov.w	r9, r9, asr #8
 8027934:	f806 ac06 	strb.w	sl, [r6, #-6]
 8027938:	fb02 3201 	mla	r2, r2, r1, r3
 802793c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802793e:	f806 9c05 	strb.w	r9, [r6, #-5]
 8027942:	fb05 2503 	mla	r5, r5, r3, r2
 8027946:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8027948:	122d      	asrs	r5, r5, #8
 802794a:	449b      	add	fp, r3
 802794c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802794e:	f806 5c04 	strb.w	r5, [r6, #-4]
 8027952:	441c      	add	r4, r3
 8027954:	e72b      	b.n	80277ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8027956:	b01b      	add	sp, #108	; 0x6c
 8027958:	ecbd 8b08 	vpop	{d8-d11}
 802795c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027960 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8027960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027964:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8027968:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802796c:	fb04 5603 	mla	r6, r4, r3, r5
 8027970:	2c00      	cmp	r4, #0
 8027972:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8027976:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802797a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802797e:	db36      	blt.n	80279ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8027980:	45a6      	cmp	lr, r4
 8027982:	dd34      	ble.n	80279ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 8027984:	2d00      	cmp	r5, #0
 8027986:	db30      	blt.n	80279ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 8027988:	42ab      	cmp	r3, r5
 802798a:	dd2e      	ble.n	80279ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 802798c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8027990:	1c6e      	adds	r6, r5, #1
 8027992:	d42f      	bmi.n	80279f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8027994:	42b3      	cmp	r3, r6
 8027996:	dd2d      	ble.n	80279f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 8027998:	b370      	cbz	r0, 80279f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 802799a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802799e:	3401      	adds	r4, #1
 80279a0:	d42e      	bmi.n	8027a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 80279a2:	45a6      	cmp	lr, r4
 80279a4:	dd2c      	ble.n	8027a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 80279a6:	b377      	cbz	r7, 8027a06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 80279a8:	2d00      	cmp	r5, #0
 80279aa:	db27      	blt.n	80279fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 80279ac:	42ab      	cmp	r3, r5
 80279ae:	dd25      	ble.n	80279fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 80279b0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80279b4:	3501      	adds	r5, #1
 80279b6:	d429      	bmi.n	8027a0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 80279b8:	42ab      	cmp	r3, r5
 80279ba:	dd27      	ble.n	8027a0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 80279bc:	b340      	cbz	r0, 8027a10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 80279be:	3301      	adds	r3, #1
 80279c0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80279c4:	280f      	cmp	r0, #15
 80279c6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80279ca:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80279ce:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80279d2:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80279d6:	d801      	bhi.n	80279dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 80279d8:	2f0f      	cmp	r7, #15
 80279da:	d91b      	bls.n	8027a14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 80279dc:	4b89      	ldr	r3, [pc, #548]	; (8027c04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 80279de:	f240 1157 	movw	r1, #343	; 0x157
 80279e2:	4a89      	ldr	r2, [pc, #548]	; (8027c08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 80279e4:	4889      	ldr	r0, [pc, #548]	; (8027c0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 80279e6:	f003 ff3f 	bl	802b868 <__assert_func>
 80279ea:	2200      	movs	r2, #0
 80279ec:	e7d0      	b.n	8027990 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 80279ee:	2600      	movs	r6, #0
 80279f0:	4632      	mov	r2, r6
 80279f2:	e7d4      	b.n	802799e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 80279f4:	2600      	movs	r6, #0
 80279f6:	e7d2      	b.n	802799e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 80279f8:	4606      	mov	r6, r0
 80279fa:	e7d0      	b.n	802799e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 80279fc:	2400      	movs	r4, #0
 80279fe:	e7d9      	b.n	80279b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 8027a00:	2300      	movs	r3, #0
 8027a02:	461c      	mov	r4, r3
 8027a04:	e7de      	b.n	80279c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8027a06:	463b      	mov	r3, r7
 8027a08:	463c      	mov	r4, r7
 8027a0a:	e7db      	b.n	80279c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8027a0c:	2300      	movs	r3, #0
 8027a0e:	e7d9      	b.n	80279c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8027a10:	4603      	mov	r3, r0
 8027a12:	e7d7      	b.n	80279c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 8027a14:	b280      	uxth	r0, r0
 8027a16:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8027a1a:	b2bf      	uxth	r7, r7
 8027a1c:	fb00 fe07 	mul.w	lr, r0, r7
 8027a20:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8027a24:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8027a28:	eba0 0c0e 	sub.w	ip, r0, lr
 8027a2c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8027a30:	b2bf      	uxth	r7, r7
 8027a32:	fa1f fc8c 	uxth.w	ip, ip
 8027a36:	eba5 0507 	sub.w	r5, r5, r7
 8027a3a:	fb0c f00a 	mul.w	r0, ip, sl
 8027a3e:	b2ad      	uxth	r5, r5
 8027a40:	fb05 000b 	mla	r0, r5, fp, r0
 8027a44:	fb07 0009 	mla	r0, r7, r9, r0
 8027a48:	fb0e 0008 	mla	r0, lr, r8, r0
 8027a4c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027a50:	9001      	str	r0, [sp, #4]
 8027a52:	d018      	beq.n	8027a86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 8027a54:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8027a58:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027a5c:	fb0b f000 	mul.w	r0, fp, r0
 8027a60:	fb0b fb02 	mul.w	fp, fp, r2
 8027a64:	0a02      	lsrs	r2, r0, #8
 8027a66:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027a6a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027a6e:	4402      	add	r2, r0
 8027a70:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8027a74:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8027a78:	0a12      	lsrs	r2, r2, #8
 8027a7a:	0a00      	lsrs	r0, r0, #8
 8027a7c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027a80:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027a84:	4302      	orrs	r2, r0
 8027a86:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027a8a:	d01a      	beq.n	8027ac2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 8027a8c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8027a90:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027a94:	fb0a f000 	mul.w	r0, sl, r0
 8027a98:	fb0a fa06 	mul.w	sl, sl, r6
 8027a9c:	0a06      	lsrs	r6, r0, #8
 8027a9e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027aa2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027aa6:	4406      	add	r6, r0
 8027aa8:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8027aac:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8027ab0:	0a36      	lsrs	r6, r6, #8
 8027ab2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027ab6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027aba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027abe:	ea46 060a 	orr.w	r6, r6, sl
 8027ac2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027ac6:	d01b      	beq.n	8027b00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 8027ac8:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8027acc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027ad0:	fb09 fa0a 	mul.w	sl, r9, sl
 8027ad4:	fb09 f004 	mul.w	r0, r9, r4
 8027ad8:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8027adc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027ae0:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8027ae4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027ae8:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8027aec:	4454      	add	r4, sl
 8027aee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027af2:	0a24      	lsrs	r4, r4, #8
 8027af4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027af8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027afc:	ea44 0409 	orr.w	r4, r4, r9
 8027b00:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027b04:	d01b      	beq.n	8027b3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 8027b06:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8027b0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027b0e:	fb08 f909 	mul.w	r9, r8, r9
 8027b12:	fb08 f003 	mul.w	r0, r8, r3
 8027b16:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8027b1a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027b1e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8027b22:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027b26:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8027b2a:	444b      	add	r3, r9
 8027b2c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027b30:	0a1b      	lsrs	r3, r3, #8
 8027b32:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027b36:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027b3a:	ea43 0308 	orr.w	r3, r3, r8
 8027b3e:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8027b42:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027b46:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8027b4a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027b4e:	fb0c f000 	mul.w	r0, ip, r0
 8027b52:	fb0c f606 	mul.w	r6, ip, r6
 8027b56:	fb05 0808 	mla	r8, r5, r8, r0
 8027b5a:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8027b5e:	fb05 6502 	mla	r5, r5, r2, r6
 8027b62:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027b66:	fb07 8800 	mla	r8, r7, r0, r8
 8027b6a:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8027b6e:	fb07 5704 	mla	r7, r7, r4, r5
 8027b72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027b76:	fb0e 8000 	mla	r0, lr, r0, r8
 8027b7a:	fb0e 7e03 	mla	lr, lr, r3, r7
 8027b7e:	9b01      	ldr	r3, [sp, #4]
 8027b80:	0a00      	lsrs	r0, r0, #8
 8027b82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027b86:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027b8a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027b8e:	ea40 0e0e 	orr.w	lr, r0, lr
 8027b92:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8027b96:	b280      	uxth	r0, r0
 8027b98:	fa5f f48e 	uxtb.w	r4, lr
 8027b9c:	4343      	muls	r3, r0
 8027b9e:	fb14 f400 	smulbb	r4, r4, r0
 8027ba2:	1c5a      	adds	r2, r3, #1
 8027ba4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027ba8:	780b      	ldrb	r3, [r1, #0]
 8027baa:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8027bae:	b2d2      	uxtb	r2, r2
 8027bb0:	fb03 4302 	mla	r3, r3, r2, r4
 8027bb4:	b29b      	uxth	r3, r3
 8027bb6:	1c5c      	adds	r4, r3, #1
 8027bb8:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8027bbc:	784c      	ldrb	r4, [r1, #1]
 8027bbe:	fb14 f402 	smulbb	r4, r4, r2
 8027bc2:	121b      	asrs	r3, r3, #8
 8027bc4:	700b      	strb	r3, [r1, #0]
 8027bc6:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8027bca:	fb03 4300 	mla	r3, r3, r0, r4
 8027bce:	b29b      	uxth	r3, r3
 8027bd0:	1c5c      	adds	r4, r3, #1
 8027bd2:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8027bd6:	121b      	asrs	r3, r3, #8
 8027bd8:	704b      	strb	r3, [r1, #1]
 8027bda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8027bde:	f891 e002 	ldrb.w	lr, [r1, #2]
 8027be2:	fb1e fe02 	smulbb	lr, lr, r2
 8027be6:	fb03 ee00 	mla	lr, r3, r0, lr
 8027bea:	fa1f fe8e 	uxth.w	lr, lr
 8027bee:	f10e 0301 	add.w	r3, lr, #1
 8027bf2:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8027bf6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8027bfa:	f881 e002 	strb.w	lr, [r1, #2]
 8027bfe:	b003      	add	sp, #12
 8027c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027c04:	0803129e 	.word	0x0803129e
 8027c08:	08031796 	.word	0x08031796
 8027c0c:	08031367 	.word	0x08031367

08027c10 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c14:	ed2d 8b08 	vpush	{d8-d11}
 8027c18:	b09d      	sub	sp, #116	; 0x74
 8027c1a:	eeb0 aa40 	vmov.f32	s20, s0
 8027c1e:	eef0 9a60 	vmov.f32	s19, s1
 8027c22:	9219      	str	r2, [sp, #100]	; 0x64
 8027c24:	eeb0 9a41 	vmov.f32	s18, s2
 8027c28:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8027c2a:	eeb0 8a62 	vmov.f32	s16, s5
 8027c2e:	9307      	str	r3, [sp, #28]
 8027c30:	eef0 8a43 	vmov.f32	s17, s6
 8027c34:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8027c38:	eef0 ba44 	vmov.f32	s23, s8
 8027c3c:	901b      	str	r0, [sp, #108]	; 0x6c
 8027c3e:	eeb0 ba64 	vmov.f32	s22, s9
 8027c42:	931a      	str	r3, [sp, #104]	; 0x68
 8027c44:	eef0 aa45 	vmov.f32	s21, s10
 8027c48:	6850      	ldr	r0, [r2, #4]
 8027c4a:	9117      	str	r1, [sp, #92]	; 0x5c
 8027c4c:	6812      	ldr	r2, [r2, #0]
 8027c4e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8027c52:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 8027c56:	fb00 1303 	mla	r3, r0, r3, r1
 8027c5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8027c5e:	18d3      	adds	r3, r2, r3
 8027c60:	930a      	str	r3, [sp, #40]	; 0x28
 8027c62:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027c64:	681b      	ldr	r3, [r3, #0]
 8027c66:	9310      	str	r3, [sp, #64]	; 0x40
 8027c68:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8027c6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8027c6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027c70:	2b00      	cmp	r3, #0
 8027c72:	dc03      	bgt.n	8027c7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027c74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027c76:	2b00      	cmp	r3, #0
 8027c78:	f340 8368 	ble.w	802834c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8027c7c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027c7e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027c82:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027c86:	1e48      	subs	r0, r1, #1
 8027c88:	1e57      	subs	r7, r2, #1
 8027c8a:	9b07      	ldr	r3, [sp, #28]
 8027c8c:	2b00      	cmp	r3, #0
 8027c8e:	f340 8187 	ble.w	8027fa0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 8027c92:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8027c96:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027c9a:	d406      	bmi.n	8027caa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027c9c:	4584      	cmp	ip, r0
 8027c9e:	da04      	bge.n	8027caa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027ca0:	2b00      	cmp	r3, #0
 8027ca2:	db02      	blt.n	8027caa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027ca4:	42bb      	cmp	r3, r7
 8027ca6:	f2c0 817c 	blt.w	8027fa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8027caa:	f11c 0c01 	adds.w	ip, ip, #1
 8027cae:	f100 816c 	bmi.w	8027f8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8027cb2:	4561      	cmp	r1, ip
 8027cb4:	f2c0 8169 	blt.w	8027f8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8027cb8:	3301      	adds	r3, #1
 8027cba:	f100 8166 	bmi.w	8027f8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8027cbe:	429a      	cmp	r2, r3
 8027cc0:	f2c0 8163 	blt.w	8027f8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8027cc4:	9b07      	ldr	r3, [sp, #28]
 8027cc6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027cc8:	9318      	str	r3, [sp, #96]	; 0x60
 8027cca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027ccc:	2b00      	cmp	r3, #0
 8027cce:	f340 8186 	ble.w	8027fde <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8027cd2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027cd4:	142a      	asrs	r2, r5, #16
 8027cd6:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027cda:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027cde:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8027ce2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027ce6:	f100 81cb 	bmi.w	8028080 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8027cea:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027cee:	4542      	cmp	r2, r8
 8027cf0:	f280 81c6 	bge.w	8028080 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8027cf4:	2800      	cmp	r0, #0
 8027cf6:	f2c0 81c3 	blt.w	8028080 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8027cfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8027cfe:	4540      	cmp	r0, r8
 8027d00:	f280 81be 	bge.w	8028080 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8027d04:	fa0f f38e 	sxth.w	r3, lr
 8027d08:	fb00 2203 	mla	r2, r0, r3, r2
 8027d0c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027d0e:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8027d12:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8027d16:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027d1a:	2900      	cmp	r1, #0
 8027d1c:	f000 81a6 	beq.w	802806c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 8027d20:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8027d24:	900c      	str	r0, [sp, #48]	; 0x30
 8027d26:	0e00      	lsrs	r0, r0, #24
 8027d28:	9013      	str	r0, [sp, #76]	; 0x4c
 8027d2a:	f1bc 0f00 	cmp.w	ip, #0
 8027d2e:	d00f      	beq.n	8027d50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8027d30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027d34:	3b01      	subs	r3, #1
 8027d36:	009b      	lsls	r3, r3, #2
 8027d38:	3304      	adds	r3, #4
 8027d3a:	eb08 0003 	add.w	r0, r8, r3
 8027d3e:	f858 3003 	ldr.w	r3, [r8, r3]
 8027d42:	9308      	str	r3, [sp, #32]
 8027d44:	0e1b      	lsrs	r3, r3, #24
 8027d46:	9311      	str	r3, [sp, #68]	; 0x44
 8027d48:	6843      	ldr	r3, [r0, #4]
 8027d4a:	930d      	str	r3, [sp, #52]	; 0x34
 8027d4c:	0e1b      	lsrs	r3, r3, #24
 8027d4e:	9314      	str	r3, [sp, #80]	; 0x50
 8027d50:	b289      	uxth	r1, r1
 8027d52:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027d54:	fa1f fc8c 	uxth.w	ip, ip
 8027d58:	0108      	lsls	r0, r1, #4
 8027d5a:	fb01 f90c 	mul.w	r9, r1, ip
 8027d5e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027d62:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8027d66:	eba0 0809 	sub.w	r8, r0, r9
 8027d6a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027d6c:	fa1f f18c 	uxth.w	r1, ip
 8027d70:	fa1f f888 	uxth.w	r8, r8
 8027d74:	1a5b      	subs	r3, r3, r1
 8027d76:	fb08 f000 	mul.w	r0, r8, r0
 8027d7a:	b29b      	uxth	r3, r3
 8027d7c:	fb03 000e 	mla	r0, r3, lr, r0
 8027d80:	fb01 0004 	mla	r0, r1, r4, r0
 8027d84:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027d86:	fb09 0004 	mla	r0, r9, r4, r0
 8027d8a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027d8e:	2800      	cmp	r0, #0
 8027d90:	f000 80f2 	beq.w	8027f78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8027d94:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027d98:	d01b      	beq.n	8027dd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027d9a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8027d9e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027da2:	fb0e fa0a 	mul.w	sl, lr, sl
 8027da6:	fb0e fe02 	mul.w	lr, lr, r2
 8027daa:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027dae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027db2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027db6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027dba:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027dbe:	4452      	add	r2, sl
 8027dc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027dc4:	0a12      	lsrs	r2, r2, #8
 8027dc6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027dca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027dce:	ea42 020c 	orr.w	r2, r2, ip
 8027dd2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027dd4:	2cff      	cmp	r4, #255	; 0xff
 8027dd6:	d021      	beq.n	8027e1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8027dd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027dda:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027dde:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027de0:	fb04 fb0b 	mul.w	fp, r4, fp
 8027de4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027de6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027dea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027dec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027df0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027df4:	fb04 fa0a 	mul.w	sl, r4, sl
 8027df8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027dfc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027e00:	44de      	add	lr, fp
 8027e02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027e06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027e0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027e0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027e12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027e16:	ea4e 040a 	orr.w	r4, lr, sl
 8027e1a:	940c      	str	r4, [sp, #48]	; 0x30
 8027e1c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027e1e:	2cff      	cmp	r4, #255	; 0xff
 8027e20:	d021      	beq.n	8027e66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 8027e22:	9c08      	ldr	r4, [sp, #32]
 8027e24:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027e28:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027e2a:	fb04 fb0b 	mul.w	fp, r4, fp
 8027e2e:	9c08      	ldr	r4, [sp, #32]
 8027e30:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027e34:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027e36:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027e3a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027e3e:	fb04 fa0a 	mul.w	sl, r4, sl
 8027e42:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027e46:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027e4a:	44de      	add	lr, fp
 8027e4c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027e50:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027e54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027e58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027e5c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027e60:	ea4e 040a 	orr.w	r4, lr, sl
 8027e64:	9408      	str	r4, [sp, #32]
 8027e66:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027e68:	2cff      	cmp	r4, #255	; 0xff
 8027e6a:	d021      	beq.n	8027eb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8027e6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027e6e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027e72:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027e74:	fb04 fb0b 	mul.w	fp, r4, fp
 8027e78:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027e7a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027e7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027e80:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027e84:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027e88:	fb04 fa0a 	mul.w	sl, r4, sl
 8027e8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027e90:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027e94:	44de      	add	lr, fp
 8027e96:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027e9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027e9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027ea2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027ea6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027eaa:	ea4e 040a 	orr.w	r4, lr, sl
 8027eae:	940d      	str	r4, [sp, #52]	; 0x34
 8027eb0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027eb2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027eb6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027eba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027ebe:	9c08      	ldr	r4, [sp, #32]
 8027ec0:	fb08 fc0c 	mul.w	ip, r8, ip
 8027ec4:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027ec8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027ecc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027ece:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027ed2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027ed6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027ed8:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027edc:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8027ee0:	fb08 f80e 	mul.w	r8, r8, lr
 8027ee4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ee8:	fb03 8202 	mla	r2, r3, r2, r8
 8027eec:	9b08      	ldr	r3, [sp, #32]
 8027eee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027ef2:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8027ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027ef8:	fb01 220a 	mla	r2, r1, sl, r2
 8027efc:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8027f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027f02:	fb09 2901 	mla	r9, r9, r1, r2
 8027f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027f08:	4343      	muls	r3, r0
 8027f0a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027f0e:	1c58      	adds	r0, r3, #1
 8027f10:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027f14:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027f18:	783b      	ldrb	r3, [r7, #0]
 8027f1a:	ea4c 0c09 	orr.w	ip, ip, r9
 8027f1e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027f22:	fa5f f28c 	uxtb.w	r2, ip
 8027f26:	b2c0      	uxtb	r0, r0
 8027f28:	fb12 f201 	smulbb	r2, r2, r1
 8027f2c:	fb03 2300 	mla	r3, r3, r0, r2
 8027f30:	b29b      	uxth	r3, r3
 8027f32:	1c5a      	adds	r2, r3, #1
 8027f34:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027f38:	787a      	ldrb	r2, [r7, #1]
 8027f3a:	fb12 f200 	smulbb	r2, r2, r0
 8027f3e:	121b      	asrs	r3, r3, #8
 8027f40:	703b      	strb	r3, [r7, #0]
 8027f42:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8027f46:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8027f4a:	fb03 2301 	mla	r3, r3, r1, r2
 8027f4e:	b29b      	uxth	r3, r3
 8027f50:	1c5a      	adds	r2, r3, #1
 8027f52:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027f56:	121b      	asrs	r3, r3, #8
 8027f58:	707b      	strb	r3, [r7, #1]
 8027f5a:	78bb      	ldrb	r3, [r7, #2]
 8027f5c:	fb13 f000 	smulbb	r0, r3, r0
 8027f60:	fb0c 0c01 	mla	ip, ip, r1, r0
 8027f64:	fa1f fc8c 	uxth.w	ip, ip
 8027f68:	f10c 0301 	add.w	r3, ip, #1
 8027f6c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027f70:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8027f74:	f887 c002 	strb.w	ip, [r7, #2]
 8027f78:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027f7a:	3703      	adds	r7, #3
 8027f7c:	441d      	add	r5, r3
 8027f7e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027f80:	441e      	add	r6, r3
 8027f82:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027f84:	3b01      	subs	r3, #1
 8027f86:	9318      	str	r3, [sp, #96]	; 0x60
 8027f88:	e69f      	b.n	8027cca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8027f8a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027f8c:	441d      	add	r5, r3
 8027f8e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027f90:	441e      	add	r6, r3
 8027f92:	9b07      	ldr	r3, [sp, #28]
 8027f94:	3b01      	subs	r3, #1
 8027f96:	9307      	str	r3, [sp, #28]
 8027f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027f9a:	3303      	adds	r3, #3
 8027f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8027f9e:	e674      	b.n	8027c8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8027fa0:	d025      	beq.n	8027fee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8027fa2:	9b07      	ldr	r3, [sp, #28]
 8027fa4:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8027fa6:	3b01      	subs	r3, #1
 8027fa8:	fb00 5003 	mla	r0, r0, r3, r5
 8027fac:	1400      	asrs	r0, r0, #16
 8027fae:	f53f ae89 	bmi.w	8027cc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027fb2:	3901      	subs	r1, #1
 8027fb4:	4288      	cmp	r0, r1
 8027fb6:	f6bf ae85 	bge.w	8027cc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027fba:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8027fbc:	fb01 6303 	mla	r3, r1, r3, r6
 8027fc0:	141b      	asrs	r3, r3, #16
 8027fc2:	f53f ae7f 	bmi.w	8027cc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027fc6:	3a01      	subs	r2, #1
 8027fc8:	4293      	cmp	r3, r2
 8027fca:	f6bf ae7b 	bge.w	8027cc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027fd0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027fd4:	f103 0e03 	add.w	lr, r3, #3
 8027fd8:	f1bb 0f00 	cmp.w	fp, #0
 8027fdc:	dc6e      	bgt.n	80280bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8027fde:	9b07      	ldr	r3, [sp, #28]
 8027fe0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027fe6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8027fea:	4423      	add	r3, r4
 8027fec:	930a      	str	r3, [sp, #40]	; 0x28
 8027fee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027ff0:	2b00      	cmp	r3, #0
 8027ff2:	f340 81ab 	ble.w	802834c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8027ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027ffa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027ffc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028000:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028004:	eef0 6a48 	vmov.f32	s13, s16
 8028008:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802800c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028010:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028014:	ee16 5a90 	vmov	r5, s13
 8028018:	eef0 6a68 	vmov.f32	s13, s17
 802801c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028020:	ee16 6a90 	vmov	r6, s13
 8028024:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028028:	ee69 7a27 	vmul.f32	s15, s18, s15
 802802c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028030:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028034:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028038:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802803c:	ee18 2a10 	vmov	r2, s16
 8028040:	eeb0 8a47 	vmov.f32	s16, s14
 8028044:	fb92 f3f3 	sdiv	r3, r2, r3
 8028048:	ee18 2a90 	vmov	r2, s17
 802804c:	9331      	str	r3, [sp, #196]	; 0xc4
 802804e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028050:	eef0 8a67 	vmov.f32	s17, s15
 8028054:	fb92 f3f3 	sdiv	r3, r2, r3
 8028058:	9332      	str	r3, [sp, #200]	; 0xc8
 802805a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802805c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802805e:	3b01      	subs	r3, #1
 8028060:	9317      	str	r3, [sp, #92]	; 0x5c
 8028062:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028064:	bf08      	it	eq
 8028066:	4613      	moveq	r3, r2
 8028068:	9307      	str	r3, [sp, #28]
 802806a:	e600      	b.n	8027c6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802806c:	f1bc 0f00 	cmp.w	ip, #0
 8028070:	f43f ae6e 	beq.w	8027d50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028074:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028078:	9308      	str	r3, [sp, #32]
 802807a:	0e1b      	lsrs	r3, r3, #24
 802807c:	9311      	str	r3, [sp, #68]	; 0x44
 802807e:	e667      	b.n	8027d50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028080:	f112 0801 	adds.w	r8, r2, #1
 8028084:	f53f af78 	bmi.w	8027f78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8028088:	45c6      	cmp	lr, r8
 802808a:	f6ff af75 	blt.w	8027f78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802808e:	f110 0801 	adds.w	r8, r0, #1
 8028092:	f53f af71 	bmi.w	8027f78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8028096:	4543      	cmp	r3, r8
 8028098:	f6ff af6e 	blt.w	8027f78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802809c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802809e:	b21b      	sxth	r3, r3
 80280a0:	9201      	str	r2, [sp, #4]
 80280a2:	9300      	str	r3, [sp, #0]
 80280a4:	fa0f f38e 	sxth.w	r3, lr
 80280a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80280aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80280ae:	e9cd c404 	strd	ip, r4, [sp, #16]
 80280b2:	4639      	mov	r1, r7
 80280b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80280b6:	f7ff fc53 	bl	8027960 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80280ba:	e75d      	b.n	8027f78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80280bc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80280be:	142f      	asrs	r7, r5, #16
 80280c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80280c2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80280c6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80280ca:	1433      	asrs	r3, r6, #16
 80280cc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80280d0:	fb02 7303 	mla	r3, r2, r3, r7
 80280d4:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 80280d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80280dc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80280e0:	2900      	cmp	r1, #0
 80280e2:	f000 812a 	beq.w	802833a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 80280e6:	687c      	ldr	r4, [r7, #4]
 80280e8:	940e      	str	r4, [sp, #56]	; 0x38
 80280ea:	0e24      	lsrs	r4, r4, #24
 80280ec:	9415      	str	r4, [sp, #84]	; 0x54
 80280ee:	b178      	cbz	r0, 8028110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80280f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80280f4:	3a01      	subs	r2, #1
 80280f6:	0092      	lsls	r2, r2, #2
 80280f8:	3204      	adds	r2, #4
 80280fa:	eb07 0802 	add.w	r8, r7, r2
 80280fe:	58ba      	ldr	r2, [r7, r2]
 8028100:	9209      	str	r2, [sp, #36]	; 0x24
 8028102:	0e12      	lsrs	r2, r2, #24
 8028104:	9212      	str	r2, [sp, #72]	; 0x48
 8028106:	f8d8 2004 	ldr.w	r2, [r8, #4]
 802810a:	920f      	str	r2, [sp, #60]	; 0x3c
 802810c:	0e12      	lsrs	r2, r2, #24
 802810e:	9216      	str	r2, [sp, #88]	; 0x58
 8028110:	b289      	uxth	r1, r1
 8028112:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028114:	b280      	uxth	r0, r0
 8028116:	fb01 f900 	mul.w	r9, r1, r0
 802811a:	0109      	lsls	r1, r1, #4
 802811c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028120:	eba1 0809 	sub.w	r8, r1, r9
 8028124:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8028128:	9915      	ldr	r1, [sp, #84]	; 0x54
 802812a:	b280      	uxth	r0, r0
 802812c:	fa1f f888 	uxth.w	r8, r8
 8028130:	1a12      	subs	r2, r2, r0
 8028132:	fb08 f101 	mul.w	r1, r8, r1
 8028136:	b292      	uxth	r2, r2
 8028138:	fb02 110c 	mla	r1, r2, ip, r1
 802813c:	fb00 1104 	mla	r1, r0, r4, r1
 8028140:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8028142:	fb09 1104 	mla	r1, r9, r4, r1
 8028146:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802814a:	2900      	cmp	r1, #0
 802814c:	f000 80ec 	beq.w	8028328 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8028150:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028154:	d019      	beq.n	802818a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 8028156:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802815a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802815e:	fb0c fa0a 	mul.w	sl, ip, sl
 8028162:	fb0c fc03 	mul.w	ip, ip, r3
 8028166:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802816a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802816e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028172:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028176:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802817a:	4453      	add	r3, sl
 802817c:	0a3f      	lsrs	r7, r7, #8
 802817e:	0a1b      	lsrs	r3, r3, #8
 8028180:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028184:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028188:	433b      	orrs	r3, r7
 802818a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802818c:	2cff      	cmp	r4, #255	; 0xff
 802818e:	d020      	beq.n	80281d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 8028190:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028192:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8028196:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8028198:	4367      	muls	r7, r4
 802819a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802819c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80281a0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80281a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80281a6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80281aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80281ae:	fb04 fa0a 	mul.w	sl, r4, sl
 80281b2:	44bc      	add	ip, r7
 80281b4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80281b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80281bc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80281c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80281c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80281c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80281cc:	ea4c 040a 	orr.w	r4, ip, sl
 80281d0:	940e      	str	r4, [sp, #56]	; 0x38
 80281d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80281d4:	2cff      	cmp	r4, #255	; 0xff
 80281d6:	d020      	beq.n	802821a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 80281d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80281da:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80281de:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80281e0:	4367      	muls	r7, r4
 80281e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80281e4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80281e8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80281ec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80281ee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80281f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80281f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80281fa:	44bc      	add	ip, r7
 80281fc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028200:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028204:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028208:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802820c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028210:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028214:	ea4c 040a 	orr.w	r4, ip, sl
 8028218:	9409      	str	r4, [sp, #36]	; 0x24
 802821a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802821c:	2cff      	cmp	r4, #255	; 0xff
 802821e:	d020      	beq.n	8028262 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 8028220:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028222:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8028226:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8028228:	4367      	muls	r7, r4
 802822a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802822c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028230:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028234:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8028236:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802823a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802823e:	fb04 fa0a 	mul.w	sl, r4, sl
 8028242:	44bc      	add	ip, r7
 8028244:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028248:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802824c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028250:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028254:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028258:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802825c:	ea4c 040a 	orr.w	r4, ip, sl
 8028260:	940f      	str	r4, [sp, #60]	; 0x3c
 8028262:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028264:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028268:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802826c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8028270:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8028272:	fb08 f707 	mul.w	r7, r8, r7
 8028276:	fb02 770c 	mla	r7, r2, ip, r7
 802827a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802827e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028280:	fb00 770c 	mla	r7, r0, ip, r7
 8028284:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028288:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802828a:	fb09 770c 	mla	r7, r9, ip, r7
 802828e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8028292:	fb08 f80c 	mul.w	r8, r8, ip
 8028296:	0a3f      	lsrs	r7, r7, #8
 8028298:	fb02 8303 	mla	r3, r2, r3, r8
 802829c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802829e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80282a2:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80282a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80282a8:	fb00 330a 	mla	r3, r0, sl, r3
 80282ac:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80282b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80282b2:	fb09 3c0c 	mla	ip, r9, ip, r3
 80282b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80282b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80282bc:	434b      	muls	r3, r1
 80282be:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80282c2:	1c59      	adds	r1, r3, #1
 80282c4:	ea47 070c 	orr.w	r7, r7, ip
 80282c8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80282cc:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80282d0:	b2fa      	uxtb	r2, r7
 80282d2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80282d6:	fb12 f200 	smulbb	r2, r2, r0
 80282da:	b2c9      	uxtb	r1, r1
 80282dc:	fb03 2301 	mla	r3, r3, r1, r2
 80282e0:	b29b      	uxth	r3, r3
 80282e2:	1c5a      	adds	r2, r3, #1
 80282e4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80282e8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80282ec:	fb12 f201 	smulbb	r2, r2, r1
 80282f0:	121b      	asrs	r3, r3, #8
 80282f2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80282f6:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80282fa:	0c3f      	lsrs	r7, r7, #16
 80282fc:	fb03 2300 	mla	r3, r3, r0, r2
 8028300:	b29b      	uxth	r3, r3
 8028302:	1c5a      	adds	r2, r3, #1
 8028304:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028308:	121b      	asrs	r3, r3, #8
 802830a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802830e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8028312:	fb13 f101 	smulbb	r1, r3, r1
 8028316:	fb07 1700 	mla	r7, r7, r0, r1
 802831a:	b2bf      	uxth	r7, r7
 802831c:	1c79      	adds	r1, r7, #1
 802831e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8028322:	123f      	asrs	r7, r7, #8
 8028324:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8028328:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802832a:	f10e 0e03 	add.w	lr, lr, #3
 802832e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028332:	441d      	add	r5, r3
 8028334:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8028336:	441e      	add	r6, r3
 8028338:	e64e      	b.n	8027fd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 802833a:	2800      	cmp	r0, #0
 802833c:	f43f aee8 	beq.w	8028110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8028340:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8028344:	9209      	str	r2, [sp, #36]	; 0x24
 8028346:	0e12      	lsrs	r2, r2, #24
 8028348:	9212      	str	r2, [sp, #72]	; 0x48
 802834a:	e6e1      	b.n	8028110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 802834c:	b01d      	add	sp, #116	; 0x74
 802834e:	ecbd 8b08 	vpop	{d8-d11}
 8028352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028358 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8028358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802835c:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8028360:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8028364:	fb04 5603 	mla	r6, r4, r3, r5
 8028368:	2c00      	cmp	r4, #0
 802836a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802836e:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8028372:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8028376:	db36      	blt.n	80283e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 8028378:	45a6      	cmp	lr, r4
 802837a:	dd34      	ble.n	80283e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 802837c:	2d00      	cmp	r5, #0
 802837e:	db30      	blt.n	80283e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8028380:	42ab      	cmp	r3, r5
 8028382:	dd2e      	ble.n	80283e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 8028384:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8028388:	1c6e      	adds	r6, r5, #1
 802838a:	d42f      	bmi.n	80283ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 802838c:	42b3      	cmp	r3, r6
 802838e:	dd2d      	ble.n	80283ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 8028390:	b370      	cbz	r0, 80283f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 8028392:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8028396:	3401      	adds	r4, #1
 8028398:	d42e      	bmi.n	80283f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 802839a:	45a6      	cmp	lr, r4
 802839c:	dd2c      	ble.n	80283f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 802839e:	b377      	cbz	r7, 80283fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 80283a0:	2d00      	cmp	r5, #0
 80283a2:	db27      	blt.n	80283f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 80283a4:	42ab      	cmp	r3, r5
 80283a6:	dd25      	ble.n	80283f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 80283a8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80283ac:	3501      	adds	r5, #1
 80283ae:	d429      	bmi.n	8028404 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 80283b0:	42ab      	cmp	r3, r5
 80283b2:	dd27      	ble.n	8028404 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 80283b4:	b340      	cbz	r0, 8028408 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 80283b6:	3301      	adds	r3, #1
 80283b8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80283bc:	280f      	cmp	r0, #15
 80283be:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80283c2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80283c6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80283ca:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80283ce:	d801      	bhi.n	80283d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 80283d0:	2f0f      	cmp	r7, #15
 80283d2:	d91b      	bls.n	802840c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 80283d4:	4b7e      	ldr	r3, [pc, #504]	; (80285d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 80283d6:	f240 1157 	movw	r1, #343	; 0x157
 80283da:	4a7e      	ldr	r2, [pc, #504]	; (80285d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 80283dc:	487e      	ldr	r0, [pc, #504]	; (80285d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 80283de:	f003 fa43 	bl	802b868 <__assert_func>
 80283e2:	2200      	movs	r2, #0
 80283e4:	e7d0      	b.n	8028388 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 80283e6:	2600      	movs	r6, #0
 80283e8:	4632      	mov	r2, r6
 80283ea:	e7d4      	b.n	8028396 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 80283ec:	2600      	movs	r6, #0
 80283ee:	e7d2      	b.n	8028396 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 80283f0:	4606      	mov	r6, r0
 80283f2:	e7d0      	b.n	8028396 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 80283f4:	2400      	movs	r4, #0
 80283f6:	e7d9      	b.n	80283ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 80283f8:	2300      	movs	r3, #0
 80283fa:	461c      	mov	r4, r3
 80283fc:	e7de      	b.n	80283bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 80283fe:	463b      	mov	r3, r7
 8028400:	463c      	mov	r4, r7
 8028402:	e7db      	b.n	80283bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8028404:	2300      	movs	r3, #0
 8028406:	e7d9      	b.n	80283bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 8028408:	4603      	mov	r3, r0
 802840a:	e7d7      	b.n	80283bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 802840c:	b280      	uxth	r0, r0
 802840e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8028412:	b2bf      	uxth	r7, r7
 8028414:	fb00 fe07 	mul.w	lr, r0, r7
 8028418:	ea4f 1000 	mov.w	r0, r0, lsl #4
 802841c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8028420:	eba0 0c0e 	sub.w	ip, r0, lr
 8028424:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8028428:	b2bf      	uxth	r7, r7
 802842a:	fa1f fc8c 	uxth.w	ip, ip
 802842e:	eba0 0507 	sub.w	r5, r0, r7
 8028432:	fb0c f00a 	mul.w	r0, ip, sl
 8028436:	b2ad      	uxth	r5, r5
 8028438:	fb05 000b 	mla	r0, r5, fp, r0
 802843c:	fb07 0009 	mla	r0, r7, r9, r0
 8028440:	fb0e 0008 	mla	r0, lr, r8, r0
 8028444:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028448:	9001      	str	r0, [sp, #4]
 802844a:	d018      	beq.n	802847e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 802844c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8028450:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028454:	fb0b f000 	mul.w	r0, fp, r0
 8028458:	fb0b fb02 	mul.w	fp, fp, r2
 802845c:	0a02      	lsrs	r2, r0, #8
 802845e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028462:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028466:	4402      	add	r2, r0
 8028468:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802846c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028470:	0a12      	lsrs	r2, r2, #8
 8028472:	0a00      	lsrs	r0, r0, #8
 8028474:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028478:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802847c:	4302      	orrs	r2, r0
 802847e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8028482:	d01a      	beq.n	80284ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 8028484:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8028488:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802848c:	fb0a f000 	mul.w	r0, sl, r0
 8028490:	fb0a fa06 	mul.w	sl, sl, r6
 8028494:	0a06      	lsrs	r6, r0, #8
 8028496:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802849a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802849e:	4406      	add	r6, r0
 80284a0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80284a4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80284a8:	0a36      	lsrs	r6, r6, #8
 80284aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80284ae:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80284b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80284b6:	ea46 060a 	orr.w	r6, r6, sl
 80284ba:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80284be:	d01b      	beq.n	80284f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 80284c0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80284c4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80284c8:	fb09 fa0a 	mul.w	sl, r9, sl
 80284cc:	fb09 f004 	mul.w	r0, r9, r4
 80284d0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80284d4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80284d8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80284dc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80284e0:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80284e4:	4454      	add	r4, sl
 80284e6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80284ea:	0a24      	lsrs	r4, r4, #8
 80284ec:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80284f0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80284f4:	ea44 0409 	orr.w	r4, r4, r9
 80284f8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80284fc:	d01b      	beq.n	8028536 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 80284fe:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8028502:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028506:	fb08 f909 	mul.w	r9, r8, r9
 802850a:	fb08 f003 	mul.w	r0, r8, r3
 802850e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8028512:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8028516:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802851a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802851e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8028522:	444b      	add	r3, r9
 8028524:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028528:	0a1b      	lsrs	r3, r3, #8
 802852a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802852e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028532:	ea43 0308 	orr.w	r3, r3, r8
 8028536:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802853a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802853e:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 8028542:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028546:	fb0c f000 	mul.w	r0, ip, r0
 802854a:	fb0c f606 	mul.w	r6, ip, r6
 802854e:	fb05 0808 	mla	r8, r5, r8, r0
 8028552:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8028556:	fb05 6502 	mla	r5, r5, r2, r6
 802855a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802855e:	fb07 8800 	mla	r8, r7, r0, r8
 8028562:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8028566:	fb07 5704 	mla	r7, r7, r4, r5
 802856a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802856e:	fb0e 8000 	mla	r0, lr, r0, r8
 8028572:	780a      	ldrb	r2, [r1, #0]
 8028574:	fb0e 7e03 	mla	lr, lr, r3, r7
 8028578:	9b01      	ldr	r3, [sp, #4]
 802857a:	0a00      	lsrs	r0, r0, #8
 802857c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028580:	43db      	mvns	r3, r3
 8028582:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028586:	b2db      	uxtb	r3, r3
 8028588:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802858c:	ea40 0e0e 	orr.w	lr, r0, lr
 8028590:	fb02 f003 	mul.w	r0, r2, r3
 8028594:	1c42      	adds	r2, r0, #1
 8028596:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802859a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 802859e:	700a      	strb	r2, [r1, #0]
 80285a0:	784a      	ldrb	r2, [r1, #1]
 80285a2:	435a      	muls	r2, r3
 80285a4:	1c50      	adds	r0, r2, #1
 80285a6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80285aa:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80285ae:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80285b2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80285b6:	704a      	strb	r2, [r1, #1]
 80285b8:	788a      	ldrb	r2, [r1, #2]
 80285ba:	4353      	muls	r3, r2
 80285bc:	1c5a      	adds	r2, r3, #1
 80285be:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80285c2:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80285c6:	f881 e002 	strb.w	lr, [r1, #2]
 80285ca:	b003      	add	sp, #12
 80285cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80285d0:	0803129e 	.word	0x0803129e
 80285d4:	08031796 	.word	0x08031796
 80285d8:	08031367 	.word	0x08031367

080285dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80285dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80285e0:	ed2d 8b08 	vpush	{d8-d11}
 80285e4:	b099      	sub	sp, #100	; 0x64
 80285e6:	eeb0 aa40 	vmov.f32	s20, s0
 80285ea:	eef0 9a60 	vmov.f32	s19, s1
 80285ee:	9017      	str	r0, [sp, #92]	; 0x5c
 80285f0:	eeb0 9a41 	vmov.f32	s18, s2
 80285f4:	9306      	str	r3, [sp, #24]
 80285f6:	eeb0 8a62 	vmov.f32	s16, s5
 80285fa:	eef0 8a43 	vmov.f32	s17, s6
 80285fe:	eef0 ba44 	vmov.f32	s23, s8
 8028602:	eeb0 ba64 	vmov.f32	s22, s9
 8028606:	eef0 aa45 	vmov.f32	s21, s10
 802860a:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 802860e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8028610:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8028614:	6850      	ldr	r0, [r2, #4]
 8028616:	6812      	ldr	r2, [r2, #0]
 8028618:	fb00 1303 	mla	r3, r0, r3, r1
 802861c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028620:	18d3      	adds	r3, r2, r3
 8028622:	9309      	str	r3, [sp, #36]	; 0x24
 8028624:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8028626:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 802862a:	681b      	ldr	r3, [r3, #0]
 802862c:	930e      	str	r3, [sp, #56]	; 0x38
 802862e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028630:	2b00      	cmp	r3, #0
 8028632:	dc03      	bgt.n	802863c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8028634:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028636:	2b00      	cmp	r3, #0
 8028638:	f340 8360 	ble.w	8028cfc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 802863c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802863e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028642:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028646:	1e48      	subs	r0, r1, #1
 8028648:	1e57      	subs	r7, r2, #1
 802864a:	9b06      	ldr	r3, [sp, #24]
 802864c:	2b00      	cmp	r3, #0
 802864e:	f340 817b 	ble.w	8028948 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8028652:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8028656:	ea4f 4326 	mov.w	r3, r6, asr #16
 802865a:	d406      	bmi.n	802866a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802865c:	4584      	cmp	ip, r0
 802865e:	da04      	bge.n	802866a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028660:	2b00      	cmp	r3, #0
 8028662:	db02      	blt.n	802866a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028664:	42bb      	cmp	r3, r7
 8028666:	f2c0 8170 	blt.w	802894a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802866a:	f11c 0c01 	adds.w	ip, ip, #1
 802866e:	f100 8160 	bmi.w	8028932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028672:	4561      	cmp	r1, ip
 8028674:	f2c0 815d 	blt.w	8028932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028678:	3301      	adds	r3, #1
 802867a:	f100 815a 	bmi.w	8028932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802867e:	429a      	cmp	r2, r3
 8028680:	f2c0 8157 	blt.w	8028932 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028684:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8028688:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802868a:	f1b8 0f00 	cmp.w	r8, #0
 802868e:	f340 8179 	ble.w	8028984 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8028692:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8028694:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028698:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802869a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802869e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80286a2:	142a      	asrs	r2, r5, #16
 80286a4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80286a8:	689b      	ldr	r3, [r3, #8]
 80286aa:	f100 81be 	bmi.w	8028a2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80286ae:	f103 39ff 	add.w	r9, r3, #4294967295
 80286b2:	454a      	cmp	r2, r9
 80286b4:	f280 81b9 	bge.w	8028a2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80286b8:	f1bc 0f00 	cmp.w	ip, #0
 80286bc:	f2c0 81b5 	blt.w	8028a2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80286c0:	f10e 39ff 	add.w	r9, lr, #4294967295
 80286c4:	45cc      	cmp	ip, r9
 80286c6:	f280 81b0 	bge.w	8028a2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80286ca:	b21b      	sxth	r3, r3
 80286cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80286ce:	fb0c 2203 	mla	r2, ip, r3, r2
 80286d2:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80286d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80286da:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80286de:	2900      	cmp	r1, #0
 80286e0:	f000 8197 	beq.w	8028a12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 80286e4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80286e8:	940a      	str	r4, [sp, #40]	; 0x28
 80286ea:	0e24      	lsrs	r4, r4, #24
 80286ec:	9411      	str	r4, [sp, #68]	; 0x44
 80286ee:	b180      	cbz	r0, 8028712 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80286f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80286f4:	3b01      	subs	r3, #1
 80286f6:	009b      	lsls	r3, r3, #2
 80286f8:	3304      	adds	r3, #4
 80286fa:	eb09 0c03 	add.w	ip, r9, r3
 80286fe:	f859 3003 	ldr.w	r3, [r9, r3]
 8028702:	9307      	str	r3, [sp, #28]
 8028704:	0e1b      	lsrs	r3, r3, #24
 8028706:	930f      	str	r3, [sp, #60]	; 0x3c
 8028708:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802870c:	930b      	str	r3, [sp, #44]	; 0x2c
 802870e:	0e1b      	lsrs	r3, r3, #24
 8028710:	9312      	str	r3, [sp, #72]	; 0x48
 8028712:	b289      	uxth	r1, r1
 8028714:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8028716:	b280      	uxth	r0, r0
 8028718:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802871a:	fb01 fa00 	mul.w	sl, r1, r0
 802871e:	0109      	lsls	r1, r1, #4
 8028720:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8028724:	eba1 090a 	sub.w	r9, r1, sl
 8028728:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802872c:	b280      	uxth	r0, r0
 802872e:	fa1f f989 	uxth.w	r9, r9
 8028732:	1a09      	subs	r1, r1, r0
 8028734:	fb09 f303 	mul.w	r3, r9, r3
 8028738:	b289      	uxth	r1, r1
 802873a:	fb01 330e 	mla	r3, r1, lr, r3
 802873e:	fb00 3304 	mla	r3, r0, r4, r3
 8028742:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028744:	fb0a 3304 	mla	r3, sl, r4, r3
 8028748:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802874c:	2b00      	cmp	r3, #0
 802874e:	f000 80e8 	beq.w	8028922 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8028752:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028756:	d01b      	beq.n	8028790 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8028758:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 802875c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028760:	fb0e fb0b 	mul.w	fp, lr, fp
 8028764:	fb0e fe02 	mul.w	lr, lr, r2
 8028768:	ea4f 221b 	mov.w	r2, fp, lsr #8
 802876c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028770:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028774:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028778:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802877c:	445a      	add	r2, fp
 802877e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028782:	0a12      	lsrs	r2, r2, #8
 8028784:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028788:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802878c:	ea42 020c 	orr.w	r2, r2, ip
 8028790:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028792:	2cff      	cmp	r4, #255	; 0xff
 8028794:	d021      	beq.n	80287da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8028796:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028798:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802879c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802879e:	fb04 fc0c 	mul.w	ip, r4, ip
 80287a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80287a4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80287a8:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80287ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80287ae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80287b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80287b6:	fb04 fb0b 	mul.w	fp, r4, fp
 80287ba:	44e6      	add	lr, ip
 80287bc:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80287c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80287c4:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80287c8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80287cc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80287d0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80287d4:	ea4e 040b 	orr.w	r4, lr, fp
 80287d8:	940a      	str	r4, [sp, #40]	; 0x28
 80287da:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80287dc:	2cff      	cmp	r4, #255	; 0xff
 80287de:	d021      	beq.n	8028824 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80287e0:	9c07      	ldr	r4, [sp, #28]
 80287e2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80287e6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80287e8:	fb04 fc0c 	mul.w	ip, r4, ip
 80287ec:	9c07      	ldr	r4, [sp, #28]
 80287ee:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80287f2:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80287f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80287f8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80287fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028800:	fb04 fb0b 	mul.w	fp, r4, fp
 8028804:	44e6      	add	lr, ip
 8028806:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802880a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802880e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8028812:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028816:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802881a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802881e:	ea4e 040b 	orr.w	r4, lr, fp
 8028822:	9407      	str	r4, [sp, #28]
 8028824:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028826:	2cff      	cmp	r4, #255	; 0xff
 8028828:	d021      	beq.n	802886e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 802882a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802882c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028830:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028832:	fb04 fc0c 	mul.w	ip, r4, ip
 8028836:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028838:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802883c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8028840:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028842:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028846:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802884a:	fb04 fb0b 	mul.w	fp, r4, fp
 802884e:	44e6      	add	lr, ip
 8028850:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8028854:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028858:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802885c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028860:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8028864:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8028868:	ea4e 040b 	orr.w	r4, lr, fp
 802886c:	940b      	str	r4, [sp, #44]	; 0x2c
 802886e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028870:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028874:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028878:	2bff      	cmp	r3, #255	; 0xff
 802887a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802887e:	9c07      	ldr	r4, [sp, #28]
 8028880:	fb09 fc0c 	mul.w	ip, r9, ip
 8028884:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028888:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802888c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802888e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8028892:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8028896:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028898:	fb0a cc0e 	mla	ip, sl, lr, ip
 802889c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80288a0:	fb09 f90e 	mul.w	r9, r9, lr
 80288a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80288a8:	fb01 9202 	mla	r2, r1, r2, r9
 80288ac:	9907      	ldr	r1, [sp, #28]
 80288ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80288b2:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80288b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80288b8:	fb00 220b 	mla	r2, r0, fp, r2
 80288bc:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80288c0:	fb0a 2a00 	mla	sl, sl, r0, r2
 80288c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80288c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80288cc:	ea4c 0c0a 	orr.w	ip, ip, sl
 80288d0:	fa5f f08c 	uxtb.w	r0, ip
 80288d4:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80288d8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80288dc:	f000 80a2 	beq.w	8028a24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 80288e0:	43db      	mvns	r3, r3
 80288e2:	783a      	ldrb	r2, [r7, #0]
 80288e4:	f897 a002 	ldrb.w	sl, [r7, #2]
 80288e8:	b2db      	uxtb	r3, r3
 80288ea:	fb02 fe03 	mul.w	lr, r2, r3
 80288ee:	fb0a fa03 	mul.w	sl, sl, r3
 80288f2:	f10e 0201 	add.w	r2, lr, #1
 80288f6:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 80288fa:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80288fe:	703a      	strb	r2, [r7, #0]
 8028900:	787a      	ldrb	r2, [r7, #1]
 8028902:	fb02 f003 	mul.w	r0, r2, r3
 8028906:	f10a 0301 	add.w	r3, sl, #1
 802890a:	1c42      	adds	r2, r0, #1
 802890c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8028910:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8028914:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8028918:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802891c:	707a      	strb	r2, [r7, #1]
 802891e:	f887 c002 	strb.w	ip, [r7, #2]
 8028922:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8028924:	3703      	adds	r7, #3
 8028926:	f108 38ff 	add.w	r8, r8, #4294967295
 802892a:	441d      	add	r5, r3
 802892c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802892e:	441e      	add	r6, r3
 8028930:	e6ab      	b.n	802868a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8028932:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8028934:	441d      	add	r5, r3
 8028936:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028938:	441e      	add	r6, r3
 802893a:	9b06      	ldr	r3, [sp, #24]
 802893c:	3b01      	subs	r3, #1
 802893e:	9306      	str	r3, [sp, #24]
 8028940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028942:	3303      	adds	r3, #3
 8028944:	9309      	str	r3, [sp, #36]	; 0x24
 8028946:	e680      	b.n	802864a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8028948:	d024      	beq.n	8028994 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 802894a:	9b06      	ldr	r3, [sp, #24]
 802894c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 802894e:	3b01      	subs	r3, #1
 8028950:	fb00 5003 	mla	r0, r0, r3, r5
 8028954:	1400      	asrs	r0, r0, #16
 8028956:	f53f ae95 	bmi.w	8028684 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802895a:	3901      	subs	r1, #1
 802895c:	4288      	cmp	r0, r1
 802895e:	f6bf ae91 	bge.w	8028684 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028962:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8028964:	fb01 6303 	mla	r3, r1, r3, r6
 8028968:	141b      	asrs	r3, r3, #16
 802896a:	f53f ae8b 	bmi.w	8028684 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802896e:	3a01      	subs	r2, #1
 8028970:	4293      	cmp	r3, r2
 8028972:	f6bf ae87 	bge.w	8028684 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8028976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028978:	f8dd b018 	ldr.w	fp, [sp, #24]
 802897c:	1cdf      	adds	r7, r3, #3
 802897e:	f1bb 0f00 	cmp.w	fp, #0
 8028982:	dc6e      	bgt.n	8028a62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8028984:	9b06      	ldr	r3, [sp, #24]
 8028986:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802898a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802898c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028990:	4423      	add	r3, r4
 8028992:	9309      	str	r3, [sp, #36]	; 0x24
 8028994:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028996:	2b00      	cmp	r3, #0
 8028998:	f340 81b0 	ble.w	8028cfc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 802899c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80289a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80289a2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80289a6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80289aa:	eef0 6a48 	vmov.f32	s13, s16
 80289ae:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80289b2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80289b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80289ba:	ee16 5a90 	vmov	r5, s13
 80289be:	eef0 6a68 	vmov.f32	s13, s17
 80289c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80289c6:	ee16 6a90 	vmov	r6, s13
 80289ca:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80289ce:	ee69 7a27 	vmul.f32	s15, s18, s15
 80289d2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80289d6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80289da:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80289de:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80289e2:	ee18 2a10 	vmov	r2, s16
 80289e6:	eeb0 8a47 	vmov.f32	s16, s14
 80289ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80289ee:	ee18 2a90 	vmov	r2, s17
 80289f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80289f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80289f6:	eef0 8a67 	vmov.f32	s17, s15
 80289fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80289fe:	932e      	str	r3, [sp, #184]	; 0xb8
 8028a00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028a02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8028a04:	3b01      	subs	r3, #1
 8028a06:	9315      	str	r3, [sp, #84]	; 0x54
 8028a08:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028a0a:	bf08      	it	eq
 8028a0c:	4613      	moveq	r3, r2
 8028a0e:	9306      	str	r3, [sp, #24]
 8028a10:	e60d      	b.n	802862e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8028a12:	2800      	cmp	r0, #0
 8028a14:	f43f ae7d 	beq.w	8028712 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8028a18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8028a1c:	9307      	str	r3, [sp, #28]
 8028a1e:	0e1b      	lsrs	r3, r3, #24
 8028a20:	930f      	str	r3, [sp, #60]	; 0x3c
 8028a22:	e676      	b.n	8028712 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8028a24:	7038      	strb	r0, [r7, #0]
 8028a26:	7079      	strb	r1, [r7, #1]
 8028a28:	e779      	b.n	802891e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8028a2a:	f112 0901 	adds.w	r9, r2, #1
 8028a2e:	f53f af78 	bmi.w	8028922 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8028a32:	454b      	cmp	r3, r9
 8028a34:	f6ff af75 	blt.w	8028922 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8028a38:	f11c 0901 	adds.w	r9, ip, #1
 8028a3c:	f53f af71 	bmi.w	8028922 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8028a40:	45ce      	cmp	lr, r9
 8028a42:	f6ff af6e 	blt.w	8028922 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8028a46:	b21b      	sxth	r3, r3
 8028a48:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8028a4c:	fa0f f28e 	sxth.w	r2, lr
 8028a50:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8028a54:	9200      	str	r2, [sp, #0]
 8028a56:	4639      	mov	r1, r7
 8028a58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028a5a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8028a5c:	f7ff fc7c 	bl	8028358 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8028a60:	e75f      	b.n	8028922 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8028a62:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8028a64:	1429      	asrs	r1, r5, #16
 8028a66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028a68:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8028a6c:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8028a70:	1433      	asrs	r3, r6, #16
 8028a72:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028a76:	fb0c 1303 	mla	r3, ip, r3, r1
 8028a7a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028a7c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8028a80:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8028a84:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8028a88:	2a00      	cmp	r2, #0
 8028a8a:	f000 8129 	beq.w	8028ce0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8028a8e:	684c      	ldr	r4, [r1, #4]
 8028a90:	940c      	str	r4, [sp, #48]	; 0x30
 8028a92:	0e24      	lsrs	r4, r4, #24
 8028a94:	9413      	str	r4, [sp, #76]	; 0x4c
 8028a96:	b198      	cbz	r0, 8028ac0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028a98:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8028a9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8028aa0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8028aa4:	f10c 0c04 	add.w	ip, ip, #4
 8028aa8:	eb01 080c 	add.w	r8, r1, ip
 8028aac:	f851 100c 	ldr.w	r1, [r1, ip]
 8028ab0:	9108      	str	r1, [sp, #32]
 8028ab2:	0e09      	lsrs	r1, r1, #24
 8028ab4:	9110      	str	r1, [sp, #64]	; 0x40
 8028ab6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8028aba:	910d      	str	r1, [sp, #52]	; 0x34
 8028abc:	0e09      	lsrs	r1, r1, #24
 8028abe:	9114      	str	r1, [sp, #80]	; 0x50
 8028ac0:	b292      	uxth	r2, r2
 8028ac2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028ac4:	b280      	uxth	r0, r0
 8028ac6:	fb02 f900 	mul.w	r9, r2, r0
 8028aca:	0112      	lsls	r2, r2, #4
 8028acc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028ad0:	eba2 0809 	sub.w	r8, r2, r9
 8028ad4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8028ad8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028ada:	b280      	uxth	r0, r0
 8028adc:	fa1f f888 	uxth.w	r8, r8
 8028ae0:	1a09      	subs	r1, r1, r0
 8028ae2:	fb08 f202 	mul.w	r2, r8, r2
 8028ae6:	b289      	uxth	r1, r1
 8028ae8:	fb01 220e 	mla	r2, r1, lr, r2
 8028aec:	fb00 2204 	mla	r2, r0, r4, r2
 8028af0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8028af2:	fb09 2204 	mla	r2, r9, r4, r2
 8028af6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028afa:	2a00      	cmp	r2, #0
 8028afc:	f000 80e8 	beq.w	8028cd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8028b00:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028b04:	d01b      	beq.n	8028b3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 8028b06:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028b0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028b0e:	fb0e fa0a 	mul.w	sl, lr, sl
 8028b12:	fb0e fe03 	mul.w	lr, lr, r3
 8028b16:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028b1a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028b1e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028b22:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028b26:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028b2a:	4453      	add	r3, sl
 8028b2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028b30:	0a1b      	lsrs	r3, r3, #8
 8028b32:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028b36:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028b3a:	ea43 030c 	orr.w	r3, r3, ip
 8028b3e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8028b40:	2cff      	cmp	r4, #255	; 0xff
 8028b42:	d021      	beq.n	8028b88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 8028b44:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028b46:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028b4a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8028b4c:	fb04 fc0c 	mul.w	ip, r4, ip
 8028b50:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028b52:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028b56:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028b5a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8028b5c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028b60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b64:	fb04 fa0a 	mul.w	sl, r4, sl
 8028b68:	44e6      	add	lr, ip
 8028b6a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028b6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b72:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028b76:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028b7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028b7e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028b82:	ea4e 040a 	orr.w	r4, lr, sl
 8028b86:	940c      	str	r4, [sp, #48]	; 0x30
 8028b88:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028b8a:	2cff      	cmp	r4, #255	; 0xff
 8028b8c:	d021      	beq.n	8028bd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 8028b8e:	9c08      	ldr	r4, [sp, #32]
 8028b90:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028b94:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028b96:	fb04 fc0c 	mul.w	ip, r4, ip
 8028b9a:	9c08      	ldr	r4, [sp, #32]
 8028b9c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8028ba0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028ba2:	fb04 fa0e 	mul.w	sl, r4, lr
 8028ba6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028baa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028bae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028bb2:	44e6      	add	lr, ip
 8028bb4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028bb8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028bbc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028bc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028bc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028bc8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028bcc:	ea4e 040a 	orr.w	r4, lr, sl
 8028bd0:	9408      	str	r4, [sp, #32]
 8028bd2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8028bd4:	2cff      	cmp	r4, #255	; 0xff
 8028bd6:	d021      	beq.n	8028c1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 8028bd8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028bda:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028bde:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8028be0:	fb04 fc0c 	mul.w	ip, r4, ip
 8028be4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028be6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028bea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028bee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8028bf0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028bf4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028bf8:	fb04 fa0a 	mul.w	sl, r4, sl
 8028bfc:	44e6      	add	lr, ip
 8028bfe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028c02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028c06:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028c0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028c0e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028c12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028c16:	ea4e 040a 	orr.w	r4, lr, sl
 8028c1a:	940d      	str	r4, [sp, #52]	; 0x34
 8028c1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028c1e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8028c22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028c26:	2aff      	cmp	r2, #255	; 0xff
 8028c28:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028c2c:	9c08      	ldr	r4, [sp, #32]
 8028c2e:	fb08 fc0c 	mul.w	ip, r8, ip
 8028c32:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028c36:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8028c3a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028c3c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8028c40:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8028c44:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028c46:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028c4a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8028c4e:	fb08 f80e 	mul.w	r8, r8, lr
 8028c52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028c56:	fb01 8303 	mla	r3, r1, r3, r8
 8028c5a:	9908      	ldr	r1, [sp, #32]
 8028c5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028c60:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028c64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8028c66:	fb00 330a 	mla	r3, r0, sl, r3
 8028c6a:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8028c6e:	fb09 3e0e 	mla	lr, r9, lr, r3
 8028c72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028c76:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028c7a:	ea4c 0c0e 	orr.w	ip, ip, lr
 8028c7e:	fa5f f08c 	uxtb.w	r0, ip
 8028c82:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8028c86:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8028c8a:	d032      	beq.n	8028cf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 8028c8c:	43d2      	mvns	r2, r2
 8028c8e:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8028c92:	b2d2      	uxtb	r2, r2
 8028c94:	fb0e fe02 	mul.w	lr, lr, r2
 8028c98:	f10e 0301 	add.w	r3, lr, #1
 8028c9c:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8028ca0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028ca4:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8028ca8:	4350      	muls	r0, r2
 8028caa:	f807 3c03 	strb.w	r3, [r7, #-3]
 8028cae:	1c43      	adds	r3, r0, #1
 8028cb0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028cb4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8028cb8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8028cbc:	4353      	muls	r3, r2
 8028cbe:	f807 1c02 	strb.w	r1, [r7, #-2]
 8028cc2:	1c5a      	adds	r2, r3, #1
 8028cc4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028cc8:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8028ccc:	f807 cc01 	strb.w	ip, [r7, #-1]
 8028cd0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8028cd2:	3703      	adds	r7, #3
 8028cd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028cd8:	441d      	add	r5, r3
 8028cda:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028cdc:	441e      	add	r6, r3
 8028cde:	e64e      	b.n	802897e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 8028ce0:	2800      	cmp	r0, #0
 8028ce2:	f43f aeed 	beq.w	8028ac0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028ce6:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8028cea:	9108      	str	r1, [sp, #32]
 8028cec:	0e09      	lsrs	r1, r1, #24
 8028cee:	9110      	str	r1, [sp, #64]	; 0x40
 8028cf0:	e6e6      	b.n	8028ac0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028cf2:	f807 0c03 	strb.w	r0, [r7, #-3]
 8028cf6:	f807 1c02 	strb.w	r1, [r7, #-2]
 8028cfa:	e7e7      	b.n	8028ccc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 8028cfc:	b019      	add	sp, #100	; 0x64
 8028cfe:	ecbd 8b08 	vpop	{d8-d11}
 8028d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028d08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8028d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d0c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8028d10:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8028d14:	2800      	cmp	r0, #0
 8028d16:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8028d1a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8028d1e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8028d22:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8028d26:	db6b      	blt.n	8028e00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028d28:	4580      	cmp	r8, r0
 8028d2a:	dd69      	ble.n	8028e00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028d2c:	f1bc 0f00 	cmp.w	ip, #0
 8028d30:	db66      	blt.n	8028e00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028d32:	45e1      	cmp	r9, ip
 8028d34:	dd64      	ble.n	8028e00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028d36:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028d3a:	f01e 0f01 	tst.w	lr, #1
 8028d3e:	5d16      	ldrb	r6, [r2, r4]
 8028d40:	bf0c      	ite	eq
 8028d42:	f006 060f 	andeq.w	r6, r6, #15
 8028d46:	1136      	asrne	r6, r6, #4
 8028d48:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028d4c:	b2f6      	uxtb	r6, r6
 8028d4e:	f110 0a01 	adds.w	sl, r0, #1
 8028d52:	d457      	bmi.n	8028e04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028d54:	45d0      	cmp	r8, sl
 8028d56:	dd55      	ble.n	8028e04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028d58:	f1bc 0f00 	cmp.w	ip, #0
 8028d5c:	db52      	blt.n	8028e04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028d5e:	45e1      	cmp	r9, ip
 8028d60:	dd50      	ble.n	8028e04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028d62:	2f00      	cmp	r7, #0
 8028d64:	f000 80ac 	beq.w	8028ec0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8028d68:	f10e 0b01 	add.w	fp, lr, #1
 8028d6c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8028d70:	f01b 0f01 	tst.w	fp, #1
 8028d74:	5d14      	ldrb	r4, [r2, r4]
 8028d76:	bf0c      	ite	eq
 8028d78:	f004 040f 	andeq.w	r4, r4, #15
 8028d7c:	1124      	asrne	r4, r4, #4
 8028d7e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028d82:	b2e4      	uxtb	r4, r4
 8028d84:	2d00      	cmp	r5, #0
 8028d86:	f000 8096 	beq.w	8028eb6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8028d8a:	2800      	cmp	r0, #0
 8028d8c:	f10c 0c01 	add.w	ip, ip, #1
 8028d90:	db3c      	blt.n	8028e0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028d92:	4580      	cmp	r8, r0
 8028d94:	dd3a      	ble.n	8028e0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028d96:	f1bc 0f00 	cmp.w	ip, #0
 8028d9a:	db37      	blt.n	8028e0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028d9c:	45e1      	cmp	r9, ip
 8028d9e:	dd35      	ble.n	8028e0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028da0:	eb03 0b0e 	add.w	fp, r3, lr
 8028da4:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8028da8:	f01b 0f01 	tst.w	fp, #1
 8028dac:	5c10      	ldrb	r0, [r2, r0]
 8028dae:	bf0c      	ite	eq
 8028db0:	f000 000f 	andeq.w	r0, r0, #15
 8028db4:	1100      	asrne	r0, r0, #4
 8028db6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028dba:	b2c0      	uxtb	r0, r0
 8028dbc:	f1ba 0f00 	cmp.w	sl, #0
 8028dc0:	db26      	blt.n	8028e10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028dc2:	45d0      	cmp	r8, sl
 8028dc4:	dd24      	ble.n	8028e10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028dc6:	f1bc 0f00 	cmp.w	ip, #0
 8028dca:	db21      	blt.n	8028e10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028dcc:	45e1      	cmp	r9, ip
 8028dce:	dd1f      	ble.n	8028e10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028dd0:	b307      	cbz	r7, 8028e14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8028dd2:	3301      	adds	r3, #1
 8028dd4:	449e      	add	lr, r3
 8028dd6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028dda:	f01e 0f01 	tst.w	lr, #1
 8028dde:	5cd3      	ldrb	r3, [r2, r3]
 8028de0:	bf0c      	ite	eq
 8028de2:	f003 030f 	andeq.w	r3, r3, #15
 8028de6:	111b      	asrne	r3, r3, #4
 8028de8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028dec:	b2db      	uxtb	r3, r3
 8028dee:	2f0f      	cmp	r7, #15
 8028df0:	d911      	bls.n	8028e16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8028df2:	4b35      	ldr	r3, [pc, #212]	; (8028ec8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8028df4:	f240 1157 	movw	r1, #343	; 0x157
 8028df8:	4a34      	ldr	r2, [pc, #208]	; (8028ecc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 8028dfa:	4835      	ldr	r0, [pc, #212]	; (8028ed0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8028dfc:	f002 fd34 	bl	802b868 <__assert_func>
 8028e00:	2600      	movs	r6, #0
 8028e02:	e7a4      	b.n	8028d4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8028e04:	2400      	movs	r4, #0
 8028e06:	e7bd      	b.n	8028d84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 8028e08:	463c      	mov	r4, r7
 8028e0a:	e7be      	b.n	8028d8a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8028e0c:	2000      	movs	r0, #0
 8028e0e:	e7d5      	b.n	8028dbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8028e10:	2300      	movs	r3, #0
 8028e12:	e7ec      	b.n	8028dee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8028e14:	463b      	mov	r3, r7
 8028e16:	2d0f      	cmp	r5, #15
 8028e18:	d8eb      	bhi.n	8028df2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8028e1a:	b2bf      	uxth	r7, r7
 8028e1c:	b2ad      	uxth	r5, r5
 8028e1e:	fb07 f205 	mul.w	r2, r7, r5
 8028e22:	013f      	lsls	r7, r7, #4
 8028e24:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8028e28:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8028e2c:	1abf      	subs	r7, r7, r2
 8028e2e:	b2ad      	uxth	r5, r5
 8028e30:	b2bf      	uxth	r7, r7
 8028e32:	ebac 0c05 	sub.w	ip, ip, r5
 8028e36:	437c      	muls	r4, r7
 8028e38:	fa1f fc8c 	uxth.w	ip, ip
 8028e3c:	fb06 440c 	mla	r4, r6, ip, r4
 8028e40:	fb05 4400 	mla	r4, r5, r0, r4
 8028e44:	fb02 4203 	mla	r2, r2, r3, r4
 8028e48:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028e4c:	b38a      	cbz	r2, 8028eb2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8028e4e:	4b21      	ldr	r3, [pc, #132]	; (8028ed4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8028e50:	681c      	ldr	r4, [r3, #0]
 8028e52:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8028e56:	b2e5      	uxtb	r5, r4
 8028e58:	4353      	muls	r3, r2
 8028e5a:	1c5a      	adds	r2, r3, #1
 8028e5c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028e60:	1212      	asrs	r2, r2, #8
 8028e62:	b290      	uxth	r0, r2
 8028e64:	43d2      	mvns	r2, r2
 8028e66:	fb15 f500 	smulbb	r5, r5, r0
 8028e6a:	b2d3      	uxtb	r3, r2
 8028e6c:	780a      	ldrb	r2, [r1, #0]
 8028e6e:	fb02 5203 	mla	r2, r2, r3, r5
 8028e72:	b292      	uxth	r2, r2
 8028e74:	1c55      	adds	r5, r2, #1
 8028e76:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8028e7a:	784d      	ldrb	r5, [r1, #1]
 8028e7c:	fb15 f503 	smulbb	r5, r5, r3
 8028e80:	1212      	asrs	r2, r2, #8
 8028e82:	700a      	strb	r2, [r1, #0]
 8028e84:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8028e88:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8028e8c:	fb02 5200 	mla	r2, r2, r0, r5
 8028e90:	b292      	uxth	r2, r2
 8028e92:	1c55      	adds	r5, r2, #1
 8028e94:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8028e98:	1212      	asrs	r2, r2, #8
 8028e9a:	704a      	strb	r2, [r1, #1]
 8028e9c:	788a      	ldrb	r2, [r1, #2]
 8028e9e:	fb12 f303 	smulbb	r3, r2, r3
 8028ea2:	fb04 3300 	mla	r3, r4, r0, r3
 8028ea6:	b29b      	uxth	r3, r3
 8028ea8:	1c5a      	adds	r2, r3, #1
 8028eaa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028eae:	121b      	asrs	r3, r3, #8
 8028eb0:	708b      	strb	r3, [r1, #2]
 8028eb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028eb6:	2f0f      	cmp	r7, #15
 8028eb8:	d89b      	bhi.n	8028df2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8028eba:	462b      	mov	r3, r5
 8028ebc:	4628      	mov	r0, r5
 8028ebe:	e7ac      	b.n	8028e1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8028ec0:	2d00      	cmp	r5, #0
 8028ec2:	d1a1      	bne.n	8028e08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8028ec4:	462c      	mov	r4, r5
 8028ec6:	e7f8      	b.n	8028eba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8028ec8:	0803129e 	.word	0x0803129e
 8028ecc:	08031796 	.word	0x08031796
 8028ed0:	08031367 	.word	0x08031367
 8028ed4:	2400c8e4 	.word	0x2400c8e4

08028ed8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028edc:	ed2d 8b08 	vpush	{d8-d11}
 8028ee0:	b097      	sub	sp, #92	; 0x5c
 8028ee2:	eeb0 aa40 	vmov.f32	s20, s0
 8028ee6:	eef0 9a60 	vmov.f32	s19, s1
 8028eea:	9214      	str	r2, [sp, #80]	; 0x50
 8028eec:	eeb0 9a41 	vmov.f32	s18, s2
 8028ef0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8028ef2:	eeb0 8a62 	vmov.f32	s16, s5
 8028ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8028ef8:	eef0 8a43 	vmov.f32	s17, s6
 8028efc:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8028f00:	eef0 ba44 	vmov.f32	s23, s8
 8028f04:	9015      	str	r0, [sp, #84]	; 0x54
 8028f06:	eeb0 ba64 	vmov.f32	s22, s9
 8028f0a:	6850      	ldr	r0, [r2, #4]
 8028f0c:	eef0 aa45 	vmov.f32	s21, s10
 8028f10:	910c      	str	r1, [sp, #48]	; 0x30
 8028f12:	930e      	str	r3, [sp, #56]	; 0x38
 8028f14:	6812      	ldr	r2, [r2, #0]
 8028f16:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8028f1a:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8028f1e:	fb00 1303 	mla	r3, r0, r3, r1
 8028f22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8028f26:	eb02 0a03 	add.w	sl, r2, r3
 8028f2a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028f2c:	689b      	ldr	r3, [r3, #8]
 8028f2e:	3301      	adds	r3, #1
 8028f30:	f023 0301 	bic.w	r3, r3, #1
 8028f34:	930f      	str	r3, [sp, #60]	; 0x3c
 8028f36:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028f38:	681f      	ldr	r7, [r3, #0]
 8028f3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028f3c:	2b00      	cmp	r3, #0
 8028f3e:	dc03      	bgt.n	8028f48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8028f40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028f42:	2b00      	cmp	r3, #0
 8028f44:	f340 8247 	ble.w	80293d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8028f48:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028f4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028f4e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028f52:	1e48      	subs	r0, r1, #1
 8028f54:	f102 3cff 	add.w	ip, r2, #4294967295
 8028f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028f5a:	2b00      	cmp	r3, #0
 8028f5c:	f340 80e5 	ble.w	802912a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8028f60:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8028f64:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028f68:	d406      	bmi.n	8028f78 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028f6a:	4586      	cmp	lr, r0
 8028f6c:	da04      	bge.n	8028f78 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028f6e:	2b00      	cmp	r3, #0
 8028f70:	db02      	blt.n	8028f78 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028f72:	4563      	cmp	r3, ip
 8028f74:	f2c0 80da 	blt.w	802912c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8028f78:	f11e 0e01 	adds.w	lr, lr, #1
 8028f7c:	f100 80cb 	bmi.w	8029116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8028f80:	4571      	cmp	r1, lr
 8028f82:	f2c0 80c8 	blt.w	8029116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8028f86:	3301      	adds	r3, #1
 8028f88:	f100 80c5 	bmi.w	8029116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8028f8c:	429a      	cmp	r2, r3
 8028f8e:	f2c0 80c2 	blt.w	8029116 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8028f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028f94:	46d0      	mov	r8, sl
 8028f96:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8028f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8028f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028f9e:	2b00      	cmp	r3, #0
 8028fa0:	f340 80e3 	ble.w	802916a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8028fa4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028fa6:	1430      	asrs	r0, r6, #16
 8028fa8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8028fac:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028fb0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028fb4:	142b      	asrs	r3, r5, #16
 8028fb6:	f100 812e 	bmi.w	8029216 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028fba:	f10c 3bff 	add.w	fp, ip, #4294967295
 8028fbe:	455b      	cmp	r3, fp
 8028fc0:	f280 8129 	bge.w	8029216 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028fc4:	2800      	cmp	r0, #0
 8028fc6:	f2c0 8126 	blt.w	8029216 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028fca:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028fce:	4558      	cmp	r0, fp
 8028fd0:	f280 8121 	bge.w	8029216 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8028fd4:	fb00 3309 	mla	r3, r0, r9, r3
 8028fd8:	0858      	lsrs	r0, r3, #1
 8028fda:	07dc      	lsls	r4, r3, #31
 8028fdc:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028fe0:	bf54      	ite	pl
 8028fe2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028fe6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028fea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028fee:	fa5f fc8c 	uxtb.w	ip, ip
 8028ff2:	2a00      	cmp	r2, #0
 8028ff4:	f000 80fe 	beq.w	80291f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8028ff8:	1c58      	adds	r0, r3, #1
 8028ffa:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028ffe:	07c0      	lsls	r0, r0, #31
 8029000:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029004:	bf54      	ite	pl
 8029006:	f00e 0e0f 	andpl.w	lr, lr, #15
 802900a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802900e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029012:	fa5f f08e 	uxtb.w	r0, lr
 8029016:	9010      	str	r0, [sp, #64]	; 0x40
 8029018:	b1d9      	cbz	r1, 8029052 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 802901a:	444b      	add	r3, r9
 802901c:	0858      	lsrs	r0, r3, #1
 802901e:	07dc      	lsls	r4, r3, #31
 8029020:	f103 0301 	add.w	r3, r3, #1
 8029024:	5c38      	ldrb	r0, [r7, r0]
 8029026:	bf54      	ite	pl
 8029028:	f000 000f 	andpl.w	r0, r0, #15
 802902c:	1100      	asrmi	r0, r0, #4
 802902e:	07dc      	lsls	r4, r3, #31
 8029030:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029034:	b2c0      	uxtb	r0, r0
 8029036:	900a      	str	r0, [sp, #40]	; 0x28
 8029038:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802903c:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029040:	bf54      	ite	pl
 8029042:	f00e 030f 	andpl.w	r3, lr, #15
 8029046:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802904a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802904e:	b2db      	uxtb	r3, r3
 8029050:	9311      	str	r3, [sp, #68]	; 0x44
 8029052:	b292      	uxth	r2, r2
 8029054:	b289      	uxth	r1, r1
 8029056:	0113      	lsls	r3, r2, #4
 8029058:	fb02 f001 	mul.w	r0, r2, r1
 802905c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802905e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8029062:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8029066:	1a1b      	subs	r3, r3, r0
 8029068:	b289      	uxth	r1, r1
 802906a:	b29b      	uxth	r3, r3
 802906c:	ebae 0e01 	sub.w	lr, lr, r1
 8029070:	4353      	muls	r3, r2
 8029072:	fa1f fe8e 	uxth.w	lr, lr
 8029076:	fb0c 320e 	mla	r2, ip, lr, r3
 802907a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802907c:	fb01 2203 	mla	r2, r1, r3, r2
 8029080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029082:	fb00 2203 	mla	r2, r0, r3, r2
 8029086:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802908a:	2a00      	cmp	r2, #0
 802908c:	d039      	beq.n	8029102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802908e:	4bc7      	ldr	r3, [pc, #796]	; (80293ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8029090:	6819      	ldr	r1, [r3, #0]
 8029092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029094:	fa5f fc81 	uxtb.w	ip, r1
 8029098:	435a      	muls	r2, r3
 802909a:	1c53      	adds	r3, r2, #1
 802909c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80290a0:	1212      	asrs	r2, r2, #8
 80290a2:	b290      	uxth	r0, r2
 80290a4:	43d2      	mvns	r2, r2
 80290a6:	fb1c fc00 	smulbb	ip, ip, r0
 80290aa:	b2d3      	uxtb	r3, r2
 80290ac:	f898 2000 	ldrb.w	r2, [r8]
 80290b0:	fb02 c203 	mla	r2, r2, r3, ip
 80290b4:	b292      	uxth	r2, r2
 80290b6:	f102 0c01 	add.w	ip, r2, #1
 80290ba:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80290be:	f898 c001 	ldrb.w	ip, [r8, #1]
 80290c2:	fb1c fc03 	smulbb	ip, ip, r3
 80290c6:	1212      	asrs	r2, r2, #8
 80290c8:	f888 2000 	strb.w	r2, [r8]
 80290cc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80290d0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80290d4:	fb02 c200 	mla	r2, r2, r0, ip
 80290d8:	b292      	uxth	r2, r2
 80290da:	f102 0c01 	add.w	ip, r2, #1
 80290de:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80290e2:	1212      	asrs	r2, r2, #8
 80290e4:	f888 2001 	strb.w	r2, [r8, #1]
 80290e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80290ec:	fb12 f303 	smulbb	r3, r2, r3
 80290f0:	fb01 3300 	mla	r3, r1, r0, r3
 80290f4:	b29b      	uxth	r3, r3
 80290f6:	1c5a      	adds	r2, r3, #1
 80290f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80290fc:	121b      	asrs	r3, r3, #8
 80290fe:	f888 3002 	strb.w	r3, [r8, #2]
 8029102:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029104:	f108 0803 	add.w	r8, r8, #3
 8029108:	441d      	add	r5, r3
 802910a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802910c:	441e      	add	r6, r3
 802910e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029110:	3b01      	subs	r3, #1
 8029112:	930d      	str	r3, [sp, #52]	; 0x34
 8029114:	e742      	b.n	8028f9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 8029116:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8029118:	f10a 0a03 	add.w	sl, sl, #3
 802911c:	441d      	add	r5, r3
 802911e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029120:	441e      	add	r6, r3
 8029122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029124:	3b01      	subs	r3, #1
 8029126:	9309      	str	r3, [sp, #36]	; 0x24
 8029128:	e716      	b.n	8028f58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802912a:	d024      	beq.n	8029176 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 802912c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802912e:	982b      	ldr	r0, [sp, #172]	; 0xac
 8029130:	3b01      	subs	r3, #1
 8029132:	fb00 5003 	mla	r0, r0, r3, r5
 8029136:	1400      	asrs	r0, r0, #16
 8029138:	f53f af2b 	bmi.w	8028f92 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 802913c:	3901      	subs	r1, #1
 802913e:	4288      	cmp	r0, r1
 8029140:	f6bf af27 	bge.w	8028f92 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8029144:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8029146:	fb01 6303 	mla	r3, r1, r3, r6
 802914a:	141b      	asrs	r3, r3, #16
 802914c:	f53f af21 	bmi.w	8028f92 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8029150:	3a01      	subs	r2, #1
 8029152:	4293      	cmp	r3, r2
 8029154:	f6bf af1d 	bge.w	8028f92 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8029158:	f10a 0e03 	add.w	lr, sl, #3
 802915c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8029160:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8029164:	f1b8 0f00 	cmp.w	r8, #0
 8029168:	dc76      	bgt.n	8029258 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802916a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802916c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8029170:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8029174:	44a2      	add	sl, r4
 8029176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029178:	2b00      	cmp	r3, #0
 802917a:	f340 812c 	ble.w	80293d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 802917e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029182:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029184:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029188:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802918c:	eef0 6a48 	vmov.f32	s13, s16
 8029190:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029194:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029198:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802919c:	ee16 5a90 	vmov	r5, s13
 80291a0:	eef0 6a68 	vmov.f32	s13, s17
 80291a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80291a8:	ee16 6a90 	vmov	r6, s13
 80291ac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80291b0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80291b4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80291b8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80291bc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80291c0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80291c4:	ee18 2a10 	vmov	r2, s16
 80291c8:	eeb0 8a47 	vmov.f32	s16, s14
 80291cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80291d0:	ee18 2a90 	vmov	r2, s17
 80291d4:	932b      	str	r3, [sp, #172]	; 0xac
 80291d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80291d8:	eef0 8a67 	vmov.f32	s17, s15
 80291dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80291e0:	932c      	str	r3, [sp, #176]	; 0xb0
 80291e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80291e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80291e6:	3b01      	subs	r3, #1
 80291e8:	930c      	str	r3, [sp, #48]	; 0x30
 80291ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80291ec:	bf08      	it	eq
 80291ee:	4613      	moveq	r3, r2
 80291f0:	9309      	str	r3, [sp, #36]	; 0x24
 80291f2:	e6a2      	b.n	8028f3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80291f4:	2900      	cmp	r1, #0
 80291f6:	f43f af2c 	beq.w	8029052 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 80291fa:	eb09 0003 	add.w	r0, r9, r3
 80291fe:	0843      	lsrs	r3, r0, #1
 8029200:	07c0      	lsls	r0, r0, #31
 8029202:	5cfb      	ldrb	r3, [r7, r3]
 8029204:	bf54      	ite	pl
 8029206:	f003 030f 	andpl.w	r3, r3, #15
 802920a:	111b      	asrmi	r3, r3, #4
 802920c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029210:	b2db      	uxtb	r3, r3
 8029212:	930a      	str	r3, [sp, #40]	; 0x28
 8029214:	e71d      	b.n	8029052 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 8029216:	f113 0b01 	adds.w	fp, r3, #1
 802921a:	f53f af72 	bmi.w	8029102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802921e:	45dc      	cmp	ip, fp
 8029220:	f6ff af6f 	blt.w	8029102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8029224:	f110 0b01 	adds.w	fp, r0, #1
 8029228:	f53f af6b 	bmi.w	8029102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802922c:	45de      	cmp	lr, fp
 802922e:	f6ff af68 	blt.w	8029102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8029232:	9302      	str	r3, [sp, #8]
 8029234:	fa0f f38e 	sxth.w	r3, lr
 8029238:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802923a:	9301      	str	r3, [sp, #4]
 802923c:	fa0f f38c 	sxth.w	r3, ip
 8029240:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029244:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8029248:	9300      	str	r3, [sp, #0]
 802924a:	463a      	mov	r2, r7
 802924c:	464b      	mov	r3, r9
 802924e:	4641      	mov	r1, r8
 8029250:	9815      	ldr	r0, [sp, #84]	; 0x54
 8029252:	f7ff fd59 	bl	8028d08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8029256:	e754      	b.n	8029102 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8029258:	142a      	asrs	r2, r5, #16
 802925a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802925e:	1433      	asrs	r3, r6, #16
 8029260:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029264:	fb09 2303 	mla	r3, r9, r3, r2
 8029268:	085a      	lsrs	r2, r3, #1
 802926a:	07dc      	lsls	r4, r3, #31
 802926c:	5cba      	ldrb	r2, [r7, r2]
 802926e:	bf54      	ite	pl
 8029270:	f002 020f 	andpl.w	r2, r2, #15
 8029274:	1112      	asrmi	r2, r2, #4
 8029276:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802927a:	b2d2      	uxtb	r2, r2
 802927c:	2900      	cmp	r1, #0
 802927e:	f000 8097 	beq.w	80293b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8029282:	f103 0b01 	add.w	fp, r3, #1
 8029286:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 802928a:	f01b 0f01 	tst.w	fp, #1
 802928e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029292:	bf0c      	ite	eq
 8029294:	f00c 0c0f 	andeq.w	ip, ip, #15
 8029298:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802929c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80292a0:	fa5f f48c 	uxtb.w	r4, ip
 80292a4:	9412      	str	r4, [sp, #72]	; 0x48
 80292a6:	b300      	cbz	r0, 80292ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80292a8:	444b      	add	r3, r9
 80292aa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80292ae:	07dc      	lsls	r4, r3, #31
 80292b0:	f103 0301 	add.w	r3, r3, #1
 80292b4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80292b8:	bf54      	ite	pl
 80292ba:	f00c 0c0f 	andpl.w	ip, ip, #15
 80292be:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80292c2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80292c6:	fa5f f48c 	uxtb.w	r4, ip
 80292ca:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80292ce:	940b      	str	r4, [sp, #44]	; 0x2c
 80292d0:	07dc      	lsls	r4, r3, #31
 80292d2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80292d6:	bf54      	ite	pl
 80292d8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80292dc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80292e0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80292e4:	fa5f f38c 	uxtb.w	r3, ip
 80292e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80292ea:	b289      	uxth	r1, r1
 80292ec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80292ee:	b280      	uxth	r0, r0
 80292f0:	fb01 f300 	mul.w	r3, r1, r0
 80292f4:	0109      	lsls	r1, r1, #4
 80292f6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80292fa:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80292fe:	1ac9      	subs	r1, r1, r3
 8029300:	b280      	uxth	r0, r0
 8029302:	b289      	uxth	r1, r1
 8029304:	ebac 0c00 	sub.w	ip, ip, r0
 8029308:	4361      	muls	r1, r4
 802930a:	fa1f fc8c 	uxth.w	ip, ip
 802930e:	fb02 120c 	mla	r2, r2, ip, r1
 8029312:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029314:	fb00 2001 	mla	r0, r0, r1, r2
 8029318:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802931a:	fb03 0302 	mla	r3, r3, r2, r0
 802931e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029322:	2b00      	cmp	r3, #0
 8029324:	d039      	beq.n	802939a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8029326:	4a21      	ldr	r2, [pc, #132]	; (80293ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8029328:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802932c:	6810      	ldr	r0, [r2, #0]
 802932e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029330:	fa5f fc80 	uxtb.w	ip, r0
 8029334:	4353      	muls	r3, r2
 8029336:	1c5a      	adds	r2, r3, #1
 8029338:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802933c:	121b      	asrs	r3, r3, #8
 802933e:	b29a      	uxth	r2, r3
 8029340:	43db      	mvns	r3, r3
 8029342:	fb1c fc02 	smulbb	ip, ip, r2
 8029346:	b2db      	uxtb	r3, r3
 8029348:	fb01 c103 	mla	r1, r1, r3, ip
 802934c:	b289      	uxth	r1, r1
 802934e:	f101 0c01 	add.w	ip, r1, #1
 8029352:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8029356:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802935a:	fb1c fc03 	smulbb	ip, ip, r3
 802935e:	1209      	asrs	r1, r1, #8
 8029360:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8029364:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8029368:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802936c:	fb01 c102 	mla	r1, r1, r2, ip
 8029370:	b289      	uxth	r1, r1
 8029372:	f101 0c01 	add.w	ip, r1, #1
 8029376:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802937a:	1209      	asrs	r1, r1, #8
 802937c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8029380:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8029384:	fb11 f303 	smulbb	r3, r1, r3
 8029388:	fb00 3002 	mla	r0, r0, r2, r3
 802938c:	b280      	uxth	r0, r0
 802938e:	1c42      	adds	r2, r0, #1
 8029390:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029394:	1200      	asrs	r0, r0, #8
 8029396:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802939a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802939c:	f10e 0e03 	add.w	lr, lr, #3
 80293a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80293a4:	441d      	add	r5, r3
 80293a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80293a8:	441e      	add	r6, r3
 80293aa:	e6db      	b.n	8029164 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80293ac:	2400c8e4 	.word	0x2400c8e4
 80293b0:	2800      	cmp	r0, #0
 80293b2:	d09a      	beq.n	80292ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80293b4:	444b      	add	r3, r9
 80293b6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80293ba:	07db      	lsls	r3, r3, #31
 80293bc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80293c0:	bf54      	ite	pl
 80293c2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80293c6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80293ca:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80293ce:	fa5f f38c 	uxtb.w	r3, ip
 80293d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80293d4:	e789      	b.n	80292ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80293d6:	b017      	add	sp, #92	; 0x5c
 80293d8:	ecbd 8b08 	vpop	{d8-d11}
 80293dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080293e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80293e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80293e4:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80293e8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80293ec:	2800      	cmp	r0, #0
 80293ee:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80293f2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80293f6:	fb0c 0e03 	mla	lr, ip, r3, r0
 80293fa:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80293fe:	db6b      	blt.n	80294d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8029400:	4580      	cmp	r8, r0
 8029402:	dd69      	ble.n	80294d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8029404:	f1bc 0f00 	cmp.w	ip, #0
 8029408:	db66      	blt.n	80294d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802940a:	45e1      	cmp	r9, ip
 802940c:	dd64      	ble.n	80294d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 802940e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8029412:	f01e 0f01 	tst.w	lr, #1
 8029416:	5d16      	ldrb	r6, [r2, r4]
 8029418:	bf0c      	ite	eq
 802941a:	f006 060f 	andeq.w	r6, r6, #15
 802941e:	1136      	asrne	r6, r6, #4
 8029420:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029424:	b2f6      	uxtb	r6, r6
 8029426:	f110 0a01 	adds.w	sl, r0, #1
 802942a:	d457      	bmi.n	80294dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802942c:	45d0      	cmp	r8, sl
 802942e:	dd55      	ble.n	80294dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8029430:	f1bc 0f00 	cmp.w	ip, #0
 8029434:	db52      	blt.n	80294dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8029436:	45e1      	cmp	r9, ip
 8029438:	dd50      	ble.n	80294dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802943a:	2f00      	cmp	r7, #0
 802943c:	f000 80a5 	beq.w	802958a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8029440:	f10e 0b01 	add.w	fp, lr, #1
 8029444:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8029448:	f01b 0f01 	tst.w	fp, #1
 802944c:	5d14      	ldrb	r4, [r2, r4]
 802944e:	bf0c      	ite	eq
 8029450:	f004 040f 	andeq.w	r4, r4, #15
 8029454:	1124      	asrne	r4, r4, #4
 8029456:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802945a:	b2e4      	uxtb	r4, r4
 802945c:	2d00      	cmp	r5, #0
 802945e:	f000 808f 	beq.w	8029580 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8029462:	2800      	cmp	r0, #0
 8029464:	f10c 0c01 	add.w	ip, ip, #1
 8029468:	db3c      	blt.n	80294e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802946a:	4580      	cmp	r8, r0
 802946c:	dd3a      	ble.n	80294e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802946e:	f1bc 0f00 	cmp.w	ip, #0
 8029472:	db37      	blt.n	80294e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8029474:	45e1      	cmp	r9, ip
 8029476:	dd35      	ble.n	80294e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8029478:	eb03 0b0e 	add.w	fp, r3, lr
 802947c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8029480:	f01b 0f01 	tst.w	fp, #1
 8029484:	5c10      	ldrb	r0, [r2, r0]
 8029486:	bf0c      	ite	eq
 8029488:	f000 000f 	andeq.w	r0, r0, #15
 802948c:	1100      	asrne	r0, r0, #4
 802948e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029492:	b2c0      	uxtb	r0, r0
 8029494:	f1ba 0f00 	cmp.w	sl, #0
 8029498:	db26      	blt.n	80294e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802949a:	45d0      	cmp	r8, sl
 802949c:	dd24      	ble.n	80294e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802949e:	f1bc 0f00 	cmp.w	ip, #0
 80294a2:	db21      	blt.n	80294e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80294a4:	45e1      	cmp	r9, ip
 80294a6:	dd1f      	ble.n	80294e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 80294a8:	b307      	cbz	r7, 80294ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 80294aa:	3301      	adds	r3, #1
 80294ac:	449e      	add	lr, r3
 80294ae:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80294b2:	f01e 0f01 	tst.w	lr, #1
 80294b6:	5cd3      	ldrb	r3, [r2, r3]
 80294b8:	bf0c      	ite	eq
 80294ba:	f003 030f 	andeq.w	r3, r3, #15
 80294be:	111b      	asrne	r3, r3, #4
 80294c0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80294c4:	b2db      	uxtb	r3, r3
 80294c6:	2f0f      	cmp	r7, #15
 80294c8:	d911      	bls.n	80294ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80294ca:	4b32      	ldr	r3, [pc, #200]	; (8029594 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80294cc:	f240 1157 	movw	r1, #343	; 0x157
 80294d0:	4a31      	ldr	r2, [pc, #196]	; (8029598 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80294d2:	4832      	ldr	r0, [pc, #200]	; (802959c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80294d4:	f002 f9c8 	bl	802b868 <__assert_func>
 80294d8:	2600      	movs	r6, #0
 80294da:	e7a4      	b.n	8029426 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80294dc:	2400      	movs	r4, #0
 80294de:	e7bd      	b.n	802945c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80294e0:	463c      	mov	r4, r7
 80294e2:	e7be      	b.n	8029462 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80294e4:	2000      	movs	r0, #0
 80294e6:	e7d5      	b.n	8029494 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80294e8:	2300      	movs	r3, #0
 80294ea:	e7ec      	b.n	80294c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80294ec:	463b      	mov	r3, r7
 80294ee:	2d0f      	cmp	r5, #15
 80294f0:	d8eb      	bhi.n	80294ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80294f2:	b2bf      	uxth	r7, r7
 80294f4:	b2ad      	uxth	r5, r5
 80294f6:	fb07 f205 	mul.w	r2, r7, r5
 80294fa:	013f      	lsls	r7, r7, #4
 80294fc:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8029500:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8029504:	1abf      	subs	r7, r7, r2
 8029506:	b2ad      	uxth	r5, r5
 8029508:	b2bf      	uxth	r7, r7
 802950a:	ebac 0c05 	sub.w	ip, ip, r5
 802950e:	437c      	muls	r4, r7
 8029510:	fa1f fc8c 	uxth.w	ip, ip
 8029514:	fb06 440c 	mla	r4, r6, ip, r4
 8029518:	fb05 4400 	mla	r4, r5, r0, r4
 802951c:	fb02 4303 	mla	r3, r2, r3, r4
 8029520:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029524:	b353      	cbz	r3, 802957c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8029526:	4a1e      	ldr	r2, [pc, #120]	; (80295a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8029528:	7808      	ldrb	r0, [r1, #0]
 802952a:	6814      	ldr	r4, [r2, #0]
 802952c:	b29a      	uxth	r2, r3
 802952e:	43db      	mvns	r3, r3
 8029530:	b2e5      	uxtb	r5, r4
 8029532:	b2db      	uxtb	r3, r3
 8029534:	fb15 f502 	smulbb	r5, r5, r2
 8029538:	fb00 5003 	mla	r0, r0, r3, r5
 802953c:	b280      	uxth	r0, r0
 802953e:	1c45      	adds	r5, r0, #1
 8029540:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8029544:	784d      	ldrb	r5, [r1, #1]
 8029546:	fb15 f503 	smulbb	r5, r5, r3
 802954a:	1200      	asrs	r0, r0, #8
 802954c:	7008      	strb	r0, [r1, #0]
 802954e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8029552:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8029556:	fb00 5002 	mla	r0, r0, r2, r5
 802955a:	b280      	uxth	r0, r0
 802955c:	1c45      	adds	r5, r0, #1
 802955e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8029562:	1200      	asrs	r0, r0, #8
 8029564:	7048      	strb	r0, [r1, #1]
 8029566:	7888      	ldrb	r0, [r1, #2]
 8029568:	fb10 f303 	smulbb	r3, r0, r3
 802956c:	fb04 3202 	mla	r2, r4, r2, r3
 8029570:	b292      	uxth	r2, r2
 8029572:	1c53      	adds	r3, r2, #1
 8029574:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8029578:	1212      	asrs	r2, r2, #8
 802957a:	708a      	strb	r2, [r1, #2]
 802957c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029580:	2f0f      	cmp	r7, #15
 8029582:	d8a2      	bhi.n	80294ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8029584:	462b      	mov	r3, r5
 8029586:	4628      	mov	r0, r5
 8029588:	e7b3      	b.n	80294f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 802958a:	2d00      	cmp	r5, #0
 802958c:	d1a8      	bne.n	80294e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 802958e:	462c      	mov	r4, r5
 8029590:	e7f8      	b.n	8029584 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8029592:	bf00      	nop
 8029594:	0803129e 	.word	0x0803129e
 8029598:	08031796 	.word	0x08031796
 802959c:	08031367 	.word	0x08031367
 80295a0:	2400c8e4 	.word	0x2400c8e4

080295a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80295a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80295a8:	ed2d 8b08 	vpush	{d8-d11}
 80295ac:	b093      	sub	sp, #76	; 0x4c
 80295ae:	461c      	mov	r4, r3
 80295b0:	eeb0 aa40 	vmov.f32	s20, s0
 80295b4:	920c      	str	r2, [sp, #48]	; 0x30
 80295b6:	eef0 9a60 	vmov.f32	s19, s1
 80295ba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80295bc:	eeb0 9a41 	vmov.f32	s18, s2
 80295c0:	9011      	str	r0, [sp, #68]	; 0x44
 80295c2:	eeb0 8a62 	vmov.f32	s16, s5
 80295c6:	6850      	ldr	r0, [r2, #4]
 80295c8:	eef0 8a43 	vmov.f32	s17, s6
 80295cc:	9107      	str	r1, [sp, #28]
 80295ce:	eef0 ba44 	vmov.f32	s23, s8
 80295d2:	6812      	ldr	r2, [r2, #0]
 80295d4:	eeb0 ba64 	vmov.f32	s22, s9
 80295d8:	eef0 aa45 	vmov.f32	s21, s10
 80295dc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80295e0:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 80295e4:	fb00 1303 	mla	r3, r0, r3, r1
 80295e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80295ec:	eb02 0b03 	add.w	fp, r2, r3
 80295f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80295f2:	689b      	ldr	r3, [r3, #8]
 80295f4:	3301      	adds	r3, #1
 80295f6:	f023 0301 	bic.w	r3, r3, #1
 80295fa:	9309      	str	r3, [sp, #36]	; 0x24
 80295fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80295fe:	f8d3 8000 	ldr.w	r8, [r3]
 8029602:	9b07      	ldr	r3, [sp, #28]
 8029604:	2b00      	cmp	r3, #0
 8029606:	dc03      	bgt.n	8029610 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802960a:	2b00      	cmp	r3, #0
 802960c:	f340 822b 	ble.w	8029a66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8029610:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029612:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029616:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802961a:	1e48      	subs	r0, r1, #1
 802961c:	1e57      	subs	r7, r2, #1
 802961e:	2c00      	cmp	r4, #0
 8029620:	f340 80d7 	ble.w	80297d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029624:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8029628:	ea4f 4326 	mov.w	r3, r6, asr #16
 802962c:	d406      	bmi.n	802963c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802962e:	4584      	cmp	ip, r0
 8029630:	da04      	bge.n	802963c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029632:	2b00      	cmp	r3, #0
 8029634:	db02      	blt.n	802963c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029636:	42bb      	cmp	r3, r7
 8029638:	f2c0 80cc 	blt.w	80297d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802963c:	f11c 0c01 	adds.w	ip, ip, #1
 8029640:	f100 80bf 	bmi.w	80297c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8029644:	4561      	cmp	r1, ip
 8029646:	f2c0 80bc 	blt.w	80297c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 802964a:	3301      	adds	r3, #1
 802964c:	f100 80b9 	bmi.w	80297c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8029650:	429a      	cmp	r2, r3
 8029652:	f2c0 80b6 	blt.w	80297c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 8029656:	46a2      	mov	sl, r4
 8029658:	465f      	mov	r7, fp
 802965a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802965e:	f1ba 0f00 	cmp.w	sl, #0
 8029662:	f340 80d4 	ble.w	802980e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8029666:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802966a:	1430      	asrs	r0, r6, #16
 802966c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029670:	9308      	str	r3, [sp, #32]
 8029672:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029674:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029678:	142b      	asrs	r3, r5, #16
 802967a:	f100 8124 	bmi.w	80298c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802967e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8029682:	4293      	cmp	r3, r2
 8029684:	f280 811f 	bge.w	80298c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8029688:	2800      	cmp	r0, #0
 802968a:	f2c0 811c 	blt.w	80298c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802968e:	f10e 32ff 	add.w	r2, lr, #4294967295
 8029692:	4290      	cmp	r0, r2
 8029694:	f280 8117 	bge.w	80298c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8029698:	fb00 3309 	mla	r3, r0, r9, r3
 802969c:	0858      	lsrs	r0, r3, #1
 802969e:	07da      	lsls	r2, r3, #31
 80296a0:	9a08      	ldr	r2, [sp, #32]
 80296a2:	f818 c000 	ldrb.w	ip, [r8, r0]
 80296a6:	bf54      	ite	pl
 80296a8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80296ac:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80296b0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80296b4:	fa5f fc8c 	uxtb.w	ip, ip
 80296b8:	2a00      	cmp	r2, #0
 80296ba:	f000 80ed 	beq.w	8029898 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80296be:	1c58      	adds	r0, r3, #1
 80296c0:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80296c4:	07c0      	lsls	r0, r0, #31
 80296c6:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80296ca:	bf54      	ite	pl
 80296cc:	f00e 0e0f 	andpl.w	lr, lr, #15
 80296d0:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80296d4:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80296d8:	fa5f fe8e 	uxtb.w	lr, lr
 80296dc:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80296e0:	b1c9      	cbz	r1, 8029716 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 80296e2:	444b      	add	r3, r9
 80296e4:	0858      	lsrs	r0, r3, #1
 80296e6:	07da      	lsls	r2, r3, #31
 80296e8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80296ec:	bf54      	ite	pl
 80296ee:	f000 000f 	andpl.w	r0, r0, #15
 80296f2:	1100      	asrmi	r0, r0, #4
 80296f4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80296f8:	b2c0      	uxtb	r0, r0
 80296fa:	900a      	str	r0, [sp, #40]	; 0x28
 80296fc:	1c58      	adds	r0, r3, #1
 80296fe:	0843      	lsrs	r3, r0, #1
 8029700:	07c2      	lsls	r2, r0, #31
 8029702:	f818 3003 	ldrb.w	r3, [r8, r3]
 8029706:	bf54      	ite	pl
 8029708:	f003 030f 	andpl.w	r3, r3, #15
 802970c:	111b      	asrmi	r3, r3, #4
 802970e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029712:	b2db      	uxtb	r3, r3
 8029714:	930e      	str	r3, [sp, #56]	; 0x38
 8029716:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802971a:	b289      	uxth	r1, r1
 802971c:	fb02 f301 	mul.w	r3, r2, r1
 8029720:	0112      	lsls	r2, r2, #4
 8029722:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029726:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802972a:	1ad2      	subs	r2, r2, r3
 802972c:	b289      	uxth	r1, r1
 802972e:	b292      	uxth	r2, r2
 8029730:	1a40      	subs	r0, r0, r1
 8029732:	fa1f fe80 	uxth.w	lr, r0
 8029736:	980d      	ldr	r0, [sp, #52]	; 0x34
 8029738:	4342      	muls	r2, r0
 802973a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802973e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029740:	fb01 c102 	mla	r1, r1, r2, ip
 8029744:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029746:	fb03 1302 	mla	r3, r3, r2, r1
 802974a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802974e:	b383      	cbz	r3, 80297b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8029750:	4ac7      	ldr	r2, [pc, #796]	; (8029a70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 8029752:	2bff      	cmp	r3, #255	; 0xff
 8029754:	6812      	ldr	r2, [r2, #0]
 8029756:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802975a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802975e:	b2d2      	uxtb	r2, r2
 8029760:	f000 80ac 	beq.w	80298bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029764:	b299      	uxth	r1, r3
 8029766:	43db      	mvns	r3, r3
 8029768:	f897 c000 	ldrb.w	ip, [r7]
 802976c:	fb12 f201 	smulbb	r2, r2, r1
 8029770:	b2db      	uxtb	r3, r3
 8029772:	fb10 f001 	smulbb	r0, r0, r1
 8029776:	fb0c 2203 	mla	r2, ip, r3, r2
 802977a:	fb1e f101 	smulbb	r1, lr, r1
 802977e:	b292      	uxth	r2, r2
 8029780:	f102 0c01 	add.w	ip, r2, #1
 8029784:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8029788:	1212      	asrs	r2, r2, #8
 802978a:	703a      	strb	r2, [r7, #0]
 802978c:	787a      	ldrb	r2, [r7, #1]
 802978e:	fb02 0003 	mla	r0, r2, r3, r0
 8029792:	b280      	uxth	r0, r0
 8029794:	1c42      	adds	r2, r0, #1
 8029796:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802979a:	78ba      	ldrb	r2, [r7, #2]
 802979c:	fb02 1303 	mla	r3, r2, r3, r1
 80297a0:	1200      	asrs	r0, r0, #8
 80297a2:	b29b      	uxth	r3, r3
 80297a4:	7078      	strb	r0, [r7, #1]
 80297a6:	f103 0e01 	add.w	lr, r3, #1
 80297aa:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80297ae:	121b      	asrs	r3, r3, #8
 80297b0:	70bb      	strb	r3, [r7, #2]
 80297b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80297b4:	3703      	adds	r7, #3
 80297b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80297ba:	441d      	add	r5, r3
 80297bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80297be:	441e      	add	r6, r3
 80297c0:	e74d      	b.n	802965e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80297c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80297c4:	3c01      	subs	r4, #1
 80297c6:	f10b 0b03 	add.w	fp, fp, #3
 80297ca:	441d      	add	r5, r3
 80297cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80297ce:	441e      	add	r6, r3
 80297d0:	e725      	b.n	802961e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80297d2:	d021      	beq.n	8029818 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80297d4:	1e63      	subs	r3, r4, #1
 80297d6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80297d8:	fb00 5003 	mla	r0, r0, r3, r5
 80297dc:	1400      	asrs	r0, r0, #16
 80297de:	f53f af3a 	bmi.w	8029656 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80297e2:	3901      	subs	r1, #1
 80297e4:	4288      	cmp	r0, r1
 80297e6:	f6bf af36 	bge.w	8029656 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80297ea:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80297ec:	fb01 6303 	mla	r3, r1, r3, r6
 80297f0:	141b      	asrs	r3, r3, #16
 80297f2:	f53f af30 	bmi.w	8029656 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80297f6:	3a01      	subs	r2, #1
 80297f8:	4293      	cmp	r3, r2
 80297fa:	f6bf af2c 	bge.w	8029656 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80297fe:	f10b 0c03 	add.w	ip, fp, #3
 8029802:	46a6      	mov	lr, r4
 8029804:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029808:	f1be 0f00 	cmp.w	lr, #0
 802980c:	dc79      	bgt.n	8029902 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802980e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8029812:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8029816:	44a3      	add	fp, r4
 8029818:	9b07      	ldr	r3, [sp, #28]
 802981a:	2b00      	cmp	r3, #0
 802981c:	f340 8123 	ble.w	8029a66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8029820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029824:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029826:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802982a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802982e:	eef0 6a48 	vmov.f32	s13, s16
 8029832:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029836:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802983a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802983e:	ee16 5a90 	vmov	r5, s13
 8029842:	eef0 6a68 	vmov.f32	s13, s17
 8029846:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802984a:	ee16 6a90 	vmov	r6, s13
 802984e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029852:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029856:	ee37 8a48 	vsub.f32	s16, s14, s16
 802985a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802985e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029862:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029866:	ee18 2a10 	vmov	r2, s16
 802986a:	eeb0 8a47 	vmov.f32	s16, s14
 802986e:	fb92 f3f3 	sdiv	r3, r2, r3
 8029872:	ee18 2a90 	vmov	r2, s17
 8029876:	9327      	str	r3, [sp, #156]	; 0x9c
 8029878:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802987a:	eef0 8a67 	vmov.f32	s17, s15
 802987e:	fb92 f3f3 	sdiv	r3, r2, r3
 8029882:	9328      	str	r3, [sp, #160]	; 0xa0
 8029884:	9b07      	ldr	r3, [sp, #28]
 8029886:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029888:	3b01      	subs	r3, #1
 802988a:	9307      	str	r3, [sp, #28]
 802988c:	bf08      	it	eq
 802988e:	4614      	moveq	r4, r2
 8029890:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029892:	bf18      	it	ne
 8029894:	461c      	movne	r4, r3
 8029896:	e6b4      	b.n	8029602 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8029898:	2900      	cmp	r1, #0
 802989a:	f43f af3c 	beq.w	8029716 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 802989e:	eb09 0003 	add.w	r0, r9, r3
 80298a2:	0843      	lsrs	r3, r0, #1
 80298a4:	07c0      	lsls	r0, r0, #31
 80298a6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80298aa:	bf54      	ite	pl
 80298ac:	f003 030f 	andpl.w	r3, r3, #15
 80298b0:	111b      	asrmi	r3, r3, #4
 80298b2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80298b6:	b2db      	uxtb	r3, r3
 80298b8:	930a      	str	r3, [sp, #40]	; 0x28
 80298ba:	e72c      	b.n	8029716 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 80298bc:	703a      	strb	r2, [r7, #0]
 80298be:	7078      	strb	r0, [r7, #1]
 80298c0:	f887 e002 	strb.w	lr, [r7, #2]
 80298c4:	e775      	b.n	80297b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80298c6:	1c5a      	adds	r2, r3, #1
 80298c8:	f53f af73 	bmi.w	80297b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80298cc:	4594      	cmp	ip, r2
 80298ce:	f6ff af70 	blt.w	80297b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80298d2:	1c42      	adds	r2, r0, #1
 80298d4:	f53f af6d 	bmi.w	80297b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80298d8:	4596      	cmp	lr, r2
 80298da:	f6ff af6a 	blt.w	80297b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80298de:	9302      	str	r3, [sp, #8]
 80298e0:	fa0f f38e 	sxth.w	r3, lr
 80298e4:	9a08      	ldr	r2, [sp, #32]
 80298e6:	9301      	str	r3, [sp, #4]
 80298e8:	fa0f f38c 	sxth.w	r3, ip
 80298ec:	9105      	str	r1, [sp, #20]
 80298ee:	4639      	mov	r1, r7
 80298f0:	9300      	str	r3, [sp, #0]
 80298f2:	464b      	mov	r3, r9
 80298f4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80298f8:	4642      	mov	r2, r8
 80298fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80298fc:	f7ff fd70 	bl	80293e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8029900:	e757      	b.n	80297b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8029902:	142a      	asrs	r2, r5, #16
 8029904:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8029908:	1433      	asrs	r3, r6, #16
 802990a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802990e:	fb09 2303 	mla	r3, r9, r3, r2
 8029912:	085a      	lsrs	r2, r3, #1
 8029914:	07d9      	lsls	r1, r3, #31
 8029916:	f818 2002 	ldrb.w	r2, [r8, r2]
 802991a:	bf54      	ite	pl
 802991c:	f002 020f 	andpl.w	r2, r2, #15
 8029920:	1112      	asrmi	r2, r2, #4
 8029922:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029926:	b2d2      	uxtb	r2, r2
 8029928:	2800      	cmp	r0, #0
 802992a:	f000 8085 	beq.w	8029a38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802992e:	f103 0a01 	add.w	sl, r3, #1
 8029932:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8029936:	f01a 0f01 	tst.w	sl, #1
 802993a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802993e:	bf0c      	ite	eq
 8029940:	f001 010f 	andeq.w	r1, r1, #15
 8029944:	1109      	asrne	r1, r1, #4
 8029946:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802994a:	b2c9      	uxtb	r1, r1
 802994c:	910f      	str	r1, [sp, #60]	; 0x3c
 802994e:	b1df      	cbz	r7, 8029988 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8029950:	444b      	add	r3, r9
 8029952:	0859      	lsrs	r1, r3, #1
 8029954:	f013 0f01 	tst.w	r3, #1
 8029958:	f103 0301 	add.w	r3, r3, #1
 802995c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8029960:	bf0c      	ite	eq
 8029962:	f001 010f 	andeq.w	r1, r1, #15
 8029966:	1109      	asrne	r1, r1, #4
 8029968:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802996c:	b2c9      	uxtb	r1, r1
 802996e:	910b      	str	r1, [sp, #44]	; 0x2c
 8029970:	0859      	lsrs	r1, r3, #1
 8029972:	07db      	lsls	r3, r3, #31
 8029974:	f818 1001 	ldrb.w	r1, [r8, r1]
 8029978:	bf54      	ite	pl
 802997a:	f001 010f 	andpl.w	r1, r1, #15
 802997e:	1109      	asrmi	r1, r1, #4
 8029980:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029984:	b2c9      	uxtb	r1, r1
 8029986:	9110      	str	r1, [sp, #64]	; 0x40
 8029988:	b280      	uxth	r0, r0
 802998a:	b2bf      	uxth	r7, r7
 802998c:	fb00 f307 	mul.w	r3, r0, r7
 8029990:	0100      	lsls	r0, r0, #4
 8029992:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8029996:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802999a:	1ac0      	subs	r0, r0, r3
 802999c:	b2bf      	uxth	r7, r7
 802999e:	b280      	uxth	r0, r0
 80299a0:	1bc9      	subs	r1, r1, r7
 80299a2:	fa1f fa81 	uxth.w	sl, r1
 80299a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80299a8:	4348      	muls	r0, r1
 80299aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80299ac:	fb02 020a 	mla	r2, r2, sl, r0
 80299b0:	fb07 2701 	mla	r7, r7, r1, r2
 80299b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80299b6:	fb03 7302 	mla	r3, r3, r2, r7
 80299ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80299be:	b393      	cbz	r3, 8029a26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 80299c0:	4a2b      	ldr	r2, [pc, #172]	; (8029a70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 80299c2:	2bff      	cmp	r3, #255	; 0xff
 80299c4:	6811      	ldr	r1, [r2, #0]
 80299c6:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80299ca:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80299ce:	b2c9      	uxtb	r1, r1
 80299d0:	d042      	beq.n	8029a58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80299d2:	b298      	uxth	r0, r3
 80299d4:	43db      	mvns	r3, r3
 80299d6:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 80299da:	fb11 f100 	smulbb	r1, r1, r0
 80299de:	b2db      	uxtb	r3, r3
 80299e0:	fb17 f700 	smulbb	r7, r7, r0
 80299e4:	fb02 1103 	mla	r1, r2, r3, r1
 80299e8:	fb1a f000 	smulbb	r0, sl, r0
 80299ec:	b289      	uxth	r1, r1
 80299ee:	1c4a      	adds	r2, r1, #1
 80299f0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80299f4:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80299f8:	fb02 7703 	mla	r7, r2, r3, r7
 80299fc:	1209      	asrs	r1, r1, #8
 80299fe:	b2bf      	uxth	r7, r7
 8029a00:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8029a04:	1c7a      	adds	r2, r7, #1
 8029a06:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8029a0a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8029a0e:	fb02 0303 	mla	r3, r2, r3, r0
 8029a12:	123f      	asrs	r7, r7, #8
 8029a14:	b29b      	uxth	r3, r3
 8029a16:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8029a1a:	1c5a      	adds	r2, r3, #1
 8029a1c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029a20:	121b      	asrs	r3, r3, #8
 8029a22:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8029a26:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029a28:	f10c 0c03 	add.w	ip, ip, #3
 8029a2c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8029a30:	441d      	add	r5, r3
 8029a32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029a34:	441e      	add	r6, r3
 8029a36:	e6e7      	b.n	8029808 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8029a38:	2f00      	cmp	r7, #0
 8029a3a:	d0a5      	beq.n	8029988 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8029a3c:	444b      	add	r3, r9
 8029a3e:	0859      	lsrs	r1, r3, #1
 8029a40:	07db      	lsls	r3, r3, #31
 8029a42:	f818 1001 	ldrb.w	r1, [r8, r1]
 8029a46:	bf54      	ite	pl
 8029a48:	f001 010f 	andpl.w	r1, r1, #15
 8029a4c:	1109      	asrmi	r1, r1, #4
 8029a4e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029a52:	b2c9      	uxtb	r1, r1
 8029a54:	910b      	str	r1, [sp, #44]	; 0x2c
 8029a56:	e797      	b.n	8029988 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8029a58:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8029a5c:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8029a60:	f80c ac01 	strb.w	sl, [ip, #-1]
 8029a64:	e7df      	b.n	8029a26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8029a66:	b013      	add	sp, #76	; 0x4c
 8029a68:	ecbd 8b08 	vpop	{d8-d11}
 8029a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029a70:	2400c8e4 	.word	0x2400c8e4

08029a74 <CRC_Lock>:
 8029a74:	4a20      	ldr	r2, [pc, #128]	; (8029af8 <CRC_Lock+0x84>)
 8029a76:	b530      	push	{r4, r5, lr}
 8029a78:	6813      	ldr	r3, [r2, #0]
 8029a7a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8029a7e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8029a82:	f023 0301 	bic.w	r3, r3, #1
 8029a86:	6013      	str	r3, [r2, #0]
 8029a88:	4b1c      	ldr	r3, [pc, #112]	; (8029afc <CRC_Lock+0x88>)
 8029a8a:	681a      	ldr	r2, [r3, #0]
 8029a8c:	4022      	ands	r2, r4
 8029a8e:	42aa      	cmp	r2, r5
 8029a90:	d005      	beq.n	8029a9e <CRC_Lock+0x2a>
 8029a92:	681b      	ldr	r3, [r3, #0]
 8029a94:	f24c 2270 	movw	r2, #49776	; 0xc270
 8029a98:	4023      	ands	r3, r4
 8029a9a:	4293      	cmp	r3, r2
 8029a9c:	d124      	bne.n	8029ae8 <CRC_Lock+0x74>
 8029a9e:	4b18      	ldr	r3, [pc, #96]	; (8029b00 <CRC_Lock+0x8c>)
 8029aa0:	681b      	ldr	r3, [r3, #0]
 8029aa2:	bb0b      	cbnz	r3, 8029ae8 <CRC_Lock+0x74>
 8029aa4:	4b17      	ldr	r3, [pc, #92]	; (8029b04 <CRC_Lock+0x90>)
 8029aa6:	681a      	ldr	r2, [r3, #0]
 8029aa8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029aac:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8029ab0:	d00d      	beq.n	8029ace <CRC_Lock+0x5a>
 8029ab2:	681a      	ldr	r2, [r3, #0]
 8029ab4:	f240 4483 	movw	r4, #1155	; 0x483
 8029ab8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029abc:	42a2      	cmp	r2, r4
 8029abe:	d006      	beq.n	8029ace <CRC_Lock+0x5a>
 8029ac0:	681b      	ldr	r3, [r3, #0]
 8029ac2:	f240 4285 	movw	r2, #1157	; 0x485
 8029ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029aca:	4293      	cmp	r3, r2
 8029acc:	d10c      	bne.n	8029ae8 <CRC_Lock+0x74>
 8029ace:	4b0e      	ldr	r3, [pc, #56]	; (8029b08 <CRC_Lock+0x94>)
 8029ad0:	2201      	movs	r2, #1
 8029ad2:	601a      	str	r2, [r3, #0]
 8029ad4:	681a      	ldr	r2, [r3, #0]
 8029ad6:	2a00      	cmp	r2, #0
 8029ad8:	d1fc      	bne.n	8029ad4 <CRC_Lock+0x60>
 8029ada:	4b0c      	ldr	r3, [pc, #48]	; (8029b0c <CRC_Lock+0x98>)
 8029adc:	6018      	str	r0, [r3, #0]
 8029ade:	6818      	ldr	r0, [r3, #0]
 8029ae0:	1a43      	subs	r3, r0, r1
 8029ae2:	4258      	negs	r0, r3
 8029ae4:	4158      	adcs	r0, r3
 8029ae6:	bd30      	pop	{r4, r5, pc}
 8029ae8:	4b09      	ldr	r3, [pc, #36]	; (8029b10 <CRC_Lock+0x9c>)
 8029aea:	2201      	movs	r2, #1
 8029aec:	601a      	str	r2, [r3, #0]
 8029aee:	681a      	ldr	r2, [r3, #0]
 8029af0:	2a00      	cmp	r2, #0
 8029af2:	d1fc      	bne.n	8029aee <CRC_Lock+0x7a>
 8029af4:	4b07      	ldr	r3, [pc, #28]	; (8029b14 <CRC_Lock+0xa0>)
 8029af6:	e7f1      	b.n	8029adc <CRC_Lock+0x68>
 8029af8:	e0002000 	.word	0xe0002000
 8029afc:	e000ed00 	.word	0xe000ed00
 8029b00:	e0042000 	.word	0xe0042000
 8029b04:	5c001000 	.word	0x5c001000
 8029b08:	58024c08 	.word	0x58024c08
 8029b0c:	58024c00 	.word	0x58024c00
 8029b10:	40023008 	.word	0x40023008
 8029b14:	40023000 	.word	0x40023000

08029b18 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029b18:	6101      	str	r1, [r0, #16]
 8029b1a:	4770      	bx	lr

08029b1c <_ZN8touchgfx8Gestures4tickEv>:
 8029b1c:	7b83      	ldrb	r3, [r0, #14]
 8029b1e:	b14b      	cbz	r3, 8029b34 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029b20:	8903      	ldrh	r3, [r0, #8]
 8029b22:	3301      	adds	r3, #1
 8029b24:	b29b      	uxth	r3, r3
 8029b26:	2b07      	cmp	r3, #7
 8029b28:	8103      	strh	r3, [r0, #8]
 8029b2a:	bf81      	itttt	hi
 8029b2c:	2300      	movhi	r3, #0
 8029b2e:	8143      	strhhi	r3, [r0, #10]
 8029b30:	8183      	strhhi	r3, [r0, #12]
 8029b32:	7383      	strbhi	r3, [r0, #14]
 8029b34:	4770      	bx	lr
	...

08029b38 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029b38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029b3c:	4604      	mov	r4, r0
 8029b3e:	4698      	mov	r8, r3
 8029b40:	8880      	ldrh	r0, [r0, #4]
 8029b42:	4617      	mov	r7, r2
 8029b44:	4b1d      	ldr	r3, [pc, #116]	; (8029bbc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8029b46:	460e      	mov	r6, r1
 8029b48:	f8ad 0006 	strh.w	r0, [sp, #6]
 8029b4c:	eba8 0000 	sub.w	r0, r8, r0
 8029b50:	9300      	str	r3, [sp, #0]
 8029b52:	2300      	movs	r3, #0
 8029b54:	b280      	uxth	r0, r0
 8029b56:	8aa2      	ldrh	r2, [r4, #20]
 8029b58:	f88d 3004 	strb.w	r3, [sp, #4]
 8029b5c:	b203      	sxth	r3, r0
 8029b5e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8029b62:	88e1      	ldrh	r1, [r4, #6]
 8029b64:	2b00      	cmp	r3, #0
 8029b66:	f8ad 800a 	strh.w	r8, [sp, #10]
 8029b6a:	f8ad 1008 	strh.w	r1, [sp, #8]
 8029b6e:	bfb8      	it	lt
 8029b70:	4240      	neglt	r0, r0
 8029b72:	f8ad 500c 	strh.w	r5, [sp, #12]
 8029b76:	bfb8      	it	lt
 8029b78:	b203      	sxthlt	r3, r0
 8029b7a:	4293      	cmp	r3, r2
 8029b7c:	dc08      	bgt.n	8029b90 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8029b7e:	1a69      	subs	r1, r5, r1
 8029b80:	b289      	uxth	r1, r1
 8029b82:	b20b      	sxth	r3, r1
 8029b84:	2b00      	cmp	r3, #0
 8029b86:	bfbc      	itt	lt
 8029b88:	4249      	neglt	r1, r1
 8029b8a:	b20b      	sxthlt	r3, r1
 8029b8c:	429a      	cmp	r2, r3
 8029b8e:	da13      	bge.n	8029bb8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8029b90:	6920      	ldr	r0, [r4, #16]
 8029b92:	4669      	mov	r1, sp
 8029b94:	eba8 0606 	sub.w	r6, r8, r6
 8029b98:	1bef      	subs	r7, r5, r7
 8029b9a:	6803      	ldr	r3, [r0, #0]
 8029b9c:	685b      	ldr	r3, [r3, #4]
 8029b9e:	4798      	blx	r3
 8029ba0:	2300      	movs	r3, #0
 8029ba2:	2001      	movs	r0, #1
 8029ba4:	8166      	strh	r6, [r4, #10]
 8029ba6:	8123      	strh	r3, [r4, #8]
 8029ba8:	81a7      	strh	r7, [r4, #12]
 8029baa:	f8a4 8004 	strh.w	r8, [r4, #4]
 8029bae:	80e5      	strh	r5, [r4, #6]
 8029bb0:	73a0      	strb	r0, [r4, #14]
 8029bb2:	b004      	add	sp, #16
 8029bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029bb8:	2000      	movs	r0, #0
 8029bba:	e7fa      	b.n	8029bb2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8029bbc:	08030714 	.word	0x08030714

08029bc0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8029bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029bc2:	461e      	mov	r6, r3
 8029bc4:	1e4b      	subs	r3, r1, #1
 8029bc6:	b085      	sub	sp, #20
 8029bc8:	4604      	mov	r4, r0
 8029bca:	2b01      	cmp	r3, #1
 8029bcc:	460d      	mov	r5, r1
 8029bce:	4617      	mov	r7, r2
 8029bd0:	d84b      	bhi.n	8029c6a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8029bd2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8029bd6:	1cd3      	adds	r3, r2, #3
 8029bd8:	b29b      	uxth	r3, r3
 8029bda:	2b06      	cmp	r3, #6
 8029bdc:	d916      	bls.n	8029c0c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8029bde:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8029c80 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029be2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029be6:	f8cd c004 	str.w	ip, [sp, #4]
 8029bea:	f04f 0c00 	mov.w	ip, #0
 8029bee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029bf2:	6900      	ldr	r0, [r0, #16]
 8029bf4:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029bf8:	a901      	add	r1, sp, #4
 8029bfa:	f88d c008 	strb.w	ip, [sp, #8]
 8029bfe:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029c02:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029c06:	6803      	ldr	r3, [r0, #0]
 8029c08:	689b      	ldr	r3, [r3, #8]
 8029c0a:	4798      	blx	r3
 8029c0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029c10:	1cd3      	adds	r3, r2, #3
 8029c12:	b29b      	uxth	r3, r3
 8029c14:	2b06      	cmp	r3, #6
 8029c16:	d916      	bls.n	8029c46 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029c18:	f8df c064 	ldr.w	ip, [pc, #100]	; 8029c80 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029c1c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029c20:	f8cd c004 	str.w	ip, [sp, #4]
 8029c24:	f04f 0c01 	mov.w	ip, #1
 8029c28:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029c2c:	6920      	ldr	r0, [r4, #16]
 8029c2e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029c32:	a901      	add	r1, sp, #4
 8029c34:	f88d c008 	strb.w	ip, [sp, #8]
 8029c38:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029c3c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029c40:	6803      	ldr	r3, [r0, #0]
 8029c42:	689b      	ldr	r3, [r3, #8]
 8029c44:	4798      	blx	r3
 8029c46:	4b0d      	ldr	r3, [pc, #52]	; (8029c7c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8029c48:	a901      	add	r1, sp, #4
 8029c4a:	6920      	ldr	r0, [r4, #16]
 8029c4c:	9301      	str	r3, [sp, #4]
 8029c4e:	2300      	movs	r3, #0
 8029c50:	f88d 5008 	strb.w	r5, [sp, #8]
 8029c54:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029c58:	f8ad 600c 	strh.w	r6, [sp, #12]
 8029c5c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029c60:	6803      	ldr	r3, [r0, #0]
 8029c62:	681b      	ldr	r3, [r3, #0]
 8029c64:	4798      	blx	r3
 8029c66:	b005      	add	sp, #20
 8029c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029c6a:	2900      	cmp	r1, #0
 8029c6c:	d1eb      	bne.n	8029c46 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029c6e:	80a2      	strh	r2, [r4, #4]
 8029c70:	80c6      	strh	r6, [r0, #6]
 8029c72:	60a1      	str	r1, [r4, #8]
 8029c74:	81a1      	strh	r1, [r4, #12]
 8029c76:	73a1      	strb	r1, [r4, #14]
 8029c78:	e7e5      	b.n	8029c46 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029c7a:	bf00      	nop
 8029c7c:	08030700 	.word	0x08030700
 8029c80:	08030728 	.word	0x08030728

08029c84 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 8029c84:	10c9      	asrs	r1, r1, #3
 8029c86:	2900      	cmp	r1, #0
 8029c88:	bfb8      	it	lt
 8029c8a:	4249      	neglt	r1, r1
 8029c8c:	2801      	cmp	r0, #1
 8029c8e:	d108      	bne.n	8029ca2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8029c90:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8029c94:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8029c98:	4601      	mov	r1, r0
 8029c9a:	dd02      	ble.n	8029ca2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 8029c9c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8029ca0:	4770      	bx	lr
 8029ca2:	29ff      	cmp	r1, #255	; 0xff
 8029ca4:	bfa8      	it	ge
 8029ca6:	21ff      	movge	r1, #255	; 0xff
 8029ca8:	4608      	mov	r0, r1
 8029caa:	4770      	bx	lr

08029cac <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8029cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029cb0:	688c      	ldr	r4, [r1, #8]
 8029cb2:	b087      	sub	sp, #28
 8029cb4:	4607      	mov	r7, r0
 8029cb6:	2c00      	cmp	r4, #0
 8029cb8:	db2b      	blt.n	8029d12 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8029cba:	6803      	ldr	r3, [r0, #0]
 8029cbc:	691a      	ldr	r2, [r3, #16]
 8029cbe:	42a2      	cmp	r2, r4
 8029cc0:	dd27      	ble.n	8029d12 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8029cc2:	685a      	ldr	r2, [r3, #4]
 8029cc4:	695e      	ldr	r6, [r3, #20]
 8029cc6:	68cd      	ldr	r5, [r1, #12]
 8029cc8:	fb06 2604 	mla	r6, r6, r4, r2
 8029ccc:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8029cd0:	698a      	ldr	r2, [r1, #24]
 8029cd2:	f893 a008 	ldrb.w	sl, [r3, #8]
 8029cd6:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8029cda:	9205      	str	r2, [sp, #20]
 8029cdc:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8029ce0:	9b05      	ldr	r3, [sp, #20]
 8029ce2:	6839      	ldr	r1, [r7, #0]
 8029ce4:	eb03 0c02 	add.w	ip, r3, r2
 8029ce8:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8029cec:	68c9      	ldr	r1, [r1, #12]
 8029cee:	1898      	adds	r0, r3, r2
 8029cf0:	4288      	cmp	r0, r1
 8029cf2:	db02      	blt.n	8029cfa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8029cf4:	1a8b      	subs	r3, r1, r2
 8029cf6:	2b00      	cmp	r3, #0
 8029cf8:	dd09      	ble.n	8029d0e <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8029cfa:	6878      	ldr	r0, [r7, #4]
 8029cfc:	6801      	ldr	r1, [r0, #0]
 8029cfe:	9400      	str	r4, [sp, #0]
 8029d00:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8029d04:	4653      	mov	r3, sl
 8029d06:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8029d0a:	4631      	mov	r1, r6
 8029d0c:	47d8      	blx	fp
 8029d0e:	3d01      	subs	r5, #1
 8029d10:	d1e4      	bne.n	8029cdc <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8029d12:	b007      	add	sp, #28
 8029d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029d18 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8029d18:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8029d1c:	b90b      	cbnz	r3, 8029d22 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8029d1e:	f001 b991 	b.w	802b044 <_ZN8touchgfx7Outline6lineToEii>
 8029d22:	4770      	bx	lr

08029d24 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8029d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029d28:	4604      	mov	r4, r0
 8029d2a:	2600      	movs	r6, #0
 8029d2c:	4b8f      	ldr	r3, [pc, #572]	; (8029f6c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8029d2e:	f100 0518 	add.w	r5, r0, #24
 8029d32:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8029d36:	b086      	sub	sp, #24
 8029d38:	4690      	mov	r8, r2
 8029d3a:	e9c0 3100 	strd	r3, r1, [r0]
 8029d3e:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8029d42:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8029d46:	4628      	mov	r0, r5
 8029d48:	f001 fba0 	bl	802b48c <_ZN8touchgfx15RenderingBufferC1Ev>
 8029d4c:	4638      	mov	r0, r7
 8029d4e:	f000 fb45 	bl	802a3dc <_ZN8touchgfx7OutlineC1Ev>
 8029d52:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8029d56:	f001 fb41 	bl	802b3dc <_ZN8touchgfx8ScanlineC1Ev>
 8029d5a:	2301      	movs	r3, #1
 8029d5c:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 8029d60:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 8029d64:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 8029d68:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8029d6c:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 8029d70:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8029d74:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 8029d78:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 8029d7c:	f7f3 f912 	bl	801cfa4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8029d80:	b928      	cbnz	r0, 8029d8e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 8029d82:	4b7b      	ldr	r3, [pc, #492]	; (8029f70 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8029d84:	212d      	movs	r1, #45	; 0x2d
 8029d86:	4a7b      	ldr	r2, [pc, #492]	; (8029f74 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8029d88:	487b      	ldr	r0, [pc, #492]	; (8029f78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8029d8a:	f001 fd6d 	bl	802b868 <__assert_func>
 8029d8e:	f9b8 2000 	ldrsh.w	r2, [r8]
 8029d92:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8029d96:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8029d9a:	4410      	add	r0, r2
 8029d9c:	9602      	str	r6, [sp, #8]
 8029d9e:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8029da2:	b280      	uxth	r0, r0
 8029da4:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8029da8:	fa0f fa80 	sxth.w	sl, r0
 8029dac:	f1ba 0f00 	cmp.w	sl, #0
 8029db0:	dd70      	ble.n	8029e94 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8029db2:	4591      	cmp	r9, r2
 8029db4:	dd6e      	ble.n	8029e94 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8029db6:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8029dba:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8029dbe:	440b      	add	r3, r1
 8029dc0:	b29b      	uxth	r3, r3
 8029dc2:	b21e      	sxth	r6, r3
 8029dc4:	2e00      	cmp	r6, #0
 8029dc6:	dd65      	ble.n	8029e94 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8029dc8:	458e      	cmp	lr, r1
 8029dca:	dd63      	ble.n	8029e94 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 8029dcc:	45d1      	cmp	r9, sl
 8029dce:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8029dd2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8029dd6:	bfb8      	it	lt
 8029dd8:	fa1f f089 	uxthlt.w	r0, r9
 8029ddc:	45b6      	cmp	lr, r6
 8029dde:	f8ad 2008 	strh.w	r2, [sp, #8]
 8029de2:	bfb8      	it	lt
 8029de4:	fa1f f38e 	uxthlt.w	r3, lr
 8029de8:	1a80      	subs	r0, r0, r2
 8029dea:	f8ad 100a 	strh.w	r1, [sp, #10]
 8029dee:	1a5b      	subs	r3, r3, r1
 8029df0:	f8ad 000c 	strh.w	r0, [sp, #12]
 8029df4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029df8:	f10d 0808 	add.w	r8, sp, #8
 8029dfc:	ae04      	add	r6, sp, #16
 8029dfe:	e898 0003 	ldmia.w	r8, {r0, r1}
 8029e02:	e886 0003 	stmia.w	r6, {r0, r1}
 8029e06:	f8dc 3000 	ldr.w	r3, [ip]
 8029e0a:	4660      	mov	r0, ip
 8029e0c:	4631      	mov	r1, r6
 8029e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e10:	4798      	blx	r3
 8029e12:	6861      	ldr	r1, [r4, #4]
 8029e14:	4640      	mov	r0, r8
 8029e16:	3104      	adds	r1, #4
 8029e18:	f7f4 fc1c 	bl	801e654 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029e1c:	4630      	mov	r0, r6
 8029e1e:	f7f4 fbd5 	bl	801e5cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029e22:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8029e26:	f7f3 f84d 	bl	801cec4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8029e2a:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 8029e2e:	4638      	mov	r0, r7
 8029e30:	f000 fab0 	bl	802a394 <_ZN8touchgfx7Outline5resetEv>
 8029e34:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8029e38:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8029e3c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8029e40:	015b      	lsls	r3, r3, #5
 8029e42:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 8029e46:	0152      	lsls	r2, r2, #5
 8029e48:	60e3      	str	r3, [r4, #12]
 8029e4a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8029e4e:	60a2      	str	r2, [r4, #8]
 8029e50:	015b      	lsls	r3, r3, #5
 8029e52:	6123      	str	r3, [r4, #16]
 8029e54:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8029e58:	015b      	lsls	r3, r3, #5
 8029e5a:	6163      	str	r3, [r4, #20]
 8029e5c:	4b47      	ldr	r3, [pc, #284]	; (8029f7c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8029e5e:	6818      	ldr	r0, [r3, #0]
 8029e60:	6803      	ldr	r3, [r0, #0]
 8029e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e64:	4798      	blx	r3
 8029e66:	4606      	mov	r6, r0
 8029e68:	f7da faf6 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 8029e6c:	6803      	ldr	r3, [r0, #0]
 8029e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029e70:	4798      	blx	r3
 8029e72:	4607      	mov	r7, r0
 8029e74:	f7da faf0 	bl	8004458 <_ZN8touchgfx3HAL3lcdEv>
 8029e78:	6803      	ldr	r3, [r0, #0]
 8029e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029e7c:	4798      	blx	r3
 8029e7e:	280d      	cmp	r0, #13
 8029e80:	d854      	bhi.n	8029f2c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 8029e82:	e8df f000 	tbb	[pc, r0]
 8029e86:	554b      	.short	0x554b
 8029e88:	2b6e0a66 	.word	0x2b6e0a66
 8029e8c:	5f5f5f3b 	.word	0x5f5f5f3b
 8029e90:	6e6e5f5f 	.word	0x6e6e5f5f
 8029e94:	2300      	movs	r3, #0
 8029e96:	9303      	str	r3, [sp, #12]
 8029e98:	e7ae      	b.n	8029df8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 8029e9a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029e9e:	2108      	movs	r1, #8
 8029ea0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029ea4:	fb92 f1f1 	sdiv	r1, r2, r1
 8029ea8:	fb07 1303 	mla	r3, r7, r3, r1
 8029eac:	441e      	add	r6, r3
 8029eae:	4253      	negs	r3, r2
 8029eb0:	f002 0207 	and.w	r2, r2, #7
 8029eb4:	f003 0307 	and.w	r3, r3, #7
 8029eb8:	bf58      	it	pl
 8029eba:	425a      	negpl	r2, r3
 8029ebc:	b2d2      	uxtb	r2, r2
 8029ebe:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8029ec2:	4628      	mov	r0, r5
 8029ec4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8029ec8:	6721      	str	r1, [r4, #112]	; 0x70
 8029eca:	e9cd 1700 	strd	r1, r7, [sp]
 8029ece:	4631      	mov	r1, r6
 8029ed0:	f001 fae8 	bl	802b4a4 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8029ed4:	4620      	mov	r0, r4
 8029ed6:	b006      	add	sp, #24
 8029ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029edc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029ee0:	2104      	movs	r1, #4
 8029ee2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029ee6:	fb92 f1f1 	sdiv	r1, r2, r1
 8029eea:	fb07 1303 	mla	r3, r7, r3, r1
 8029eee:	441e      	add	r6, r3
 8029ef0:	4253      	negs	r3, r2
 8029ef2:	f002 0203 	and.w	r2, r2, #3
 8029ef6:	f003 0303 	and.w	r3, r3, #3
 8029efa:	e7dd      	b.n	8029eb8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8029efc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029f00:	2102      	movs	r1, #2
 8029f02:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029f06:	2a00      	cmp	r2, #0
 8029f08:	fb92 f1f1 	sdiv	r1, r2, r1
 8029f0c:	f002 0201 	and.w	r2, r2, #1
 8029f10:	fb07 1303 	mla	r3, r7, r3, r1
 8029f14:	bfb8      	it	lt
 8029f16:	4252      	neglt	r2, r2
 8029f18:	441e      	add	r6, r3
 8029f1a:	e7cf      	b.n	8029ebc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 8029f1c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029f20:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029f24:	437b      	muls	r3, r7
 8029f26:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8029f2a:	441e      	add	r6, r3
 8029f2c:	2200      	movs	r2, #0
 8029f2e:	e7c6      	b.n	8029ebe <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 8029f30:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029f34:	2103      	movs	r1, #3
 8029f36:	fb07 f203 	mul.w	r2, r7, r3
 8029f3a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8029f3e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8029f42:	e7f2      	b.n	8029f2a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8029f44:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029f48:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029f4c:	fb07 2303 	mla	r3, r7, r3, r2
 8029f50:	e7eb      	b.n	8029f2a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8029f52:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029f56:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8029f5a:	437b      	muls	r3, r7
 8029f5c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8029f60:	e7e3      	b.n	8029f2a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 8029f62:	4b07      	ldr	r3, [pc, #28]	; (8029f80 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 8029f64:	216c      	movs	r1, #108	; 0x6c
 8029f66:	4a03      	ldr	r2, [pc, #12]	; (8029f74 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8029f68:	e70e      	b.n	8029d88 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 8029f6a:	bf00      	nop
 8029f6c:	08031abc 	.word	0x08031abc
 8029f70:	08031a06 	.word	0x08031a06
 8029f74:	08031ac4 	.word	0x08031ac4
 8029f78:	08031a62 	.word	0x08031a62
 8029f7c:	2400c8bc 	.word	0x2400c8bc
 8029f80:	08031a96 	.word	0x08031a96

08029f84 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8029f84:	6812      	ldr	r2, [r2, #0]
 8029f86:	2a00      	cmp	r2, #0
 8029f88:	db0b      	blt.n	8029fa2 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8029f8a:	9800      	ldr	r0, [sp, #0]
 8029f8c:	6800      	ldr	r0, [r0, #0]
 8029f8e:	4290      	cmp	r0, r2
 8029f90:	bfd4      	ite	le
 8029f92:	2002      	movle	r0, #2
 8029f94:	2000      	movgt	r0, #0
 8029f96:	680a      	ldr	r2, [r1, #0]
 8029f98:	2a00      	cmp	r2, #0
 8029f9a:	da04      	bge.n	8029fa6 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8029f9c:	f040 0004 	orr.w	r0, r0, #4
 8029fa0:	4770      	bx	lr
 8029fa2:	2001      	movs	r0, #1
 8029fa4:	e7f7      	b.n	8029f96 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8029fa6:	681b      	ldr	r3, [r3, #0]
 8029fa8:	4293      	cmp	r3, r2
 8029faa:	bfd8      	it	le
 8029fac:	f040 0008 	orrle.w	r0, r0, #8
 8029fb0:	4770      	bx	lr
	...

08029fb4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8029fb4:	4b07      	ldr	r3, [pc, #28]	; (8029fd4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8029fb6:	b510      	push	{r4, lr}
 8029fb8:	781b      	ldrb	r3, [r3, #0]
 8029fba:	2b01      	cmp	r3, #1
 8029fbc:	d108      	bne.n	8029fd0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8029fbe:	6843      	ldr	r3, [r0, #4]
 8029fc0:	6814      	ldr	r4, [r2, #0]
 8029fc2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8029fc6:	680b      	ldr	r3, [r1, #0]
 8029fc8:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8029fcc:	6013      	str	r3, [r2, #0]
 8029fce:	600c      	str	r4, [r1, #0]
 8029fd0:	bd10      	pop	{r4, pc}
 8029fd2:	bf00      	nop
 8029fd4:	2400c8b4 	.word	0x2400c8b4

08029fd8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8029fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029fda:	b085      	sub	sp, #20
 8029fdc:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8029fe0:	4604      	mov	r4, r0
 8029fe2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8029fe6:	b33b      	cbz	r3, 802a038 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8029fe8:	aa02      	add	r2, sp, #8
 8029fea:	a903      	add	r1, sp, #12
 8029fec:	f7ff ffe2 	bl	8029fb4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029ff0:	68a3      	ldr	r3, [r4, #8]
 8029ff2:	9e03      	ldr	r6, [sp, #12]
 8029ff4:	aa02      	add	r2, sp, #8
 8029ff6:	9f02      	ldr	r7, [sp, #8]
 8029ff8:	a903      	add	r1, sp, #12
 8029ffa:	1af6      	subs	r6, r6, r3
 8029ffc:	68e3      	ldr	r3, [r4, #12]
 8029ffe:	4620      	mov	r0, r4
 802a000:	1aff      	subs	r7, r7, r3
 802a002:	f104 0314 	add.w	r3, r4, #20
 802a006:	9603      	str	r6, [sp, #12]
 802a008:	9300      	str	r3, [sp, #0]
 802a00a:	f104 0310 	add.w	r3, r4, #16
 802a00e:	9702      	str	r7, [sp, #8]
 802a010:	f7ff ffb8 	bl	8029f84 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802a014:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 802a018:	4605      	mov	r5, r0
 802a01a:	b97b      	cbnz	r3, 802a03c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 802a01c:	463a      	mov	r2, r7
 802a01e:	4631      	mov	r1, r6
 802a020:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802a024:	f7ff fe78 	bl	8029d18 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a028:	9b03      	ldr	r3, [sp, #12]
 802a02a:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 802a02e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802a032:	9b02      	ldr	r3, [sp, #8]
 802a034:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 802a038:	b005      	add	sp, #20
 802a03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a03c:	b110      	cbz	r0, 802a044 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 802a03e:	ea13 0200 	ands.w	r2, r3, r0
 802a042:	d11c      	bne.n	802a07e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802a044:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 802a048:	f104 0630 	add.w	r6, r4, #48	; 0x30
 802a04c:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 802a050:	b188      	cbz	r0, 802a076 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802a052:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 802a056:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802a05a:	b913      	cbnz	r3, 802a062 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802a05c:	4630      	mov	r0, r6
 802a05e:	f001 f821 	bl	802b0a4 <_ZN8touchgfx7Outline6moveToEii>
 802a062:	2300      	movs	r3, #0
 802a064:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a068:	2301      	movs	r3, #1
 802a06a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802a06e:	4630      	mov	r0, r6
 802a070:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802a074:	e7d6      	b.n	802a024 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802a076:	4630      	mov	r0, r6
 802a078:	f7ff fe4e 	bl	8029d18 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a07c:	e7f7      	b.n	802a06e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802a07e:	4615      	mov	r5, r2
 802a080:	e7d2      	b.n	802a028 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802a082 <_ZN8touchgfx6Canvas5closeEv>:
 802a082:	b538      	push	{r3, r4, r5, lr}
 802a084:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802a088:	4604      	mov	r4, r0
 802a08a:	b993      	cbnz	r3, 802a0b2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802a08c:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 802a090:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 802a094:	4213      	tst	r3, r2
 802a096:	d10c      	bne.n	802a0b2 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802a098:	f100 0530 	add.w	r5, r0, #48	; 0x30
 802a09c:	b123      	cbz	r3, 802a0a8 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802a09e:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 802a0a2:	4628      	mov	r0, r5
 802a0a4:	f7ff fe38 	bl	8029d18 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a0a8:	4628      	mov	r0, r5
 802a0aa:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 802a0ae:	f7ff fe33 	bl	8029d18 <_ZN8touchgfx10Rasterizer6lineToEii>
 802a0b2:	2300      	movs	r3, #0
 802a0b4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a0b8:	bd38      	pop	{r3, r4, r5, pc}

0802a0ba <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802a0ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a0bc:	b085      	sub	sp, #20
 802a0be:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802a0c2:	4604      	mov	r4, r0
 802a0c4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802a0c8:	b353      	cbz	r3, 802a120 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 802a0ca:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 802a0ce:	b90b      	cbnz	r3, 802a0d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 802a0d0:	f7ff ffd7 	bl	802a082 <_ZN8touchgfx6Canvas5closeEv>
 802a0d4:	aa02      	add	r2, sp, #8
 802a0d6:	a903      	add	r1, sp, #12
 802a0d8:	4620      	mov	r0, r4
 802a0da:	f7ff ff6b 	bl	8029fb4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802a0de:	68a3      	ldr	r3, [r4, #8]
 802a0e0:	9d03      	ldr	r5, [sp, #12]
 802a0e2:	aa02      	add	r2, sp, #8
 802a0e4:	9e02      	ldr	r6, [sp, #8]
 802a0e6:	a903      	add	r1, sp, #12
 802a0e8:	1aed      	subs	r5, r5, r3
 802a0ea:	68e3      	ldr	r3, [r4, #12]
 802a0ec:	4620      	mov	r0, r4
 802a0ee:	1af6      	subs	r6, r6, r3
 802a0f0:	f104 0314 	add.w	r3, r4, #20
 802a0f4:	9503      	str	r5, [sp, #12]
 802a0f6:	9300      	str	r3, [sp, #0]
 802a0f8:	f104 0310 	add.w	r3, r4, #16
 802a0fc:	9602      	str	r6, [sp, #8]
 802a0fe:	f7ff ff41 	bl	8029f84 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802a102:	4607      	mov	r7, r0
 802a104:	b170      	cbz	r0, 802a124 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802a106:	2301      	movs	r3, #1
 802a108:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a10c:	9a03      	ldr	r2, [sp, #12]
 802a10e:	9b02      	ldr	r3, [sp, #8]
 802a110:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 802a114:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 802a118:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 802a11c:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 802a120:	b005      	add	sp, #20
 802a122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a124:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 802a128:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 802a12c:	b92b      	cbnz	r3, 802a13a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 802a12e:	4632      	mov	r2, r6
 802a130:	4629      	mov	r1, r5
 802a132:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802a136:	f000 ffb5 	bl	802b0a4 <_ZN8touchgfx7Outline6moveToEii>
 802a13a:	2300      	movs	r3, #0
 802a13c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 802a140:	2301      	movs	r3, #1
 802a142:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 802a146:	e7e1      	b.n	802a10c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0802a148 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 802a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a14c:	4604      	mov	r4, r0
 802a14e:	b087      	sub	sp, #28
 802a150:	9105      	str	r1, [sp, #20]
 802a152:	f001 f8ec 	bl	802b32e <_ZN8touchgfx7Outline8getCellsEv>
 802a156:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802a15a:	4605      	mov	r5, r0
 802a15c:	f1b9 0f00 	cmp.w	r9, #0
 802a160:	d103      	bne.n	802a16a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 802a162:	2001      	movs	r0, #1
 802a164:	b007      	add	sp, #28
 802a166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a16a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802a16e:	2e00      	cmp	r6, #0
 802a170:	d139      	bne.n	802a1e6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802a172:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802a176:	f105 0708 	add.w	r7, r5, #8
 802a17a:	4640      	mov	r0, r8
 802a17c:	f001 f919 	bl	802b3b2 <_ZN8touchgfx8Scanline5resetEv>
 802a180:	f109 33ff 	add.w	r3, r9, #4294967295
 802a184:	9303      	str	r3, [sp, #12]
 802a186:	f9b5 b000 	ldrsh.w	fp, [r5]
 802a18a:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802a18e:	46da      	mov	sl, fp
 802a190:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802a194:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 802a198:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 802a19c:	9b03      	ldr	r3, [sp, #12]
 802a19e:	4416      	add	r6, r2
 802a1a0:	9504      	str	r5, [sp, #16]
 802a1a2:	463d      	mov	r5, r7
 802a1a4:	3b01      	subs	r3, #1
 802a1a6:	9303      	str	r3, [sp, #12]
 802a1a8:	3301      	adds	r3, #1
 802a1aa:	d01e      	beq.n	802a1ea <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 802a1ac:	3708      	adds	r7, #8
 802a1ae:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802a1b2:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802a1b6:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 802a1ba:	4290      	cmp	r0, r2
 802a1bc:	d11e      	bne.n	802a1fc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802a1be:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802a1c2:	4411      	add	r1, r2
 802a1c4:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 802a1c8:	e7e8      	b.n	802a19c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 802a1ca:	1c91      	adds	r1, r2, #2
 802a1cc:	f04f 0301 	mov.w	r3, #1
 802a1d0:	65e1      	str	r1, [r4, #92]	; 0x5c
 802a1d2:	8053      	strh	r3, [r2, #2]
 802a1d4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802a1d6:	1c91      	adds	r1, r2, #2
 802a1d8:	65a1      	str	r1, [r4, #88]	; 0x58
 802a1da:	f8a2 b002 	strh.w	fp, [r2, #2]
 802a1de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802a1e0:	3201      	adds	r2, #1
 802a1e2:	6562      	str	r2, [r4, #84]	; 0x54
 802a1e4:	e03a      	b.n	802a25c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802a1e6:	2000      	movs	r0, #0
 802a1e8:	e7bc      	b.n	802a164 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 802a1ea:	b951      	cbnz	r1, 802a202 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 802a1ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802a1ee:	2b00      	cmp	r3, #0
 802a1f0:	d0b7      	beq.n	802a162 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802a1f2:	4641      	mov	r1, r8
 802a1f4:	9805      	ldr	r0, [sp, #20]
 802a1f6:	f7ff fd59 	bl	8029cac <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a1fa:	e7b2      	b.n	802a162 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802a1fc:	2900      	cmp	r1, #0
 802a1fe:	d035      	beq.n	802a26c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 802a200:	9504      	str	r5, [sp, #16]
 802a202:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802a206:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802a20a:	f7ff fd3b 	bl	8029c84 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802a20e:	4605      	mov	r5, r0
 802a210:	b330      	cbz	r0, 802a260 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a212:	6d62      	ldr	r2, [r4, #84]	; 0x54
 802a214:	b182      	cbz	r2, 802a238 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802a216:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802a218:	4591      	cmp	r9, r2
 802a21a:	d00d      	beq.n	802a238 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 802a21c:	4641      	mov	r1, r8
 802a21e:	9805      	ldr	r0, [sp, #20]
 802a220:	f7ff fd44 	bl	8029cac <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a224:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a228:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802a22a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802a22e:	65e2      	str	r2, [r4, #92]	; 0x5c
 802a230:	2300      	movs	r3, #0
 802a232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a234:	6563      	str	r3, [r4, #84]	; 0x54
 802a236:	65a2      	str	r2, [r4, #88]	; 0x58
 802a238:	f1bb 0f00 	cmp.w	fp, #0
 802a23c:	db10      	blt.n	802a260 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a23e:	f7f2 febf 	bl	801cfc0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802a242:	4583      	cmp	fp, r0
 802a244:	da0c      	bge.n	802a260 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802a246:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802a248:	f802 500b 	strb.w	r5, [r2, fp]
 802a24c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802a24e:	3201      	adds	r2, #1
 802a250:	4593      	cmp	fp, r2
 802a252:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802a254:	d1b9      	bne.n	802a1ca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802a256:	8811      	ldrh	r1, [r2, #0]
 802a258:	3101      	adds	r1, #1
 802a25a:	8011      	strh	r1, [r2, #0]
 802a25c:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 802a260:	9b03      	ldr	r3, [sp, #12]
 802a262:	3301      	adds	r3, #1
 802a264:	d0c2      	beq.n	802a1ec <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802a266:	f10b 0a01 	add.w	sl, fp, #1
 802a26a:	9d04      	ldr	r5, [sp, #16]
 802a26c:	f9b5 3000 	ldrsh.w	r3, [r5]
 802a270:	4553      	cmp	r3, sl
 802a272:	dd88      	ble.n	802a186 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802a274:	01b1      	lsls	r1, r6, #6
 802a276:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802a27a:	f7ff fd03 	bl	8029c84 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 802a27e:	4683      	mov	fp, r0
 802a280:	2800      	cmp	r0, #0
 802a282:	d080      	beq.n	802a186 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 802a284:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802a286:	b183      	cbz	r3, 802a2aa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802a288:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802a28a:	4599      	cmp	r9, r3
 802a28c:	d00d      	beq.n	802a2aa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802a28e:	4641      	mov	r1, r8
 802a290:	9805      	ldr	r0, [sp, #20]
 802a292:	f7ff fd0b 	bl	8029cac <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802a296:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a29a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802a29e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 802a2a0:	65e3      	str	r3, [r4, #92]	; 0x5c
 802a2a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a2a4:	65a3      	str	r3, [r4, #88]	; 0x58
 802a2a6:	2300      	movs	r3, #0
 802a2a8:	6563      	str	r3, [r4, #84]	; 0x54
 802a2aa:	f9b5 3000 	ldrsh.w	r3, [r5]
 802a2ae:	464a      	mov	r2, r9
 802a2b0:	f8cd b000 	str.w	fp, [sp]
 802a2b4:	4651      	mov	r1, sl
 802a2b6:	eba3 030a 	sub.w	r3, r3, sl
 802a2ba:	4640      	mov	r0, r8
 802a2bc:	f001 f8a4 	bl	802b408 <_ZN8touchgfx8Scanline7addSpanEiijj>
 802a2c0:	e761      	b.n	802a186 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0802a2c2 <_ZN8touchgfx6Canvas6renderEh>:
 802a2c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a2c4:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 802a2c8:	4604      	mov	r4, r0
 802a2ca:	460d      	mov	r5, r1
 802a2cc:	b913      	cbnz	r3, 802a2d4 <_ZN8touchgfx6Canvas6renderEh+0x12>
 802a2ce:	2001      	movs	r0, #1
 802a2d0:	b003      	add	sp, #12
 802a2d2:	bd30      	pop	{r4, r5, pc}
 802a2d4:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 802a2d8:	2b00      	cmp	r3, #0
 802a2da:	d12f      	bne.n	802a33c <_ZN8touchgfx6Canvas6renderEh+0x7a>
 802a2dc:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 802a2e0:	2b00      	cmp	r3, #0
 802a2e2:	d0f4      	beq.n	802a2ce <_ZN8touchgfx6Canvas6renderEh+0xc>
 802a2e4:	6840      	ldr	r0, [r0, #4]
 802a2e6:	6803      	ldr	r3, [r0, #0]
 802a2e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802a2ea:	4798      	blx	r3
 802a2ec:	fb10 f105 	smulbb	r1, r0, r5
 802a2f0:	b288      	uxth	r0, r1
 802a2f2:	1c41      	adds	r1, r0, #1
 802a2f4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802a2f8:	120d      	asrs	r5, r1, #8
 802a2fa:	d0e8      	beq.n	802a2ce <_ZN8touchgfx6Canvas6renderEh+0xc>
 802a2fc:	4620      	mov	r0, r4
 802a2fe:	f7ff fec0 	bl	802a082 <_ZN8touchgfx6Canvas5closeEv>
 802a302:	6860      	ldr	r0, [r4, #4]
 802a304:	6803      	ldr	r3, [r0, #0]
 802a306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a308:	4798      	blx	r3
 802a30a:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 802a30e:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 802a312:	8082      	strh	r2, [r0, #4]
 802a314:	80c3      	strh	r3, [r0, #6]
 802a316:	6860      	ldr	r0, [r4, #4]
 802a318:	6803      	ldr	r3, [r0, #0]
 802a31a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a31c:	4798      	blx	r3
 802a31e:	7205      	strb	r5, [r0, #8]
 802a320:	6860      	ldr	r0, [r4, #4]
 802a322:	6803      	ldr	r3, [r0, #0]
 802a324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a326:	4798      	blx	r3
 802a328:	f104 0318 	add.w	r3, r4, #24
 802a32c:	4669      	mov	r1, sp
 802a32e:	e9cd 3000 	strd	r3, r0, [sp]
 802a332:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802a336:	f7ff ff07 	bl	802a148 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 802a33a:	e7c9      	b.n	802a2d0 <_ZN8touchgfx6Canvas6renderEh+0xe>
 802a33c:	2000      	movs	r0, #0
 802a33e:	e7c7      	b.n	802a2d0 <_ZN8touchgfx6Canvas6renderEh+0xe>

0802a340 <_ZN8touchgfx6CanvasD1Ev>:
 802a340:	b538      	push	{r3, r4, r5, lr}
 802a342:	4605      	mov	r5, r0
 802a344:	4b08      	ldr	r3, [pc, #32]	; (802a368 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802a346:	4604      	mov	r4, r0
 802a348:	f845 3b30 	str.w	r3, [r5], #48
 802a34c:	4b07      	ldr	r3, [pc, #28]	; (802a36c <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 802a34e:	6818      	ldr	r0, [r3, #0]
 802a350:	6803      	ldr	r3, [r0, #0]
 802a352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a354:	4798      	blx	r3
 802a356:	4628      	mov	r0, r5
 802a358:	f000 f814 	bl	802a384 <_ZN8touchgfx7OutlineD1Ev>
 802a35c:	f104 0018 	add.w	r0, r4, #24
 802a360:	f001 f88b 	bl	802b47a <_ZN8touchgfx15RenderingBufferD1Ev>
 802a364:	4620      	mov	r0, r4
 802a366:	bd38      	pop	{r3, r4, r5, pc}
 802a368:	08031abc 	.word	0x08031abc
 802a36c:	2400c8bc 	.word	0x2400c8bc

0802a370 <_ZN8touchgfx6CanvasD0Ev>:
 802a370:	b510      	push	{r4, lr}
 802a372:	4604      	mov	r4, r0
 802a374:	f7ff ffe4 	bl	802a340 <_ZN8touchgfx6CanvasD1Ev>
 802a378:	21bc      	movs	r1, #188	; 0xbc
 802a37a:	4620      	mov	r0, r4
 802a37c:	f001 f89f 	bl	802b4be <_ZdlPvj>
 802a380:	4620      	mov	r0, r4
 802a382:	bd10      	pop	{r4, pc}

0802a384 <_ZN8touchgfx7OutlineD1Ev>:
 802a384:	4770      	bx	lr

0802a386 <_ZN8touchgfx7OutlineD0Ev>:
 802a386:	b510      	push	{r4, lr}
 802a388:	4604      	mov	r4, r0
 802a38a:	2148      	movs	r1, #72	; 0x48
 802a38c:	f001 f897 	bl	802b4be <_ZdlPvj>
 802a390:	4620      	mov	r0, r4
 802a392:	bd10      	pop	{r4, pc}

0802a394 <_ZN8touchgfx7Outline5resetEv>:
 802a394:	b510      	push	{r4, lr}
 802a396:	4604      	mov	r4, r0
 802a398:	f7f2 fe2a 	bl	801cff0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 802a39c:	60e0      	str	r0, [r4, #12]
 802a39e:	f7f2 fe2d 	bl	801cffc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802a3a2:	68e3      	ldr	r3, [r4, #12]
 802a3a4:	2200      	movs	r2, #0
 802a3a6:	08c0      	lsrs	r0, r0, #3
 802a3a8:	6123      	str	r3, [r4, #16]
 802a3aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a3ae:	6060      	str	r0, [r4, #4]
 802a3b0:	82a3      	strh	r3, [r4, #20]
 802a3b2:	82e3      	strh	r3, [r4, #22]
 802a3b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a3b6:	60a2      	str	r2, [r4, #8]
 802a3b8:	f023 0301 	bic.w	r3, r3, #1
 802a3bc:	8322      	strh	r2, [r4, #24]
 802a3be:	8362      	strh	r2, [r4, #26]
 802a3c0:	f043 0302 	orr.w	r3, r3, #2
 802a3c4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a3c8:	63e3      	str	r3, [r4, #60]	; 0x3c
 802a3ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802a3ce:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 802a3d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802a3d6:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802a3da:	bd10      	pop	{r4, pc}

0802a3dc <_ZN8touchgfx7OutlineC1Ev>:
 802a3dc:	4b0f      	ldr	r3, [pc, #60]	; (802a41c <_ZN8touchgfx7OutlineC1Ev+0x40>)
 802a3de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802a3e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802a3e6:	b510      	push	{r4, lr}
 802a3e8:	6003      	str	r3, [r0, #0]
 802a3ea:	2300      	movs	r3, #0
 802a3ec:	4604      	mov	r4, r0
 802a3ee:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 802a3f2:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802a3f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a3fa:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802a3fe:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802a402:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 802a406:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 802a40a:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 802a40e:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 802a412:	f7ff ffbf 	bl	802a394 <_ZN8touchgfx7Outline5resetEv>
 802a416:	4620      	mov	r0, r4
 802a418:	bd10      	pop	{r4, pc}
 802a41a:	bf00      	nop
 802a41c:	08031b8c 	.word	0x08031b8c

0802a420 <_ZN8touchgfx7Outline10renderLineEiiii>:
 802a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a424:	b095      	sub	sp, #84	; 0x54
 802a426:	4604      	mov	r4, r0
 802a428:	1155      	asrs	r5, r2, #5
 802a42a:	f002 061f 	and.w	r6, r2, #31
 802a42e:	981e      	ldr	r0, [sp, #120]	; 0x78
 802a430:	1157      	asrs	r7, r2, #5
 802a432:	9304      	str	r3, [sp, #16]
 802a434:	1153      	asrs	r3, r2, #5
 802a436:	9300      	str	r3, [sp, #0]
 802a438:	1143      	asrs	r3, r0, #5
 802a43a:	930c      	str	r3, [sp, #48]	; 0x30
 802a43c:	f000 031f 	and.w	r3, r0, #31
 802a440:	9303      	str	r3, [sp, #12]
 802a442:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802a444:	42ab      	cmp	r3, r5
 802a446:	bfc8      	it	gt
 802a448:	462b      	movgt	r3, r5
 802a44a:	ea4f 1562 	mov.w	r5, r2, asr #5
 802a44e:	bfc8      	it	gt
 802a450:	6323      	strgt	r3, [r4, #48]	; 0x30
 802a452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802a454:	42ab      	cmp	r3, r5
 802a456:	bfd8      	it	le
 802a458:	462b      	movle	r3, r5
 802a45a:	ea4f 1560 	mov.w	r5, r0, asr #5
 802a45e:	bfdc      	itt	le
 802a460:	3301      	addle	r3, #1
 802a462:	63a3      	strle	r3, [r4, #56]	; 0x38
 802a464:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802a466:	42ab      	cmp	r3, r5
 802a468:	bfc8      	it	gt
 802a46a:	462b      	movgt	r3, r5
 802a46c:	ea4f 1560 	mov.w	r5, r0, asr #5
 802a470:	bfc8      	it	gt
 802a472:	6323      	strgt	r3, [r4, #48]	; 0x30
 802a474:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802a476:	42ab      	cmp	r3, r5
 802a478:	bfd8      	it	le
 802a47a:	462b      	movle	r3, r5
 802a47c:	ea4f 1561 	mov.w	r5, r1, asr #5
 802a480:	bfdc      	itt	le
 802a482:	3301      	addle	r3, #1
 802a484:	63a3      	strle	r3, [r4, #56]	; 0x38
 802a486:	9b04      	ldr	r3, [sp, #16]
 802a488:	eba3 0a01 	sub.w	sl, r3, r1
 802a48c:	1143      	asrs	r3, r0, #5
 802a48e:	429f      	cmp	r7, r3
 802a490:	f040 811d 	bne.w	802a6ce <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 802a494:	9b04      	ldr	r3, [sp, #16]
 802a496:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802a49a:	9b03      	ldr	r3, [sp, #12]
 802a49c:	429e      	cmp	r6, r3
 802a49e:	d131      	bne.n	802a504 <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 802a4a0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a4a4:	fa0f fb8b 	sxth.w	fp, fp
 802a4a8:	f9bd 2000 	ldrsh.w	r2, [sp]
 802a4ac:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a4b0:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 802a4b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a4b8:	4281      	cmp	r1, r0
 802a4ba:	f000 80e6 	beq.w	802a68a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802a4be:	8b60      	ldrh	r0, [r4, #26]
 802a4c0:	8b21      	ldrh	r1, [r4, #24]
 802a4c2:	4301      	orrs	r1, r0
 802a4c4:	d00b      	beq.n	802a4de <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802a4c6:	2b00      	cmp	r3, #0
 802a4c8:	db09      	blt.n	802a4de <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802a4ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a4cc:	428b      	cmp	r3, r1
 802a4ce:	da06      	bge.n	802a4de <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802a4d0:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802a4d4:	4299      	cmp	r1, r3
 802a4d6:	d308      	bcc.n	802a4ea <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 802a4d8:	2301      	movs	r3, #1
 802a4da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a4de:	f8a4 b014 	strh.w	fp, [r4, #20]
 802a4e2:	2300      	movs	r3, #0
 802a4e4:	82e2      	strh	r2, [r4, #22]
 802a4e6:	8323      	strh	r3, [r4, #24]
 802a4e8:	e01f      	b.n	802a52a <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 802a4ea:	f104 0314 	add.w	r3, r4, #20
 802a4ee:	6925      	ldr	r5, [r4, #16]
 802a4f0:	cb03      	ldmia	r3!, {r0, r1}
 802a4f2:	6028      	str	r0, [r5, #0]
 802a4f4:	6069      	str	r1, [r5, #4]
 802a4f6:	6923      	ldr	r3, [r4, #16]
 802a4f8:	3308      	adds	r3, #8
 802a4fa:	6123      	str	r3, [r4, #16]
 802a4fc:	68a3      	ldr	r3, [r4, #8]
 802a4fe:	3301      	adds	r3, #1
 802a500:	60a3      	str	r3, [r4, #8]
 802a502:	e7ec      	b.n	802a4de <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 802a504:	9b04      	ldr	r3, [sp, #16]
 802a506:	45ab      	cmp	fp, r5
 802a508:	f001 011f 	and.w	r1, r1, #31
 802a50c:	8b20      	ldrh	r0, [r4, #24]
 802a50e:	f003 031f 	and.w	r3, r3, #31
 802a512:	8b62      	ldrh	r2, [r4, #26]
 802a514:	9305      	str	r3, [sp, #20]
 802a516:	9b03      	ldr	r3, [sp, #12]
 802a518:	eba3 0306 	sub.w	r3, r3, r6
 802a51c:	d107      	bne.n	802a52e <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 802a51e:	4418      	add	r0, r3
 802a520:	8320      	strh	r0, [r4, #24]
 802a522:	9805      	ldr	r0, [sp, #20]
 802a524:	4401      	add	r1, r0
 802a526:	fb03 2301 	mla	r3, r3, r1, r2
 802a52a:	8363      	strh	r3, [r4, #26]
 802a52c:	e0ad      	b.n	802a68a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802a52e:	f1ba 0f00 	cmp.w	sl, #0
 802a532:	db33      	blt.n	802a59c <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 802a534:	2701      	movs	r7, #1
 802a536:	f1c1 0c20 	rsb	ip, r1, #32
 802a53a:	9702      	str	r7, [sp, #8]
 802a53c:	2720      	movs	r7, #32
 802a53e:	fb03 f30c 	mul.w	r3, r3, ip
 802a542:	9701      	str	r7, [sp, #4]
 802a544:	9f01      	ldr	r7, [sp, #4]
 802a546:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802a54a:	4439      	add	r1, r7
 802a54c:	fb93 fcfa 	sdiv	ip, r3, sl
 802a550:	fb0a 331c 	mls	r3, sl, ip, r3
 802a554:	2b00      	cmp	r3, #0
 802a556:	bfbc      	itt	lt
 802a558:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802a55c:	4453      	addlt	r3, sl
 802a55e:	fb0c 2101 	mla	r1, ip, r1, r2
 802a562:	9a02      	ldr	r2, [sp, #8]
 802a564:	4460      	add	r0, ip
 802a566:	4415      	add	r5, r2
 802a568:	f9bd 2000 	ldrsh.w	r2, [sp]
 802a56c:	b200      	sxth	r0, r0
 802a56e:	0417      	lsls	r7, r2, #16
 802a570:	9200      	str	r2, [sp, #0]
 802a572:	fa0f fe85 	sxth.w	lr, r5
 802a576:	8320      	strh	r0, [r4, #24]
 802a578:	9704      	str	r7, [sp, #16]
 802a57a:	b209      	sxth	r1, r1
 802a57c:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 802a580:	9a04      	ldr	r2, [sp, #16]
 802a582:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 802a586:	8361      	strh	r1, [r4, #26]
 802a588:	eb0e 0902 	add.w	r9, lr, r2
 802a58c:	454f      	cmp	r7, r9
 802a58e:	d10d      	bne.n	802a5ac <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 802a590:	4ba0      	ldr	r3, [pc, #640]	; (802a814 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 802a592:	2177      	movs	r1, #119	; 0x77
 802a594:	4aa0      	ldr	r2, [pc, #640]	; (802a818 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 802a596:	48a1      	ldr	r0, [pc, #644]	; (802a81c <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 802a598:	f001 f966 	bl	802b868 <__assert_func>
 802a59c:	f04f 37ff 	mov.w	r7, #4294967295
 802a5a0:	434b      	muls	r3, r1
 802a5a2:	f1ca 0a00 	rsb	sl, sl, #0
 802a5a6:	9702      	str	r7, [sp, #8]
 802a5a8:	2700      	movs	r7, #0
 802a5aa:	e7ca      	b.n	802a542 <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 802a5ac:	ea50 0201 	orrs.w	r2, r0, r1
 802a5b0:	d00c      	beq.n	802a5cc <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 802a5b2:	f1b8 0f00 	cmp.w	r8, #0
 802a5b6:	db09      	blt.n	802a5cc <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 802a5b8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a5ba:	4588      	cmp	r8, r1
 802a5bc:	da06      	bge.n	802a5cc <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 802a5be:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a5c2:	4288      	cmp	r0, r1
 802a5c4:	d364      	bcc.n	802a690 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 802a5c6:	2101      	movs	r1, #1
 802a5c8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a5cc:	2100      	movs	r1, #0
 802a5ce:	9a00      	ldr	r2, [sp, #0]
 802a5d0:	45ab      	cmp	fp, r5
 802a5d2:	f8a4 e014 	strh.w	lr, [r4, #20]
 802a5d6:	82e2      	strh	r2, [r4, #22]
 802a5d8:	4466      	add	r6, ip
 802a5da:	8321      	strh	r1, [r4, #24]
 802a5dc:	8361      	strh	r1, [r4, #26]
 802a5de:	d04b      	beq.n	802a678 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 802a5e0:	9a03      	ldr	r2, [sp, #12]
 802a5e2:	eba3 030a 	sub.w	r3, r3, sl
 802a5e6:	f04f 0800 	mov.w	r8, #0
 802a5ea:	1b91      	subs	r1, r2, r6
 802a5ec:	448c      	add	ip, r1
 802a5ee:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802a5f2:	fb9c f7fa 	sdiv	r7, ip, sl
 802a5f6:	fb0a cc17 	mls	ip, sl, r7, ip
 802a5fa:	f1bc 0f00 	cmp.w	ip, #0
 802a5fe:	bfbc      	itt	lt
 802a600:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802a604:	44d4      	addlt	ip, sl
 802a606:	1c7a      	adds	r2, r7, #1
 802a608:	9207      	str	r2, [sp, #28]
 802a60a:	eb13 030c 	adds.w	r3, r3, ip
 802a60e:	9a02      	ldr	r2, [sp, #8]
 802a610:	bf54      	ite	pl
 802a612:	9807      	ldrpl	r0, [sp, #28]
 802a614:	4638      	movmi	r0, r7
 802a616:	4415      	add	r5, r2
 802a618:	9a04      	ldr	r2, [sp, #16]
 802a61a:	fa0f fe80 	sxth.w	lr, r0
 802a61e:	4406      	add	r6, r0
 802a620:	ea4f 1140 	mov.w	r1, r0, lsl #5
 802a624:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802a628:	fa0f f985 	sxth.w	r9, r5
 802a62c:	bf58      	it	pl
 802a62e:	eba3 030a 	subpl.w	r3, r3, sl
 802a632:	4410      	add	r0, r2
 802a634:	b209      	sxth	r1, r1
 802a636:	444a      	add	r2, r9
 802a638:	f8a4 e018 	strh.w	lr, [r4, #24]
 802a63c:	8361      	strh	r1, [r4, #26]
 802a63e:	4290      	cmp	r0, r2
 802a640:	d0a6      	beq.n	802a590 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802a642:	ea5e 0201 	orrs.w	r2, lr, r1
 802a646:	d00d      	beq.n	802a664 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 802a648:	9a00      	ldr	r2, [sp, #0]
 802a64a:	2a00      	cmp	r2, #0
 802a64c:	db0a      	blt.n	802a664 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 802a64e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a650:	428a      	cmp	r2, r1
 802a652:	da07      	bge.n	802a664 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 802a654:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a658:	4288      	cmp	r0, r1
 802a65a:	d329      	bcc.n	802a6b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 802a65c:	f04f 0201 	mov.w	r2, #1
 802a660:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a664:	9a00      	ldr	r2, [sp, #0]
 802a666:	45ab      	cmp	fp, r5
 802a668:	f8a4 9014 	strh.w	r9, [r4, #20]
 802a66c:	82e2      	strh	r2, [r4, #22]
 802a66e:	f8a4 8018 	strh.w	r8, [r4, #24]
 802a672:	f8a4 801a 	strh.w	r8, [r4, #26]
 802a676:	d1c8      	bne.n	802a60a <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 802a678:	9b03      	ldr	r3, [sp, #12]
 802a67a:	9a01      	ldr	r2, [sp, #4]
 802a67c:	1b9e      	subs	r6, r3, r6
 802a67e:	9b05      	ldr	r3, [sp, #20]
 802a680:	3320      	adds	r3, #32
 802a682:	8326      	strh	r6, [r4, #24]
 802a684:	1a9b      	subs	r3, r3, r2
 802a686:	435e      	muls	r6, r3
 802a688:	8366      	strh	r6, [r4, #26]
 802a68a:	b015      	add	sp, #84	; 0x54
 802a68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a690:	f104 0714 	add.w	r7, r4, #20
 802a694:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802a698:	cf03      	ldmia	r7!, {r0, r1}
 802a69a:	f8c8 0000 	str.w	r0, [r8]
 802a69e:	f8c8 1004 	str.w	r1, [r8, #4]
 802a6a2:	6921      	ldr	r1, [r4, #16]
 802a6a4:	3108      	adds	r1, #8
 802a6a6:	6121      	str	r1, [r4, #16]
 802a6a8:	68a1      	ldr	r1, [r4, #8]
 802a6aa:	3101      	adds	r1, #1
 802a6ac:	60a1      	str	r1, [r4, #8]
 802a6ae:	e78d      	b.n	802a5cc <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 802a6b0:	f104 0e14 	add.w	lr, r4, #20
 802a6b4:	6922      	ldr	r2, [r4, #16]
 802a6b6:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802a6ba:	9206      	str	r2, [sp, #24]
 802a6bc:	6010      	str	r0, [r2, #0]
 802a6be:	6051      	str	r1, [r2, #4]
 802a6c0:	6921      	ldr	r1, [r4, #16]
 802a6c2:	3108      	adds	r1, #8
 802a6c4:	6121      	str	r1, [r4, #16]
 802a6c6:	68a1      	ldr	r1, [r4, #8]
 802a6c8:	3101      	adds	r1, #1
 802a6ca:	60a1      	str	r1, [r4, #8]
 802a6cc:	e7ca      	b.n	802a664 <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 802a6ce:	eba0 0b02 	sub.w	fp, r0, r2
 802a6d2:	f1ba 0f00 	cmp.w	sl, #0
 802a6d6:	f040 80a3 	bne.w	802a820 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 802a6da:	f1bb 0f00 	cmp.w	fp, #0
 802a6de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802a6e2:	8b62      	ldrh	r2, [r4, #26]
 802a6e4:	b22d      	sxth	r5, r5
 802a6e6:	bfa8      	it	ge
 802a6e8:	f04f 0a20 	movge.w	sl, #32
 802a6ec:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 802a6f0:	8b21      	ldrh	r1, [r4, #24]
 802a6f2:	bfb8      	it	lt
 802a6f4:	f04f 39ff 	movlt.w	r9, #4294967295
 802a6f8:	ebaa 0606 	sub.w	r6, sl, r6
 802a6fc:	bfa8      	it	ge
 802a6fe:	f04f 0901 	movge.w	r9, #1
 802a702:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802a706:	4431      	add	r1, r6
 802a708:	fb06 2603 	mla	r6, r6, r3, r2
 802a70c:	9a00      	ldr	r2, [sp, #0]
 802a70e:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 802a712:	b209      	sxth	r1, r1
 802a714:	444a      	add	r2, r9
 802a716:	b236      	sxth	r6, r6
 802a718:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 802a71c:	8321      	strh	r1, [r4, #24]
 802a71e:	b217      	sxth	r7, r2
 802a720:	8366      	strh	r6, [r4, #26]
 802a722:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 802a726:	45f4      	cmp	ip, lr
 802a728:	f43f af32 	beq.w	802a590 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802a72c:	4331      	orrs	r1, r6
 802a72e:	d00b      	beq.n	802a748 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 802a730:	2800      	cmp	r0, #0
 802a732:	db09      	blt.n	802a748 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 802a734:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a736:	4288      	cmp	r0, r1
 802a738:	da06      	bge.n	802a748 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 802a73a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a73e:	4288      	cmp	r0, r1
 802a740:	d33b      	bcc.n	802a7ba <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 802a742:	2101      	movs	r1, #1
 802a744:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a748:	f1aa 0610 	sub.w	r6, sl, #16
 802a74c:	82e7      	strh	r7, [r4, #22]
 802a74e:	2700      	movs	r7, #0
 802a750:	82a5      	strh	r5, [r4, #20]
 802a752:	0076      	lsls	r6, r6, #1
 802a754:	8327      	strh	r7, [r4, #24]
 802a756:	fb06 fc03 	mul.w	ip, r6, r3
 802a75a:	b236      	sxth	r6, r6
 802a75c:	8367      	strh	r7, [r4, #26]
 802a75e:	fa0f fc8c 	sxth.w	ip, ip
 802a762:	ea46 010c 	orr.w	r1, r6, ip
 802a766:	9100      	str	r1, [sp, #0]
 802a768:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a76a:	428a      	cmp	r2, r1
 802a76c:	d046      	beq.n	802a7fc <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 802a76e:	444a      	add	r2, r9
 802a770:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802a774:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802a778:	fa0f f882 	sxth.w	r8, r2
 802a77c:	8326      	strh	r6, [r4, #24]
 802a77e:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802a782:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802a786:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 802a78a:	4570      	cmp	r0, lr
 802a78c:	f43f af00 	beq.w	802a590 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802a790:	9800      	ldr	r0, [sp, #0]
 802a792:	b160      	cbz	r0, 802a7ae <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802a794:	2900      	cmp	r1, #0
 802a796:	db0a      	blt.n	802a7ae <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802a798:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802a79a:	4281      	cmp	r1, r0
 802a79c:	da07      	bge.n	802a7ae <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802a79e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a7a2:	4288      	cmp	r0, r1
 802a7a4:	d319      	bcc.n	802a7da <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 802a7a6:	f04f 0101 	mov.w	r1, #1
 802a7aa:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a7ae:	82a5      	strh	r5, [r4, #20]
 802a7b0:	f8a4 8016 	strh.w	r8, [r4, #22]
 802a7b4:	8327      	strh	r7, [r4, #24]
 802a7b6:	8367      	strh	r7, [r4, #26]
 802a7b8:	e7d6      	b.n	802a768 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 802a7ba:	f104 0614 	add.w	r6, r4, #20
 802a7be:	f8d4 c010 	ldr.w	ip, [r4, #16]
 802a7c2:	ce03      	ldmia	r6!, {r0, r1}
 802a7c4:	f8cc 0000 	str.w	r0, [ip]
 802a7c8:	f8cc 1004 	str.w	r1, [ip, #4]
 802a7cc:	6921      	ldr	r1, [r4, #16]
 802a7ce:	3108      	adds	r1, #8
 802a7d0:	6121      	str	r1, [r4, #16]
 802a7d2:	68a1      	ldr	r1, [r4, #8]
 802a7d4:	3101      	adds	r1, #1
 802a7d6:	60a1      	str	r1, [r4, #8]
 802a7d8:	e7b6      	b.n	802a748 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 802a7da:	f104 0e14 	add.w	lr, r4, #20
 802a7de:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802a7e2:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802a7e6:	f8cb 0000 	str.w	r0, [fp]
 802a7ea:	f8cb 1004 	str.w	r1, [fp, #4]
 802a7ee:	6921      	ldr	r1, [r4, #16]
 802a7f0:	3108      	adds	r1, #8
 802a7f2:	6121      	str	r1, [r4, #16]
 802a7f4:	68a1      	ldr	r1, [r4, #8]
 802a7f6:	3101      	adds	r1, #1
 802a7f8:	60a1      	str	r1, [r4, #8]
 802a7fa:	e7d8      	b.n	802a7ae <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802a7fc:	9a03      	ldr	r2, [sp, #12]
 802a7fe:	8b61      	ldrh	r1, [r4, #26]
 802a800:	f1a2 0e20 	sub.w	lr, r2, #32
 802a804:	8b22      	ldrh	r2, [r4, #24]
 802a806:	44d6      	add	lr, sl
 802a808:	4472      	add	r2, lr
 802a80a:	fb0e 1303 	mla	r3, lr, r3, r1
 802a80e:	8322      	strh	r2, [r4, #24]
 802a810:	e68b      	b.n	802a52a <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 802a812:	bf00      	nop
 802a814:	08031b13 	.word	0x08031b13
 802a818:	08031b94 	.word	0x08031b94
 802a81c:	08031b44 	.word	0x08031b44
 802a820:	f1bb 0f00 	cmp.w	fp, #0
 802a824:	f2c0 8124 	blt.w	802aa70 <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 802a828:	2201      	movs	r2, #1
 802a82a:	f1c6 0320 	rsb	r3, r6, #32
 802a82e:	920b      	str	r2, [sp, #44]	; 0x2c
 802a830:	2220      	movs	r2, #32
 802a832:	fb0a f303 	mul.w	r3, sl, r3
 802a836:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802a83a:	9202      	str	r2, [sp, #8]
 802a83c:	fb93 fcfb 	sdiv	ip, r3, fp
 802a840:	fb0b 331c 	mls	r3, fp, ip, r3
 802a844:	2b00      	cmp	r3, #0
 802a846:	9308      	str	r3, [sp, #32]
 802a848:	bfbe      	ittt	lt
 802a84a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802a84e:	445b      	addlt	r3, fp
 802a850:	9308      	strlt	r3, [sp, #32]
 802a852:	eb0c 0301 	add.w	r3, ip, r1
 802a856:	9301      	str	r3, [sp, #4]
 802a858:	115b      	asrs	r3, r3, #5
 802a85a:	9305      	str	r3, [sp, #20]
 802a85c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 802a860:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 802a864:	461f      	mov	r7, r3
 802a866:	9b02      	ldr	r3, [sp, #8]
 802a868:	42b3      	cmp	r3, r6
 802a86a:	f040 8117 	bne.w	802aa9c <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 802a86e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802a872:	f9bd 3000 	ldrsh.w	r3, [sp]
 802a876:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802a87a:	42b9      	cmp	r1, r7
 802a87c:	d016      	beq.n	802a8ac <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 802a87e:	8b60      	ldrh	r0, [r4, #26]
 802a880:	8b21      	ldrh	r1, [r4, #24]
 802a882:	4301      	orrs	r1, r0
 802a884:	d00d      	beq.n	802a8a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802a886:	f1b8 0f00 	cmp.w	r8, #0
 802a88a:	db0a      	blt.n	802a8a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802a88c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a88e:	4541      	cmp	r1, r8
 802a890:	dd07      	ble.n	802a8a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802a892:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a896:	4288      	cmp	r0, r1
 802a898:	f0c0 80f3 	bcc.w	802aa82 <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 802a89c:	2101      	movs	r1, #1
 802a89e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a8a2:	82e3      	strh	r3, [r4, #22]
 802a8a4:	2300      	movs	r3, #0
 802a8a6:	82a2      	strh	r2, [r4, #20]
 802a8a8:	8323      	strh	r3, [r4, #24]
 802a8aa:	8363      	strh	r3, [r4, #26]
 802a8ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a8ae:	9a00      	ldr	r2, [sp, #0]
 802a8b0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a8b4:	441a      	add	r2, r3
 802a8b6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802a8ba:	4691      	mov	r9, r2
 802a8bc:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802a8c0:	fa0f f589 	sxth.w	r5, r9
 802a8c4:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802a8c8:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802a8cc:	4281      	cmp	r1, r0
 802a8ce:	d015      	beq.n	802a8fc <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 802a8d0:	8b60      	ldrh	r0, [r4, #26]
 802a8d2:	8b21      	ldrh	r1, [r4, #24]
 802a8d4:	4301      	orrs	r1, r0
 802a8d6:	d00c      	beq.n	802a8f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802a8d8:	2a00      	cmp	r2, #0
 802a8da:	db0a      	blt.n	802a8f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802a8dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a8de:	428a      	cmp	r2, r1
 802a8e0:	da07      	bge.n	802a8f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802a8e2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802a8e6:	4291      	cmp	r1, r2
 802a8e8:	f0c0 81ae 	bcc.w	802ac48 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 802a8ec:	2201      	movs	r2, #1
 802a8ee:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a8f2:	82a3      	strh	r3, [r4, #20]
 802a8f4:	2300      	movs	r3, #0
 802a8f6:	82e5      	strh	r5, [r4, #22]
 802a8f8:	8323      	strh	r3, [r4, #24]
 802a8fa:	8363      	strh	r3, [r4, #26]
 802a8fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a8fe:	454b      	cmp	r3, r9
 802a900:	f000 808a 	beq.w	802aa18 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 802a904:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802a908:	fb93 f2fb 	sdiv	r2, r3, fp
 802a90c:	fb0b 3312 	mls	r3, fp, r2, r3
 802a910:	9205      	str	r2, [sp, #20]
 802a912:	2b00      	cmp	r3, #0
 802a914:	9307      	str	r3, [sp, #28]
 802a916:	da04      	bge.n	802a922 <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 802a918:	1e53      	subs	r3, r2, #1
 802a91a:	9305      	str	r3, [sp, #20]
 802a91c:	9b07      	ldr	r3, [sp, #28]
 802a91e:	445b      	add	r3, fp
 802a920:	9307      	str	r3, [sp, #28]
 802a922:	9b08      	ldr	r3, [sp, #32]
 802a924:	f04f 0a00 	mov.w	sl, #0
 802a928:	eba3 030b 	sub.w	r3, r3, fp
 802a92c:	9308      	str	r3, [sp, #32]
 802a92e:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 802a932:	f1c3 0320 	rsb	r3, r3, #32
 802a936:	930a      	str	r3, [sp, #40]	; 0x28
 802a938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a93a:	9b02      	ldr	r3, [sp, #8]
 802a93c:	1a9b      	subs	r3, r3, r2
 802a93e:	9309      	str	r3, [sp, #36]	; 0x24
 802a940:	9902      	ldr	r1, [sp, #8]
 802a942:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802a946:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802a94a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802a94e:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 802a952:	189b      	adds	r3, r3, r2
 802a954:	9308      	str	r3, [sp, #32]
 802a956:	bf57      	itett	pl
 802a958:	eba3 030b 	subpl.w	r3, r3, fp
 802a95c:	9b05      	ldrmi	r3, [sp, #20]
 802a95e:	9308      	strpl	r3, [sp, #32]
 802a960:	9b05      	ldrpl	r3, [sp, #20]
 802a962:	bf58      	it	pl
 802a964:	3301      	addpl	r3, #1
 802a966:	9300      	str	r3, [sp, #0]
 802a968:	e9dd 2300 	ldrd	r2, r3, [sp]
 802a96c:	4413      	add	r3, r2
 802a96e:	9301      	str	r3, [sp, #4]
 802a970:	115b      	asrs	r3, r3, #5
 802a972:	9306      	str	r3, [sp, #24]
 802a974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a976:	428b      	cmp	r3, r1
 802a978:	f040 8180 	bne.w	802ac7c <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 802a97c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 802a980:	fa0f f389 	sxth.w	r3, r9
 802a984:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 802a988:	4541      	cmp	r1, r8
 802a98a:	d017      	beq.n	802a9bc <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802a98c:	8b60      	ldrh	r0, [r4, #26]
 802a98e:	8b21      	ldrh	r1, [r4, #24]
 802a990:	4301      	orrs	r1, r0
 802a992:	d00d      	beq.n	802a9b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802a994:	2e00      	cmp	r6, #0
 802a996:	db0b      	blt.n	802a9b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802a998:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a99a:	42b1      	cmp	r1, r6
 802a99c:	dd08      	ble.n	802a9b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802a99e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a9a2:	4288      	cmp	r0, r1
 802a9a4:	f0c0 815d 	bcc.w	802ac62 <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 802a9a8:	f04f 0101 	mov.w	r1, #1
 802a9ac:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a9b0:	82a2      	strh	r2, [r4, #20]
 802a9b2:	82e3      	strh	r3, [r4, #22]
 802a9b4:	f8a4 a018 	strh.w	sl, [r4, #24]
 802a9b8:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802a9bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a9be:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 802a9c2:	4499      	add	r9, r3
 802a9c4:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802a9c8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a9cc:	fa0f f589 	sxth.w	r5, r9
 802a9d0:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 802a9d4:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 802a9d8:	4281      	cmp	r1, r0
 802a9da:	f43f add9 	beq.w	802a590 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802a9de:	8b60      	ldrh	r0, [r4, #26]
 802a9e0:	8b21      	ldrh	r1, [r4, #24]
 802a9e2:	4301      	orrs	r1, r0
 802a9e4:	d00d      	beq.n	802aa02 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802a9e6:	2a00      	cmp	r2, #0
 802a9e8:	db0b      	blt.n	802aa02 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802a9ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a9ec:	428a      	cmp	r2, r1
 802a9ee:	da08      	bge.n	802aa02 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802a9f0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 802a9f4:	4291      	cmp	r1, r2
 802a9f6:	f0c0 8228 	bcc.w	802ae4a <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 802a9fa:	f04f 0201 	mov.w	r2, #1
 802a9fe:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802aa02:	82a3      	strh	r3, [r4, #20]
 802aa04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802aa06:	82e5      	strh	r5, [r4, #22]
 802aa08:	454b      	cmp	r3, r9
 802aa0a:	f8a4 a018 	strh.w	sl, [r4, #24]
 802aa0e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802aa12:	f8dd c004 	ldr.w	ip, [sp, #4]
 802aa16:	d193      	bne.n	802a940 <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 802aa18:	9b02      	ldr	r3, [sp, #8]
 802aa1a:	f1c3 0e20 	rsb	lr, r3, #32
 802aa1e:	9b04      	ldr	r3, [sp, #16]
 802aa20:	ea4f 1b63 	mov.w	fp, r3, asr #5
 802aa24:	9b03      	ldr	r3, [sp, #12]
 802aa26:	459e      	cmp	lr, r3
 802aa28:	f040 8229 	bne.w	802ae7e <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 802aa2c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802aa30:	fa0f f58b 	sxth.w	r5, fp
 802aa34:	fa0f f289 	sxth.w	r2, r9
 802aa38:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802aa3c:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 802aa40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802aa44:	4281      	cmp	r1, r0
 802aa46:	f43f ae20 	beq.w	802a68a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802aa4a:	8b60      	ldrh	r0, [r4, #26]
 802aa4c:	8b21      	ldrh	r1, [r4, #24]
 802aa4e:	4301      	orrs	r1, r0
 802aa50:	d00c      	beq.n	802aa6c <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802aa52:	2b00      	cmp	r3, #0
 802aa54:	db0a      	blt.n	802aa6c <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802aa56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802aa58:	428b      	cmp	r3, r1
 802aa5a:	da07      	bge.n	802aa6c <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802aa5c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802aa60:	4299      	cmp	r1, r3
 802aa62:	f0c0 81ff 	bcc.w	802ae64 <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 802aa66:	2301      	movs	r3, #1
 802aa68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802aa6c:	82a5      	strh	r5, [r4, #20]
 802aa6e:	e538      	b.n	802a4e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 802aa70:	f04f 32ff 	mov.w	r2, #4294967295
 802aa74:	fb0a f306 	mul.w	r3, sl, r6
 802aa78:	f1cb 0b00 	rsb	fp, fp, #0
 802aa7c:	920b      	str	r2, [sp, #44]	; 0x2c
 802aa7e:	2200      	movs	r2, #0
 802aa80:	e6d9      	b.n	802a836 <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 802aa82:	f104 0514 	add.w	r5, r4, #20
 802aa86:	6926      	ldr	r6, [r4, #16]
 802aa88:	cd03      	ldmia	r5!, {r0, r1}
 802aa8a:	6030      	str	r0, [r6, #0]
 802aa8c:	6071      	str	r1, [r6, #4]
 802aa8e:	6921      	ldr	r1, [r4, #16]
 802aa90:	3108      	adds	r1, #8
 802aa92:	6121      	str	r1, [r4, #16]
 802aa94:	68a1      	ldr	r1, [r4, #8]
 802aa96:	3101      	adds	r1, #1
 802aa98:	60a1      	str	r1, [r4, #8]
 802aa9a:	e702      	b.n	802a8a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 802aa9c:	9b01      	ldr	r3, [sp, #4]
 802aa9e:	f001 011f 	and.w	r1, r1, #31
 802aaa2:	8b20      	ldrh	r0, [r4, #24]
 802aaa4:	f003 031f 	and.w	r3, r3, #31
 802aaa8:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802aaac:	930d      	str	r3, [sp, #52]	; 0x34
 802aaae:	9b02      	ldr	r3, [sp, #8]
 802aab0:	1b9a      	subs	r2, r3, r6
 802aab2:	9b05      	ldr	r3, [sp, #20]
 802aab4:	42ab      	cmp	r3, r5
 802aab6:	d107      	bne.n	802aac8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 802aab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802aaba:	4410      	add	r0, r2
 802aabc:	4419      	add	r1, r3
 802aabe:	8320      	strh	r0, [r4, #24]
 802aac0:	fb02 9201 	mla	r2, r2, r1, r9
 802aac4:	8362      	strh	r2, [r4, #26]
 802aac6:	e6f1      	b.n	802a8ac <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 802aac8:	f1bc 0f00 	cmp.w	ip, #0
 802aacc:	f2c0 8093 	blt.w	802abf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 802aad0:	f1c1 0320 	rsb	r3, r1, #32
 802aad4:	435a      	muls	r2, r3
 802aad6:	2301      	movs	r3, #1
 802aad8:	9309      	str	r3, [sp, #36]	; 0x24
 802aada:	2320      	movs	r3, #32
 802aadc:	9307      	str	r3, [sp, #28]
 802aade:	9b07      	ldr	r3, [sp, #28]
 802aae0:	fb92 fefc 	sdiv	lr, r2, ip
 802aae4:	fb0c 221e 	mls	r2, ip, lr, r2
 802aae8:	4419      	add	r1, r3
 802aaea:	2a00      	cmp	r2, #0
 802aaec:	bfbc      	itt	lt
 802aaee:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802aaf2:	4462      	addlt	r2, ip
 802aaf4:	fb0e 9101 	mla	r1, lr, r1, r9
 802aaf8:	4470      	add	r0, lr
 802aafa:	b20b      	sxth	r3, r1
 802aafc:	9909      	ldr	r1, [sp, #36]	; 0x24
 802aafe:	b200      	sxth	r0, r0
 802ab00:	440d      	add	r5, r1
 802ab02:	f9bd 1000 	ldrsh.w	r1, [sp]
 802ab06:	8320      	strh	r0, [r4, #24]
 802ab08:	fa0f f985 	sxth.w	r9, r5
 802ab0c:	9106      	str	r1, [sp, #24]
 802ab0e:	0409      	lsls	r1, r1, #16
 802ab10:	8363      	strh	r3, [r4, #26]
 802ab12:	910a      	str	r1, [sp, #40]	; 0x28
 802ab14:	4449      	add	r1, r9
 802ab16:	42b9      	cmp	r1, r7
 802ab18:	f43f ad3a 	beq.w	802a590 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802ab1c:	4303      	orrs	r3, r0
 802ab1e:	d00c      	beq.n	802ab3a <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 802ab20:	f1b8 0f00 	cmp.w	r8, #0
 802ab24:	db09      	blt.n	802ab3a <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 802ab26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802ab28:	4543      	cmp	r3, r8
 802ab2a:	dd06      	ble.n	802ab3a <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 802ab2c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802ab30:	4299      	cmp	r1, r3
 802ab32:	d368      	bcc.n	802ac06 <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 802ab34:	2301      	movs	r3, #1
 802ab36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802ab3a:	9b06      	ldr	r3, [sp, #24]
 802ab3c:	4476      	add	r6, lr
 802ab3e:	f8a4 9014 	strh.w	r9, [r4, #20]
 802ab42:	82e3      	strh	r3, [r4, #22]
 802ab44:	2300      	movs	r3, #0
 802ab46:	8323      	strh	r3, [r4, #24]
 802ab48:	8363      	strh	r3, [r4, #26]
 802ab4a:	9b05      	ldr	r3, [sp, #20]
 802ab4c:	42ab      	cmp	r3, r5
 802ab4e:	d048      	beq.n	802abe2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 802ab50:	9b02      	ldr	r3, [sp, #8]
 802ab52:	eba2 020c 	sub.w	r2, r2, ip
 802ab56:	1b9b      	subs	r3, r3, r6
 802ab58:	4473      	add	r3, lr
 802ab5a:	015b      	lsls	r3, r3, #5
 802ab5c:	fb93 f8fc 	sdiv	r8, r3, ip
 802ab60:	fb0c 3318 	mls	r3, ip, r8, r3
 802ab64:	2b00      	cmp	r3, #0
 802ab66:	bfbc      	itt	lt
 802ab68:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802ab6c:	4463      	addlt	r3, ip
 802ab6e:	f108 0101 	add.w	r1, r8, #1
 802ab72:	910f      	str	r1, [sp, #60]	; 0x3c
 802ab74:	18d2      	adds	r2, r2, r3
 802ab76:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802ab78:	bf56      	itet	pl
 802ab7a:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 802ab7c:	4640      	movmi	r0, r8
 802ab7e:	eba2 020c 	subpl.w	r2, r2, ip
 802ab82:	fa0f fe80 	sxth.w	lr, r0
 802ab86:	4406      	add	r6, r0
 802ab88:	0141      	lsls	r1, r0, #5
 802ab8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ab8c:	f8a4 e018 	strh.w	lr, [r4, #24]
 802ab90:	4405      	add	r5, r0
 802ab92:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802ab96:	b209      	sxth	r1, r1
 802ab98:	fa0f f985 	sxth.w	r9, r5
 802ab9c:	4438      	add	r0, r7
 802ab9e:	8361      	strh	r1, [r4, #26]
 802aba0:	444f      	add	r7, r9
 802aba2:	42b8      	cmp	r0, r7
 802aba4:	f43f acf4 	beq.w	802a590 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802aba8:	ea5e 0101 	orrs.w	r1, lr, r1
 802abac:	d00e      	beq.n	802abcc <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802abae:	9906      	ldr	r1, [sp, #24]
 802abb0:	2900      	cmp	r1, #0
 802abb2:	db0b      	blt.n	802abcc <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802abb4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802abb6:	9806      	ldr	r0, [sp, #24]
 802abb8:	4288      	cmp	r0, r1
 802abba:	da07      	bge.n	802abcc <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802abbc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802abc0:	4288      	cmp	r0, r1
 802abc2:	d330      	bcc.n	802ac26 <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 802abc4:	f04f 0101 	mov.w	r1, #1
 802abc8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802abcc:	9906      	ldr	r1, [sp, #24]
 802abce:	f8a4 9014 	strh.w	r9, [r4, #20]
 802abd2:	82e1      	strh	r1, [r4, #22]
 802abd4:	f04f 0100 	mov.w	r1, #0
 802abd8:	8321      	strh	r1, [r4, #24]
 802abda:	8361      	strh	r1, [r4, #26]
 802abdc:	9905      	ldr	r1, [sp, #20]
 802abde:	42a9      	cmp	r1, r5
 802abe0:	d1c8      	bne.n	802ab74 <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 802abe2:	9b02      	ldr	r3, [sp, #8]
 802abe4:	990d      	ldr	r1, [sp, #52]	; 0x34
 802abe6:	1b9e      	subs	r6, r3, r6
 802abe8:	9b07      	ldr	r3, [sp, #28]
 802abea:	3120      	adds	r1, #32
 802abec:	8326      	strh	r6, [r4, #24]
 802abee:	1ac9      	subs	r1, r1, r3
 802abf0:	434e      	muls	r6, r1
 802abf2:	8366      	strh	r6, [r4, #26]
 802abf4:	e65a      	b.n	802a8ac <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 802abf6:	f04f 33ff 	mov.w	r3, #4294967295
 802abfa:	434a      	muls	r2, r1
 802abfc:	f1cc 0c00 	rsb	ip, ip, #0
 802ac00:	9309      	str	r3, [sp, #36]	; 0x24
 802ac02:	2300      	movs	r3, #0
 802ac04:	e76a      	b.n	802aadc <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 802ac06:	f104 0314 	add.w	r3, r4, #20
 802ac0a:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802ac0e:	cb03      	ldmia	r3!, {r0, r1}
 802ac10:	f8c8 0000 	str.w	r0, [r8]
 802ac14:	f8c8 1004 	str.w	r1, [r8, #4]
 802ac18:	6923      	ldr	r3, [r4, #16]
 802ac1a:	3308      	adds	r3, #8
 802ac1c:	6123      	str	r3, [r4, #16]
 802ac1e:	68a3      	ldr	r3, [r4, #8]
 802ac20:	3301      	adds	r3, #1
 802ac22:	60a3      	str	r3, [r4, #8]
 802ac24:	e789      	b.n	802ab3a <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 802ac26:	6921      	ldr	r1, [r4, #16]
 802ac28:	f104 0e14 	add.w	lr, r4, #20
 802ac2c:	910e      	str	r1, [sp, #56]	; 0x38
 802ac2e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802ac30:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802ac34:	6038      	str	r0, [r7, #0]
 802ac36:	4638      	mov	r0, r7
 802ac38:	6079      	str	r1, [r7, #4]
 802ac3a:	6921      	ldr	r1, [r4, #16]
 802ac3c:	3108      	adds	r1, #8
 802ac3e:	6121      	str	r1, [r4, #16]
 802ac40:	68a1      	ldr	r1, [r4, #8]
 802ac42:	3101      	adds	r1, #1
 802ac44:	60a1      	str	r1, [r4, #8]
 802ac46:	e7c1      	b.n	802abcc <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 802ac48:	f104 0214 	add.w	r2, r4, #20
 802ac4c:	6926      	ldr	r6, [r4, #16]
 802ac4e:	ca03      	ldmia	r2!, {r0, r1}
 802ac50:	6030      	str	r0, [r6, #0]
 802ac52:	6071      	str	r1, [r6, #4]
 802ac54:	6922      	ldr	r2, [r4, #16]
 802ac56:	3208      	adds	r2, #8
 802ac58:	6122      	str	r2, [r4, #16]
 802ac5a:	68a2      	ldr	r2, [r4, #8]
 802ac5c:	3201      	adds	r2, #1
 802ac5e:	60a2      	str	r2, [r4, #8]
 802ac60:	e647      	b.n	802a8f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 802ac62:	f104 0514 	add.w	r5, r4, #20
 802ac66:	6926      	ldr	r6, [r4, #16]
 802ac68:	cd03      	ldmia	r5!, {r0, r1}
 802ac6a:	6030      	str	r0, [r6, #0]
 802ac6c:	6071      	str	r1, [r6, #4]
 802ac6e:	6921      	ldr	r1, [r4, #16]
 802ac70:	3108      	adds	r1, #8
 802ac72:	6121      	str	r1, [r4, #16]
 802ac74:	68a1      	ldr	r1, [r4, #8]
 802ac76:	3101      	adds	r1, #1
 802ac78:	60a1      	str	r1, [r4, #8]
 802ac7a:	e699      	b.n	802a9b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 802ac7c:	9b01      	ldr	r3, [sp, #4]
 802ac7e:	ea4f 176c 	mov.w	r7, ip, asr #5
 802ac82:	8b20      	ldrh	r0, [r4, #24]
 802ac84:	f00c 0c1f 	and.w	ip, ip, #31
 802ac88:	f003 031f 	and.w	r3, r3, #31
 802ac8c:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 802ac90:	9310      	str	r3, [sp, #64]	; 0x40
 802ac92:	9b06      	ldr	r3, [sp, #24]
 802ac94:	429f      	cmp	r7, r3
 802ac96:	d10a      	bne.n	802acae <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 802ac98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ac9a:	4418      	add	r0, r3
 802ac9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802ac9e:	449c      	add	ip, r3
 802aca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aca2:	8320      	strh	r0, [r4, #24]
 802aca4:	fb03 ee0c 	mla	lr, r3, ip, lr
 802aca8:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802acac:	e686      	b.n	802a9bc <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802acae:	9b00      	ldr	r3, [sp, #0]
 802acb0:	2b00      	cmp	r3, #0
 802acb2:	f2c0 80a0 	blt.w	802adf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 802acb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 802acb8:	f1cc 0320 	rsb	r3, ip, #32
 802acbc:	434b      	muls	r3, r1
 802acbe:	2101      	movs	r1, #1
 802acc0:	910e      	str	r1, [sp, #56]	; 0x38
 802acc2:	2120      	movs	r1, #32
 802acc4:	9a00      	ldr	r2, [sp, #0]
 802acc6:	910d      	str	r1, [sp, #52]	; 0x34
 802acc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 802acca:	fb93 f5f2 	sdiv	r5, r3, r2
 802acce:	fb02 3315 	mls	r3, r2, r5, r3
 802acd2:	448c      	add	ip, r1
 802acd4:	2b00      	cmp	r3, #0
 802acd6:	bfbc      	itt	lt
 802acd8:	f105 35ff 	addlt.w	r5, r5, #4294967295
 802acdc:	189b      	addlt	r3, r3, r2
 802acde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802ace0:	fb05 ec0c 	mla	ip, r5, ip, lr
 802ace4:	4428      	add	r0, r5
 802ace6:	4417      	add	r7, r2
 802ace8:	fa0f f18c 	sxth.w	r1, ip
 802acec:	fa0f fc89 	sxth.w	ip, r9
 802acf0:	fa0f fe87 	sxth.w	lr, r7
 802acf4:	8361      	strh	r1, [r4, #26]
 802acf6:	ea4f 420c 	mov.w	r2, ip, lsl #16
 802acfa:	b200      	sxth	r0, r0
 802acfc:	920f      	str	r2, [sp, #60]	; 0x3c
 802acfe:	4472      	add	r2, lr
 802ad00:	8320      	strh	r0, [r4, #24]
 802ad02:	4542      	cmp	r2, r8
 802ad04:	f43f ac44 	beq.w	802a590 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802ad08:	ea50 0201 	orrs.w	r2, r0, r1
 802ad0c:	d00c      	beq.n	802ad28 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802ad0e:	2e00      	cmp	r6, #0
 802ad10:	db0a      	blt.n	802ad28 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802ad12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802ad14:	42b1      	cmp	r1, r6
 802ad16:	dd07      	ble.n	802ad28 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802ad18:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802ad1c:	4288      	cmp	r0, r1
 802ad1e:	d375      	bcc.n	802ae0c <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 802ad20:	f04f 0201 	mov.w	r2, #1
 802ad24:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802ad28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ad2a:	f8a4 e014 	strh.w	lr, [r4, #20]
 802ad2e:	1956      	adds	r6, r2, r5
 802ad30:	9a06      	ldr	r2, [sp, #24]
 802ad32:	f8a4 c016 	strh.w	ip, [r4, #22]
 802ad36:	42ba      	cmp	r2, r7
 802ad38:	f8a4 a018 	strh.w	sl, [r4, #24]
 802ad3c:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802ad40:	d04c      	beq.n	802addc <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 802ad42:	9a02      	ldr	r2, [sp, #8]
 802ad44:	1b91      	subs	r1, r2, r6
 802ad46:	9a00      	ldr	r2, [sp, #0]
 802ad48:	440d      	add	r5, r1
 802ad4a:	016d      	lsls	r5, r5, #5
 802ad4c:	fb95 fef2 	sdiv	lr, r5, r2
 802ad50:	fb02 551e 	mls	r5, r2, lr, r5
 802ad54:	2d00      	cmp	r5, #0
 802ad56:	bfbc      	itt	lt
 802ad58:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802ad5c:	18ad      	addlt	r5, r5, r2
 802ad5e:	9a00      	ldr	r2, [sp, #0]
 802ad60:	1a9b      	subs	r3, r3, r2
 802ad62:	f10e 0201 	add.w	r2, lr, #1
 802ad66:	9213      	str	r2, [sp, #76]	; 0x4c
 802ad68:	195b      	adds	r3, r3, r5
 802ad6a:	bf57      	itett	pl
 802ad6c:	9a00      	ldrpl	r2, [sp, #0]
 802ad6e:	4670      	movmi	r0, lr
 802ad70:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 802ad72:	1a9b      	subpl	r3, r3, r2
 802ad74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802ad76:	fa0f f880 	sxth.w	r8, r0
 802ad7a:	4406      	add	r6, r0
 802ad7c:	4417      	add	r7, r2
 802ad7e:	0141      	lsls	r1, r0, #5
 802ad80:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802ad84:	b23a      	sxth	r2, r7
 802ad86:	f8a4 8018 	strh.w	r8, [r4, #24]
 802ad8a:	b209      	sxth	r1, r1
 802ad8c:	9211      	str	r2, [sp, #68]	; 0x44
 802ad8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802ad90:	8361      	strh	r1, [r4, #26]
 802ad92:	1882      	adds	r2, r0, r2
 802ad94:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802ad96:	9212      	str	r2, [sp, #72]	; 0x48
 802ad98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802ad9a:	4402      	add	r2, r0
 802ad9c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802ad9e:	4290      	cmp	r0, r2
 802ada0:	f43f abf6 	beq.w	802a590 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802ada4:	ea58 0201 	orrs.w	r2, r8, r1
 802ada8:	d00d      	beq.n	802adc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802adaa:	f1bc 0f00 	cmp.w	ip, #0
 802adae:	db0a      	blt.n	802adc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802adb0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802adb2:	458c      	cmp	ip, r1
 802adb4:	da07      	bge.n	802adc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802adb6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802adba:	4288      	cmp	r0, r1
 802adbc:	d336      	bcc.n	802ae2c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 802adbe:	f04f 0201 	mov.w	r2, #1
 802adc2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802adc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802adc8:	f8a4 c016 	strh.w	ip, [r4, #22]
 802adcc:	82a2      	strh	r2, [r4, #20]
 802adce:	9a06      	ldr	r2, [sp, #24]
 802add0:	f8a4 a018 	strh.w	sl, [r4, #24]
 802add4:	42ba      	cmp	r2, r7
 802add6:	f8a4 a01a 	strh.w	sl, [r4, #26]
 802adda:	d1c5      	bne.n	802ad68 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 802addc:	9b02      	ldr	r3, [sp, #8]
 802adde:	1b9e      	subs	r6, r3, r6
 802ade0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802ade2:	f103 0c20 	add.w	ip, r3, #32
 802ade6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ade8:	8326      	strh	r6, [r4, #24]
 802adea:	ebac 0c03 	sub.w	ip, ip, r3
 802adee:	fb06 f60c 	mul.w	r6, r6, ip
 802adf2:	8366      	strh	r6, [r4, #26]
 802adf4:	e5e2      	b.n	802a9bc <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 802adf6:	9a00      	ldr	r2, [sp, #0]
 802adf8:	f04f 31ff 	mov.w	r1, #4294967295
 802adfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802adfe:	4252      	negs	r2, r2
 802ae00:	910e      	str	r1, [sp, #56]	; 0x38
 802ae02:	fb03 f30c 	mul.w	r3, r3, ip
 802ae06:	2100      	movs	r1, #0
 802ae08:	9200      	str	r2, [sp, #0]
 802ae0a:	e75b      	b.n	802acc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 802ae0c:	f104 0614 	add.w	r6, r4, #20
 802ae10:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802ae14:	ce03      	ldmia	r6!, {r0, r1}
 802ae16:	f8c8 0000 	str.w	r0, [r8]
 802ae1a:	f8c8 1004 	str.w	r1, [r8, #4]
 802ae1e:	6921      	ldr	r1, [r4, #16]
 802ae20:	3108      	adds	r1, #8
 802ae22:	6121      	str	r1, [r4, #16]
 802ae24:	68a1      	ldr	r1, [r4, #8]
 802ae26:	3101      	adds	r1, #1
 802ae28:	60a1      	str	r1, [r4, #8]
 802ae2a:	e77d      	b.n	802ad28 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802ae2c:	f104 0814 	add.w	r8, r4, #20
 802ae30:	6922      	ldr	r2, [r4, #16]
 802ae32:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802ae36:	9212      	str	r2, [sp, #72]	; 0x48
 802ae38:	6010      	str	r0, [r2, #0]
 802ae3a:	6051      	str	r1, [r2, #4]
 802ae3c:	6921      	ldr	r1, [r4, #16]
 802ae3e:	3108      	adds	r1, #8
 802ae40:	6121      	str	r1, [r4, #16]
 802ae42:	68a1      	ldr	r1, [r4, #8]
 802ae44:	3101      	adds	r1, #1
 802ae46:	60a1      	str	r1, [r4, #8]
 802ae48:	e7bd      	b.n	802adc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 802ae4a:	f104 0214 	add.w	r2, r4, #20
 802ae4e:	6926      	ldr	r6, [r4, #16]
 802ae50:	ca03      	ldmia	r2!, {r0, r1}
 802ae52:	6030      	str	r0, [r6, #0]
 802ae54:	6071      	str	r1, [r6, #4]
 802ae56:	6922      	ldr	r2, [r4, #16]
 802ae58:	3208      	adds	r2, #8
 802ae5a:	6122      	str	r2, [r4, #16]
 802ae5c:	68a2      	ldr	r2, [r4, #8]
 802ae5e:	3201      	adds	r2, #1
 802ae60:	60a2      	str	r2, [r4, #8]
 802ae62:	e5ce      	b.n	802aa02 <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 802ae64:	f104 0314 	add.w	r3, r4, #20
 802ae68:	6926      	ldr	r6, [r4, #16]
 802ae6a:	cb03      	ldmia	r3!, {r0, r1}
 802ae6c:	6030      	str	r0, [r6, #0]
 802ae6e:	6071      	str	r1, [r6, #4]
 802ae70:	6923      	ldr	r3, [r4, #16]
 802ae72:	3308      	adds	r3, #8
 802ae74:	6123      	str	r3, [r4, #16]
 802ae76:	68a3      	ldr	r3, [r4, #8]
 802ae78:	3301      	adds	r3, #1
 802ae7a:	60a3      	str	r3, [r4, #8]
 802ae7c:	e5f6      	b.n	802aa6c <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 802ae7e:	9b01      	ldr	r3, [sp, #4]
 802ae80:	8b20      	ldrh	r0, [r4, #24]
 802ae82:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802ae86:	f003 021f 	and.w	r2, r3, #31
 802ae8a:	9b04      	ldr	r3, [sp, #16]
 802ae8c:	45dc      	cmp	ip, fp
 802ae8e:	8b66      	ldrh	r6, [r4, #26]
 802ae90:	f003 031f 	and.w	r3, r3, #31
 802ae94:	9305      	str	r3, [sp, #20]
 802ae96:	9b03      	ldr	r3, [sp, #12]
 802ae98:	eba3 050e 	sub.w	r5, r3, lr
 802ae9c:	d108      	bne.n	802aeb0 <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 802ae9e:	9b05      	ldr	r3, [sp, #20]
 802aea0:	4428      	add	r0, r5
 802aea2:	441a      	add	r2, r3
 802aea4:	8320      	strh	r0, [r4, #24]
 802aea6:	fb05 6502 	mla	r5, r5, r2, r6
 802aeaa:	8365      	strh	r5, [r4, #26]
 802aeac:	f7ff bbed 	b.w	802a68a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802aeb0:	9b04      	ldr	r3, [sp, #16]
 802aeb2:	9901      	ldr	r1, [sp, #4]
 802aeb4:	1a5b      	subs	r3, r3, r1
 802aeb6:	9300      	str	r3, [sp, #0]
 802aeb8:	f100 809c 	bmi.w	802aff4 <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 802aebc:	f1c2 0120 	rsb	r1, r2, #32
 802aec0:	434d      	muls	r5, r1
 802aec2:	2101      	movs	r1, #1
 802aec4:	9102      	str	r1, [sp, #8]
 802aec6:	2120      	movs	r1, #32
 802aec8:	9b00      	ldr	r3, [sp, #0]
 802aeca:	9101      	str	r1, [sp, #4]
 802aecc:	9901      	ldr	r1, [sp, #4]
 802aece:	fb95 f7f3 	sdiv	r7, r5, r3
 802aed2:	fb03 5517 	mls	r5, r3, r7, r5
 802aed6:	440a      	add	r2, r1
 802aed8:	2d00      	cmp	r5, #0
 802aeda:	bfbc      	itt	lt
 802aedc:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802aee0:	18ed      	addlt	r5, r5, r3
 802aee2:	fb07 6202 	mla	r2, r7, r2, r6
 802aee6:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 802aeea:	4438      	add	r0, r7
 802aeec:	b211      	sxth	r1, r2
 802aeee:	9a02      	ldr	r2, [sp, #8]
 802aef0:	b200      	sxth	r0, r0
 802aef2:	4494      	add	ip, r2
 802aef4:	fa0f f289 	sxth.w	r2, r9
 802aef8:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802aefc:	0413      	lsls	r3, r2, #16
 802aefe:	8320      	strh	r0, [r4, #24]
 802af00:	fa0f f88c 	sxth.w	r8, ip
 802af04:	8361      	strh	r1, [r4, #26]
 802af06:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 802af0a:	9304      	str	r3, [sp, #16]
 802af0c:	eb08 0a03 	add.w	sl, r8, r3
 802af10:	45d1      	cmp	r9, sl
 802af12:	f43f ab3d 	beq.w	802a590 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802af16:	ea50 0301 	orrs.w	r3, r0, r1
 802af1a:	d00b      	beq.n	802af34 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 802af1c:	2e00      	cmp	r6, #0
 802af1e:	db09      	blt.n	802af34 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 802af20:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802af22:	428e      	cmp	r6, r1
 802af24:	da06      	bge.n	802af34 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 802af26:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802af2a:	4288      	cmp	r0, r1
 802af2c:	d36b      	bcc.n	802b006 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 802af2e:	2101      	movs	r1, #1
 802af30:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802af34:	2100      	movs	r1, #0
 802af36:	45e3      	cmp	fp, ip
 802af38:	f8a4 8014 	strh.w	r8, [r4, #20]
 802af3c:	44be      	add	lr, r7
 802af3e:	82e2      	strh	r2, [r4, #22]
 802af40:	8321      	strh	r1, [r4, #24]
 802af42:	8361      	strh	r1, [r4, #26]
 802af44:	d047      	beq.n	802afd6 <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 802af46:	9b03      	ldr	r3, [sp, #12]
 802af48:	f04f 0900 	mov.w	r9, #0
 802af4c:	eba3 060e 	sub.w	r6, r3, lr
 802af50:	9b00      	ldr	r3, [sp, #0]
 802af52:	443e      	add	r6, r7
 802af54:	0176      	lsls	r6, r6, #5
 802af56:	fb96 f7f3 	sdiv	r7, r6, r3
 802af5a:	fb03 6617 	mls	r6, r3, r7, r6
 802af5e:	428e      	cmp	r6, r1
 802af60:	bfbc      	itt	lt
 802af62:	f107 37ff 	addlt.w	r7, r7, #4294967295
 802af66:	18f6      	addlt	r6, r6, r3
 802af68:	9b00      	ldr	r3, [sp, #0]
 802af6a:	1aed      	subs	r5, r5, r3
 802af6c:	1c7b      	adds	r3, r7, #1
 802af6e:	9307      	str	r3, [sp, #28]
 802af70:	19ad      	adds	r5, r5, r6
 802af72:	bf57      	itett	pl
 802af74:	9b00      	ldrpl	r3, [sp, #0]
 802af76:	4638      	movmi	r0, r7
 802af78:	9807      	ldrpl	r0, [sp, #28]
 802af7a:	1aed      	subpl	r5, r5, r3
 802af7c:	9b02      	ldr	r3, [sp, #8]
 802af7e:	fa0f f880 	sxth.w	r8, r0
 802af82:	4486      	add	lr, r0
 802af84:	449c      	add	ip, r3
 802af86:	0141      	lsls	r1, r0, #5
 802af88:	9b04      	ldr	r3, [sp, #16]
 802af8a:	fa0f fa8c 	sxth.w	sl, ip
 802af8e:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 802af92:	b209      	sxth	r1, r1
 802af94:	f8a4 8018 	strh.w	r8, [r4, #24]
 802af98:	4418      	add	r0, r3
 802af9a:	4453      	add	r3, sl
 802af9c:	8361      	strh	r1, [r4, #26]
 802af9e:	4298      	cmp	r0, r3
 802afa0:	f43f aaf6 	beq.w	802a590 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 802afa4:	ea58 0301 	orrs.w	r3, r8, r1
 802afa8:	d00c      	beq.n	802afc4 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802afaa:	2a00      	cmp	r2, #0
 802afac:	db0a      	blt.n	802afc4 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802afae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802afb0:	428a      	cmp	r2, r1
 802afb2:	da07      	bge.n	802afc4 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 802afb4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802afb8:	4288      	cmp	r0, r1
 802afba:	d334      	bcc.n	802b026 <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 802afbc:	f04f 0301 	mov.w	r3, #1
 802afc0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802afc4:	45e3      	cmp	fp, ip
 802afc6:	f8a4 a014 	strh.w	sl, [r4, #20]
 802afca:	82e2      	strh	r2, [r4, #22]
 802afcc:	f8a4 9018 	strh.w	r9, [r4, #24]
 802afd0:	f8a4 901a 	strh.w	r9, [r4, #26]
 802afd4:	d1cc      	bne.n	802af70 <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 802afd6:	9b03      	ldr	r3, [sp, #12]
 802afd8:	9e05      	ldr	r6, [sp, #20]
 802afda:	eba3 0e0e 	sub.w	lr, r3, lr
 802afde:	9b01      	ldr	r3, [sp, #4]
 802afe0:	3620      	adds	r6, #32
 802afe2:	f8a4 e018 	strh.w	lr, [r4, #24]
 802afe6:	1af6      	subs	r6, r6, r3
 802afe8:	fb0e fe06 	mul.w	lr, lr, r6
 802afec:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802aff0:	f7ff bb4b 	b.w	802a68a <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 802aff4:	9b00      	ldr	r3, [sp, #0]
 802aff6:	f04f 31ff 	mov.w	r1, #4294967295
 802affa:	4355      	muls	r5, r2
 802affc:	425b      	negs	r3, r3
 802affe:	9102      	str	r1, [sp, #8]
 802b000:	2100      	movs	r1, #0
 802b002:	9300      	str	r3, [sp, #0]
 802b004:	e760      	b.n	802aec8 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 802b006:	f104 0614 	add.w	r6, r4, #20
 802b00a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802b00e:	ce03      	ldmia	r6!, {r0, r1}
 802b010:	f8c9 0000 	str.w	r0, [r9]
 802b014:	f8c9 1004 	str.w	r1, [r9, #4]
 802b018:	6921      	ldr	r1, [r4, #16]
 802b01a:	3108      	adds	r1, #8
 802b01c:	6121      	str	r1, [r4, #16]
 802b01e:	68a1      	ldr	r1, [r4, #8]
 802b020:	3101      	adds	r1, #1
 802b022:	60a1      	str	r1, [r4, #8]
 802b024:	e786      	b.n	802af34 <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 802b026:	f104 0814 	add.w	r8, r4, #20
 802b02a:	6923      	ldr	r3, [r4, #16]
 802b02c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802b030:	9306      	str	r3, [sp, #24]
 802b032:	6018      	str	r0, [r3, #0]
 802b034:	6059      	str	r1, [r3, #4]
 802b036:	6921      	ldr	r1, [r4, #16]
 802b038:	3108      	adds	r1, #8
 802b03a:	6121      	str	r1, [r4, #16]
 802b03c:	68a1      	ldr	r1, [r4, #8]
 802b03e:	3101      	adds	r1, #1
 802b040:	60a1      	str	r1, [r4, #8]
 802b042:	e7bf      	b.n	802afc4 <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

0802b044 <_ZN8touchgfx7Outline6lineToEii>:
 802b044:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b046:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b048:	4604      	mov	r4, r0
 802b04a:	460d      	mov	r5, r1
 802b04c:	4616      	mov	r6, r2
 802b04e:	079b      	lsls	r3, r3, #30
 802b050:	d526      	bpl.n	802b0a0 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802b052:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802b056:	ea85 0001 	eor.w	r0, r5, r1
 802b05a:	ea86 0302 	eor.w	r3, r6, r2
 802b05e:	4303      	orrs	r3, r0
 802b060:	d01e      	beq.n	802b0a0 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802b062:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802b064:	114b      	asrs	r3, r1, #5
 802b066:	9600      	str	r6, [sp, #0]
 802b068:	4283      	cmp	r3, r0
 802b06a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802b06c:	bfb8      	it	lt
 802b06e:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802b070:	3301      	adds	r3, #1
 802b072:	4283      	cmp	r3, r0
 802b074:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802b076:	bfc8      	it	gt
 802b078:	6363      	strgt	r3, [r4, #52]	; 0x34
 802b07a:	116b      	asrs	r3, r5, #5
 802b07c:	4283      	cmp	r3, r0
 802b07e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802b080:	bfb8      	it	lt
 802b082:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802b084:	3301      	adds	r3, #1
 802b086:	4283      	cmp	r3, r0
 802b088:	4620      	mov	r0, r4
 802b08a:	bfc8      	it	gt
 802b08c:	6363      	strgt	r3, [r4, #52]	; 0x34
 802b08e:	462b      	mov	r3, r5
 802b090:	f7ff f9c6 	bl	802a420 <_ZN8touchgfx7Outline10renderLineEiiii>
 802b094:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b096:	f043 0301 	orr.w	r3, r3, #1
 802b09a:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802b09e:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b0a0:	b002      	add	sp, #8
 802b0a2:	bd70      	pop	{r4, r5, r6, pc}

0802b0a4 <_ZN8touchgfx7Outline6moveToEii>:
 802b0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b0a6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b0a8:	4615      	mov	r5, r2
 802b0aa:	4604      	mov	r4, r0
 802b0ac:	460e      	mov	r6, r1
 802b0ae:	079a      	lsls	r2, r3, #30
 802b0b0:	d401      	bmi.n	802b0b6 <_ZN8touchgfx7Outline6moveToEii+0x12>
 802b0b2:	f7ff f96f 	bl	802a394 <_ZN8touchgfx7Outline5resetEv>
 802b0b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b0b8:	07db      	lsls	r3, r3, #31
 802b0ba:	d504      	bpl.n	802b0c6 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802b0bc:	4620      	mov	r0, r4
 802b0be:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802b0c2:	f7ff ffbf 	bl	802b044 <_ZN8touchgfx7Outline6lineToEii>
 802b0c6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802b0ca:	f346 1c4f 	sbfx	ip, r6, #5, #16
 802b0ce:	f345 174f 	sbfx	r7, r5, #5, #16
 802b0d2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802b0d6:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802b0da:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802b0de:	428a      	cmp	r2, r1
 802b0e0:	d015      	beq.n	802b10e <_ZN8touchgfx7Outline6moveToEii+0x6a>
 802b0e2:	8b61      	ldrh	r1, [r4, #26]
 802b0e4:	8b22      	ldrh	r2, [r4, #24]
 802b0e6:	430a      	orrs	r2, r1
 802b0e8:	d00b      	beq.n	802b102 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802b0ea:	2b00      	cmp	r3, #0
 802b0ec:	db09      	blt.n	802b102 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802b0ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802b0f0:	4293      	cmp	r3, r2
 802b0f2:	da06      	bge.n	802b102 <_ZN8touchgfx7Outline6moveToEii+0x5e>
 802b0f4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802b0f8:	429a      	cmp	r2, r3
 802b0fa:	d30d      	bcc.n	802b118 <_ZN8touchgfx7Outline6moveToEii+0x74>
 802b0fc:	2301      	movs	r3, #1
 802b0fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802b102:	2300      	movs	r3, #0
 802b104:	f8a4 c014 	strh.w	ip, [r4, #20]
 802b108:	82e7      	strh	r7, [r4, #22]
 802b10a:	8323      	strh	r3, [r4, #24]
 802b10c:	8363      	strh	r3, [r4, #26]
 802b10e:	61e6      	str	r6, [r4, #28]
 802b110:	62a5      	str	r5, [r4, #40]	; 0x28
 802b112:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802b116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b118:	f104 0314 	add.w	r3, r4, #20
 802b11c:	6922      	ldr	r2, [r4, #16]
 802b11e:	cb03      	ldmia	r3!, {r0, r1}
 802b120:	6010      	str	r0, [r2, #0]
 802b122:	6051      	str	r1, [r2, #4]
 802b124:	6923      	ldr	r3, [r4, #16]
 802b126:	3308      	adds	r3, #8
 802b128:	6123      	str	r3, [r4, #16]
 802b12a:	68a3      	ldr	r3, [r4, #8]
 802b12c:	3301      	adds	r3, #1
 802b12e:	60a3      	str	r3, [r4, #8]
 802b130:	e7e7      	b.n	802b102 <_ZN8touchgfx7Outline6moveToEii+0x5e>

0802b132 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802b132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b136:	b0d1      	sub	sp, #324	; 0x144
 802b138:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802b13c:	466c      	mov	r4, sp
 802b13e:	1a0d      	subs	r5, r1, r0
 802b140:	f100 0208 	add.w	r2, r0, #8
 802b144:	2d48      	cmp	r5, #72	; 0x48
 802b146:	f340 80ba 	ble.w	802b2be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802b14a:	112d      	asrs	r5, r5, #4
 802b14c:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802b150:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802b154:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802b158:	f9b0 8000 	ldrsh.w	r8, [r0]
 802b15c:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802b160:	681e      	ldr	r6, [r3, #0]
 802b162:	6006      	str	r6, [r0, #0]
 802b164:	685e      	ldr	r6, [r3, #4]
 802b166:	6046      	str	r6, [r0, #4]
 802b168:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802b16c:	f8a3 e002 	strh.w	lr, [r3, #2]
 802b170:	f8a3 c004 	strh.w	ip, [r3, #4]
 802b174:	80df      	strh	r7, [r3, #6]
 802b176:	f1a1 0308 	sub.w	r3, r1, #8
 802b17a:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802b17e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802b182:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802b186:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802b18a:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802b18e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802b192:	4565      	cmp	r5, ip
 802b194:	da0f      	bge.n	802b1b6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802b196:	681d      	ldr	r5, [r3, #0]
 802b198:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802b19c:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802b1a0:	6015      	str	r5, [r2, #0]
 802b1a2:	685d      	ldr	r5, [r3, #4]
 802b1a4:	6055      	str	r5, [r2, #4]
 802b1a6:	f821 7c08 	strh.w	r7, [r1, #-8]
 802b1aa:	f821 6c06 	strh.w	r6, [r1, #-6]
 802b1ae:	f821 ec04 	strh.w	lr, [r1, #-4]
 802b1b2:	f821 cc02 	strh.w	ip, [r1, #-2]
 802b1b6:	f9b0 7000 	ldrsh.w	r7, [r0]
 802b1ba:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802b1be:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 802b1c2:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802b1c6:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802b1ca:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802b1ce:	45ac      	cmp	ip, r5
 802b1d0:	da0d      	bge.n	802b1ee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802b1d2:	6815      	ldr	r5, [r2, #0]
 802b1d4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802b1d8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802b1dc:	6005      	str	r5, [r0, #0]
 802b1de:	6855      	ldr	r5, [r2, #4]
 802b1e0:	8107      	strh	r7, [r0, #8]
 802b1e2:	6045      	str	r5, [r0, #4]
 802b1e4:	8146      	strh	r6, [r0, #10]
 802b1e6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802b1ea:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802b1ee:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 802b1f2:	f9b0 7000 	ldrsh.w	r7, [r0]
 802b1f6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802b1fa:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802b1fe:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802b202:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802b206:	4565      	cmp	r5, ip
 802b208:	da0f      	bge.n	802b22a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802b20a:	681d      	ldr	r5, [r3, #0]
 802b20c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802b210:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802b214:	6005      	str	r5, [r0, #0]
 802b216:	685d      	ldr	r5, [r3, #4]
 802b218:	6045      	str	r5, [r0, #4]
 802b21a:	f821 7c08 	strh.w	r7, [r1, #-8]
 802b21e:	f821 6c06 	strh.w	r6, [r1, #-6]
 802b222:	f821 ec04 	strh.w	lr, [r1, #-4]
 802b226:	f821 cc02 	strh.w	ip, [r1, #-2]
 802b22a:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802b22e:	f102 0508 	add.w	r5, r2, #8
 802b232:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802b236:	f9b0 e000 	ldrsh.w	lr, [r0]
 802b23a:	462f      	mov	r7, r5
 802b23c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802b240:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802b244:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802b248:	4556      	cmp	r6, sl
 802b24a:	db18      	blt.n	802b27e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802b24c:	3b08      	subs	r3, #8
 802b24e:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802b252:	f9b3 6000 	ldrsh.w	r6, [r3]
 802b256:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802b25a:	45b2      	cmp	sl, r6
 802b25c:	dbf6      	blt.n	802b24c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802b25e:	42ab      	cmp	r3, r5
 802b260:	681e      	ldr	r6, [r3, #0]
 802b262:	d30e      	bcc.n	802b282 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802b264:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802b268:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802b26c:	602e      	str	r6, [r5, #0]
 802b26e:	685e      	ldr	r6, [r3, #4]
 802b270:	606e      	str	r6, [r5, #4]
 802b272:	f8a3 9000 	strh.w	r9, [r3]
 802b276:	f8a3 8002 	strh.w	r8, [r3, #2]
 802b27a:	809f      	strh	r7, [r3, #4]
 802b27c:	80da      	strh	r2, [r3, #6]
 802b27e:	462a      	mov	r2, r5
 802b280:	e7d3      	b.n	802b22a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802b282:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802b286:	6006      	str	r6, [r0, #0]
 802b288:	685e      	ldr	r6, [r3, #4]
 802b28a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802b28e:	6046      	str	r6, [r0, #4]
 802b290:	1a1e      	subs	r6, r3, r0
 802b292:	80da      	strh	r2, [r3, #6]
 802b294:	1b4a      	subs	r2, r1, r5
 802b296:	f8a3 e000 	strh.w	lr, [r3]
 802b29a:	10d2      	asrs	r2, r2, #3
 802b29c:	f8a3 c002 	strh.w	ip, [r3, #2]
 802b2a0:	f8a3 8004 	strh.w	r8, [r3, #4]
 802b2a4:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802b2a8:	bfb5      	itete	lt
 802b2aa:	e9c4 0300 	strdlt	r0, r3, [r4]
 802b2ae:	4607      	movge	r7, r0
 802b2b0:	460b      	movlt	r3, r1
 802b2b2:	e9c4 5100 	strdge	r5, r1, [r4]
 802b2b6:	4638      	mov	r0, r7
 802b2b8:	3408      	adds	r4, #8
 802b2ba:	4619      	mov	r1, r3
 802b2bc:	e73f      	b.n	802b13e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802b2be:	4291      	cmp	r1, r2
 802b2c0:	d925      	bls.n	802b30e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802b2c2:	f1a2 0310 	sub.w	r3, r2, #16
 802b2c6:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802b2ca:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802b2ce:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 802b2d2:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802b2d6:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802b2da:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802b2de:	42ae      	cmp	r6, r5
 802b2e0:	da13      	bge.n	802b30a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802b2e2:	461d      	mov	r5, r3
 802b2e4:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 802b2e8:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802b2ec:	3b08      	subs	r3, #8
 802b2ee:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802b2f2:	619e      	str	r6, [r3, #24]
 802b2f4:	42a8      	cmp	r0, r5
 802b2f6:	686e      	ldr	r6, [r5, #4]
 802b2f8:	f8a3 c010 	strh.w	ip, [r3, #16]
 802b2fc:	61de      	str	r6, [r3, #28]
 802b2fe:	825f      	strh	r7, [r3, #18]
 802b300:	f8a3 8014 	strh.w	r8, [r3, #20]
 802b304:	f8a3 e016 	strh.w	lr, [r3, #22]
 802b308:	d1dd      	bne.n	802b2c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802b30a:	3208      	adds	r2, #8
 802b30c:	e7d7      	b.n	802b2be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802b30e:	466b      	mov	r3, sp
 802b310:	429c      	cmp	r4, r3
 802b312:	d903      	bls.n	802b31c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 802b314:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802b318:	3c08      	subs	r4, #8
 802b31a:	e710      	b.n	802b13e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802b31c:	b051      	add	sp, #324	; 0x144
 802b31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b322 <_ZN8touchgfx7Outline9sortCellsEv>:
 802b322:	6881      	ldr	r1, [r0, #8]
 802b324:	b111      	cbz	r1, 802b32c <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802b326:	68c0      	ldr	r0, [r0, #12]
 802b328:	f7ff bf03 	b.w	802b132 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802b32c:	4770      	bx	lr

0802b32e <_ZN8touchgfx7Outline8getCellsEv>:
 802b32e:	b510      	push	{r4, lr}
 802b330:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b332:	4604      	mov	r4, r0
 802b334:	07da      	lsls	r2, r3, #31
 802b336:	d507      	bpl.n	802b348 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802b338:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802b33c:	f7ff fe82 	bl	802b044 <_ZN8touchgfx7Outline6lineToEii>
 802b340:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b342:	f023 0301 	bic.w	r3, r3, #1
 802b346:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b348:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b34a:	079b      	lsls	r3, r3, #30
 802b34c:	d51a      	bpl.n	802b384 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802b34e:	8b62      	ldrh	r2, [r4, #26]
 802b350:	8b23      	ldrh	r3, [r4, #24]
 802b352:	4313      	orrs	r3, r2
 802b354:	d00d      	beq.n	802b372 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b356:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802b35a:	2b00      	cmp	r3, #0
 802b35c:	db09      	blt.n	802b372 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b35e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802b360:	4293      	cmp	r3, r2
 802b362:	da06      	bge.n	802b372 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802b364:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802b368:	429a      	cmp	r2, r3
 802b36a:	d80d      	bhi.n	802b388 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802b36c:	2301      	movs	r3, #1
 802b36e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802b372:	68a0      	ldr	r0, [r4, #8]
 802b374:	b138      	cbz	r0, 802b386 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802b376:	4620      	mov	r0, r4
 802b378:	f7ff ffd3 	bl	802b322 <_ZN8touchgfx7Outline9sortCellsEv>
 802b37c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b37e:	f023 0302 	bic.w	r3, r3, #2
 802b382:	63e3      	str	r3, [r4, #60]	; 0x3c
 802b384:	68e0      	ldr	r0, [r4, #12]
 802b386:	bd10      	pop	{r4, pc}
 802b388:	f104 0314 	add.w	r3, r4, #20
 802b38c:	6922      	ldr	r2, [r4, #16]
 802b38e:	cb03      	ldmia	r3!, {r0, r1}
 802b390:	6010      	str	r0, [r2, #0]
 802b392:	6051      	str	r1, [r2, #4]
 802b394:	6923      	ldr	r3, [r4, #16]
 802b396:	3308      	adds	r3, #8
 802b398:	6123      	str	r3, [r4, #16]
 802b39a:	68a3      	ldr	r3, [r4, #8]
 802b39c:	3301      	adds	r3, #1
 802b39e:	60a3      	str	r3, [r4, #8]
 802b3a0:	e7e7      	b.n	802b372 <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802b3a2 <_ZN8touchgfx8ScanlineD1Ev>:
 802b3a2:	4770      	bx	lr

0802b3a4 <_ZN8touchgfx8ScanlineD0Ev>:
 802b3a4:	b510      	push	{r4, lr}
 802b3a6:	4604      	mov	r4, r0
 802b3a8:	2124      	movs	r1, #36	; 0x24
 802b3aa:	f000 f888 	bl	802b4be <_ZdlPvj>
 802b3ae:	4620      	mov	r0, r4
 802b3b0:	bd10      	pop	{r4, pc}

0802b3b2 <_ZN8touchgfx8Scanline5resetEv>:
 802b3b2:	b510      	push	{r4, lr}
 802b3b4:	4604      	mov	r4, r0
 802b3b6:	f7f1 fe09 	bl	801cfcc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802b3ba:	61a0      	str	r0, [r4, #24]
 802b3bc:	f7f1 fe0c 	bl	801cfd8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802b3c0:	61e0      	str	r0, [r4, #28]
 802b3c2:	f7f1 fe0f 	bl	801cfe4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802b3c6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802b3ca:	6220      	str	r0, [r4, #32]
 802b3cc:	6160      	str	r0, [r4, #20]
 802b3ce:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802b3d2:	69e3      	ldr	r3, [r4, #28]
 802b3d4:	6123      	str	r3, [r4, #16]
 802b3d6:	2300      	movs	r3, #0
 802b3d8:	60e3      	str	r3, [r4, #12]
 802b3da:	bd10      	pop	{r4, pc}

0802b3dc <_ZN8touchgfx8ScanlineC1Ev>:
 802b3dc:	4b09      	ldr	r3, [pc, #36]	; (802b404 <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 802b3de:	b510      	push	{r4, lr}
 802b3e0:	6003      	str	r3, [r0, #0]
 802b3e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802b3e6:	4604      	mov	r4, r0
 802b3e8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802b3ec:	2300      	movs	r3, #0
 802b3ee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802b3f2:	e9c0 3305 	strd	r3, r3, [r0, #20]
 802b3f6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 802b3fa:	f7ff ffda 	bl	802b3b2 <_ZN8touchgfx8Scanline5resetEv>
 802b3fe:	4620      	mov	r0, r4
 802b400:	bd10      	pop	{r4, pc}
 802b402:	bf00      	nop
 802b404:	08031bcc 	.word	0x08031bcc

0802b408 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802b408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b40c:	1e0c      	subs	r4, r1, #0
 802b40e:	4605      	mov	r5, r0
 802b410:	4617      	mov	r7, r2
 802b412:	461e      	mov	r6, r3
 802b414:	da03      	bge.n	802b41e <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802b416:	4426      	add	r6, r4
 802b418:	2e01      	cmp	r6, #1
 802b41a:	d421      	bmi.n	802b460 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802b41c:	2400      	movs	r4, #0
 802b41e:	f7f1 fdcf 	bl	801cfc0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802b422:	42a0      	cmp	r0, r4
 802b424:	dd1c      	ble.n	802b460 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802b426:	eb04 0806 	add.w	r8, r4, r6
 802b42a:	f7f1 fdc9 	bl	801cfc0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802b42e:	4580      	cmp	r8, r0
 802b430:	d902      	bls.n	802b438 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802b432:	f7f1 fdc5 	bl	801cfc0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802b436:	1b06      	subs	r6, r0, r4
 802b438:	69a8      	ldr	r0, [r5, #24]
 802b43a:	4632      	mov	r2, r6
 802b43c:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802b440:	4420      	add	r0, r4
 802b442:	f7f4 fb37 	bl	801fab4 <_ZN8touchgfx6memsetEPvhm>
 802b446:	686b      	ldr	r3, [r5, #4]
 802b448:	b2b2      	uxth	r2, r6
 802b44a:	3301      	adds	r3, #1
 802b44c:	42a3      	cmp	r3, r4
 802b44e:	696b      	ldr	r3, [r5, #20]
 802b450:	d108      	bne.n	802b464 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802b452:	8819      	ldrh	r1, [r3, #0]
 802b454:	440a      	add	r2, r1
 802b456:	801a      	strh	r2, [r3, #0]
 802b458:	3c01      	subs	r4, #1
 802b45a:	4434      	add	r4, r6
 802b45c:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802b460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b464:	1c99      	adds	r1, r3, #2
 802b466:	6169      	str	r1, [r5, #20]
 802b468:	805a      	strh	r2, [r3, #2]
 802b46a:	692b      	ldr	r3, [r5, #16]
 802b46c:	1c9a      	adds	r2, r3, #2
 802b46e:	612a      	str	r2, [r5, #16]
 802b470:	805c      	strh	r4, [r3, #2]
 802b472:	68eb      	ldr	r3, [r5, #12]
 802b474:	3301      	adds	r3, #1
 802b476:	60eb      	str	r3, [r5, #12]
 802b478:	e7ee      	b.n	802b458 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802b47a <_ZN8touchgfx15RenderingBufferD1Ev>:
 802b47a:	4770      	bx	lr

0802b47c <_ZN8touchgfx15RenderingBufferD0Ev>:
 802b47c:	b510      	push	{r4, lr}
 802b47e:	4604      	mov	r4, r0
 802b480:	2118      	movs	r1, #24
 802b482:	f000 f81c 	bl	802b4be <_ZdlPvj>
 802b486:	4620      	mov	r0, r4
 802b488:	bd10      	pop	{r4, pc}
	...

0802b48c <_ZN8touchgfx15RenderingBufferC1Ev>:
 802b48c:	4a04      	ldr	r2, [pc, #16]	; (802b4a0 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 802b48e:	6002      	str	r2, [r0, #0]
 802b490:	2200      	movs	r2, #0
 802b492:	6042      	str	r2, [r0, #4]
 802b494:	7202      	strb	r2, [r0, #8]
 802b496:	6142      	str	r2, [r0, #20]
 802b498:	e9c0 2203 	strd	r2, r2, [r0, #12]
 802b49c:	4770      	bx	lr
 802b49e:	bf00      	nop
 802b4a0:	08031bdc 	.word	0x08031bdc

0802b4a4 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802b4a4:	60c3      	str	r3, [r0, #12]
 802b4a6:	9b00      	ldr	r3, [sp, #0]
 802b4a8:	6041      	str	r1, [r0, #4]
 802b4aa:	6103      	str	r3, [r0, #16]
 802b4ac:	9b01      	ldr	r3, [sp, #4]
 802b4ae:	7202      	strb	r2, [r0, #8]
 802b4b0:	6143      	str	r3, [r0, #20]
 802b4b2:	4770      	bx	lr

0802b4b4 <__aeabi_atexit>:
 802b4b4:	460b      	mov	r3, r1
 802b4b6:	4601      	mov	r1, r0
 802b4b8:	4618      	mov	r0, r3
 802b4ba:	f000 b9f9 	b.w	802b8b0 <__cxa_atexit>

0802b4be <_ZdlPvj>:
 802b4be:	f000 b812 	b.w	802b4e6 <_ZdlPv>

0802b4c2 <__cxa_guard_acquire>:
 802b4c2:	6803      	ldr	r3, [r0, #0]
 802b4c4:	07db      	lsls	r3, r3, #31
 802b4c6:	d406      	bmi.n	802b4d6 <__cxa_guard_acquire+0x14>
 802b4c8:	7843      	ldrb	r3, [r0, #1]
 802b4ca:	b103      	cbz	r3, 802b4ce <__cxa_guard_acquire+0xc>
 802b4cc:	deff      	udf	#255	; 0xff
 802b4ce:	2301      	movs	r3, #1
 802b4d0:	7043      	strb	r3, [r0, #1]
 802b4d2:	4618      	mov	r0, r3
 802b4d4:	4770      	bx	lr
 802b4d6:	2000      	movs	r0, #0
 802b4d8:	4770      	bx	lr

0802b4da <__cxa_guard_release>:
 802b4da:	2301      	movs	r3, #1
 802b4dc:	6003      	str	r3, [r0, #0]
 802b4de:	4770      	bx	lr

0802b4e0 <__cxa_pure_virtual>:
 802b4e0:	b508      	push	{r3, lr}
 802b4e2:	f000 f80f 	bl	802b504 <_ZSt9terminatev>

0802b4e6 <_ZdlPv>:
 802b4e6:	f000 ba35 	b.w	802b954 <free>

0802b4ea <_ZN10__cxxabiv111__terminateEPFvvE>:
 802b4ea:	b508      	push	{r3, lr}
 802b4ec:	4780      	blx	r0
 802b4ee:	f000 f9b3 	bl	802b858 <abort>
	...

0802b4f4 <_ZSt13get_terminatev>:
 802b4f4:	4b02      	ldr	r3, [pc, #8]	; (802b500 <_ZSt13get_terminatev+0xc>)
 802b4f6:	6818      	ldr	r0, [r3, #0]
 802b4f8:	f3bf 8f5b 	dmb	ish
 802b4fc:	4770      	bx	lr
 802b4fe:	bf00      	nop
 802b500:	240000a4 	.word	0x240000a4

0802b504 <_ZSt9terminatev>:
 802b504:	b508      	push	{r3, lr}
 802b506:	f7ff fff5 	bl	802b4f4 <_ZSt13get_terminatev>
 802b50a:	f7ff ffee 	bl	802b4ea <_ZN10__cxxabiv111__terminateEPFvvE>

0802b50e <sinf_poly>:
 802b50e:	07cb      	lsls	r3, r1, #31
 802b510:	d412      	bmi.n	802b538 <sinf_poly+0x2a>
 802b512:	ee21 6b00 	vmul.f64	d6, d1, d0
 802b516:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 802b51a:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 802b51e:	eea5 7b01 	vfma.f64	d7, d5, d1
 802b522:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 802b526:	ee21 1b06 	vmul.f64	d1, d1, d6
 802b52a:	eea5 0b06 	vfma.f64	d0, d5, d6
 802b52e:	eea7 0b01 	vfma.f64	d0, d7, d1
 802b532:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802b536:	4770      	bx	lr
 802b538:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 802b53c:	ee21 6b01 	vmul.f64	d6, d1, d1
 802b540:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 802b544:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 802b548:	eea1 7b05 	vfma.f64	d7, d1, d5
 802b54c:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 802b550:	eea1 0b05 	vfma.f64	d0, d1, d5
 802b554:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 802b558:	ee21 1b06 	vmul.f64	d1, d1, d6
 802b55c:	eea6 0b05 	vfma.f64	d0, d6, d5
 802b560:	e7e5      	b.n	802b52e <sinf_poly+0x20>
 802b562:	0000      	movs	r0, r0
 802b564:	0000      	movs	r0, r0
	...

0802b568 <cosf>:
 802b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b56a:	ee10 4a10 	vmov	r4, s0
 802b56e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802b572:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 802b576:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802b57a:	d20c      	bcs.n	802b596 <cosf+0x2e>
 802b57c:	ee26 1b06 	vmul.f64	d1, d6, d6
 802b580:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 802b584:	d378      	bcc.n	802b678 <cosf+0x110>
 802b586:	eeb0 0b46 	vmov.f64	d0, d6
 802b58a:	483f      	ldr	r0, [pc, #252]	; (802b688 <cosf+0x120>)
 802b58c:	2101      	movs	r1, #1
 802b58e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802b592:	f7ff bfbc 	b.w	802b50e <sinf_poly>
 802b596:	f240 422e 	movw	r2, #1070	; 0x42e
 802b59a:	4293      	cmp	r3, r2
 802b59c:	d826      	bhi.n	802b5ec <cosf+0x84>
 802b59e:	4b3a      	ldr	r3, [pc, #232]	; (802b688 <cosf+0x120>)
 802b5a0:	ed93 7b08 	vldr	d7, [r3, #32]
 802b5a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 802b5a8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802b5ac:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802b5b0:	ee17 1a90 	vmov	r1, s15
 802b5b4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 802b5b8:	1609      	asrs	r1, r1, #24
 802b5ba:	ee07 1a90 	vmov	s15, r1
 802b5be:	f001 0203 	and.w	r2, r1, #3
 802b5c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802b5c6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802b5ca:	ed92 0b00 	vldr	d0, [r2]
 802b5ce:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 802b5d2:	f011 0f02 	tst.w	r1, #2
 802b5d6:	eea5 6b47 	vfms.f64	d6, d5, d7
 802b5da:	f081 0101 	eor.w	r1, r1, #1
 802b5de:	bf08      	it	eq
 802b5e0:	4618      	moveq	r0, r3
 802b5e2:	ee26 1b06 	vmul.f64	d1, d6, d6
 802b5e6:	ee20 0b06 	vmul.f64	d0, d0, d6
 802b5ea:	e7d0      	b.n	802b58e <cosf+0x26>
 802b5ec:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 802b5f0:	d23e      	bcs.n	802b670 <cosf+0x108>
 802b5f2:	4b26      	ldr	r3, [pc, #152]	; (802b68c <cosf+0x124>)
 802b5f4:	f3c4 6283 	ubfx	r2, r4, #26, #4
 802b5f8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 802b5fc:	f3c4 0116 	ubfx	r1, r4, #0, #23
 802b600:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 802b604:	6a06      	ldr	r6, [r0, #32]
 802b606:	6900      	ldr	r0, [r0, #16]
 802b608:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 802b60c:	40a9      	lsls	r1, r5
 802b60e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802b612:	fba1 6706 	umull	r6, r7, r1, r6
 802b616:	fb05 f301 	mul.w	r3, r5, r1
 802b61a:	463a      	mov	r2, r7
 802b61c:	fbe0 2301 	umlal	r2, r3, r0, r1
 802b620:	1c11      	adds	r1, r2, #0
 802b622:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 802b626:	2000      	movs	r0, #0
 802b628:	1a10      	subs	r0, r2, r0
 802b62a:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 802b62e:	eb63 0101 	sbc.w	r1, r3, r1
 802b632:	f7d5 f83b 	bl	80006ac <__aeabi_l2d>
 802b636:	0fb5      	lsrs	r5, r6, #30
 802b638:	4b13      	ldr	r3, [pc, #76]	; (802b688 <cosf+0x120>)
 802b63a:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802b63e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 802b680 <cosf+0x118>
 802b642:	ec41 0b17 	vmov	d7, r0, r1
 802b646:	f004 0203 	and.w	r2, r4, #3
 802b64a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802b64e:	ee27 0b00 	vmul.f64	d0, d7, d0
 802b652:	ed92 7b00 	vldr	d7, [r2]
 802b656:	ee20 1b00 	vmul.f64	d1, d0, d0
 802b65a:	f014 0f02 	tst.w	r4, #2
 802b65e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802b662:	f085 0101 	eor.w	r1, r5, #1
 802b666:	bf08      	it	eq
 802b668:	4618      	moveq	r0, r3
 802b66a:	ee27 0b00 	vmul.f64	d0, d7, d0
 802b66e:	e78e      	b.n	802b58e <cosf+0x26>
 802b670:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802b674:	f000 b817 	b.w	802b6a6 <__math_invalidf>
 802b678:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802b67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b67e:	bf00      	nop
 802b680:	54442d18 	.word	0x54442d18
 802b684:	3c1921fb 	.word	0x3c1921fb
 802b688:	08031c48 	.word	0x08031c48
 802b68c:	08031be4 	.word	0x08031be4

0802b690 <with_errnof>:
 802b690:	b513      	push	{r0, r1, r4, lr}
 802b692:	4604      	mov	r4, r0
 802b694:	ed8d 0a01 	vstr	s0, [sp, #4]
 802b698:	f000 f918 	bl	802b8cc <__errno>
 802b69c:	ed9d 0a01 	vldr	s0, [sp, #4]
 802b6a0:	6004      	str	r4, [r0, #0]
 802b6a2:	b002      	add	sp, #8
 802b6a4:	bd10      	pop	{r4, pc}

0802b6a6 <__math_invalidf>:
 802b6a6:	eef0 7a40 	vmov.f32	s15, s0
 802b6aa:	ee30 7a40 	vsub.f32	s14, s0, s0
 802b6ae:	eef4 7a67 	vcmp.f32	s15, s15
 802b6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802b6b6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 802b6ba:	d602      	bvs.n	802b6c2 <__math_invalidf+0x1c>
 802b6bc:	2021      	movs	r0, #33	; 0x21
 802b6be:	f7ff bfe7 	b.w	802b690 <with_errnof>
 802b6c2:	4770      	bx	lr

0802b6c4 <sinf_poly>:
 802b6c4:	07cb      	lsls	r3, r1, #31
 802b6c6:	d412      	bmi.n	802b6ee <sinf_poly+0x2a>
 802b6c8:	ee21 6b00 	vmul.f64	d6, d1, d0
 802b6cc:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 802b6d0:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 802b6d4:	eea5 7b01 	vfma.f64	d7, d5, d1
 802b6d8:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 802b6dc:	ee21 1b06 	vmul.f64	d1, d1, d6
 802b6e0:	eea5 0b06 	vfma.f64	d0, d5, d6
 802b6e4:	eea7 0b01 	vfma.f64	d0, d7, d1
 802b6e8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802b6ec:	4770      	bx	lr
 802b6ee:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 802b6f2:	ee21 6b01 	vmul.f64	d6, d1, d1
 802b6f6:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 802b6fa:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 802b6fe:	eea1 7b05 	vfma.f64	d7, d1, d5
 802b702:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 802b706:	eea1 0b05 	vfma.f64	d0, d1, d5
 802b70a:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 802b70e:	ee21 1b06 	vmul.f64	d1, d1, d6
 802b712:	eea6 0b05 	vfma.f64	d0, d6, d5
 802b716:	e7e5      	b.n	802b6e4 <sinf_poly+0x20>

0802b718 <sinf>:
 802b718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b71a:	ee10 4a10 	vmov	r4, s0
 802b71e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802b722:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 802b726:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802b72a:	eef0 7a40 	vmov.f32	s15, s0
 802b72e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 802b732:	d218      	bcs.n	802b766 <sinf+0x4e>
 802b734:	ee26 1b06 	vmul.f64	d1, d6, d6
 802b738:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 802b73c:	d20a      	bcs.n	802b754 <sinf+0x3c>
 802b73e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 802b742:	d103      	bne.n	802b74c <sinf+0x34>
 802b744:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 802b748:	ed8d 1a01 	vstr	s2, [sp, #4]
 802b74c:	eeb0 0a67 	vmov.f32	s0, s15
 802b750:	b003      	add	sp, #12
 802b752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b754:	483e      	ldr	r0, [pc, #248]	; (802b850 <sinf+0x138>)
 802b756:	eeb0 0b46 	vmov.f64	d0, d6
 802b75a:	2100      	movs	r1, #0
 802b75c:	b003      	add	sp, #12
 802b75e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802b762:	f7ff bfaf 	b.w	802b6c4 <sinf_poly>
 802b766:	f240 422e 	movw	r2, #1070	; 0x42e
 802b76a:	4293      	cmp	r3, r2
 802b76c:	d824      	bhi.n	802b7b8 <sinf+0xa0>
 802b76e:	4b38      	ldr	r3, [pc, #224]	; (802b850 <sinf+0x138>)
 802b770:	ed93 7b08 	vldr	d7, [r3, #32]
 802b774:	ee26 7b07 	vmul.f64	d7, d6, d7
 802b778:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802b77c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802b780:	ee17 1a90 	vmov	r1, s15
 802b784:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 802b788:	1609      	asrs	r1, r1, #24
 802b78a:	ee07 1a90 	vmov	s15, r1
 802b78e:	f001 0203 	and.w	r2, r1, #3
 802b792:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802b796:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802b79a:	ed92 0b00 	vldr	d0, [r2]
 802b79e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 802b7a2:	f011 0f02 	tst.w	r1, #2
 802b7a6:	eea5 6b47 	vfms.f64	d6, d5, d7
 802b7aa:	bf08      	it	eq
 802b7ac:	4618      	moveq	r0, r3
 802b7ae:	ee26 1b06 	vmul.f64	d1, d6, d6
 802b7b2:	ee20 0b06 	vmul.f64	d0, d0, d6
 802b7b6:	e7d1      	b.n	802b75c <sinf+0x44>
 802b7b8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 802b7bc:	d23d      	bcs.n	802b83a <sinf+0x122>
 802b7be:	4b25      	ldr	r3, [pc, #148]	; (802b854 <sinf+0x13c>)
 802b7c0:	f3c4 6283 	ubfx	r2, r4, #26, #4
 802b7c4:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 802b7c8:	f3c4 0116 	ubfx	r1, r4, #0, #23
 802b7cc:	6a06      	ldr	r6, [r0, #32]
 802b7ce:	6900      	ldr	r0, [r0, #16]
 802b7d0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 802b7d4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 802b7d8:	40a9      	lsls	r1, r5
 802b7da:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802b7de:	fba1 6706 	umull	r6, r7, r1, r6
 802b7e2:	fb05 f301 	mul.w	r3, r5, r1
 802b7e6:	463a      	mov	r2, r7
 802b7e8:	fbe0 2301 	umlal	r2, r3, r0, r1
 802b7ec:	1c11      	adds	r1, r2, #0
 802b7ee:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 802b7f2:	2000      	movs	r0, #0
 802b7f4:	1a10      	subs	r0, r2, r0
 802b7f6:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 802b7fa:	eb63 0101 	sbc.w	r1, r3, r1
 802b7fe:	f7d4 ff55 	bl	80006ac <__aeabi_l2d>
 802b802:	0fb5      	lsrs	r5, r6, #30
 802b804:	4a12      	ldr	r2, [pc, #72]	; (802b850 <sinf+0x138>)
 802b806:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 802b80a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 802b848 <sinf+0x130>
 802b80e:	ec41 0b17 	vmov	d7, r0, r1
 802b812:	f003 0103 	and.w	r1, r3, #3
 802b816:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 802b81a:	ee27 0b00 	vmul.f64	d0, d7, d0
 802b81e:	ed91 7b00 	vldr	d7, [r1]
 802b822:	ee20 1b00 	vmul.f64	d1, d0, d0
 802b826:	f013 0f02 	tst.w	r3, #2
 802b82a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 802b82e:	4629      	mov	r1, r5
 802b830:	bf08      	it	eq
 802b832:	4610      	moveq	r0, r2
 802b834:	ee27 0b00 	vmul.f64	d0, d7, d0
 802b838:	e790      	b.n	802b75c <sinf+0x44>
 802b83a:	b003      	add	sp, #12
 802b83c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802b840:	f7ff bf31 	b.w	802b6a6 <__math_invalidf>
 802b844:	f3af 8000 	nop.w
 802b848:	54442d18 	.word	0x54442d18
 802b84c:	3c1921fb 	.word	0x3c1921fb
 802b850:	08031c48 	.word	0x08031c48
 802b854:	08031be4 	.word	0x08031be4

0802b858 <abort>:
 802b858:	b508      	push	{r3, lr}
 802b85a:	2006      	movs	r0, #6
 802b85c:	f000 fc68 	bl	802c130 <raise>
 802b860:	2001      	movs	r0, #1
 802b862:	f7d8 faad 	bl	8003dc0 <_exit>
	...

0802b868 <__assert_func>:
 802b868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b86a:	4614      	mov	r4, r2
 802b86c:	461a      	mov	r2, r3
 802b86e:	4b09      	ldr	r3, [pc, #36]	; (802b894 <__assert_func+0x2c>)
 802b870:	681b      	ldr	r3, [r3, #0]
 802b872:	4605      	mov	r5, r0
 802b874:	68d8      	ldr	r0, [r3, #12]
 802b876:	b14c      	cbz	r4, 802b88c <__assert_func+0x24>
 802b878:	4b07      	ldr	r3, [pc, #28]	; (802b898 <__assert_func+0x30>)
 802b87a:	9100      	str	r1, [sp, #0]
 802b87c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802b880:	4906      	ldr	r1, [pc, #24]	; (802b89c <__assert_func+0x34>)
 802b882:	462b      	mov	r3, r5
 802b884:	f000 f828 	bl	802b8d8 <fiprintf>
 802b888:	f7ff ffe6 	bl	802b858 <abort>
 802b88c:	4b04      	ldr	r3, [pc, #16]	; (802b8a0 <__assert_func+0x38>)
 802b88e:	461c      	mov	r4, r3
 802b890:	e7f3      	b.n	802b87a <__assert_func+0x12>
 802b892:	bf00      	nop
 802b894:	240000a8 	.word	0x240000a8
 802b898:	08031d28 	.word	0x08031d28
 802b89c:	08031d35 	.word	0x08031d35
 802b8a0:	08031d63 	.word	0x08031d63

0802b8a4 <atexit>:
 802b8a4:	2300      	movs	r3, #0
 802b8a6:	4601      	mov	r1, r0
 802b8a8:	461a      	mov	r2, r3
 802b8aa:	4618      	mov	r0, r3
 802b8ac:	f000 bd1c 	b.w	802c2e8 <__register_exitproc>

0802b8b0 <__cxa_atexit>:
 802b8b0:	b510      	push	{r4, lr}
 802b8b2:	4c05      	ldr	r4, [pc, #20]	; (802b8c8 <__cxa_atexit+0x18>)
 802b8b4:	4613      	mov	r3, r2
 802b8b6:	b12c      	cbz	r4, 802b8c4 <__cxa_atexit+0x14>
 802b8b8:	460a      	mov	r2, r1
 802b8ba:	4601      	mov	r1, r0
 802b8bc:	2002      	movs	r0, #2
 802b8be:	f000 fd13 	bl	802c2e8 <__register_exitproc>
 802b8c2:	bd10      	pop	{r4, pc}
 802b8c4:	4620      	mov	r0, r4
 802b8c6:	e7fc      	b.n	802b8c2 <__cxa_atexit+0x12>
 802b8c8:	0802c2e9 	.word	0x0802c2e9

0802b8cc <__errno>:
 802b8cc:	4b01      	ldr	r3, [pc, #4]	; (802b8d4 <__errno+0x8>)
 802b8ce:	6818      	ldr	r0, [r3, #0]
 802b8d0:	4770      	bx	lr
 802b8d2:	bf00      	nop
 802b8d4:	240000a8 	.word	0x240000a8

0802b8d8 <fiprintf>:
 802b8d8:	b40e      	push	{r1, r2, r3}
 802b8da:	b503      	push	{r0, r1, lr}
 802b8dc:	4601      	mov	r1, r0
 802b8de:	ab03      	add	r3, sp, #12
 802b8e0:	4805      	ldr	r0, [pc, #20]	; (802b8f8 <fiprintf+0x20>)
 802b8e2:	f853 2b04 	ldr.w	r2, [r3], #4
 802b8e6:	6800      	ldr	r0, [r0, #0]
 802b8e8:	9301      	str	r3, [sp, #4]
 802b8ea:	f000 f925 	bl	802bb38 <_vfiprintf_r>
 802b8ee:	b002      	add	sp, #8
 802b8f0:	f85d eb04 	ldr.w	lr, [sp], #4
 802b8f4:	b003      	add	sp, #12
 802b8f6:	4770      	bx	lr
 802b8f8:	240000a8 	.word	0x240000a8

0802b8fc <__libc_init_array>:
 802b8fc:	b570      	push	{r4, r5, r6, lr}
 802b8fe:	4d0d      	ldr	r5, [pc, #52]	; (802b934 <__libc_init_array+0x38>)
 802b900:	4c0d      	ldr	r4, [pc, #52]	; (802b938 <__libc_init_array+0x3c>)
 802b902:	1b64      	subs	r4, r4, r5
 802b904:	10a4      	asrs	r4, r4, #2
 802b906:	2600      	movs	r6, #0
 802b908:	42a6      	cmp	r6, r4
 802b90a:	d109      	bne.n	802b920 <__libc_init_array+0x24>
 802b90c:	4d0b      	ldr	r5, [pc, #44]	; (802b93c <__libc_init_array+0x40>)
 802b90e:	4c0c      	ldr	r4, [pc, #48]	; (802b940 <__libc_init_array+0x44>)
 802b910:	f001 f824 	bl	802c95c <_init>
 802b914:	1b64      	subs	r4, r4, r5
 802b916:	10a4      	asrs	r4, r4, #2
 802b918:	2600      	movs	r6, #0
 802b91a:	42a6      	cmp	r6, r4
 802b91c:	d105      	bne.n	802b92a <__libc_init_array+0x2e>
 802b91e:	bd70      	pop	{r4, r5, r6, pc}
 802b920:	f855 3b04 	ldr.w	r3, [r5], #4
 802b924:	4798      	blx	r3
 802b926:	3601      	adds	r6, #1
 802b928:	e7ee      	b.n	802b908 <__libc_init_array+0xc>
 802b92a:	f855 3b04 	ldr.w	r3, [r5], #4
 802b92e:	4798      	blx	r3
 802b930:	3601      	adds	r6, #1
 802b932:	e7f2      	b.n	802b91a <__libc_init_array+0x1e>
 802b934:	08031e1c 	.word	0x08031e1c
 802b938:	08031e1c 	.word	0x08031e1c
 802b93c:	08031e1c 	.word	0x08031e1c
 802b940:	08031e30 	.word	0x08031e30

0802b944 <malloc>:
 802b944:	4b02      	ldr	r3, [pc, #8]	; (802b950 <malloc+0xc>)
 802b946:	4601      	mov	r1, r0
 802b948:	6818      	ldr	r0, [r3, #0]
 802b94a:	f000 b871 	b.w	802ba30 <_malloc_r>
 802b94e:	bf00      	nop
 802b950:	240000a8 	.word	0x240000a8

0802b954 <free>:
 802b954:	4b02      	ldr	r3, [pc, #8]	; (802b960 <free+0xc>)
 802b956:	4601      	mov	r1, r0
 802b958:	6818      	ldr	r0, [r3, #0]
 802b95a:	f000 b819 	b.w	802b990 <_free_r>
 802b95e:	bf00      	nop
 802b960:	240000a8 	.word	0x240000a8

0802b964 <memcpy>:
 802b964:	440a      	add	r2, r1
 802b966:	4291      	cmp	r1, r2
 802b968:	f100 33ff 	add.w	r3, r0, #4294967295
 802b96c:	d100      	bne.n	802b970 <memcpy+0xc>
 802b96e:	4770      	bx	lr
 802b970:	b510      	push	{r4, lr}
 802b972:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b976:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b97a:	4291      	cmp	r1, r2
 802b97c:	d1f9      	bne.n	802b972 <memcpy+0xe>
 802b97e:	bd10      	pop	{r4, pc}

0802b980 <memset>:
 802b980:	4402      	add	r2, r0
 802b982:	4603      	mov	r3, r0
 802b984:	4293      	cmp	r3, r2
 802b986:	d100      	bne.n	802b98a <memset+0xa>
 802b988:	4770      	bx	lr
 802b98a:	f803 1b01 	strb.w	r1, [r3], #1
 802b98e:	e7f9      	b.n	802b984 <memset+0x4>

0802b990 <_free_r>:
 802b990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802b992:	2900      	cmp	r1, #0
 802b994:	d048      	beq.n	802ba28 <_free_r+0x98>
 802b996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b99a:	9001      	str	r0, [sp, #4]
 802b99c:	2b00      	cmp	r3, #0
 802b99e:	f1a1 0404 	sub.w	r4, r1, #4
 802b9a2:	bfb8      	it	lt
 802b9a4:	18e4      	addlt	r4, r4, r3
 802b9a6:	f000 ff21 	bl	802c7ec <__malloc_lock>
 802b9aa:	4a20      	ldr	r2, [pc, #128]	; (802ba2c <_free_r+0x9c>)
 802b9ac:	9801      	ldr	r0, [sp, #4]
 802b9ae:	6813      	ldr	r3, [r2, #0]
 802b9b0:	4615      	mov	r5, r2
 802b9b2:	b933      	cbnz	r3, 802b9c2 <_free_r+0x32>
 802b9b4:	6063      	str	r3, [r4, #4]
 802b9b6:	6014      	str	r4, [r2, #0]
 802b9b8:	b003      	add	sp, #12
 802b9ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b9be:	f000 bf1b 	b.w	802c7f8 <__malloc_unlock>
 802b9c2:	42a3      	cmp	r3, r4
 802b9c4:	d90b      	bls.n	802b9de <_free_r+0x4e>
 802b9c6:	6821      	ldr	r1, [r4, #0]
 802b9c8:	1862      	adds	r2, r4, r1
 802b9ca:	4293      	cmp	r3, r2
 802b9cc:	bf04      	itt	eq
 802b9ce:	681a      	ldreq	r2, [r3, #0]
 802b9d0:	685b      	ldreq	r3, [r3, #4]
 802b9d2:	6063      	str	r3, [r4, #4]
 802b9d4:	bf04      	itt	eq
 802b9d6:	1852      	addeq	r2, r2, r1
 802b9d8:	6022      	streq	r2, [r4, #0]
 802b9da:	602c      	str	r4, [r5, #0]
 802b9dc:	e7ec      	b.n	802b9b8 <_free_r+0x28>
 802b9de:	461a      	mov	r2, r3
 802b9e0:	685b      	ldr	r3, [r3, #4]
 802b9e2:	b10b      	cbz	r3, 802b9e8 <_free_r+0x58>
 802b9e4:	42a3      	cmp	r3, r4
 802b9e6:	d9fa      	bls.n	802b9de <_free_r+0x4e>
 802b9e8:	6811      	ldr	r1, [r2, #0]
 802b9ea:	1855      	adds	r5, r2, r1
 802b9ec:	42a5      	cmp	r5, r4
 802b9ee:	d10b      	bne.n	802ba08 <_free_r+0x78>
 802b9f0:	6824      	ldr	r4, [r4, #0]
 802b9f2:	4421      	add	r1, r4
 802b9f4:	1854      	adds	r4, r2, r1
 802b9f6:	42a3      	cmp	r3, r4
 802b9f8:	6011      	str	r1, [r2, #0]
 802b9fa:	d1dd      	bne.n	802b9b8 <_free_r+0x28>
 802b9fc:	681c      	ldr	r4, [r3, #0]
 802b9fe:	685b      	ldr	r3, [r3, #4]
 802ba00:	6053      	str	r3, [r2, #4]
 802ba02:	4421      	add	r1, r4
 802ba04:	6011      	str	r1, [r2, #0]
 802ba06:	e7d7      	b.n	802b9b8 <_free_r+0x28>
 802ba08:	d902      	bls.n	802ba10 <_free_r+0x80>
 802ba0a:	230c      	movs	r3, #12
 802ba0c:	6003      	str	r3, [r0, #0]
 802ba0e:	e7d3      	b.n	802b9b8 <_free_r+0x28>
 802ba10:	6825      	ldr	r5, [r4, #0]
 802ba12:	1961      	adds	r1, r4, r5
 802ba14:	428b      	cmp	r3, r1
 802ba16:	bf04      	itt	eq
 802ba18:	6819      	ldreq	r1, [r3, #0]
 802ba1a:	685b      	ldreq	r3, [r3, #4]
 802ba1c:	6063      	str	r3, [r4, #4]
 802ba1e:	bf04      	itt	eq
 802ba20:	1949      	addeq	r1, r1, r5
 802ba22:	6021      	streq	r1, [r4, #0]
 802ba24:	6054      	str	r4, [r2, #4]
 802ba26:	e7c7      	b.n	802b9b8 <_free_r+0x28>
 802ba28:	b003      	add	sp, #12
 802ba2a:	bd30      	pop	{r4, r5, pc}
 802ba2c:	2400c9b8 	.word	0x2400c9b8

0802ba30 <_malloc_r>:
 802ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ba32:	1ccd      	adds	r5, r1, #3
 802ba34:	f025 0503 	bic.w	r5, r5, #3
 802ba38:	3508      	adds	r5, #8
 802ba3a:	2d0c      	cmp	r5, #12
 802ba3c:	bf38      	it	cc
 802ba3e:	250c      	movcc	r5, #12
 802ba40:	2d00      	cmp	r5, #0
 802ba42:	4606      	mov	r6, r0
 802ba44:	db01      	blt.n	802ba4a <_malloc_r+0x1a>
 802ba46:	42a9      	cmp	r1, r5
 802ba48:	d903      	bls.n	802ba52 <_malloc_r+0x22>
 802ba4a:	230c      	movs	r3, #12
 802ba4c:	6033      	str	r3, [r6, #0]
 802ba4e:	2000      	movs	r0, #0
 802ba50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ba52:	f000 fecb 	bl	802c7ec <__malloc_lock>
 802ba56:	4921      	ldr	r1, [pc, #132]	; (802badc <_malloc_r+0xac>)
 802ba58:	680a      	ldr	r2, [r1, #0]
 802ba5a:	4614      	mov	r4, r2
 802ba5c:	b99c      	cbnz	r4, 802ba86 <_malloc_r+0x56>
 802ba5e:	4f20      	ldr	r7, [pc, #128]	; (802bae0 <_malloc_r+0xb0>)
 802ba60:	683b      	ldr	r3, [r7, #0]
 802ba62:	b923      	cbnz	r3, 802ba6e <_malloc_r+0x3e>
 802ba64:	4621      	mov	r1, r4
 802ba66:	4630      	mov	r0, r6
 802ba68:	f000 fb2a 	bl	802c0c0 <_sbrk_r>
 802ba6c:	6038      	str	r0, [r7, #0]
 802ba6e:	4629      	mov	r1, r5
 802ba70:	4630      	mov	r0, r6
 802ba72:	f000 fb25 	bl	802c0c0 <_sbrk_r>
 802ba76:	1c43      	adds	r3, r0, #1
 802ba78:	d123      	bne.n	802bac2 <_malloc_r+0x92>
 802ba7a:	230c      	movs	r3, #12
 802ba7c:	6033      	str	r3, [r6, #0]
 802ba7e:	4630      	mov	r0, r6
 802ba80:	f000 feba 	bl	802c7f8 <__malloc_unlock>
 802ba84:	e7e3      	b.n	802ba4e <_malloc_r+0x1e>
 802ba86:	6823      	ldr	r3, [r4, #0]
 802ba88:	1b5b      	subs	r3, r3, r5
 802ba8a:	d417      	bmi.n	802babc <_malloc_r+0x8c>
 802ba8c:	2b0b      	cmp	r3, #11
 802ba8e:	d903      	bls.n	802ba98 <_malloc_r+0x68>
 802ba90:	6023      	str	r3, [r4, #0]
 802ba92:	441c      	add	r4, r3
 802ba94:	6025      	str	r5, [r4, #0]
 802ba96:	e004      	b.n	802baa2 <_malloc_r+0x72>
 802ba98:	6863      	ldr	r3, [r4, #4]
 802ba9a:	42a2      	cmp	r2, r4
 802ba9c:	bf0c      	ite	eq
 802ba9e:	600b      	streq	r3, [r1, #0]
 802baa0:	6053      	strne	r3, [r2, #4]
 802baa2:	4630      	mov	r0, r6
 802baa4:	f000 fea8 	bl	802c7f8 <__malloc_unlock>
 802baa8:	f104 000b 	add.w	r0, r4, #11
 802baac:	1d23      	adds	r3, r4, #4
 802baae:	f020 0007 	bic.w	r0, r0, #7
 802bab2:	1ac2      	subs	r2, r0, r3
 802bab4:	d0cc      	beq.n	802ba50 <_malloc_r+0x20>
 802bab6:	1a1b      	subs	r3, r3, r0
 802bab8:	50a3      	str	r3, [r4, r2]
 802baba:	e7c9      	b.n	802ba50 <_malloc_r+0x20>
 802babc:	4622      	mov	r2, r4
 802babe:	6864      	ldr	r4, [r4, #4]
 802bac0:	e7cc      	b.n	802ba5c <_malloc_r+0x2c>
 802bac2:	1cc4      	adds	r4, r0, #3
 802bac4:	f024 0403 	bic.w	r4, r4, #3
 802bac8:	42a0      	cmp	r0, r4
 802baca:	d0e3      	beq.n	802ba94 <_malloc_r+0x64>
 802bacc:	1a21      	subs	r1, r4, r0
 802bace:	4630      	mov	r0, r6
 802bad0:	f000 faf6 	bl	802c0c0 <_sbrk_r>
 802bad4:	3001      	adds	r0, #1
 802bad6:	d1dd      	bne.n	802ba94 <_malloc_r+0x64>
 802bad8:	e7cf      	b.n	802ba7a <_malloc_r+0x4a>
 802bada:	bf00      	nop
 802badc:	2400c9b8 	.word	0x2400c9b8
 802bae0:	2400c9bc 	.word	0x2400c9bc

0802bae4 <__sfputc_r>:
 802bae4:	6893      	ldr	r3, [r2, #8]
 802bae6:	3b01      	subs	r3, #1
 802bae8:	2b00      	cmp	r3, #0
 802baea:	b410      	push	{r4}
 802baec:	6093      	str	r3, [r2, #8]
 802baee:	da08      	bge.n	802bb02 <__sfputc_r+0x1e>
 802baf0:	6994      	ldr	r4, [r2, #24]
 802baf2:	42a3      	cmp	r3, r4
 802baf4:	db01      	blt.n	802bafa <__sfputc_r+0x16>
 802baf6:	290a      	cmp	r1, #10
 802baf8:	d103      	bne.n	802bb02 <__sfputc_r+0x1e>
 802bafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 802bafe:	f000 bb33 	b.w	802c168 <__swbuf_r>
 802bb02:	6813      	ldr	r3, [r2, #0]
 802bb04:	1c58      	adds	r0, r3, #1
 802bb06:	6010      	str	r0, [r2, #0]
 802bb08:	7019      	strb	r1, [r3, #0]
 802bb0a:	4608      	mov	r0, r1
 802bb0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802bb10:	4770      	bx	lr

0802bb12 <__sfputs_r>:
 802bb12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bb14:	4606      	mov	r6, r0
 802bb16:	460f      	mov	r7, r1
 802bb18:	4614      	mov	r4, r2
 802bb1a:	18d5      	adds	r5, r2, r3
 802bb1c:	42ac      	cmp	r4, r5
 802bb1e:	d101      	bne.n	802bb24 <__sfputs_r+0x12>
 802bb20:	2000      	movs	r0, #0
 802bb22:	e007      	b.n	802bb34 <__sfputs_r+0x22>
 802bb24:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bb28:	463a      	mov	r2, r7
 802bb2a:	4630      	mov	r0, r6
 802bb2c:	f7ff ffda 	bl	802bae4 <__sfputc_r>
 802bb30:	1c43      	adds	r3, r0, #1
 802bb32:	d1f3      	bne.n	802bb1c <__sfputs_r+0xa>
 802bb34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802bb38 <_vfiprintf_r>:
 802bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bb3c:	460d      	mov	r5, r1
 802bb3e:	b09d      	sub	sp, #116	; 0x74
 802bb40:	4614      	mov	r4, r2
 802bb42:	4698      	mov	r8, r3
 802bb44:	4606      	mov	r6, r0
 802bb46:	b118      	cbz	r0, 802bb50 <_vfiprintf_r+0x18>
 802bb48:	6983      	ldr	r3, [r0, #24]
 802bb4a:	b90b      	cbnz	r3, 802bb50 <_vfiprintf_r+0x18>
 802bb4c:	f000 fd48 	bl	802c5e0 <__sinit>
 802bb50:	4b89      	ldr	r3, [pc, #548]	; (802bd78 <_vfiprintf_r+0x240>)
 802bb52:	429d      	cmp	r5, r3
 802bb54:	d11b      	bne.n	802bb8e <_vfiprintf_r+0x56>
 802bb56:	6875      	ldr	r5, [r6, #4]
 802bb58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802bb5a:	07d9      	lsls	r1, r3, #31
 802bb5c:	d405      	bmi.n	802bb6a <_vfiprintf_r+0x32>
 802bb5e:	89ab      	ldrh	r3, [r5, #12]
 802bb60:	059a      	lsls	r2, r3, #22
 802bb62:	d402      	bmi.n	802bb6a <_vfiprintf_r+0x32>
 802bb64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802bb66:	f000 fdd9 	bl	802c71c <__retarget_lock_acquire_recursive>
 802bb6a:	89ab      	ldrh	r3, [r5, #12]
 802bb6c:	071b      	lsls	r3, r3, #28
 802bb6e:	d501      	bpl.n	802bb74 <_vfiprintf_r+0x3c>
 802bb70:	692b      	ldr	r3, [r5, #16]
 802bb72:	b9eb      	cbnz	r3, 802bbb0 <_vfiprintf_r+0x78>
 802bb74:	4629      	mov	r1, r5
 802bb76:	4630      	mov	r0, r6
 802bb78:	f000 fb48 	bl	802c20c <__swsetup_r>
 802bb7c:	b1c0      	cbz	r0, 802bbb0 <_vfiprintf_r+0x78>
 802bb7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802bb80:	07dc      	lsls	r4, r3, #31
 802bb82:	d50e      	bpl.n	802bba2 <_vfiprintf_r+0x6a>
 802bb84:	f04f 30ff 	mov.w	r0, #4294967295
 802bb88:	b01d      	add	sp, #116	; 0x74
 802bb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb8e:	4b7b      	ldr	r3, [pc, #492]	; (802bd7c <_vfiprintf_r+0x244>)
 802bb90:	429d      	cmp	r5, r3
 802bb92:	d101      	bne.n	802bb98 <_vfiprintf_r+0x60>
 802bb94:	68b5      	ldr	r5, [r6, #8]
 802bb96:	e7df      	b.n	802bb58 <_vfiprintf_r+0x20>
 802bb98:	4b79      	ldr	r3, [pc, #484]	; (802bd80 <_vfiprintf_r+0x248>)
 802bb9a:	429d      	cmp	r5, r3
 802bb9c:	bf08      	it	eq
 802bb9e:	68f5      	ldreq	r5, [r6, #12]
 802bba0:	e7da      	b.n	802bb58 <_vfiprintf_r+0x20>
 802bba2:	89ab      	ldrh	r3, [r5, #12]
 802bba4:	0598      	lsls	r0, r3, #22
 802bba6:	d4ed      	bmi.n	802bb84 <_vfiprintf_r+0x4c>
 802bba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802bbaa:	f000 fdb9 	bl	802c720 <__retarget_lock_release_recursive>
 802bbae:	e7e9      	b.n	802bb84 <_vfiprintf_r+0x4c>
 802bbb0:	2300      	movs	r3, #0
 802bbb2:	9309      	str	r3, [sp, #36]	; 0x24
 802bbb4:	2320      	movs	r3, #32
 802bbb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802bbba:	f8cd 800c 	str.w	r8, [sp, #12]
 802bbbe:	2330      	movs	r3, #48	; 0x30
 802bbc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802bd84 <_vfiprintf_r+0x24c>
 802bbc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802bbc8:	f04f 0901 	mov.w	r9, #1
 802bbcc:	4623      	mov	r3, r4
 802bbce:	469a      	mov	sl, r3
 802bbd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bbd4:	b10a      	cbz	r2, 802bbda <_vfiprintf_r+0xa2>
 802bbd6:	2a25      	cmp	r2, #37	; 0x25
 802bbd8:	d1f9      	bne.n	802bbce <_vfiprintf_r+0x96>
 802bbda:	ebba 0b04 	subs.w	fp, sl, r4
 802bbde:	d00b      	beq.n	802bbf8 <_vfiprintf_r+0xc0>
 802bbe0:	465b      	mov	r3, fp
 802bbe2:	4622      	mov	r2, r4
 802bbe4:	4629      	mov	r1, r5
 802bbe6:	4630      	mov	r0, r6
 802bbe8:	f7ff ff93 	bl	802bb12 <__sfputs_r>
 802bbec:	3001      	adds	r0, #1
 802bbee:	f000 80aa 	beq.w	802bd46 <_vfiprintf_r+0x20e>
 802bbf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802bbf4:	445a      	add	r2, fp
 802bbf6:	9209      	str	r2, [sp, #36]	; 0x24
 802bbf8:	f89a 3000 	ldrb.w	r3, [sl]
 802bbfc:	2b00      	cmp	r3, #0
 802bbfe:	f000 80a2 	beq.w	802bd46 <_vfiprintf_r+0x20e>
 802bc02:	2300      	movs	r3, #0
 802bc04:	f04f 32ff 	mov.w	r2, #4294967295
 802bc08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bc0c:	f10a 0a01 	add.w	sl, sl, #1
 802bc10:	9304      	str	r3, [sp, #16]
 802bc12:	9307      	str	r3, [sp, #28]
 802bc14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802bc18:	931a      	str	r3, [sp, #104]	; 0x68
 802bc1a:	4654      	mov	r4, sl
 802bc1c:	2205      	movs	r2, #5
 802bc1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bc22:	4858      	ldr	r0, [pc, #352]	; (802bd84 <_vfiprintf_r+0x24c>)
 802bc24:	f7d4 fb64 	bl	80002f0 <memchr>
 802bc28:	9a04      	ldr	r2, [sp, #16]
 802bc2a:	b9d8      	cbnz	r0, 802bc64 <_vfiprintf_r+0x12c>
 802bc2c:	06d1      	lsls	r1, r2, #27
 802bc2e:	bf44      	itt	mi
 802bc30:	2320      	movmi	r3, #32
 802bc32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802bc36:	0713      	lsls	r3, r2, #28
 802bc38:	bf44      	itt	mi
 802bc3a:	232b      	movmi	r3, #43	; 0x2b
 802bc3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802bc40:	f89a 3000 	ldrb.w	r3, [sl]
 802bc44:	2b2a      	cmp	r3, #42	; 0x2a
 802bc46:	d015      	beq.n	802bc74 <_vfiprintf_r+0x13c>
 802bc48:	9a07      	ldr	r2, [sp, #28]
 802bc4a:	4654      	mov	r4, sl
 802bc4c:	2000      	movs	r0, #0
 802bc4e:	f04f 0c0a 	mov.w	ip, #10
 802bc52:	4621      	mov	r1, r4
 802bc54:	f811 3b01 	ldrb.w	r3, [r1], #1
 802bc58:	3b30      	subs	r3, #48	; 0x30
 802bc5a:	2b09      	cmp	r3, #9
 802bc5c:	d94e      	bls.n	802bcfc <_vfiprintf_r+0x1c4>
 802bc5e:	b1b0      	cbz	r0, 802bc8e <_vfiprintf_r+0x156>
 802bc60:	9207      	str	r2, [sp, #28]
 802bc62:	e014      	b.n	802bc8e <_vfiprintf_r+0x156>
 802bc64:	eba0 0308 	sub.w	r3, r0, r8
 802bc68:	fa09 f303 	lsl.w	r3, r9, r3
 802bc6c:	4313      	orrs	r3, r2
 802bc6e:	9304      	str	r3, [sp, #16]
 802bc70:	46a2      	mov	sl, r4
 802bc72:	e7d2      	b.n	802bc1a <_vfiprintf_r+0xe2>
 802bc74:	9b03      	ldr	r3, [sp, #12]
 802bc76:	1d19      	adds	r1, r3, #4
 802bc78:	681b      	ldr	r3, [r3, #0]
 802bc7a:	9103      	str	r1, [sp, #12]
 802bc7c:	2b00      	cmp	r3, #0
 802bc7e:	bfbb      	ittet	lt
 802bc80:	425b      	neglt	r3, r3
 802bc82:	f042 0202 	orrlt.w	r2, r2, #2
 802bc86:	9307      	strge	r3, [sp, #28]
 802bc88:	9307      	strlt	r3, [sp, #28]
 802bc8a:	bfb8      	it	lt
 802bc8c:	9204      	strlt	r2, [sp, #16]
 802bc8e:	7823      	ldrb	r3, [r4, #0]
 802bc90:	2b2e      	cmp	r3, #46	; 0x2e
 802bc92:	d10c      	bne.n	802bcae <_vfiprintf_r+0x176>
 802bc94:	7863      	ldrb	r3, [r4, #1]
 802bc96:	2b2a      	cmp	r3, #42	; 0x2a
 802bc98:	d135      	bne.n	802bd06 <_vfiprintf_r+0x1ce>
 802bc9a:	9b03      	ldr	r3, [sp, #12]
 802bc9c:	1d1a      	adds	r2, r3, #4
 802bc9e:	681b      	ldr	r3, [r3, #0]
 802bca0:	9203      	str	r2, [sp, #12]
 802bca2:	2b00      	cmp	r3, #0
 802bca4:	bfb8      	it	lt
 802bca6:	f04f 33ff 	movlt.w	r3, #4294967295
 802bcaa:	3402      	adds	r4, #2
 802bcac:	9305      	str	r3, [sp, #20]
 802bcae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802bd94 <_vfiprintf_r+0x25c>
 802bcb2:	7821      	ldrb	r1, [r4, #0]
 802bcb4:	2203      	movs	r2, #3
 802bcb6:	4650      	mov	r0, sl
 802bcb8:	f7d4 fb1a 	bl	80002f0 <memchr>
 802bcbc:	b140      	cbz	r0, 802bcd0 <_vfiprintf_r+0x198>
 802bcbe:	2340      	movs	r3, #64	; 0x40
 802bcc0:	eba0 000a 	sub.w	r0, r0, sl
 802bcc4:	fa03 f000 	lsl.w	r0, r3, r0
 802bcc8:	9b04      	ldr	r3, [sp, #16]
 802bcca:	4303      	orrs	r3, r0
 802bccc:	3401      	adds	r4, #1
 802bcce:	9304      	str	r3, [sp, #16]
 802bcd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bcd4:	482c      	ldr	r0, [pc, #176]	; (802bd88 <_vfiprintf_r+0x250>)
 802bcd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802bcda:	2206      	movs	r2, #6
 802bcdc:	f7d4 fb08 	bl	80002f0 <memchr>
 802bce0:	2800      	cmp	r0, #0
 802bce2:	d03f      	beq.n	802bd64 <_vfiprintf_r+0x22c>
 802bce4:	4b29      	ldr	r3, [pc, #164]	; (802bd8c <_vfiprintf_r+0x254>)
 802bce6:	bb1b      	cbnz	r3, 802bd30 <_vfiprintf_r+0x1f8>
 802bce8:	9b03      	ldr	r3, [sp, #12]
 802bcea:	3307      	adds	r3, #7
 802bcec:	f023 0307 	bic.w	r3, r3, #7
 802bcf0:	3308      	adds	r3, #8
 802bcf2:	9303      	str	r3, [sp, #12]
 802bcf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bcf6:	443b      	add	r3, r7
 802bcf8:	9309      	str	r3, [sp, #36]	; 0x24
 802bcfa:	e767      	b.n	802bbcc <_vfiprintf_r+0x94>
 802bcfc:	fb0c 3202 	mla	r2, ip, r2, r3
 802bd00:	460c      	mov	r4, r1
 802bd02:	2001      	movs	r0, #1
 802bd04:	e7a5      	b.n	802bc52 <_vfiprintf_r+0x11a>
 802bd06:	2300      	movs	r3, #0
 802bd08:	3401      	adds	r4, #1
 802bd0a:	9305      	str	r3, [sp, #20]
 802bd0c:	4619      	mov	r1, r3
 802bd0e:	f04f 0c0a 	mov.w	ip, #10
 802bd12:	4620      	mov	r0, r4
 802bd14:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bd18:	3a30      	subs	r2, #48	; 0x30
 802bd1a:	2a09      	cmp	r2, #9
 802bd1c:	d903      	bls.n	802bd26 <_vfiprintf_r+0x1ee>
 802bd1e:	2b00      	cmp	r3, #0
 802bd20:	d0c5      	beq.n	802bcae <_vfiprintf_r+0x176>
 802bd22:	9105      	str	r1, [sp, #20]
 802bd24:	e7c3      	b.n	802bcae <_vfiprintf_r+0x176>
 802bd26:	fb0c 2101 	mla	r1, ip, r1, r2
 802bd2a:	4604      	mov	r4, r0
 802bd2c:	2301      	movs	r3, #1
 802bd2e:	e7f0      	b.n	802bd12 <_vfiprintf_r+0x1da>
 802bd30:	ab03      	add	r3, sp, #12
 802bd32:	9300      	str	r3, [sp, #0]
 802bd34:	462a      	mov	r2, r5
 802bd36:	4b16      	ldr	r3, [pc, #88]	; (802bd90 <_vfiprintf_r+0x258>)
 802bd38:	a904      	add	r1, sp, #16
 802bd3a:	4630      	mov	r0, r6
 802bd3c:	f3af 8000 	nop.w
 802bd40:	4607      	mov	r7, r0
 802bd42:	1c78      	adds	r0, r7, #1
 802bd44:	d1d6      	bne.n	802bcf4 <_vfiprintf_r+0x1bc>
 802bd46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802bd48:	07d9      	lsls	r1, r3, #31
 802bd4a:	d405      	bmi.n	802bd58 <_vfiprintf_r+0x220>
 802bd4c:	89ab      	ldrh	r3, [r5, #12]
 802bd4e:	059a      	lsls	r2, r3, #22
 802bd50:	d402      	bmi.n	802bd58 <_vfiprintf_r+0x220>
 802bd52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802bd54:	f000 fce4 	bl	802c720 <__retarget_lock_release_recursive>
 802bd58:	89ab      	ldrh	r3, [r5, #12]
 802bd5a:	065b      	lsls	r3, r3, #25
 802bd5c:	f53f af12 	bmi.w	802bb84 <_vfiprintf_r+0x4c>
 802bd60:	9809      	ldr	r0, [sp, #36]	; 0x24
 802bd62:	e711      	b.n	802bb88 <_vfiprintf_r+0x50>
 802bd64:	ab03      	add	r3, sp, #12
 802bd66:	9300      	str	r3, [sp, #0]
 802bd68:	462a      	mov	r2, r5
 802bd6a:	4b09      	ldr	r3, [pc, #36]	; (802bd90 <_vfiprintf_r+0x258>)
 802bd6c:	a904      	add	r1, sp, #16
 802bd6e:	4630      	mov	r0, r6
 802bd70:	f000 f880 	bl	802be74 <_printf_i>
 802bd74:	e7e4      	b.n	802bd40 <_vfiprintf_r+0x208>
 802bd76:	bf00      	nop
 802bd78:	08031dc0 	.word	0x08031dc0
 802bd7c:	08031de0 	.word	0x08031de0
 802bd80:	08031da0 	.word	0x08031da0
 802bd84:	08031d68 	.word	0x08031d68
 802bd88:	08031d72 	.word	0x08031d72
 802bd8c:	00000000 	.word	0x00000000
 802bd90:	0802bb13 	.word	0x0802bb13
 802bd94:	08031d6e 	.word	0x08031d6e

0802bd98 <_printf_common>:
 802bd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bd9c:	4616      	mov	r6, r2
 802bd9e:	4699      	mov	r9, r3
 802bda0:	688a      	ldr	r2, [r1, #8]
 802bda2:	690b      	ldr	r3, [r1, #16]
 802bda4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802bda8:	4293      	cmp	r3, r2
 802bdaa:	bfb8      	it	lt
 802bdac:	4613      	movlt	r3, r2
 802bdae:	6033      	str	r3, [r6, #0]
 802bdb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802bdb4:	4607      	mov	r7, r0
 802bdb6:	460c      	mov	r4, r1
 802bdb8:	b10a      	cbz	r2, 802bdbe <_printf_common+0x26>
 802bdba:	3301      	adds	r3, #1
 802bdbc:	6033      	str	r3, [r6, #0]
 802bdbe:	6823      	ldr	r3, [r4, #0]
 802bdc0:	0699      	lsls	r1, r3, #26
 802bdc2:	bf42      	ittt	mi
 802bdc4:	6833      	ldrmi	r3, [r6, #0]
 802bdc6:	3302      	addmi	r3, #2
 802bdc8:	6033      	strmi	r3, [r6, #0]
 802bdca:	6825      	ldr	r5, [r4, #0]
 802bdcc:	f015 0506 	ands.w	r5, r5, #6
 802bdd0:	d106      	bne.n	802bde0 <_printf_common+0x48>
 802bdd2:	f104 0a19 	add.w	sl, r4, #25
 802bdd6:	68e3      	ldr	r3, [r4, #12]
 802bdd8:	6832      	ldr	r2, [r6, #0]
 802bdda:	1a9b      	subs	r3, r3, r2
 802bddc:	42ab      	cmp	r3, r5
 802bdde:	dc26      	bgt.n	802be2e <_printf_common+0x96>
 802bde0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802bde4:	1e13      	subs	r3, r2, #0
 802bde6:	6822      	ldr	r2, [r4, #0]
 802bde8:	bf18      	it	ne
 802bdea:	2301      	movne	r3, #1
 802bdec:	0692      	lsls	r2, r2, #26
 802bdee:	d42b      	bmi.n	802be48 <_printf_common+0xb0>
 802bdf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802bdf4:	4649      	mov	r1, r9
 802bdf6:	4638      	mov	r0, r7
 802bdf8:	47c0      	blx	r8
 802bdfa:	3001      	adds	r0, #1
 802bdfc:	d01e      	beq.n	802be3c <_printf_common+0xa4>
 802bdfe:	6823      	ldr	r3, [r4, #0]
 802be00:	68e5      	ldr	r5, [r4, #12]
 802be02:	6832      	ldr	r2, [r6, #0]
 802be04:	f003 0306 	and.w	r3, r3, #6
 802be08:	2b04      	cmp	r3, #4
 802be0a:	bf08      	it	eq
 802be0c:	1aad      	subeq	r5, r5, r2
 802be0e:	68a3      	ldr	r3, [r4, #8]
 802be10:	6922      	ldr	r2, [r4, #16]
 802be12:	bf0c      	ite	eq
 802be14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802be18:	2500      	movne	r5, #0
 802be1a:	4293      	cmp	r3, r2
 802be1c:	bfc4      	itt	gt
 802be1e:	1a9b      	subgt	r3, r3, r2
 802be20:	18ed      	addgt	r5, r5, r3
 802be22:	2600      	movs	r6, #0
 802be24:	341a      	adds	r4, #26
 802be26:	42b5      	cmp	r5, r6
 802be28:	d11a      	bne.n	802be60 <_printf_common+0xc8>
 802be2a:	2000      	movs	r0, #0
 802be2c:	e008      	b.n	802be40 <_printf_common+0xa8>
 802be2e:	2301      	movs	r3, #1
 802be30:	4652      	mov	r2, sl
 802be32:	4649      	mov	r1, r9
 802be34:	4638      	mov	r0, r7
 802be36:	47c0      	blx	r8
 802be38:	3001      	adds	r0, #1
 802be3a:	d103      	bne.n	802be44 <_printf_common+0xac>
 802be3c:	f04f 30ff 	mov.w	r0, #4294967295
 802be40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802be44:	3501      	adds	r5, #1
 802be46:	e7c6      	b.n	802bdd6 <_printf_common+0x3e>
 802be48:	18e1      	adds	r1, r4, r3
 802be4a:	1c5a      	adds	r2, r3, #1
 802be4c:	2030      	movs	r0, #48	; 0x30
 802be4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802be52:	4422      	add	r2, r4
 802be54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802be58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802be5c:	3302      	adds	r3, #2
 802be5e:	e7c7      	b.n	802bdf0 <_printf_common+0x58>
 802be60:	2301      	movs	r3, #1
 802be62:	4622      	mov	r2, r4
 802be64:	4649      	mov	r1, r9
 802be66:	4638      	mov	r0, r7
 802be68:	47c0      	blx	r8
 802be6a:	3001      	adds	r0, #1
 802be6c:	d0e6      	beq.n	802be3c <_printf_common+0xa4>
 802be6e:	3601      	adds	r6, #1
 802be70:	e7d9      	b.n	802be26 <_printf_common+0x8e>
	...

0802be74 <_printf_i>:
 802be74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802be78:	460c      	mov	r4, r1
 802be7a:	4691      	mov	r9, r2
 802be7c:	7e27      	ldrb	r7, [r4, #24]
 802be7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 802be80:	2f78      	cmp	r7, #120	; 0x78
 802be82:	4680      	mov	r8, r0
 802be84:	469a      	mov	sl, r3
 802be86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802be8a:	d807      	bhi.n	802be9c <_printf_i+0x28>
 802be8c:	2f62      	cmp	r7, #98	; 0x62
 802be8e:	d80a      	bhi.n	802bea6 <_printf_i+0x32>
 802be90:	2f00      	cmp	r7, #0
 802be92:	f000 80d8 	beq.w	802c046 <_printf_i+0x1d2>
 802be96:	2f58      	cmp	r7, #88	; 0x58
 802be98:	f000 80a3 	beq.w	802bfe2 <_printf_i+0x16e>
 802be9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802bea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802bea4:	e03a      	b.n	802bf1c <_printf_i+0xa8>
 802bea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802beaa:	2b15      	cmp	r3, #21
 802beac:	d8f6      	bhi.n	802be9c <_printf_i+0x28>
 802beae:	a001      	add	r0, pc, #4	; (adr r0, 802beb4 <_printf_i+0x40>)
 802beb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802beb4:	0802bf0d 	.word	0x0802bf0d
 802beb8:	0802bf21 	.word	0x0802bf21
 802bebc:	0802be9d 	.word	0x0802be9d
 802bec0:	0802be9d 	.word	0x0802be9d
 802bec4:	0802be9d 	.word	0x0802be9d
 802bec8:	0802be9d 	.word	0x0802be9d
 802becc:	0802bf21 	.word	0x0802bf21
 802bed0:	0802be9d 	.word	0x0802be9d
 802bed4:	0802be9d 	.word	0x0802be9d
 802bed8:	0802be9d 	.word	0x0802be9d
 802bedc:	0802be9d 	.word	0x0802be9d
 802bee0:	0802c02d 	.word	0x0802c02d
 802bee4:	0802bf51 	.word	0x0802bf51
 802bee8:	0802c00f 	.word	0x0802c00f
 802beec:	0802be9d 	.word	0x0802be9d
 802bef0:	0802be9d 	.word	0x0802be9d
 802bef4:	0802c04f 	.word	0x0802c04f
 802bef8:	0802be9d 	.word	0x0802be9d
 802befc:	0802bf51 	.word	0x0802bf51
 802bf00:	0802be9d 	.word	0x0802be9d
 802bf04:	0802be9d 	.word	0x0802be9d
 802bf08:	0802c017 	.word	0x0802c017
 802bf0c:	680b      	ldr	r3, [r1, #0]
 802bf0e:	1d1a      	adds	r2, r3, #4
 802bf10:	681b      	ldr	r3, [r3, #0]
 802bf12:	600a      	str	r2, [r1, #0]
 802bf14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802bf18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802bf1c:	2301      	movs	r3, #1
 802bf1e:	e0a3      	b.n	802c068 <_printf_i+0x1f4>
 802bf20:	6825      	ldr	r5, [r4, #0]
 802bf22:	6808      	ldr	r0, [r1, #0]
 802bf24:	062e      	lsls	r6, r5, #24
 802bf26:	f100 0304 	add.w	r3, r0, #4
 802bf2a:	d50a      	bpl.n	802bf42 <_printf_i+0xce>
 802bf2c:	6805      	ldr	r5, [r0, #0]
 802bf2e:	600b      	str	r3, [r1, #0]
 802bf30:	2d00      	cmp	r5, #0
 802bf32:	da03      	bge.n	802bf3c <_printf_i+0xc8>
 802bf34:	232d      	movs	r3, #45	; 0x2d
 802bf36:	426d      	negs	r5, r5
 802bf38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802bf3c:	485e      	ldr	r0, [pc, #376]	; (802c0b8 <_printf_i+0x244>)
 802bf3e:	230a      	movs	r3, #10
 802bf40:	e019      	b.n	802bf76 <_printf_i+0x102>
 802bf42:	f015 0f40 	tst.w	r5, #64	; 0x40
 802bf46:	6805      	ldr	r5, [r0, #0]
 802bf48:	600b      	str	r3, [r1, #0]
 802bf4a:	bf18      	it	ne
 802bf4c:	b22d      	sxthne	r5, r5
 802bf4e:	e7ef      	b.n	802bf30 <_printf_i+0xbc>
 802bf50:	680b      	ldr	r3, [r1, #0]
 802bf52:	6825      	ldr	r5, [r4, #0]
 802bf54:	1d18      	adds	r0, r3, #4
 802bf56:	6008      	str	r0, [r1, #0]
 802bf58:	0628      	lsls	r0, r5, #24
 802bf5a:	d501      	bpl.n	802bf60 <_printf_i+0xec>
 802bf5c:	681d      	ldr	r5, [r3, #0]
 802bf5e:	e002      	b.n	802bf66 <_printf_i+0xf2>
 802bf60:	0669      	lsls	r1, r5, #25
 802bf62:	d5fb      	bpl.n	802bf5c <_printf_i+0xe8>
 802bf64:	881d      	ldrh	r5, [r3, #0]
 802bf66:	4854      	ldr	r0, [pc, #336]	; (802c0b8 <_printf_i+0x244>)
 802bf68:	2f6f      	cmp	r7, #111	; 0x6f
 802bf6a:	bf0c      	ite	eq
 802bf6c:	2308      	moveq	r3, #8
 802bf6e:	230a      	movne	r3, #10
 802bf70:	2100      	movs	r1, #0
 802bf72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802bf76:	6866      	ldr	r6, [r4, #4]
 802bf78:	60a6      	str	r6, [r4, #8]
 802bf7a:	2e00      	cmp	r6, #0
 802bf7c:	bfa2      	ittt	ge
 802bf7e:	6821      	ldrge	r1, [r4, #0]
 802bf80:	f021 0104 	bicge.w	r1, r1, #4
 802bf84:	6021      	strge	r1, [r4, #0]
 802bf86:	b90d      	cbnz	r5, 802bf8c <_printf_i+0x118>
 802bf88:	2e00      	cmp	r6, #0
 802bf8a:	d04d      	beq.n	802c028 <_printf_i+0x1b4>
 802bf8c:	4616      	mov	r6, r2
 802bf8e:	fbb5 f1f3 	udiv	r1, r5, r3
 802bf92:	fb03 5711 	mls	r7, r3, r1, r5
 802bf96:	5dc7      	ldrb	r7, [r0, r7]
 802bf98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802bf9c:	462f      	mov	r7, r5
 802bf9e:	42bb      	cmp	r3, r7
 802bfa0:	460d      	mov	r5, r1
 802bfa2:	d9f4      	bls.n	802bf8e <_printf_i+0x11a>
 802bfa4:	2b08      	cmp	r3, #8
 802bfa6:	d10b      	bne.n	802bfc0 <_printf_i+0x14c>
 802bfa8:	6823      	ldr	r3, [r4, #0]
 802bfaa:	07df      	lsls	r7, r3, #31
 802bfac:	d508      	bpl.n	802bfc0 <_printf_i+0x14c>
 802bfae:	6923      	ldr	r3, [r4, #16]
 802bfb0:	6861      	ldr	r1, [r4, #4]
 802bfb2:	4299      	cmp	r1, r3
 802bfb4:	bfde      	ittt	le
 802bfb6:	2330      	movle	r3, #48	; 0x30
 802bfb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 802bfbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 802bfc0:	1b92      	subs	r2, r2, r6
 802bfc2:	6122      	str	r2, [r4, #16]
 802bfc4:	f8cd a000 	str.w	sl, [sp]
 802bfc8:	464b      	mov	r3, r9
 802bfca:	aa03      	add	r2, sp, #12
 802bfcc:	4621      	mov	r1, r4
 802bfce:	4640      	mov	r0, r8
 802bfd0:	f7ff fee2 	bl	802bd98 <_printf_common>
 802bfd4:	3001      	adds	r0, #1
 802bfd6:	d14c      	bne.n	802c072 <_printf_i+0x1fe>
 802bfd8:	f04f 30ff 	mov.w	r0, #4294967295
 802bfdc:	b004      	add	sp, #16
 802bfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bfe2:	4835      	ldr	r0, [pc, #212]	; (802c0b8 <_printf_i+0x244>)
 802bfe4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802bfe8:	6823      	ldr	r3, [r4, #0]
 802bfea:	680e      	ldr	r6, [r1, #0]
 802bfec:	061f      	lsls	r7, r3, #24
 802bfee:	f856 5b04 	ldr.w	r5, [r6], #4
 802bff2:	600e      	str	r6, [r1, #0]
 802bff4:	d514      	bpl.n	802c020 <_printf_i+0x1ac>
 802bff6:	07d9      	lsls	r1, r3, #31
 802bff8:	bf44      	itt	mi
 802bffa:	f043 0320 	orrmi.w	r3, r3, #32
 802bffe:	6023      	strmi	r3, [r4, #0]
 802c000:	b91d      	cbnz	r5, 802c00a <_printf_i+0x196>
 802c002:	6823      	ldr	r3, [r4, #0]
 802c004:	f023 0320 	bic.w	r3, r3, #32
 802c008:	6023      	str	r3, [r4, #0]
 802c00a:	2310      	movs	r3, #16
 802c00c:	e7b0      	b.n	802bf70 <_printf_i+0xfc>
 802c00e:	6823      	ldr	r3, [r4, #0]
 802c010:	f043 0320 	orr.w	r3, r3, #32
 802c014:	6023      	str	r3, [r4, #0]
 802c016:	2378      	movs	r3, #120	; 0x78
 802c018:	4828      	ldr	r0, [pc, #160]	; (802c0bc <_printf_i+0x248>)
 802c01a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802c01e:	e7e3      	b.n	802bfe8 <_printf_i+0x174>
 802c020:	065e      	lsls	r6, r3, #25
 802c022:	bf48      	it	mi
 802c024:	b2ad      	uxthmi	r5, r5
 802c026:	e7e6      	b.n	802bff6 <_printf_i+0x182>
 802c028:	4616      	mov	r6, r2
 802c02a:	e7bb      	b.n	802bfa4 <_printf_i+0x130>
 802c02c:	680b      	ldr	r3, [r1, #0]
 802c02e:	6826      	ldr	r6, [r4, #0]
 802c030:	6960      	ldr	r0, [r4, #20]
 802c032:	1d1d      	adds	r5, r3, #4
 802c034:	600d      	str	r5, [r1, #0]
 802c036:	0635      	lsls	r5, r6, #24
 802c038:	681b      	ldr	r3, [r3, #0]
 802c03a:	d501      	bpl.n	802c040 <_printf_i+0x1cc>
 802c03c:	6018      	str	r0, [r3, #0]
 802c03e:	e002      	b.n	802c046 <_printf_i+0x1d2>
 802c040:	0671      	lsls	r1, r6, #25
 802c042:	d5fb      	bpl.n	802c03c <_printf_i+0x1c8>
 802c044:	8018      	strh	r0, [r3, #0]
 802c046:	2300      	movs	r3, #0
 802c048:	6123      	str	r3, [r4, #16]
 802c04a:	4616      	mov	r6, r2
 802c04c:	e7ba      	b.n	802bfc4 <_printf_i+0x150>
 802c04e:	680b      	ldr	r3, [r1, #0]
 802c050:	1d1a      	adds	r2, r3, #4
 802c052:	600a      	str	r2, [r1, #0]
 802c054:	681e      	ldr	r6, [r3, #0]
 802c056:	6862      	ldr	r2, [r4, #4]
 802c058:	2100      	movs	r1, #0
 802c05a:	4630      	mov	r0, r6
 802c05c:	f7d4 f948 	bl	80002f0 <memchr>
 802c060:	b108      	cbz	r0, 802c066 <_printf_i+0x1f2>
 802c062:	1b80      	subs	r0, r0, r6
 802c064:	6060      	str	r0, [r4, #4]
 802c066:	6863      	ldr	r3, [r4, #4]
 802c068:	6123      	str	r3, [r4, #16]
 802c06a:	2300      	movs	r3, #0
 802c06c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c070:	e7a8      	b.n	802bfc4 <_printf_i+0x150>
 802c072:	6923      	ldr	r3, [r4, #16]
 802c074:	4632      	mov	r2, r6
 802c076:	4649      	mov	r1, r9
 802c078:	4640      	mov	r0, r8
 802c07a:	47d0      	blx	sl
 802c07c:	3001      	adds	r0, #1
 802c07e:	d0ab      	beq.n	802bfd8 <_printf_i+0x164>
 802c080:	6823      	ldr	r3, [r4, #0]
 802c082:	079b      	lsls	r3, r3, #30
 802c084:	d413      	bmi.n	802c0ae <_printf_i+0x23a>
 802c086:	68e0      	ldr	r0, [r4, #12]
 802c088:	9b03      	ldr	r3, [sp, #12]
 802c08a:	4298      	cmp	r0, r3
 802c08c:	bfb8      	it	lt
 802c08e:	4618      	movlt	r0, r3
 802c090:	e7a4      	b.n	802bfdc <_printf_i+0x168>
 802c092:	2301      	movs	r3, #1
 802c094:	4632      	mov	r2, r6
 802c096:	4649      	mov	r1, r9
 802c098:	4640      	mov	r0, r8
 802c09a:	47d0      	blx	sl
 802c09c:	3001      	adds	r0, #1
 802c09e:	d09b      	beq.n	802bfd8 <_printf_i+0x164>
 802c0a0:	3501      	adds	r5, #1
 802c0a2:	68e3      	ldr	r3, [r4, #12]
 802c0a4:	9903      	ldr	r1, [sp, #12]
 802c0a6:	1a5b      	subs	r3, r3, r1
 802c0a8:	42ab      	cmp	r3, r5
 802c0aa:	dcf2      	bgt.n	802c092 <_printf_i+0x21e>
 802c0ac:	e7eb      	b.n	802c086 <_printf_i+0x212>
 802c0ae:	2500      	movs	r5, #0
 802c0b0:	f104 0619 	add.w	r6, r4, #25
 802c0b4:	e7f5      	b.n	802c0a2 <_printf_i+0x22e>
 802c0b6:	bf00      	nop
 802c0b8:	08031d79 	.word	0x08031d79
 802c0bc:	08031d8a 	.word	0x08031d8a

0802c0c0 <_sbrk_r>:
 802c0c0:	b538      	push	{r3, r4, r5, lr}
 802c0c2:	4d06      	ldr	r5, [pc, #24]	; (802c0dc <_sbrk_r+0x1c>)
 802c0c4:	2300      	movs	r3, #0
 802c0c6:	4604      	mov	r4, r0
 802c0c8:	4608      	mov	r0, r1
 802c0ca:	602b      	str	r3, [r5, #0]
 802c0cc:	f7d7 fef0 	bl	8003eb0 <_sbrk>
 802c0d0:	1c43      	adds	r3, r0, #1
 802c0d2:	d102      	bne.n	802c0da <_sbrk_r+0x1a>
 802c0d4:	682b      	ldr	r3, [r5, #0]
 802c0d6:	b103      	cbz	r3, 802c0da <_sbrk_r+0x1a>
 802c0d8:	6023      	str	r3, [r4, #0]
 802c0da:	bd38      	pop	{r3, r4, r5, pc}
 802c0dc:	2400cf44 	.word	0x2400cf44

0802c0e0 <_raise_r>:
 802c0e0:	291f      	cmp	r1, #31
 802c0e2:	b538      	push	{r3, r4, r5, lr}
 802c0e4:	4604      	mov	r4, r0
 802c0e6:	460d      	mov	r5, r1
 802c0e8:	d904      	bls.n	802c0f4 <_raise_r+0x14>
 802c0ea:	2316      	movs	r3, #22
 802c0ec:	6003      	str	r3, [r0, #0]
 802c0ee:	f04f 30ff 	mov.w	r0, #4294967295
 802c0f2:	bd38      	pop	{r3, r4, r5, pc}
 802c0f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802c0f6:	b112      	cbz	r2, 802c0fe <_raise_r+0x1e>
 802c0f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802c0fc:	b94b      	cbnz	r3, 802c112 <_raise_r+0x32>
 802c0fe:	4620      	mov	r0, r4
 802c100:	f000 f830 	bl	802c164 <_getpid_r>
 802c104:	462a      	mov	r2, r5
 802c106:	4601      	mov	r1, r0
 802c108:	4620      	mov	r0, r4
 802c10a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c10e:	f000 b817 	b.w	802c140 <_kill_r>
 802c112:	2b01      	cmp	r3, #1
 802c114:	d00a      	beq.n	802c12c <_raise_r+0x4c>
 802c116:	1c59      	adds	r1, r3, #1
 802c118:	d103      	bne.n	802c122 <_raise_r+0x42>
 802c11a:	2316      	movs	r3, #22
 802c11c:	6003      	str	r3, [r0, #0]
 802c11e:	2001      	movs	r0, #1
 802c120:	e7e7      	b.n	802c0f2 <_raise_r+0x12>
 802c122:	2400      	movs	r4, #0
 802c124:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802c128:	4628      	mov	r0, r5
 802c12a:	4798      	blx	r3
 802c12c:	2000      	movs	r0, #0
 802c12e:	e7e0      	b.n	802c0f2 <_raise_r+0x12>

0802c130 <raise>:
 802c130:	4b02      	ldr	r3, [pc, #8]	; (802c13c <raise+0xc>)
 802c132:	4601      	mov	r1, r0
 802c134:	6818      	ldr	r0, [r3, #0]
 802c136:	f7ff bfd3 	b.w	802c0e0 <_raise_r>
 802c13a:	bf00      	nop
 802c13c:	240000a8 	.word	0x240000a8

0802c140 <_kill_r>:
 802c140:	b538      	push	{r3, r4, r5, lr}
 802c142:	4d07      	ldr	r5, [pc, #28]	; (802c160 <_kill_r+0x20>)
 802c144:	2300      	movs	r3, #0
 802c146:	4604      	mov	r4, r0
 802c148:	4608      	mov	r0, r1
 802c14a:	4611      	mov	r1, r2
 802c14c:	602b      	str	r3, [r5, #0]
 802c14e:	f7d7 fe27 	bl	8003da0 <_kill>
 802c152:	1c43      	adds	r3, r0, #1
 802c154:	d102      	bne.n	802c15c <_kill_r+0x1c>
 802c156:	682b      	ldr	r3, [r5, #0]
 802c158:	b103      	cbz	r3, 802c15c <_kill_r+0x1c>
 802c15a:	6023      	str	r3, [r4, #0]
 802c15c:	bd38      	pop	{r3, r4, r5, pc}
 802c15e:	bf00      	nop
 802c160:	2400cf44 	.word	0x2400cf44

0802c164 <_getpid_r>:
 802c164:	f7d7 be14 	b.w	8003d90 <_getpid>

0802c168 <__swbuf_r>:
 802c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c16a:	460e      	mov	r6, r1
 802c16c:	4614      	mov	r4, r2
 802c16e:	4605      	mov	r5, r0
 802c170:	b118      	cbz	r0, 802c17a <__swbuf_r+0x12>
 802c172:	6983      	ldr	r3, [r0, #24]
 802c174:	b90b      	cbnz	r3, 802c17a <__swbuf_r+0x12>
 802c176:	f000 fa33 	bl	802c5e0 <__sinit>
 802c17a:	4b21      	ldr	r3, [pc, #132]	; (802c200 <__swbuf_r+0x98>)
 802c17c:	429c      	cmp	r4, r3
 802c17e:	d12b      	bne.n	802c1d8 <__swbuf_r+0x70>
 802c180:	686c      	ldr	r4, [r5, #4]
 802c182:	69a3      	ldr	r3, [r4, #24]
 802c184:	60a3      	str	r3, [r4, #8]
 802c186:	89a3      	ldrh	r3, [r4, #12]
 802c188:	071a      	lsls	r2, r3, #28
 802c18a:	d52f      	bpl.n	802c1ec <__swbuf_r+0x84>
 802c18c:	6923      	ldr	r3, [r4, #16]
 802c18e:	b36b      	cbz	r3, 802c1ec <__swbuf_r+0x84>
 802c190:	6923      	ldr	r3, [r4, #16]
 802c192:	6820      	ldr	r0, [r4, #0]
 802c194:	1ac0      	subs	r0, r0, r3
 802c196:	6963      	ldr	r3, [r4, #20]
 802c198:	b2f6      	uxtb	r6, r6
 802c19a:	4283      	cmp	r3, r0
 802c19c:	4637      	mov	r7, r6
 802c19e:	dc04      	bgt.n	802c1aa <__swbuf_r+0x42>
 802c1a0:	4621      	mov	r1, r4
 802c1a2:	4628      	mov	r0, r5
 802c1a4:	f000 f988 	bl	802c4b8 <_fflush_r>
 802c1a8:	bb30      	cbnz	r0, 802c1f8 <__swbuf_r+0x90>
 802c1aa:	68a3      	ldr	r3, [r4, #8]
 802c1ac:	3b01      	subs	r3, #1
 802c1ae:	60a3      	str	r3, [r4, #8]
 802c1b0:	6823      	ldr	r3, [r4, #0]
 802c1b2:	1c5a      	adds	r2, r3, #1
 802c1b4:	6022      	str	r2, [r4, #0]
 802c1b6:	701e      	strb	r6, [r3, #0]
 802c1b8:	6963      	ldr	r3, [r4, #20]
 802c1ba:	3001      	adds	r0, #1
 802c1bc:	4283      	cmp	r3, r0
 802c1be:	d004      	beq.n	802c1ca <__swbuf_r+0x62>
 802c1c0:	89a3      	ldrh	r3, [r4, #12]
 802c1c2:	07db      	lsls	r3, r3, #31
 802c1c4:	d506      	bpl.n	802c1d4 <__swbuf_r+0x6c>
 802c1c6:	2e0a      	cmp	r6, #10
 802c1c8:	d104      	bne.n	802c1d4 <__swbuf_r+0x6c>
 802c1ca:	4621      	mov	r1, r4
 802c1cc:	4628      	mov	r0, r5
 802c1ce:	f000 f973 	bl	802c4b8 <_fflush_r>
 802c1d2:	b988      	cbnz	r0, 802c1f8 <__swbuf_r+0x90>
 802c1d4:	4638      	mov	r0, r7
 802c1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c1d8:	4b0a      	ldr	r3, [pc, #40]	; (802c204 <__swbuf_r+0x9c>)
 802c1da:	429c      	cmp	r4, r3
 802c1dc:	d101      	bne.n	802c1e2 <__swbuf_r+0x7a>
 802c1de:	68ac      	ldr	r4, [r5, #8]
 802c1e0:	e7cf      	b.n	802c182 <__swbuf_r+0x1a>
 802c1e2:	4b09      	ldr	r3, [pc, #36]	; (802c208 <__swbuf_r+0xa0>)
 802c1e4:	429c      	cmp	r4, r3
 802c1e6:	bf08      	it	eq
 802c1e8:	68ec      	ldreq	r4, [r5, #12]
 802c1ea:	e7ca      	b.n	802c182 <__swbuf_r+0x1a>
 802c1ec:	4621      	mov	r1, r4
 802c1ee:	4628      	mov	r0, r5
 802c1f0:	f000 f80c 	bl	802c20c <__swsetup_r>
 802c1f4:	2800      	cmp	r0, #0
 802c1f6:	d0cb      	beq.n	802c190 <__swbuf_r+0x28>
 802c1f8:	f04f 37ff 	mov.w	r7, #4294967295
 802c1fc:	e7ea      	b.n	802c1d4 <__swbuf_r+0x6c>
 802c1fe:	bf00      	nop
 802c200:	08031dc0 	.word	0x08031dc0
 802c204:	08031de0 	.word	0x08031de0
 802c208:	08031da0 	.word	0x08031da0

0802c20c <__swsetup_r>:
 802c20c:	4b32      	ldr	r3, [pc, #200]	; (802c2d8 <__swsetup_r+0xcc>)
 802c20e:	b570      	push	{r4, r5, r6, lr}
 802c210:	681d      	ldr	r5, [r3, #0]
 802c212:	4606      	mov	r6, r0
 802c214:	460c      	mov	r4, r1
 802c216:	b125      	cbz	r5, 802c222 <__swsetup_r+0x16>
 802c218:	69ab      	ldr	r3, [r5, #24]
 802c21a:	b913      	cbnz	r3, 802c222 <__swsetup_r+0x16>
 802c21c:	4628      	mov	r0, r5
 802c21e:	f000 f9df 	bl	802c5e0 <__sinit>
 802c222:	4b2e      	ldr	r3, [pc, #184]	; (802c2dc <__swsetup_r+0xd0>)
 802c224:	429c      	cmp	r4, r3
 802c226:	d10f      	bne.n	802c248 <__swsetup_r+0x3c>
 802c228:	686c      	ldr	r4, [r5, #4]
 802c22a:	89a3      	ldrh	r3, [r4, #12]
 802c22c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c230:	0719      	lsls	r1, r3, #28
 802c232:	d42c      	bmi.n	802c28e <__swsetup_r+0x82>
 802c234:	06dd      	lsls	r5, r3, #27
 802c236:	d411      	bmi.n	802c25c <__swsetup_r+0x50>
 802c238:	2309      	movs	r3, #9
 802c23a:	6033      	str	r3, [r6, #0]
 802c23c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802c240:	81a3      	strh	r3, [r4, #12]
 802c242:	f04f 30ff 	mov.w	r0, #4294967295
 802c246:	e03e      	b.n	802c2c6 <__swsetup_r+0xba>
 802c248:	4b25      	ldr	r3, [pc, #148]	; (802c2e0 <__swsetup_r+0xd4>)
 802c24a:	429c      	cmp	r4, r3
 802c24c:	d101      	bne.n	802c252 <__swsetup_r+0x46>
 802c24e:	68ac      	ldr	r4, [r5, #8]
 802c250:	e7eb      	b.n	802c22a <__swsetup_r+0x1e>
 802c252:	4b24      	ldr	r3, [pc, #144]	; (802c2e4 <__swsetup_r+0xd8>)
 802c254:	429c      	cmp	r4, r3
 802c256:	bf08      	it	eq
 802c258:	68ec      	ldreq	r4, [r5, #12]
 802c25a:	e7e6      	b.n	802c22a <__swsetup_r+0x1e>
 802c25c:	0758      	lsls	r0, r3, #29
 802c25e:	d512      	bpl.n	802c286 <__swsetup_r+0x7a>
 802c260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c262:	b141      	cbz	r1, 802c276 <__swsetup_r+0x6a>
 802c264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c268:	4299      	cmp	r1, r3
 802c26a:	d002      	beq.n	802c272 <__swsetup_r+0x66>
 802c26c:	4630      	mov	r0, r6
 802c26e:	f7ff fb8f 	bl	802b990 <_free_r>
 802c272:	2300      	movs	r3, #0
 802c274:	6363      	str	r3, [r4, #52]	; 0x34
 802c276:	89a3      	ldrh	r3, [r4, #12]
 802c278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802c27c:	81a3      	strh	r3, [r4, #12]
 802c27e:	2300      	movs	r3, #0
 802c280:	6063      	str	r3, [r4, #4]
 802c282:	6923      	ldr	r3, [r4, #16]
 802c284:	6023      	str	r3, [r4, #0]
 802c286:	89a3      	ldrh	r3, [r4, #12]
 802c288:	f043 0308 	orr.w	r3, r3, #8
 802c28c:	81a3      	strh	r3, [r4, #12]
 802c28e:	6923      	ldr	r3, [r4, #16]
 802c290:	b94b      	cbnz	r3, 802c2a6 <__swsetup_r+0x9a>
 802c292:	89a3      	ldrh	r3, [r4, #12]
 802c294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802c298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802c29c:	d003      	beq.n	802c2a6 <__swsetup_r+0x9a>
 802c29e:	4621      	mov	r1, r4
 802c2a0:	4630      	mov	r0, r6
 802c2a2:	f000 fa63 	bl	802c76c <__smakebuf_r>
 802c2a6:	89a0      	ldrh	r0, [r4, #12]
 802c2a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c2ac:	f010 0301 	ands.w	r3, r0, #1
 802c2b0:	d00a      	beq.n	802c2c8 <__swsetup_r+0xbc>
 802c2b2:	2300      	movs	r3, #0
 802c2b4:	60a3      	str	r3, [r4, #8]
 802c2b6:	6963      	ldr	r3, [r4, #20]
 802c2b8:	425b      	negs	r3, r3
 802c2ba:	61a3      	str	r3, [r4, #24]
 802c2bc:	6923      	ldr	r3, [r4, #16]
 802c2be:	b943      	cbnz	r3, 802c2d2 <__swsetup_r+0xc6>
 802c2c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802c2c4:	d1ba      	bne.n	802c23c <__swsetup_r+0x30>
 802c2c6:	bd70      	pop	{r4, r5, r6, pc}
 802c2c8:	0781      	lsls	r1, r0, #30
 802c2ca:	bf58      	it	pl
 802c2cc:	6963      	ldrpl	r3, [r4, #20]
 802c2ce:	60a3      	str	r3, [r4, #8]
 802c2d0:	e7f4      	b.n	802c2bc <__swsetup_r+0xb0>
 802c2d2:	2000      	movs	r0, #0
 802c2d4:	e7f7      	b.n	802c2c6 <__swsetup_r+0xba>
 802c2d6:	bf00      	nop
 802c2d8:	240000a8 	.word	0x240000a8
 802c2dc:	08031dc0 	.word	0x08031dc0
 802c2e0:	08031de0 	.word	0x08031de0
 802c2e4:	08031da0 	.word	0x08031da0

0802c2e8 <__register_exitproc>:
 802c2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c2ec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802c3a8 <__register_exitproc+0xc0>
 802c2f0:	4606      	mov	r6, r0
 802c2f2:	f8d8 0000 	ldr.w	r0, [r8]
 802c2f6:	461f      	mov	r7, r3
 802c2f8:	460d      	mov	r5, r1
 802c2fa:	4691      	mov	r9, r2
 802c2fc:	f000 fa0e 	bl	802c71c <__retarget_lock_acquire_recursive>
 802c300:	4b25      	ldr	r3, [pc, #148]	; (802c398 <__register_exitproc+0xb0>)
 802c302:	681c      	ldr	r4, [r3, #0]
 802c304:	b934      	cbnz	r4, 802c314 <__register_exitproc+0x2c>
 802c306:	4c25      	ldr	r4, [pc, #148]	; (802c39c <__register_exitproc+0xb4>)
 802c308:	601c      	str	r4, [r3, #0]
 802c30a:	4b25      	ldr	r3, [pc, #148]	; (802c3a0 <__register_exitproc+0xb8>)
 802c30c:	b113      	cbz	r3, 802c314 <__register_exitproc+0x2c>
 802c30e:	681b      	ldr	r3, [r3, #0]
 802c310:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802c314:	6863      	ldr	r3, [r4, #4]
 802c316:	2b1f      	cmp	r3, #31
 802c318:	dd07      	ble.n	802c32a <__register_exitproc+0x42>
 802c31a:	f8d8 0000 	ldr.w	r0, [r8]
 802c31e:	f000 f9ff 	bl	802c720 <__retarget_lock_release_recursive>
 802c322:	f04f 30ff 	mov.w	r0, #4294967295
 802c326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c32a:	b34e      	cbz	r6, 802c380 <__register_exitproc+0x98>
 802c32c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802c330:	b988      	cbnz	r0, 802c356 <__register_exitproc+0x6e>
 802c332:	4b1c      	ldr	r3, [pc, #112]	; (802c3a4 <__register_exitproc+0xbc>)
 802c334:	b923      	cbnz	r3, 802c340 <__register_exitproc+0x58>
 802c336:	f8d8 0000 	ldr.w	r0, [r8]
 802c33a:	f000 f9f0 	bl	802c71e <__retarget_lock_release>
 802c33e:	e7f0      	b.n	802c322 <__register_exitproc+0x3a>
 802c340:	f44f 7084 	mov.w	r0, #264	; 0x108
 802c344:	f7ff fafe 	bl	802b944 <malloc>
 802c348:	2800      	cmp	r0, #0
 802c34a:	d0f4      	beq.n	802c336 <__register_exitproc+0x4e>
 802c34c:	2300      	movs	r3, #0
 802c34e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802c352:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802c356:	6863      	ldr	r3, [r4, #4]
 802c358:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802c35c:	2201      	movs	r2, #1
 802c35e:	409a      	lsls	r2, r3
 802c360:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802c364:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802c368:	4313      	orrs	r3, r2
 802c36a:	2e02      	cmp	r6, #2
 802c36c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802c370:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802c374:	bf02      	ittt	eq
 802c376:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802c37a:	431a      	orreq	r2, r3
 802c37c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802c380:	6863      	ldr	r3, [r4, #4]
 802c382:	f8d8 0000 	ldr.w	r0, [r8]
 802c386:	1c5a      	adds	r2, r3, #1
 802c388:	3302      	adds	r3, #2
 802c38a:	6062      	str	r2, [r4, #4]
 802c38c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802c390:	f000 f9c6 	bl	802c720 <__retarget_lock_release_recursive>
 802c394:	2000      	movs	r0, #0
 802c396:	e7c6      	b.n	802c326 <__register_exitproc+0x3e>
 802c398:	2400cb54 	.word	0x2400cb54
 802c39c:	2400cac8 	.word	0x2400cac8
 802c3a0:	08031d9c 	.word	0x08031d9c
 802c3a4:	0802b945 	.word	0x0802b945
 802c3a8:	2400010c 	.word	0x2400010c

0802c3ac <__sflush_r>:
 802c3ac:	898a      	ldrh	r2, [r1, #12]
 802c3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c3b2:	4605      	mov	r5, r0
 802c3b4:	0710      	lsls	r0, r2, #28
 802c3b6:	460c      	mov	r4, r1
 802c3b8:	d458      	bmi.n	802c46c <__sflush_r+0xc0>
 802c3ba:	684b      	ldr	r3, [r1, #4]
 802c3bc:	2b00      	cmp	r3, #0
 802c3be:	dc05      	bgt.n	802c3cc <__sflush_r+0x20>
 802c3c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802c3c2:	2b00      	cmp	r3, #0
 802c3c4:	dc02      	bgt.n	802c3cc <__sflush_r+0x20>
 802c3c6:	2000      	movs	r0, #0
 802c3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c3cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802c3ce:	2e00      	cmp	r6, #0
 802c3d0:	d0f9      	beq.n	802c3c6 <__sflush_r+0x1a>
 802c3d2:	2300      	movs	r3, #0
 802c3d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802c3d8:	682f      	ldr	r7, [r5, #0]
 802c3da:	602b      	str	r3, [r5, #0]
 802c3dc:	d032      	beq.n	802c444 <__sflush_r+0x98>
 802c3de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802c3e0:	89a3      	ldrh	r3, [r4, #12]
 802c3e2:	075a      	lsls	r2, r3, #29
 802c3e4:	d505      	bpl.n	802c3f2 <__sflush_r+0x46>
 802c3e6:	6863      	ldr	r3, [r4, #4]
 802c3e8:	1ac0      	subs	r0, r0, r3
 802c3ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802c3ec:	b10b      	cbz	r3, 802c3f2 <__sflush_r+0x46>
 802c3ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802c3f0:	1ac0      	subs	r0, r0, r3
 802c3f2:	2300      	movs	r3, #0
 802c3f4:	4602      	mov	r2, r0
 802c3f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802c3f8:	6a21      	ldr	r1, [r4, #32]
 802c3fa:	4628      	mov	r0, r5
 802c3fc:	47b0      	blx	r6
 802c3fe:	1c43      	adds	r3, r0, #1
 802c400:	89a3      	ldrh	r3, [r4, #12]
 802c402:	d106      	bne.n	802c412 <__sflush_r+0x66>
 802c404:	6829      	ldr	r1, [r5, #0]
 802c406:	291d      	cmp	r1, #29
 802c408:	d82c      	bhi.n	802c464 <__sflush_r+0xb8>
 802c40a:	4a2a      	ldr	r2, [pc, #168]	; (802c4b4 <__sflush_r+0x108>)
 802c40c:	40ca      	lsrs	r2, r1
 802c40e:	07d6      	lsls	r6, r2, #31
 802c410:	d528      	bpl.n	802c464 <__sflush_r+0xb8>
 802c412:	2200      	movs	r2, #0
 802c414:	6062      	str	r2, [r4, #4]
 802c416:	04d9      	lsls	r1, r3, #19
 802c418:	6922      	ldr	r2, [r4, #16]
 802c41a:	6022      	str	r2, [r4, #0]
 802c41c:	d504      	bpl.n	802c428 <__sflush_r+0x7c>
 802c41e:	1c42      	adds	r2, r0, #1
 802c420:	d101      	bne.n	802c426 <__sflush_r+0x7a>
 802c422:	682b      	ldr	r3, [r5, #0]
 802c424:	b903      	cbnz	r3, 802c428 <__sflush_r+0x7c>
 802c426:	6560      	str	r0, [r4, #84]	; 0x54
 802c428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c42a:	602f      	str	r7, [r5, #0]
 802c42c:	2900      	cmp	r1, #0
 802c42e:	d0ca      	beq.n	802c3c6 <__sflush_r+0x1a>
 802c430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c434:	4299      	cmp	r1, r3
 802c436:	d002      	beq.n	802c43e <__sflush_r+0x92>
 802c438:	4628      	mov	r0, r5
 802c43a:	f7ff faa9 	bl	802b990 <_free_r>
 802c43e:	2000      	movs	r0, #0
 802c440:	6360      	str	r0, [r4, #52]	; 0x34
 802c442:	e7c1      	b.n	802c3c8 <__sflush_r+0x1c>
 802c444:	6a21      	ldr	r1, [r4, #32]
 802c446:	2301      	movs	r3, #1
 802c448:	4628      	mov	r0, r5
 802c44a:	47b0      	blx	r6
 802c44c:	1c41      	adds	r1, r0, #1
 802c44e:	d1c7      	bne.n	802c3e0 <__sflush_r+0x34>
 802c450:	682b      	ldr	r3, [r5, #0]
 802c452:	2b00      	cmp	r3, #0
 802c454:	d0c4      	beq.n	802c3e0 <__sflush_r+0x34>
 802c456:	2b1d      	cmp	r3, #29
 802c458:	d001      	beq.n	802c45e <__sflush_r+0xb2>
 802c45a:	2b16      	cmp	r3, #22
 802c45c:	d101      	bne.n	802c462 <__sflush_r+0xb6>
 802c45e:	602f      	str	r7, [r5, #0]
 802c460:	e7b1      	b.n	802c3c6 <__sflush_r+0x1a>
 802c462:	89a3      	ldrh	r3, [r4, #12]
 802c464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c468:	81a3      	strh	r3, [r4, #12]
 802c46a:	e7ad      	b.n	802c3c8 <__sflush_r+0x1c>
 802c46c:	690f      	ldr	r7, [r1, #16]
 802c46e:	2f00      	cmp	r7, #0
 802c470:	d0a9      	beq.n	802c3c6 <__sflush_r+0x1a>
 802c472:	0793      	lsls	r3, r2, #30
 802c474:	680e      	ldr	r6, [r1, #0]
 802c476:	bf08      	it	eq
 802c478:	694b      	ldreq	r3, [r1, #20]
 802c47a:	600f      	str	r7, [r1, #0]
 802c47c:	bf18      	it	ne
 802c47e:	2300      	movne	r3, #0
 802c480:	eba6 0807 	sub.w	r8, r6, r7
 802c484:	608b      	str	r3, [r1, #8]
 802c486:	f1b8 0f00 	cmp.w	r8, #0
 802c48a:	dd9c      	ble.n	802c3c6 <__sflush_r+0x1a>
 802c48c:	6a21      	ldr	r1, [r4, #32]
 802c48e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802c490:	4643      	mov	r3, r8
 802c492:	463a      	mov	r2, r7
 802c494:	4628      	mov	r0, r5
 802c496:	47b0      	blx	r6
 802c498:	2800      	cmp	r0, #0
 802c49a:	dc06      	bgt.n	802c4aa <__sflush_r+0xfe>
 802c49c:	89a3      	ldrh	r3, [r4, #12]
 802c49e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c4a2:	81a3      	strh	r3, [r4, #12]
 802c4a4:	f04f 30ff 	mov.w	r0, #4294967295
 802c4a8:	e78e      	b.n	802c3c8 <__sflush_r+0x1c>
 802c4aa:	4407      	add	r7, r0
 802c4ac:	eba8 0800 	sub.w	r8, r8, r0
 802c4b0:	e7e9      	b.n	802c486 <__sflush_r+0xda>
 802c4b2:	bf00      	nop
 802c4b4:	20400001 	.word	0x20400001

0802c4b8 <_fflush_r>:
 802c4b8:	b538      	push	{r3, r4, r5, lr}
 802c4ba:	690b      	ldr	r3, [r1, #16]
 802c4bc:	4605      	mov	r5, r0
 802c4be:	460c      	mov	r4, r1
 802c4c0:	b913      	cbnz	r3, 802c4c8 <_fflush_r+0x10>
 802c4c2:	2500      	movs	r5, #0
 802c4c4:	4628      	mov	r0, r5
 802c4c6:	bd38      	pop	{r3, r4, r5, pc}
 802c4c8:	b118      	cbz	r0, 802c4d2 <_fflush_r+0x1a>
 802c4ca:	6983      	ldr	r3, [r0, #24]
 802c4cc:	b90b      	cbnz	r3, 802c4d2 <_fflush_r+0x1a>
 802c4ce:	f000 f887 	bl	802c5e0 <__sinit>
 802c4d2:	4b14      	ldr	r3, [pc, #80]	; (802c524 <_fflush_r+0x6c>)
 802c4d4:	429c      	cmp	r4, r3
 802c4d6:	d11b      	bne.n	802c510 <_fflush_r+0x58>
 802c4d8:	686c      	ldr	r4, [r5, #4]
 802c4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c4de:	2b00      	cmp	r3, #0
 802c4e0:	d0ef      	beq.n	802c4c2 <_fflush_r+0xa>
 802c4e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802c4e4:	07d0      	lsls	r0, r2, #31
 802c4e6:	d404      	bmi.n	802c4f2 <_fflush_r+0x3a>
 802c4e8:	0599      	lsls	r1, r3, #22
 802c4ea:	d402      	bmi.n	802c4f2 <_fflush_r+0x3a>
 802c4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c4ee:	f000 f915 	bl	802c71c <__retarget_lock_acquire_recursive>
 802c4f2:	4628      	mov	r0, r5
 802c4f4:	4621      	mov	r1, r4
 802c4f6:	f7ff ff59 	bl	802c3ac <__sflush_r>
 802c4fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802c4fc:	07da      	lsls	r2, r3, #31
 802c4fe:	4605      	mov	r5, r0
 802c500:	d4e0      	bmi.n	802c4c4 <_fflush_r+0xc>
 802c502:	89a3      	ldrh	r3, [r4, #12]
 802c504:	059b      	lsls	r3, r3, #22
 802c506:	d4dd      	bmi.n	802c4c4 <_fflush_r+0xc>
 802c508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c50a:	f000 f909 	bl	802c720 <__retarget_lock_release_recursive>
 802c50e:	e7d9      	b.n	802c4c4 <_fflush_r+0xc>
 802c510:	4b05      	ldr	r3, [pc, #20]	; (802c528 <_fflush_r+0x70>)
 802c512:	429c      	cmp	r4, r3
 802c514:	d101      	bne.n	802c51a <_fflush_r+0x62>
 802c516:	68ac      	ldr	r4, [r5, #8]
 802c518:	e7df      	b.n	802c4da <_fflush_r+0x22>
 802c51a:	4b04      	ldr	r3, [pc, #16]	; (802c52c <_fflush_r+0x74>)
 802c51c:	429c      	cmp	r4, r3
 802c51e:	bf08      	it	eq
 802c520:	68ec      	ldreq	r4, [r5, #12]
 802c522:	e7da      	b.n	802c4da <_fflush_r+0x22>
 802c524:	08031dc0 	.word	0x08031dc0
 802c528:	08031de0 	.word	0x08031de0
 802c52c:	08031da0 	.word	0x08031da0

0802c530 <std>:
 802c530:	2300      	movs	r3, #0
 802c532:	b510      	push	{r4, lr}
 802c534:	4604      	mov	r4, r0
 802c536:	e9c0 3300 	strd	r3, r3, [r0]
 802c53a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c53e:	6083      	str	r3, [r0, #8]
 802c540:	8181      	strh	r1, [r0, #12]
 802c542:	6643      	str	r3, [r0, #100]	; 0x64
 802c544:	81c2      	strh	r2, [r0, #14]
 802c546:	6183      	str	r3, [r0, #24]
 802c548:	4619      	mov	r1, r3
 802c54a:	2208      	movs	r2, #8
 802c54c:	305c      	adds	r0, #92	; 0x5c
 802c54e:	f7ff fa17 	bl	802b980 <memset>
 802c552:	4b05      	ldr	r3, [pc, #20]	; (802c568 <std+0x38>)
 802c554:	6263      	str	r3, [r4, #36]	; 0x24
 802c556:	4b05      	ldr	r3, [pc, #20]	; (802c56c <std+0x3c>)
 802c558:	62a3      	str	r3, [r4, #40]	; 0x28
 802c55a:	4b05      	ldr	r3, [pc, #20]	; (802c570 <std+0x40>)
 802c55c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802c55e:	4b05      	ldr	r3, [pc, #20]	; (802c574 <std+0x44>)
 802c560:	6224      	str	r4, [r4, #32]
 802c562:	6323      	str	r3, [r4, #48]	; 0x30
 802c564:	bd10      	pop	{r4, pc}
 802c566:	bf00      	nop
 802c568:	0802c805 	.word	0x0802c805
 802c56c:	0802c827 	.word	0x0802c827
 802c570:	0802c85f 	.word	0x0802c85f
 802c574:	0802c883 	.word	0x0802c883

0802c578 <_cleanup_r>:
 802c578:	4901      	ldr	r1, [pc, #4]	; (802c580 <_cleanup_r+0x8>)
 802c57a:	f000 b8af 	b.w	802c6dc <_fwalk_reent>
 802c57e:	bf00      	nop
 802c580:	0802c4b9 	.word	0x0802c4b9

0802c584 <__sfmoreglue>:
 802c584:	b570      	push	{r4, r5, r6, lr}
 802c586:	1e4a      	subs	r2, r1, #1
 802c588:	2568      	movs	r5, #104	; 0x68
 802c58a:	4355      	muls	r5, r2
 802c58c:	460e      	mov	r6, r1
 802c58e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802c592:	f7ff fa4d 	bl	802ba30 <_malloc_r>
 802c596:	4604      	mov	r4, r0
 802c598:	b140      	cbz	r0, 802c5ac <__sfmoreglue+0x28>
 802c59a:	2100      	movs	r1, #0
 802c59c:	e9c0 1600 	strd	r1, r6, [r0]
 802c5a0:	300c      	adds	r0, #12
 802c5a2:	60a0      	str	r0, [r4, #8]
 802c5a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802c5a8:	f7ff f9ea 	bl	802b980 <memset>
 802c5ac:	4620      	mov	r0, r4
 802c5ae:	bd70      	pop	{r4, r5, r6, pc}

0802c5b0 <__sfp_lock_acquire>:
 802c5b0:	4801      	ldr	r0, [pc, #4]	; (802c5b8 <__sfp_lock_acquire+0x8>)
 802c5b2:	f000 b8b3 	b.w	802c71c <__retarget_lock_acquire_recursive>
 802c5b6:	bf00      	nop
 802c5b8:	2400cf3c 	.word	0x2400cf3c

0802c5bc <__sfp_lock_release>:
 802c5bc:	4801      	ldr	r0, [pc, #4]	; (802c5c4 <__sfp_lock_release+0x8>)
 802c5be:	f000 b8af 	b.w	802c720 <__retarget_lock_release_recursive>
 802c5c2:	bf00      	nop
 802c5c4:	2400cf3c 	.word	0x2400cf3c

0802c5c8 <__sinit_lock_acquire>:
 802c5c8:	4801      	ldr	r0, [pc, #4]	; (802c5d0 <__sinit_lock_acquire+0x8>)
 802c5ca:	f000 b8a7 	b.w	802c71c <__retarget_lock_acquire_recursive>
 802c5ce:	bf00      	nop
 802c5d0:	2400cf3b 	.word	0x2400cf3b

0802c5d4 <__sinit_lock_release>:
 802c5d4:	4801      	ldr	r0, [pc, #4]	; (802c5dc <__sinit_lock_release+0x8>)
 802c5d6:	f000 b8a3 	b.w	802c720 <__retarget_lock_release_recursive>
 802c5da:	bf00      	nop
 802c5dc:	2400cf3b 	.word	0x2400cf3b

0802c5e0 <__sinit>:
 802c5e0:	b510      	push	{r4, lr}
 802c5e2:	4604      	mov	r4, r0
 802c5e4:	f7ff fff0 	bl	802c5c8 <__sinit_lock_acquire>
 802c5e8:	69a3      	ldr	r3, [r4, #24]
 802c5ea:	b11b      	cbz	r3, 802c5f4 <__sinit+0x14>
 802c5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c5f0:	f7ff bff0 	b.w	802c5d4 <__sinit_lock_release>
 802c5f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802c5f8:	6523      	str	r3, [r4, #80]	; 0x50
 802c5fa:	4b13      	ldr	r3, [pc, #76]	; (802c648 <__sinit+0x68>)
 802c5fc:	4a13      	ldr	r2, [pc, #76]	; (802c64c <__sinit+0x6c>)
 802c5fe:	681b      	ldr	r3, [r3, #0]
 802c600:	62a2      	str	r2, [r4, #40]	; 0x28
 802c602:	42a3      	cmp	r3, r4
 802c604:	bf04      	itt	eq
 802c606:	2301      	moveq	r3, #1
 802c608:	61a3      	streq	r3, [r4, #24]
 802c60a:	4620      	mov	r0, r4
 802c60c:	f000 f820 	bl	802c650 <__sfp>
 802c610:	6060      	str	r0, [r4, #4]
 802c612:	4620      	mov	r0, r4
 802c614:	f000 f81c 	bl	802c650 <__sfp>
 802c618:	60a0      	str	r0, [r4, #8]
 802c61a:	4620      	mov	r0, r4
 802c61c:	f000 f818 	bl	802c650 <__sfp>
 802c620:	2200      	movs	r2, #0
 802c622:	60e0      	str	r0, [r4, #12]
 802c624:	2104      	movs	r1, #4
 802c626:	6860      	ldr	r0, [r4, #4]
 802c628:	f7ff ff82 	bl	802c530 <std>
 802c62c:	68a0      	ldr	r0, [r4, #8]
 802c62e:	2201      	movs	r2, #1
 802c630:	2109      	movs	r1, #9
 802c632:	f7ff ff7d 	bl	802c530 <std>
 802c636:	68e0      	ldr	r0, [r4, #12]
 802c638:	2202      	movs	r2, #2
 802c63a:	2112      	movs	r1, #18
 802c63c:	f7ff ff78 	bl	802c530 <std>
 802c640:	2301      	movs	r3, #1
 802c642:	61a3      	str	r3, [r4, #24]
 802c644:	e7d2      	b.n	802c5ec <__sinit+0xc>
 802c646:	bf00      	nop
 802c648:	08031d64 	.word	0x08031d64
 802c64c:	0802c579 	.word	0x0802c579

0802c650 <__sfp>:
 802c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c652:	4607      	mov	r7, r0
 802c654:	f7ff ffac 	bl	802c5b0 <__sfp_lock_acquire>
 802c658:	4b1e      	ldr	r3, [pc, #120]	; (802c6d4 <__sfp+0x84>)
 802c65a:	681e      	ldr	r6, [r3, #0]
 802c65c:	69b3      	ldr	r3, [r6, #24]
 802c65e:	b913      	cbnz	r3, 802c666 <__sfp+0x16>
 802c660:	4630      	mov	r0, r6
 802c662:	f7ff ffbd 	bl	802c5e0 <__sinit>
 802c666:	3648      	adds	r6, #72	; 0x48
 802c668:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802c66c:	3b01      	subs	r3, #1
 802c66e:	d503      	bpl.n	802c678 <__sfp+0x28>
 802c670:	6833      	ldr	r3, [r6, #0]
 802c672:	b30b      	cbz	r3, 802c6b8 <__sfp+0x68>
 802c674:	6836      	ldr	r6, [r6, #0]
 802c676:	e7f7      	b.n	802c668 <__sfp+0x18>
 802c678:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802c67c:	b9d5      	cbnz	r5, 802c6b4 <__sfp+0x64>
 802c67e:	4b16      	ldr	r3, [pc, #88]	; (802c6d8 <__sfp+0x88>)
 802c680:	60e3      	str	r3, [r4, #12]
 802c682:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802c686:	6665      	str	r5, [r4, #100]	; 0x64
 802c688:	f000 f847 	bl	802c71a <__retarget_lock_init_recursive>
 802c68c:	f7ff ff96 	bl	802c5bc <__sfp_lock_release>
 802c690:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802c694:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802c698:	6025      	str	r5, [r4, #0]
 802c69a:	61a5      	str	r5, [r4, #24]
 802c69c:	2208      	movs	r2, #8
 802c69e:	4629      	mov	r1, r5
 802c6a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802c6a4:	f7ff f96c 	bl	802b980 <memset>
 802c6a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802c6ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802c6b0:	4620      	mov	r0, r4
 802c6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c6b4:	3468      	adds	r4, #104	; 0x68
 802c6b6:	e7d9      	b.n	802c66c <__sfp+0x1c>
 802c6b8:	2104      	movs	r1, #4
 802c6ba:	4638      	mov	r0, r7
 802c6bc:	f7ff ff62 	bl	802c584 <__sfmoreglue>
 802c6c0:	4604      	mov	r4, r0
 802c6c2:	6030      	str	r0, [r6, #0]
 802c6c4:	2800      	cmp	r0, #0
 802c6c6:	d1d5      	bne.n	802c674 <__sfp+0x24>
 802c6c8:	f7ff ff78 	bl	802c5bc <__sfp_lock_release>
 802c6cc:	230c      	movs	r3, #12
 802c6ce:	603b      	str	r3, [r7, #0]
 802c6d0:	e7ee      	b.n	802c6b0 <__sfp+0x60>
 802c6d2:	bf00      	nop
 802c6d4:	08031d64 	.word	0x08031d64
 802c6d8:	ffff0001 	.word	0xffff0001

0802c6dc <_fwalk_reent>:
 802c6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c6e0:	4606      	mov	r6, r0
 802c6e2:	4688      	mov	r8, r1
 802c6e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802c6e8:	2700      	movs	r7, #0
 802c6ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802c6ee:	f1b9 0901 	subs.w	r9, r9, #1
 802c6f2:	d505      	bpl.n	802c700 <_fwalk_reent+0x24>
 802c6f4:	6824      	ldr	r4, [r4, #0]
 802c6f6:	2c00      	cmp	r4, #0
 802c6f8:	d1f7      	bne.n	802c6ea <_fwalk_reent+0xe>
 802c6fa:	4638      	mov	r0, r7
 802c6fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c700:	89ab      	ldrh	r3, [r5, #12]
 802c702:	2b01      	cmp	r3, #1
 802c704:	d907      	bls.n	802c716 <_fwalk_reent+0x3a>
 802c706:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c70a:	3301      	adds	r3, #1
 802c70c:	d003      	beq.n	802c716 <_fwalk_reent+0x3a>
 802c70e:	4629      	mov	r1, r5
 802c710:	4630      	mov	r0, r6
 802c712:	47c0      	blx	r8
 802c714:	4307      	orrs	r7, r0
 802c716:	3568      	adds	r5, #104	; 0x68
 802c718:	e7e9      	b.n	802c6ee <_fwalk_reent+0x12>

0802c71a <__retarget_lock_init_recursive>:
 802c71a:	4770      	bx	lr

0802c71c <__retarget_lock_acquire_recursive>:
 802c71c:	4770      	bx	lr

0802c71e <__retarget_lock_release>:
 802c71e:	4770      	bx	lr

0802c720 <__retarget_lock_release_recursive>:
 802c720:	4770      	bx	lr

0802c722 <__swhatbuf_r>:
 802c722:	b570      	push	{r4, r5, r6, lr}
 802c724:	460e      	mov	r6, r1
 802c726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c72a:	2900      	cmp	r1, #0
 802c72c:	b096      	sub	sp, #88	; 0x58
 802c72e:	4614      	mov	r4, r2
 802c730:	461d      	mov	r5, r3
 802c732:	da07      	bge.n	802c744 <__swhatbuf_r+0x22>
 802c734:	2300      	movs	r3, #0
 802c736:	602b      	str	r3, [r5, #0]
 802c738:	89b3      	ldrh	r3, [r6, #12]
 802c73a:	061a      	lsls	r2, r3, #24
 802c73c:	d410      	bmi.n	802c760 <__swhatbuf_r+0x3e>
 802c73e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c742:	e00e      	b.n	802c762 <__swhatbuf_r+0x40>
 802c744:	466a      	mov	r2, sp
 802c746:	f000 f8c3 	bl	802c8d0 <_fstat_r>
 802c74a:	2800      	cmp	r0, #0
 802c74c:	dbf2      	blt.n	802c734 <__swhatbuf_r+0x12>
 802c74e:	9a01      	ldr	r2, [sp, #4]
 802c750:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802c754:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802c758:	425a      	negs	r2, r3
 802c75a:	415a      	adcs	r2, r3
 802c75c:	602a      	str	r2, [r5, #0]
 802c75e:	e7ee      	b.n	802c73e <__swhatbuf_r+0x1c>
 802c760:	2340      	movs	r3, #64	; 0x40
 802c762:	2000      	movs	r0, #0
 802c764:	6023      	str	r3, [r4, #0]
 802c766:	b016      	add	sp, #88	; 0x58
 802c768:	bd70      	pop	{r4, r5, r6, pc}
	...

0802c76c <__smakebuf_r>:
 802c76c:	898b      	ldrh	r3, [r1, #12]
 802c76e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c770:	079d      	lsls	r5, r3, #30
 802c772:	4606      	mov	r6, r0
 802c774:	460c      	mov	r4, r1
 802c776:	d507      	bpl.n	802c788 <__smakebuf_r+0x1c>
 802c778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802c77c:	6023      	str	r3, [r4, #0]
 802c77e:	6123      	str	r3, [r4, #16]
 802c780:	2301      	movs	r3, #1
 802c782:	6163      	str	r3, [r4, #20]
 802c784:	b002      	add	sp, #8
 802c786:	bd70      	pop	{r4, r5, r6, pc}
 802c788:	ab01      	add	r3, sp, #4
 802c78a:	466a      	mov	r2, sp
 802c78c:	f7ff ffc9 	bl	802c722 <__swhatbuf_r>
 802c790:	9900      	ldr	r1, [sp, #0]
 802c792:	4605      	mov	r5, r0
 802c794:	4630      	mov	r0, r6
 802c796:	f7ff f94b 	bl	802ba30 <_malloc_r>
 802c79a:	b948      	cbnz	r0, 802c7b0 <__smakebuf_r+0x44>
 802c79c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c7a0:	059a      	lsls	r2, r3, #22
 802c7a2:	d4ef      	bmi.n	802c784 <__smakebuf_r+0x18>
 802c7a4:	f023 0303 	bic.w	r3, r3, #3
 802c7a8:	f043 0302 	orr.w	r3, r3, #2
 802c7ac:	81a3      	strh	r3, [r4, #12]
 802c7ae:	e7e3      	b.n	802c778 <__smakebuf_r+0xc>
 802c7b0:	4b0d      	ldr	r3, [pc, #52]	; (802c7e8 <__smakebuf_r+0x7c>)
 802c7b2:	62b3      	str	r3, [r6, #40]	; 0x28
 802c7b4:	89a3      	ldrh	r3, [r4, #12]
 802c7b6:	6020      	str	r0, [r4, #0]
 802c7b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c7bc:	81a3      	strh	r3, [r4, #12]
 802c7be:	9b00      	ldr	r3, [sp, #0]
 802c7c0:	6163      	str	r3, [r4, #20]
 802c7c2:	9b01      	ldr	r3, [sp, #4]
 802c7c4:	6120      	str	r0, [r4, #16]
 802c7c6:	b15b      	cbz	r3, 802c7e0 <__smakebuf_r+0x74>
 802c7c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c7cc:	4630      	mov	r0, r6
 802c7ce:	f000 f891 	bl	802c8f4 <_isatty_r>
 802c7d2:	b128      	cbz	r0, 802c7e0 <__smakebuf_r+0x74>
 802c7d4:	89a3      	ldrh	r3, [r4, #12]
 802c7d6:	f023 0303 	bic.w	r3, r3, #3
 802c7da:	f043 0301 	orr.w	r3, r3, #1
 802c7de:	81a3      	strh	r3, [r4, #12]
 802c7e0:	89a0      	ldrh	r0, [r4, #12]
 802c7e2:	4305      	orrs	r5, r0
 802c7e4:	81a5      	strh	r5, [r4, #12]
 802c7e6:	e7cd      	b.n	802c784 <__smakebuf_r+0x18>
 802c7e8:	0802c579 	.word	0x0802c579

0802c7ec <__malloc_lock>:
 802c7ec:	4801      	ldr	r0, [pc, #4]	; (802c7f4 <__malloc_lock+0x8>)
 802c7ee:	f7ff bf95 	b.w	802c71c <__retarget_lock_acquire_recursive>
 802c7f2:	bf00      	nop
 802c7f4:	2400cf38 	.word	0x2400cf38

0802c7f8 <__malloc_unlock>:
 802c7f8:	4801      	ldr	r0, [pc, #4]	; (802c800 <__malloc_unlock+0x8>)
 802c7fa:	f7ff bf91 	b.w	802c720 <__retarget_lock_release_recursive>
 802c7fe:	bf00      	nop
 802c800:	2400cf38 	.word	0x2400cf38

0802c804 <__sread>:
 802c804:	b510      	push	{r4, lr}
 802c806:	460c      	mov	r4, r1
 802c808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c80c:	f000 f894 	bl	802c938 <_read_r>
 802c810:	2800      	cmp	r0, #0
 802c812:	bfab      	itete	ge
 802c814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802c816:	89a3      	ldrhlt	r3, [r4, #12]
 802c818:	181b      	addge	r3, r3, r0
 802c81a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802c81e:	bfac      	ite	ge
 802c820:	6563      	strge	r3, [r4, #84]	; 0x54
 802c822:	81a3      	strhlt	r3, [r4, #12]
 802c824:	bd10      	pop	{r4, pc}

0802c826 <__swrite>:
 802c826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c82a:	461f      	mov	r7, r3
 802c82c:	898b      	ldrh	r3, [r1, #12]
 802c82e:	05db      	lsls	r3, r3, #23
 802c830:	4605      	mov	r5, r0
 802c832:	460c      	mov	r4, r1
 802c834:	4616      	mov	r6, r2
 802c836:	d505      	bpl.n	802c844 <__swrite+0x1e>
 802c838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c83c:	2302      	movs	r3, #2
 802c83e:	2200      	movs	r2, #0
 802c840:	f000 f868 	bl	802c914 <_lseek_r>
 802c844:	89a3      	ldrh	r3, [r4, #12]
 802c846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c84a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802c84e:	81a3      	strh	r3, [r4, #12]
 802c850:	4632      	mov	r2, r6
 802c852:	463b      	mov	r3, r7
 802c854:	4628      	mov	r0, r5
 802c856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c85a:	f000 b817 	b.w	802c88c <_write_r>

0802c85e <__sseek>:
 802c85e:	b510      	push	{r4, lr}
 802c860:	460c      	mov	r4, r1
 802c862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c866:	f000 f855 	bl	802c914 <_lseek_r>
 802c86a:	1c43      	adds	r3, r0, #1
 802c86c:	89a3      	ldrh	r3, [r4, #12]
 802c86e:	bf15      	itete	ne
 802c870:	6560      	strne	r0, [r4, #84]	; 0x54
 802c872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802c876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802c87a:	81a3      	strheq	r3, [r4, #12]
 802c87c:	bf18      	it	ne
 802c87e:	81a3      	strhne	r3, [r4, #12]
 802c880:	bd10      	pop	{r4, pc}

0802c882 <__sclose>:
 802c882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c886:	f000 b813 	b.w	802c8b0 <_close_r>
	...

0802c88c <_write_r>:
 802c88c:	b538      	push	{r3, r4, r5, lr}
 802c88e:	4d07      	ldr	r5, [pc, #28]	; (802c8ac <_write_r+0x20>)
 802c890:	4604      	mov	r4, r0
 802c892:	4608      	mov	r0, r1
 802c894:	4611      	mov	r1, r2
 802c896:	2200      	movs	r2, #0
 802c898:	602a      	str	r2, [r5, #0]
 802c89a:	461a      	mov	r2, r3
 802c89c:	f7d7 fab7 	bl	8003e0e <_write>
 802c8a0:	1c43      	adds	r3, r0, #1
 802c8a2:	d102      	bne.n	802c8aa <_write_r+0x1e>
 802c8a4:	682b      	ldr	r3, [r5, #0]
 802c8a6:	b103      	cbz	r3, 802c8aa <_write_r+0x1e>
 802c8a8:	6023      	str	r3, [r4, #0]
 802c8aa:	bd38      	pop	{r3, r4, r5, pc}
 802c8ac:	2400cf44 	.word	0x2400cf44

0802c8b0 <_close_r>:
 802c8b0:	b538      	push	{r3, r4, r5, lr}
 802c8b2:	4d06      	ldr	r5, [pc, #24]	; (802c8cc <_close_r+0x1c>)
 802c8b4:	2300      	movs	r3, #0
 802c8b6:	4604      	mov	r4, r0
 802c8b8:	4608      	mov	r0, r1
 802c8ba:	602b      	str	r3, [r5, #0]
 802c8bc:	f7d7 fac3 	bl	8003e46 <_close>
 802c8c0:	1c43      	adds	r3, r0, #1
 802c8c2:	d102      	bne.n	802c8ca <_close_r+0x1a>
 802c8c4:	682b      	ldr	r3, [r5, #0]
 802c8c6:	b103      	cbz	r3, 802c8ca <_close_r+0x1a>
 802c8c8:	6023      	str	r3, [r4, #0]
 802c8ca:	bd38      	pop	{r3, r4, r5, pc}
 802c8cc:	2400cf44 	.word	0x2400cf44

0802c8d0 <_fstat_r>:
 802c8d0:	b538      	push	{r3, r4, r5, lr}
 802c8d2:	4d07      	ldr	r5, [pc, #28]	; (802c8f0 <_fstat_r+0x20>)
 802c8d4:	2300      	movs	r3, #0
 802c8d6:	4604      	mov	r4, r0
 802c8d8:	4608      	mov	r0, r1
 802c8da:	4611      	mov	r1, r2
 802c8dc:	602b      	str	r3, [r5, #0]
 802c8de:	f7d7 fabe 	bl	8003e5e <_fstat>
 802c8e2:	1c43      	adds	r3, r0, #1
 802c8e4:	d102      	bne.n	802c8ec <_fstat_r+0x1c>
 802c8e6:	682b      	ldr	r3, [r5, #0]
 802c8e8:	b103      	cbz	r3, 802c8ec <_fstat_r+0x1c>
 802c8ea:	6023      	str	r3, [r4, #0]
 802c8ec:	bd38      	pop	{r3, r4, r5, pc}
 802c8ee:	bf00      	nop
 802c8f0:	2400cf44 	.word	0x2400cf44

0802c8f4 <_isatty_r>:
 802c8f4:	b538      	push	{r3, r4, r5, lr}
 802c8f6:	4d06      	ldr	r5, [pc, #24]	; (802c910 <_isatty_r+0x1c>)
 802c8f8:	2300      	movs	r3, #0
 802c8fa:	4604      	mov	r4, r0
 802c8fc:	4608      	mov	r0, r1
 802c8fe:	602b      	str	r3, [r5, #0]
 802c900:	f7d7 fabd 	bl	8003e7e <_isatty>
 802c904:	1c43      	adds	r3, r0, #1
 802c906:	d102      	bne.n	802c90e <_isatty_r+0x1a>
 802c908:	682b      	ldr	r3, [r5, #0]
 802c90a:	b103      	cbz	r3, 802c90e <_isatty_r+0x1a>
 802c90c:	6023      	str	r3, [r4, #0]
 802c90e:	bd38      	pop	{r3, r4, r5, pc}
 802c910:	2400cf44 	.word	0x2400cf44

0802c914 <_lseek_r>:
 802c914:	b538      	push	{r3, r4, r5, lr}
 802c916:	4d07      	ldr	r5, [pc, #28]	; (802c934 <_lseek_r+0x20>)
 802c918:	4604      	mov	r4, r0
 802c91a:	4608      	mov	r0, r1
 802c91c:	4611      	mov	r1, r2
 802c91e:	2200      	movs	r2, #0
 802c920:	602a      	str	r2, [r5, #0]
 802c922:	461a      	mov	r2, r3
 802c924:	f7d7 fab6 	bl	8003e94 <_lseek>
 802c928:	1c43      	adds	r3, r0, #1
 802c92a:	d102      	bne.n	802c932 <_lseek_r+0x1e>
 802c92c:	682b      	ldr	r3, [r5, #0]
 802c92e:	b103      	cbz	r3, 802c932 <_lseek_r+0x1e>
 802c930:	6023      	str	r3, [r4, #0]
 802c932:	bd38      	pop	{r3, r4, r5, pc}
 802c934:	2400cf44 	.word	0x2400cf44

0802c938 <_read_r>:
 802c938:	b538      	push	{r3, r4, r5, lr}
 802c93a:	4d07      	ldr	r5, [pc, #28]	; (802c958 <_read_r+0x20>)
 802c93c:	4604      	mov	r4, r0
 802c93e:	4608      	mov	r0, r1
 802c940:	4611      	mov	r1, r2
 802c942:	2200      	movs	r2, #0
 802c944:	602a      	str	r2, [r5, #0]
 802c946:	461a      	mov	r2, r3
 802c948:	f7d7 fa44 	bl	8003dd4 <_read>
 802c94c:	1c43      	adds	r3, r0, #1
 802c94e:	d102      	bne.n	802c956 <_read_r+0x1e>
 802c950:	682b      	ldr	r3, [r5, #0]
 802c952:	b103      	cbz	r3, 802c956 <_read_r+0x1e>
 802c954:	6023      	str	r3, [r4, #0]
 802c956:	bd38      	pop	{r3, r4, r5, pc}
 802c958:	2400cf44 	.word	0x2400cf44

0802c95c <_init>:
 802c95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c95e:	bf00      	nop
 802c960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c962:	bc08      	pop	{r3}
 802c964:	469e      	mov	lr, r3
 802c966:	4770      	bx	lr

0802c968 <_fini>:
 802c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c96a:	bf00      	nop
 802c96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c96e:	bc08      	pop	{r3}
 802c970:	469e      	mov	lr, r3
 802c972:	4770      	bx	lr
